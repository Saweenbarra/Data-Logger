
Data-Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016ba4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  08016e44  08016e44  00026e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017230  08017230  000301d0  2**0
                  CONTENTS
  4 .ARM          00000008  08017230  08017230  00027230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017238  08017238  000301d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017238  08017238  00027238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801723c  0801723c  0002723c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  24000000  08017240  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002160  240001d0  08017410  000301d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24002330  08017410  00032330  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000473c5  00000000  00000000  000301fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000777f  00000000  00000000  000775c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002240  00000000  00000000  0007ed48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f40  00000000  00000000  00080f88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0004298c  00000000  00000000  00082ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00026df8  00000000  00000000  000c5854  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00177926  00000000  00000000  000ec64c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00263f72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000971c  00000000  00000000  00263ff0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d0 	.word	0x240001d0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016e2c 	.word	0x08016e2c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001d4 	.word	0x240001d4
 80002dc:	08016e2c 	.word	0x08016e2c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <FDCAN_Config>:
#include <stdio.h>
#include <string.h>
#include <CANFD.h>
#include <myprintf.h>

void FDCAN_Config(FDCAN_HandleTypeDef *hfdcan){
 8000690:	b580      	push	{r7, lr}
 8000692:	b08c      	sub	sp, #48	; 0x30
 8000694:	af02      	add	r7, sp, #8
 8000696:	6078      	str	r0, [r7, #4]
	FDCAN_FilterTypeDef sFilterConfig;

	  /* Configure Rx filter */
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterIndex = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80006a4:	2301      	movs	r3, #1
 80006a6:	617b      	str	r3, [r7, #20]
	  sFilterConfig.FilterID1 = 0x321;
 80006a8:	f240 3321 	movw	r3, #801	; 0x321
 80006ac:	61bb      	str	r3, [r7, #24]
	  sFilterConfig.FilterID2 = 0x7FF;
 80006ae:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006b2:	61fb      	str	r3, [r7, #28]
	  if (HAL_FDCAN_ConfigFilter(hfdcan, &sFilterConfig) == HAL_OK)
 80006b4:	f107 0308 	add.w	r3, r7, #8
 80006b8:	4619      	mov	r1, r3
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f004 f86a 	bl	8004794 <HAL_FDCAN_ConfigFilter>
	  }

	  /* Configure global filter:
	     Filter all remote frames with STD and EXT ID
	     Reject non matching frames with STD ID and EXT ID */
	  if (HAL_FDCAN_ConfigGlobalFilter(hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 80006c0:	2300      	movs	r3, #0
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2300      	movs	r3, #0
 80006c6:	2202      	movs	r2, #2
 80006c8:	2102      	movs	r1, #2
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f004 f8d8 	bl	8004880 <HAL_FDCAN_ConfigGlobalFilter>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <FDCAN_Config+0x4a>
	  {
	    Error_Handler();
 80006d6:	f000 ff8f 	bl	80015f8 <Error_Handler>
	  }
	if (HAL_FDCAN_Start(hfdcan) != HAL_OK)
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f004 f920 	bl	8004920 <HAL_FDCAN_Start>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <FDCAN_Config+0x5a>
	  {
	    Error_Handler();
 80006e6:	f000 ff87 	bl	80015f8 <Error_Handler>
	  }
	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80006ea:	2200      	movs	r2, #0
 80006ec:	2101      	movs	r1, #1
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f004 faa0 	bl	8004c34 <HAL_FDCAN_ActivateNotification>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <FDCAN_Config+0x6e>
	  {
	    /* Notification Error */
	    Error_Handler();
 80006fa:	f000 ff7d 	bl	80015f8 <Error_Handler>
	  }
	HAL_FDCAN_EnableTxDelayCompensation(hfdcan);
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f004 f8eb 	bl	80048da <HAL_FDCAN_EnableTxDelayCompensation>

}
 8000704:	bf00      	nop
 8000706:	3728      	adds	r7, #40	; 0x28
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan1, uint32_t RxFifo0ITs)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
	if (HAL_FDCAN_GetRxMessage(hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000716:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <HAL_FDCAN_RxFifo0Callback+0x34>)
 8000718:	4a0a      	ldr	r2, [pc, #40]	; (8000744 <HAL_FDCAN_RxFifo0Callback+0x38>)
 800071a:	2140      	movs	r1, #64	; 0x40
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f004 f92b 	bl	8004978 <HAL_FDCAN_GetRxMessage>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d106      	bne.n	8000736 <HAL_FDCAN_RxFifo0Callback+0x2a>
			      {
					HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000728:	2101      	movs	r1, #1
 800072a:	4807      	ldr	r0, [pc, #28]	; (8000748 <HAL_FDCAN_RxFifo0Callback+0x3c>)
 800072c:	f005 f96d 	bl	8005a0a <HAL_GPIO_TogglePin>
					printf("Packet Acquired!\n");
 8000730:	4806      	ldr	r0, [pc, #24]	; (800074c <HAL_FDCAN_RxFifo0Callback+0x40>)
 8000732:	f015 fb81 	bl	8015e38 <puts>
				  			  printf("%c",RxData[i]);
				  	  }
				  	  printf("\n");
				  	*/
			      }
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	24000a44 	.word	0x24000a44
 8000744:	24000a84 	.word	0x24000a84
 8000748:	58020400 	.word	0x58020400
 800074c:	08016e44 	.word	0x08016e44

08000750 <gps_msg_config>:
#include "main.h"
#include <myprintf.h>
#include <stdbool.h>
#include <buffer.h>

int gps_msg_config(UART_HandleTypeDef *huart, const char *nema, int rus1){
 8000750:	b580      	push	{r7, lr}
 8000752:	b09e      	sub	sp, #120	; 0x78
 8000754:	af02      	add	r7, sp, #8
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
	if (strlen(nema) != 3) return 1;
 800075c:	68b8      	ldr	r0, [r7, #8]
 800075e:	f7ff fdbf 	bl	80002e0 <strlen>
 8000762:	4603      	mov	r3, r0
 8000764:	2b03      	cmp	r3, #3
 8000766:	d001      	beq.n	800076c <gps_msg_config+0x1c>
 8000768:	2301      	movs	r3, #1
 800076a:	e052      	b.n	8000812 <gps_msg_config+0xc2>


	char msg[32];
	snprintf(msg, sizeof(msg)-1,"PUBX,40,%s,0,%i,0,0,0,0", nema, rus1);
 800076c:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	4a29      	ldr	r2, [pc, #164]	; (800081c <gps_msg_config+0xcc>)
 8000778:	211f      	movs	r1, #31
 800077a:	f015 fb75 	bl	8015e68 <sniprintf>

	int checksum_int = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 8000782:	2300      	movs	r3, #0
 8000784:	66bb      	str	r3, [r7, #104]	; 0x68
 8000786:	e00b      	b.n	80007a0 <gps_msg_config+0x50>
		checksum_int ^= (unsigned char)msg[i];
 8000788:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800078c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800078e:	4413      	add	r3, r2
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	461a      	mov	r2, r3
 8000794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000796:	4053      	eors	r3, r2
 8000798:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 800079a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800079c:	3301      	adds	r3, #1
 800079e:	66bb      	str	r3, [r7, #104]	; 0x68
 80007a0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80007a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80007a6:	4413      	add	r3, r2
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d002      	beq.n	80007b4 <gps_msg_config+0x64>
 80007ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80007b0:	2b1f      	cmp	r3, #31
 80007b2:	dde9      	ble.n	8000788 <gps_msg_config+0x38>

	char checksum[8];
	snprintf(checksum, sizeof(checksum)-1, "*%.2X", checksum_int);
 80007b4:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80007b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80007ba:	4a19      	ldr	r2, [pc, #100]	; (8000820 <gps_msg_config+0xd0>)
 80007bc:	2107      	movs	r1, #7
 80007be:	f015 fb53 	bl	8015e68 <sniprintf>

	char messagetosend[42];
	snprintf(messagetosend, sizeof(messagetosend)-1, "$%s%s\r\n", msg, checksum);
 80007c2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80007c6:	f107 0014 	add.w	r0, r7, #20
 80007ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	4613      	mov	r3, r2
 80007d2:	4a14      	ldr	r2, [pc, #80]	; (8000824 <gps_msg_config+0xd4>)
 80007d4:	2129      	movs	r1, #41	; 0x29
 80007d6:	f015 fb47 	bl	8015e68 <sniprintf>
	printf("\n\rSending: ");
 80007da:	4813      	ldr	r0, [pc, #76]	; (8000828 <gps_msg_config+0xd8>)
 80007dc:	f015 fab8 	bl	8015d50 <iprintf>
	printf("%s", messagetosend);
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	4619      	mov	r1, r3
 80007e6:	4811      	ldr	r0, [pc, #68]	; (800082c <gps_msg_config+0xdc>)
 80007e8:	f015 fab2 	bl	8015d50 <iprintf>
	if (HAL_UART_Transmit(huart, messagetosend, strlen(messagetosend), 100) != HAL_OK){
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff fd75 	bl	80002e0 <strlen>
 80007f6:	4603      	mov	r3, r0
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	f107 0114 	add.w	r1, r7, #20
 80007fe:	2364      	movs	r3, #100	; 0x64
 8000800:	68f8      	ldr	r0, [r7, #12]
 8000802:	f00b fd7a 	bl	800c2fa <HAL_UART_Transmit>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <gps_msg_config+0xc0>
		Error_Handler();
 800080c:	f000 fef4 	bl	80015f8 <Error_Handler>
	}
	return 0;
 8000810:	2300      	movs	r3, #0
}
 8000812:	4618      	mov	r0, r3
 8000814:	3770      	adds	r7, #112	; 0x70
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	08016e58 	.word	0x08016e58
 8000820:	08016e70 	.word	0x08016e70
 8000824:	08016e78 	.word	0x08016e78
 8000828:	08016e80 	.word	0x08016e80
 800082c:	08016e8c 	.word	0x08016e8c

08000830 <gps_rate_config>:

int gps_rate_config(UART_HandleTypeDef *huart, uint16_t measRate, uint16_t navRate, uint16_t timeRef){
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	; 0x28
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	4608      	mov	r0, r1
 800083a:	4611      	mov	r1, r2
 800083c:	461a      	mov	r2, r3
 800083e:	4603      	mov	r3, r0
 8000840:	817b      	strh	r3, [r7, #10]
 8000842:	460b      	mov	r3, r1
 8000844:	813b      	strh	r3, [r7, #8]
 8000846:	4613      	mov	r3, r2
 8000848:	80fb      	strh	r3, [r7, #6]
		uint16_t length = 6;
 800084a:	2306      	movs	r3, #6
 800084c:	83fb      	strh	r3, [r7, #30]
		uint8_t msg[14];
		msg[0] = 0xb5;
 800084e:	23b5      	movs	r3, #181	; 0xb5
 8000850:	743b      	strb	r3, [r7, #16]
		msg[1] = 0x62;
 8000852:	2362      	movs	r3, #98	; 0x62
 8000854:	747b      	strb	r3, [r7, #17]
		msg[2] = 0x06;
 8000856:	2306      	movs	r3, #6
 8000858:	74bb      	strb	r3, [r7, #18]
		msg[3] = 0x08;
 800085a:	2308      	movs	r3, #8
 800085c:	74fb      	strb	r3, [r7, #19]
		msg[4] = length;
 800085e:	8bfb      	ldrh	r3, [r7, #30]
 8000860:	b2db      	uxtb	r3, r3
 8000862:	753b      	strb	r3, [r7, #20]
		msg[5] = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	757b      	strb	r3, [r7, #21]
		msg[6] = measRate;
 8000868:	897b      	ldrh	r3, [r7, #10]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	75bb      	strb	r3, [r7, #22]
		msg[7] = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	75fb      	strb	r3, [r7, #23]
		msg[8] = navRate;
 8000872:	893b      	ldrh	r3, [r7, #8]
 8000874:	b2db      	uxtb	r3, r3
 8000876:	763b      	strb	r3, [r7, #24]
		msg[9] = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	767b      	strb	r3, [r7, #25]
		msg[10] = timeRef;
 800087c:	88fb      	ldrh	r3, [r7, #6]
 800087e:	b2db      	uxtb	r3, r3
 8000880:	76bb      	strb	r3, [r7, #26]
		msg[11] = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	76fb      	strb	r3, [r7, #27]

		uint8_t CK_A = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t CK_B = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 8000892:	2302      	movs	r3, #2
 8000894:	623b      	str	r3, [r7, #32]
 8000896:	e013      	b.n	80008c0 <gps_rate_config+0x90>
	        CK_A = CK_A + msg[i];
 8000898:	f107 0210 	add.w	r2, r7, #16
 800089c:	6a3b      	ldr	r3, [r7, #32]
 800089e:	4413      	add	r3, r2
 80008a0:	781a      	ldrb	r2, [r3, #0]
 80008a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008a6:	4413      	add	r3, r2
 80008a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	        CK_A &= 0xFF;
	        CK_B = CK_B + CK_A;
 80008ac:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80008b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008b4:	4413      	add	r3, r2
 80008b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 80008ba:	6a3b      	ldr	r3, [r7, #32]
 80008bc:	3301      	adds	r3, #1
 80008be:	623b      	str	r3, [r7, #32]
 80008c0:	6a3b      	ldr	r3, [r7, #32]
 80008c2:	2b0b      	cmp	r3, #11
 80008c4:	dde8      	ble.n	8000898 <gps_rate_config+0x68>
	        CK_B &= 0xFF;
	    }
		msg[12] = CK_A;
 80008c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008ca:	773b      	strb	r3, [r7, #28]
		msg[13] = CK_B;
 80008cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80008d0:	777b      	strb	r3, [r7, #29]

		if (HAL_UART_Transmit(huart, msg, sizeof(msg), 100) != HAL_OK){
 80008d2:	f107 0110 	add.w	r1, r7, #16
 80008d6:	2364      	movs	r3, #100	; 0x64
 80008d8:	220e      	movs	r2, #14
 80008da:	68f8      	ldr	r0, [r7, #12]
 80008dc:	f00b fd0d 	bl	800c2fa <HAL_UART_Transmit>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d003      	beq.n	80008ee <gps_rate_config+0xbe>
				Error_Handler();
 80008e6:	f000 fe87 	bl	80015f8 <Error_Handler>
				return 1;
 80008ea:	2301      	movs	r3, #1
 80008ec:	e000      	b.n	80008f0 <gps_rate_config+0xc0>
			}
		return 0;
 80008ee:	2300      	movs	r3, #0
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3728      	adds	r7, #40	; 0x28
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <HAL_UART_RxHalfCpltCallback>:
}

int GPS_flag = 0;

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	  }
  }*/
  //for(int i=0; i<BUFFLENGTH; i++){
  	  		  //printf("%c", rxBuf[i]);
  	  //}
  GPS_flag = 1;
 8000900:	4b04      	ldr	r3, [pc, #16]	; (8000914 <HAL_UART_RxHalfCpltCallback+0x1c>)
 8000902:	2201      	movs	r2, #1
 8000904:	601a      	str	r2, [r3, #0]
  //WriteToBuff(rxBuf+70, BUFFLENGTH/2);
  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);*/
  //printf("GPS Recieved\n");

}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	240001ec 	.word	0x240001ec

08000918 <WriteToBuff>:
#include <myprintf.h>


DataBuff DataBuffer = {.Data.DataBuff = 0, .counter = 0};

int WriteToBuff(char Data[], int len){
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	6039      	str	r1, [r7, #0]
  if(len <= 1 || len >= Bufflength){
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	2b01      	cmp	r3, #1
 8000926:	dd03      	ble.n	8000930 <WriteToBuff+0x18>
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800092e:	db01      	blt.n	8000934 <WriteToBuff+0x1c>
    return 3; //Dude dont try and break it
 8000930:	2303      	movs	r3, #3
 8000932:	e077      	b.n	8000a24 <WriteToBuff+0x10c>
  }

  if(DataBuffer.counter < Bufflength && DataBuffer.counter + len >= Bufflength){
 8000934:	4b3d      	ldr	r3, [pc, #244]	; (8000a2c <WriteToBuff+0x114>)
 8000936:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800093a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800093e:	d22f      	bcs.n	80009a0 <WriteToBuff+0x88>
 8000940:	4b3a      	ldr	r3, [pc, #232]	; (8000a2c <WriteToBuff+0x114>)
 8000942:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	4413      	add	r3, r2
 800094a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800094e:	d327      	bcc.n	80009a0 <WriteToBuff+0x88>
    DataBuffer.counter = Bufflength;
 8000950:	4b36      	ldr	r3, [pc, #216]	; (8000a2c <WriteToBuff+0x114>)
 8000952:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000956:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
    memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 800095a:	4b34      	ldr	r3, [pc, #208]	; (8000a2c <WriteToBuff+0x114>)
 800095c:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8000960:	4a32      	ldr	r2, [pc, #200]	; (8000a2c <WriteToBuff+0x114>)
 8000962:	4413      	add	r3, r2
 8000964:	683a      	ldr	r2, [r7, #0]
 8000966:	6879      	ldr	r1, [r7, #4]
 8000968:	4618      	mov	r0, r3
 800096a:	f015 f935 	bl	8015bd8 <memcpy>
    DataBuffer.counter += len;
 800096e:	4b2f      	ldr	r3, [pc, #188]	; (8000a2c <WriteToBuff+0x114>)
 8000970:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	4413      	add	r3, r2
 8000978:	4a2c      	ldr	r2, [pc, #176]	; (8000a2c <WriteToBuff+0x114>)
 800097a:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
    if(f_write(&myFILE, DataBuffer.Data.DataBuff1, sizeof(DataBuffer.Data.DataBuff1), &testByte) == 0){
 800097e:	4b2c      	ldr	r3, [pc, #176]	; (8000a30 <WriteToBuff+0x118>)
 8000980:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000984:	4929      	ldr	r1, [pc, #164]	; (8000a2c <WriteToBuff+0x114>)
 8000986:	482b      	ldr	r0, [pc, #172]	; (8000a34 <WriteToBuff+0x11c>)
 8000988:	f014 f975 	bl	8014c76 <f_write>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d104      	bne.n	800099c <WriteToBuff+0x84>

      //memset(DataBuffer.Data.DataBuff1, 0, sizeof(DataBuffer.Data.DataBuff1)); //Clear buffer after writing
      printf("Buffer 1 has been written\n");
 8000992:	4829      	ldr	r0, [pc, #164]	; (8000a38 <WriteToBuff+0x120>)
 8000994:	f015 fa50 	bl	8015e38 <puts>
      return 1; //buffer 1 has been written
 8000998:	2301      	movs	r3, #1
 800099a:	e043      	b.n	8000a24 <WriteToBuff+0x10c>
    }
    return 4; //could not write :(
 800099c:	2304      	movs	r3, #4
 800099e:	e041      	b.n	8000a24 <WriteToBuff+0x10c>
  }

  if(DataBuffer.counter + len >= 2*Bufflength){
 80009a0:	4b22      	ldr	r3, [pc, #136]	; (8000a2c <WriteToBuff+0x114>)
 80009a2:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	4413      	add	r3, r2
 80009aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80009ae:	d326      	bcc.n	80009fe <WriteToBuff+0xe6>
    DataBuffer.counter = 0;
 80009b0:	4b1e      	ldr	r3, [pc, #120]	; (8000a2c <WriteToBuff+0x114>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
    memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 80009b8:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <WriteToBuff+0x114>)
 80009ba:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 80009be:	4a1b      	ldr	r2, [pc, #108]	; (8000a2c <WriteToBuff+0x114>)
 80009c0:	4413      	add	r3, r2
 80009c2:	683a      	ldr	r2, [r7, #0]
 80009c4:	6879      	ldr	r1, [r7, #4]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f015 f906 	bl	8015bd8 <memcpy>
    DataBuffer.counter += len;
 80009cc:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <WriteToBuff+0x114>)
 80009ce:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	4413      	add	r3, r2
 80009d6:	4a15      	ldr	r2, [pc, #84]	; (8000a2c <WriteToBuff+0x114>)
 80009d8:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
    if(f_write(&myFILE, DataBuffer.Data.DataBuff2, sizeof(DataBuffer.Data.DataBuff2), &testByte) == 0){
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <WriteToBuff+0x118>)
 80009de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009e2:	4916      	ldr	r1, [pc, #88]	; (8000a3c <WriteToBuff+0x124>)
 80009e4:	4813      	ldr	r0, [pc, #76]	; (8000a34 <WriteToBuff+0x11c>)
 80009e6:	f014 f946 	bl	8014c76 <f_write>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d104      	bne.n	80009fa <WriteToBuff+0xe2>
      //memset(DataBuffer.Data.DataBuff2, 0, sizeof(DataBuffer.Data.DataBuff2)); //Clear buffer after writing
      printf("Buffer 2 has been written\n");
 80009f0:	4813      	ldr	r0, [pc, #76]	; (8000a40 <WriteToBuff+0x128>)
 80009f2:	f015 fa21 	bl	8015e38 <puts>
      return 2; //buffer 2 has been written
 80009f6:	2302      	movs	r3, #2
 80009f8:	e014      	b.n	8000a24 <WriteToBuff+0x10c>
    }
    return 4; //could not write :(
 80009fa:	2304      	movs	r3, #4
 80009fc:	e012      	b.n	8000a24 <WriteToBuff+0x10c>
  }
/*if(DataBuffer.counter + len >= 2*Bufflength){
	f_write(&myFILE, DataBuffer.Data.DataBuff, sizeof(DataBuffer.Data.DataBuff), &testByte);
	DataBuffer.counter = 0;
}*/
  memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 80009fe:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <WriteToBuff+0x114>)
 8000a00:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8000a04:	4a09      	ldr	r2, [pc, #36]	; (8000a2c <WriteToBuff+0x114>)
 8000a06:	4413      	add	r3, r2
 8000a08:	683a      	ldr	r2, [r7, #0]
 8000a0a:	6879      	ldr	r1, [r7, #4]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f015 f8e3 	bl	8015bd8 <memcpy>
  DataBuffer.counter += len;
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <WriteToBuff+0x114>)
 8000a14:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	4a03      	ldr	r2, [pc, #12]	; (8000a2c <WriteToBuff+0x114>)
 8000a1e:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
  return 0; //moved data to buffer
 8000a22:	2300      	movs	r3, #0
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	240001f0 	.word	0x240001f0
 8000a30:	24000f5c 	.word	0x24000f5c
 8000a34:	24000aac 	.word	0x24000aac
 8000a38:	08016e98 	.word	0x08016e98
 8000a3c:	240005f0 	.word	0x240005f0
 8000a40:	08016eb4 	.word	0x08016eb4

08000a44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a46:	f2ad 4d0c 	subw	sp, sp, #1036	; 0x40c
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a4c:	f001 fa18 	bl	8001e80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a50:	f000 f96e 	bl	8000d30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a54:	f000 fcce 	bl	80013f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a58:	f000 fcac 	bl	80013b4 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8000a5c:	f000 fb9a 	bl	8001194 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000a60:	f00e ff80 	bl	800f964 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8000a64:	f014 fb80 	bl	8015168 <MX_USB_DEVICE_Init>
  MX_FDCAN1_Init();
 8000a68:	f000 fa6c 	bl	8000f44 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000a6c:	f000 fad0 	bl	8001010 <MX_FDCAN2_Init>
  MX_UART8_Init();
 8000a70:	f000 fc08 	bl	8001284 <MX_UART8_Init>
  MX_USART3_UART_Init();
 8000a74:	f000 fc52 	bl	800131c <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000a78:	f000 fbae 	bl	80011d8 <MX_SPI1_Init>
  MX_RTC_Init();
 8000a7c:	f000 fb2c 	bl	80010d8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting\n");
 8000a80:	4887      	ldr	r0, [pc, #540]	; (8000ca0 <main+0x25c>)
 8000a82:	f015 f9d9 	bl	8015e38 <puts>
  FDCAN_Config(&hfdcan1);
 8000a86:	4887      	ldr	r0, [pc, #540]	; (8000ca4 <main+0x260>)
 8000a88:	f7ff fe02 	bl	8000690 <FDCAN_Config>
  //GPS DMA
  HAL_UART_Receive_DMA(&huart3, (uint8_t *)rxBuf, BUFFLENGTH);
 8000a8c:	2246      	movs	r2, #70	; 0x46
 8000a8e:	4986      	ldr	r1, [pc, #536]	; (8000ca8 <main+0x264>)
 8000a90:	4886      	ldr	r0, [pc, #536]	; (8000cac <main+0x268>)
 8000a92:	f00b fcc9 	bl	800c428 <HAL_UART_Receive_DMA>
  HAL_Delay(1000);//GPS required this in testing, maybe remove?
 8000a96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a9a:	f001 fa83 	bl	8001fa4 <HAL_Delay>
  //variables required for 10Hz GPS
  uint16_t measRate = 100;
 8000a9e:	2364      	movs	r3, #100	; 0x64
 8000aa0:	f8a7 3406 	strh.w	r3, [r7, #1030]	; 0x406
  uint16_t navRate = 1;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	f8a7 3404 	strh.w	r3, [r7, #1028]	; 0x404
  uint16_t timeRef = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f8a7 3402 	strh.w	r3, [r7, #1026]	; 0x402
  gps_rate_config(&huart3, measRate, navRate, timeRef);
 8000ab0:	f8b7 3402 	ldrh.w	r3, [r7, #1026]	; 0x402
 8000ab4:	f8b7 2404 	ldrh.w	r2, [r7, #1028]	; 0x404
 8000ab8:	f8b7 1406 	ldrh.w	r1, [r7, #1030]	; 0x406
 8000abc:	487b      	ldr	r0, [pc, #492]	; (8000cac <main+0x268>)
 8000abe:	f7ff feb7 	bl	8000830 <gps_rate_config>

  gps_msg_config(&huart3, "DTM", 0);//ERROR
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	497a      	ldr	r1, [pc, #488]	; (8000cb0 <main+0x26c>)
 8000ac6:	4879      	ldr	r0, [pc, #484]	; (8000cac <main+0x268>)
 8000ac8:	f7ff fe42 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GAQ", 0);
 8000acc:	2200      	movs	r2, #0
 8000ace:	4979      	ldr	r1, [pc, #484]	; (8000cb4 <main+0x270>)
 8000ad0:	4876      	ldr	r0, [pc, #472]	; (8000cac <main+0x268>)
 8000ad2:	f7ff fe3d 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GBQ", 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	4977      	ldr	r1, [pc, #476]	; (8000cb8 <main+0x274>)
 8000ada:	4874      	ldr	r0, [pc, #464]	; (8000cac <main+0x268>)
 8000adc:	f7ff fe38 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GBS", 0);//ERROR
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	4976      	ldr	r1, [pc, #472]	; (8000cbc <main+0x278>)
 8000ae4:	4871      	ldr	r0, [pc, #452]	; (8000cac <main+0x268>)
 8000ae6:	f7ff fe33 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GGA", 0);//ERROR
 8000aea:	2200      	movs	r2, #0
 8000aec:	4974      	ldr	r1, [pc, #464]	; (8000cc0 <main+0x27c>)
 8000aee:	486f      	ldr	r0, [pc, #444]	; (8000cac <main+0x268>)
 8000af0:	f7ff fe2e 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GLL", 0);//ERROR
 8000af4:	2200      	movs	r2, #0
 8000af6:	4973      	ldr	r1, [pc, #460]	; (8000cc4 <main+0x280>)
 8000af8:	486c      	ldr	r0, [pc, #432]	; (8000cac <main+0x268>)
 8000afa:	f7ff fe29 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GLQ", 0);
 8000afe:	2200      	movs	r2, #0
 8000b00:	4971      	ldr	r1, [pc, #452]	; (8000cc8 <main+0x284>)
 8000b02:	486a      	ldr	r0, [pc, #424]	; (8000cac <main+0x268>)
 8000b04:	f7ff fe24 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GNQ", 0);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	4970      	ldr	r1, [pc, #448]	; (8000ccc <main+0x288>)
 8000b0c:	4867      	ldr	r0, [pc, #412]	; (8000cac <main+0x268>)
 8000b0e:	f7ff fe1f 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GNS", 0);//ERROR
 8000b12:	2200      	movs	r2, #0
 8000b14:	496e      	ldr	r1, [pc, #440]	; (8000cd0 <main+0x28c>)
 8000b16:	4865      	ldr	r0, [pc, #404]	; (8000cac <main+0x268>)
 8000b18:	f7ff fe1a 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GPQ", 0);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	496d      	ldr	r1, [pc, #436]	; (8000cd4 <main+0x290>)
 8000b20:	4862      	ldr	r0, [pc, #392]	; (8000cac <main+0x268>)
 8000b22:	f7ff fe15 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GRS", 0);//ERROR
 8000b26:	2200      	movs	r2, #0
 8000b28:	496b      	ldr	r1, [pc, #428]	; (8000cd8 <main+0x294>)
 8000b2a:	4860      	ldr	r0, [pc, #384]	; (8000cac <main+0x268>)
 8000b2c:	f7ff fe10 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GSA", 0);//ERROR
 8000b30:	2200      	movs	r2, #0
 8000b32:	496a      	ldr	r1, [pc, #424]	; (8000cdc <main+0x298>)
 8000b34:	485d      	ldr	r0, [pc, #372]	; (8000cac <main+0x268>)
 8000b36:	f7ff fe0b 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GST", 0);//ERROR
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	4968      	ldr	r1, [pc, #416]	; (8000ce0 <main+0x29c>)
 8000b3e:	485b      	ldr	r0, [pc, #364]	; (8000cac <main+0x268>)
 8000b40:	f7ff fe06 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GSV", 0);//ERROR
 8000b44:	2200      	movs	r2, #0
 8000b46:	4967      	ldr	r1, [pc, #412]	; (8000ce4 <main+0x2a0>)
 8000b48:	4858      	ldr	r0, [pc, #352]	; (8000cac <main+0x268>)
 8000b4a:	f7ff fe01 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "RLM", 0);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	4965      	ldr	r1, [pc, #404]	; (8000ce8 <main+0x2a4>)
 8000b52:	4856      	ldr	r0, [pc, #344]	; (8000cac <main+0x268>)
 8000b54:	f7ff fdfc 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "RMC", 1);//ERROR
 8000b58:	2201      	movs	r2, #1
 8000b5a:	4964      	ldr	r1, [pc, #400]	; (8000cec <main+0x2a8>)
 8000b5c:	4853      	ldr	r0, [pc, #332]	; (8000cac <main+0x268>)
 8000b5e:	f7ff fdf7 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "TXT", 0);
 8000b62:	2200      	movs	r2, #0
 8000b64:	4962      	ldr	r1, [pc, #392]	; (8000cf0 <main+0x2ac>)
 8000b66:	4851      	ldr	r0, [pc, #324]	; (8000cac <main+0x268>)
 8000b68:	f7ff fdf2 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "VLW", 0);//ERROR
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	4961      	ldr	r1, [pc, #388]	; (8000cf4 <main+0x2b0>)
 8000b70:	484e      	ldr	r0, [pc, #312]	; (8000cac <main+0x268>)
 8000b72:	f7ff fded 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "VTG", 0);//ERROR
 8000b76:	2200      	movs	r2, #0
 8000b78:	495f      	ldr	r1, [pc, #380]	; (8000cf8 <main+0x2b4>)
 8000b7a:	484c      	ldr	r0, [pc, #304]	; (8000cac <main+0x268>)
 8000b7c:	f7ff fde8 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "ZDA", 0);//ERROR
 8000b80:	2200      	movs	r2, #0
 8000b82:	495e      	ldr	r1, [pc, #376]	; (8000cfc <main+0x2b8>)
 8000b84:	4849      	ldr	r0, [pc, #292]	; (8000cac <main+0x268>)
 8000b86:	f7ff fde3 	bl	8000750 <gps_msg_config>

  if(f_mount(&myFATAFS, SDPath, 1) == FR_OK){
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	495c      	ldr	r1, [pc, #368]	; (8000d00 <main+0x2bc>)
 8000b8e:	485d      	ldr	r0, [pc, #372]	; (8000d04 <main+0x2c0>)
 8000b90:	f013 fd2e 	bl	80145f0 <f_mount>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d175      	bne.n	8000c86 <main+0x242>
  	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
  	  char myPath[] = "gpsdat.csv\0";
 8000b9a:	4a5b      	ldr	r2, [pc, #364]	; (8000d08 <main+0x2c4>)
 8000b9c:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8000ba0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ba2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      char ConfigPath[] ="Config.csv\0";
 8000ba6:	4a59      	ldr	r2, [pc, #356]	; (8000d0c <main+0x2c8>)
 8000ba8:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8000bac:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      char ConfigParams[1000];

      //Tries to open config File
      if(f_open(&Config, ConfigPath, FA_READ) == FR_NO_FILE){
 8000bb2:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4855      	ldr	r0, [pc, #340]	; (8000d10 <main+0x2cc>)
 8000bbc:	f013 fd5e 	bl	801467c <f_open>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b04      	cmp	r3, #4
 8000bc4:	d13f      	bne.n	8000c46 <main+0x202>
        //If file doesnt exist creates a file using hard coded defualts and passes those to internal config array
        f_open(&Config, ConfigPath, FA_WRITE | FA_CREATE_ALWAYS);
 8000bc6:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8000bca:	220a      	movs	r2, #10
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4850      	ldr	r0, [pc, #320]	; (8000d10 <main+0x2cc>)
 8000bd0:	f013 fd54 	bl	801467c <f_open>

        sprintf(ConfigParams, "ID,Device,Bytes,Rate(HZ),Type,Description\n");
 8000bd4:	463b      	mov	r3, r7
 8000bd6:	4a4f      	ldr	r2, [pc, #316]	; (8000d14 <main+0x2d0>)
 8000bd8:	461c      	mov	r4, r3
 8000bda:	4615      	mov	r5, r2
 8000bdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000be8:	c403      	stmia	r4!, {r0, r1}
 8000bea:	8022      	strh	r2, [r4, #0]
 8000bec:	3402      	adds	r4, #2
 8000bee:	0c13      	lsrs	r3, r2, #16
 8000bf0:	7023      	strb	r3, [r4, #0]
        sprintf(ConfigParams + strlen(ConfigParams),"0x50,Datalogger,8,0.20,uint32_t,HIGH:FileNO LOW:millis,\n");
 8000bf2:	463b      	mov	r3, r7
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff fb73 	bl	80002e0 <strlen>
 8000bfa:	4602      	mov	r2, r0
 8000bfc:	463b      	mov	r3, r7
 8000bfe:	4413      	add	r3, r2
 8000c00:	4a45      	ldr	r2, [pc, #276]	; (8000d18 <main+0x2d4>)
 8000c02:	4614      	mov	r4, r2
 8000c04:	469c      	mov	ip, r3
 8000c06:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000c0a:	4665      	mov	r5, ip
 8000c0c:	4626      	mov	r6, r4
 8000c0e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c10:	6028      	str	r0, [r5, #0]
 8000c12:	6069      	str	r1, [r5, #4]
 8000c14:	60aa      	str	r2, [r5, #8]
 8000c16:	60eb      	str	r3, [r5, #12]
 8000c18:	3410      	adds	r4, #16
 8000c1a:	f10c 0c10 	add.w	ip, ip, #16
 8000c1e:	4574      	cmp	r4, lr
 8000c20:	d1f3      	bne.n	8000c0a <main+0x1c6>
 8000c22:	4662      	mov	r2, ip
 8000c24:	4623      	mov	r3, r4
 8000c26:	cb03      	ldmia	r3!, {r0, r1}
 8000c28:	6010      	str	r0, [r2, #0]
 8000c2a:	6051      	str	r1, [r2, #4]
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	7213      	strb	r3, [r2, #8]

        f_write(&Config, ConfigParams, strlen(ConfigParams), &ConfByteW);
 8000c30:	463b      	mov	r3, r7
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff fb54 	bl	80002e0 <strlen>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	4639      	mov	r1, r7
 8000c3c:	4b37      	ldr	r3, [pc, #220]	; (8000d1c <main+0x2d8>)
 8000c3e:	4834      	ldr	r0, [pc, #208]	; (8000d10 <main+0x2cc>)
 8000c40:	f014 f819 	bl	8014c76 <f_write>
 8000c44:	e009      	b.n	8000c5a <main+0x216>
      }else{
        //If file does exist reads in config parameters to internal config array
        f_read(&Config, ConfigParams, strlen(ConfigParams), &ConfByteR);
 8000c46:	463b      	mov	r3, r7
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff fb49 	bl	80002e0 <strlen>
 8000c4e:	4602      	mov	r2, r0
 8000c50:	4639      	mov	r1, r7
 8000c52:	4b33      	ldr	r3, [pc, #204]	; (8000d20 <main+0x2dc>)
 8000c54:	482e      	ldr	r0, [pc, #184]	; (8000d10 <main+0x2cc>)
 8000c56:	f013 fecf 	bl	80149f8 <f_read>
      }
      f_close(&Config);
 8000c5a:	482d      	ldr	r0, [pc, #180]	; (8000d10 <main+0x2cc>)
 8000c5c:	f014 f9fe 	bl	801505c <f_close>
  	  f_open(&myFILE, myPath, FA_WRITE | FA_CREATE_ALWAYS);
 8000c60:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8000c64:	220a      	movs	r2, #10
 8000c66:	4619      	mov	r1, r3
 8000c68:	482e      	ldr	r0, [pc, #184]	; (8000d24 <main+0x2e0>)
 8000c6a:	f013 fd07 	bl	801467c <f_open>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (end_flag){
 8000c6e:	e00a      	b.n	8000c86 <main+0x242>

	  if(GPS_flag){
 8000c70:	4b2d      	ldr	r3, [pc, #180]	; (8000d28 <main+0x2e4>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d006      	beq.n	8000c86 <main+0x242>
		  WriteToBuff(rxBuf, sizeof(rxBuf));
 8000c78:	2146      	movs	r1, #70	; 0x46
 8000c7a:	480b      	ldr	r0, [pc, #44]	; (8000ca8 <main+0x264>)
 8000c7c:	f7ff fe4c 	bl	8000918 <WriteToBuff>
		  GPS_flag=0;
 8000c80:	4b29      	ldr	r3, [pc, #164]	; (8000d28 <main+0x2e4>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
  while (end_flag){
 8000c86:	4b29      	ldr	r3, [pc, #164]	; (8000d2c <main+0x2e8>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d1f0      	bne.n	8000c70 <main+0x22c>
	  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  f_close(&myFILE);
 8000c8e:	4825      	ldr	r0, [pc, #148]	; (8000d24 <main+0x2e0>)
 8000c90:	f014 f9e4 	bl	801505c <f_close>
 8000c94:	2300      	movs	r3, #0

  /* USER CODE END 3 */
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	f207 470c 	addw	r7, r7, #1036	; 0x40c
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ca0:	08016ed0 	.word	0x08016ed0
 8000ca4:	24001338 	.word	0x24001338
 8000ca8:	24000ce0 	.word	0x24000ce0
 8000cac:	24001208 	.word	0x24001208
 8000cb0:	08016edc 	.word	0x08016edc
 8000cb4:	08016ee0 	.word	0x08016ee0
 8000cb8:	08016ee4 	.word	0x08016ee4
 8000cbc:	08016ee8 	.word	0x08016ee8
 8000cc0:	08016eec 	.word	0x08016eec
 8000cc4:	08016ef0 	.word	0x08016ef0
 8000cc8:	08016ef4 	.word	0x08016ef4
 8000ccc:	08016ef8 	.word	0x08016ef8
 8000cd0:	08016efc 	.word	0x08016efc
 8000cd4:	08016f00 	.word	0x08016f00
 8000cd8:	08016f04 	.word	0x08016f04
 8000cdc:	08016f08 	.word	0x08016f08
 8000ce0:	08016f0c 	.word	0x08016f0c
 8000ce4:	08016f10 	.word	0x08016f10
 8000ce8:	08016f14 	.word	0x08016f14
 8000cec:	08016f18 	.word	0x08016f18
 8000cf0:	08016f1c 	.word	0x08016f1c
 8000cf4:	08016f20 	.word	0x08016f20
 8000cf8:	08016f24 	.word	0x08016f24
 8000cfc:	08016f28 	.word	0x08016f28
 8000d00:	240015f0 	.word	0x240015f0
 8000d04:	24000d2c 	.word	0x24000d2c
 8000d08:	08016f94 	.word	0x08016f94
 8000d0c:	08016fa0 	.word	0x08016fa0
 8000d10:	24000f60 	.word	0x24000f60
 8000d14:	08016f2c 	.word	0x08016f2c
 8000d18:	08016f58 	.word	0x08016f58
 8000d1c:	24000d28 	.word	0x24000d28
 8000d20:	24000cdc 	.word	0x24000cdc
 8000d24:	24000aac 	.word	0x24000aac
 8000d28:	240001ec 	.word	0x240001ec
 8000d2c:	24000000 	.word	0x24000000

08000d30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b0cc      	sub	sp, #304	; 0x130
 8000d34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d36:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d3a:	224c      	movs	r2, #76	; 0x4c
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f014 ff55 	bl	8015bee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d44:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000d48:	2220      	movs	r2, #32
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f014 ff4e 	bl	8015bee <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d52:	f107 0308 	add.w	r3, r7, #8
 8000d56:	4618      	mov	r0, r3
 8000d58:	23bc      	movs	r3, #188	; 0xbc
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	f014 ff46 	bl	8015bee <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d62:	2002      	movs	r0, #2
 8000d64:	f006 f8c2 	bl	8006eec <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	4b71      	ldr	r3, [pc, #452]	; (8000f34 <SystemClock_Config+0x204>)
 8000d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d72:	4a70      	ldr	r2, [pc, #448]	; (8000f34 <SystemClock_Config+0x204>)
 8000d74:	f023 0301 	bic.w	r3, r3, #1
 8000d78:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d7a:	4b6e      	ldr	r3, [pc, #440]	; (8000f34 <SystemClock_Config+0x204>)
 8000d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d7e:	f003 0201 	and.w	r2, r3, #1
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	4b6c      	ldr	r3, [pc, #432]	; (8000f38 <SystemClock_Config+0x208>)
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	4a6b      	ldr	r2, [pc, #428]	; (8000f38 <SystemClock_Config+0x208>)
 8000d8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d90:	6193      	str	r3, [r2, #24]
 8000d92:	4b69      	ldr	r3, [pc, #420]	; (8000f38 <SystemClock_Config+0x208>)
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000da2:	bf00      	nop
 8000da4:	4b64      	ldr	r3, [pc, #400]	; (8000f38 <SystemClock_Config+0x208>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000db0:	d1f8      	bne.n	8000da4 <SystemClock_Config+0x74>
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000db2:	f006 f88b 	bl	8006ecc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 8000db6:	f001 f917 	bl	8001fe8 <HAL_GetREVID>
 8000dba:	4b60      	ldr	r3, [pc, #384]	; (8000f3c <SystemClock_Config+0x20c>)
 8000dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dbe:	4a5f      	ldr	r2, [pc, #380]	; (8000f3c <SystemClock_Config+0x20c>)
 8000dc0:	f043 0318 	orr.w	r3, r3, #24
 8000dc4:	6713      	str	r3, [r2, #112]	; 0x70
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000dc6:	4b5d      	ldr	r3, [pc, #372]	; (8000f3c <SystemClock_Config+0x20c>)
 8000dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dca:	f023 0303 	bic.w	r3, r3, #3
 8000dce:	4a5b      	ldr	r2, [pc, #364]	; (8000f3c <SystemClock_Config+0x20c>)
 8000dd0:	f043 0302 	orr.w	r3, r3, #2
 8000dd4:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 8000dd6:	2325      	movs	r3, #37	; 0x25
 8000dd8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ddc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000de0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000de4:	2301      	movs	r3, #1
 8000de6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000dea:	2301      	movs	r3, #1
 8000dec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df0:	2302      	movs	r3, #2
 8000df2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000df6:	2302      	movs	r3, #2
 8000df8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000e02:	2340      	movs	r3, #64	; 0x40
 8000e04:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 10;
 8000e0e:	230a      	movs	r3, #10
 8000e10:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e14:	2302      	movs	r3, #2
 8000e16:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e1a:	230c      	movs	r3, #12
 8000e1c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e20:	2300      	movs	r3, #0
 8000e22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e2c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000e30:	4618      	mov	r0, r3
 8000e32:	f006 f8a5 	bl	8006f80 <HAL_RCC_OscConfig>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000e3c:	f000 fbdc 	bl	80015f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e40:	233f      	movs	r3, #63	; 0x3f
 8000e42:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e46:	2303      	movs	r3, #3
 8000e48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e52:	2308      	movs	r3, #8
 8000e54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e58:	2340      	movs	r3, #64	; 0x40
 8000e5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e5e:	2340      	movs	r3, #64	; 0x40
 8000e60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e68:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e6c:	2340      	movs	r3, #64	; 0x40
 8000e6e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e72:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e76:	2102      	movs	r1, #2
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f006 fc91 	bl	80077a0 <HAL_RCC_ClockConfig>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <SystemClock_Config+0x158>
  {
    Error_Handler();
 8000e84:	f000 fbb8 	bl	80015f8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 8000e88:	f107 0308 	add.w	r3, r7, #8
 8000e8c:	4a2c      	ldr	r2, [pc, #176]	; (8000f40 <SystemClock_Config+0x210>)
 8000e8e:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_FDCAN|RCC_PERIPHCLK_UART8
                              |RCC_PERIPHCLK_SPI1|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000e90:	f107 0308 	add.w	r3, r7, #8
 8000e94:	2202      	movs	r2, #2
 8000e96:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000e98:	f107 0308 	add.w	r3, r7, #8
 8000e9c:	220c      	movs	r2, #12
 8000e9e:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000ea0:	f107 0308 	add.w	r3, r7, #8
 8000ea4:	2202      	movs	r2, #2
 8000ea6:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000ea8:	f107 0308 	add.w	r3, r7, #8
 8000eac:	2202      	movs	r2, #2
 8000eae:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 3;
 8000eb0:	f107 0308 	add.w	r3, r7, #8
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000eb8:	f107 0308 	add.w	r3, r7, #8
 8000ebc:	22c0      	movs	r2, #192	; 0xc0
 8000ebe:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000ec0:	f107 0308 	add.w	r3, r7, #8
 8000ec4:	2220      	movs	r2, #32
 8000ec6:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000ec8:	f107 0308 	add.w	r3, r7, #8
 8000ecc:	2200      	movs	r2, #0
 8000ece:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000ed0:	f107 0308 	add.w	r3, r7, #8
 8000ed4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ed8:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000eda:	f107 0308 	add.w	r3, r7, #8
 8000ede:	2200      	movs	r2, #0
 8000ee0:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000ee2:	f107 0308 	add.w	r3, r7, #8
 8000ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000eea:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000eec:	f107 0308 	add.w	r3, r7, #8
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000ef4:	f107 0308 	add.w	r3, r7, #8
 8000ef8:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000efc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000f00:	f107 0308 	add.w	r3, r7, #8
 8000f04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f08:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f0c:	f107 0308 	add.w	r3, r7, #8
 8000f10:	4618      	mov	r0, r3
 8000f12:	f006 fff5 	bl	8007f00 <HAL_RCCEx_PeriphCLKConfig>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <SystemClock_Config+0x1f0>
  {
    Error_Handler();
 8000f1c:	f000 fb6c 	bl	80015f8 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000f20:	f006 fdf4 	bl	8007b0c <HAL_RCC_EnableCSS>
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000f24:	f006 f81c 	bl	8006f60 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000f28:	bf00      	nop
 8000f2a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	58000400 	.word	0x58000400
 8000f38:	58024800 	.word	0x58024800
 8000f3c:	58024400 	.word	0x58024400
 8000f40:	00459002 	.word	0x00459002

08000f44 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000f48:	4b2f      	ldr	r3, [pc, #188]	; (8001008 <MX_FDCAN1_Init+0xc4>)
 8000f4a:	4a30      	ldr	r2, [pc, #192]	; (800100c <MX_FDCAN1_Init+0xc8>)
 8000f4c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000f4e:	4b2e      	ldr	r3, [pc, #184]	; (8001008 <MX_FDCAN1_Init+0xc4>)
 8000f50:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000f54:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000f56:	4b2c      	ldr	r3, [pc, #176]	; (8001008 <MX_FDCAN1_Init+0xc4>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000f5c:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <MX_FDCAN1_Init+0xc4>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000f62:	4b29      	ldr	r3, [pc, #164]	; (8001008 <MX_FDCAN1_Init+0xc4>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000f68:	4b27      	ldr	r3, [pc, #156]	; (8001008 <MX_FDCAN1_Init+0xc4>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000f6e:	4b26      	ldr	r3, [pc, #152]	; (8001008 <MX_FDCAN1_Init+0xc4>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 50;
 8000f74:	4b24      	ldr	r3, [pc, #144]	; (8001008 <MX_FDCAN1_Init+0xc4>)
 8000f76:	2232      	movs	r2, #50	; 0x32
 8000f78:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 109;
 8000f7a:	4b23      	ldr	r3, [pc, #140]	; (8001008 <MX_FDCAN1_Init+0xc4>)
 8000f7c:	226d      	movs	r2, #109	; 0x6d
 8000f7e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 50;
 8000f80:	4b21      	ldr	r3, [pc, #132]	; (8001008 <MX_FDCAN1_Init+0xc4>)
 8000f82:	2232      	movs	r2, #50	; 0x32
 8000f84:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000f86:	4b20      	ldr	r3, [pc, #128]	; (8001008 <MX_FDCAN1_Init+0xc4>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 5;
 8000f8c:	4b1e      	ldr	r3, [pc, #120]	; (8001008 <MX_FDCAN1_Init+0xc4>)
 8000f8e:	2205      	movs	r2, #5
 8000f90:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 8000f92:	4b1d      	ldr	r3, [pc, #116]	; (8001008 <MX_FDCAN1_Init+0xc4>)
 8000f94:	220a      	movs	r2, #10
 8000f96:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 8000f98:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <MX_FDCAN1_Init+0xc4>)
 8000f9a:	2205      	movs	r2, #5
 8000f9c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000f9e:	4b1a      	ldr	r3, [pc, #104]	; (8001008 <MX_FDCAN1_Init+0xc4>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 2;
 8000fa4:	4b18      	ldr	r3, [pc, #96]	; (8001008 <MX_FDCAN1_Init+0xc4>)
 8000fa6:	2202      	movs	r2, #2
 8000fa8:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 2;
 8000faa:	4b17      	ldr	r3, [pc, #92]	; (8001008 <MX_FDCAN1_Init+0xc4>)
 8000fac:	2202      	movs	r2, #2
 8000fae:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 8000fb0:	4b15      	ldr	r3, [pc, #84]	; (8001008 <MX_FDCAN1_Init+0xc4>)
 8000fb2:	2240      	movs	r2, #64	; 0x40
 8000fb4:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 8000fb6:	4b14      	ldr	r3, [pc, #80]	; (8001008 <MX_FDCAN1_Init+0xc4>)
 8000fb8:	2212      	movs	r2, #18
 8000fba:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000fbc:	4b12      	ldr	r3, [pc, #72]	; (8001008 <MX_FDCAN1_Init+0xc4>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000fc2:	4b11      	ldr	r3, [pc, #68]	; (8001008 <MX_FDCAN1_Init+0xc4>)
 8000fc4:	2204      	movs	r2, #4
 8000fc6:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <MX_FDCAN1_Init+0xc4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000fce:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <MX_FDCAN1_Init+0xc4>)
 8000fd0:	2204      	movs	r2, #4
 8000fd2:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <MX_FDCAN1_Init+0xc4>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000fda:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <MX_FDCAN1_Init+0xc4>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000fe0:	4b09      	ldr	r3, [pc, #36]	; (8001008 <MX_FDCAN1_Init+0xc4>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000fe6:	4b08      	ldr	r3, [pc, #32]	; (8001008 <MX_FDCAN1_Init+0xc4>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <MX_FDCAN1_Init+0xc4>)
 8000fee:	2204      	movs	r2, #4
 8000ff0:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000ff2:	4805      	ldr	r0, [pc, #20]	; (8001008 <MX_FDCAN1_Init+0xc4>)
 8000ff4:	f003 f9ec 	bl	80043d0 <HAL_FDCAN_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000ffe:	f000 fafb 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	24001338 	.word	0x24001338
 800100c:	4000a000 	.word	0x4000a000

08001010 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001014:	4b2e      	ldr	r3, [pc, #184]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 8001016:	4a2f      	ldr	r2, [pc, #188]	; (80010d4 <MX_FDCAN2_Init+0xc4>)
 8001018:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800101a:	4b2d      	ldr	r3, [pc, #180]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001020:	4b2b      	ldr	r3, [pc, #172]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 8001022:	2200      	movs	r2, #0
 8001024:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001026:	4b2a      	ldr	r3, [pc, #168]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 8001028:	2200      	movs	r2, #0
 800102a:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 800102c:	4b28      	ldr	r3, [pc, #160]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 800102e:	2200      	movs	r2, #0
 8001030:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001032:	4b27      	ldr	r3, [pc, #156]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 8001034:	2200      	movs	r2, #0
 8001036:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8001038:	4b25      	ldr	r3, [pc, #148]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 800103a:	2201      	movs	r2, #1
 800103c:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 800103e:	4b24      	ldr	r3, [pc, #144]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 8001040:	2201      	movs	r2, #1
 8001042:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8001044:	4b22      	ldr	r3, [pc, #136]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 8001046:	2202      	movs	r2, #2
 8001048:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 800104a:	4b21      	ldr	r3, [pc, #132]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 800104c:	2202      	movs	r2, #2
 800104e:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001050:	4b1f      	ldr	r3, [pc, #124]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 8001052:	2201      	movs	r2, #1
 8001054:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8001056:	4b1e      	ldr	r3, [pc, #120]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 8001058:	2201      	movs	r2, #1
 800105a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 800105c:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 800105e:	2201      	movs	r2, #1
 8001060:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8001062:	4b1b      	ldr	r3, [pc, #108]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 8001064:	2201      	movs	r2, #1
 8001066:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8001068:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 800106a:	2200      	movs	r2, #0
 800106c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 800106e:	4b18      	ldr	r3, [pc, #96]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 8001070:	2200      	movs	r2, #0
 8001072:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8001074:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 8001076:	2200      	movs	r2, #0
 8001078:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 800107a:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 800107c:	2200      	movs	r2, #0
 800107e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001080:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 8001082:	2204      	movs	r2, #4
 8001084:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8001086:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 8001088:	2200      	movs	r2, #0
 800108a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800108c:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 800108e:	2204      	movs	r2, #4
 8001090:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8001092:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 8001094:	2200      	movs	r2, #0
 8001096:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001098:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 800109a:	2204      	movs	r2, #4
 800109c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 80010a4:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80010b0:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 80010b8:	2204      	movs	r2, #4
 80010ba:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80010bc:	4804      	ldr	r0, [pc, #16]	; (80010d0 <MX_FDCAN2_Init+0xc0>)
 80010be:	f003 f987 	bl	80043d0 <HAL_FDCAN_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 80010c8:	f000 fa96 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	24001538 	.word	0x24001538
 80010d4:	4000a400 	.word	0x4000a400

080010d8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80010ec:	2300      	movs	r3, #0
 80010ee:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010f0:	4b26      	ldr	r3, [pc, #152]	; (800118c <MX_RTC_Init+0xb4>)
 80010f2:	4a27      	ldr	r2, [pc, #156]	; (8001190 <MX_RTC_Init+0xb8>)
 80010f4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010f6:	4b25      	ldr	r3, [pc, #148]	; (800118c <MX_RTC_Init+0xb4>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 1;
 80010fc:	4b23      	ldr	r3, [pc, #140]	; (800118c <MX_RTC_Init+0xb4>)
 80010fe:	2201      	movs	r2, #1
 8001100:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 16388;
 8001102:	4b22      	ldr	r3, [pc, #136]	; (800118c <MX_RTC_Init+0xb4>)
 8001104:	f244 0204 	movw	r2, #16388	; 0x4004
 8001108:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800110a:	4b20      	ldr	r3, [pc, #128]	; (800118c <MX_RTC_Init+0xb4>)
 800110c:	2200      	movs	r2, #0
 800110e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001110:	4b1e      	ldr	r3, [pc, #120]	; (800118c <MX_RTC_Init+0xb4>)
 8001112:	2200      	movs	r2, #0
 8001114:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001116:	4b1d      	ldr	r3, [pc, #116]	; (800118c <MX_RTC_Init+0xb4>)
 8001118:	2200      	movs	r2, #0
 800111a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800111c:	4b1b      	ldr	r3, [pc, #108]	; (800118c <MX_RTC_Init+0xb4>)
 800111e:	2200      	movs	r2, #0
 8001120:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001122:	481a      	ldr	r0, [pc, #104]	; (800118c <MX_RTC_Init+0xb4>)
 8001124:	f008 fdb0 	bl	8009c88 <HAL_RTC_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800112e:	f000 fa63 	bl	80015f8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	2200      	movs	r2, #0
 800114a:	4619      	mov	r1, r3
 800114c:	480f      	ldr	r0, [pc, #60]	; (800118c <MX_RTC_Init+0xb4>)
 800114e:	f008 fe13 	bl	8009d78 <HAL_RTC_SetTime>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001158:	f000 fa4e 	bl	80015f8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800115c:	2301      	movs	r3, #1
 800115e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001160:	2301      	movs	r3, #1
 8001162:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8001164:	2301      	movs	r3, #1
 8001166:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800116c:	463b      	mov	r3, r7
 800116e:	2200      	movs	r2, #0
 8001170:	4619      	mov	r1, r3
 8001172:	4806      	ldr	r0, [pc, #24]	; (800118c <MX_RTC_Init+0xb4>)
 8001174:	f008 fe9e 	bl	8009eb4 <HAL_RTC_SetDate>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 800117e:	f000 fa3b 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001182:	bf00      	nop
 8001184:	3718      	adds	r7, #24
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	24001314 	.word	0x24001314
 8001190:	58004000 	.word	0x58004000

08001194 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001198:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <MX_SDMMC1_SD_Init+0x3c>)
 800119a:	4a0e      	ldr	r2, [pc, #56]	; (80011d4 <MX_SDMMC1_SD_Init+0x40>)
 800119c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800119e:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <MX_SDMMC1_SD_Init+0x3c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80011a4:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <MX_SDMMC1_SD_Init+0x3c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <MX_SDMMC1_SD_Init+0x3c>)
 80011ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011b0:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 80011b2:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <MX_SDMMC1_SD_Init+0x3c>)
 80011b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011b8:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80011ba:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <MX_SDMMC1_SD_Init+0x3c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 80011c0:	4b03      	ldr	r3, [pc, #12]	; (80011d0 <MX_SDMMC1_SD_Init+0x3c>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	24001294 	.word	0x24001294
 80011d4:	52007000 	.word	0x52007000

080011d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011dc:	4b27      	ldr	r3, [pc, #156]	; (800127c <MX_SPI1_Init+0xa4>)
 80011de:	4a28      	ldr	r2, [pc, #160]	; (8001280 <MX_SPI1_Init+0xa8>)
 80011e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011e2:	4b26      	ldr	r3, [pc, #152]	; (800127c <MX_SPI1_Init+0xa4>)
 80011e4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80011e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ea:	4b24      	ldr	r3, [pc, #144]	; (800127c <MX_SPI1_Init+0xa4>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011f0:	4b22      	ldr	r3, [pc, #136]	; (800127c <MX_SPI1_Init+0xa4>)
 80011f2:	2207      	movs	r2, #7
 80011f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011f6:	4b21      	ldr	r3, [pc, #132]	; (800127c <MX_SPI1_Init+0xa4>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011fc:	4b1f      	ldr	r3, [pc, #124]	; (800127c <MX_SPI1_Init+0xa4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001202:	4b1e      	ldr	r3, [pc, #120]	; (800127c <MX_SPI1_Init+0xa4>)
 8001204:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001208:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800120a:	4b1c      	ldr	r3, [pc, #112]	; (800127c <MX_SPI1_Init+0xa4>)
 800120c:	2200      	movs	r2, #0
 800120e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001210:	4b1a      	ldr	r3, [pc, #104]	; (800127c <MX_SPI1_Init+0xa4>)
 8001212:	2200      	movs	r2, #0
 8001214:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001216:	4b19      	ldr	r3, [pc, #100]	; (800127c <MX_SPI1_Init+0xa4>)
 8001218:	2200      	movs	r2, #0
 800121a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800121c:	4b17      	ldr	r3, [pc, #92]	; (800127c <MX_SPI1_Init+0xa4>)
 800121e:	2200      	movs	r2, #0
 8001220:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001222:	4b16      	ldr	r3, [pc, #88]	; (800127c <MX_SPI1_Init+0xa4>)
 8001224:	2200      	movs	r2, #0
 8001226:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001228:	4b14      	ldr	r3, [pc, #80]	; (800127c <MX_SPI1_Init+0xa4>)
 800122a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800122e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <MX_SPI1_Init+0xa4>)
 8001232:	2200      	movs	r2, #0
 8001234:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <MX_SPI1_Init+0xa4>)
 8001238:	2200      	movs	r2, #0
 800123a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800123c:	4b0f      	ldr	r3, [pc, #60]	; (800127c <MX_SPI1_Init+0xa4>)
 800123e:	2200      	movs	r2, #0
 8001240:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <MX_SPI1_Init+0xa4>)
 8001244:	2200      	movs	r2, #0
 8001246:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001248:	4b0c      	ldr	r3, [pc, #48]	; (800127c <MX_SPI1_Init+0xa4>)
 800124a:	2200      	movs	r2, #0
 800124c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800124e:	4b0b      	ldr	r3, [pc, #44]	; (800127c <MX_SPI1_Init+0xa4>)
 8001250:	2200      	movs	r2, #0
 8001252:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001254:	4b09      	ldr	r3, [pc, #36]	; (800127c <MX_SPI1_Init+0xa4>)
 8001256:	2200      	movs	r2, #0
 8001258:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800125a:	4b08      	ldr	r3, [pc, #32]	; (800127c <MX_SPI1_Init+0xa4>)
 800125c:	2200      	movs	r2, #0
 800125e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <MX_SPI1_Init+0xa4>)
 8001262:	2200      	movs	r2, #0
 8001264:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001266:	4805      	ldr	r0, [pc, #20]	; (800127c <MX_SPI1_Init+0xa4>)
 8001268:	f00a fee4 	bl	800c034 <HAL_SPI_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8001272:	f000 f9c1 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	24001464 	.word	0x24001464
 8001280:	40013000 	.word	0x40013000

08001284 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001288:	4b22      	ldr	r3, [pc, #136]	; (8001314 <MX_UART8_Init+0x90>)
 800128a:	4a23      	ldr	r2, [pc, #140]	; (8001318 <MX_UART8_Init+0x94>)
 800128c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 800128e:	4b21      	ldr	r3, [pc, #132]	; (8001314 <MX_UART8_Init+0x90>)
 8001290:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001294:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001296:	4b1f      	ldr	r3, [pc, #124]	; (8001314 <MX_UART8_Init+0x90>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 800129c:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <MX_UART8_Init+0x90>)
 800129e:	2200      	movs	r2, #0
 80012a0:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80012a2:	4b1c      	ldr	r3, [pc, #112]	; (8001314 <MX_UART8_Init+0x90>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80012a8:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <MX_UART8_Init+0x90>)
 80012aa:	220c      	movs	r2, #12
 80012ac:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ae:	4b19      	ldr	r3, [pc, #100]	; (8001314 <MX_UART8_Init+0x90>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b4:	4b17      	ldr	r3, [pc, #92]	; (8001314 <MX_UART8_Init+0x90>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ba:	4b16      	ldr	r3, [pc, #88]	; (8001314 <MX_UART8_Init+0x90>)
 80012bc:	2200      	movs	r2, #0
 80012be:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012c0:	4b14      	ldr	r3, [pc, #80]	; (8001314 <MX_UART8_Init+0x90>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012c6:	4b13      	ldr	r3, [pc, #76]	; (8001314 <MX_UART8_Init+0x90>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80012cc:	4811      	ldr	r0, [pc, #68]	; (8001314 <MX_UART8_Init+0x90>)
 80012ce:	f00a ffc4 	bl	800c25a <HAL_UART_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_UART8_Init+0x58>
  {
    Error_Handler();
 80012d8:	f000 f98e 	bl	80015f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012dc:	2100      	movs	r1, #0
 80012de:	480d      	ldr	r0, [pc, #52]	; (8001314 <MX_UART8_Init+0x90>)
 80012e0:	f00c f954 	bl	800d58c <HAL_UARTEx_SetTxFifoThreshold>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 80012ea:	f000 f985 	bl	80015f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012ee:	2100      	movs	r1, #0
 80012f0:	4808      	ldr	r0, [pc, #32]	; (8001314 <MX_UART8_Init+0x90>)
 80012f2:	f00c f989 	bl	800d608 <HAL_UARTEx_SetRxFifoThreshold>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 80012fc:	f000 f97c 	bl	80015f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001300:	4804      	ldr	r0, [pc, #16]	; (8001314 <MX_UART8_Init+0x90>)
 8001302:	f00c f90a 	bl	800d51a <HAL_UARTEx_DisableFifoMode>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 800130c:	f000 f974 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}
 8001314:	240013d8 	.word	0x240013d8
 8001318:	40007c00 	.word	0x40007c00

0800131c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001320:	4b22      	ldr	r3, [pc, #136]	; (80013ac <MX_USART3_UART_Init+0x90>)
 8001322:	4a23      	ldr	r2, [pc, #140]	; (80013b0 <MX_USART3_UART_Init+0x94>)
 8001324:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8001326:	4b21      	ldr	r3, [pc, #132]	; (80013ac <MX_USART3_UART_Init+0x90>)
 8001328:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800132c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800132e:	4b1f      	ldr	r3, [pc, #124]	; (80013ac <MX_USART3_UART_Init+0x90>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001334:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <MX_USART3_UART_Init+0x90>)
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800133a:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <MX_USART3_UART_Init+0x90>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001340:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <MX_USART3_UART_Init+0x90>)
 8001342:	220c      	movs	r2, #12
 8001344:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001346:	4b19      	ldr	r3, [pc, #100]	; (80013ac <MX_USART3_UART_Init+0x90>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800134c:	4b17      	ldr	r3, [pc, #92]	; (80013ac <MX_USART3_UART_Init+0x90>)
 800134e:	2200      	movs	r2, #0
 8001350:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001352:	4b16      	ldr	r3, [pc, #88]	; (80013ac <MX_USART3_UART_Init+0x90>)
 8001354:	2200      	movs	r2, #0
 8001356:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001358:	4b14      	ldr	r3, [pc, #80]	; (80013ac <MX_USART3_UART_Init+0x90>)
 800135a:	2200      	movs	r2, #0
 800135c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800135e:	4b13      	ldr	r3, [pc, #76]	; (80013ac <MX_USART3_UART_Init+0x90>)
 8001360:	2200      	movs	r2, #0
 8001362:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001364:	4811      	ldr	r0, [pc, #68]	; (80013ac <MX_USART3_UART_Init+0x90>)
 8001366:	f00a ff78 	bl	800c25a <HAL_UART_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001370:	f000 f942 	bl	80015f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001374:	2100      	movs	r1, #0
 8001376:	480d      	ldr	r0, [pc, #52]	; (80013ac <MX_USART3_UART_Init+0x90>)
 8001378:	f00c f908 	bl	800d58c <HAL_UARTEx_SetTxFifoThreshold>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001382:	f000 f939 	bl	80015f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001386:	2100      	movs	r1, #0
 8001388:	4808      	ldr	r0, [pc, #32]	; (80013ac <MX_USART3_UART_Init+0x90>)
 800138a:	f00c f93d 	bl	800d608 <HAL_UARTEx_SetRxFifoThreshold>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001394:	f000 f930 	bl	80015f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001398:	4804      	ldr	r0, [pc, #16]	; (80013ac <MX_USART3_UART_Init+0x90>)
 800139a:	f00c f8be 	bl	800d51a <HAL_UARTEx_DisableFifoMode>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80013a4:	f000 f928 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	24001208 	.word	0x24001208
 80013b0:	40004800 	.word	0x40004800

080013b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013ba:	4b0d      	ldr	r3, [pc, #52]	; (80013f0 <MX_DMA_Init+0x3c>)
 80013bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013c0:	4a0b      	ldr	r2, [pc, #44]	; (80013f0 <MX_DMA_Init+0x3c>)
 80013c2:	f043 0301 	orr.w	r3, r3, #1
 80013c6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013ca:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <MX_DMA_Init+0x3c>)
 80013cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80013d8:	2200      	movs	r2, #0
 80013da:	2100      	movs	r1, #0
 80013dc:	200b      	movs	r0, #11
 80013de:	f000 feea 	bl	80021b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80013e2:	200b      	movs	r0, #11
 80013e4:	f000 ff01 	bl	80021ea <HAL_NVIC_EnableIRQ>

}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	58024400 	.word	0x58024400

080013f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08c      	sub	sp, #48	; 0x30
 80013f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fa:	f107 031c 	add.w	r3, r7, #28
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
 8001408:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800140a:	4b6d      	ldr	r3, [pc, #436]	; (80015c0 <MX_GPIO_Init+0x1cc>)
 800140c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001410:	4a6b      	ldr	r2, [pc, #428]	; (80015c0 <MX_GPIO_Init+0x1cc>)
 8001412:	f043 0310 	orr.w	r3, r3, #16
 8001416:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800141a:	4b69      	ldr	r3, [pc, #420]	; (80015c0 <MX_GPIO_Init+0x1cc>)
 800141c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001420:	f003 0310 	and.w	r3, r3, #16
 8001424:	61bb      	str	r3, [r7, #24]
 8001426:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001428:	4b65      	ldr	r3, [pc, #404]	; (80015c0 <MX_GPIO_Init+0x1cc>)
 800142a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800142e:	4a64      	ldr	r2, [pc, #400]	; (80015c0 <MX_GPIO_Init+0x1cc>)
 8001430:	f043 0304 	orr.w	r3, r3, #4
 8001434:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001438:	4b61      	ldr	r3, [pc, #388]	; (80015c0 <MX_GPIO_Init+0x1cc>)
 800143a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800143e:	f003 0304 	and.w	r3, r3, #4
 8001442:	617b      	str	r3, [r7, #20]
 8001444:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001446:	4b5e      	ldr	r3, [pc, #376]	; (80015c0 <MX_GPIO_Init+0x1cc>)
 8001448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800144c:	4a5c      	ldr	r2, [pc, #368]	; (80015c0 <MX_GPIO_Init+0x1cc>)
 800144e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001452:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001456:	4b5a      	ldr	r3, [pc, #360]	; (80015c0 <MX_GPIO_Init+0x1cc>)
 8001458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800145c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001464:	4b56      	ldr	r3, [pc, #344]	; (80015c0 <MX_GPIO_Init+0x1cc>)
 8001466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800146a:	4a55      	ldr	r2, [pc, #340]	; (80015c0 <MX_GPIO_Init+0x1cc>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001474:	4b52      	ldr	r3, [pc, #328]	; (80015c0 <MX_GPIO_Init+0x1cc>)
 8001476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001482:	4b4f      	ldr	r3, [pc, #316]	; (80015c0 <MX_GPIO_Init+0x1cc>)
 8001484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001488:	4a4d      	ldr	r2, [pc, #308]	; (80015c0 <MX_GPIO_Init+0x1cc>)
 800148a:	f043 0302 	orr.w	r3, r3, #2
 800148e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001492:	4b4b      	ldr	r3, [pc, #300]	; (80015c0 <MX_GPIO_Init+0x1cc>)
 8001494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014a0:	4b47      	ldr	r3, [pc, #284]	; (80015c0 <MX_GPIO_Init+0x1cc>)
 80014a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a6:	4a46      	ldr	r2, [pc, #280]	; (80015c0 <MX_GPIO_Init+0x1cc>)
 80014a8:	f043 0308 	orr.w	r3, r3, #8
 80014ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014b0:	4b43      	ldr	r3, [pc, #268]	; (80015c0 <MX_GPIO_Init+0x1cc>)
 80014b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b6:	f003 0308 	and.w	r3, r3, #8
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_485_TX_EN_Pin|RS_485_RX_EN_Pin, GPIO_PIN_RESET);
 80014be:	2200      	movs	r2, #0
 80014c0:	210c      	movs	r1, #12
 80014c2:	4840      	ldr	r0, [pc, #256]	; (80015c4 <MX_GPIO_Init+0x1d0>)
 80014c4:	f004 fa88 	bl	80059d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TELE_CE_Pin|TELE_CS_Pin, GPIO_PIN_RESET);
 80014c8:	2200      	movs	r2, #0
 80014ca:	2103      	movs	r1, #3
 80014cc:	483e      	ldr	r0, [pc, #248]	; (80015c8 <MX_GPIO_Init+0x1d4>)
 80014ce:	f004 fa83 	bl	80059d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2101      	movs	r1, #1
 80014d6:	483d      	ldr	r0, [pc, #244]	; (80015cc <MX_GPIO_Init+0x1d8>)
 80014d8:	f004 fa7e 	bl	80059d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_SET);
 80014dc:	2201      	movs	r2, #1
 80014de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014e2:	483b      	ldr	r0, [pc, #236]	; (80015d0 <MX_GPIO_Init+0x1dc>)
 80014e4:	f004 fa78 	bl	80059d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS_485_TX_EN_Pin RS_485_RX_EN_Pin */
  GPIO_InitStruct.Pin = RS_485_TX_EN_Pin|RS_485_RX_EN_Pin;
 80014e8:	230c      	movs	r3, #12
 80014ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ec:	2301      	movs	r3, #1
 80014ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f4:	2300      	movs	r3, #0
 80014f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014f8:	f107 031c 	add.w	r3, r7, #28
 80014fc:	4619      	mov	r1, r3
 80014fe:	4831      	ldr	r0, [pc, #196]	; (80015c4 <MX_GPIO_Init+0x1d0>)
 8001500:	f004 f8a2 	bl	8005648 <HAL_GPIO_Init>

  /*Configure GPIO pins : TELE_CE_Pin TELE_CS_Pin */
  GPIO_InitStruct.Pin = TELE_CE_Pin|TELE_CS_Pin;
 8001504:	2303      	movs	r3, #3
 8001506:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001508:	2301      	movs	r3, #1
 800150a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001510:	2300      	movs	r3, #0
 8001512:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001514:	f107 031c 	add.w	r3, r7, #28
 8001518:	4619      	mov	r1, r3
 800151a:	482b      	ldr	r0, [pc, #172]	; (80015c8 <MX_GPIO_Init+0x1d4>)
 800151c:	f004 f894 	bl	8005648 <HAL_GPIO_Init>

  /*Configure GPIO pin : TELE_IRQ_Pin */
  GPIO_InitStruct.Pin = TELE_IRQ_Pin;
 8001520:	2304      	movs	r3, #4
 8001522:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001524:	4b2b      	ldr	r3, [pc, #172]	; (80015d4 <MX_GPIO_Init+0x1e0>)
 8001526:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TELE_IRQ_GPIO_Port, &GPIO_InitStruct);
 800152c:	f107 031c 	add.w	r3, r7, #28
 8001530:	4619      	mov	r1, r3
 8001532:	4825      	ldr	r0, [pc, #148]	; (80015c8 <MX_GPIO_Init+0x1d4>)
 8001534:	f004 f888 	bl	8005648 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001538:	2301      	movs	r3, #1
 800153a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153c:	2301      	movs	r3, #1
 800153e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001544:	2300      	movs	r3, #0
 8001546:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001548:	f107 031c 	add.w	r3, r7, #28
 800154c:	4619      	mov	r1, r3
 800154e:	481f      	ldr	r0, [pc, #124]	; (80015cc <MX_GPIO_Init+0x1d8>)
 8001550:	f004 f87a 	bl	8005648 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_INT_Pin */
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 8001554:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001558:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800155a:	4b1e      	ldr	r3, [pc, #120]	; (80015d4 <MX_GPIO_Init+0x1e0>)
 800155c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 8001562:	f107 031c 	add.w	r3, r7, #28
 8001566:	4619      	mov	r1, r3
 8001568:	4816      	ldr	r0, [pc, #88]	; (80015c4 <MX_GPIO_Init+0x1d0>)
 800156a:	f004 f86d 	bl	8005648 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 800156e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001572:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001574:	2301      	movs	r3, #1
 8001576:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157c:	2300      	movs	r3, #0
 800157e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 8001580:	f107 031c 	add.w	r3, r7, #28
 8001584:	4619      	mov	r1, r3
 8001586:	4812      	ldr	r0, [pc, #72]	; (80015d0 <MX_GPIO_Init+0x1dc>)
 8001588:	f004 f85e 	bl	8005648 <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DET_Pin */
  GPIO_InitStruct.Pin = CARD_DET_Pin;
 800158c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001590:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001592:	2300      	movs	r3, #0
 8001594:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DET_GPIO_Port, &GPIO_InitStruct);
 800159a:	f107 031c 	add.w	r3, r7, #28
 800159e:	4619      	mov	r1, r3
 80015a0:	4809      	ldr	r0, [pc, #36]	; (80015c8 <MX_GPIO_Init+0x1d4>)
 80015a2:	f004 f851 	bl	8005648 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2100      	movs	r1, #0
 80015aa:	2017      	movs	r0, #23
 80015ac:	f000 fe03 	bl	80021b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80015b0:	2017      	movs	r0, #23
 80015b2:	f000 fe1a 	bl	80021ea <HAL_NVIC_EnableIRQ>

}
 80015b6:	bf00      	nop
 80015b8:	3730      	adds	r7, #48	; 0x30
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	58024400 	.word	0x58024400
 80015c4:	58021000 	.word	0x58021000
 80015c8:	58020000 	.word	0x58020000
 80015cc:	58020400 	.word	0x58020400
 80015d0:	58020c00 	.word	0x58020c00
 80015d4:	11110000 	.word	0x11110000

080015d8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	80fb      	strh	r3, [r7, #6]

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */

  end_flag = 0;
 80015e2:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <HAL_GPIO_EXTI_Callback+0x1c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]

}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	24000000 	.word	0x24000000

080015f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015fc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error Handler\n");
 80015fe:	4802      	ldr	r0, [pc, #8]	; (8001608 <Error_Handler+0x10>)
 8001600:	f014 fc1a 	bl	8015e38 <puts>
 8001604:	e7fb      	b.n	80015fe <Error_Handler+0x6>
 8001606:	bf00      	nop
 8001608:	08016fac 	.word	0x08016fac

0800160c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001614:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001618:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800161c:	f003 0301 	and.w	r3, r3, #1
 8001620:	2b00      	cmp	r3, #0
 8001622:	d013      	beq.n	800164c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001624:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001628:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800162c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001630:	2b00      	cmp	r3, #0
 8001632:	d00b      	beq.n	800164c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001634:	e000      	b.n	8001638 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001636:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001638:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0f9      	beq.n	8001636 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001642:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800164c:	687b      	ldr	r3, [r7, #4]
}
 800164e:	4618      	mov	r0, r3
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <_write>:

#include <myprintf.h>
#include "main.h"

int _write(int file, char *ptr, int len)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b086      	sub	sp, #24
 800165e:	af00      	add	r7, sp, #0
 8001660:	60f8      	str	r0, [r7, #12]
 8001662:	60b9      	str	r1, [r7, #8]
 8001664:	607a      	str	r2, [r7, #4]
  int i=0;
 8001666:	2300      	movs	r3, #0
 8001668:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
 800166e:	e009      	b.n	8001684 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	1c5a      	adds	r2, r3, #1
 8001674:	60ba      	str	r2, [r7, #8]
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ffc7 	bl	800160c <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	3301      	adds	r3, #1
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	429a      	cmp	r2, r3
 800168a:	dbf1      	blt.n	8001670 <_write+0x16>
  return len;
 800168c:	687b      	ldr	r3, [r7, #4]
}
 800168e:	4618      	mov	r0, r3
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169e:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <HAL_MspInit+0x30>)
 80016a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016a4:	4a08      	ldr	r2, [pc, #32]	; (80016c8 <HAL_MspInit+0x30>)
 80016a6:	f043 0302 	orr.w	r3, r3, #2
 80016aa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <HAL_MspInit+0x30>)
 80016b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	58024400 	.word	0x58024400

080016cc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08c      	sub	sp, #48	; 0x30
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 031c 	add.w	r3, r7, #28
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a48      	ldr	r2, [pc, #288]	; (800180c <HAL_FDCAN_MspInit+0x140>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d14e      	bne.n	800178c <HAL_FDCAN_MspInit+0xc0>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80016ee:	4b48      	ldr	r3, [pc, #288]	; (8001810 <HAL_FDCAN_MspInit+0x144>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	3301      	adds	r3, #1
 80016f4:	4a46      	ldr	r2, [pc, #280]	; (8001810 <HAL_FDCAN_MspInit+0x144>)
 80016f6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80016f8:	4b45      	ldr	r3, [pc, #276]	; (8001810 <HAL_FDCAN_MspInit+0x144>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d10e      	bne.n	800171e <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001700:	4b44      	ldr	r3, [pc, #272]	; (8001814 <HAL_FDCAN_MspInit+0x148>)
 8001702:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001706:	4a43      	ldr	r2, [pc, #268]	; (8001814 <HAL_FDCAN_MspInit+0x148>)
 8001708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800170c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001710:	4b40      	ldr	r3, [pc, #256]	; (8001814 <HAL_FDCAN_MspInit+0x148>)
 8001712:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171a:	61bb      	str	r3, [r7, #24]
 800171c:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800171e:	4b3d      	ldr	r3, [pc, #244]	; (8001814 <HAL_FDCAN_MspInit+0x148>)
 8001720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001724:	4a3b      	ldr	r2, [pc, #236]	; (8001814 <HAL_FDCAN_MspInit+0x148>)
 8001726:	f043 0302 	orr.w	r3, r3, #2
 800172a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800172e:	4b39      	ldr	r3, [pc, #228]	; (8001814 <HAL_FDCAN_MspInit+0x148>)
 8001730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	617b      	str	r3, [r7, #20]
 800173a:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800173c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001742:	2302      	movs	r3, #2
 8001744:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174a:	2303      	movs	r3, #3
 800174c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800174e:	2309      	movs	r3, #9
 8001750:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001752:	f107 031c 	add.w	r3, r7, #28
 8001756:	4619      	mov	r1, r3
 8001758:	482f      	ldr	r0, [pc, #188]	; (8001818 <HAL_FDCAN_MspInit+0x14c>)
 800175a:	f003 ff75 	bl	8005648 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB8_FMP);
 800175e:	2040      	movs	r0, #64	; 0x40
 8001760:	f004 f988 	bl	8005a74 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB9_FMP);
 8001764:	2080      	movs	r0, #128	; 0x80
 8001766:	f004 f985 	bl	8005a74 <HAL_I2CEx_EnableFastModePlus>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800176a:	2200      	movs	r2, #0
 800176c:	2100      	movs	r1, #0
 800176e:	2013      	movs	r0, #19
 8001770:	f000 fd21 	bl	80021b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001774:	2013      	movs	r0, #19
 8001776:	f000 fd38 	bl	80021ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 800177a:	2200      	movs	r2, #0
 800177c:	2100      	movs	r1, #0
 800177e:	2015      	movs	r0, #21
 8001780:	f000 fd19 	bl	80021b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8001784:	2015      	movs	r0, #21
 8001786:	f000 fd30 	bl	80021ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 800178a:	e03b      	b.n	8001804 <HAL_FDCAN_MspInit+0x138>
  else if(hfdcan->Instance==FDCAN2)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a22      	ldr	r2, [pc, #136]	; (800181c <HAL_FDCAN_MspInit+0x150>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d136      	bne.n	8001804 <HAL_FDCAN_MspInit+0x138>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001796:	4b1e      	ldr	r3, [pc, #120]	; (8001810 <HAL_FDCAN_MspInit+0x144>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	3301      	adds	r3, #1
 800179c:	4a1c      	ldr	r2, [pc, #112]	; (8001810 <HAL_FDCAN_MspInit+0x144>)
 800179e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80017a0:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <HAL_FDCAN_MspInit+0x144>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d10e      	bne.n	80017c6 <HAL_FDCAN_MspInit+0xfa>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80017a8:	4b1a      	ldr	r3, [pc, #104]	; (8001814 <HAL_FDCAN_MspInit+0x148>)
 80017aa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80017ae:	4a19      	ldr	r2, [pc, #100]	; (8001814 <HAL_FDCAN_MspInit+0x148>)
 80017b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b4:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80017b8:	4b16      	ldr	r3, [pc, #88]	; (8001814 <HAL_FDCAN_MspInit+0x148>)
 80017ba:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80017be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c6:	4b13      	ldr	r3, [pc, #76]	; (8001814 <HAL_FDCAN_MspInit+0x148>)
 80017c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017cc:	4a11      	ldr	r2, [pc, #68]	; (8001814 <HAL_FDCAN_MspInit+0x148>)
 80017ce:	f043 0302 	orr.w	r3, r3, #2
 80017d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017d6:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <HAL_FDCAN_MspInit+0x148>)
 80017d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80017e4:	2360      	movs	r3, #96	; 0x60
 80017e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e8:	2302      	movs	r3, #2
 80017ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f0:	2300      	movs	r3, #0
 80017f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80017f4:	2309      	movs	r3, #9
 80017f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f8:	f107 031c 	add.w	r3, r7, #28
 80017fc:	4619      	mov	r1, r3
 80017fe:	4806      	ldr	r0, [pc, #24]	; (8001818 <HAL_FDCAN_MspInit+0x14c>)
 8001800:	f003 ff22 	bl	8005648 <HAL_GPIO_Init>
}
 8001804:	bf00      	nop
 8001806:	3730      	adds	r7, #48	; 0x30
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	4000a000 	.word	0x4000a000
 8001810:	240009f4 	.word	0x240009f4
 8001814:	58024400 	.word	0x58024400
 8001818:	58020400 	.word	0x58020400
 800181c:	4000a400 	.word	0x4000a400

08001820 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a07      	ldr	r2, [pc, #28]	; (800184c <HAL_RTC_MspInit+0x2c>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d105      	bne.n	800183e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001832:	4b07      	ldr	r3, [pc, #28]	; (8001850 <HAL_RTC_MspInit+0x30>)
 8001834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001836:	4a06      	ldr	r2, [pc, #24]	; (8001850 <HAL_RTC_MspInit+0x30>)
 8001838:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800183c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	58004000 	.word	0x58004000
 8001850:	58024400 	.word	0x58024400

08001854 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08a      	sub	sp, #40	; 0x28
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a2e      	ldr	r2, [pc, #184]	; (800192c <HAL_SD_MspInit+0xd8>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d155      	bne.n	8001922 <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001876:	4b2e      	ldr	r3, [pc, #184]	; (8001930 <HAL_SD_MspInit+0xdc>)
 8001878:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800187c:	4a2c      	ldr	r2, [pc, #176]	; (8001930 <HAL_SD_MspInit+0xdc>)
 800187e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001882:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001886:	4b2a      	ldr	r3, [pc, #168]	; (8001930 <HAL_SD_MspInit+0xdc>)
 8001888:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800188c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001894:	4b26      	ldr	r3, [pc, #152]	; (8001930 <HAL_SD_MspInit+0xdc>)
 8001896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800189a:	4a25      	ldr	r2, [pc, #148]	; (8001930 <HAL_SD_MspInit+0xdc>)
 800189c:	f043 0304 	orr.w	r3, r3, #4
 80018a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018a4:	4b22      	ldr	r3, [pc, #136]	; (8001930 <HAL_SD_MspInit+0xdc>)
 80018a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018aa:	f003 0304 	and.w	r3, r3, #4
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018b2:	4b1f      	ldr	r3, [pc, #124]	; (8001930 <HAL_SD_MspInit+0xdc>)
 80018b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b8:	4a1d      	ldr	r2, [pc, #116]	; (8001930 <HAL_SD_MspInit+0xdc>)
 80018ba:	f043 0308 	orr.w	r3, r3, #8
 80018be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018c2:	4b1b      	ldr	r3, [pc, #108]	; (8001930 <HAL_SD_MspInit+0xdc>)
 80018c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018c8:	f003 0308 	and.w	r3, r3, #8
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80018d0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80018d4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d6:	2302      	movs	r3, #2
 80018d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018de:	2303      	movs	r3, #3
 80018e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80018e2:	230c      	movs	r3, #12
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018e6:	f107 0314 	add.w	r3, r7, #20
 80018ea:	4619      	mov	r1, r3
 80018ec:	4811      	ldr	r0, [pc, #68]	; (8001934 <HAL_SD_MspInit+0xe0>)
 80018ee:	f003 feab 	bl	8005648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018f2:	2304      	movs	r3, #4
 80018f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f6:	2302      	movs	r3, #2
 80018f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fe:	2303      	movs	r3, #3
 8001900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001902:	230c      	movs	r3, #12
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	4619      	mov	r1, r3
 800190c:	480a      	ldr	r0, [pc, #40]	; (8001938 <HAL_SD_MspInit+0xe4>)
 800190e:	f003 fe9b 	bl	8005648 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001912:	2200      	movs	r2, #0
 8001914:	2100      	movs	r1, #0
 8001916:	2031      	movs	r0, #49	; 0x31
 8001918:	f000 fc4d 	bl	80021b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800191c:	2031      	movs	r0, #49	; 0x31
 800191e:	f000 fc64 	bl	80021ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001922:	bf00      	nop
 8001924:	3728      	adds	r7, #40	; 0x28
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	52007000 	.word	0x52007000
 8001930:	58024400 	.word	0x58024400
 8001934:	58020800 	.word	0x58020800
 8001938:	58020c00 	.word	0x58020c00

0800193c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08a      	sub	sp, #40	; 0x28
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a1a      	ldr	r2, [pc, #104]	; (80019c4 <HAL_SPI_MspInit+0x88>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d12d      	bne.n	80019ba <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800195e:	4b1a      	ldr	r3, [pc, #104]	; (80019c8 <HAL_SPI_MspInit+0x8c>)
 8001960:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001964:	4a18      	ldr	r2, [pc, #96]	; (80019c8 <HAL_SPI_MspInit+0x8c>)
 8001966:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800196a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800196e:	4b16      	ldr	r3, [pc, #88]	; (80019c8 <HAL_SPI_MspInit+0x8c>)
 8001970:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001974:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <HAL_SPI_MspInit+0x8c>)
 800197e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001982:	4a11      	ldr	r2, [pc, #68]	; (80019c8 <HAL_SPI_MspInit+0x8c>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800198c:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <HAL_SPI_MspInit+0x8c>)
 800198e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800199a:	23e0      	movs	r3, #224	; 0xe0
 800199c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199e:	2302      	movs	r3, #2
 80019a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	2300      	movs	r3, #0
 80019a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019aa:	2305      	movs	r3, #5
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ae:	f107 0314 	add.w	r3, r7, #20
 80019b2:	4619      	mov	r1, r3
 80019b4:	4805      	ldr	r0, [pc, #20]	; (80019cc <HAL_SPI_MspInit+0x90>)
 80019b6:	f003 fe47 	bl	8005648 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80019ba:	bf00      	nop
 80019bc:	3728      	adds	r7, #40	; 0x28
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40013000 	.word	0x40013000
 80019c8:	58024400 	.word	0x58024400
 80019cc:	58020000 	.word	0x58020000

080019d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08c      	sub	sp, #48	; 0x30
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d8:	f107 031c 	add.w	r3, r7, #28
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a4b      	ldr	r2, [pc, #300]	; (8001b1c <HAL_UART_MspInit+0x14c>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d12e      	bne.n	8001a50 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 80019f2:	4b4b      	ldr	r3, [pc, #300]	; (8001b20 <HAL_UART_MspInit+0x150>)
 80019f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019f8:	4a49      	ldr	r2, [pc, #292]	; (8001b20 <HAL_UART_MspInit+0x150>)
 80019fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80019fe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a02:	4b47      	ldr	r3, [pc, #284]	; (8001b20 <HAL_UART_MspInit+0x150>)
 8001a04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001a0c:	61bb      	str	r3, [r7, #24]
 8001a0e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a10:	4b43      	ldr	r3, [pc, #268]	; (8001b20 <HAL_UART_MspInit+0x150>)
 8001a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a16:	4a42      	ldr	r2, [pc, #264]	; (8001b20 <HAL_UART_MspInit+0x150>)
 8001a18:	f043 0310 	orr.w	r3, r3, #16
 8001a1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a20:	4b3f      	ldr	r3, [pc, #252]	; (8001b20 <HAL_UART_MspInit+0x150>)
 8001a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a26:	f003 0310 	and.w	r3, r3, #16
 8001a2a:	617b      	str	r3, [r7, #20]
 8001a2c:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a32:	2302      	movs	r3, #2
 8001a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001a3e:	2308      	movs	r3, #8
 8001a40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a42:	f107 031c 	add.w	r3, r7, #28
 8001a46:	4619      	mov	r1, r3
 8001a48:	4836      	ldr	r0, [pc, #216]	; (8001b24 <HAL_UART_MspInit+0x154>)
 8001a4a:	f003 fdfd 	bl	8005648 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a4e:	e061      	b.n	8001b14 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a34      	ldr	r2, [pc, #208]	; (8001b28 <HAL_UART_MspInit+0x158>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d15c      	bne.n	8001b14 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a5a:	4b31      	ldr	r3, [pc, #196]	; (8001b20 <HAL_UART_MspInit+0x150>)
 8001a5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a60:	4a2f      	ldr	r2, [pc, #188]	; (8001b20 <HAL_UART_MspInit+0x150>)
 8001a62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a66:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a6a:	4b2d      	ldr	r3, [pc, #180]	; (8001b20 <HAL_UART_MspInit+0x150>)
 8001a6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a74:	613b      	str	r3, [r7, #16]
 8001a76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a78:	4b29      	ldr	r3, [pc, #164]	; (8001b20 <HAL_UART_MspInit+0x150>)
 8001a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a7e:	4a28      	ldr	r2, [pc, #160]	; (8001b20 <HAL_UART_MspInit+0x150>)
 8001a80:	f043 0308 	orr.w	r3, r3, #8
 8001a84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a88:	4b25      	ldr	r3, [pc, #148]	; (8001b20 <HAL_UART_MspInit+0x150>)
 8001a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a96:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001aa8:	2307      	movs	r3, #7
 8001aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aac:	f107 031c 	add.w	r3, r7, #28
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	481e      	ldr	r0, [pc, #120]	; (8001b2c <HAL_UART_MspInit+0x15c>)
 8001ab4:	f003 fdc8 	bl	8005648 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8001ab8:	4b1d      	ldr	r3, [pc, #116]	; (8001b30 <HAL_UART_MspInit+0x160>)
 8001aba:	4a1e      	ldr	r2, [pc, #120]	; (8001b34 <HAL_UART_MspInit+0x164>)
 8001abc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001abe:	4b1c      	ldr	r3, [pc, #112]	; (8001b30 <HAL_UART_MspInit+0x160>)
 8001ac0:	222d      	movs	r2, #45	; 0x2d
 8001ac2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ac4:	4b1a      	ldr	r3, [pc, #104]	; (8001b30 <HAL_UART_MspInit+0x160>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aca:	4b19      	ldr	r3, [pc, #100]	; (8001b30 <HAL_UART_MspInit+0x160>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ad0:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <HAL_UART_MspInit+0x160>)
 8001ad2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ad6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ad8:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <HAL_UART_MspInit+0x160>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ade:	4b14      	ldr	r3, [pc, #80]	; (8001b30 <HAL_UART_MspInit+0x160>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001ae4:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <HAL_UART_MspInit+0x160>)
 8001ae6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aea:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001aec:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <HAL_UART_MspInit+0x160>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001af2:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <HAL_UART_MspInit+0x160>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001af8:	480d      	ldr	r0, [pc, #52]	; (8001b30 <HAL_UART_MspInit+0x160>)
 8001afa:	f000 fb91 	bl	8002220 <HAL_DMA_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <HAL_UART_MspInit+0x138>
      Error_Handler();
 8001b04:	f7ff fd78 	bl	80015f8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a09      	ldr	r2, [pc, #36]	; (8001b30 <HAL_UART_MspInit+0x160>)
 8001b0c:	679a      	str	r2, [r3, #120]	; 0x78
 8001b0e:	4a08      	ldr	r2, [pc, #32]	; (8001b30 <HAL_UART_MspInit+0x160>)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001b14:	bf00      	nop
 8001b16:	3730      	adds	r7, #48	; 0x30
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40007c00 	.word	0x40007c00
 8001b20:	58024400 	.word	0x58024400
 8001b24:	58021000 	.word	0x58021000
 8001b28:	40004800 	.word	0x40004800
 8001b2c:	58020c00 	.word	0x58020c00
 8001b30:	24001190 	.word	0x24001190
 8001b34:	40020010 	.word	0x40020010

08001b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001b3c:	f006 f9c4 	bl	8007ec8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b40:	e7fe      	b.n	8001b40 <NMI_Handler+0x8>

08001b42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b42:	b480      	push	{r7}
 8001b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b46:	e7fe      	b.n	8001b46 <HardFault_Handler+0x4>

08001b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b4c:	e7fe      	b.n	8001b4c <MemManage_Handler+0x4>

08001b4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b52:	e7fe      	b.n	8001b52 <BusFault_Handler+0x4>

08001b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b58:	e7fe      	b.n	8001b58 <UsageFault_Handler+0x4>

08001b5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b88:	f000 f9ec 	bl	8001f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b8c:	bf00      	nop
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001b94:	4802      	ldr	r0, [pc, #8]	; (8001ba0 <DMA1_Stream0_IRQHandler+0x10>)
 8001b96:	f001 f909 	bl	8002dac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	24001190 	.word	0x24001190

08001ba4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001ba8:	4802      	ldr	r0, [pc, #8]	; (8001bb4 <FDCAN1_IT0_IRQHandler+0x10>)
 8001baa:	f003 f8bd 	bl	8004d28 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	24001338 	.word	0x24001338

08001bb8 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001bbc:	4802      	ldr	r0, [pc, #8]	; (8001bc8 <FDCAN1_IT1_IRQHandler+0x10>)
 8001bbe:	f003 f8b3 	bl	8004d28 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	24001338 	.word	0x24001338

08001bcc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001bd0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001bd4:	f003 ff34 	bl	8005a40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001be0:	4802      	ldr	r0, [pc, #8]	; (8001bec <SDMMC1_IRQHandler+0x10>)
 8001be2:	f009 f82f 	bl	800ac44 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	24001294 	.word	0x24001294

08001bf0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001bf4:	4802      	ldr	r0, [pc, #8]	; (8001c00 <OTG_FS_IRQHandler+0x10>)
 8001bf6:	f004 f8b8 	bl	8005d6a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	24001f24 	.word	0x24001f24

08001c04 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]
 8001c14:	e00a      	b.n	8001c2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c16:	f3af 8000 	nop.w
 8001c1a:	4601      	mov	r1, r0
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	1c5a      	adds	r2, r3, #1
 8001c20:	60ba      	str	r2, [r7, #8]
 8001c22:	b2ca      	uxtb	r2, r1
 8001c24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	dbf0      	blt.n	8001c16 <_read+0x12>
	}

return len;
 8001c34:	687b      	ldr	r3, [r7, #4]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <_close>:
	}
	return len;
}

int _close(int file)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
	return -1;
 8001c46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c66:	605a      	str	r2, [r3, #4]
	return 0;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <_isatty>:

int _isatty(int file)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
	return 1;
 8001c7e:	2301      	movs	r3, #1
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
	return 0;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
	...

08001ca8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cb0:	4a14      	ldr	r2, [pc, #80]	; (8001d04 <_sbrk+0x5c>)
 8001cb2:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <_sbrk+0x60>)
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cbc:	4b13      	ldr	r3, [pc, #76]	; (8001d0c <_sbrk+0x64>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d102      	bne.n	8001cca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cc4:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <_sbrk+0x64>)
 8001cc6:	4a12      	ldr	r2, [pc, #72]	; (8001d10 <_sbrk+0x68>)
 8001cc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cca:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <_sbrk+0x64>)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d207      	bcs.n	8001ce8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cd8:	f013 ff44 	bl	8015b64 <__errno>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	230c      	movs	r3, #12
 8001ce0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce6:	e009      	b.n	8001cfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ce8:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <_sbrk+0x64>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cee:	4b07      	ldr	r3, [pc, #28]	; (8001d0c <_sbrk+0x64>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	4a05      	ldr	r2, [pc, #20]	; (8001d0c <_sbrk+0x64>)
 8001cf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	24080000 	.word	0x24080000
 8001d08:	00000400 	.word	0x00000400
 8001d0c:	240009f8 	.word	0x240009f8
 8001d10:	24002330 	.word	0x24002330

08001d14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d18:	4b39      	ldr	r3, [pc, #228]	; (8001e00 <SystemInit+0xec>)
 8001d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d1e:	4a38      	ldr	r2, [pc, #224]	; (8001e00 <SystemInit+0xec>)
 8001d20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d28:	4b36      	ldr	r3, [pc, #216]	; (8001e04 <SystemInit+0xf0>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 030f 	and.w	r3, r3, #15
 8001d30:	2b06      	cmp	r3, #6
 8001d32:	d807      	bhi.n	8001d44 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d34:	4b33      	ldr	r3, [pc, #204]	; (8001e04 <SystemInit+0xf0>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f023 030f 	bic.w	r3, r3, #15
 8001d3c:	4a31      	ldr	r2, [pc, #196]	; (8001e04 <SystemInit+0xf0>)
 8001d3e:	f043 0307 	orr.w	r3, r3, #7
 8001d42:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001d44:	4b30      	ldr	r3, [pc, #192]	; (8001e08 <SystemInit+0xf4>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a2f      	ldr	r2, [pc, #188]	; (8001e08 <SystemInit+0xf4>)
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d50:	4b2d      	ldr	r3, [pc, #180]	; (8001e08 <SystemInit+0xf4>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001d56:	4b2c      	ldr	r3, [pc, #176]	; (8001e08 <SystemInit+0xf4>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	492b      	ldr	r1, [pc, #172]	; (8001e08 <SystemInit+0xf4>)
 8001d5c:	4b2b      	ldr	r3, [pc, #172]	; (8001e0c <SystemInit+0xf8>)
 8001d5e:	4013      	ands	r3, r2
 8001d60:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d62:	4b28      	ldr	r3, [pc, #160]	; (8001e04 <SystemInit+0xf0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	2b07      	cmp	r3, #7
 8001d6c:	d907      	bls.n	8001d7e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d6e:	4b25      	ldr	r3, [pc, #148]	; (8001e04 <SystemInit+0xf0>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f023 030f 	bic.w	r3, r3, #15
 8001d76:	4a23      	ldr	r2, [pc, #140]	; (8001e04 <SystemInit+0xf0>)
 8001d78:	f043 0307 	orr.w	r3, r3, #7
 8001d7c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001d7e:	4b22      	ldr	r3, [pc, #136]	; (8001e08 <SystemInit+0xf4>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001d84:	4b20      	ldr	r3, [pc, #128]	; (8001e08 <SystemInit+0xf4>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001d8a:	4b1f      	ldr	r3, [pc, #124]	; (8001e08 <SystemInit+0xf4>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001d90:	4b1d      	ldr	r3, [pc, #116]	; (8001e08 <SystemInit+0xf4>)
 8001d92:	4a1f      	ldr	r2, [pc, #124]	; (8001e10 <SystemInit+0xfc>)
 8001d94:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001d96:	4b1c      	ldr	r3, [pc, #112]	; (8001e08 <SystemInit+0xf4>)
 8001d98:	4a1e      	ldr	r2, [pc, #120]	; (8001e14 <SystemInit+0x100>)
 8001d9a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001d9c:	4b1a      	ldr	r3, [pc, #104]	; (8001e08 <SystemInit+0xf4>)
 8001d9e:	4a1e      	ldr	r2, [pc, #120]	; (8001e18 <SystemInit+0x104>)
 8001da0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001da2:	4b19      	ldr	r3, [pc, #100]	; (8001e08 <SystemInit+0xf4>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001da8:	4b17      	ldr	r3, [pc, #92]	; (8001e08 <SystemInit+0xf4>)
 8001daa:	4a1b      	ldr	r2, [pc, #108]	; (8001e18 <SystemInit+0x104>)
 8001dac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001dae:	4b16      	ldr	r3, [pc, #88]	; (8001e08 <SystemInit+0xf4>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001db4:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <SystemInit+0xf4>)
 8001db6:	4a18      	ldr	r2, [pc, #96]	; (8001e18 <SystemInit+0x104>)
 8001db8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001dba:	4b13      	ldr	r3, [pc, #76]	; (8001e08 <SystemInit+0xf4>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001dc0:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <SystemInit+0xf4>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a10      	ldr	r2, [pc, #64]	; (8001e08 <SystemInit+0xf4>)
 8001dc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001dcc:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <SystemInit+0xf4>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001dd2:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <SystemInit+0x108>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <SystemInit+0x10c>)
 8001dd8:	4013      	ands	r3, r2
 8001dda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001dde:	d202      	bcs.n	8001de6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001de0:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <SystemInit+0x110>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001de6:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <SystemInit+0x114>)
 8001de8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001dec:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001dee:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <SystemInit+0xec>)
 8001df0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001df4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001df6:	bf00      	nop
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	e000ed00 	.word	0xe000ed00
 8001e04:	52002000 	.word	0x52002000
 8001e08:	58024400 	.word	0x58024400
 8001e0c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001e10:	02020200 	.word	0x02020200
 8001e14:	01ff0000 	.word	0x01ff0000
 8001e18:	01010280 	.word	0x01010280
 8001e1c:	5c001000 	.word	0x5c001000
 8001e20:	ffff0000 	.word	0xffff0000
 8001e24:	51008108 	.word	0x51008108
 8001e28:	52004000 	.word	0x52004000

08001e2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e64 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001e30:	f7ff ff70 	bl	8001d14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e34:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e36:	e003      	b.n	8001e40 <LoopCopyDataInit>

08001e38 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e38:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001e3a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e3c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e3e:	3104      	adds	r1, #4

08001e40 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e40:	480a      	ldr	r0, [pc, #40]	; (8001e6c <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001e42:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001e44:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e46:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e48:	d3f6      	bcc.n	8001e38 <CopyDataInit>
  ldr  r2, =_sbss
 8001e4a:	4a0a      	ldr	r2, [pc, #40]	; (8001e74 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001e4c:	e002      	b.n	8001e54 <LoopFillZerobss>

08001e4e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e4e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e50:	f842 3b04 	str.w	r3, [r2], #4

08001e54 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e54:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001e56:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e58:	d3f9      	bcc.n	8001e4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e5a:	f013 fe89 	bl	8015b70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e5e:	f7fe fdf1 	bl	8000a44 <main>
  bx  lr    
 8001e62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e64:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001e68:	08017240 	.word	0x08017240
  ldr  r0, =_sdata
 8001e6c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001e70:	240001d0 	.word	0x240001d0
  ldr  r2, =_sbss
 8001e74:	240001d0 	.word	0x240001d0
  ldr  r3, = _ebss
 8001e78:	24002330 	.word	0x24002330

08001e7c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e7c:	e7fe      	b.n	8001e7c <ADC3_IRQHandler>
	...

08001e80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e86:	2003      	movs	r0, #3
 8001e88:	f000 f98a 	bl	80021a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e8c:	f005 fe4e 	bl	8007b2c <HAL_RCC_GetSysClockFreq>
 8001e90:	4601      	mov	r1, r0
 8001e92:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <HAL_Init+0x68>)
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	0a1b      	lsrs	r3, r3, #8
 8001e98:	f003 030f 	and.w	r3, r3, #15
 8001e9c:	4a13      	ldr	r2, [pc, #76]	; (8001eec <HAL_Init+0x6c>)
 8001e9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ea0:	f003 031f 	and.w	r3, r3, #31
 8001ea4:	fa21 f303 	lsr.w	r3, r1, r3
 8001ea8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001eaa:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <HAL_Init+0x68>)
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	4a0e      	ldr	r2, [pc, #56]	; (8001eec <HAL_Init+0x6c>)
 8001eb4:	5cd3      	ldrb	r3, [r2, r3]
 8001eb6:	f003 031f 	and.w	r3, r3, #31
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec0:	4a0b      	ldr	r2, [pc, #44]	; (8001ef0 <HAL_Init+0x70>)
 8001ec2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ec4:	4a0b      	ldr	r2, [pc, #44]	; (8001ef4 <HAL_Init+0x74>)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001eca:	2000      	movs	r0, #0
 8001ecc:	f000 f814 	bl	8001ef8 <HAL_InitTick>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e002      	b.n	8001ee0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001eda:	f7ff fbdd 	bl	8001698 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	58024400 	.word	0x58024400
 8001eec:	080170a0 	.word	0x080170a0
 8001ef0:	24000008 	.word	0x24000008
 8001ef4:	24000004 	.word	0x24000004

08001ef8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001f00:	4b15      	ldr	r3, [pc, #84]	; (8001f58 <HAL_InitTick+0x60>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d101      	bne.n	8001f0c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e021      	b.n	8001f50 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001f0c:	4b13      	ldr	r3, [pc, #76]	; (8001f5c <HAL_InitTick+0x64>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <HAL_InitTick+0x60>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	4619      	mov	r1, r3
 8001f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 f96f 	bl	8002206 <HAL_SYSTICK_Config>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e00e      	b.n	8001f50 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b0f      	cmp	r3, #15
 8001f36:	d80a      	bhi.n	8001f4e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f38:	2200      	movs	r2, #0
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f40:	f000 f939 	bl	80021b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f44:	4a06      	ldr	r2, [pc, #24]	; (8001f60 <HAL_InitTick+0x68>)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	e000      	b.n	8001f50 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	24000010 	.word	0x24000010
 8001f5c:	24000004 	.word	0x24000004
 8001f60:	2400000c 	.word	0x2400000c

08001f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <HAL_IncTick+0x20>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <HAL_IncTick+0x24>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4413      	add	r3, r2
 8001f74:	4a04      	ldr	r2, [pc, #16]	; (8001f88 <HAL_IncTick+0x24>)
 8001f76:	6013      	str	r3, [r2, #0]
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	24000010 	.word	0x24000010
 8001f88:	240015e8 	.word	0x240015e8

08001f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f90:	4b03      	ldr	r3, [pc, #12]	; (8001fa0 <HAL_GetTick+0x14>)
 8001f92:	681b      	ldr	r3, [r3, #0]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	240015e8 	.word	0x240015e8

08001fa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fac:	f7ff ffee 	bl	8001f8c <HAL_GetTick>
 8001fb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fbc:	d005      	beq.n	8001fca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fbe:	4b09      	ldr	r3, [pc, #36]	; (8001fe4 <HAL_Delay+0x40>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fca:	bf00      	nop
 8001fcc:	f7ff ffde 	bl	8001f8c <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d8f7      	bhi.n	8001fcc <HAL_Delay+0x28>
  {
  }
}
 8001fdc:	bf00      	nop
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	24000010 	.word	0x24000010

08001fe8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001fec:	4b03      	ldr	r3, [pc, #12]	; (8001ffc <HAL_GetREVID+0x14>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	0c1b      	lsrs	r3, r3, #16
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	5c001000 	.word	0x5c001000

08002000 <__NVIC_SetPriorityGrouping>:
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002010:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <__NVIC_SetPriorityGrouping+0x40>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800201c:	4013      	ands	r3, r2
 800201e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002028:	4b06      	ldr	r3, [pc, #24]	; (8002044 <__NVIC_SetPriorityGrouping+0x44>)
 800202a:	4313      	orrs	r3, r2
 800202c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800202e:	4a04      	ldr	r2, [pc, #16]	; (8002040 <__NVIC_SetPriorityGrouping+0x40>)
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	60d3      	str	r3, [r2, #12]
}
 8002034:	bf00      	nop
 8002036:	3714      	adds	r7, #20
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	e000ed00 	.word	0xe000ed00
 8002044:	05fa0000 	.word	0x05fa0000

08002048 <__NVIC_GetPriorityGrouping>:
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800204c:	4b04      	ldr	r3, [pc, #16]	; (8002060 <__NVIC_GetPriorityGrouping+0x18>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	0a1b      	lsrs	r3, r3, #8
 8002052:	f003 0307 	and.w	r3, r3, #7
}
 8002056:	4618      	mov	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	e000ed00 	.word	0xe000ed00

08002064 <__NVIC_EnableIRQ>:
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800206e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002072:	2b00      	cmp	r3, #0
 8002074:	db0b      	blt.n	800208e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002076:	88fb      	ldrh	r3, [r7, #6]
 8002078:	f003 021f 	and.w	r2, r3, #31
 800207c:	4907      	ldr	r1, [pc, #28]	; (800209c <__NVIC_EnableIRQ+0x38>)
 800207e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002082:	095b      	lsrs	r3, r3, #5
 8002084:	2001      	movs	r0, #1
 8002086:	fa00 f202 	lsl.w	r2, r0, r2
 800208a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	e000e100 	.word	0xe000e100

080020a0 <__NVIC_SetPriority>:
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	6039      	str	r1, [r7, #0]
 80020aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	db0a      	blt.n	80020ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	490c      	ldr	r1, [pc, #48]	; (80020ec <__NVIC_SetPriority+0x4c>)
 80020ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020be:	0112      	lsls	r2, r2, #4
 80020c0:	b2d2      	uxtb	r2, r2
 80020c2:	440b      	add	r3, r1
 80020c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80020c8:	e00a      	b.n	80020e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	4908      	ldr	r1, [pc, #32]	; (80020f0 <__NVIC_SetPriority+0x50>)
 80020d0:	88fb      	ldrh	r3, [r7, #6]
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	3b04      	subs	r3, #4
 80020d8:	0112      	lsls	r2, r2, #4
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	440b      	add	r3, r1
 80020de:	761a      	strb	r2, [r3, #24]
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	e000e100 	.word	0xe000e100
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <NVIC_EncodePriority>:
{
 80020f4:	b480      	push	{r7}
 80020f6:	b089      	sub	sp, #36	; 0x24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f1c3 0307 	rsb	r3, r3, #7
 800210e:	2b04      	cmp	r3, #4
 8002110:	bf28      	it	cs
 8002112:	2304      	movcs	r3, #4
 8002114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	3304      	adds	r3, #4
 800211a:	2b06      	cmp	r3, #6
 800211c:	d902      	bls.n	8002124 <NVIC_EncodePriority+0x30>
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	3b03      	subs	r3, #3
 8002122:	e000      	b.n	8002126 <NVIC_EncodePriority+0x32>
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002128:	f04f 32ff 	mov.w	r2, #4294967295
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43da      	mvns	r2, r3
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	401a      	ands	r2, r3
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800213c:	f04f 31ff 	mov.w	r1, #4294967295
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	fa01 f303 	lsl.w	r3, r1, r3
 8002146:	43d9      	mvns	r1, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800214c:	4313      	orrs	r3, r2
}
 800214e:	4618      	mov	r0, r3
 8002150:	3724      	adds	r7, #36	; 0x24
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
	...

0800215c <SysTick_Config>:
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3b01      	subs	r3, #1
 8002168:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800216c:	d301      	bcc.n	8002172 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800216e:	2301      	movs	r3, #1
 8002170:	e00f      	b.n	8002192 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002172:	4a0a      	ldr	r2, [pc, #40]	; (800219c <SysTick_Config+0x40>)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3b01      	subs	r3, #1
 8002178:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800217a:	210f      	movs	r1, #15
 800217c:	f04f 30ff 	mov.w	r0, #4294967295
 8002180:	f7ff ff8e 	bl	80020a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002184:	4b05      	ldr	r3, [pc, #20]	; (800219c <SysTick_Config+0x40>)
 8002186:	2200      	movs	r2, #0
 8002188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800218a:	4b04      	ldr	r3, [pc, #16]	; (800219c <SysTick_Config+0x40>)
 800218c:	2207      	movs	r2, #7
 800218e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	e000e010 	.word	0xe000e010

080021a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7ff ff29 	bl	8002000 <__NVIC_SetPriorityGrouping>
}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b086      	sub	sp, #24
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	4603      	mov	r3, r0
 80021be:	60b9      	str	r1, [r7, #8]
 80021c0:	607a      	str	r2, [r7, #4]
 80021c2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021c4:	f7ff ff40 	bl	8002048 <__NVIC_GetPriorityGrouping>
 80021c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	68b9      	ldr	r1, [r7, #8]
 80021ce:	6978      	ldr	r0, [r7, #20]
 80021d0:	f7ff ff90 	bl	80020f4 <NVIC_EncodePriority>
 80021d4:	4602      	mov	r2, r0
 80021d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021da:	4611      	mov	r1, r2
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff ff5f 	bl	80020a0 <__NVIC_SetPriority>
}
 80021e2:	bf00      	nop
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b082      	sub	sp, #8
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	4603      	mov	r3, r0
 80021f2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff ff33 	bl	8002064 <__NVIC_EnableIRQ>
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7ff ffa4 	bl	800215c <SysTick_Config>
 8002214:	4603      	mov	r3, r0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
	...

08002220 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002228:	f7ff feb0 	bl	8001f8c <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e316      	b.n	8002866 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a66      	ldr	r2, [pc, #408]	; (80023d8 <HAL_DMA_Init+0x1b8>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d04a      	beq.n	80022d8 <HAL_DMA_Init+0xb8>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a65      	ldr	r2, [pc, #404]	; (80023dc <HAL_DMA_Init+0x1bc>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d045      	beq.n	80022d8 <HAL_DMA_Init+0xb8>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a63      	ldr	r2, [pc, #396]	; (80023e0 <HAL_DMA_Init+0x1c0>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d040      	beq.n	80022d8 <HAL_DMA_Init+0xb8>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a62      	ldr	r2, [pc, #392]	; (80023e4 <HAL_DMA_Init+0x1c4>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d03b      	beq.n	80022d8 <HAL_DMA_Init+0xb8>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a60      	ldr	r2, [pc, #384]	; (80023e8 <HAL_DMA_Init+0x1c8>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d036      	beq.n	80022d8 <HAL_DMA_Init+0xb8>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a5f      	ldr	r2, [pc, #380]	; (80023ec <HAL_DMA_Init+0x1cc>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d031      	beq.n	80022d8 <HAL_DMA_Init+0xb8>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a5d      	ldr	r2, [pc, #372]	; (80023f0 <HAL_DMA_Init+0x1d0>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d02c      	beq.n	80022d8 <HAL_DMA_Init+0xb8>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a5c      	ldr	r2, [pc, #368]	; (80023f4 <HAL_DMA_Init+0x1d4>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d027      	beq.n	80022d8 <HAL_DMA_Init+0xb8>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a5a      	ldr	r2, [pc, #360]	; (80023f8 <HAL_DMA_Init+0x1d8>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d022      	beq.n	80022d8 <HAL_DMA_Init+0xb8>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a59      	ldr	r2, [pc, #356]	; (80023fc <HAL_DMA_Init+0x1dc>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d01d      	beq.n	80022d8 <HAL_DMA_Init+0xb8>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a57      	ldr	r2, [pc, #348]	; (8002400 <HAL_DMA_Init+0x1e0>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d018      	beq.n	80022d8 <HAL_DMA_Init+0xb8>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a56      	ldr	r2, [pc, #344]	; (8002404 <HAL_DMA_Init+0x1e4>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d013      	beq.n	80022d8 <HAL_DMA_Init+0xb8>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a54      	ldr	r2, [pc, #336]	; (8002408 <HAL_DMA_Init+0x1e8>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d00e      	beq.n	80022d8 <HAL_DMA_Init+0xb8>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a53      	ldr	r2, [pc, #332]	; (800240c <HAL_DMA_Init+0x1ec>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d009      	beq.n	80022d8 <HAL_DMA_Init+0xb8>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a51      	ldr	r2, [pc, #324]	; (8002410 <HAL_DMA_Init+0x1f0>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d004      	beq.n	80022d8 <HAL_DMA_Init+0xb8>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a50      	ldr	r2, [pc, #320]	; (8002414 <HAL_DMA_Init+0x1f4>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d101      	bne.n	80022dc <HAL_DMA_Init+0xbc>
 80022d8:	2301      	movs	r3, #1
 80022da:	e000      	b.n	80022de <HAL_DMA_Init+0xbe>
 80022dc:	2300      	movs	r3, #0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f000 813b 	beq.w	800255a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2202      	movs	r2, #2
 80022f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a37      	ldr	r2, [pc, #220]	; (80023d8 <HAL_DMA_Init+0x1b8>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d04a      	beq.n	8002394 <HAL_DMA_Init+0x174>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a36      	ldr	r2, [pc, #216]	; (80023dc <HAL_DMA_Init+0x1bc>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d045      	beq.n	8002394 <HAL_DMA_Init+0x174>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a34      	ldr	r2, [pc, #208]	; (80023e0 <HAL_DMA_Init+0x1c0>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d040      	beq.n	8002394 <HAL_DMA_Init+0x174>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a33      	ldr	r2, [pc, #204]	; (80023e4 <HAL_DMA_Init+0x1c4>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d03b      	beq.n	8002394 <HAL_DMA_Init+0x174>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a31      	ldr	r2, [pc, #196]	; (80023e8 <HAL_DMA_Init+0x1c8>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d036      	beq.n	8002394 <HAL_DMA_Init+0x174>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a30      	ldr	r2, [pc, #192]	; (80023ec <HAL_DMA_Init+0x1cc>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d031      	beq.n	8002394 <HAL_DMA_Init+0x174>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a2e      	ldr	r2, [pc, #184]	; (80023f0 <HAL_DMA_Init+0x1d0>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d02c      	beq.n	8002394 <HAL_DMA_Init+0x174>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a2d      	ldr	r2, [pc, #180]	; (80023f4 <HAL_DMA_Init+0x1d4>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d027      	beq.n	8002394 <HAL_DMA_Init+0x174>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a2b      	ldr	r2, [pc, #172]	; (80023f8 <HAL_DMA_Init+0x1d8>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d022      	beq.n	8002394 <HAL_DMA_Init+0x174>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a2a      	ldr	r2, [pc, #168]	; (80023fc <HAL_DMA_Init+0x1dc>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d01d      	beq.n	8002394 <HAL_DMA_Init+0x174>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a28      	ldr	r2, [pc, #160]	; (8002400 <HAL_DMA_Init+0x1e0>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d018      	beq.n	8002394 <HAL_DMA_Init+0x174>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a27      	ldr	r2, [pc, #156]	; (8002404 <HAL_DMA_Init+0x1e4>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d013      	beq.n	8002394 <HAL_DMA_Init+0x174>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a25      	ldr	r2, [pc, #148]	; (8002408 <HAL_DMA_Init+0x1e8>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d00e      	beq.n	8002394 <HAL_DMA_Init+0x174>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a24      	ldr	r2, [pc, #144]	; (800240c <HAL_DMA_Init+0x1ec>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d009      	beq.n	8002394 <HAL_DMA_Init+0x174>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a22      	ldr	r2, [pc, #136]	; (8002410 <HAL_DMA_Init+0x1f0>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d004      	beq.n	8002394 <HAL_DMA_Init+0x174>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a21      	ldr	r2, [pc, #132]	; (8002414 <HAL_DMA_Init+0x1f4>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d108      	bne.n	80023a6 <HAL_DMA_Init+0x186>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 0201 	bic.w	r2, r2, #1
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	e007      	b.n	80023b6 <HAL_DMA_Init+0x196>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0201 	bic.w	r2, r2, #1
 80023b4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80023b6:	e02f      	b.n	8002418 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023b8:	f7ff fde8 	bl	8001f8c <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b05      	cmp	r3, #5
 80023c4:	d928      	bls.n	8002418 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2220      	movs	r2, #32
 80023ca:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2203      	movs	r2, #3
 80023d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e246      	b.n	8002866 <HAL_DMA_Init+0x646>
 80023d8:	40020010 	.word	0x40020010
 80023dc:	40020028 	.word	0x40020028
 80023e0:	40020040 	.word	0x40020040
 80023e4:	40020058 	.word	0x40020058
 80023e8:	40020070 	.word	0x40020070
 80023ec:	40020088 	.word	0x40020088
 80023f0:	400200a0 	.word	0x400200a0
 80023f4:	400200b8 	.word	0x400200b8
 80023f8:	40020410 	.word	0x40020410
 80023fc:	40020428 	.word	0x40020428
 8002400:	40020440 	.word	0x40020440
 8002404:	40020458 	.word	0x40020458
 8002408:	40020470 	.word	0x40020470
 800240c:	40020488 	.word	0x40020488
 8002410:	400204a0 	.word	0x400204a0
 8002414:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1c8      	bne.n	80023b8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	4b83      	ldr	r3, [pc, #524]	; (8002640 <HAL_DMA_Init+0x420>)
 8002432:	4013      	ands	r3, r2
 8002434:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800243e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800244a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002456:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	4313      	orrs	r3, r2
 8002462:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002468:	2b04      	cmp	r3, #4
 800246a:	d107      	bne.n	800247c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002474:	4313      	orrs	r3, r2
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	4313      	orrs	r3, r2
 800247a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800247c:	4b71      	ldr	r3, [pc, #452]	; (8002644 <HAL_DMA_Init+0x424>)
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	4b71      	ldr	r3, [pc, #452]	; (8002648 <HAL_DMA_Init+0x428>)
 8002482:	4013      	ands	r3, r2
 8002484:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002488:	d328      	bcc.n	80024dc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b28      	cmp	r3, #40	; 0x28
 8002490:	d903      	bls.n	800249a <HAL_DMA_Init+0x27a>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b2e      	cmp	r3, #46	; 0x2e
 8002498:	d917      	bls.n	80024ca <HAL_DMA_Init+0x2aa>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b3e      	cmp	r3, #62	; 0x3e
 80024a0:	d903      	bls.n	80024aa <HAL_DMA_Init+0x28a>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b42      	cmp	r3, #66	; 0x42
 80024a8:	d90f      	bls.n	80024ca <HAL_DMA_Init+0x2aa>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	2b46      	cmp	r3, #70	; 0x46
 80024b0:	d903      	bls.n	80024ba <HAL_DMA_Init+0x29a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b48      	cmp	r3, #72	; 0x48
 80024b8:	d907      	bls.n	80024ca <HAL_DMA_Init+0x2aa>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2b4e      	cmp	r3, #78	; 0x4e
 80024c0:	d905      	bls.n	80024ce <HAL_DMA_Init+0x2ae>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b52      	cmp	r3, #82	; 0x52
 80024c8:	d801      	bhi.n	80024ce <HAL_DMA_Init+0x2ae>
 80024ca:	2301      	movs	r3, #1
 80024cc:	e000      	b.n	80024d0 <HAL_DMA_Init+0x2b0>
 80024ce:	2300      	movs	r3, #0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024da:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	f023 0307 	bic.w	r3, r3, #7
 80024f2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	2b04      	cmp	r3, #4
 8002504:	d117      	bne.n	8002536 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	4313      	orrs	r3, r2
 800250e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00e      	beq.n	8002536 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f001 fdcf 	bl	80040bc <DMA_CheckFifoParam>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d008      	beq.n	8002536 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2240      	movs	r2, #64	; 0x40
 8002528:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e197      	b.n	8002866 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f001 fd0a 	bl	8003f58 <DMA_CalcBaseAndBitshift>
 8002544:	4603      	mov	r3, r0
 8002546:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254c:	f003 031f 	and.w	r3, r3, #31
 8002550:	223f      	movs	r2, #63	; 0x3f
 8002552:	409a      	lsls	r2, r3
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	e0cd      	b.n	80026f6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a3b      	ldr	r2, [pc, #236]	; (800264c <HAL_DMA_Init+0x42c>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d022      	beq.n	80025aa <HAL_DMA_Init+0x38a>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a39      	ldr	r2, [pc, #228]	; (8002650 <HAL_DMA_Init+0x430>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d01d      	beq.n	80025aa <HAL_DMA_Init+0x38a>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a38      	ldr	r2, [pc, #224]	; (8002654 <HAL_DMA_Init+0x434>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d018      	beq.n	80025aa <HAL_DMA_Init+0x38a>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a36      	ldr	r2, [pc, #216]	; (8002658 <HAL_DMA_Init+0x438>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d013      	beq.n	80025aa <HAL_DMA_Init+0x38a>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a35      	ldr	r2, [pc, #212]	; (800265c <HAL_DMA_Init+0x43c>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d00e      	beq.n	80025aa <HAL_DMA_Init+0x38a>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a33      	ldr	r2, [pc, #204]	; (8002660 <HAL_DMA_Init+0x440>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d009      	beq.n	80025aa <HAL_DMA_Init+0x38a>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a32      	ldr	r2, [pc, #200]	; (8002664 <HAL_DMA_Init+0x444>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d004      	beq.n	80025aa <HAL_DMA_Init+0x38a>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a30      	ldr	r2, [pc, #192]	; (8002668 <HAL_DMA_Init+0x448>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d101      	bne.n	80025ae <HAL_DMA_Init+0x38e>
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <HAL_DMA_Init+0x390>
 80025ae:	2300      	movs	r3, #0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f000 8097 	beq.w	80026e4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a24      	ldr	r2, [pc, #144]	; (800264c <HAL_DMA_Init+0x42c>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d021      	beq.n	8002604 <HAL_DMA_Init+0x3e4>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a22      	ldr	r2, [pc, #136]	; (8002650 <HAL_DMA_Init+0x430>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d01c      	beq.n	8002604 <HAL_DMA_Init+0x3e4>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a21      	ldr	r2, [pc, #132]	; (8002654 <HAL_DMA_Init+0x434>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d017      	beq.n	8002604 <HAL_DMA_Init+0x3e4>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a1f      	ldr	r2, [pc, #124]	; (8002658 <HAL_DMA_Init+0x438>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d012      	beq.n	8002604 <HAL_DMA_Init+0x3e4>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a1e      	ldr	r2, [pc, #120]	; (800265c <HAL_DMA_Init+0x43c>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d00d      	beq.n	8002604 <HAL_DMA_Init+0x3e4>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a1c      	ldr	r2, [pc, #112]	; (8002660 <HAL_DMA_Init+0x440>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d008      	beq.n	8002604 <HAL_DMA_Init+0x3e4>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a1b      	ldr	r2, [pc, #108]	; (8002664 <HAL_DMA_Init+0x444>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d003      	beq.n	8002604 <HAL_DMA_Init+0x3e4>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a19      	ldr	r2, [pc, #100]	; (8002668 <HAL_DMA_Init+0x448>)
 8002602:	4293      	cmp	r3, r2
 8002604:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2202      	movs	r2, #2
 8002612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	4b12      	ldr	r3, [pc, #72]	; (800266c <HAL_DMA_Init+0x44c>)
 8002622:	4013      	ands	r3, r2
 8002624:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	2b40      	cmp	r3, #64	; 0x40
 800262c:	d020      	beq.n	8002670 <HAL_DMA_Init+0x450>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	2b80      	cmp	r3, #128	; 0x80
 8002634:	d102      	bne.n	800263c <HAL_DMA_Init+0x41c>
 8002636:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800263a:	e01a      	b.n	8002672 <HAL_DMA_Init+0x452>
 800263c:	2300      	movs	r3, #0
 800263e:	e018      	b.n	8002672 <HAL_DMA_Init+0x452>
 8002640:	fe10803f 	.word	0xfe10803f
 8002644:	5c001000 	.word	0x5c001000
 8002648:	ffff0000 	.word	0xffff0000
 800264c:	58025408 	.word	0x58025408
 8002650:	5802541c 	.word	0x5802541c
 8002654:	58025430 	.word	0x58025430
 8002658:	58025444 	.word	0x58025444
 800265c:	58025458 	.word	0x58025458
 8002660:	5802546c 	.word	0x5802546c
 8002664:	58025480 	.word	0x58025480
 8002668:	58025494 	.word	0x58025494
 800266c:	fffe000f 	.word	0xfffe000f
 8002670:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	68d2      	ldr	r2, [r2, #12]
 8002676:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002678:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002680:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002688:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002690:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002698:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80026a0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	461a      	mov	r2, r3
 80026b6:	4b6e      	ldr	r3, [pc, #440]	; (8002870 <HAL_DMA_Init+0x650>)
 80026b8:	4413      	add	r3, r2
 80026ba:	4a6e      	ldr	r2, [pc, #440]	; (8002874 <HAL_DMA_Init+0x654>)
 80026bc:	fba2 2303 	umull	r2, r3, r2, r3
 80026c0:	091b      	lsrs	r3, r3, #4
 80026c2:	009a      	lsls	r2, r3, #2
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f001 fc45 	bl	8003f58 <DMA_CalcBaseAndBitshift>
 80026ce:	4603      	mov	r3, r0
 80026d0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d6:	f003 031f 	and.w	r3, r3, #31
 80026da:	2201      	movs	r2, #1
 80026dc:	409a      	lsls	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	e008      	b.n	80026f6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2240      	movs	r2, #64	; 0x40
 80026e8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2203      	movs	r2, #3
 80026ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e0b7      	b.n	8002866 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a5f      	ldr	r2, [pc, #380]	; (8002878 <HAL_DMA_Init+0x658>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d072      	beq.n	80027e6 <HAL_DMA_Init+0x5c6>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a5d      	ldr	r2, [pc, #372]	; (800287c <HAL_DMA_Init+0x65c>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d06d      	beq.n	80027e6 <HAL_DMA_Init+0x5c6>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a5c      	ldr	r2, [pc, #368]	; (8002880 <HAL_DMA_Init+0x660>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d068      	beq.n	80027e6 <HAL_DMA_Init+0x5c6>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a5a      	ldr	r2, [pc, #360]	; (8002884 <HAL_DMA_Init+0x664>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d063      	beq.n	80027e6 <HAL_DMA_Init+0x5c6>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a59      	ldr	r2, [pc, #356]	; (8002888 <HAL_DMA_Init+0x668>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d05e      	beq.n	80027e6 <HAL_DMA_Init+0x5c6>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a57      	ldr	r2, [pc, #348]	; (800288c <HAL_DMA_Init+0x66c>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d059      	beq.n	80027e6 <HAL_DMA_Init+0x5c6>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a56      	ldr	r2, [pc, #344]	; (8002890 <HAL_DMA_Init+0x670>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d054      	beq.n	80027e6 <HAL_DMA_Init+0x5c6>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a54      	ldr	r2, [pc, #336]	; (8002894 <HAL_DMA_Init+0x674>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d04f      	beq.n	80027e6 <HAL_DMA_Init+0x5c6>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a53      	ldr	r2, [pc, #332]	; (8002898 <HAL_DMA_Init+0x678>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d04a      	beq.n	80027e6 <HAL_DMA_Init+0x5c6>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a51      	ldr	r2, [pc, #324]	; (800289c <HAL_DMA_Init+0x67c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d045      	beq.n	80027e6 <HAL_DMA_Init+0x5c6>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a50      	ldr	r2, [pc, #320]	; (80028a0 <HAL_DMA_Init+0x680>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d040      	beq.n	80027e6 <HAL_DMA_Init+0x5c6>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a4e      	ldr	r2, [pc, #312]	; (80028a4 <HAL_DMA_Init+0x684>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d03b      	beq.n	80027e6 <HAL_DMA_Init+0x5c6>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a4d      	ldr	r2, [pc, #308]	; (80028a8 <HAL_DMA_Init+0x688>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d036      	beq.n	80027e6 <HAL_DMA_Init+0x5c6>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a4b      	ldr	r2, [pc, #300]	; (80028ac <HAL_DMA_Init+0x68c>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d031      	beq.n	80027e6 <HAL_DMA_Init+0x5c6>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a4a      	ldr	r2, [pc, #296]	; (80028b0 <HAL_DMA_Init+0x690>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d02c      	beq.n	80027e6 <HAL_DMA_Init+0x5c6>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a48      	ldr	r2, [pc, #288]	; (80028b4 <HAL_DMA_Init+0x694>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d027      	beq.n	80027e6 <HAL_DMA_Init+0x5c6>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a47      	ldr	r2, [pc, #284]	; (80028b8 <HAL_DMA_Init+0x698>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d022      	beq.n	80027e6 <HAL_DMA_Init+0x5c6>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a45      	ldr	r2, [pc, #276]	; (80028bc <HAL_DMA_Init+0x69c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d01d      	beq.n	80027e6 <HAL_DMA_Init+0x5c6>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a44      	ldr	r2, [pc, #272]	; (80028c0 <HAL_DMA_Init+0x6a0>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d018      	beq.n	80027e6 <HAL_DMA_Init+0x5c6>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a42      	ldr	r2, [pc, #264]	; (80028c4 <HAL_DMA_Init+0x6a4>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d013      	beq.n	80027e6 <HAL_DMA_Init+0x5c6>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a41      	ldr	r2, [pc, #260]	; (80028c8 <HAL_DMA_Init+0x6a8>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d00e      	beq.n	80027e6 <HAL_DMA_Init+0x5c6>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a3f      	ldr	r2, [pc, #252]	; (80028cc <HAL_DMA_Init+0x6ac>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d009      	beq.n	80027e6 <HAL_DMA_Init+0x5c6>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a3e      	ldr	r2, [pc, #248]	; (80028d0 <HAL_DMA_Init+0x6b0>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d004      	beq.n	80027e6 <HAL_DMA_Init+0x5c6>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a3c      	ldr	r2, [pc, #240]	; (80028d4 <HAL_DMA_Init+0x6b4>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d101      	bne.n	80027ea <HAL_DMA_Init+0x5ca>
 80027e6:	2301      	movs	r3, #1
 80027e8:	e000      	b.n	80027ec <HAL_DMA_Init+0x5cc>
 80027ea:	2300      	movs	r3, #0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d032      	beq.n	8002856 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f001 fcdf 	bl	80041b4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	2b80      	cmp	r3, #128	; 0x80
 80027fc:	d102      	bne.n	8002804 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800280c:	b2d2      	uxtb	r2, r2
 800280e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002818:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d010      	beq.n	8002844 <HAL_DMA_Init+0x624>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	2b08      	cmp	r3, #8
 8002828:	d80c      	bhi.n	8002844 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f001 fd5c 	bl	80042e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	e008      	b.n	8002856 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3718      	adds	r7, #24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	a7fdabf8 	.word	0xa7fdabf8
 8002874:	cccccccd 	.word	0xcccccccd
 8002878:	40020010 	.word	0x40020010
 800287c:	40020028 	.word	0x40020028
 8002880:	40020040 	.word	0x40020040
 8002884:	40020058 	.word	0x40020058
 8002888:	40020070 	.word	0x40020070
 800288c:	40020088 	.word	0x40020088
 8002890:	400200a0 	.word	0x400200a0
 8002894:	400200b8 	.word	0x400200b8
 8002898:	40020410 	.word	0x40020410
 800289c:	40020428 	.word	0x40020428
 80028a0:	40020440 	.word	0x40020440
 80028a4:	40020458 	.word	0x40020458
 80028a8:	40020470 	.word	0x40020470
 80028ac:	40020488 	.word	0x40020488
 80028b0:	400204a0 	.word	0x400204a0
 80028b4:	400204b8 	.word	0x400204b8
 80028b8:	58025408 	.word	0x58025408
 80028bc:	5802541c 	.word	0x5802541c
 80028c0:	58025430 	.word	0x58025430
 80028c4:	58025444 	.word	0x58025444
 80028c8:	58025458 	.word	0x58025458
 80028cc:	5802546c 	.word	0x5802546c
 80028d0:	58025480 	.word	0x58025480
 80028d4:	58025494 	.word	0x58025494

080028d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
 80028e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028e6:	2300      	movs	r3, #0
 80028e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e226      	b.n	8002d42 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d101      	bne.n	8002902 <HAL_DMA_Start_IT+0x2a>
 80028fe:	2302      	movs	r3, #2
 8002900:	e21f      	b.n	8002d42 <HAL_DMA_Start_IT+0x46a>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b01      	cmp	r3, #1
 8002914:	f040 820a 	bne.w	8002d2c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2202      	movs	r2, #2
 800291c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a68      	ldr	r2, [pc, #416]	; (8002acc <HAL_DMA_Start_IT+0x1f4>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d04a      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a66      	ldr	r2, [pc, #408]	; (8002ad0 <HAL_DMA_Start_IT+0x1f8>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d045      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a65      	ldr	r2, [pc, #404]	; (8002ad4 <HAL_DMA_Start_IT+0x1fc>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d040      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a63      	ldr	r2, [pc, #396]	; (8002ad8 <HAL_DMA_Start_IT+0x200>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d03b      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a62      	ldr	r2, [pc, #392]	; (8002adc <HAL_DMA_Start_IT+0x204>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d036      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a60      	ldr	r2, [pc, #384]	; (8002ae0 <HAL_DMA_Start_IT+0x208>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d031      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a5f      	ldr	r2, [pc, #380]	; (8002ae4 <HAL_DMA_Start_IT+0x20c>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d02c      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a5d      	ldr	r2, [pc, #372]	; (8002ae8 <HAL_DMA_Start_IT+0x210>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d027      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a5c      	ldr	r2, [pc, #368]	; (8002aec <HAL_DMA_Start_IT+0x214>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d022      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a5a      	ldr	r2, [pc, #360]	; (8002af0 <HAL_DMA_Start_IT+0x218>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d01d      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a59      	ldr	r2, [pc, #356]	; (8002af4 <HAL_DMA_Start_IT+0x21c>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d018      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a57      	ldr	r2, [pc, #348]	; (8002af8 <HAL_DMA_Start_IT+0x220>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d013      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a56      	ldr	r2, [pc, #344]	; (8002afc <HAL_DMA_Start_IT+0x224>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d00e      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a54      	ldr	r2, [pc, #336]	; (8002b00 <HAL_DMA_Start_IT+0x228>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d009      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a53      	ldr	r2, [pc, #332]	; (8002b04 <HAL_DMA_Start_IT+0x22c>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d004      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a51      	ldr	r2, [pc, #324]	; (8002b08 <HAL_DMA_Start_IT+0x230>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d108      	bne.n	80029d8 <HAL_DMA_Start_IT+0x100>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 0201 	bic.w	r2, r2, #1
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	e007      	b.n	80029e8 <HAL_DMA_Start_IT+0x110>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0201 	bic.w	r2, r2, #1
 80029e6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	68b9      	ldr	r1, [r7, #8]
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f001 f906 	bl	8003c00 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a34      	ldr	r2, [pc, #208]	; (8002acc <HAL_DMA_Start_IT+0x1f4>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d04a      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a33      	ldr	r2, [pc, #204]	; (8002ad0 <HAL_DMA_Start_IT+0x1f8>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d045      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a31      	ldr	r2, [pc, #196]	; (8002ad4 <HAL_DMA_Start_IT+0x1fc>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d040      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a30      	ldr	r2, [pc, #192]	; (8002ad8 <HAL_DMA_Start_IT+0x200>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d03b      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a2e      	ldr	r2, [pc, #184]	; (8002adc <HAL_DMA_Start_IT+0x204>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d036      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a2d      	ldr	r2, [pc, #180]	; (8002ae0 <HAL_DMA_Start_IT+0x208>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d031      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a2b      	ldr	r2, [pc, #172]	; (8002ae4 <HAL_DMA_Start_IT+0x20c>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d02c      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a2a      	ldr	r2, [pc, #168]	; (8002ae8 <HAL_DMA_Start_IT+0x210>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d027      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a28      	ldr	r2, [pc, #160]	; (8002aec <HAL_DMA_Start_IT+0x214>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d022      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a27      	ldr	r2, [pc, #156]	; (8002af0 <HAL_DMA_Start_IT+0x218>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d01d      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a25      	ldr	r2, [pc, #148]	; (8002af4 <HAL_DMA_Start_IT+0x21c>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d018      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a24      	ldr	r2, [pc, #144]	; (8002af8 <HAL_DMA_Start_IT+0x220>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d013      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a22      	ldr	r2, [pc, #136]	; (8002afc <HAL_DMA_Start_IT+0x224>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d00e      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a21      	ldr	r2, [pc, #132]	; (8002b00 <HAL_DMA_Start_IT+0x228>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d009      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a1f      	ldr	r2, [pc, #124]	; (8002b04 <HAL_DMA_Start_IT+0x22c>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d004      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a1e      	ldr	r2, [pc, #120]	; (8002b08 <HAL_DMA_Start_IT+0x230>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d101      	bne.n	8002a98 <HAL_DMA_Start_IT+0x1c0>
 8002a94:	2301      	movs	r3, #1
 8002a96:	e000      	b.n	8002a9a <HAL_DMA_Start_IT+0x1c2>
 8002a98:	2300      	movs	r3, #0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d036      	beq.n	8002b0c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f023 021e 	bic.w	r2, r3, #30
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f042 0216 	orr.w	r2, r2, #22
 8002ab0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d03e      	beq.n	8002b38 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f042 0208 	orr.w	r2, r2, #8
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	e035      	b.n	8002b38 <HAL_DMA_Start_IT+0x260>
 8002acc:	40020010 	.word	0x40020010
 8002ad0:	40020028 	.word	0x40020028
 8002ad4:	40020040 	.word	0x40020040
 8002ad8:	40020058 	.word	0x40020058
 8002adc:	40020070 	.word	0x40020070
 8002ae0:	40020088 	.word	0x40020088
 8002ae4:	400200a0 	.word	0x400200a0
 8002ae8:	400200b8 	.word	0x400200b8
 8002aec:	40020410 	.word	0x40020410
 8002af0:	40020428 	.word	0x40020428
 8002af4:	40020440 	.word	0x40020440
 8002af8:	40020458 	.word	0x40020458
 8002afc:	40020470 	.word	0x40020470
 8002b00:	40020488 	.word	0x40020488
 8002b04:	400204a0 	.word	0x400204a0
 8002b08:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f023 020e 	bic.w	r2, r3, #14
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 020a 	orr.w	r2, r2, #10
 8002b1e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d007      	beq.n	8002b38 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 0204 	orr.w	r2, r2, #4
 8002b36:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a83      	ldr	r2, [pc, #524]	; (8002d4c <HAL_DMA_Start_IT+0x474>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d072      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a82      	ldr	r2, [pc, #520]	; (8002d50 <HAL_DMA_Start_IT+0x478>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d06d      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a80      	ldr	r2, [pc, #512]	; (8002d54 <HAL_DMA_Start_IT+0x47c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d068      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a7f      	ldr	r2, [pc, #508]	; (8002d58 <HAL_DMA_Start_IT+0x480>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d063      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a7d      	ldr	r2, [pc, #500]	; (8002d5c <HAL_DMA_Start_IT+0x484>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d05e      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a7c      	ldr	r2, [pc, #496]	; (8002d60 <HAL_DMA_Start_IT+0x488>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d059      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a7a      	ldr	r2, [pc, #488]	; (8002d64 <HAL_DMA_Start_IT+0x48c>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d054      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a79      	ldr	r2, [pc, #484]	; (8002d68 <HAL_DMA_Start_IT+0x490>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d04f      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a77      	ldr	r2, [pc, #476]	; (8002d6c <HAL_DMA_Start_IT+0x494>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d04a      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a76      	ldr	r2, [pc, #472]	; (8002d70 <HAL_DMA_Start_IT+0x498>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d045      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a74      	ldr	r2, [pc, #464]	; (8002d74 <HAL_DMA_Start_IT+0x49c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d040      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a73      	ldr	r2, [pc, #460]	; (8002d78 <HAL_DMA_Start_IT+0x4a0>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d03b      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a71      	ldr	r2, [pc, #452]	; (8002d7c <HAL_DMA_Start_IT+0x4a4>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d036      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a70      	ldr	r2, [pc, #448]	; (8002d80 <HAL_DMA_Start_IT+0x4a8>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d031      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a6e      	ldr	r2, [pc, #440]	; (8002d84 <HAL_DMA_Start_IT+0x4ac>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d02c      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a6d      	ldr	r2, [pc, #436]	; (8002d88 <HAL_DMA_Start_IT+0x4b0>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d027      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a6b      	ldr	r2, [pc, #428]	; (8002d8c <HAL_DMA_Start_IT+0x4b4>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d022      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a6a      	ldr	r2, [pc, #424]	; (8002d90 <HAL_DMA_Start_IT+0x4b8>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d01d      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a68      	ldr	r2, [pc, #416]	; (8002d94 <HAL_DMA_Start_IT+0x4bc>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d018      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a67      	ldr	r2, [pc, #412]	; (8002d98 <HAL_DMA_Start_IT+0x4c0>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d013      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a65      	ldr	r2, [pc, #404]	; (8002d9c <HAL_DMA_Start_IT+0x4c4>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d00e      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a64      	ldr	r2, [pc, #400]	; (8002da0 <HAL_DMA_Start_IT+0x4c8>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d009      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a62      	ldr	r2, [pc, #392]	; (8002da4 <HAL_DMA_Start_IT+0x4cc>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d004      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a61      	ldr	r2, [pc, #388]	; (8002da8 <HAL_DMA_Start_IT+0x4d0>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d101      	bne.n	8002c2c <HAL_DMA_Start_IT+0x354>
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e000      	b.n	8002c2e <HAL_DMA_Start_IT+0x356>
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d01a      	beq.n	8002c68 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d007      	beq.n	8002c50 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c4e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d007      	beq.n	8002c68 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c66:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a37      	ldr	r2, [pc, #220]	; (8002d4c <HAL_DMA_Start_IT+0x474>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d04a      	beq.n	8002d08 <HAL_DMA_Start_IT+0x430>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a36      	ldr	r2, [pc, #216]	; (8002d50 <HAL_DMA_Start_IT+0x478>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d045      	beq.n	8002d08 <HAL_DMA_Start_IT+0x430>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a34      	ldr	r2, [pc, #208]	; (8002d54 <HAL_DMA_Start_IT+0x47c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d040      	beq.n	8002d08 <HAL_DMA_Start_IT+0x430>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a33      	ldr	r2, [pc, #204]	; (8002d58 <HAL_DMA_Start_IT+0x480>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d03b      	beq.n	8002d08 <HAL_DMA_Start_IT+0x430>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a31      	ldr	r2, [pc, #196]	; (8002d5c <HAL_DMA_Start_IT+0x484>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d036      	beq.n	8002d08 <HAL_DMA_Start_IT+0x430>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a30      	ldr	r2, [pc, #192]	; (8002d60 <HAL_DMA_Start_IT+0x488>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d031      	beq.n	8002d08 <HAL_DMA_Start_IT+0x430>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a2e      	ldr	r2, [pc, #184]	; (8002d64 <HAL_DMA_Start_IT+0x48c>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d02c      	beq.n	8002d08 <HAL_DMA_Start_IT+0x430>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a2d      	ldr	r2, [pc, #180]	; (8002d68 <HAL_DMA_Start_IT+0x490>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d027      	beq.n	8002d08 <HAL_DMA_Start_IT+0x430>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a2b      	ldr	r2, [pc, #172]	; (8002d6c <HAL_DMA_Start_IT+0x494>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d022      	beq.n	8002d08 <HAL_DMA_Start_IT+0x430>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a2a      	ldr	r2, [pc, #168]	; (8002d70 <HAL_DMA_Start_IT+0x498>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d01d      	beq.n	8002d08 <HAL_DMA_Start_IT+0x430>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a28      	ldr	r2, [pc, #160]	; (8002d74 <HAL_DMA_Start_IT+0x49c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d018      	beq.n	8002d08 <HAL_DMA_Start_IT+0x430>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a27      	ldr	r2, [pc, #156]	; (8002d78 <HAL_DMA_Start_IT+0x4a0>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d013      	beq.n	8002d08 <HAL_DMA_Start_IT+0x430>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a25      	ldr	r2, [pc, #148]	; (8002d7c <HAL_DMA_Start_IT+0x4a4>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d00e      	beq.n	8002d08 <HAL_DMA_Start_IT+0x430>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a24      	ldr	r2, [pc, #144]	; (8002d80 <HAL_DMA_Start_IT+0x4a8>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d009      	beq.n	8002d08 <HAL_DMA_Start_IT+0x430>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a22      	ldr	r2, [pc, #136]	; (8002d84 <HAL_DMA_Start_IT+0x4ac>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d004      	beq.n	8002d08 <HAL_DMA_Start_IT+0x430>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a21      	ldr	r2, [pc, #132]	; (8002d88 <HAL_DMA_Start_IT+0x4b0>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d108      	bne.n	8002d1a <HAL_DMA_Start_IT+0x442>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 0201 	orr.w	r2, r2, #1
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	e012      	b.n	8002d40 <HAL_DMA_Start_IT+0x468>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f042 0201 	orr.w	r2, r2, #1
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	e009      	b.n	8002d40 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d3a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3718      	adds	r7, #24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	40020010 	.word	0x40020010
 8002d50:	40020028 	.word	0x40020028
 8002d54:	40020040 	.word	0x40020040
 8002d58:	40020058 	.word	0x40020058
 8002d5c:	40020070 	.word	0x40020070
 8002d60:	40020088 	.word	0x40020088
 8002d64:	400200a0 	.word	0x400200a0
 8002d68:	400200b8 	.word	0x400200b8
 8002d6c:	40020410 	.word	0x40020410
 8002d70:	40020428 	.word	0x40020428
 8002d74:	40020440 	.word	0x40020440
 8002d78:	40020458 	.word	0x40020458
 8002d7c:	40020470 	.word	0x40020470
 8002d80:	40020488 	.word	0x40020488
 8002d84:	400204a0 	.word	0x400204a0
 8002d88:	400204b8 	.word	0x400204b8
 8002d8c:	58025408 	.word	0x58025408
 8002d90:	5802541c 	.word	0x5802541c
 8002d94:	58025430 	.word	0x58025430
 8002d98:	58025444 	.word	0x58025444
 8002d9c:	58025458 	.word	0x58025458
 8002da0:	5802546c 	.word	0x5802546c
 8002da4:	58025480 	.word	0x58025480
 8002da8:	58025494 	.word	0x58025494

08002dac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08a      	sub	sp, #40	; 0x28
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002db4:	2300      	movs	r3, #0
 8002db6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002db8:	4b67      	ldr	r3, [pc, #412]	; (8002f58 <HAL_DMA_IRQHandler+0x1ac>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a67      	ldr	r2, [pc, #412]	; (8002f5c <HAL_DMA_IRQHandler+0x1b0>)
 8002dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc2:	0a9b      	lsrs	r3, r3, #10
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dca:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a5f      	ldr	r2, [pc, #380]	; (8002f60 <HAL_DMA_IRQHandler+0x1b4>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d04a      	beq.n	8002e7e <HAL_DMA_IRQHandler+0xd2>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a5d      	ldr	r2, [pc, #372]	; (8002f64 <HAL_DMA_IRQHandler+0x1b8>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d045      	beq.n	8002e7e <HAL_DMA_IRQHandler+0xd2>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a5c      	ldr	r2, [pc, #368]	; (8002f68 <HAL_DMA_IRQHandler+0x1bc>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d040      	beq.n	8002e7e <HAL_DMA_IRQHandler+0xd2>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a5a      	ldr	r2, [pc, #360]	; (8002f6c <HAL_DMA_IRQHandler+0x1c0>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d03b      	beq.n	8002e7e <HAL_DMA_IRQHandler+0xd2>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a59      	ldr	r2, [pc, #356]	; (8002f70 <HAL_DMA_IRQHandler+0x1c4>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d036      	beq.n	8002e7e <HAL_DMA_IRQHandler+0xd2>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a57      	ldr	r2, [pc, #348]	; (8002f74 <HAL_DMA_IRQHandler+0x1c8>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d031      	beq.n	8002e7e <HAL_DMA_IRQHandler+0xd2>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a56      	ldr	r2, [pc, #344]	; (8002f78 <HAL_DMA_IRQHandler+0x1cc>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d02c      	beq.n	8002e7e <HAL_DMA_IRQHandler+0xd2>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a54      	ldr	r2, [pc, #336]	; (8002f7c <HAL_DMA_IRQHandler+0x1d0>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d027      	beq.n	8002e7e <HAL_DMA_IRQHandler+0xd2>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a53      	ldr	r2, [pc, #332]	; (8002f80 <HAL_DMA_IRQHandler+0x1d4>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d022      	beq.n	8002e7e <HAL_DMA_IRQHandler+0xd2>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a51      	ldr	r2, [pc, #324]	; (8002f84 <HAL_DMA_IRQHandler+0x1d8>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d01d      	beq.n	8002e7e <HAL_DMA_IRQHandler+0xd2>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a50      	ldr	r2, [pc, #320]	; (8002f88 <HAL_DMA_IRQHandler+0x1dc>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d018      	beq.n	8002e7e <HAL_DMA_IRQHandler+0xd2>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a4e      	ldr	r2, [pc, #312]	; (8002f8c <HAL_DMA_IRQHandler+0x1e0>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d013      	beq.n	8002e7e <HAL_DMA_IRQHandler+0xd2>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a4d      	ldr	r2, [pc, #308]	; (8002f90 <HAL_DMA_IRQHandler+0x1e4>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d00e      	beq.n	8002e7e <HAL_DMA_IRQHandler+0xd2>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a4b      	ldr	r2, [pc, #300]	; (8002f94 <HAL_DMA_IRQHandler+0x1e8>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d009      	beq.n	8002e7e <HAL_DMA_IRQHandler+0xd2>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a4a      	ldr	r2, [pc, #296]	; (8002f98 <HAL_DMA_IRQHandler+0x1ec>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d004      	beq.n	8002e7e <HAL_DMA_IRQHandler+0xd2>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a48      	ldr	r2, [pc, #288]	; (8002f9c <HAL_DMA_IRQHandler+0x1f0>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d101      	bne.n	8002e82 <HAL_DMA_IRQHandler+0xd6>
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e000      	b.n	8002e84 <HAL_DMA_IRQHandler+0xd8>
 8002e82:	2300      	movs	r3, #0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 842b 	beq.w	80036e0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e8e:	f003 031f 	and.w	r3, r3, #31
 8002e92:	2208      	movs	r2, #8
 8002e94:	409a      	lsls	r2, r3
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f000 80a2 	beq.w	8002fe4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a2e      	ldr	r2, [pc, #184]	; (8002f60 <HAL_DMA_IRQHandler+0x1b4>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d04a      	beq.n	8002f40 <HAL_DMA_IRQHandler+0x194>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a2d      	ldr	r2, [pc, #180]	; (8002f64 <HAL_DMA_IRQHandler+0x1b8>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d045      	beq.n	8002f40 <HAL_DMA_IRQHandler+0x194>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a2b      	ldr	r2, [pc, #172]	; (8002f68 <HAL_DMA_IRQHandler+0x1bc>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d040      	beq.n	8002f40 <HAL_DMA_IRQHandler+0x194>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a2a      	ldr	r2, [pc, #168]	; (8002f6c <HAL_DMA_IRQHandler+0x1c0>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d03b      	beq.n	8002f40 <HAL_DMA_IRQHandler+0x194>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a28      	ldr	r2, [pc, #160]	; (8002f70 <HAL_DMA_IRQHandler+0x1c4>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d036      	beq.n	8002f40 <HAL_DMA_IRQHandler+0x194>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a27      	ldr	r2, [pc, #156]	; (8002f74 <HAL_DMA_IRQHandler+0x1c8>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d031      	beq.n	8002f40 <HAL_DMA_IRQHandler+0x194>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a25      	ldr	r2, [pc, #148]	; (8002f78 <HAL_DMA_IRQHandler+0x1cc>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d02c      	beq.n	8002f40 <HAL_DMA_IRQHandler+0x194>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a24      	ldr	r2, [pc, #144]	; (8002f7c <HAL_DMA_IRQHandler+0x1d0>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d027      	beq.n	8002f40 <HAL_DMA_IRQHandler+0x194>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a22      	ldr	r2, [pc, #136]	; (8002f80 <HAL_DMA_IRQHandler+0x1d4>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d022      	beq.n	8002f40 <HAL_DMA_IRQHandler+0x194>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a21      	ldr	r2, [pc, #132]	; (8002f84 <HAL_DMA_IRQHandler+0x1d8>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d01d      	beq.n	8002f40 <HAL_DMA_IRQHandler+0x194>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a1f      	ldr	r2, [pc, #124]	; (8002f88 <HAL_DMA_IRQHandler+0x1dc>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d018      	beq.n	8002f40 <HAL_DMA_IRQHandler+0x194>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a1e      	ldr	r2, [pc, #120]	; (8002f8c <HAL_DMA_IRQHandler+0x1e0>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d013      	beq.n	8002f40 <HAL_DMA_IRQHandler+0x194>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a1c      	ldr	r2, [pc, #112]	; (8002f90 <HAL_DMA_IRQHandler+0x1e4>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d00e      	beq.n	8002f40 <HAL_DMA_IRQHandler+0x194>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a1b      	ldr	r2, [pc, #108]	; (8002f94 <HAL_DMA_IRQHandler+0x1e8>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d009      	beq.n	8002f40 <HAL_DMA_IRQHandler+0x194>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a19      	ldr	r2, [pc, #100]	; (8002f98 <HAL_DMA_IRQHandler+0x1ec>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d004      	beq.n	8002f40 <HAL_DMA_IRQHandler+0x194>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a18      	ldr	r2, [pc, #96]	; (8002f9c <HAL_DMA_IRQHandler+0x1f0>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d12f      	bne.n	8002fa0 <HAL_DMA_IRQHandler+0x1f4>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0304 	and.w	r3, r3, #4
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	bf14      	ite	ne
 8002f4e:	2301      	movne	r3, #1
 8002f50:	2300      	moveq	r3, #0
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	e02e      	b.n	8002fb4 <HAL_DMA_IRQHandler+0x208>
 8002f56:	bf00      	nop
 8002f58:	24000004 	.word	0x24000004
 8002f5c:	1b4e81b5 	.word	0x1b4e81b5
 8002f60:	40020010 	.word	0x40020010
 8002f64:	40020028 	.word	0x40020028
 8002f68:	40020040 	.word	0x40020040
 8002f6c:	40020058 	.word	0x40020058
 8002f70:	40020070 	.word	0x40020070
 8002f74:	40020088 	.word	0x40020088
 8002f78:	400200a0 	.word	0x400200a0
 8002f7c:	400200b8 	.word	0x400200b8
 8002f80:	40020410 	.word	0x40020410
 8002f84:	40020428 	.word	0x40020428
 8002f88:	40020440 	.word	0x40020440
 8002f8c:	40020458 	.word	0x40020458
 8002f90:	40020470 	.word	0x40020470
 8002f94:	40020488 	.word	0x40020488
 8002f98:	400204a0 	.word	0x400204a0
 8002f9c:	400204b8 	.word	0x400204b8
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0308 	and.w	r3, r3, #8
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	bf14      	ite	ne
 8002fae:	2301      	movne	r3, #1
 8002fb0:	2300      	moveq	r3, #0
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d015      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 0204 	bic.w	r2, r2, #4
 8002fc6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fcc:	f003 031f 	and.w	r3, r3, #31
 8002fd0:	2208      	movs	r2, #8
 8002fd2:	409a      	lsls	r2, r3
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fdc:	f043 0201 	orr.w	r2, r3, #1
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe8:	f003 031f 	and.w	r3, r3, #31
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d06e      	beq.n	80030d8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a69      	ldr	r2, [pc, #420]	; (80031a4 <HAL_DMA_IRQHandler+0x3f8>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d04a      	beq.n	800309a <HAL_DMA_IRQHandler+0x2ee>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a67      	ldr	r2, [pc, #412]	; (80031a8 <HAL_DMA_IRQHandler+0x3fc>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d045      	beq.n	800309a <HAL_DMA_IRQHandler+0x2ee>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a66      	ldr	r2, [pc, #408]	; (80031ac <HAL_DMA_IRQHandler+0x400>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d040      	beq.n	800309a <HAL_DMA_IRQHandler+0x2ee>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a64      	ldr	r2, [pc, #400]	; (80031b0 <HAL_DMA_IRQHandler+0x404>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d03b      	beq.n	800309a <HAL_DMA_IRQHandler+0x2ee>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a63      	ldr	r2, [pc, #396]	; (80031b4 <HAL_DMA_IRQHandler+0x408>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d036      	beq.n	800309a <HAL_DMA_IRQHandler+0x2ee>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a61      	ldr	r2, [pc, #388]	; (80031b8 <HAL_DMA_IRQHandler+0x40c>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d031      	beq.n	800309a <HAL_DMA_IRQHandler+0x2ee>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a60      	ldr	r2, [pc, #384]	; (80031bc <HAL_DMA_IRQHandler+0x410>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d02c      	beq.n	800309a <HAL_DMA_IRQHandler+0x2ee>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a5e      	ldr	r2, [pc, #376]	; (80031c0 <HAL_DMA_IRQHandler+0x414>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d027      	beq.n	800309a <HAL_DMA_IRQHandler+0x2ee>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a5d      	ldr	r2, [pc, #372]	; (80031c4 <HAL_DMA_IRQHandler+0x418>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d022      	beq.n	800309a <HAL_DMA_IRQHandler+0x2ee>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a5b      	ldr	r2, [pc, #364]	; (80031c8 <HAL_DMA_IRQHandler+0x41c>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d01d      	beq.n	800309a <HAL_DMA_IRQHandler+0x2ee>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a5a      	ldr	r2, [pc, #360]	; (80031cc <HAL_DMA_IRQHandler+0x420>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d018      	beq.n	800309a <HAL_DMA_IRQHandler+0x2ee>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a58      	ldr	r2, [pc, #352]	; (80031d0 <HAL_DMA_IRQHandler+0x424>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d013      	beq.n	800309a <HAL_DMA_IRQHandler+0x2ee>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a57      	ldr	r2, [pc, #348]	; (80031d4 <HAL_DMA_IRQHandler+0x428>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d00e      	beq.n	800309a <HAL_DMA_IRQHandler+0x2ee>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a55      	ldr	r2, [pc, #340]	; (80031d8 <HAL_DMA_IRQHandler+0x42c>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d009      	beq.n	800309a <HAL_DMA_IRQHandler+0x2ee>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a54      	ldr	r2, [pc, #336]	; (80031dc <HAL_DMA_IRQHandler+0x430>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d004      	beq.n	800309a <HAL_DMA_IRQHandler+0x2ee>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a52      	ldr	r2, [pc, #328]	; (80031e0 <HAL_DMA_IRQHandler+0x434>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d10a      	bne.n	80030b0 <HAL_DMA_IRQHandler+0x304>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	bf14      	ite	ne
 80030a8:	2301      	movne	r3, #1
 80030aa:	2300      	moveq	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	e003      	b.n	80030b8 <HAL_DMA_IRQHandler+0x30c>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2300      	movs	r3, #0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00d      	beq.n	80030d8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c0:	f003 031f 	and.w	r3, r3, #31
 80030c4:	2201      	movs	r2, #1
 80030c6:	409a      	lsls	r2, r3
 80030c8:	6a3b      	ldr	r3, [r7, #32]
 80030ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d0:	f043 0202 	orr.w	r2, r3, #2
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030dc:	f003 031f 	and.w	r3, r3, #31
 80030e0:	2204      	movs	r2, #4
 80030e2:	409a      	lsls	r2, r3
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	4013      	ands	r3, r2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 808f 	beq.w	800320c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a2c      	ldr	r2, [pc, #176]	; (80031a4 <HAL_DMA_IRQHandler+0x3f8>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d04a      	beq.n	800318e <HAL_DMA_IRQHandler+0x3e2>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a2a      	ldr	r2, [pc, #168]	; (80031a8 <HAL_DMA_IRQHandler+0x3fc>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d045      	beq.n	800318e <HAL_DMA_IRQHandler+0x3e2>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a29      	ldr	r2, [pc, #164]	; (80031ac <HAL_DMA_IRQHandler+0x400>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d040      	beq.n	800318e <HAL_DMA_IRQHandler+0x3e2>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a27      	ldr	r2, [pc, #156]	; (80031b0 <HAL_DMA_IRQHandler+0x404>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d03b      	beq.n	800318e <HAL_DMA_IRQHandler+0x3e2>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a26      	ldr	r2, [pc, #152]	; (80031b4 <HAL_DMA_IRQHandler+0x408>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d036      	beq.n	800318e <HAL_DMA_IRQHandler+0x3e2>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a24      	ldr	r2, [pc, #144]	; (80031b8 <HAL_DMA_IRQHandler+0x40c>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d031      	beq.n	800318e <HAL_DMA_IRQHandler+0x3e2>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a23      	ldr	r2, [pc, #140]	; (80031bc <HAL_DMA_IRQHandler+0x410>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d02c      	beq.n	800318e <HAL_DMA_IRQHandler+0x3e2>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a21      	ldr	r2, [pc, #132]	; (80031c0 <HAL_DMA_IRQHandler+0x414>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d027      	beq.n	800318e <HAL_DMA_IRQHandler+0x3e2>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a20      	ldr	r2, [pc, #128]	; (80031c4 <HAL_DMA_IRQHandler+0x418>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d022      	beq.n	800318e <HAL_DMA_IRQHandler+0x3e2>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a1e      	ldr	r2, [pc, #120]	; (80031c8 <HAL_DMA_IRQHandler+0x41c>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d01d      	beq.n	800318e <HAL_DMA_IRQHandler+0x3e2>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a1d      	ldr	r2, [pc, #116]	; (80031cc <HAL_DMA_IRQHandler+0x420>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d018      	beq.n	800318e <HAL_DMA_IRQHandler+0x3e2>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a1b      	ldr	r2, [pc, #108]	; (80031d0 <HAL_DMA_IRQHandler+0x424>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d013      	beq.n	800318e <HAL_DMA_IRQHandler+0x3e2>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a1a      	ldr	r2, [pc, #104]	; (80031d4 <HAL_DMA_IRQHandler+0x428>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d00e      	beq.n	800318e <HAL_DMA_IRQHandler+0x3e2>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a18      	ldr	r2, [pc, #96]	; (80031d8 <HAL_DMA_IRQHandler+0x42c>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d009      	beq.n	800318e <HAL_DMA_IRQHandler+0x3e2>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a17      	ldr	r2, [pc, #92]	; (80031dc <HAL_DMA_IRQHandler+0x430>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d004      	beq.n	800318e <HAL_DMA_IRQHandler+0x3e2>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a15      	ldr	r2, [pc, #84]	; (80031e0 <HAL_DMA_IRQHandler+0x434>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d12a      	bne.n	80031e4 <HAL_DMA_IRQHandler+0x438>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	bf14      	ite	ne
 800319c:	2301      	movne	r3, #1
 800319e:	2300      	moveq	r3, #0
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	e023      	b.n	80031ec <HAL_DMA_IRQHandler+0x440>
 80031a4:	40020010 	.word	0x40020010
 80031a8:	40020028 	.word	0x40020028
 80031ac:	40020040 	.word	0x40020040
 80031b0:	40020058 	.word	0x40020058
 80031b4:	40020070 	.word	0x40020070
 80031b8:	40020088 	.word	0x40020088
 80031bc:	400200a0 	.word	0x400200a0
 80031c0:	400200b8 	.word	0x400200b8
 80031c4:	40020410 	.word	0x40020410
 80031c8:	40020428 	.word	0x40020428
 80031cc:	40020440 	.word	0x40020440
 80031d0:	40020458 	.word	0x40020458
 80031d4:	40020470 	.word	0x40020470
 80031d8:	40020488 	.word	0x40020488
 80031dc:	400204a0 	.word	0x400204a0
 80031e0:	400204b8 	.word	0x400204b8
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2300      	movs	r3, #0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00d      	beq.n	800320c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f4:	f003 031f 	and.w	r3, r3, #31
 80031f8:	2204      	movs	r2, #4
 80031fa:	409a      	lsls	r2, r3
 80031fc:	6a3b      	ldr	r3, [r7, #32]
 80031fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003204:	f043 0204 	orr.w	r2, r3, #4
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003210:	f003 031f 	and.w	r3, r3, #31
 8003214:	2210      	movs	r2, #16
 8003216:	409a      	lsls	r2, r3
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	4013      	ands	r3, r2
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 80a6 	beq.w	800336e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a85      	ldr	r2, [pc, #532]	; (800343c <HAL_DMA_IRQHandler+0x690>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d04a      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x516>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a83      	ldr	r2, [pc, #524]	; (8003440 <HAL_DMA_IRQHandler+0x694>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d045      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x516>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a82      	ldr	r2, [pc, #520]	; (8003444 <HAL_DMA_IRQHandler+0x698>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d040      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x516>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a80      	ldr	r2, [pc, #512]	; (8003448 <HAL_DMA_IRQHandler+0x69c>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d03b      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x516>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a7f      	ldr	r2, [pc, #508]	; (800344c <HAL_DMA_IRQHandler+0x6a0>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d036      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x516>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a7d      	ldr	r2, [pc, #500]	; (8003450 <HAL_DMA_IRQHandler+0x6a4>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d031      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x516>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a7c      	ldr	r2, [pc, #496]	; (8003454 <HAL_DMA_IRQHandler+0x6a8>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d02c      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x516>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a7a      	ldr	r2, [pc, #488]	; (8003458 <HAL_DMA_IRQHandler+0x6ac>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d027      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x516>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a79      	ldr	r2, [pc, #484]	; (800345c <HAL_DMA_IRQHandler+0x6b0>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d022      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x516>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a77      	ldr	r2, [pc, #476]	; (8003460 <HAL_DMA_IRQHandler+0x6b4>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d01d      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x516>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a76      	ldr	r2, [pc, #472]	; (8003464 <HAL_DMA_IRQHandler+0x6b8>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d018      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x516>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a74      	ldr	r2, [pc, #464]	; (8003468 <HAL_DMA_IRQHandler+0x6bc>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d013      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x516>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a73      	ldr	r2, [pc, #460]	; (800346c <HAL_DMA_IRQHandler+0x6c0>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d00e      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x516>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a71      	ldr	r2, [pc, #452]	; (8003470 <HAL_DMA_IRQHandler+0x6c4>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d009      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x516>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a70      	ldr	r2, [pc, #448]	; (8003474 <HAL_DMA_IRQHandler+0x6c8>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d004      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x516>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a6e      	ldr	r2, [pc, #440]	; (8003478 <HAL_DMA_IRQHandler+0x6cc>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d10a      	bne.n	80032d8 <HAL_DMA_IRQHandler+0x52c>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0308 	and.w	r3, r3, #8
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	bf14      	ite	ne
 80032d0:	2301      	movne	r3, #1
 80032d2:	2300      	moveq	r3, #0
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	e009      	b.n	80032ec <HAL_DMA_IRQHandler+0x540>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0304 	and.w	r3, r3, #4
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	bf14      	ite	ne
 80032e6:	2301      	movne	r3, #1
 80032e8:	2300      	moveq	r3, #0
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d03e      	beq.n	800336e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f4:	f003 031f 	and.w	r3, r3, #31
 80032f8:	2210      	movs	r2, #16
 80032fa:	409a      	lsls	r2, r3
 80032fc:	6a3b      	ldr	r3, [r7, #32]
 80032fe:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d018      	beq.n	8003340 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d108      	bne.n	800332e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003320:	2b00      	cmp	r3, #0
 8003322:	d024      	beq.n	800336e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	4798      	blx	r3
 800332c:	e01f      	b.n	800336e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003332:	2b00      	cmp	r3, #0
 8003334:	d01b      	beq.n	800336e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	4798      	blx	r3
 800333e:	e016      	b.n	800336e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334a:	2b00      	cmp	r3, #0
 800334c:	d107      	bne.n	800335e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 0208 	bic.w	r2, r2, #8
 800335c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003372:	f003 031f 	and.w	r3, r3, #31
 8003376:	2220      	movs	r2, #32
 8003378:	409a      	lsls	r2, r3
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	4013      	ands	r3, r2
 800337e:	2b00      	cmp	r3, #0
 8003380:	f000 8110 	beq.w	80035a4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a2c      	ldr	r2, [pc, #176]	; (800343c <HAL_DMA_IRQHandler+0x690>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d04a      	beq.n	8003424 <HAL_DMA_IRQHandler+0x678>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a2b      	ldr	r2, [pc, #172]	; (8003440 <HAL_DMA_IRQHandler+0x694>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d045      	beq.n	8003424 <HAL_DMA_IRQHandler+0x678>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a29      	ldr	r2, [pc, #164]	; (8003444 <HAL_DMA_IRQHandler+0x698>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d040      	beq.n	8003424 <HAL_DMA_IRQHandler+0x678>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a28      	ldr	r2, [pc, #160]	; (8003448 <HAL_DMA_IRQHandler+0x69c>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d03b      	beq.n	8003424 <HAL_DMA_IRQHandler+0x678>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a26      	ldr	r2, [pc, #152]	; (800344c <HAL_DMA_IRQHandler+0x6a0>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d036      	beq.n	8003424 <HAL_DMA_IRQHandler+0x678>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a25      	ldr	r2, [pc, #148]	; (8003450 <HAL_DMA_IRQHandler+0x6a4>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d031      	beq.n	8003424 <HAL_DMA_IRQHandler+0x678>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a23      	ldr	r2, [pc, #140]	; (8003454 <HAL_DMA_IRQHandler+0x6a8>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d02c      	beq.n	8003424 <HAL_DMA_IRQHandler+0x678>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a22      	ldr	r2, [pc, #136]	; (8003458 <HAL_DMA_IRQHandler+0x6ac>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d027      	beq.n	8003424 <HAL_DMA_IRQHandler+0x678>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a20      	ldr	r2, [pc, #128]	; (800345c <HAL_DMA_IRQHandler+0x6b0>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d022      	beq.n	8003424 <HAL_DMA_IRQHandler+0x678>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a1f      	ldr	r2, [pc, #124]	; (8003460 <HAL_DMA_IRQHandler+0x6b4>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d01d      	beq.n	8003424 <HAL_DMA_IRQHandler+0x678>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a1d      	ldr	r2, [pc, #116]	; (8003464 <HAL_DMA_IRQHandler+0x6b8>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d018      	beq.n	8003424 <HAL_DMA_IRQHandler+0x678>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a1c      	ldr	r2, [pc, #112]	; (8003468 <HAL_DMA_IRQHandler+0x6bc>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d013      	beq.n	8003424 <HAL_DMA_IRQHandler+0x678>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a1a      	ldr	r2, [pc, #104]	; (800346c <HAL_DMA_IRQHandler+0x6c0>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d00e      	beq.n	8003424 <HAL_DMA_IRQHandler+0x678>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a19      	ldr	r2, [pc, #100]	; (8003470 <HAL_DMA_IRQHandler+0x6c4>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d009      	beq.n	8003424 <HAL_DMA_IRQHandler+0x678>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a17      	ldr	r2, [pc, #92]	; (8003474 <HAL_DMA_IRQHandler+0x6c8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d004      	beq.n	8003424 <HAL_DMA_IRQHandler+0x678>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a16      	ldr	r2, [pc, #88]	; (8003478 <HAL_DMA_IRQHandler+0x6cc>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d12b      	bne.n	800347c <HAL_DMA_IRQHandler+0x6d0>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0310 	and.w	r3, r3, #16
 800342e:	2b00      	cmp	r3, #0
 8003430:	bf14      	ite	ne
 8003432:	2301      	movne	r3, #1
 8003434:	2300      	moveq	r3, #0
 8003436:	b2db      	uxtb	r3, r3
 8003438:	e02a      	b.n	8003490 <HAL_DMA_IRQHandler+0x6e4>
 800343a:	bf00      	nop
 800343c:	40020010 	.word	0x40020010
 8003440:	40020028 	.word	0x40020028
 8003444:	40020040 	.word	0x40020040
 8003448:	40020058 	.word	0x40020058
 800344c:	40020070 	.word	0x40020070
 8003450:	40020088 	.word	0x40020088
 8003454:	400200a0 	.word	0x400200a0
 8003458:	400200b8 	.word	0x400200b8
 800345c:	40020410 	.word	0x40020410
 8003460:	40020428 	.word	0x40020428
 8003464:	40020440 	.word	0x40020440
 8003468:	40020458 	.word	0x40020458
 800346c:	40020470 	.word	0x40020470
 8003470:	40020488 	.word	0x40020488
 8003474:	400204a0 	.word	0x400204a0
 8003478:	400204b8 	.word	0x400204b8
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	bf14      	ite	ne
 800348a:	2301      	movne	r3, #1
 800348c:	2300      	moveq	r3, #0
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 8087 	beq.w	80035a4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349a:	f003 031f 	and.w	r3, r3, #31
 800349e:	2220      	movs	r2, #32
 80034a0:	409a      	lsls	r2, r3
 80034a2:	6a3b      	ldr	r3, [r7, #32]
 80034a4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d139      	bne.n	8003526 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 0216 	bic.w	r2, r2, #22
 80034c0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	695a      	ldr	r2, [r3, #20]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034d0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d103      	bne.n	80034e2 <HAL_DMA_IRQHandler+0x736>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d007      	beq.n	80034f2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0208 	bic.w	r2, r2, #8
 80034f0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f6:	f003 031f 	and.w	r3, r3, #31
 80034fa:	223f      	movs	r2, #63	; 0x3f
 80034fc:	409a      	lsls	r2, r3
 80034fe:	6a3b      	ldr	r3, [r7, #32]
 8003500:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003516:	2b00      	cmp	r3, #0
 8003518:	f000 834a 	beq.w	8003bb0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	4798      	blx	r3
          }
          return;
 8003524:	e344      	b.n	8003bb0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d018      	beq.n	8003566 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d108      	bne.n	8003554 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003546:	2b00      	cmp	r3, #0
 8003548:	d02c      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	4798      	blx	r3
 8003552:	e027      	b.n	80035a4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003558:	2b00      	cmp	r3, #0
 800355a:	d023      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	4798      	blx	r3
 8003564:	e01e      	b.n	80035a4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10f      	bne.n	8003594 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0210 	bic.w	r2, r2, #16
 8003582:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 8306 	beq.w	8003bba <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 8088 	beq.w	80036cc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2204      	movs	r2, #4
 80035c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a7a      	ldr	r2, [pc, #488]	; (80037b4 <HAL_DMA_IRQHandler+0xa08>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d04a      	beq.n	8003664 <HAL_DMA_IRQHandler+0x8b8>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a79      	ldr	r2, [pc, #484]	; (80037b8 <HAL_DMA_IRQHandler+0xa0c>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d045      	beq.n	8003664 <HAL_DMA_IRQHandler+0x8b8>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a77      	ldr	r2, [pc, #476]	; (80037bc <HAL_DMA_IRQHandler+0xa10>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d040      	beq.n	8003664 <HAL_DMA_IRQHandler+0x8b8>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a76      	ldr	r2, [pc, #472]	; (80037c0 <HAL_DMA_IRQHandler+0xa14>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d03b      	beq.n	8003664 <HAL_DMA_IRQHandler+0x8b8>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a74      	ldr	r2, [pc, #464]	; (80037c4 <HAL_DMA_IRQHandler+0xa18>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d036      	beq.n	8003664 <HAL_DMA_IRQHandler+0x8b8>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a73      	ldr	r2, [pc, #460]	; (80037c8 <HAL_DMA_IRQHandler+0xa1c>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d031      	beq.n	8003664 <HAL_DMA_IRQHandler+0x8b8>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a71      	ldr	r2, [pc, #452]	; (80037cc <HAL_DMA_IRQHandler+0xa20>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d02c      	beq.n	8003664 <HAL_DMA_IRQHandler+0x8b8>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a70      	ldr	r2, [pc, #448]	; (80037d0 <HAL_DMA_IRQHandler+0xa24>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d027      	beq.n	8003664 <HAL_DMA_IRQHandler+0x8b8>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a6e      	ldr	r2, [pc, #440]	; (80037d4 <HAL_DMA_IRQHandler+0xa28>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d022      	beq.n	8003664 <HAL_DMA_IRQHandler+0x8b8>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a6d      	ldr	r2, [pc, #436]	; (80037d8 <HAL_DMA_IRQHandler+0xa2c>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d01d      	beq.n	8003664 <HAL_DMA_IRQHandler+0x8b8>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a6b      	ldr	r2, [pc, #428]	; (80037dc <HAL_DMA_IRQHandler+0xa30>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d018      	beq.n	8003664 <HAL_DMA_IRQHandler+0x8b8>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a6a      	ldr	r2, [pc, #424]	; (80037e0 <HAL_DMA_IRQHandler+0xa34>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d013      	beq.n	8003664 <HAL_DMA_IRQHandler+0x8b8>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a68      	ldr	r2, [pc, #416]	; (80037e4 <HAL_DMA_IRQHandler+0xa38>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d00e      	beq.n	8003664 <HAL_DMA_IRQHandler+0x8b8>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a67      	ldr	r2, [pc, #412]	; (80037e8 <HAL_DMA_IRQHandler+0xa3c>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d009      	beq.n	8003664 <HAL_DMA_IRQHandler+0x8b8>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a65      	ldr	r2, [pc, #404]	; (80037ec <HAL_DMA_IRQHandler+0xa40>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d004      	beq.n	8003664 <HAL_DMA_IRQHandler+0x8b8>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a64      	ldr	r2, [pc, #400]	; (80037f0 <HAL_DMA_IRQHandler+0xa44>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d108      	bne.n	8003676 <HAL_DMA_IRQHandler+0x8ca>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0201 	bic.w	r2, r2, #1
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	e007      	b.n	8003686 <HAL_DMA_IRQHandler+0x8da>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 0201 	bic.w	r2, r2, #1
 8003684:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	3301      	adds	r3, #1
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800368e:	429a      	cmp	r2, r3
 8003690:	d307      	bcc.n	80036a2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1f2      	bne.n	8003686 <HAL_DMA_IRQHandler+0x8da>
 80036a0:	e000      	b.n	80036a4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80036a2:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d004      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2203      	movs	r2, #3
 80036be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80036c2:	e003      	b.n	80036cc <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 8272 	beq.w	8003bba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	4798      	blx	r3
 80036de:	e26c      	b.n	8003bba <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a43      	ldr	r2, [pc, #268]	; (80037f4 <HAL_DMA_IRQHandler+0xa48>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d022      	beq.n	8003730 <HAL_DMA_IRQHandler+0x984>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a42      	ldr	r2, [pc, #264]	; (80037f8 <HAL_DMA_IRQHandler+0xa4c>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d01d      	beq.n	8003730 <HAL_DMA_IRQHandler+0x984>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a40      	ldr	r2, [pc, #256]	; (80037fc <HAL_DMA_IRQHandler+0xa50>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d018      	beq.n	8003730 <HAL_DMA_IRQHandler+0x984>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a3f      	ldr	r2, [pc, #252]	; (8003800 <HAL_DMA_IRQHandler+0xa54>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d013      	beq.n	8003730 <HAL_DMA_IRQHandler+0x984>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a3d      	ldr	r2, [pc, #244]	; (8003804 <HAL_DMA_IRQHandler+0xa58>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d00e      	beq.n	8003730 <HAL_DMA_IRQHandler+0x984>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a3c      	ldr	r2, [pc, #240]	; (8003808 <HAL_DMA_IRQHandler+0xa5c>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d009      	beq.n	8003730 <HAL_DMA_IRQHandler+0x984>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a3a      	ldr	r2, [pc, #232]	; (800380c <HAL_DMA_IRQHandler+0xa60>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d004      	beq.n	8003730 <HAL_DMA_IRQHandler+0x984>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a39      	ldr	r2, [pc, #228]	; (8003810 <HAL_DMA_IRQHandler+0xa64>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d101      	bne.n	8003734 <HAL_DMA_IRQHandler+0x988>
 8003730:	2301      	movs	r3, #1
 8003732:	e000      	b.n	8003736 <HAL_DMA_IRQHandler+0x98a>
 8003734:	2300      	movs	r3, #0
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 823f 	beq.w	8003bba <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003748:	f003 031f 	and.w	r3, r3, #31
 800374c:	2204      	movs	r2, #4
 800374e:	409a      	lsls	r2, r3
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	4013      	ands	r3, r2
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 80cd 	beq.w	80038f4 <HAL_DMA_IRQHandler+0xb48>
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 80c7 	beq.w	80038f4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376a:	f003 031f 	and.w	r3, r3, #31
 800376e:	2204      	movs	r2, #4
 8003770:	409a      	lsls	r2, r3
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d049      	beq.n	8003814 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d109      	bne.n	800379e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 8210 	beq.w	8003bb4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800379c:	e20a      	b.n	8003bb4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f000 8206 	beq.w	8003bb4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037b0:	e200      	b.n	8003bb4 <HAL_DMA_IRQHandler+0xe08>
 80037b2:	bf00      	nop
 80037b4:	40020010 	.word	0x40020010
 80037b8:	40020028 	.word	0x40020028
 80037bc:	40020040 	.word	0x40020040
 80037c0:	40020058 	.word	0x40020058
 80037c4:	40020070 	.word	0x40020070
 80037c8:	40020088 	.word	0x40020088
 80037cc:	400200a0 	.word	0x400200a0
 80037d0:	400200b8 	.word	0x400200b8
 80037d4:	40020410 	.word	0x40020410
 80037d8:	40020428 	.word	0x40020428
 80037dc:	40020440 	.word	0x40020440
 80037e0:	40020458 	.word	0x40020458
 80037e4:	40020470 	.word	0x40020470
 80037e8:	40020488 	.word	0x40020488
 80037ec:	400204a0 	.word	0x400204a0
 80037f0:	400204b8 	.word	0x400204b8
 80037f4:	58025408 	.word	0x58025408
 80037f8:	5802541c 	.word	0x5802541c
 80037fc:	58025430 	.word	0x58025430
 8003800:	58025444 	.word	0x58025444
 8003804:	58025458 	.word	0x58025458
 8003808:	5802546c 	.word	0x5802546c
 800380c:	58025480 	.word	0x58025480
 8003810:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	f003 0320 	and.w	r3, r3, #32
 800381a:	2b00      	cmp	r3, #0
 800381c:	d160      	bne.n	80038e0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a8c      	ldr	r2, [pc, #560]	; (8003a54 <HAL_DMA_IRQHandler+0xca8>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d04a      	beq.n	80038be <HAL_DMA_IRQHandler+0xb12>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a8a      	ldr	r2, [pc, #552]	; (8003a58 <HAL_DMA_IRQHandler+0xcac>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d045      	beq.n	80038be <HAL_DMA_IRQHandler+0xb12>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a89      	ldr	r2, [pc, #548]	; (8003a5c <HAL_DMA_IRQHandler+0xcb0>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d040      	beq.n	80038be <HAL_DMA_IRQHandler+0xb12>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a87      	ldr	r2, [pc, #540]	; (8003a60 <HAL_DMA_IRQHandler+0xcb4>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d03b      	beq.n	80038be <HAL_DMA_IRQHandler+0xb12>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a86      	ldr	r2, [pc, #536]	; (8003a64 <HAL_DMA_IRQHandler+0xcb8>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d036      	beq.n	80038be <HAL_DMA_IRQHandler+0xb12>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a84      	ldr	r2, [pc, #528]	; (8003a68 <HAL_DMA_IRQHandler+0xcbc>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d031      	beq.n	80038be <HAL_DMA_IRQHandler+0xb12>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a83      	ldr	r2, [pc, #524]	; (8003a6c <HAL_DMA_IRQHandler+0xcc0>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d02c      	beq.n	80038be <HAL_DMA_IRQHandler+0xb12>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a81      	ldr	r2, [pc, #516]	; (8003a70 <HAL_DMA_IRQHandler+0xcc4>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d027      	beq.n	80038be <HAL_DMA_IRQHandler+0xb12>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a80      	ldr	r2, [pc, #512]	; (8003a74 <HAL_DMA_IRQHandler+0xcc8>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d022      	beq.n	80038be <HAL_DMA_IRQHandler+0xb12>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a7e      	ldr	r2, [pc, #504]	; (8003a78 <HAL_DMA_IRQHandler+0xccc>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d01d      	beq.n	80038be <HAL_DMA_IRQHandler+0xb12>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a7d      	ldr	r2, [pc, #500]	; (8003a7c <HAL_DMA_IRQHandler+0xcd0>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d018      	beq.n	80038be <HAL_DMA_IRQHandler+0xb12>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a7b      	ldr	r2, [pc, #492]	; (8003a80 <HAL_DMA_IRQHandler+0xcd4>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d013      	beq.n	80038be <HAL_DMA_IRQHandler+0xb12>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a7a      	ldr	r2, [pc, #488]	; (8003a84 <HAL_DMA_IRQHandler+0xcd8>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d00e      	beq.n	80038be <HAL_DMA_IRQHandler+0xb12>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a78      	ldr	r2, [pc, #480]	; (8003a88 <HAL_DMA_IRQHandler+0xcdc>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d009      	beq.n	80038be <HAL_DMA_IRQHandler+0xb12>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a77      	ldr	r2, [pc, #476]	; (8003a8c <HAL_DMA_IRQHandler+0xce0>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d004      	beq.n	80038be <HAL_DMA_IRQHandler+0xb12>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a75      	ldr	r2, [pc, #468]	; (8003a90 <HAL_DMA_IRQHandler+0xce4>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d108      	bne.n	80038d0 <HAL_DMA_IRQHandler+0xb24>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0208 	bic.w	r2, r2, #8
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	e007      	b.n	80038e0 <HAL_DMA_IRQHandler+0xb34>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 0204 	bic.w	r2, r2, #4
 80038de:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 8165 	beq.w	8003bb4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038f2:	e15f      	b.n	8003bb4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f8:	f003 031f 	and.w	r3, r3, #31
 80038fc:	2202      	movs	r2, #2
 80038fe:	409a      	lsls	r2, r3
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	4013      	ands	r3, r2
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 80c5 	beq.w	8003a94 <HAL_DMA_IRQHandler+0xce8>
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 80bf 	beq.w	8003a94 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800391a:	f003 031f 	and.w	r3, r3, #31
 800391e:	2202      	movs	r2, #2
 8003920:	409a      	lsls	r2, r3
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d018      	beq.n	8003962 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d109      	bne.n	800394e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393e:	2b00      	cmp	r3, #0
 8003940:	f000 813a 	beq.w	8003bb8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800394c:	e134      	b.n	8003bb8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003952:	2b00      	cmp	r3, #0
 8003954:	f000 8130 	beq.w	8003bb8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003960:	e12a      	b.n	8003bb8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	f003 0320 	and.w	r3, r3, #32
 8003968:	2b00      	cmp	r3, #0
 800396a:	d168      	bne.n	8003a3e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a38      	ldr	r2, [pc, #224]	; (8003a54 <HAL_DMA_IRQHandler+0xca8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d04a      	beq.n	8003a0c <HAL_DMA_IRQHandler+0xc60>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a37      	ldr	r2, [pc, #220]	; (8003a58 <HAL_DMA_IRQHandler+0xcac>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d045      	beq.n	8003a0c <HAL_DMA_IRQHandler+0xc60>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a35      	ldr	r2, [pc, #212]	; (8003a5c <HAL_DMA_IRQHandler+0xcb0>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d040      	beq.n	8003a0c <HAL_DMA_IRQHandler+0xc60>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a34      	ldr	r2, [pc, #208]	; (8003a60 <HAL_DMA_IRQHandler+0xcb4>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d03b      	beq.n	8003a0c <HAL_DMA_IRQHandler+0xc60>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a32      	ldr	r2, [pc, #200]	; (8003a64 <HAL_DMA_IRQHandler+0xcb8>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d036      	beq.n	8003a0c <HAL_DMA_IRQHandler+0xc60>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a31      	ldr	r2, [pc, #196]	; (8003a68 <HAL_DMA_IRQHandler+0xcbc>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d031      	beq.n	8003a0c <HAL_DMA_IRQHandler+0xc60>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a2f      	ldr	r2, [pc, #188]	; (8003a6c <HAL_DMA_IRQHandler+0xcc0>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d02c      	beq.n	8003a0c <HAL_DMA_IRQHandler+0xc60>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a2e      	ldr	r2, [pc, #184]	; (8003a70 <HAL_DMA_IRQHandler+0xcc4>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d027      	beq.n	8003a0c <HAL_DMA_IRQHandler+0xc60>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a2c      	ldr	r2, [pc, #176]	; (8003a74 <HAL_DMA_IRQHandler+0xcc8>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d022      	beq.n	8003a0c <HAL_DMA_IRQHandler+0xc60>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a2b      	ldr	r2, [pc, #172]	; (8003a78 <HAL_DMA_IRQHandler+0xccc>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d01d      	beq.n	8003a0c <HAL_DMA_IRQHandler+0xc60>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a29      	ldr	r2, [pc, #164]	; (8003a7c <HAL_DMA_IRQHandler+0xcd0>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d018      	beq.n	8003a0c <HAL_DMA_IRQHandler+0xc60>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a28      	ldr	r2, [pc, #160]	; (8003a80 <HAL_DMA_IRQHandler+0xcd4>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d013      	beq.n	8003a0c <HAL_DMA_IRQHandler+0xc60>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a26      	ldr	r2, [pc, #152]	; (8003a84 <HAL_DMA_IRQHandler+0xcd8>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d00e      	beq.n	8003a0c <HAL_DMA_IRQHandler+0xc60>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a25      	ldr	r2, [pc, #148]	; (8003a88 <HAL_DMA_IRQHandler+0xcdc>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d009      	beq.n	8003a0c <HAL_DMA_IRQHandler+0xc60>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a23      	ldr	r2, [pc, #140]	; (8003a8c <HAL_DMA_IRQHandler+0xce0>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d004      	beq.n	8003a0c <HAL_DMA_IRQHandler+0xc60>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a22      	ldr	r2, [pc, #136]	; (8003a90 <HAL_DMA_IRQHandler+0xce4>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d108      	bne.n	8003a1e <HAL_DMA_IRQHandler+0xc72>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 0214 	bic.w	r2, r2, #20
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	e007      	b.n	8003a2e <HAL_DMA_IRQHandler+0xc82>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f022 020a 	bic.w	r2, r2, #10
 8003a2c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 80b8 	beq.w	8003bb8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a50:	e0b2      	b.n	8003bb8 <HAL_DMA_IRQHandler+0xe0c>
 8003a52:	bf00      	nop
 8003a54:	40020010 	.word	0x40020010
 8003a58:	40020028 	.word	0x40020028
 8003a5c:	40020040 	.word	0x40020040
 8003a60:	40020058 	.word	0x40020058
 8003a64:	40020070 	.word	0x40020070
 8003a68:	40020088 	.word	0x40020088
 8003a6c:	400200a0 	.word	0x400200a0
 8003a70:	400200b8 	.word	0x400200b8
 8003a74:	40020410 	.word	0x40020410
 8003a78:	40020428 	.word	0x40020428
 8003a7c:	40020440 	.word	0x40020440
 8003a80:	40020458 	.word	0x40020458
 8003a84:	40020470 	.word	0x40020470
 8003a88:	40020488 	.word	0x40020488
 8003a8c:	400204a0 	.word	0x400204a0
 8003a90:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a98:	f003 031f 	and.w	r3, r3, #31
 8003a9c:	2208      	movs	r2, #8
 8003a9e:	409a      	lsls	r2, r3
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 8088 	beq.w	8003bba <HAL_DMA_IRQHandler+0xe0e>
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	f003 0308 	and.w	r3, r3, #8
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f000 8082 	beq.w	8003bba <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a41      	ldr	r2, [pc, #260]	; (8003bc0 <HAL_DMA_IRQHandler+0xe14>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d04a      	beq.n	8003b56 <HAL_DMA_IRQHandler+0xdaa>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a3f      	ldr	r2, [pc, #252]	; (8003bc4 <HAL_DMA_IRQHandler+0xe18>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d045      	beq.n	8003b56 <HAL_DMA_IRQHandler+0xdaa>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a3e      	ldr	r2, [pc, #248]	; (8003bc8 <HAL_DMA_IRQHandler+0xe1c>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d040      	beq.n	8003b56 <HAL_DMA_IRQHandler+0xdaa>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a3c      	ldr	r2, [pc, #240]	; (8003bcc <HAL_DMA_IRQHandler+0xe20>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d03b      	beq.n	8003b56 <HAL_DMA_IRQHandler+0xdaa>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a3b      	ldr	r2, [pc, #236]	; (8003bd0 <HAL_DMA_IRQHandler+0xe24>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d036      	beq.n	8003b56 <HAL_DMA_IRQHandler+0xdaa>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a39      	ldr	r2, [pc, #228]	; (8003bd4 <HAL_DMA_IRQHandler+0xe28>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d031      	beq.n	8003b56 <HAL_DMA_IRQHandler+0xdaa>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a38      	ldr	r2, [pc, #224]	; (8003bd8 <HAL_DMA_IRQHandler+0xe2c>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d02c      	beq.n	8003b56 <HAL_DMA_IRQHandler+0xdaa>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a36      	ldr	r2, [pc, #216]	; (8003bdc <HAL_DMA_IRQHandler+0xe30>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d027      	beq.n	8003b56 <HAL_DMA_IRQHandler+0xdaa>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a35      	ldr	r2, [pc, #212]	; (8003be0 <HAL_DMA_IRQHandler+0xe34>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d022      	beq.n	8003b56 <HAL_DMA_IRQHandler+0xdaa>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a33      	ldr	r2, [pc, #204]	; (8003be4 <HAL_DMA_IRQHandler+0xe38>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d01d      	beq.n	8003b56 <HAL_DMA_IRQHandler+0xdaa>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a32      	ldr	r2, [pc, #200]	; (8003be8 <HAL_DMA_IRQHandler+0xe3c>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d018      	beq.n	8003b56 <HAL_DMA_IRQHandler+0xdaa>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a30      	ldr	r2, [pc, #192]	; (8003bec <HAL_DMA_IRQHandler+0xe40>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d013      	beq.n	8003b56 <HAL_DMA_IRQHandler+0xdaa>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a2f      	ldr	r2, [pc, #188]	; (8003bf0 <HAL_DMA_IRQHandler+0xe44>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d00e      	beq.n	8003b56 <HAL_DMA_IRQHandler+0xdaa>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a2d      	ldr	r2, [pc, #180]	; (8003bf4 <HAL_DMA_IRQHandler+0xe48>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d009      	beq.n	8003b56 <HAL_DMA_IRQHandler+0xdaa>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a2c      	ldr	r2, [pc, #176]	; (8003bf8 <HAL_DMA_IRQHandler+0xe4c>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d004      	beq.n	8003b56 <HAL_DMA_IRQHandler+0xdaa>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a2a      	ldr	r2, [pc, #168]	; (8003bfc <HAL_DMA_IRQHandler+0xe50>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d108      	bne.n	8003b68 <HAL_DMA_IRQHandler+0xdbc>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 021c 	bic.w	r2, r2, #28
 8003b64:	601a      	str	r2, [r3, #0]
 8003b66:	e007      	b.n	8003b78 <HAL_DMA_IRQHandler+0xdcc>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 020e 	bic.w	r2, r2, #14
 8003b76:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b7c:	f003 031f 	and.w	r3, r3, #31
 8003b80:	2201      	movs	r2, #1
 8003b82:	409a      	lsls	r2, r3
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d009      	beq.n	8003bba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	4798      	blx	r3
 8003bae:	e004      	b.n	8003bba <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003bb0:	bf00      	nop
 8003bb2:	e002      	b.n	8003bba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bb4:	bf00      	nop
 8003bb6:	e000      	b.n	8003bba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bb8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003bba:	3728      	adds	r7, #40	; 0x28
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	40020010 	.word	0x40020010
 8003bc4:	40020028 	.word	0x40020028
 8003bc8:	40020040 	.word	0x40020040
 8003bcc:	40020058 	.word	0x40020058
 8003bd0:	40020070 	.word	0x40020070
 8003bd4:	40020088 	.word	0x40020088
 8003bd8:	400200a0 	.word	0x400200a0
 8003bdc:	400200b8 	.word	0x400200b8
 8003be0:	40020410 	.word	0x40020410
 8003be4:	40020428 	.word	0x40020428
 8003be8:	40020440 	.word	0x40020440
 8003bec:	40020458 	.word	0x40020458
 8003bf0:	40020470 	.word	0x40020470
 8003bf4:	40020488 	.word	0x40020488
 8003bf8:	400204a0 	.word	0x400204a0
 8003bfc:	400204b8 	.word	0x400204b8

08003c00 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b087      	sub	sp, #28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
 8003c0c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c12:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c18:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a84      	ldr	r2, [pc, #528]	; (8003e30 <DMA_SetConfig+0x230>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d072      	beq.n	8003d0a <DMA_SetConfig+0x10a>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a82      	ldr	r2, [pc, #520]	; (8003e34 <DMA_SetConfig+0x234>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d06d      	beq.n	8003d0a <DMA_SetConfig+0x10a>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a81      	ldr	r2, [pc, #516]	; (8003e38 <DMA_SetConfig+0x238>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d068      	beq.n	8003d0a <DMA_SetConfig+0x10a>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a7f      	ldr	r2, [pc, #508]	; (8003e3c <DMA_SetConfig+0x23c>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d063      	beq.n	8003d0a <DMA_SetConfig+0x10a>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a7e      	ldr	r2, [pc, #504]	; (8003e40 <DMA_SetConfig+0x240>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d05e      	beq.n	8003d0a <DMA_SetConfig+0x10a>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a7c      	ldr	r2, [pc, #496]	; (8003e44 <DMA_SetConfig+0x244>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d059      	beq.n	8003d0a <DMA_SetConfig+0x10a>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a7b      	ldr	r2, [pc, #492]	; (8003e48 <DMA_SetConfig+0x248>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d054      	beq.n	8003d0a <DMA_SetConfig+0x10a>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a79      	ldr	r2, [pc, #484]	; (8003e4c <DMA_SetConfig+0x24c>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d04f      	beq.n	8003d0a <DMA_SetConfig+0x10a>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a78      	ldr	r2, [pc, #480]	; (8003e50 <DMA_SetConfig+0x250>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d04a      	beq.n	8003d0a <DMA_SetConfig+0x10a>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a76      	ldr	r2, [pc, #472]	; (8003e54 <DMA_SetConfig+0x254>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d045      	beq.n	8003d0a <DMA_SetConfig+0x10a>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a75      	ldr	r2, [pc, #468]	; (8003e58 <DMA_SetConfig+0x258>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d040      	beq.n	8003d0a <DMA_SetConfig+0x10a>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a73      	ldr	r2, [pc, #460]	; (8003e5c <DMA_SetConfig+0x25c>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d03b      	beq.n	8003d0a <DMA_SetConfig+0x10a>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a72      	ldr	r2, [pc, #456]	; (8003e60 <DMA_SetConfig+0x260>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d036      	beq.n	8003d0a <DMA_SetConfig+0x10a>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a70      	ldr	r2, [pc, #448]	; (8003e64 <DMA_SetConfig+0x264>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d031      	beq.n	8003d0a <DMA_SetConfig+0x10a>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a6f      	ldr	r2, [pc, #444]	; (8003e68 <DMA_SetConfig+0x268>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d02c      	beq.n	8003d0a <DMA_SetConfig+0x10a>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a6d      	ldr	r2, [pc, #436]	; (8003e6c <DMA_SetConfig+0x26c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d027      	beq.n	8003d0a <DMA_SetConfig+0x10a>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a6c      	ldr	r2, [pc, #432]	; (8003e70 <DMA_SetConfig+0x270>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d022      	beq.n	8003d0a <DMA_SetConfig+0x10a>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a6a      	ldr	r2, [pc, #424]	; (8003e74 <DMA_SetConfig+0x274>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d01d      	beq.n	8003d0a <DMA_SetConfig+0x10a>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a69      	ldr	r2, [pc, #420]	; (8003e78 <DMA_SetConfig+0x278>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d018      	beq.n	8003d0a <DMA_SetConfig+0x10a>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a67      	ldr	r2, [pc, #412]	; (8003e7c <DMA_SetConfig+0x27c>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d013      	beq.n	8003d0a <DMA_SetConfig+0x10a>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a66      	ldr	r2, [pc, #408]	; (8003e80 <DMA_SetConfig+0x280>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d00e      	beq.n	8003d0a <DMA_SetConfig+0x10a>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a64      	ldr	r2, [pc, #400]	; (8003e84 <DMA_SetConfig+0x284>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d009      	beq.n	8003d0a <DMA_SetConfig+0x10a>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a63      	ldr	r2, [pc, #396]	; (8003e88 <DMA_SetConfig+0x288>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d004      	beq.n	8003d0a <DMA_SetConfig+0x10a>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a61      	ldr	r2, [pc, #388]	; (8003e8c <DMA_SetConfig+0x28c>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d101      	bne.n	8003d0e <DMA_SetConfig+0x10e>
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e000      	b.n	8003d10 <DMA_SetConfig+0x110>
 8003d0e:	2300      	movs	r3, #0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00d      	beq.n	8003d30 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003d1c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d004      	beq.n	8003d30 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003d2e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a3e      	ldr	r2, [pc, #248]	; (8003e30 <DMA_SetConfig+0x230>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d04a      	beq.n	8003dd0 <DMA_SetConfig+0x1d0>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a3d      	ldr	r2, [pc, #244]	; (8003e34 <DMA_SetConfig+0x234>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d045      	beq.n	8003dd0 <DMA_SetConfig+0x1d0>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a3b      	ldr	r2, [pc, #236]	; (8003e38 <DMA_SetConfig+0x238>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d040      	beq.n	8003dd0 <DMA_SetConfig+0x1d0>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a3a      	ldr	r2, [pc, #232]	; (8003e3c <DMA_SetConfig+0x23c>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d03b      	beq.n	8003dd0 <DMA_SetConfig+0x1d0>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a38      	ldr	r2, [pc, #224]	; (8003e40 <DMA_SetConfig+0x240>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d036      	beq.n	8003dd0 <DMA_SetConfig+0x1d0>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a37      	ldr	r2, [pc, #220]	; (8003e44 <DMA_SetConfig+0x244>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d031      	beq.n	8003dd0 <DMA_SetConfig+0x1d0>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a35      	ldr	r2, [pc, #212]	; (8003e48 <DMA_SetConfig+0x248>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d02c      	beq.n	8003dd0 <DMA_SetConfig+0x1d0>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a34      	ldr	r2, [pc, #208]	; (8003e4c <DMA_SetConfig+0x24c>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d027      	beq.n	8003dd0 <DMA_SetConfig+0x1d0>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a32      	ldr	r2, [pc, #200]	; (8003e50 <DMA_SetConfig+0x250>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d022      	beq.n	8003dd0 <DMA_SetConfig+0x1d0>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a31      	ldr	r2, [pc, #196]	; (8003e54 <DMA_SetConfig+0x254>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d01d      	beq.n	8003dd0 <DMA_SetConfig+0x1d0>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a2f      	ldr	r2, [pc, #188]	; (8003e58 <DMA_SetConfig+0x258>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d018      	beq.n	8003dd0 <DMA_SetConfig+0x1d0>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a2e      	ldr	r2, [pc, #184]	; (8003e5c <DMA_SetConfig+0x25c>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d013      	beq.n	8003dd0 <DMA_SetConfig+0x1d0>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a2c      	ldr	r2, [pc, #176]	; (8003e60 <DMA_SetConfig+0x260>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d00e      	beq.n	8003dd0 <DMA_SetConfig+0x1d0>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a2b      	ldr	r2, [pc, #172]	; (8003e64 <DMA_SetConfig+0x264>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d009      	beq.n	8003dd0 <DMA_SetConfig+0x1d0>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a29      	ldr	r2, [pc, #164]	; (8003e68 <DMA_SetConfig+0x268>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d004      	beq.n	8003dd0 <DMA_SetConfig+0x1d0>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a28      	ldr	r2, [pc, #160]	; (8003e6c <DMA_SetConfig+0x26c>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d101      	bne.n	8003dd4 <DMA_SetConfig+0x1d4>
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e000      	b.n	8003dd6 <DMA_SetConfig+0x1d6>
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d05a      	beq.n	8003e90 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dde:	f003 031f 	and.w	r3, r3, #31
 8003de2:	223f      	movs	r2, #63	; 0x3f
 8003de4:	409a      	lsls	r2, r3
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003df8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	2b40      	cmp	r3, #64	; 0x40
 8003e08:	d108      	bne.n	8003e1c <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003e1a:	e087      	b.n	8003f2c <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	60da      	str	r2, [r3, #12]
}
 8003e2c:	e07e      	b.n	8003f2c <DMA_SetConfig+0x32c>
 8003e2e:	bf00      	nop
 8003e30:	40020010 	.word	0x40020010
 8003e34:	40020028 	.word	0x40020028
 8003e38:	40020040 	.word	0x40020040
 8003e3c:	40020058 	.word	0x40020058
 8003e40:	40020070 	.word	0x40020070
 8003e44:	40020088 	.word	0x40020088
 8003e48:	400200a0 	.word	0x400200a0
 8003e4c:	400200b8 	.word	0x400200b8
 8003e50:	40020410 	.word	0x40020410
 8003e54:	40020428 	.word	0x40020428
 8003e58:	40020440 	.word	0x40020440
 8003e5c:	40020458 	.word	0x40020458
 8003e60:	40020470 	.word	0x40020470
 8003e64:	40020488 	.word	0x40020488
 8003e68:	400204a0 	.word	0x400204a0
 8003e6c:	400204b8 	.word	0x400204b8
 8003e70:	58025408 	.word	0x58025408
 8003e74:	5802541c 	.word	0x5802541c
 8003e78:	58025430 	.word	0x58025430
 8003e7c:	58025444 	.word	0x58025444
 8003e80:	58025458 	.word	0x58025458
 8003e84:	5802546c 	.word	0x5802546c
 8003e88:	58025480 	.word	0x58025480
 8003e8c:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a28      	ldr	r2, [pc, #160]	; (8003f38 <DMA_SetConfig+0x338>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d022      	beq.n	8003ee0 <DMA_SetConfig+0x2e0>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a27      	ldr	r2, [pc, #156]	; (8003f3c <DMA_SetConfig+0x33c>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d01d      	beq.n	8003ee0 <DMA_SetConfig+0x2e0>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a25      	ldr	r2, [pc, #148]	; (8003f40 <DMA_SetConfig+0x340>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d018      	beq.n	8003ee0 <DMA_SetConfig+0x2e0>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a24      	ldr	r2, [pc, #144]	; (8003f44 <DMA_SetConfig+0x344>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d013      	beq.n	8003ee0 <DMA_SetConfig+0x2e0>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a22      	ldr	r2, [pc, #136]	; (8003f48 <DMA_SetConfig+0x348>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d00e      	beq.n	8003ee0 <DMA_SetConfig+0x2e0>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a21      	ldr	r2, [pc, #132]	; (8003f4c <DMA_SetConfig+0x34c>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d009      	beq.n	8003ee0 <DMA_SetConfig+0x2e0>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a1f      	ldr	r2, [pc, #124]	; (8003f50 <DMA_SetConfig+0x350>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d004      	beq.n	8003ee0 <DMA_SetConfig+0x2e0>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a1e      	ldr	r2, [pc, #120]	; (8003f54 <DMA_SetConfig+0x354>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d101      	bne.n	8003ee4 <DMA_SetConfig+0x2e4>
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e000      	b.n	8003ee6 <DMA_SetConfig+0x2e6>
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d020      	beq.n	8003f2c <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eee:	f003 031f 	and.w	r3, r3, #31
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	409a      	lsls	r2, r3
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	2b40      	cmp	r3, #64	; 0x40
 8003f08:	d108      	bne.n	8003f1c <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	60da      	str	r2, [r3, #12]
}
 8003f1a:	e007      	b.n	8003f2c <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	60da      	str	r2, [r3, #12]
}
 8003f2c:	bf00      	nop
 8003f2e:	371c      	adds	r7, #28
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	58025408 	.word	0x58025408
 8003f3c:	5802541c 	.word	0x5802541c
 8003f40:	58025430 	.word	0x58025430
 8003f44:	58025444 	.word	0x58025444
 8003f48:	58025458 	.word	0x58025458
 8003f4c:	5802546c 	.word	0x5802546c
 8003f50:	58025480 	.word	0x58025480
 8003f54:	58025494 	.word	0x58025494

08003f58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a42      	ldr	r2, [pc, #264]	; (8004070 <DMA_CalcBaseAndBitshift+0x118>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d04a      	beq.n	8004000 <DMA_CalcBaseAndBitshift+0xa8>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a41      	ldr	r2, [pc, #260]	; (8004074 <DMA_CalcBaseAndBitshift+0x11c>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d045      	beq.n	8004000 <DMA_CalcBaseAndBitshift+0xa8>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a3f      	ldr	r2, [pc, #252]	; (8004078 <DMA_CalcBaseAndBitshift+0x120>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d040      	beq.n	8004000 <DMA_CalcBaseAndBitshift+0xa8>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a3e      	ldr	r2, [pc, #248]	; (800407c <DMA_CalcBaseAndBitshift+0x124>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d03b      	beq.n	8004000 <DMA_CalcBaseAndBitshift+0xa8>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a3c      	ldr	r2, [pc, #240]	; (8004080 <DMA_CalcBaseAndBitshift+0x128>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d036      	beq.n	8004000 <DMA_CalcBaseAndBitshift+0xa8>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a3b      	ldr	r2, [pc, #236]	; (8004084 <DMA_CalcBaseAndBitshift+0x12c>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d031      	beq.n	8004000 <DMA_CalcBaseAndBitshift+0xa8>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a39      	ldr	r2, [pc, #228]	; (8004088 <DMA_CalcBaseAndBitshift+0x130>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d02c      	beq.n	8004000 <DMA_CalcBaseAndBitshift+0xa8>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a38      	ldr	r2, [pc, #224]	; (800408c <DMA_CalcBaseAndBitshift+0x134>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d027      	beq.n	8004000 <DMA_CalcBaseAndBitshift+0xa8>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a36      	ldr	r2, [pc, #216]	; (8004090 <DMA_CalcBaseAndBitshift+0x138>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d022      	beq.n	8004000 <DMA_CalcBaseAndBitshift+0xa8>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a35      	ldr	r2, [pc, #212]	; (8004094 <DMA_CalcBaseAndBitshift+0x13c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d01d      	beq.n	8004000 <DMA_CalcBaseAndBitshift+0xa8>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a33      	ldr	r2, [pc, #204]	; (8004098 <DMA_CalcBaseAndBitshift+0x140>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d018      	beq.n	8004000 <DMA_CalcBaseAndBitshift+0xa8>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a32      	ldr	r2, [pc, #200]	; (800409c <DMA_CalcBaseAndBitshift+0x144>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d013      	beq.n	8004000 <DMA_CalcBaseAndBitshift+0xa8>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a30      	ldr	r2, [pc, #192]	; (80040a0 <DMA_CalcBaseAndBitshift+0x148>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d00e      	beq.n	8004000 <DMA_CalcBaseAndBitshift+0xa8>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a2f      	ldr	r2, [pc, #188]	; (80040a4 <DMA_CalcBaseAndBitshift+0x14c>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d009      	beq.n	8004000 <DMA_CalcBaseAndBitshift+0xa8>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a2d      	ldr	r2, [pc, #180]	; (80040a8 <DMA_CalcBaseAndBitshift+0x150>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d004      	beq.n	8004000 <DMA_CalcBaseAndBitshift+0xa8>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a2c      	ldr	r2, [pc, #176]	; (80040ac <DMA_CalcBaseAndBitshift+0x154>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d101      	bne.n	8004004 <DMA_CalcBaseAndBitshift+0xac>
 8004000:	2301      	movs	r3, #1
 8004002:	e000      	b.n	8004006 <DMA_CalcBaseAndBitshift+0xae>
 8004004:	2300      	movs	r3, #0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d024      	beq.n	8004054 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	b2db      	uxtb	r3, r3
 8004010:	3b10      	subs	r3, #16
 8004012:	4a27      	ldr	r2, [pc, #156]	; (80040b0 <DMA_CalcBaseAndBitshift+0x158>)
 8004014:	fba2 2303 	umull	r2, r3, r2, r3
 8004018:	091b      	lsrs	r3, r3, #4
 800401a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f003 0307 	and.w	r3, r3, #7
 8004022:	4a24      	ldr	r2, [pc, #144]	; (80040b4 <DMA_CalcBaseAndBitshift+0x15c>)
 8004024:	5cd3      	ldrb	r3, [r2, r3]
 8004026:	461a      	mov	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2b03      	cmp	r3, #3
 8004030:	d908      	bls.n	8004044 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	461a      	mov	r2, r3
 8004038:	4b1f      	ldr	r3, [pc, #124]	; (80040b8 <DMA_CalcBaseAndBitshift+0x160>)
 800403a:	4013      	ands	r3, r2
 800403c:	1d1a      	adds	r2, r3, #4
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	659a      	str	r2, [r3, #88]	; 0x58
 8004042:	e00d      	b.n	8004060 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	461a      	mov	r2, r3
 800404a:	4b1b      	ldr	r3, [pc, #108]	; (80040b8 <DMA_CalcBaseAndBitshift+0x160>)
 800404c:	4013      	ands	r3, r2
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	6593      	str	r3, [r2, #88]	; 0x58
 8004052:	e005      	b.n	8004060 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004064:	4618      	mov	r0, r3
 8004066:	3714      	adds	r7, #20
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr
 8004070:	40020010 	.word	0x40020010
 8004074:	40020028 	.word	0x40020028
 8004078:	40020040 	.word	0x40020040
 800407c:	40020058 	.word	0x40020058
 8004080:	40020070 	.word	0x40020070
 8004084:	40020088 	.word	0x40020088
 8004088:	400200a0 	.word	0x400200a0
 800408c:	400200b8 	.word	0x400200b8
 8004090:	40020410 	.word	0x40020410
 8004094:	40020428 	.word	0x40020428
 8004098:	40020440 	.word	0x40020440
 800409c:	40020458 	.word	0x40020458
 80040a0:	40020470 	.word	0x40020470
 80040a4:	40020488 	.word	0x40020488
 80040a8:	400204a0 	.word	0x400204a0
 80040ac:	400204b8 	.word	0x400204b8
 80040b0:	aaaaaaab 	.word	0xaaaaaaab
 80040b4:	080170b0 	.word	0x080170b0
 80040b8:	fffffc00 	.word	0xfffffc00

080040bc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040c4:	2300      	movs	r3, #0
 80040c6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d120      	bne.n	8004112 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d4:	2b03      	cmp	r3, #3
 80040d6:	d858      	bhi.n	800418a <DMA_CheckFifoParam+0xce>
 80040d8:	a201      	add	r2, pc, #4	; (adr r2, 80040e0 <DMA_CheckFifoParam+0x24>)
 80040da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040de:	bf00      	nop
 80040e0:	080040f1 	.word	0x080040f1
 80040e4:	08004103 	.word	0x08004103
 80040e8:	080040f1 	.word	0x080040f1
 80040ec:	0800418b 	.word	0x0800418b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d048      	beq.n	800418e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004100:	e045      	b.n	800418e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004106:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800410a:	d142      	bne.n	8004192 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004110:	e03f      	b.n	8004192 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800411a:	d123      	bne.n	8004164 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004120:	2b03      	cmp	r3, #3
 8004122:	d838      	bhi.n	8004196 <DMA_CheckFifoParam+0xda>
 8004124:	a201      	add	r2, pc, #4	; (adr r2, 800412c <DMA_CheckFifoParam+0x70>)
 8004126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800412a:	bf00      	nop
 800412c:	0800413d 	.word	0x0800413d
 8004130:	08004143 	.word	0x08004143
 8004134:	0800413d 	.word	0x0800413d
 8004138:	08004155 	.word	0x08004155
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	73fb      	strb	r3, [r7, #15]
        break;
 8004140:	e030      	b.n	80041a4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004146:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d025      	beq.n	800419a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004152:	e022      	b.n	800419a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004158:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800415c:	d11f      	bne.n	800419e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004162:	e01c      	b.n	800419e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004168:	2b02      	cmp	r3, #2
 800416a:	d902      	bls.n	8004172 <DMA_CheckFifoParam+0xb6>
 800416c:	2b03      	cmp	r3, #3
 800416e:	d003      	beq.n	8004178 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004170:	e018      	b.n	80041a4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	73fb      	strb	r3, [r7, #15]
        break;
 8004176:	e015      	b.n	80041a4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00e      	beq.n	80041a2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	73fb      	strb	r3, [r7, #15]
    break;
 8004188:	e00b      	b.n	80041a2 <DMA_CheckFifoParam+0xe6>
        break;
 800418a:	bf00      	nop
 800418c:	e00a      	b.n	80041a4 <DMA_CheckFifoParam+0xe8>
        break;
 800418e:	bf00      	nop
 8004190:	e008      	b.n	80041a4 <DMA_CheckFifoParam+0xe8>
        break;
 8004192:	bf00      	nop
 8004194:	e006      	b.n	80041a4 <DMA_CheckFifoParam+0xe8>
        break;
 8004196:	bf00      	nop
 8004198:	e004      	b.n	80041a4 <DMA_CheckFifoParam+0xe8>
        break;
 800419a:	bf00      	nop
 800419c:	e002      	b.n	80041a4 <DMA_CheckFifoParam+0xe8>
        break;
 800419e:	bf00      	nop
 80041a0:	e000      	b.n	80041a4 <DMA_CheckFifoParam+0xe8>
    break;
 80041a2:	bf00      	nop
    }
  }

  return status;
 80041a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop

080041b4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a38      	ldr	r2, [pc, #224]	; (80042a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d022      	beq.n	8004212 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a36      	ldr	r2, [pc, #216]	; (80042ac <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d01d      	beq.n	8004212 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a35      	ldr	r2, [pc, #212]	; (80042b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d018      	beq.n	8004212 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a33      	ldr	r2, [pc, #204]	; (80042b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d013      	beq.n	8004212 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a32      	ldr	r2, [pc, #200]	; (80042b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d00e      	beq.n	8004212 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a30      	ldr	r2, [pc, #192]	; (80042bc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d009      	beq.n	8004212 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a2f      	ldr	r2, [pc, #188]	; (80042c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d004      	beq.n	8004212 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a2d      	ldr	r2, [pc, #180]	; (80042c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d101      	bne.n	8004216 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004212:	2301      	movs	r3, #1
 8004214:	e000      	b.n	8004218 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004216:	2300      	movs	r3, #0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d01a      	beq.n	8004252 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	b2db      	uxtb	r3, r3
 8004222:	3b08      	subs	r3, #8
 8004224:	4a28      	ldr	r2, [pc, #160]	; (80042c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004226:	fba2 2303 	umull	r2, r3, r2, r3
 800422a:	091b      	lsrs	r3, r3, #4
 800422c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	4b26      	ldr	r3, [pc, #152]	; (80042cc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004232:	4413      	add	r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	461a      	mov	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a24      	ldr	r2, [pc, #144]	; (80042d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004240:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f003 031f 	and.w	r3, r3, #31
 8004248:	2201      	movs	r2, #1
 800424a:	409a      	lsls	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004250:	e024      	b.n	800429c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	b2db      	uxtb	r3, r3
 8004258:	3b10      	subs	r3, #16
 800425a:	4a1e      	ldr	r2, [pc, #120]	; (80042d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800425c:	fba2 2303 	umull	r2, r3, r2, r3
 8004260:	091b      	lsrs	r3, r3, #4
 8004262:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	4a1c      	ldr	r2, [pc, #112]	; (80042d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d806      	bhi.n	800427a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	4a1b      	ldr	r2, [pc, #108]	; (80042dc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d902      	bls.n	800427a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	3308      	adds	r3, #8
 8004278:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	4b18      	ldr	r3, [pc, #96]	; (80042e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800427e:	4413      	add	r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	461a      	mov	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a16      	ldr	r2, [pc, #88]	; (80042e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800428c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f003 031f 	and.w	r3, r3, #31
 8004294:	2201      	movs	r2, #1
 8004296:	409a      	lsls	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800429c:	bf00      	nop
 800429e:	3714      	adds	r7, #20
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr
 80042a8:	58025408 	.word	0x58025408
 80042ac:	5802541c 	.word	0x5802541c
 80042b0:	58025430 	.word	0x58025430
 80042b4:	58025444 	.word	0x58025444
 80042b8:	58025458 	.word	0x58025458
 80042bc:	5802546c 	.word	0x5802546c
 80042c0:	58025480 	.word	0x58025480
 80042c4:	58025494 	.word	0x58025494
 80042c8:	cccccccd 	.word	0xcccccccd
 80042cc:	16009600 	.word	0x16009600
 80042d0:	58025880 	.word	0x58025880
 80042d4:	aaaaaaab 	.word	0xaaaaaaab
 80042d8:	400204b8 	.word	0x400204b8
 80042dc:	4002040f 	.word	0x4002040f
 80042e0:	10008200 	.word	0x10008200
 80042e4:	40020880 	.word	0x40020880

080042e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d04a      	beq.n	8004394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2b08      	cmp	r3, #8
 8004302:	d847      	bhi.n	8004394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a25      	ldr	r2, [pc, #148]	; (80043a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d022      	beq.n	8004354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a24      	ldr	r2, [pc, #144]	; (80043a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d01d      	beq.n	8004354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a22      	ldr	r2, [pc, #136]	; (80043a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d018      	beq.n	8004354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a21      	ldr	r2, [pc, #132]	; (80043ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d013      	beq.n	8004354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a1f      	ldr	r2, [pc, #124]	; (80043b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d00e      	beq.n	8004354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a1e      	ldr	r2, [pc, #120]	; (80043b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d009      	beq.n	8004354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a1c      	ldr	r2, [pc, #112]	; (80043b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d004      	beq.n	8004354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a1b      	ldr	r2, [pc, #108]	; (80043bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d101      	bne.n	8004358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004354:	2301      	movs	r3, #1
 8004356:	e000      	b.n	800435a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004358:	2300      	movs	r3, #0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00a      	beq.n	8004374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	4b17      	ldr	r3, [pc, #92]	; (80043c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004362:	4413      	add	r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	461a      	mov	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a15      	ldr	r2, [pc, #84]	; (80043c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004370:	671a      	str	r2, [r3, #112]	; 0x70
 8004372:	e009      	b.n	8004388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	4b14      	ldr	r3, [pc, #80]	; (80043c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004378:	4413      	add	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	461a      	mov	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a11      	ldr	r2, [pc, #68]	; (80043cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004386:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	3b01      	subs	r3, #1
 800438c:	2201      	movs	r2, #1
 800438e:	409a      	lsls	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004394:	bf00      	nop
 8004396:	3714      	adds	r7, #20
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr
 80043a0:	58025408 	.word	0x58025408
 80043a4:	5802541c 	.word	0x5802541c
 80043a8:	58025430 	.word	0x58025430
 80043ac:	58025444 	.word	0x58025444
 80043b0:	58025458 	.word	0x58025458
 80043b4:	5802546c 	.word	0x5802546c
 80043b8:	58025480 	.word	0x58025480
 80043bc:	58025494 	.word	0x58025494
 80043c0:	1600963f 	.word	0x1600963f
 80043c4:	58025940 	.word	0x58025940
 80043c8:	1000823f 	.word	0x1000823f
 80043cc:	40020940 	.word	0x40020940

080043d0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b098      	sub	sp, #96	; 0x60
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80043d8:	4a84      	ldr	r2, [pc, #528]	; (80045ec <HAL_FDCAN_Init+0x21c>)
 80043da:	f107 030c 	add.w	r3, r7, #12
 80043de:	4611      	mov	r1, r2
 80043e0:	224c      	movs	r2, #76	; 0x4c
 80043e2:	4618      	mov	r0, r3
 80043e4:	f011 fbf8 	bl	8015bd8 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e1ca      	b.n	8004788 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a7e      	ldr	r2, [pc, #504]	; (80045f0 <HAL_FDCAN_Init+0x220>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d106      	bne.n	800440a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004404:	461a      	mov	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d106      	bne.n	8004424 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f7fd f954 	bl	80016cc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	699a      	ldr	r2, [r3, #24]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f022 0210 	bic.w	r2, r2, #16
 8004432:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004434:	f7fd fdaa 	bl	8001f8c <HAL_GetTick>
 8004438:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800443a:	e014      	b.n	8004466 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800443c:	f7fd fda6 	bl	8001f8c <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b0a      	cmp	r3, #10
 8004448:	d90d      	bls.n	8004466 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004450:	f043 0201 	orr.w	r2, r3, #1
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2203      	movs	r2, #3
 800445e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e190      	b.n	8004788 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	f003 0308 	and.w	r3, r3, #8
 8004470:	2b08      	cmp	r3, #8
 8004472:	d0e3      	beq.n	800443c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	699a      	ldr	r2, [r3, #24]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0201 	orr.w	r2, r2, #1
 8004482:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004484:	f7fd fd82 	bl	8001f8c <HAL_GetTick>
 8004488:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800448a:	e014      	b.n	80044b6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800448c:	f7fd fd7e 	bl	8001f8c <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b0a      	cmp	r3, #10
 8004498:	d90d      	bls.n	80044b6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044a0:	f043 0201 	orr.w	r2, r3, #1
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2203      	movs	r2, #3
 80044ae:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e168      	b.n	8004788 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d0e3      	beq.n	800448c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	699a      	ldr	r2, [r3, #24]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 0202 	orr.w	r2, r2, #2
 80044d2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	7c1b      	ldrb	r3, [r3, #16]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d108      	bne.n	80044ee <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	699a      	ldr	r2, [r3, #24]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044ea:	619a      	str	r2, [r3, #24]
 80044ec:	e007      	b.n	80044fe <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	699a      	ldr	r2, [r3, #24]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044fc:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	7c5b      	ldrb	r3, [r3, #17]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d108      	bne.n	8004518 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	699a      	ldr	r2, [r3, #24]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004514:	619a      	str	r2, [r3, #24]
 8004516:	e007      	b.n	8004528 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	699a      	ldr	r2, [r3, #24]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004526:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	7c9b      	ldrb	r3, [r3, #18]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d108      	bne.n	8004542 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	699a      	ldr	r2, [r3, #24]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800453e:	619a      	str	r2, [r3, #24]
 8004540:	e007      	b.n	8004552 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	699a      	ldr	r2, [r3, #24]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004550:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	430a      	orrs	r2, r1
 8004566:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	699a      	ldr	r2, [r3, #24]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004576:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	691a      	ldr	r2, [r3, #16]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f022 0210 	bic.w	r2, r2, #16
 8004586:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d108      	bne.n	80045a2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	699a      	ldr	r2, [r3, #24]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f042 0204 	orr.w	r2, r2, #4
 800459e:	619a      	str	r2, [r3, #24]
 80045a0:	e030      	b.n	8004604 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d02c      	beq.n	8004604 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d020      	beq.n	80045f4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	699a      	ldr	r2, [r3, #24]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80045c0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	691a      	ldr	r2, [r3, #16]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f042 0210 	orr.w	r2, r2, #16
 80045d0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	2b03      	cmp	r3, #3
 80045d8:	d114      	bne.n	8004604 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	699a      	ldr	r2, [r3, #24]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f042 0220 	orr.w	r2, r2, #32
 80045e8:	619a      	str	r2, [r3, #24]
 80045ea:	e00b      	b.n	8004604 <HAL_FDCAN_Init+0x234>
 80045ec:	08016fbc 	.word	0x08016fbc
 80045f0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	699a      	ldr	r2, [r3, #24]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 0220 	orr.w	r2, r2, #32
 8004602:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	3b01      	subs	r3, #1
 800460a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	3b01      	subs	r3, #1
 8004612:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004614:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800461c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	3b01      	subs	r3, #1
 8004626:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800462c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800462e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004638:	d115      	bne.n	8004666 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004644:	3b01      	subs	r3, #1
 8004646:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004648:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464e:	3b01      	subs	r3, #1
 8004650:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004652:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465a:	3b01      	subs	r3, #1
 800465c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004662:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004664:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00a      	beq.n	8004684 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	430a      	orrs	r2, r1
 8004680:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800468c:	4413      	add	r3, r2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d012      	beq.n	80046b8 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800469a:	f023 0107 	bic.w	r1, r3, #7
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80046a8:	4413      	add	r3, r2
 80046aa:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d012      	beq.n	80046e6 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80046c8:	f023 0107 	bic.w	r1, r3, #7
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80046d6:	4413      	add	r3, r2
 80046d8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	430a      	orrs	r2, r1
 80046e2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d013      	beq.n	8004716 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80046f6:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004704:	4413      	add	r3, r2
 8004706:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800470a:	011a      	lsls	r2, r3, #4
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	430a      	orrs	r2, r1
 8004712:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800471a:	2b00      	cmp	r3, #0
 800471c:	d013      	beq.n	8004746 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004726:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004734:	4413      	add	r3, r2
 8004736:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800473a:	021a      	lsls	r2, r3, #8
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a11      	ldr	r2, [pc, #68]	; (8004790 <HAL_FDCAN_Init+0x3c0>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d107      	bne.n	8004760 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	689a      	ldr	r2, [r3, #8]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f022 0203 	bic.w	r2, r2, #3
 800475e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 fddf 	bl	800533c <FDCAN_CalcultateRamBlockAddresses>
 800477e:	4603      	mov	r3, r0
 8004780:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8004784:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8004788:	4618      	mov	r0, r3
 800478a:	3760      	adds	r7, #96	; 0x60
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	4000a000 	.word	0x4000a000

08004794 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8004794:	b480      	push	{r7}
 8004796:	b087      	sub	sp, #28
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80047a4:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80047a6:	7bfb      	ldrb	r3, [r7, #15]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d002      	beq.n	80047b2 <HAL_FDCAN_ConfigFilter+0x1e>
 80047ac:	7bfb      	ldrb	r3, [r7, #15]
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d157      	bne.n	8004862 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d12b      	bne.n	8004812 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	2b07      	cmp	r3, #7
 80047c0:	d10d      	bne.n	80047de <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	69db      	ldr	r3, [r3, #28]
 80047cc:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 80047ce:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80047d4:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 80047d6:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 80047da:	617b      	str	r3, [r7, #20]
 80047dc:	e00e      	b.n	80047fc <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80047ea:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 80047f2:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80047f8:	4313      	orrs	r3, r2
 80047fa:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	4413      	add	r3, r2
 8004808:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	601a      	str	r2, [r3, #0]
 8004810:	e025      	b.n	800485e <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	075a      	lsls	r2, r3, #29
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	4313      	orrs	r3, r2
 800481e:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	2b07      	cmp	r3, #7
 8004826:	d103      	bne.n	8004830 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	613b      	str	r3, [r7, #16]
 800482e:	e006      	b.n	800483e <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	079a      	lsls	r2, r3, #30
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	4313      	orrs	r3, r2
 800483c:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	4413      	add	r3, r2
 800484a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	3304      	adds	r3, #4
 8004856:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800485e:	2300      	movs	r3, #0
 8004860:	e008      	b.n	8004874 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004868:	f043 0202 	orr.w	r2, r3, #2
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
  }
}
 8004874:	4618      	mov	r0, r3
 8004876:	371c      	adds	r7, #28
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
 800488c:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b01      	cmp	r3, #1
 8004898:	d110      	bne.n	80048bc <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80048a2:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 80048a8:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80048b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 80048b8:	2300      	movs	r3, #0
 80048ba:	e008      	b.n	80048ce <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048c2:	f043 0204 	orr.w	r2, r3, #4
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
  }
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3714      	adds	r7, #20
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 80048da:	b480      	push	{r7}
 80048dc:	b083      	sub	sp, #12
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d109      	bne.n	8004902 <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68da      	ldr	r2, [r3, #12]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80048fc:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 80048fe:	2300      	movs	r3, #0
 8004900:	e008      	b.n	8004914 <HAL_FDCAN_EnableTxDelayCompensation+0x3a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004908:	f043 0204 	orr.w	r2, r3, #4
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
  }
}
 8004914:	4618      	mov	r0, r3
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b01      	cmp	r3, #1
 8004932:	d111      	bne.n	8004958 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2202      	movs	r2, #2
 8004938:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	699a      	ldr	r2, [r3, #24]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f022 0201 	bic.w	r2, r2, #1
 800494a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8004954:	2300      	movs	r3, #0
 8004956:	e008      	b.n	800496a <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800495e:	f043 0204 	orr.w	r2, r3, #4
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
  }
}
 800496a:	4618      	mov	r0, r3
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
	...

08004978 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8004978:	b480      	push	{r7}
 800497a:	b08b      	sub	sp, #44	; 0x2c
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
 8004984:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8004986:	2300      	movs	r3, #0
 8004988:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004990:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8004992:	7efb      	ldrb	r3, [r7, #27]
 8004994:	2b02      	cmp	r3, #2
 8004996:	f040 813b 	bne.w	8004c10 <HAL_FDCAN_GetRxMessage+0x298>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	2b40      	cmp	r3, #64	; 0x40
 800499e:	d145      	bne.n	8004a2c <HAL_FDCAN_GetRxMessage+0xb4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80049a8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d109      	bne.n	80049c4 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049b6:	f043 0220 	orr.w	r2, r3, #32
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e12e      	b.n	8004c22 <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80049cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d109      	bne.n	80049e8 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e11c      	b.n	8004c22 <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80049f0:	0e1b      	lsrs	r3, r3, #24
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d103      	bne.n	8004a02 <HAL_FDCAN_GetRxMessage+0x8a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004a0a:	0a1b      	lsrs	r3, r3, #8
 8004a0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a10:	69fa      	ldr	r2, [r7, #28]
 8004a12:	4413      	add	r3, r2
 8004a14:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a1e:	69f9      	ldr	r1, [r7, #28]
 8004a20:	fb01 f303 	mul.w	r3, r1, r3
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4413      	add	r3, r2
 8004a28:	627b      	str	r3, [r7, #36]	; 0x24
 8004a2a:	e061      	b.n	8004af0 <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	2b41      	cmp	r3, #65	; 0x41
 8004a30:	d145      	bne.n	8004abe <HAL_FDCAN_GetRxMessage+0x146>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a3a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d109      	bne.n	8004a56 <HAL_FDCAN_GetRxMessage+0xde>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a48:	f043 0220 	orr.w	r2, r3, #32
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e0e5      	b.n	8004c22 <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004a5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d109      	bne.n	8004a7a <HAL_FDCAN_GetRxMessage+0x102>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a6c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e0d3      	b.n	8004c22 <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004a82:	0e1b      	lsrs	r3, r3, #24
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d103      	bne.n	8004a94 <HAL_FDCAN_GetRxMessage+0x11c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004a9c:	0a1b      	lsrs	r3, r3, #8
 8004a9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004aa2:	69fa      	ldr	r2, [r7, #28]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ab0:	69f9      	ldr	r1, [r7, #28]
 8004ab2:	fb01 f303 	mul.w	r3, r1, r3
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4413      	add	r3, r2
 8004aba:	627b      	str	r3, [r7, #36]	; 0x24
 8004abc:	e018      	b.n	8004af0 <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d309      	bcc.n	8004adc <HAL_FDCAN_GetRxMessage+0x164>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ace:	f043 0220 	orr.w	r2, r3, #32
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e0a2      	b.n	8004c22 <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae4:	68b9      	ldr	r1, [r7, #8]
 8004ae6:	fb01 f303 	mul.w	r3, r1, r3
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4413      	add	r3, r2
 8004aee:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d107      	bne.n	8004b14 <HAL_FDCAN_GetRxMessage+0x19c>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	0c9b      	lsrs	r3, r3, #18
 8004b0a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	601a      	str	r2, [r3, #0]
 8004b12:	e005      	b.n	8004b20 <HAL_FDCAN_GetRxMessage+0x1a8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3a:	3304      	adds	r3, #4
 8004b3c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8004b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8004b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	0e1b      	lsrs	r3, r3, #24
 8004b72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	0fda      	lsrs	r2, r3, #31
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	3304      	adds	r3, #4
 8004b88:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8004b8e:	2300      	movs	r3, #0
 8004b90:	623b      	str	r3, [r7, #32]
 8004b92:	e00a      	b.n	8004baa <HAL_FDCAN_GetRxMessage+0x232>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8004b94:	697a      	ldr	r2, [r7, #20]
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	441a      	add	r2, r3
 8004b9a:	6839      	ldr	r1, [r7, #0]
 8004b9c:	6a3b      	ldr	r3, [r7, #32]
 8004b9e:	440b      	add	r3, r1
 8004ba0:	7812      	ldrb	r2, [r2, #0]
 8004ba2:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8004ba4:	6a3b      	ldr	r3, [r7, #32]
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	623b      	str	r3, [r7, #32]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	0c1b      	lsrs	r3, r3, #16
 8004bb0:	4a1f      	ldr	r2, [pc, #124]	; (8004c30 <HAL_FDCAN_GetRxMessage+0x2b8>)
 8004bb2:	5cd3      	ldrb	r3, [r2, r3]
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	6a3b      	ldr	r3, [r7, #32]
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d3eb      	bcc.n	8004b94 <HAL_FDCAN_GetRxMessage+0x21c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	2b40      	cmp	r3, #64	; 0x40
 8004bc0:	d105      	bne.n	8004bce <HAL_FDCAN_GetRxMessage+0x256>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	69fa      	ldr	r2, [r7, #28]
 8004bc8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8004bcc:	e01e      	b.n	8004c0c <HAL_FDCAN_GetRxMessage+0x294>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	2b41      	cmp	r3, #65	; 0x41
 8004bd2:	d105      	bne.n	8004be0 <HAL_FDCAN_GetRxMessage+0x268>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	69fa      	ldr	r2, [r7, #28]
 8004bda:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8004bde:	e015      	b.n	8004c0c <HAL_FDCAN_GetRxMessage+0x294>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	2b1f      	cmp	r3, #31
 8004be4:	d808      	bhi.n	8004bf8 <HAL_FDCAN_GetRxMessage+0x280>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2101      	movs	r1, #1
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	fa01 f202 	lsl.w	r2, r1, r2
 8004bf2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8004bf6:	e009      	b.n	8004c0c <HAL_FDCAN_GetRxMessage+0x294>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	f003 021f 	and.w	r2, r3, #31
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2101      	movs	r1, #1
 8004c04:	fa01 f202 	lsl.w	r2, r1, r2
 8004c08:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	e008      	b.n	8004c22 <HAL_FDCAN_GetRxMessage+0x2aa>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c16:	f043 0208 	orr.w	r2, r3, #8
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
  }
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	372c      	adds	r7, #44	; 0x2c
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	080170b8 	.word	0x080170b8

08004c34 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b087      	sub	sp, #28
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004c46:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004c48:	7dfb      	ldrb	r3, [r7, #23]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d002      	beq.n	8004c54 <HAL_FDCAN_ActivateNotification+0x20>
 8004c4e:	7dfb      	ldrb	r3, [r7, #23]
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d155      	bne.n	8004d00 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d108      	bne.n	8004c74 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f042 0201 	orr.w	r2, r2, #1
 8004c70:	65da      	str	r2, [r3, #92]	; 0x5c
 8004c72:	e014      	b.n	8004c9e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	68ba      	ldr	r2, [r7, #8]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d108      	bne.n	8004c96 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f042 0202 	orr.w	r2, r2, #2
 8004c92:	65da      	str	r2, [r3, #92]	; 0x5c
 8004c94:	e003      	b.n	8004c9e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2203      	movs	r2, #3
 8004c9c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d009      	beq.n	8004cbc <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d009      	beq.n	8004cda <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	4b0f      	ldr	r3, [pc, #60]	; (8004d20 <HAL_FDCAN_ActivateNotification+0xec>)
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	6812      	ldr	r2, [r2, #0]
 8004cea:	430b      	orrs	r3, r1
 8004cec:	6553      	str	r3, [r2, #84]	; 0x54
 8004cee:	4b0d      	ldr	r3, [pc, #52]	; (8004d24 <HAL_FDCAN_ActivateNotification+0xf0>)
 8004cf0:	695a      	ldr	r2, [r3, #20]
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	0f9b      	lsrs	r3, r3, #30
 8004cf6:	490b      	ldr	r1, [pc, #44]	; (8004d24 <HAL_FDCAN_ActivateNotification+0xf0>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	e008      	b.n	8004d12 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d06:	f043 0202 	orr.w	r2, r3, #2
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
  }
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	371c      	adds	r7, #28
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	3fcfffff 	.word	0x3fcfffff
 8004d24:	4000a800 	.word	0x4000a800

08004d28 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b092      	sub	sp, #72	; 0x48
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8004d30:	4b90      	ldr	r3, [pc, #576]	; (8004f74 <HAL_FDCAN_IRQHandler+0x24c>)
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	079b      	lsls	r3, r3, #30
 8004d36:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8004d38:	4b8e      	ldr	r3, [pc, #568]	; (8004f74 <HAL_FDCAN_IRQHandler+0x24c>)
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	079b      	lsls	r3, r3, #30
 8004d3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d40:	4013      	ands	r3, r2
 8004d42:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d4a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004d4e:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d58:	4013      	ands	r3, r2
 8004d5a:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d62:	f003 030f 	and.w	r3, r3, #15
 8004d66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d70:	4013      	ands	r3, r2
 8004d72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d7e:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d88:	4013      	ands	r3, r2
 8004d8a:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d92:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8004d96:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004da0:	4013      	ands	r3, r2
 8004da2:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004daa:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8004dae:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004db8:	4013      	ands	r3, r2
 8004dba:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d011      	beq.n	8004dee <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00a      	beq.n	8004dee <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004de0:	651a      	str	r2, [r3, #80]	; 0x50
 8004de2:	4b64      	ldr	r3, [pc, #400]	; (8004f74 <HAL_FDCAN_IRQHandler+0x24c>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 fa5a 	bl	80052a2 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d01e      	beq.n	8004e3a <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d017      	beq.n	8004e3a <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004e12:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004e1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e1e:	4013      	ands	r3, r2
 8004e20:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e2a:	651a      	str	r2, [r3, #80]	; 0x50
 8004e2c:	4b51      	ldr	r3, [pc, #324]	; (8004f74 <HAL_FDCAN_IRQHandler+0x24c>)
 8004e2e:	2200      	movs	r2, #0
 8004e30:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004e32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 fa0b 	bl	8005250 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8004e3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d00d      	beq.n	8004e5c <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e46:	4b4c      	ldr	r3, [pc, #304]	; (8004f78 <HAL_FDCAN_IRQHandler+0x250>)
 8004e48:	400b      	ands	r3, r1
 8004e4a:	6513      	str	r3, [r2, #80]	; 0x50
 8004e4c:	4a49      	ldr	r2, [pc, #292]	; (8004f74 <HAL_FDCAN_IRQHandler+0x24c>)
 8004e4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e50:	0f9b      	lsrs	r3, r3, #30
 8004e52:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8004e54:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f9c4 	bl	80051e4 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004e5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00d      	beq.n	8004e7e <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e68:	4b43      	ldr	r3, [pc, #268]	; (8004f78 <HAL_FDCAN_IRQHandler+0x250>)
 8004e6a:	400b      	ands	r3, r1
 8004e6c:	6513      	str	r3, [r2, #80]	; 0x50
 8004e6e:	4a41      	ldr	r2, [pc, #260]	; (8004f74 <HAL_FDCAN_IRQHandler+0x24c>)
 8004e70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e72:	0f9b      	lsrs	r3, r3, #30
 8004e74:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004e76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 f9be 	bl	80051fa <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00d      	beq.n	8004ea0 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e8a:	4b3b      	ldr	r3, [pc, #236]	; (8004f78 <HAL_FDCAN_IRQHandler+0x250>)
 8004e8c:	400b      	ands	r3, r1
 8004e8e:	6513      	str	r3, [r2, #80]	; 0x50
 8004e90:	4a38      	ldr	r2, [pc, #224]	; (8004f74 <HAL_FDCAN_IRQHandler+0x24c>)
 8004e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e94:	0f9b      	lsrs	r3, r3, #30
 8004e96:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004e98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7fb fc36 	bl	800070c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00d      	beq.n	8004ec2 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004eac:	4b32      	ldr	r3, [pc, #200]	; (8004f78 <HAL_FDCAN_IRQHandler+0x250>)
 8004eae:	400b      	ands	r3, r1
 8004eb0:	6513      	str	r3, [r2, #80]	; 0x50
 8004eb2:	4a30      	ldr	r2, [pc, #192]	; (8004f74 <HAL_FDCAN_IRQHandler+0x24c>)
 8004eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb6:	0f9b      	lsrs	r3, r3, #30
 8004eb8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004eba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 f9a7 	bl	8005210 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d011      	beq.n	8004ef4 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ed6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00a      	beq.n	8004ef4 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ee6:	651a      	str	r2, [r3, #80]	; 0x50
 8004ee8:	4b22      	ldr	r3, [pc, #136]	; (8004f74 <HAL_FDCAN_IRQHandler+0x24c>)
 8004eea:	2200      	movs	r2, #0
 8004eec:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 f999 	bl	8005226 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004efa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d01e      	beq.n	8004f40 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d017      	beq.n	8004f40 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004f18:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f24:	4013      	ands	r3, r2
 8004f26:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f30:	651a      	str	r2, [r3, #80]	; 0x50
 8004f32:	4b10      	ldr	r3, [pc, #64]	; (8004f74 <HAL_FDCAN_IRQHandler+0x24c>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004f38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f97d 	bl	800523a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d016      	beq.n	8004f7c <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00f      	beq.n	8004f7c <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004f64:	651a      	str	r2, [r3, #80]	; 0x50
 8004f66:	4b03      	ldr	r3, [pc, #12]	; (8004f74 <HAL_FDCAN_IRQHandler+0x24c>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 f97a 	bl	8005266 <HAL_FDCAN_RxBufferNewMessageCallback>
 8004f72:	e003      	b.n	8004f7c <HAL_FDCAN_IRQHandler+0x254>
 8004f74:	4000a800 	.word	0x4000a800
 8004f78:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d011      	beq.n	8004fae <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00a      	beq.n	8004fae <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004fa0:	651a      	str	r2, [r3, #80]	; 0x50
 8004fa2:	4b8d      	ldr	r3, [pc, #564]	; (80051d8 <HAL_FDCAN_IRQHandler+0x4b0>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 f966 	bl	800527a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d011      	beq.n	8004fe0 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00a      	beq.n	8004fe0 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004fd2:	651a      	str	r2, [r3, #80]	; 0x50
 8004fd4:	4b80      	ldr	r3, [pc, #512]	; (80051d8 <HAL_FDCAN_IRQHandler+0x4b0>)
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f957 	bl	800528e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d016      	beq.n	800501c <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00f      	beq.n	800501c <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005004:	651a      	str	r2, [r3, #80]	; 0x50
 8005006:	4b74      	ldr	r3, [pc, #464]	; (80051d8 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005008:	2200      	movs	r2, #0
 800500a:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005012:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800501c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00d      	beq.n	800503e <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005028:	4b6c      	ldr	r3, [pc, #432]	; (80051dc <HAL_FDCAN_IRQHandler+0x4b4>)
 800502a:	400b      	ands	r3, r1
 800502c:	6513      	str	r3, [r2, #80]	; 0x50
 800502e:	4a6a      	ldr	r2, [pc, #424]	; (80051d8 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005032:	0f9b      	lsrs	r3, r3, #30
 8005034:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005036:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 f946 	bl	80052ca <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800503e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005040:	2b00      	cmp	r3, #0
 8005042:	d011      	beq.n	8005068 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800504a:	4b64      	ldr	r3, [pc, #400]	; (80051dc <HAL_FDCAN_IRQHandler+0x4b4>)
 800504c:	400b      	ands	r3, r1
 800504e:	6513      	str	r3, [r2, #80]	; 0x50
 8005050:	4a61      	ldr	r2, [pc, #388]	; (80051d8 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005054:	0f9b      	lsrs	r3, r3, #30
 8005056:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800505e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005060:	431a      	orrs	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a5c      	ldr	r2, [pc, #368]	; (80051e0 <HAL_FDCAN_IRQHandler+0x4b8>)
 800506e:	4293      	cmp	r3, r2
 8005070:	f040 80a6 	bne.w	80051c0 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f003 0303 	and.w	r3, r3, #3
 800507e:	2b00      	cmp	r3, #0
 8005080:	f000 809e 	beq.w	80051c0 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	f003 030f 	and.w	r3, r3, #15
 800508e:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005098:	4013      	ands	r3, r2
 800509a:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80050a6:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ae:	6a3a      	ldr	r2, [r7, #32]
 80050b0:	4013      	ands	r3, r2
 80050b2:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80050be:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c6:	69fa      	ldr	r2, [r7, #28]
 80050c8:	4013      	ands	r3, r2
 80050ca:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 80050d6:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050de:	69ba      	ldr	r2, [r7, #24]
 80050e0:	4013      	ands	r3, r2
 80050e2:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 80050ee:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	4013      	ands	r3, r2
 80050fa:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80050fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d007      	beq.n	8005112 <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005108:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 800510a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 f8e7 	bl	80052e0 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8005112:	6a3b      	ldr	r3, [r7, #32]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d007      	beq.n	8005128 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	6a3a      	ldr	r2, [r7, #32]
 800511e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8005120:	6a39      	ldr	r1, [r7, #32]
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f8e7 	bl	80052f6 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005132:	2b00      	cmp	r3, #0
 8005134:	d01b      	beq.n	800516e <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	6a1b      	ldr	r3, [r3, #32]
 800513c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005140:	2b00      	cmp	r3, #0
 8005142:	d014      	beq.n	800516e <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514a:	0c1b      	lsrs	r3, r3, #16
 800514c:	b29b      	uxth	r3, r3
 800514e:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005156:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800515a:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	2240      	movs	r2, #64	; 0x40
 8005162:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	6939      	ldr	r1, [r7, #16]
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 f8cf 	bl	800530c <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d007      	beq.n	8005184 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	69fa      	ldr	r2, [r7, #28]
 800517a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 800517c:	69f9      	ldr	r1, [r7, #28]
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f8d0 	bl	8005324 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00b      	beq.n	80051a2 <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	69ba      	ldr	r2, [r7, #24]
 8005190:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	431a      	orrs	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00b      	beq.n	80051c0 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	431a      	orrs	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d002      	beq.n	80051d0 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 f873 	bl	80052b6 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80051d0:	bf00      	nop
 80051d2:	3748      	adds	r7, #72	; 0x48
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	4000a800 	.word	0x4000a800
 80051dc:	3fcfffff 	.word	0x3fcfffff
 80051e0:	4000a000 	.word	0x4000a000

080051e4 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80051ee:	bf00      	nop
 80051f0:	370c      	adds	r7, #12
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b083      	sub	sp, #12
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
 8005202:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800521a:	bf00      	nop
 800521c:	370c      	adds	r7, #12
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005226:	b480      	push	{r7}
 8005228:	b083      	sub	sp, #12
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800522e:	bf00      	nop
 8005230:	370c      	adds	r7, #12
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr

0800523a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800523a:	b480      	push	{r7}
 800523c:	b083      	sub	sp, #12
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
 8005242:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800525a:	bf00      	nop
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005266:	b480      	push	{r7}
 8005268:	b083      	sub	sp, #12
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800526e:	bf00      	nop
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr

0800527a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800527a:	b480      	push	{r7}
 800527c:	b083      	sub	sp, #12
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005282:	bf00      	nop
 8005284:	370c      	adds	r7, #12
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800528e:	b480      	push	{r7}
 8005290:	b083      	sub	sp, #12
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005296:	bf00      	nop
 8005298:	370c      	adds	r7, #12
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b083      	sub	sp, #12
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80052aa:	bf00      	nop
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80052b6:	b480      	push	{r7}
 80052b8:	b083      	sub	sp, #12
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80052be:	bf00      	nop
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr

080052ca <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b083      	sub	sp, #12
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
 80052d2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80052ea:	bf00      	nop
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr

080052f6 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80052f6:	b480      	push	{r7}
 80052f8:	b083      	sub	sp, #12
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
 80052fe:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8005318:	bf00      	nop
 800531a:	3714      	adds	r7, #20
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800532e:	bf00      	nop
 8005330:	370c      	adds	r7, #12
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
	...

0800533c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005348:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005352:	4ba7      	ldr	r3, [pc, #668]	; (80055f0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005354:	4013      	ands	r3, r2
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	0091      	lsls	r1, r2, #2
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	6812      	ldr	r2, [r2, #0]
 800535e:	430b      	orrs	r3, r1
 8005360:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800536c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005374:	041a      	lsls	r2, r3, #16
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	430a      	orrs	r2, r1
 800537c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	4413      	add	r3, r2
 8005388:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005392:	4b97      	ldr	r3, [pc, #604]	; (80055f0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005394:	4013      	ands	r3, r2
 8005396:	68ba      	ldr	r2, [r7, #8]
 8005398:	0091      	lsls	r1, r2, #2
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	6812      	ldr	r2, [r2, #0]
 800539e:	430b      	orrs	r3, r1
 80053a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ac:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b4:	041a      	lsls	r2, r3, #16
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	430a      	orrs	r2, r1
 80053bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c4:	005b      	lsls	r3, r3, #1
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	4413      	add	r3, r2
 80053ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80053d4:	4b86      	ldr	r3, [pc, #536]	; (80055f0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80053d6:	4013      	ands	r3, r2
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	0091      	lsls	r1, r2, #2
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	6812      	ldr	r2, [r2, #0]
 80053e0:	430b      	orrs	r3, r1
 80053e2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80053ee:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f6:	041a      	lsls	r2, r3, #16
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	430a      	orrs	r2, r1
 80053fe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800540a:	fb02 f303 	mul.w	r3, r2, r3
 800540e:	68ba      	ldr	r2, [r7, #8]
 8005410:	4413      	add	r3, r2
 8005412:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800541c:	4b74      	ldr	r3, [pc, #464]	; (80055f0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800541e:	4013      	ands	r3, r2
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	0091      	lsls	r1, r2, #2
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	6812      	ldr	r2, [r2, #0]
 8005428:	430b      	orrs	r3, r1
 800542a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005436:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800543e:	041a      	lsls	r2, r3, #16
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	430a      	orrs	r2, r1
 8005446:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005452:	fb02 f303 	mul.w	r3, r2, r3
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	4413      	add	r3, r2
 800545a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005464:	4b62      	ldr	r3, [pc, #392]	; (80055f0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005466:	4013      	ands	r3, r2
 8005468:	68ba      	ldr	r2, [r7, #8]
 800546a:	0091      	lsls	r1, r2, #2
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	6812      	ldr	r2, [r2, #0]
 8005470:	430b      	orrs	r3, r1
 8005472:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800547e:	fb02 f303 	mul.w	r3, r2, r3
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	4413      	add	r3, r2
 8005486:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005490:	4b57      	ldr	r3, [pc, #348]	; (80055f0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005492:	4013      	ands	r3, r2
 8005494:	68ba      	ldr	r2, [r7, #8]
 8005496:	0091      	lsls	r1, r2, #2
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	6812      	ldr	r2, [r2, #0]
 800549c:	430b      	orrs	r3, r1
 800549e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054aa:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054b2:	041a      	lsls	r2, r3, #16
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	430a      	orrs	r2, r1
 80054ba:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054c2:	005b      	lsls	r3, r3, #1
 80054c4:	68ba      	ldr	r2, [r7, #8]
 80054c6:	4413      	add	r3, r2
 80054c8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80054d2:	4b47      	ldr	r3, [pc, #284]	; (80055f0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80054d4:	4013      	ands	r3, r2
 80054d6:	68ba      	ldr	r2, [r7, #8]
 80054d8:	0091      	lsls	r1, r2, #2
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	6812      	ldr	r2, [r2, #0]
 80054de:	430b      	orrs	r3, r1
 80054e0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80054ec:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054f4:	041a      	lsls	r2, r3, #16
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	430a      	orrs	r2, r1
 80054fc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005508:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005510:	061a      	lsls	r2, r3, #24
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	430a      	orrs	r2, r1
 8005518:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005520:	4b34      	ldr	r3, [pc, #208]	; (80055f4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8005522:	4413      	add	r3, r2
 8005524:	009a      	lsls	r2, r3, #2
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	441a      	add	r2, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005542:	00db      	lsls	r3, r3, #3
 8005544:	441a      	add	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005552:	6879      	ldr	r1, [r7, #4]
 8005554:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8005556:	fb01 f303 	mul.w	r3, r1, r3
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	441a      	add	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800556a:	6879      	ldr	r1, [r7, #4]
 800556c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800556e:	fb01 f303 	mul.w	r3, r1, r3
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	441a      	add	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005582:	6879      	ldr	r1, [r7, #4]
 8005584:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8005586:	fb01 f303 	mul.w	r3, r1, r3
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	441a      	add	r2, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800559e:	00db      	lsls	r3, r3, #3
 80055a0:	441a      	add	r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055b2:	6879      	ldr	r1, [r7, #4]
 80055b4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80055b6:	fb01 f303 	mul.w	r3, r1, r3
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	441a      	add	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ce:	6879      	ldr	r1, [r7, #4]
 80055d0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80055d2:	fb01 f303 	mul.w	r3, r1, r3
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	441a      	add	r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055e6:	4a04      	ldr	r2, [pc, #16]	; (80055f8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d915      	bls.n	8005618 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80055ec:	e006      	b.n	80055fc <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80055ee:	bf00      	nop
 80055f0:	ffff0003 	.word	0xffff0003
 80055f4:	10002b00 	.word	0x10002b00
 80055f8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005602:	f043 0220 	orr.w	r2, r3, #32
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2203      	movs	r2, #3
 8005610:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e010      	b.n	800563a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800561c:	60fb      	str	r3, [r7, #12]
 800561e:	e005      	b.n	800562c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	3304      	adds	r3, #4
 800562a:	60fb      	str	r3, [r7, #12]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	429a      	cmp	r2, r3
 8005636:	d3f3      	bcc.n	8005620 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3714      	adds	r7, #20
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop

08005648 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005648:	b480      	push	{r7}
 800564a:	b089      	sub	sp, #36	; 0x24
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005652:	2300      	movs	r3, #0
 8005654:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005656:	4b89      	ldr	r3, [pc, #548]	; (800587c <HAL_GPIO_Init+0x234>)
 8005658:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800565a:	e194      	b.n	8005986 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	2101      	movs	r1, #1
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	fa01 f303 	lsl.w	r3, r1, r3
 8005668:	4013      	ands	r3, r2
 800566a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	2b00      	cmp	r3, #0
 8005670:	f000 8186 	beq.w	8005980 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d00b      	beq.n	8005694 <HAL_GPIO_Init+0x4c>
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	2b02      	cmp	r3, #2
 8005682:	d007      	beq.n	8005694 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005688:	2b11      	cmp	r3, #17
 800568a:	d003      	beq.n	8005694 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	2b12      	cmp	r3, #18
 8005692:	d130      	bne.n	80056f6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	005b      	lsls	r3, r3, #1
 800569e:	2203      	movs	r2, #3
 80056a0:	fa02 f303 	lsl.w	r3, r2, r3
 80056a4:	43db      	mvns	r3, r3
 80056a6:	69ba      	ldr	r2, [r7, #24]
 80056a8:	4013      	ands	r3, r2
 80056aa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	68da      	ldr	r2, [r3, #12]
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	005b      	lsls	r3, r3, #1
 80056b4:	fa02 f303 	lsl.w	r3, r2, r3
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	69ba      	ldr	r2, [r7, #24]
 80056c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80056ca:	2201      	movs	r2, #1
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	fa02 f303 	lsl.w	r3, r2, r3
 80056d2:	43db      	mvns	r3, r3
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	4013      	ands	r3, r2
 80056d8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	091b      	lsrs	r3, r3, #4
 80056e0:	f003 0201 	and.w	r2, r3, #1
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ea:	69ba      	ldr	r2, [r7, #24]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	69ba      	ldr	r2, [r7, #24]
 80056f4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	005b      	lsls	r3, r3, #1
 8005700:	2203      	movs	r2, #3
 8005702:	fa02 f303 	lsl.w	r3, r2, r3
 8005706:	43db      	mvns	r3, r3
 8005708:	69ba      	ldr	r2, [r7, #24]
 800570a:	4013      	ands	r3, r2
 800570c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	689a      	ldr	r2, [r3, #8]
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	005b      	lsls	r3, r3, #1
 8005716:	fa02 f303 	lsl.w	r3, r2, r3
 800571a:	69ba      	ldr	r2, [r7, #24]
 800571c:	4313      	orrs	r3, r2
 800571e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	69ba      	ldr	r2, [r7, #24]
 8005724:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	2b02      	cmp	r3, #2
 800572c:	d003      	beq.n	8005736 <HAL_GPIO_Init+0xee>
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	2b12      	cmp	r3, #18
 8005734:	d123      	bne.n	800577e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	08da      	lsrs	r2, r3, #3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	3208      	adds	r2, #8
 800573e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005742:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	f003 0307 	and.w	r3, r3, #7
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	220f      	movs	r2, #15
 800574e:	fa02 f303 	lsl.w	r3, r2, r3
 8005752:	43db      	mvns	r3, r3
 8005754:	69ba      	ldr	r2, [r7, #24]
 8005756:	4013      	ands	r3, r2
 8005758:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	691a      	ldr	r2, [r3, #16]
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	f003 0307 	and.w	r3, r3, #7
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	fa02 f303 	lsl.w	r3, r2, r3
 800576a:	69ba      	ldr	r2, [r7, #24]
 800576c:	4313      	orrs	r3, r2
 800576e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	08da      	lsrs	r2, r3, #3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	3208      	adds	r2, #8
 8005778:	69b9      	ldr	r1, [r7, #24]
 800577a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	005b      	lsls	r3, r3, #1
 8005788:	2203      	movs	r2, #3
 800578a:	fa02 f303 	lsl.w	r3, r2, r3
 800578e:	43db      	mvns	r3, r3
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	4013      	ands	r3, r2
 8005794:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	f003 0203 	and.w	r2, r3, #3
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	005b      	lsls	r3, r3, #1
 80057a2:	fa02 f303 	lsl.w	r3, r2, r3
 80057a6:	69ba      	ldr	r2, [r7, #24]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	69ba      	ldr	r2, [r7, #24]
 80057b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f000 80e0 	beq.w	8005980 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057c0:	4b2f      	ldr	r3, [pc, #188]	; (8005880 <HAL_GPIO_Init+0x238>)
 80057c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80057c6:	4a2e      	ldr	r2, [pc, #184]	; (8005880 <HAL_GPIO_Init+0x238>)
 80057c8:	f043 0302 	orr.w	r3, r3, #2
 80057cc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80057d0:	4b2b      	ldr	r3, [pc, #172]	; (8005880 <HAL_GPIO_Init+0x238>)
 80057d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80057d6:	f003 0302 	and.w	r3, r3, #2
 80057da:	60fb      	str	r3, [r7, #12]
 80057dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80057de:	4a29      	ldr	r2, [pc, #164]	; (8005884 <HAL_GPIO_Init+0x23c>)
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	089b      	lsrs	r3, r3, #2
 80057e4:	3302      	adds	r3, #2
 80057e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	f003 0303 	and.w	r3, r3, #3
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	220f      	movs	r2, #15
 80057f6:	fa02 f303 	lsl.w	r3, r2, r3
 80057fa:	43db      	mvns	r3, r3
 80057fc:	69ba      	ldr	r2, [r7, #24]
 80057fe:	4013      	ands	r3, r2
 8005800:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a20      	ldr	r2, [pc, #128]	; (8005888 <HAL_GPIO_Init+0x240>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d052      	beq.n	80058b0 <HAL_GPIO_Init+0x268>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a1f      	ldr	r2, [pc, #124]	; (800588c <HAL_GPIO_Init+0x244>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d031      	beq.n	8005876 <HAL_GPIO_Init+0x22e>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a1e      	ldr	r2, [pc, #120]	; (8005890 <HAL_GPIO_Init+0x248>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d02b      	beq.n	8005872 <HAL_GPIO_Init+0x22a>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a1d      	ldr	r2, [pc, #116]	; (8005894 <HAL_GPIO_Init+0x24c>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d025      	beq.n	800586e <HAL_GPIO_Init+0x226>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a1c      	ldr	r2, [pc, #112]	; (8005898 <HAL_GPIO_Init+0x250>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d01f      	beq.n	800586a <HAL_GPIO_Init+0x222>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a1b      	ldr	r2, [pc, #108]	; (800589c <HAL_GPIO_Init+0x254>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d019      	beq.n	8005866 <HAL_GPIO_Init+0x21e>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a1a      	ldr	r2, [pc, #104]	; (80058a0 <HAL_GPIO_Init+0x258>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d013      	beq.n	8005862 <HAL_GPIO_Init+0x21a>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a19      	ldr	r2, [pc, #100]	; (80058a4 <HAL_GPIO_Init+0x25c>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d00d      	beq.n	800585e <HAL_GPIO_Init+0x216>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a18      	ldr	r2, [pc, #96]	; (80058a8 <HAL_GPIO_Init+0x260>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d007      	beq.n	800585a <HAL_GPIO_Init+0x212>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a17      	ldr	r2, [pc, #92]	; (80058ac <HAL_GPIO_Init+0x264>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d101      	bne.n	8005856 <HAL_GPIO_Init+0x20e>
 8005852:	2309      	movs	r3, #9
 8005854:	e02d      	b.n	80058b2 <HAL_GPIO_Init+0x26a>
 8005856:	230a      	movs	r3, #10
 8005858:	e02b      	b.n	80058b2 <HAL_GPIO_Init+0x26a>
 800585a:	2308      	movs	r3, #8
 800585c:	e029      	b.n	80058b2 <HAL_GPIO_Init+0x26a>
 800585e:	2307      	movs	r3, #7
 8005860:	e027      	b.n	80058b2 <HAL_GPIO_Init+0x26a>
 8005862:	2306      	movs	r3, #6
 8005864:	e025      	b.n	80058b2 <HAL_GPIO_Init+0x26a>
 8005866:	2305      	movs	r3, #5
 8005868:	e023      	b.n	80058b2 <HAL_GPIO_Init+0x26a>
 800586a:	2304      	movs	r3, #4
 800586c:	e021      	b.n	80058b2 <HAL_GPIO_Init+0x26a>
 800586e:	2303      	movs	r3, #3
 8005870:	e01f      	b.n	80058b2 <HAL_GPIO_Init+0x26a>
 8005872:	2302      	movs	r3, #2
 8005874:	e01d      	b.n	80058b2 <HAL_GPIO_Init+0x26a>
 8005876:	2301      	movs	r3, #1
 8005878:	e01b      	b.n	80058b2 <HAL_GPIO_Init+0x26a>
 800587a:	bf00      	nop
 800587c:	58000080 	.word	0x58000080
 8005880:	58024400 	.word	0x58024400
 8005884:	58000400 	.word	0x58000400
 8005888:	58020000 	.word	0x58020000
 800588c:	58020400 	.word	0x58020400
 8005890:	58020800 	.word	0x58020800
 8005894:	58020c00 	.word	0x58020c00
 8005898:	58021000 	.word	0x58021000
 800589c:	58021400 	.word	0x58021400
 80058a0:	58021800 	.word	0x58021800
 80058a4:	58021c00 	.word	0x58021c00
 80058a8:	58022000 	.word	0x58022000
 80058ac:	58022400 	.word	0x58022400
 80058b0:	2300      	movs	r3, #0
 80058b2:	69fa      	ldr	r2, [r7, #28]
 80058b4:	f002 0203 	and.w	r2, r2, #3
 80058b8:	0092      	lsls	r2, r2, #2
 80058ba:	4093      	lsls	r3, r2
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	4313      	orrs	r3, r2
 80058c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80058c2:	4938      	ldr	r1, [pc, #224]	; (80059a4 <HAL_GPIO_Init+0x35c>)
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	089b      	lsrs	r3, r3, #2
 80058c8:	3302      	adds	r3, #2
 80058ca:	69ba      	ldr	r2, [r7, #24]
 80058cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	43db      	mvns	r3, r3
 80058da:	69ba      	ldr	r2, [r7, #24]
 80058dc:	4013      	ands	r3, r2
 80058de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d003      	beq.n	80058f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80058ec:	69ba      	ldr	r2, [r7, #24]
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	69ba      	ldr	r2, [r7, #24]
 80058f8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	43db      	mvns	r3, r3
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	4013      	ands	r3, r2
 8005908:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d003      	beq.n	800591e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005916:	69ba      	ldr	r2, [r7, #24]
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	4313      	orrs	r3, r2
 800591c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	43db      	mvns	r3, r3
 8005930:	69ba      	ldr	r2, [r7, #24]
 8005932:	4013      	ands	r3, r2
 8005934:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005942:	69ba      	ldr	r2, [r7, #24]
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	4313      	orrs	r3, r2
 8005948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800594a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	43db      	mvns	r3, r3
 800595e:	69ba      	ldr	r2, [r7, #24]
 8005960:	4013      	ands	r3, r2
 8005962:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d003      	beq.n	8005978 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005970:	69ba      	ldr	r2, [r7, #24]
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	4313      	orrs	r3, r2
 8005976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005978:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	3301      	adds	r3, #1
 8005984:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	fa22 f303 	lsr.w	r3, r2, r3
 8005990:	2b00      	cmp	r3, #0
 8005992:	f47f ae63 	bne.w	800565c <HAL_GPIO_Init+0x14>
  }
}
 8005996:	bf00      	nop
 8005998:	3724      	adds	r7, #36	; 0x24
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	58000400 	.word	0x58000400

080059a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	460b      	mov	r3, r1
 80059b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	691a      	ldr	r2, [r3, #16]
 80059b8:	887b      	ldrh	r3, [r7, #2]
 80059ba:	4013      	ands	r3, r2
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d002      	beq.n	80059c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80059c0:	2301      	movs	r3, #1
 80059c2:	73fb      	strb	r3, [r7, #15]
 80059c4:	e001      	b.n	80059ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80059c6:	2300      	movs	r3, #0
 80059c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80059ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3714      	adds	r7, #20
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	460b      	mov	r3, r1
 80059e2:	807b      	strh	r3, [r7, #2]
 80059e4:	4613      	mov	r3, r2
 80059e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80059e8:	787b      	ldrb	r3, [r7, #1]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d003      	beq.n	80059f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80059ee:	887a      	ldrh	r2, [r7, #2]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80059f4:	e003      	b.n	80059fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80059f6:	887b      	ldrh	r3, [r7, #2]
 80059f8:	041a      	lsls	r2, r3, #16
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	619a      	str	r2, [r3, #24]
}
 80059fe:	bf00      	nop
 8005a00:	370c      	adds	r7, #12
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b083      	sub	sp, #12
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
 8005a12:	460b      	mov	r3, r1
 8005a14:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	695a      	ldr	r2, [r3, #20]
 8005a1a:	887b      	ldrh	r3, [r7, #2]
 8005a1c:	401a      	ands	r2, r3
 8005a1e:	887b      	ldrh	r3, [r7, #2]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d104      	bne.n	8005a2e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005a24:	887b      	ldrh	r3, [r7, #2]
 8005a26:	041a      	lsls	r2, r3, #16
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005a2c:	e002      	b.n	8005a34 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8005a2e:	887a      	ldrh	r2, [r7, #2]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	619a      	str	r2, [r3, #24]
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	4603      	mov	r3, r0
 8005a48:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a4e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005a52:	88fb      	ldrh	r3, [r7, #6]
 8005a54:	4013      	ands	r3, r2
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d008      	beq.n	8005a6c <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005a5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a5e:	88fb      	ldrh	r3, [r7, #6]
 8005a60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a64:	88fb      	ldrh	r3, [r7, #6]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7fb fdb6 	bl	80015d8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005a6c:	bf00      	nop
 8005a6e:	3708      	adds	r7, #8
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a7c:	4b0d      	ldr	r3, [pc, #52]	; (8005ab4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8005a7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a82:	4a0c      	ldr	r2, [pc, #48]	; (8005ab4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8005a84:	f043 0302 	orr.w	r3, r3, #2
 8005a88:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005a8c:	4b09      	ldr	r3, [pc, #36]	; (8005ab4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8005a8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a92:	f003 0302 	and.w	r3, r3, #2
 8005a96:	60fb      	str	r3, [r7, #12]
 8005a98:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8005a9a:	4b07      	ldr	r3, [pc, #28]	; (8005ab8 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	4906      	ldr	r1, [pc, #24]	; (8005ab8 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	604b      	str	r3, [r1, #4]
}
 8005aa6:	bf00      	nop
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	58024400 	.word	0x58024400
 8005ab8:	58000400 	.word	0x58000400

08005abc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005abe:	b08f      	sub	sp, #60	; 0x3c
 8005ac0:	af0a      	add	r7, sp, #40	; 0x28
 8005ac2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d101      	bne.n	8005ace <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e116      	b.n	8005cfc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d106      	bne.n	8005aee <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f00f fd1d 	bl	8015528 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2203      	movs	r2, #3
 8005af2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d102      	bne.n	8005b08 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f008 fd22 	bl	800e556 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	603b      	str	r3, [r7, #0]
 8005b18:	687e      	ldr	r6, [r7, #4]
 8005b1a:	466d      	mov	r5, sp
 8005b1c:	f106 0410 	add.w	r4, r6, #16
 8005b20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b28:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005b2c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005b30:	1d33      	adds	r3, r6, #4
 8005b32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b34:	6838      	ldr	r0, [r7, #0]
 8005b36:	f008 fbf9 	bl	800e32c <USB_CoreInit>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d005      	beq.n	8005b4c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2202      	movs	r2, #2
 8005b44:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e0d7      	b.n	8005cfc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2100      	movs	r1, #0
 8005b52:	4618      	mov	r0, r3
 8005b54:	f008 fd10 	bl	800e578 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b58:	2300      	movs	r3, #0
 8005b5a:	73fb      	strb	r3, [r7, #15]
 8005b5c:	e04a      	b.n	8005bf4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005b5e:	7bfa      	ldrb	r2, [r7, #15]
 8005b60:	6879      	ldr	r1, [r7, #4]
 8005b62:	4613      	mov	r3, r2
 8005b64:	00db      	lsls	r3, r3, #3
 8005b66:	1a9b      	subs	r3, r3, r2
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	440b      	add	r3, r1
 8005b6c:	333d      	adds	r3, #61	; 0x3d
 8005b6e:	2201      	movs	r2, #1
 8005b70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005b72:	7bfa      	ldrb	r2, [r7, #15]
 8005b74:	6879      	ldr	r1, [r7, #4]
 8005b76:	4613      	mov	r3, r2
 8005b78:	00db      	lsls	r3, r3, #3
 8005b7a:	1a9b      	subs	r3, r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	440b      	add	r3, r1
 8005b80:	333c      	adds	r3, #60	; 0x3c
 8005b82:	7bfa      	ldrb	r2, [r7, #15]
 8005b84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005b86:	7bfa      	ldrb	r2, [r7, #15]
 8005b88:	7bfb      	ldrb	r3, [r7, #15]
 8005b8a:	b298      	uxth	r0, r3
 8005b8c:	6879      	ldr	r1, [r7, #4]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	00db      	lsls	r3, r3, #3
 8005b92:	1a9b      	subs	r3, r3, r2
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	440b      	add	r3, r1
 8005b98:	3342      	adds	r3, #66	; 0x42
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005b9e:	7bfa      	ldrb	r2, [r7, #15]
 8005ba0:	6879      	ldr	r1, [r7, #4]
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	00db      	lsls	r3, r3, #3
 8005ba6:	1a9b      	subs	r3, r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	440b      	add	r3, r1
 8005bac:	333f      	adds	r3, #63	; 0x3f
 8005bae:	2200      	movs	r2, #0
 8005bb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005bb2:	7bfa      	ldrb	r2, [r7, #15]
 8005bb4:	6879      	ldr	r1, [r7, #4]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	00db      	lsls	r3, r3, #3
 8005bba:	1a9b      	subs	r3, r3, r2
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	440b      	add	r3, r1
 8005bc0:	3344      	adds	r3, #68	; 0x44
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005bc6:	7bfa      	ldrb	r2, [r7, #15]
 8005bc8:	6879      	ldr	r1, [r7, #4]
 8005bca:	4613      	mov	r3, r2
 8005bcc:	00db      	lsls	r3, r3, #3
 8005bce:	1a9b      	subs	r3, r3, r2
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	440b      	add	r3, r1
 8005bd4:	3348      	adds	r3, #72	; 0x48
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005bda:	7bfa      	ldrb	r2, [r7, #15]
 8005bdc:	6879      	ldr	r1, [r7, #4]
 8005bde:	4613      	mov	r3, r2
 8005be0:	00db      	lsls	r3, r3, #3
 8005be2:	1a9b      	subs	r3, r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	440b      	add	r3, r1
 8005be8:	3350      	adds	r3, #80	; 0x50
 8005bea:	2200      	movs	r2, #0
 8005bec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005bee:	7bfb      	ldrb	r3, [r7, #15]
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	73fb      	strb	r3, [r7, #15]
 8005bf4:	7bfa      	ldrb	r2, [r7, #15]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d3af      	bcc.n	8005b5e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005bfe:	2300      	movs	r3, #0
 8005c00:	73fb      	strb	r3, [r7, #15]
 8005c02:	e044      	b.n	8005c8e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005c04:	7bfa      	ldrb	r2, [r7, #15]
 8005c06:	6879      	ldr	r1, [r7, #4]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	00db      	lsls	r3, r3, #3
 8005c0c:	1a9b      	subs	r3, r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	440b      	add	r3, r1
 8005c12:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005c16:	2200      	movs	r2, #0
 8005c18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005c1a:	7bfa      	ldrb	r2, [r7, #15]
 8005c1c:	6879      	ldr	r1, [r7, #4]
 8005c1e:	4613      	mov	r3, r2
 8005c20:	00db      	lsls	r3, r3, #3
 8005c22:	1a9b      	subs	r3, r3, r2
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	440b      	add	r3, r1
 8005c28:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005c2c:	7bfa      	ldrb	r2, [r7, #15]
 8005c2e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005c30:	7bfa      	ldrb	r2, [r7, #15]
 8005c32:	6879      	ldr	r1, [r7, #4]
 8005c34:	4613      	mov	r3, r2
 8005c36:	00db      	lsls	r3, r3, #3
 8005c38:	1a9b      	subs	r3, r3, r2
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	440b      	add	r3, r1
 8005c3e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005c42:	2200      	movs	r2, #0
 8005c44:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005c46:	7bfa      	ldrb	r2, [r7, #15]
 8005c48:	6879      	ldr	r1, [r7, #4]
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	00db      	lsls	r3, r3, #3
 8005c4e:	1a9b      	subs	r3, r3, r2
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	440b      	add	r3, r1
 8005c54:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005c58:	2200      	movs	r2, #0
 8005c5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005c5c:	7bfa      	ldrb	r2, [r7, #15]
 8005c5e:	6879      	ldr	r1, [r7, #4]
 8005c60:	4613      	mov	r3, r2
 8005c62:	00db      	lsls	r3, r3, #3
 8005c64:	1a9b      	subs	r3, r3, r2
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	440b      	add	r3, r1
 8005c6a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005c6e:	2200      	movs	r2, #0
 8005c70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005c72:	7bfa      	ldrb	r2, [r7, #15]
 8005c74:	6879      	ldr	r1, [r7, #4]
 8005c76:	4613      	mov	r3, r2
 8005c78:	00db      	lsls	r3, r3, #3
 8005c7a:	1a9b      	subs	r3, r3, r2
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	440b      	add	r3, r1
 8005c80:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005c84:	2200      	movs	r2, #0
 8005c86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c88:	7bfb      	ldrb	r3, [r7, #15]
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	73fb      	strb	r3, [r7, #15]
 8005c8e:	7bfa      	ldrb	r2, [r7, #15]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d3b5      	bcc.n	8005c04 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	603b      	str	r3, [r7, #0]
 8005c9e:	687e      	ldr	r6, [r7, #4]
 8005ca0:	466d      	mov	r5, sp
 8005ca2:	f106 0410 	add.w	r4, r6, #16
 8005ca6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ca8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005caa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005cac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005cae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005cb2:	e885 0003 	stmia.w	r5, {r0, r1}
 8005cb6:	1d33      	adds	r3, r6, #4
 8005cb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005cba:	6838      	ldr	r0, [r7, #0]
 8005cbc:	f008 fc86 	bl	800e5cc <USB_DevInit>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d005      	beq.n	8005cd2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2202      	movs	r2, #2
 8005cca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e014      	b.n	8005cfc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d102      	bne.n	8005cf0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f001 f8be 	bl	8006e6c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f009 fcc5 	bl	800f684 <USB_DevDisconnect>

  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3714      	adds	r7, #20
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005d04 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d101      	bne.n	8005d20 <HAL_PCD_Start+0x1c>
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	e020      	b.n	8005d62 <HAL_PCD_Start+0x5e>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d109      	bne.n	8005d44 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d005      	beq.n	8005d44 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f009 fc83 	bl	800f654 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f008 fbee 	bl	800e534 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005d6a:	b590      	push	{r4, r7, lr}
 8005d6c:	b08d      	sub	sp, #52	; 0x34
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d78:	6a3b      	ldr	r3, [r7, #32]
 8005d7a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4618      	mov	r0, r3
 8005d82:	f009 fd2a 	bl	800f7da <USB_GetMode>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f040 83ca 	bne.w	8006522 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4618      	mov	r0, r3
 8005d94:	f009 fc8e 	bl	800f6b4 <USB_ReadInterrupts>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	f000 83c0 	beq.w	8006520 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4618      	mov	r0, r3
 8005da6:	f009 fc85 	bl	800f6b4 <USB_ReadInterrupts>
 8005daa:	4603      	mov	r3, r0
 8005dac:	f003 0302 	and.w	r3, r3, #2
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d107      	bne.n	8005dc4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	695a      	ldr	r2, [r3, #20]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f002 0202 	and.w	r2, r2, #2
 8005dc2:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f009 fc73 	bl	800f6b4 <USB_ReadInterrupts>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	f003 0310 	and.w	r3, r3, #16
 8005dd4:	2b10      	cmp	r3, #16
 8005dd6:	d161      	bne.n	8005e9c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	699a      	ldr	r2, [r3, #24]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f022 0210 	bic.w	r2, r2, #16
 8005de6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005de8:	6a3b      	ldr	r3, [r7, #32]
 8005dea:	6a1b      	ldr	r3, [r3, #32]
 8005dec:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	f003 020f 	and.w	r2, r3, #15
 8005df4:	4613      	mov	r3, r2
 8005df6:	00db      	lsls	r3, r3, #3
 8005df8:	1a9b      	subs	r3, r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	4413      	add	r3, r2
 8005e04:	3304      	adds	r3, #4
 8005e06:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	0c5b      	lsrs	r3, r3, #17
 8005e0c:	f003 030f 	and.w	r3, r3, #15
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d124      	bne.n	8005e5e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005e14:	69ba      	ldr	r2, [r7, #24]
 8005e16:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d035      	beq.n	8005e8c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	091b      	lsrs	r3, r3, #4
 8005e28:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005e2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	461a      	mov	r2, r3
 8005e32:	6a38      	ldr	r0, [r7, #32]
 8005e34:	f009 faeb 	bl	800f40e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	68da      	ldr	r2, [r3, #12]
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	091b      	lsrs	r3, r3, #4
 8005e40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e44:	441a      	add	r2, r3
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	699a      	ldr	r2, [r3, #24]
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	091b      	lsrs	r3, r3, #4
 8005e52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e56:	441a      	add	r2, r3
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	619a      	str	r2, [r3, #24]
 8005e5c:	e016      	b.n	8005e8c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	0c5b      	lsrs	r3, r3, #17
 8005e62:	f003 030f 	and.w	r3, r3, #15
 8005e66:	2b06      	cmp	r3, #6
 8005e68:	d110      	bne.n	8005e8c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005e70:	2208      	movs	r2, #8
 8005e72:	4619      	mov	r1, r3
 8005e74:	6a38      	ldr	r0, [r7, #32]
 8005e76:	f009 faca 	bl	800f40e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	699a      	ldr	r2, [r3, #24]
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	091b      	lsrs	r3, r3, #4
 8005e82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e86:	441a      	add	r2, r3
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	699a      	ldr	r2, [r3, #24]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f042 0210 	orr.w	r2, r2, #16
 8005e9a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f009 fc07 	bl	800f6b4 <USB_ReadInterrupts>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005eac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005eb0:	d16e      	bne.n	8005f90 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f009 fc0d 	bl	800f6da <USB_ReadDevAllOutEpInterrupt>
 8005ec0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005ec2:	e062      	b.n	8005f8a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec6:	f003 0301 	and.w	r3, r3, #1
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d057      	beq.n	8005f7e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ed4:	b2d2      	uxtb	r2, r2
 8005ed6:	4611      	mov	r1, r2
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f009 fc32 	bl	800f742 <USB_ReadDevOutEPInterrupt>
 8005ede:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	f003 0301 	and.w	r3, r3, #1
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00c      	beq.n	8005f04 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	015a      	lsls	r2, r3, #5
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	2301      	movs	r3, #1
 8005efa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005efc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 fe0a 	bl	8006b18 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	f003 0308 	and.w	r3, r3, #8
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00c      	beq.n	8005f28 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f10:	015a      	lsls	r2, r3, #5
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	2308      	movs	r3, #8
 8005f1e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005f20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 ff04 	bl	8006d30 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	f003 0310 	and.w	r3, r3, #16
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d008      	beq.n	8005f44 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f3e:	461a      	mov	r2, r3
 8005f40:	2310      	movs	r3, #16
 8005f42:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	f003 0320 	and.w	r3, r3, #32
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d008      	beq.n	8005f60 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f50:	015a      	lsls	r2, r3, #5
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	4413      	add	r3, r2
 8005f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	2320      	movs	r3, #32
 8005f5e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d009      	beq.n	8005f7e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6c:	015a      	lsls	r2, r3, #5
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	4413      	add	r3, r2
 8005f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f76:	461a      	mov	r2, r3
 8005f78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f7c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f80:	3301      	adds	r3, #1
 8005f82:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f86:	085b      	lsrs	r3, r3, #1
 8005f88:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d199      	bne.n	8005ec4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f009 fb8d 	bl	800f6b4 <USB_ReadInterrupts>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fa0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005fa4:	f040 80c0 	bne.w	8006128 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4618      	mov	r0, r3
 8005fae:	f009 fbae 	bl	800f70e <USB_ReadDevAllInEpInterrupt>
 8005fb2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005fb8:	e0b2      	b.n	8006120 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fbc:	f003 0301 	and.w	r3, r3, #1
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f000 80a7 	beq.w	8006114 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fcc:	b2d2      	uxtb	r2, r2
 8005fce:	4611      	mov	r1, r2
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f009 fbd4 	bl	800f77e <USB_ReadDevInEPInterrupt>
 8005fd6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d057      	beq.n	8006092 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe4:	f003 030f 	and.w	r3, r3, #15
 8005fe8:	2201      	movs	r2, #1
 8005fea:	fa02 f303 	lsl.w	r3, r2, r3
 8005fee:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ff6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	43db      	mvns	r3, r3
 8005ffc:	69f9      	ldr	r1, [r7, #28]
 8005ffe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006002:	4013      	ands	r3, r2
 8006004:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006008:	015a      	lsls	r2, r3, #5
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	4413      	add	r3, r2
 800600e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006012:	461a      	mov	r2, r3
 8006014:	2301      	movs	r3, #1
 8006016:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d132      	bne.n	8006086 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006020:	6879      	ldr	r1, [r7, #4]
 8006022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006024:	4613      	mov	r3, r2
 8006026:	00db      	lsls	r3, r3, #3
 8006028:	1a9b      	subs	r3, r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	440b      	add	r3, r1
 800602e:	3348      	adds	r3, #72	; 0x48
 8006030:	6819      	ldr	r1, [r3, #0]
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006036:	4613      	mov	r3, r2
 8006038:	00db      	lsls	r3, r3, #3
 800603a:	1a9b      	subs	r3, r3, r2
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	4403      	add	r3, r0
 8006040:	3344      	adds	r3, #68	; 0x44
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4419      	add	r1, r3
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800604a:	4613      	mov	r3, r2
 800604c:	00db      	lsls	r3, r3, #3
 800604e:	1a9b      	subs	r3, r3, r2
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4403      	add	r3, r0
 8006054:	3348      	adds	r3, #72	; 0x48
 8006056:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605a:	2b00      	cmp	r3, #0
 800605c:	d113      	bne.n	8006086 <HAL_PCD_IRQHandler+0x31c>
 800605e:	6879      	ldr	r1, [r7, #4]
 8006060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006062:	4613      	mov	r3, r2
 8006064:	00db      	lsls	r3, r3, #3
 8006066:	1a9b      	subs	r3, r3, r2
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	440b      	add	r3, r1
 800606c:	3350      	adds	r3, #80	; 0x50
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d108      	bne.n	8006086 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6818      	ldr	r0, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800607e:	461a      	mov	r2, r3
 8006080:	2101      	movs	r1, #1
 8006082:	f009 fbdd 	bl	800f840 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	b2db      	uxtb	r3, r3
 800608a:	4619      	mov	r1, r3
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f00f faca 	bl	8015626 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	f003 0308 	and.w	r3, r3, #8
 8006098:	2b00      	cmp	r3, #0
 800609a:	d008      	beq.n	80060ae <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800609c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609e:	015a      	lsls	r2, r3, #5
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	4413      	add	r3, r2
 80060a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a8:	461a      	mov	r2, r3
 80060aa:	2308      	movs	r3, #8
 80060ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	f003 0310 	and.w	r3, r3, #16
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d008      	beq.n	80060ca <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80060b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ba:	015a      	lsls	r2, r3, #5
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	4413      	add	r3, r2
 80060c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c4:	461a      	mov	r2, r3
 80060c6:	2310      	movs	r3, #16
 80060c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d008      	beq.n	80060e6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80060d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e0:	461a      	mov	r2, r3
 80060e2:	2340      	movs	r3, #64	; 0x40
 80060e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	f003 0302 	and.w	r3, r3, #2
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d008      	beq.n	8006102 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80060f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f2:	015a      	lsls	r2, r3, #5
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	4413      	add	r3, r2
 80060f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060fc:	461a      	mov	r2, r3
 80060fe:	2302      	movs	r3, #2
 8006100:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006108:	2b00      	cmp	r3, #0
 800610a:	d003      	beq.n	8006114 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800610c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 fc75 	bl	80069fe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006116:	3301      	adds	r3, #1
 8006118:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800611a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611c:	085b      	lsrs	r3, r3, #1
 800611e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006122:	2b00      	cmp	r3, #0
 8006124:	f47f af49 	bne.w	8005fba <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4618      	mov	r0, r3
 800612e:	f009 fac1 	bl	800f6b4 <USB_ReadInterrupts>
 8006132:	4603      	mov	r3, r0
 8006134:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006138:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800613c:	d122      	bne.n	8006184 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	69fa      	ldr	r2, [r7, #28]
 8006148:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800614c:	f023 0301 	bic.w	r3, r3, #1
 8006150:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006158:	2b01      	cmp	r3, #1
 800615a:	d108      	bne.n	800616e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006164:	2100      	movs	r1, #0
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 fea4 	bl	8006eb4 <HAL_PCDEx_LPM_Callback>
 800616c:	e002      	b.n	8006174 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f00f fad0 	bl	8015714 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	695a      	ldr	r2, [r3, #20]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006182:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4618      	mov	r0, r3
 800618a:	f009 fa93 	bl	800f6b4 <USB_ReadInterrupts>
 800618e:	4603      	mov	r3, r0
 8006190:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006194:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006198:	d112      	bne.n	80061c0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f003 0301 	and.w	r3, r3, #1
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d102      	bne.n	80061b0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f00f fa8c 	bl	80156c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	695a      	ldr	r2, [r3, #20]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80061be:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4618      	mov	r0, r3
 80061c6:	f009 fa75 	bl	800f6b4 <USB_ReadInterrupts>
 80061ca:	4603      	mov	r3, r0
 80061cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061d4:	d121      	bne.n	800621a <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	695a      	ldr	r2, [r3, #20]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80061e4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d111      	bne.n	8006214 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061fe:	089b      	lsrs	r3, r3, #2
 8006200:	f003 020f 	and.w	r2, r3, #15
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800620a:	2101      	movs	r1, #1
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 fe51 	bl	8006eb4 <HAL_PCDEx_LPM_Callback>
 8006212:	e002      	b.n	800621a <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f00f fa57 	bl	80156c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4618      	mov	r0, r3
 8006220:	f009 fa48 	bl	800f6b4 <USB_ReadInterrupts>
 8006224:	4603      	mov	r3, r0
 8006226:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800622a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800622e:	f040 80c7 	bne.w	80063c0 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	69fa      	ldr	r2, [r7, #28]
 800623c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006240:	f023 0301 	bic.w	r3, r3, #1
 8006244:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2110      	movs	r1, #16
 800624c:	4618      	mov	r0, r3
 800624e:	f008 fb1b 	bl	800e888 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006252:	2300      	movs	r3, #0
 8006254:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006256:	e056      	b.n	8006306 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800625a:	015a      	lsls	r2, r3, #5
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	4413      	add	r3, r2
 8006260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006264:	461a      	mov	r2, r3
 8006266:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800626a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800626c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626e:	015a      	lsls	r2, r3, #5
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	4413      	add	r3, r2
 8006274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800627c:	0151      	lsls	r1, r2, #5
 800627e:	69fa      	ldr	r2, [r7, #28]
 8006280:	440a      	add	r2, r1
 8006282:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006286:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800628a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800628c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628e:	015a      	lsls	r2, r3, #5
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	4413      	add	r3, r2
 8006294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800629c:	0151      	lsls	r1, r2, #5
 800629e:	69fa      	ldr	r2, [r7, #28]
 80062a0:	440a      	add	r2, r1
 80062a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80062aa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80062ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ae:	015a      	lsls	r2, r3, #5
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	4413      	add	r3, r2
 80062b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b8:	461a      	mov	r2, r3
 80062ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80062be:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80062c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c2:	015a      	lsls	r2, r3, #5
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	4413      	add	r3, r2
 80062c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062d0:	0151      	lsls	r1, r2, #5
 80062d2:	69fa      	ldr	r2, [r7, #28]
 80062d4:	440a      	add	r2, r1
 80062d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80062de:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80062e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e2:	015a      	lsls	r2, r3, #5
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	4413      	add	r3, r2
 80062e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062f0:	0151      	lsls	r1, r2, #5
 80062f2:	69fa      	ldr	r2, [r7, #28]
 80062f4:	440a      	add	r2, r1
 80062f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80062fe:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006302:	3301      	adds	r3, #1
 8006304:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800630c:	429a      	cmp	r2, r3
 800630e:	d3a3      	bcc.n	8006258 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006316:	69db      	ldr	r3, [r3, #28]
 8006318:	69fa      	ldr	r2, [r7, #28]
 800631a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800631e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006322:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006328:	2b00      	cmp	r3, #0
 800632a:	d016      	beq.n	800635a <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006336:	69fa      	ldr	r2, [r7, #28]
 8006338:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800633c:	f043 030b 	orr.w	r3, r3, #11
 8006340:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800634a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800634c:	69fa      	ldr	r2, [r7, #28]
 800634e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006352:	f043 030b 	orr.w	r3, r3, #11
 8006356:	6453      	str	r3, [r2, #68]	; 0x44
 8006358:	e015      	b.n	8006386 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006360:	695a      	ldr	r2, [r3, #20]
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006368:	4619      	mov	r1, r3
 800636a:	f242 032b 	movw	r3, #8235	; 0x202b
 800636e:	4313      	orrs	r3, r2
 8006370:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	69fa      	ldr	r2, [r7, #28]
 800637c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006380:	f043 030b 	orr.w	r3, r3, #11
 8006384:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	69fa      	ldr	r2, [r7, #28]
 8006390:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006394:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006398:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6818      	ldr	r0, [r3, #0]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80063aa:	461a      	mov	r2, r3
 80063ac:	f009 fa48 	bl	800f840 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	695a      	ldr	r2, [r3, #20]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80063be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4618      	mov	r0, r3
 80063c6:	f009 f975 	bl	800f6b4 <USB_ReadInterrupts>
 80063ca:	4603      	mov	r3, r0
 80063cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063d4:	d124      	bne.n	8006420 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4618      	mov	r0, r3
 80063dc:	f009 fa0c 	bl	800f7f8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4618      	mov	r0, r3
 80063e6:	f008 fab0 	bl	800e94a <USB_GetDevSpeed>
 80063ea:	4603      	mov	r3, r0
 80063ec:	461a      	mov	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681c      	ldr	r4, [r3, #0]
 80063f6:	f001 fd0b 	bl	8007e10 <HAL_RCC_GetHCLKFreq>
 80063fa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006400:	b2db      	uxtb	r3, r3
 8006402:	461a      	mov	r2, r3
 8006404:	4620      	mov	r0, r4
 8006406:	f007 fff3 	bl	800e3f0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f00f f933 	bl	8015676 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	695a      	ldr	r2, [r3, #20]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800641e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4618      	mov	r0, r3
 8006426:	f009 f945 	bl	800f6b4 <USB_ReadInterrupts>
 800642a:	4603      	mov	r3, r0
 800642c:	f003 0308 	and.w	r3, r3, #8
 8006430:	2b08      	cmp	r3, #8
 8006432:	d10a      	bne.n	800644a <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f00f f910 	bl	801565a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	695a      	ldr	r2, [r3, #20]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f002 0208 	and.w	r2, r2, #8
 8006448:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4618      	mov	r0, r3
 8006450:	f009 f930 	bl	800f6b4 <USB_ReadInterrupts>
 8006454:	4603      	mov	r3, r0
 8006456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800645a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800645e:	d10f      	bne.n	8006480 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006460:	2300      	movs	r3, #0
 8006462:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006466:	b2db      	uxtb	r3, r3
 8006468:	4619      	mov	r1, r3
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f00f f972 	bl	8015754 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	695a      	ldr	r2, [r3, #20]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800647e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4618      	mov	r0, r3
 8006486:	f009 f915 	bl	800f6b4 <USB_ReadInterrupts>
 800648a:	4603      	mov	r3, r0
 800648c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006490:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006494:	d10f      	bne.n	80064b6 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006496:	2300      	movs	r3, #0
 8006498:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800649a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649c:	b2db      	uxtb	r3, r3
 800649e:	4619      	mov	r1, r3
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f00f f945 	bl	8015730 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	695a      	ldr	r2, [r3, #20]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80064b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4618      	mov	r0, r3
 80064bc:	f009 f8fa 	bl	800f6b4 <USB_ReadInterrupts>
 80064c0:	4603      	mov	r3, r0
 80064c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80064c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064ca:	d10a      	bne.n	80064e2 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f00f f953 	bl	8015778 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	695a      	ldr	r2, [r3, #20]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80064e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4618      	mov	r0, r3
 80064e8:	f009 f8e4 	bl	800f6b4 <USB_ReadInterrupts>
 80064ec:	4603      	mov	r3, r0
 80064ee:	f003 0304 	and.w	r3, r3, #4
 80064f2:	2b04      	cmp	r3, #4
 80064f4:	d115      	bne.n	8006522 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	f003 0304 	and.w	r3, r3, #4
 8006504:	2b00      	cmp	r3, #0
 8006506:	d002      	beq.n	800650e <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f00f f943 	bl	8015794 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	6859      	ldr	r1, [r3, #4]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	69ba      	ldr	r2, [r7, #24]
 800651a:	430a      	orrs	r2, r1
 800651c:	605a      	str	r2, [r3, #4]
 800651e:	e000      	b.n	8006522 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8006520:	bf00      	nop
    }
  }
}
 8006522:	3734      	adds	r7, #52	; 0x34
 8006524:	46bd      	mov	sp, r7
 8006526:	bd90      	pop	{r4, r7, pc}

08006528 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	460b      	mov	r3, r1
 8006532:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800653a:	2b01      	cmp	r3, #1
 800653c:	d101      	bne.n	8006542 <HAL_PCD_SetAddress+0x1a>
 800653e:	2302      	movs	r3, #2
 8006540:	e013      	b.n	800656a <HAL_PCD_SetAddress+0x42>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2201      	movs	r2, #1
 8006546:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	78fa      	ldrb	r2, [r7, #3]
 800654e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	78fa      	ldrb	r2, [r7, #3]
 8006558:	4611      	mov	r1, r2
 800655a:	4618      	mov	r0, r3
 800655c:	f009 f854 	bl	800f608 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3708      	adds	r7, #8
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b084      	sub	sp, #16
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
 800657a:	4608      	mov	r0, r1
 800657c:	4611      	mov	r1, r2
 800657e:	461a      	mov	r2, r3
 8006580:	4603      	mov	r3, r0
 8006582:	70fb      	strb	r3, [r7, #3]
 8006584:	460b      	mov	r3, r1
 8006586:	803b      	strh	r3, [r7, #0]
 8006588:	4613      	mov	r3, r2
 800658a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800658c:	2300      	movs	r3, #0
 800658e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006590:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006594:	2b00      	cmp	r3, #0
 8006596:	da0f      	bge.n	80065b8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006598:	78fb      	ldrb	r3, [r7, #3]
 800659a:	f003 020f 	and.w	r2, r3, #15
 800659e:	4613      	mov	r3, r2
 80065a0:	00db      	lsls	r3, r3, #3
 80065a2:	1a9b      	subs	r3, r3, r2
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	3338      	adds	r3, #56	; 0x38
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	4413      	add	r3, r2
 80065ac:	3304      	adds	r3, #4
 80065ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2201      	movs	r2, #1
 80065b4:	705a      	strb	r2, [r3, #1]
 80065b6:	e00f      	b.n	80065d8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80065b8:	78fb      	ldrb	r3, [r7, #3]
 80065ba:	f003 020f 	and.w	r2, r3, #15
 80065be:	4613      	mov	r3, r2
 80065c0:	00db      	lsls	r3, r3, #3
 80065c2:	1a9b      	subs	r3, r3, r2
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	4413      	add	r3, r2
 80065ce:	3304      	adds	r3, #4
 80065d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80065d8:	78fb      	ldrb	r3, [r7, #3]
 80065da:	f003 030f 	and.w	r3, r3, #15
 80065de:	b2da      	uxtb	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80065e4:	883a      	ldrh	r2, [r7, #0]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	78ba      	ldrb	r2, [r7, #2]
 80065ee:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	785b      	ldrb	r3, [r3, #1]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d004      	beq.n	8006602 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006602:	78bb      	ldrb	r3, [r7, #2]
 8006604:	2b02      	cmp	r3, #2
 8006606:	d102      	bne.n	800660e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2200      	movs	r2, #0
 800660c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006614:	2b01      	cmp	r3, #1
 8006616:	d101      	bne.n	800661c <HAL_PCD_EP_Open+0xaa>
 8006618:	2302      	movs	r3, #2
 800661a:	e00e      	b.n	800663a <HAL_PCD_EP_Open+0xc8>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68f9      	ldr	r1, [r7, #12]
 800662a:	4618      	mov	r0, r3
 800662c:	f008 f9b2 	bl	800e994 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006638:	7afb      	ldrb	r3, [r7, #11]
}
 800663a:	4618      	mov	r0, r3
 800663c:	3710      	adds	r7, #16
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}

08006642 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006642:	b580      	push	{r7, lr}
 8006644:	b084      	sub	sp, #16
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
 800664a:	460b      	mov	r3, r1
 800664c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800664e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006652:	2b00      	cmp	r3, #0
 8006654:	da0f      	bge.n	8006676 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006656:	78fb      	ldrb	r3, [r7, #3]
 8006658:	f003 020f 	and.w	r2, r3, #15
 800665c:	4613      	mov	r3, r2
 800665e:	00db      	lsls	r3, r3, #3
 8006660:	1a9b      	subs	r3, r3, r2
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	3338      	adds	r3, #56	; 0x38
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	4413      	add	r3, r2
 800666a:	3304      	adds	r3, #4
 800666c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2201      	movs	r2, #1
 8006672:	705a      	strb	r2, [r3, #1]
 8006674:	e00f      	b.n	8006696 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006676:	78fb      	ldrb	r3, [r7, #3]
 8006678:	f003 020f 	and.w	r2, r3, #15
 800667c:	4613      	mov	r3, r2
 800667e:	00db      	lsls	r3, r3, #3
 8006680:	1a9b      	subs	r3, r3, r2
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	4413      	add	r3, r2
 800668c:	3304      	adds	r3, #4
 800668e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006696:	78fb      	ldrb	r3, [r7, #3]
 8006698:	f003 030f 	and.w	r3, r3, #15
 800669c:	b2da      	uxtb	r2, r3
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d101      	bne.n	80066b0 <HAL_PCD_EP_Close+0x6e>
 80066ac:	2302      	movs	r3, #2
 80066ae:	e00e      	b.n	80066ce <HAL_PCD_EP_Close+0x8c>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68f9      	ldr	r1, [r7, #12]
 80066be:	4618      	mov	r0, r3
 80066c0:	f008 f9f0 	bl	800eaa4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3710      	adds	r7, #16
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b086      	sub	sp, #24
 80066da:	af00      	add	r7, sp, #0
 80066dc:	60f8      	str	r0, [r7, #12]
 80066de:	607a      	str	r2, [r7, #4]
 80066e0:	603b      	str	r3, [r7, #0]
 80066e2:	460b      	mov	r3, r1
 80066e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80066e6:	7afb      	ldrb	r3, [r7, #11]
 80066e8:	f003 020f 	and.w	r2, r3, #15
 80066ec:	4613      	mov	r3, r2
 80066ee:	00db      	lsls	r3, r3, #3
 80066f0:	1a9b      	subs	r3, r3, r2
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	4413      	add	r3, r2
 80066fc:	3304      	adds	r3, #4
 80066fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	683a      	ldr	r2, [r7, #0]
 800670a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	2200      	movs	r2, #0
 8006710:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	2200      	movs	r2, #0
 8006716:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006718:	7afb      	ldrb	r3, [r7, #11]
 800671a:	f003 030f 	and.w	r3, r3, #15
 800671e:	b2da      	uxtb	r2, r3
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	2b01      	cmp	r3, #1
 800672a:	d102      	bne.n	8006732 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006732:	7afb      	ldrb	r3, [r7, #11]
 8006734:	f003 030f 	and.w	r3, r3, #15
 8006738:	2b00      	cmp	r3, #0
 800673a:	d109      	bne.n	8006750 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6818      	ldr	r0, [r3, #0]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	b2db      	uxtb	r3, r3
 8006746:	461a      	mov	r2, r3
 8006748:	6979      	ldr	r1, [r7, #20]
 800674a:	f008 fcd3 	bl	800f0f4 <USB_EP0StartXfer>
 800674e:	e008      	b.n	8006762 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6818      	ldr	r0, [r3, #0]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	b2db      	uxtb	r3, r3
 800675a:	461a      	mov	r2, r3
 800675c:	6979      	ldr	r1, [r7, #20]
 800675e:	f008 fa7d 	bl	800ec5c <USB_EPStartXfer>
  }

  return HAL_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3718      	adds	r7, #24
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	460b      	mov	r3, r1
 8006776:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006778:	78fb      	ldrb	r3, [r7, #3]
 800677a:	f003 020f 	and.w	r2, r3, #15
 800677e:	6879      	ldr	r1, [r7, #4]
 8006780:	4613      	mov	r3, r2
 8006782:	00db      	lsls	r3, r3, #3
 8006784:	1a9b      	subs	r3, r3, r2
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	440b      	add	r3, r1
 800678a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800678e:	681b      	ldr	r3, [r3, #0]
}
 8006790:	4618      	mov	r0, r3
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b086      	sub	sp, #24
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	607a      	str	r2, [r7, #4]
 80067a6:	603b      	str	r3, [r7, #0]
 80067a8:	460b      	mov	r3, r1
 80067aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067ac:	7afb      	ldrb	r3, [r7, #11]
 80067ae:	f003 020f 	and.w	r2, r3, #15
 80067b2:	4613      	mov	r3, r2
 80067b4:	00db      	lsls	r3, r3, #3
 80067b6:	1a9b      	subs	r3, r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	3338      	adds	r3, #56	; 0x38
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	4413      	add	r3, r2
 80067c0:	3304      	adds	r3, #4
 80067c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	683a      	ldr	r2, [r7, #0]
 80067ce:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	2200      	movs	r2, #0
 80067d4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	2201      	movs	r2, #1
 80067da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80067dc:	7afb      	ldrb	r3, [r7, #11]
 80067de:	f003 030f 	and.w	r3, r3, #15
 80067e2:	b2da      	uxtb	r2, r3
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d102      	bne.n	80067f6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80067f6:	7afb      	ldrb	r3, [r7, #11]
 80067f8:	f003 030f 	and.w	r3, r3, #15
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d109      	bne.n	8006814 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6818      	ldr	r0, [r3, #0]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	691b      	ldr	r3, [r3, #16]
 8006808:	b2db      	uxtb	r3, r3
 800680a:	461a      	mov	r2, r3
 800680c:	6979      	ldr	r1, [r7, #20]
 800680e:	f008 fc71 	bl	800f0f4 <USB_EP0StartXfer>
 8006812:	e008      	b.n	8006826 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6818      	ldr	r0, [r3, #0]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	b2db      	uxtb	r3, r3
 800681e:	461a      	mov	r2, r3
 8006820:	6979      	ldr	r1, [r7, #20]
 8006822:	f008 fa1b 	bl	800ec5c <USB_EPStartXfer>
  }

  return HAL_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3718      	adds	r7, #24
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	460b      	mov	r3, r1
 800683a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800683c:	78fb      	ldrb	r3, [r7, #3]
 800683e:	f003 020f 	and.w	r2, r3, #15
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	429a      	cmp	r2, r3
 8006848:	d901      	bls.n	800684e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e050      	b.n	80068f0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800684e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006852:	2b00      	cmp	r3, #0
 8006854:	da0f      	bge.n	8006876 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006856:	78fb      	ldrb	r3, [r7, #3]
 8006858:	f003 020f 	and.w	r2, r3, #15
 800685c:	4613      	mov	r3, r2
 800685e:	00db      	lsls	r3, r3, #3
 8006860:	1a9b      	subs	r3, r3, r2
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	3338      	adds	r3, #56	; 0x38
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	4413      	add	r3, r2
 800686a:	3304      	adds	r3, #4
 800686c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2201      	movs	r2, #1
 8006872:	705a      	strb	r2, [r3, #1]
 8006874:	e00d      	b.n	8006892 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006876:	78fa      	ldrb	r2, [r7, #3]
 8006878:	4613      	mov	r3, r2
 800687a:	00db      	lsls	r3, r3, #3
 800687c:	1a9b      	subs	r3, r3, r2
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	4413      	add	r3, r2
 8006888:	3304      	adds	r3, #4
 800688a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2201      	movs	r2, #1
 8006896:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006898:	78fb      	ldrb	r3, [r7, #3]
 800689a:	f003 030f 	and.w	r3, r3, #15
 800689e:	b2da      	uxtb	r2, r3
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d101      	bne.n	80068b2 <HAL_PCD_EP_SetStall+0x82>
 80068ae:	2302      	movs	r3, #2
 80068b0:	e01e      	b.n	80068f0 <HAL_PCD_EP_SetStall+0xc0>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68f9      	ldr	r1, [r7, #12]
 80068c0:	4618      	mov	r0, r3
 80068c2:	f008 fdcd 	bl	800f460 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80068c6:	78fb      	ldrb	r3, [r7, #3]
 80068c8:	f003 030f 	and.w	r3, r3, #15
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d10a      	bne.n	80068e6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6818      	ldr	r0, [r3, #0]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	691b      	ldr	r3, [r3, #16]
 80068d8:	b2d9      	uxtb	r1, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80068e0:	461a      	mov	r2, r3
 80068e2:	f008 ffad 	bl	800f840 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	460b      	mov	r3, r1
 8006902:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006904:	78fb      	ldrb	r3, [r7, #3]
 8006906:	f003 020f 	and.w	r2, r3, #15
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	429a      	cmp	r2, r3
 8006910:	d901      	bls.n	8006916 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e042      	b.n	800699c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006916:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800691a:	2b00      	cmp	r3, #0
 800691c:	da0f      	bge.n	800693e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800691e:	78fb      	ldrb	r3, [r7, #3]
 8006920:	f003 020f 	and.w	r2, r3, #15
 8006924:	4613      	mov	r3, r2
 8006926:	00db      	lsls	r3, r3, #3
 8006928:	1a9b      	subs	r3, r3, r2
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	3338      	adds	r3, #56	; 0x38
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	4413      	add	r3, r2
 8006932:	3304      	adds	r3, #4
 8006934:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2201      	movs	r2, #1
 800693a:	705a      	strb	r2, [r3, #1]
 800693c:	e00f      	b.n	800695e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800693e:	78fb      	ldrb	r3, [r7, #3]
 8006940:	f003 020f 	and.w	r2, r3, #15
 8006944:	4613      	mov	r3, r2
 8006946:	00db      	lsls	r3, r3, #3
 8006948:	1a9b      	subs	r3, r3, r2
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	4413      	add	r3, r2
 8006954:	3304      	adds	r3, #4
 8006956:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2200      	movs	r2, #0
 8006962:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006964:	78fb      	ldrb	r3, [r7, #3]
 8006966:	f003 030f 	and.w	r3, r3, #15
 800696a:	b2da      	uxtb	r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006976:	2b01      	cmp	r3, #1
 8006978:	d101      	bne.n	800697e <HAL_PCD_EP_ClrStall+0x86>
 800697a:	2302      	movs	r3, #2
 800697c:	e00e      	b.n	800699c <HAL_PCD_EP_ClrStall+0xa4>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2201      	movs	r2, #1
 8006982:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68f9      	ldr	r1, [r7, #12]
 800698c:	4618      	mov	r0, r3
 800698e:	f008 fdd5 	bl	800f53c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	3710      	adds	r7, #16
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	460b      	mov	r3, r1
 80069ae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d101      	bne.n	80069be <HAL_PCD_EP_Flush+0x1a>
 80069ba:	2302      	movs	r3, #2
 80069bc:	e01b      	b.n	80069f6 <HAL_PCD_EP_Flush+0x52>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2201      	movs	r2, #1
 80069c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 80069c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	da09      	bge.n	80069e2 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	78fb      	ldrb	r3, [r7, #3]
 80069d4:	f003 030f 	and.w	r3, r3, #15
 80069d8:	4619      	mov	r1, r3
 80069da:	4610      	mov	r0, r2
 80069dc:	f007 ff54 	bl	800e888 <USB_FlushTxFifo>
 80069e0:	e004      	b.n	80069ec <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4618      	mov	r0, r3
 80069e8:	f007 ff74 	bl	800e8d4 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3708      	adds	r7, #8
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}

080069fe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b08a      	sub	sp, #40	; 0x28
 8006a02:	af02      	add	r7, sp, #8
 8006a04:	6078      	str	r0, [r7, #4]
 8006a06:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006a12:	683a      	ldr	r2, [r7, #0]
 8006a14:	4613      	mov	r3, r2
 8006a16:	00db      	lsls	r3, r3, #3
 8006a18:	1a9b      	subs	r3, r3, r2
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	3338      	adds	r3, #56	; 0x38
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	4413      	add	r3, r2
 8006a22:	3304      	adds	r3, #4
 8006a24:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	699a      	ldr	r2, [r3, #24]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	695b      	ldr	r3, [r3, #20]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d901      	bls.n	8006a36 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e06c      	b.n	8006b10 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	695a      	ldr	r2, [r3, #20]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	1ad3      	subs	r3, r2, r3
 8006a40:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	69fa      	ldr	r2, [r7, #28]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d902      	bls.n	8006a52 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	3303      	adds	r3, #3
 8006a56:	089b      	lsrs	r3, r3, #2
 8006a58:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006a5a:	e02b      	b.n	8006ab4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	695a      	ldr	r2, [r3, #20]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	69fa      	ldr	r2, [r7, #28]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d902      	bls.n	8006a78 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	3303      	adds	r3, #3
 8006a7c:	089b      	lsrs	r3, r3, #2
 8006a7e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	68d9      	ldr	r1, [r3, #12]
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	b2da      	uxtb	r2, r3
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	9300      	str	r3, [sp, #0]
 8006a94:	4603      	mov	r3, r0
 8006a96:	6978      	ldr	r0, [r7, #20]
 8006a98:	f008 fc84 	bl	800f3a4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	68da      	ldr	r2, [r3, #12]
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	441a      	add	r2, r3
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	699a      	ldr	r2, [r3, #24]
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	441a      	add	r2, r3
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	015a      	lsls	r2, r3, #5
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	4413      	add	r3, r2
 8006abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	69ba      	ldr	r2, [r7, #24]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d809      	bhi.n	8006ade <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	699a      	ldr	r2, [r3, #24]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d203      	bcs.n	8006ade <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1be      	bne.n	8006a5c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	695a      	ldr	r2, [r3, #20]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d811      	bhi.n	8006b0e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	f003 030f 	and.w	r3, r3, #15
 8006af0:	2201      	movs	r2, #1
 8006af2:	fa02 f303 	lsl.w	r3, r2, r3
 8006af6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006afe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	43db      	mvns	r3, r3
 8006b04:	6939      	ldr	r1, [r7, #16]
 8006b06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3720      	adds	r7, #32
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b086      	sub	sp, #24
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	333c      	adds	r3, #60	; 0x3c
 8006b30:	3304      	adds	r3, #4
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	015a      	lsls	r2, r3, #5
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	f040 80a0 	bne.w	8006c90 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	f003 0308 	and.w	r3, r3, #8
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d015      	beq.n	8006b86 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	4a72      	ldr	r2, [pc, #456]	; (8006d28 <PCD_EP_OutXfrComplete_int+0x210>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	f240 80dd 	bls.w	8006d1e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	f000 80d7 	beq.w	8006d1e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	015a      	lsls	r2, r3, #5
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	4413      	add	r3, r2
 8006b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b82:	6093      	str	r3, [r2, #8]
 8006b84:	e0cb      	b.n	8006d1e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	f003 0320 	and.w	r3, r3, #32
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d009      	beq.n	8006ba4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	015a      	lsls	r2, r3, #5
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	4413      	add	r3, r2
 8006b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	2320      	movs	r3, #32
 8006ba0:	6093      	str	r3, [r2, #8]
 8006ba2:	e0bc      	b.n	8006d1e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	f040 80b7 	bne.w	8006d1e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	4a5d      	ldr	r2, [pc, #372]	; (8006d28 <PCD_EP_OutXfrComplete_int+0x210>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d90f      	bls.n	8006bd8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00a      	beq.n	8006bd8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	015a      	lsls	r2, r3, #5
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	4413      	add	r3, r2
 8006bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bce:	461a      	mov	r2, r3
 8006bd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bd4:	6093      	str	r3, [r2, #8]
 8006bd6:	e0a2      	b.n	8006d1e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006bd8:	6879      	ldr	r1, [r7, #4]
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	4613      	mov	r3, r2
 8006bde:	00db      	lsls	r3, r3, #3
 8006be0:	1a9b      	subs	r3, r3, r2
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	440b      	add	r3, r1
 8006be6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006bea:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	0159      	lsls	r1, r3, #5
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	440b      	add	r3, r1
 8006bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006bfe:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	683a      	ldr	r2, [r7, #0]
 8006c04:	4613      	mov	r3, r2
 8006c06:	00db      	lsls	r3, r3, #3
 8006c08:	1a9b      	subs	r3, r3, r2
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	4403      	add	r3, r0
 8006c0e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006c12:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006c14:	6879      	ldr	r1, [r7, #4]
 8006c16:	683a      	ldr	r2, [r7, #0]
 8006c18:	4613      	mov	r3, r2
 8006c1a:	00db      	lsls	r3, r3, #3
 8006c1c:	1a9b      	subs	r3, r3, r2
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	440b      	add	r3, r1
 8006c22:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006c26:	6819      	ldr	r1, [r3, #0]
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	683a      	ldr	r2, [r7, #0]
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	00db      	lsls	r3, r3, #3
 8006c30:	1a9b      	subs	r3, r3, r2
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	4403      	add	r3, r0
 8006c36:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4419      	add	r1, r3
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	683a      	ldr	r2, [r7, #0]
 8006c42:	4613      	mov	r3, r2
 8006c44:	00db      	lsls	r3, r3, #3
 8006c46:	1a9b      	subs	r3, r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	4403      	add	r3, r0
 8006c4c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006c50:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d114      	bne.n	8006c82 <PCD_EP_OutXfrComplete_int+0x16a>
 8006c58:	6879      	ldr	r1, [r7, #4]
 8006c5a:	683a      	ldr	r2, [r7, #0]
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	00db      	lsls	r3, r3, #3
 8006c60:	1a9b      	subs	r3, r3, r2
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	440b      	add	r3, r1
 8006c66:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d108      	bne.n	8006c82 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6818      	ldr	r0, [r3, #0]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	2101      	movs	r1, #1
 8006c7e:	f008 fddf 	bl	800f840 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	4619      	mov	r1, r3
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f00e fcb1 	bl	80155f0 <HAL_PCD_DataOutStageCallback>
 8006c8e:	e046      	b.n	8006d1e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	4a26      	ldr	r2, [pc, #152]	; (8006d2c <PCD_EP_OutXfrComplete_int+0x214>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d124      	bne.n	8006ce2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00a      	beq.n	8006cb8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	015a      	lsls	r2, r3, #5
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	4413      	add	r3, r2
 8006caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cae:	461a      	mov	r2, r3
 8006cb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cb4:	6093      	str	r3, [r2, #8]
 8006cb6:	e032      	b.n	8006d1e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	f003 0320 	and.w	r3, r3, #32
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d008      	beq.n	8006cd4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	015a      	lsls	r2, r3, #5
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	4413      	add	r3, r2
 8006cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cce:	461a      	mov	r2, r3
 8006cd0:	2320      	movs	r3, #32
 8006cd2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	4619      	mov	r1, r3
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f00e fc88 	bl	80155f0 <HAL_PCD_DataOutStageCallback>
 8006ce0:	e01d      	b.n	8006d1e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d114      	bne.n	8006d12 <PCD_EP_OutXfrComplete_int+0x1fa>
 8006ce8:	6879      	ldr	r1, [r7, #4]
 8006cea:	683a      	ldr	r2, [r7, #0]
 8006cec:	4613      	mov	r3, r2
 8006cee:	00db      	lsls	r3, r3, #3
 8006cf0:	1a9b      	subs	r3, r3, r2
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	440b      	add	r3, r1
 8006cf6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d108      	bne.n	8006d12 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6818      	ldr	r0, [r3, #0]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	2100      	movs	r1, #0
 8006d0e:	f008 fd97 	bl	800f840 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	4619      	mov	r1, r3
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f00e fc69 	bl	80155f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006d1e:	2300      	movs	r3, #0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3718      	adds	r7, #24
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	4f54300a 	.word	0x4f54300a
 8006d2c:	4f54310a 	.word	0x4f54310a

08006d30 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	333c      	adds	r3, #60	; 0x3c
 8006d48:	3304      	adds	r3, #4
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	015a      	lsls	r2, r3, #5
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	4413      	add	r3, r2
 8006d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	4a15      	ldr	r2, [pc, #84]	; (8006db8 <PCD_EP_OutSetupPacket_int+0x88>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d90e      	bls.n	8006d84 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d009      	beq.n	8006d84 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	015a      	lsls	r2, r3, #5
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	4413      	add	r3, r2
 8006d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d82:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f00e fc21 	bl	80155cc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	4a0a      	ldr	r2, [pc, #40]	; (8006db8 <PCD_EP_OutSetupPacket_int+0x88>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d90c      	bls.n	8006dac <PCD_EP_OutSetupPacket_int+0x7c>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d108      	bne.n	8006dac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6818      	ldr	r0, [r3, #0]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006da4:	461a      	mov	r2, r3
 8006da6:	2101      	movs	r1, #1
 8006da8:	f008 fd4a 	bl	800f840 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3718      	adds	r7, #24
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	4f54300a 	.word	0x4f54300a

08006dbc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	70fb      	strb	r3, [r7, #3]
 8006dc8:	4613      	mov	r3, r2
 8006dca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006dd4:	78fb      	ldrb	r3, [r7, #3]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d107      	bne.n	8006dea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006dda:	883b      	ldrh	r3, [r7, #0]
 8006ddc:	0419      	lsls	r1, r3, #16
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68ba      	ldr	r2, [r7, #8]
 8006de4:	430a      	orrs	r2, r1
 8006de6:	629a      	str	r2, [r3, #40]	; 0x28
 8006de8:	e028      	b.n	8006e3c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df0:	0c1b      	lsrs	r3, r3, #16
 8006df2:	68ba      	ldr	r2, [r7, #8]
 8006df4:	4413      	add	r3, r2
 8006df6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006df8:	2300      	movs	r3, #0
 8006dfa:	73fb      	strb	r3, [r7, #15]
 8006dfc:	e00d      	b.n	8006e1a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	7bfb      	ldrb	r3, [r7, #15]
 8006e04:	3340      	adds	r3, #64	; 0x40
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	4413      	add	r3, r2
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	0c1b      	lsrs	r3, r3, #16
 8006e0e:	68ba      	ldr	r2, [r7, #8]
 8006e10:	4413      	add	r3, r2
 8006e12:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006e14:	7bfb      	ldrb	r3, [r7, #15]
 8006e16:	3301      	adds	r3, #1
 8006e18:	73fb      	strb	r3, [r7, #15]
 8006e1a:	7bfa      	ldrb	r2, [r7, #15]
 8006e1c:	78fb      	ldrb	r3, [r7, #3]
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d3ec      	bcc.n	8006dfe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006e24:	883b      	ldrh	r3, [r7, #0]
 8006e26:	0418      	lsls	r0, r3, #16
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6819      	ldr	r1, [r3, #0]
 8006e2c:	78fb      	ldrb	r3, [r7, #3]
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	68ba      	ldr	r2, [r7, #8]
 8006e32:	4302      	orrs	r2, r0
 8006e34:	3340      	adds	r3, #64	; 0x40
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	440b      	add	r3, r1
 8006e3a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3714      	adds	r7, #20
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr

08006e4a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	b083      	sub	sp, #12
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
 8006e52:	460b      	mov	r3, r1
 8006e54:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	887a      	ldrh	r2, [r7, #2]
 8006e5c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	699b      	ldr	r3, [r3, #24]
 8006e8e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e9a:	4b05      	ldr	r3, [pc, #20]	; (8006eb0 <HAL_PCDEx_ActivateLPM+0x44>)
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3714      	adds	r7, #20
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr
 8006eb0:	10000003 	.word	0x10000003

08006eb4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006ec0:	bf00      	nop
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8006ed0:	4b05      	ldr	r3, [pc, #20]	; (8006ee8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a04      	ldr	r2, [pc, #16]	; (8006ee8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006eda:	6013      	str	r3, [r2, #0]
}
 8006edc:	bf00      	nop
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr
 8006ee6:	bf00      	nop
 8006ee8:	58024800 	.word	0x58024800

08006eec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006ef4:	4b19      	ldr	r3, [pc, #100]	; (8006f5c <HAL_PWREx_ConfigSupply+0x70>)
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	f003 0304 	and.w	r3, r3, #4
 8006efc:	2b04      	cmp	r3, #4
 8006efe:	d00a      	beq.n	8006f16 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006f00:	4b16      	ldr	r3, [pc, #88]	; (8006f5c <HAL_PWREx_ConfigSupply+0x70>)
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	f003 0307 	and.w	r3, r3, #7
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d001      	beq.n	8006f12 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e01f      	b.n	8006f52 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006f12:	2300      	movs	r3, #0
 8006f14:	e01d      	b.n	8006f52 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006f16:	4b11      	ldr	r3, [pc, #68]	; (8006f5c <HAL_PWREx_ConfigSupply+0x70>)
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	f023 0207 	bic.w	r2, r3, #7
 8006f1e:	490f      	ldr	r1, [pc, #60]	; (8006f5c <HAL_PWREx_ConfigSupply+0x70>)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006f26:	f7fb f831 	bl	8001f8c <HAL_GetTick>
 8006f2a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006f2c:	e009      	b.n	8006f42 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006f2e:	f7fb f82d 	bl	8001f8c <HAL_GetTick>
 8006f32:	4602      	mov	r2, r0
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	1ad3      	subs	r3, r2, r3
 8006f38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f3c:	d901      	bls.n	8006f42 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e007      	b.n	8006f52 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006f42:	4b06      	ldr	r3, [pc, #24]	; (8006f5c <HAL_PWREx_ConfigSupply+0x70>)
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f4e:	d1ee      	bne.n	8006f2e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	58024800 	.word	0x58024800

08006f60 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006f60:	b480      	push	{r7}
 8006f62:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006f64:	4b05      	ldr	r3, [pc, #20]	; (8006f7c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	4a04      	ldr	r2, [pc, #16]	; (8006f7c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006f6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f6e:	60d3      	str	r3, [r2, #12]
}
 8006f70:	bf00      	nop
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	58024800 	.word	0x58024800

08006f80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b08c      	sub	sp, #48	; 0x30
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d101      	bne.n	8006f92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e3ff      	b.n	8007792 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0301 	and.w	r3, r3, #1
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f000 8087 	beq.w	80070ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fa0:	4b99      	ldr	r3, [pc, #612]	; (8007208 <HAL_RCC_OscConfig+0x288>)
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006faa:	4b97      	ldr	r3, [pc, #604]	; (8007208 <HAL_RCC_OscConfig+0x288>)
 8006fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fae:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb2:	2b10      	cmp	r3, #16
 8006fb4:	d007      	beq.n	8006fc6 <HAL_RCC_OscConfig+0x46>
 8006fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb8:	2b18      	cmp	r3, #24
 8006fba:	d110      	bne.n	8006fde <HAL_RCC_OscConfig+0x5e>
 8006fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fbe:	f003 0303 	and.w	r3, r3, #3
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d10b      	bne.n	8006fde <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fc6:	4b90      	ldr	r3, [pc, #576]	; (8007208 <HAL_RCC_OscConfig+0x288>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d06c      	beq.n	80070ac <HAL_RCC_OscConfig+0x12c>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d168      	bne.n	80070ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e3d9      	b.n	8007792 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fe6:	d106      	bne.n	8006ff6 <HAL_RCC_OscConfig+0x76>
 8006fe8:	4b87      	ldr	r3, [pc, #540]	; (8007208 <HAL_RCC_OscConfig+0x288>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a86      	ldr	r2, [pc, #536]	; (8007208 <HAL_RCC_OscConfig+0x288>)
 8006fee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ff2:	6013      	str	r3, [r2, #0]
 8006ff4:	e02e      	b.n	8007054 <HAL_RCC_OscConfig+0xd4>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10c      	bne.n	8007018 <HAL_RCC_OscConfig+0x98>
 8006ffe:	4b82      	ldr	r3, [pc, #520]	; (8007208 <HAL_RCC_OscConfig+0x288>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a81      	ldr	r2, [pc, #516]	; (8007208 <HAL_RCC_OscConfig+0x288>)
 8007004:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007008:	6013      	str	r3, [r2, #0]
 800700a:	4b7f      	ldr	r3, [pc, #508]	; (8007208 <HAL_RCC_OscConfig+0x288>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a7e      	ldr	r2, [pc, #504]	; (8007208 <HAL_RCC_OscConfig+0x288>)
 8007010:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007014:	6013      	str	r3, [r2, #0]
 8007016:	e01d      	b.n	8007054 <HAL_RCC_OscConfig+0xd4>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007020:	d10c      	bne.n	800703c <HAL_RCC_OscConfig+0xbc>
 8007022:	4b79      	ldr	r3, [pc, #484]	; (8007208 <HAL_RCC_OscConfig+0x288>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a78      	ldr	r2, [pc, #480]	; (8007208 <HAL_RCC_OscConfig+0x288>)
 8007028:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800702c:	6013      	str	r3, [r2, #0]
 800702e:	4b76      	ldr	r3, [pc, #472]	; (8007208 <HAL_RCC_OscConfig+0x288>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a75      	ldr	r2, [pc, #468]	; (8007208 <HAL_RCC_OscConfig+0x288>)
 8007034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007038:	6013      	str	r3, [r2, #0]
 800703a:	e00b      	b.n	8007054 <HAL_RCC_OscConfig+0xd4>
 800703c:	4b72      	ldr	r3, [pc, #456]	; (8007208 <HAL_RCC_OscConfig+0x288>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a71      	ldr	r2, [pc, #452]	; (8007208 <HAL_RCC_OscConfig+0x288>)
 8007042:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007046:	6013      	str	r3, [r2, #0]
 8007048:	4b6f      	ldr	r3, [pc, #444]	; (8007208 <HAL_RCC_OscConfig+0x288>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a6e      	ldr	r2, [pc, #440]	; (8007208 <HAL_RCC_OscConfig+0x288>)
 800704e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007052:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d013      	beq.n	8007084 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800705c:	f7fa ff96 	bl	8001f8c <HAL_GetTick>
 8007060:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007062:	e008      	b.n	8007076 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007064:	f7fa ff92 	bl	8001f8c <HAL_GetTick>
 8007068:	4602      	mov	r2, r0
 800706a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	2b64      	cmp	r3, #100	; 0x64
 8007070:	d901      	bls.n	8007076 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	e38d      	b.n	8007792 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007076:	4b64      	ldr	r3, [pc, #400]	; (8007208 <HAL_RCC_OscConfig+0x288>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800707e:	2b00      	cmp	r3, #0
 8007080:	d0f0      	beq.n	8007064 <HAL_RCC_OscConfig+0xe4>
 8007082:	e014      	b.n	80070ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007084:	f7fa ff82 	bl	8001f8c <HAL_GetTick>
 8007088:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800708a:	e008      	b.n	800709e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800708c:	f7fa ff7e 	bl	8001f8c <HAL_GetTick>
 8007090:	4602      	mov	r2, r0
 8007092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007094:	1ad3      	subs	r3, r2, r3
 8007096:	2b64      	cmp	r3, #100	; 0x64
 8007098:	d901      	bls.n	800709e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800709a:	2303      	movs	r3, #3
 800709c:	e379      	b.n	8007792 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800709e:	4b5a      	ldr	r3, [pc, #360]	; (8007208 <HAL_RCC_OscConfig+0x288>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d1f0      	bne.n	800708c <HAL_RCC_OscConfig+0x10c>
 80070aa:	e000      	b.n	80070ae <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f003 0302 	and.w	r3, r3, #2
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	f000 80ae 	beq.w	8007218 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070bc:	4b52      	ldr	r3, [pc, #328]	; (8007208 <HAL_RCC_OscConfig+0x288>)
 80070be:	691b      	ldr	r3, [r3, #16]
 80070c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070c4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80070c6:	4b50      	ldr	r3, [pc, #320]	; (8007208 <HAL_RCC_OscConfig+0x288>)
 80070c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ca:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80070cc:	6a3b      	ldr	r3, [r7, #32]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d007      	beq.n	80070e2 <HAL_RCC_OscConfig+0x162>
 80070d2:	6a3b      	ldr	r3, [r7, #32]
 80070d4:	2b18      	cmp	r3, #24
 80070d6:	d13a      	bne.n	800714e <HAL_RCC_OscConfig+0x1ce>
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	f003 0303 	and.w	r3, r3, #3
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d135      	bne.n	800714e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070e2:	4b49      	ldr	r3, [pc, #292]	; (8007208 <HAL_RCC_OscConfig+0x288>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 0304 	and.w	r3, r3, #4
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d005      	beq.n	80070fa <HAL_RCC_OscConfig+0x17a>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d101      	bne.n	80070fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e34b      	b.n	8007792 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070fa:	f7fa ff75 	bl	8001fe8 <HAL_GetREVID>
 80070fe:	4602      	mov	r2, r0
 8007100:	f241 0303 	movw	r3, #4099	; 0x1003
 8007104:	429a      	cmp	r2, r3
 8007106:	d817      	bhi.n	8007138 <HAL_RCC_OscConfig+0x1b8>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	691b      	ldr	r3, [r3, #16]
 800710c:	2b40      	cmp	r3, #64	; 0x40
 800710e:	d108      	bne.n	8007122 <HAL_RCC_OscConfig+0x1a2>
 8007110:	4b3d      	ldr	r3, [pc, #244]	; (8007208 <HAL_RCC_OscConfig+0x288>)
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007118:	4a3b      	ldr	r2, [pc, #236]	; (8007208 <HAL_RCC_OscConfig+0x288>)
 800711a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800711e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007120:	e07a      	b.n	8007218 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007122:	4b39      	ldr	r3, [pc, #228]	; (8007208 <HAL_RCC_OscConfig+0x288>)
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	031b      	lsls	r3, r3, #12
 8007130:	4935      	ldr	r1, [pc, #212]	; (8007208 <HAL_RCC_OscConfig+0x288>)
 8007132:	4313      	orrs	r3, r2
 8007134:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007136:	e06f      	b.n	8007218 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007138:	4b33      	ldr	r3, [pc, #204]	; (8007208 <HAL_RCC_OscConfig+0x288>)
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	061b      	lsls	r3, r3, #24
 8007146:	4930      	ldr	r1, [pc, #192]	; (8007208 <HAL_RCC_OscConfig+0x288>)
 8007148:	4313      	orrs	r3, r2
 800714a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800714c:	e064      	b.n	8007218 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d045      	beq.n	80071e2 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007156:	4b2c      	ldr	r3, [pc, #176]	; (8007208 <HAL_RCC_OscConfig+0x288>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f023 0219 	bic.w	r2, r3, #25
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	4929      	ldr	r1, [pc, #164]	; (8007208 <HAL_RCC_OscConfig+0x288>)
 8007164:	4313      	orrs	r3, r2
 8007166:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007168:	f7fa ff10 	bl	8001f8c <HAL_GetTick>
 800716c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800716e:	e008      	b.n	8007182 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007170:	f7fa ff0c 	bl	8001f8c <HAL_GetTick>
 8007174:	4602      	mov	r2, r0
 8007176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	2b02      	cmp	r3, #2
 800717c:	d901      	bls.n	8007182 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e307      	b.n	8007792 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007182:	4b21      	ldr	r3, [pc, #132]	; (8007208 <HAL_RCC_OscConfig+0x288>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 0304 	and.w	r3, r3, #4
 800718a:	2b00      	cmp	r3, #0
 800718c:	d0f0      	beq.n	8007170 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800718e:	f7fa ff2b 	bl	8001fe8 <HAL_GetREVID>
 8007192:	4602      	mov	r2, r0
 8007194:	f241 0303 	movw	r3, #4099	; 0x1003
 8007198:	429a      	cmp	r2, r3
 800719a:	d817      	bhi.n	80071cc <HAL_RCC_OscConfig+0x24c>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	2b40      	cmp	r3, #64	; 0x40
 80071a2:	d108      	bne.n	80071b6 <HAL_RCC_OscConfig+0x236>
 80071a4:	4b18      	ldr	r3, [pc, #96]	; (8007208 <HAL_RCC_OscConfig+0x288>)
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80071ac:	4a16      	ldr	r2, [pc, #88]	; (8007208 <HAL_RCC_OscConfig+0x288>)
 80071ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071b2:	6053      	str	r3, [r2, #4]
 80071b4:	e030      	b.n	8007218 <HAL_RCC_OscConfig+0x298>
 80071b6:	4b14      	ldr	r3, [pc, #80]	; (8007208 <HAL_RCC_OscConfig+0x288>)
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	031b      	lsls	r3, r3, #12
 80071c4:	4910      	ldr	r1, [pc, #64]	; (8007208 <HAL_RCC_OscConfig+0x288>)
 80071c6:	4313      	orrs	r3, r2
 80071c8:	604b      	str	r3, [r1, #4]
 80071ca:	e025      	b.n	8007218 <HAL_RCC_OscConfig+0x298>
 80071cc:	4b0e      	ldr	r3, [pc, #56]	; (8007208 <HAL_RCC_OscConfig+0x288>)
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	061b      	lsls	r3, r3, #24
 80071da:	490b      	ldr	r1, [pc, #44]	; (8007208 <HAL_RCC_OscConfig+0x288>)
 80071dc:	4313      	orrs	r3, r2
 80071de:	604b      	str	r3, [r1, #4]
 80071e0:	e01a      	b.n	8007218 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071e2:	4b09      	ldr	r3, [pc, #36]	; (8007208 <HAL_RCC_OscConfig+0x288>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a08      	ldr	r2, [pc, #32]	; (8007208 <HAL_RCC_OscConfig+0x288>)
 80071e8:	f023 0301 	bic.w	r3, r3, #1
 80071ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071ee:	f7fa fecd 	bl	8001f8c <HAL_GetTick>
 80071f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80071f4:	e00a      	b.n	800720c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80071f6:	f7fa fec9 	bl	8001f8c <HAL_GetTick>
 80071fa:	4602      	mov	r2, r0
 80071fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fe:	1ad3      	subs	r3, r2, r3
 8007200:	2b02      	cmp	r3, #2
 8007202:	d903      	bls.n	800720c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8007204:	2303      	movs	r3, #3
 8007206:	e2c4      	b.n	8007792 <HAL_RCC_OscConfig+0x812>
 8007208:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800720c:	4ba4      	ldr	r3, [pc, #656]	; (80074a0 <HAL_RCC_OscConfig+0x520>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 0304 	and.w	r3, r3, #4
 8007214:	2b00      	cmp	r3, #0
 8007216:	d1ee      	bne.n	80071f6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f003 0310 	and.w	r3, r3, #16
 8007220:	2b00      	cmp	r3, #0
 8007222:	f000 80a9 	beq.w	8007378 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007226:	4b9e      	ldr	r3, [pc, #632]	; (80074a0 <HAL_RCC_OscConfig+0x520>)
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800722e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007230:	4b9b      	ldr	r3, [pc, #620]	; (80074a0 <HAL_RCC_OscConfig+0x520>)
 8007232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007234:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	2b08      	cmp	r3, #8
 800723a:	d007      	beq.n	800724c <HAL_RCC_OscConfig+0x2cc>
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	2b18      	cmp	r3, #24
 8007240:	d13a      	bne.n	80072b8 <HAL_RCC_OscConfig+0x338>
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	f003 0303 	and.w	r3, r3, #3
 8007248:	2b01      	cmp	r3, #1
 800724a:	d135      	bne.n	80072b8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800724c:	4b94      	ldr	r3, [pc, #592]	; (80074a0 <HAL_RCC_OscConfig+0x520>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007254:	2b00      	cmp	r3, #0
 8007256:	d005      	beq.n	8007264 <HAL_RCC_OscConfig+0x2e4>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	69db      	ldr	r3, [r3, #28]
 800725c:	2b80      	cmp	r3, #128	; 0x80
 800725e:	d001      	beq.n	8007264 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	e296      	b.n	8007792 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007264:	f7fa fec0 	bl	8001fe8 <HAL_GetREVID>
 8007268:	4602      	mov	r2, r0
 800726a:	f241 0303 	movw	r3, #4099	; 0x1003
 800726e:	429a      	cmp	r2, r3
 8007270:	d817      	bhi.n	80072a2 <HAL_RCC_OscConfig+0x322>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a1b      	ldr	r3, [r3, #32]
 8007276:	2b20      	cmp	r3, #32
 8007278:	d108      	bne.n	800728c <HAL_RCC_OscConfig+0x30c>
 800727a:	4b89      	ldr	r3, [pc, #548]	; (80074a0 <HAL_RCC_OscConfig+0x520>)
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007282:	4a87      	ldr	r2, [pc, #540]	; (80074a0 <HAL_RCC_OscConfig+0x520>)
 8007284:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007288:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800728a:	e075      	b.n	8007378 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800728c:	4b84      	ldr	r3, [pc, #528]	; (80074a0 <HAL_RCC_OscConfig+0x520>)
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6a1b      	ldr	r3, [r3, #32]
 8007298:	069b      	lsls	r3, r3, #26
 800729a:	4981      	ldr	r1, [pc, #516]	; (80074a0 <HAL_RCC_OscConfig+0x520>)
 800729c:	4313      	orrs	r3, r2
 800729e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80072a0:	e06a      	b.n	8007378 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80072a2:	4b7f      	ldr	r3, [pc, #508]	; (80074a0 <HAL_RCC_OscConfig+0x520>)
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a1b      	ldr	r3, [r3, #32]
 80072ae:	061b      	lsls	r3, r3, #24
 80072b0:	497b      	ldr	r1, [pc, #492]	; (80074a0 <HAL_RCC_OscConfig+0x520>)
 80072b2:	4313      	orrs	r3, r2
 80072b4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80072b6:	e05f      	b.n	8007378 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	69db      	ldr	r3, [r3, #28]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d042      	beq.n	8007346 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80072c0:	4b77      	ldr	r3, [pc, #476]	; (80074a0 <HAL_RCC_OscConfig+0x520>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a76      	ldr	r2, [pc, #472]	; (80074a0 <HAL_RCC_OscConfig+0x520>)
 80072c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072cc:	f7fa fe5e 	bl	8001f8c <HAL_GetTick>
 80072d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80072d2:	e008      	b.n	80072e6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80072d4:	f7fa fe5a 	bl	8001f8c <HAL_GetTick>
 80072d8:	4602      	mov	r2, r0
 80072da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072dc:	1ad3      	subs	r3, r2, r3
 80072de:	2b02      	cmp	r3, #2
 80072e0:	d901      	bls.n	80072e6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80072e2:	2303      	movs	r3, #3
 80072e4:	e255      	b.n	8007792 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80072e6:	4b6e      	ldr	r3, [pc, #440]	; (80074a0 <HAL_RCC_OscConfig+0x520>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d0f0      	beq.n	80072d4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80072f2:	f7fa fe79 	bl	8001fe8 <HAL_GetREVID>
 80072f6:	4602      	mov	r2, r0
 80072f8:	f241 0303 	movw	r3, #4099	; 0x1003
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d817      	bhi.n	8007330 <HAL_RCC_OscConfig+0x3b0>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6a1b      	ldr	r3, [r3, #32]
 8007304:	2b20      	cmp	r3, #32
 8007306:	d108      	bne.n	800731a <HAL_RCC_OscConfig+0x39a>
 8007308:	4b65      	ldr	r3, [pc, #404]	; (80074a0 <HAL_RCC_OscConfig+0x520>)
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007310:	4a63      	ldr	r2, [pc, #396]	; (80074a0 <HAL_RCC_OscConfig+0x520>)
 8007312:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007316:	6053      	str	r3, [r2, #4]
 8007318:	e02e      	b.n	8007378 <HAL_RCC_OscConfig+0x3f8>
 800731a:	4b61      	ldr	r3, [pc, #388]	; (80074a0 <HAL_RCC_OscConfig+0x520>)
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a1b      	ldr	r3, [r3, #32]
 8007326:	069b      	lsls	r3, r3, #26
 8007328:	495d      	ldr	r1, [pc, #372]	; (80074a0 <HAL_RCC_OscConfig+0x520>)
 800732a:	4313      	orrs	r3, r2
 800732c:	604b      	str	r3, [r1, #4]
 800732e:	e023      	b.n	8007378 <HAL_RCC_OscConfig+0x3f8>
 8007330:	4b5b      	ldr	r3, [pc, #364]	; (80074a0 <HAL_RCC_OscConfig+0x520>)
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6a1b      	ldr	r3, [r3, #32]
 800733c:	061b      	lsls	r3, r3, #24
 800733e:	4958      	ldr	r1, [pc, #352]	; (80074a0 <HAL_RCC_OscConfig+0x520>)
 8007340:	4313      	orrs	r3, r2
 8007342:	60cb      	str	r3, [r1, #12]
 8007344:	e018      	b.n	8007378 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007346:	4b56      	ldr	r3, [pc, #344]	; (80074a0 <HAL_RCC_OscConfig+0x520>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a55      	ldr	r2, [pc, #340]	; (80074a0 <HAL_RCC_OscConfig+0x520>)
 800734c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007350:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007352:	f7fa fe1b 	bl	8001f8c <HAL_GetTick>
 8007356:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007358:	e008      	b.n	800736c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800735a:	f7fa fe17 	bl	8001f8c <HAL_GetTick>
 800735e:	4602      	mov	r2, r0
 8007360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	2b02      	cmp	r3, #2
 8007366:	d901      	bls.n	800736c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8007368:	2303      	movs	r3, #3
 800736a:	e212      	b.n	8007792 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800736c:	4b4c      	ldr	r3, [pc, #304]	; (80074a0 <HAL_RCC_OscConfig+0x520>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007374:	2b00      	cmp	r3, #0
 8007376:	d1f0      	bne.n	800735a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 0308 	and.w	r3, r3, #8
 8007380:	2b00      	cmp	r3, #0
 8007382:	d036      	beq.n	80073f2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	695b      	ldr	r3, [r3, #20]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d019      	beq.n	80073c0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800738c:	4b44      	ldr	r3, [pc, #272]	; (80074a0 <HAL_RCC_OscConfig+0x520>)
 800738e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007390:	4a43      	ldr	r2, [pc, #268]	; (80074a0 <HAL_RCC_OscConfig+0x520>)
 8007392:	f043 0301 	orr.w	r3, r3, #1
 8007396:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007398:	f7fa fdf8 	bl	8001f8c <HAL_GetTick>
 800739c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800739e:	e008      	b.n	80073b2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073a0:	f7fa fdf4 	bl	8001f8c <HAL_GetTick>
 80073a4:	4602      	mov	r2, r0
 80073a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	2b02      	cmp	r3, #2
 80073ac:	d901      	bls.n	80073b2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e1ef      	b.n	8007792 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80073b2:	4b3b      	ldr	r3, [pc, #236]	; (80074a0 <HAL_RCC_OscConfig+0x520>)
 80073b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073b6:	f003 0302 	and.w	r3, r3, #2
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d0f0      	beq.n	80073a0 <HAL_RCC_OscConfig+0x420>
 80073be:	e018      	b.n	80073f2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073c0:	4b37      	ldr	r3, [pc, #220]	; (80074a0 <HAL_RCC_OscConfig+0x520>)
 80073c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073c4:	4a36      	ldr	r2, [pc, #216]	; (80074a0 <HAL_RCC_OscConfig+0x520>)
 80073c6:	f023 0301 	bic.w	r3, r3, #1
 80073ca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073cc:	f7fa fdde 	bl	8001f8c <HAL_GetTick>
 80073d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80073d2:	e008      	b.n	80073e6 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073d4:	f7fa fdda 	bl	8001f8c <HAL_GetTick>
 80073d8:	4602      	mov	r2, r0
 80073da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	2b02      	cmp	r3, #2
 80073e0:	d901      	bls.n	80073e6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80073e2:	2303      	movs	r3, #3
 80073e4:	e1d5      	b.n	8007792 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80073e6:	4b2e      	ldr	r3, [pc, #184]	; (80074a0 <HAL_RCC_OscConfig+0x520>)
 80073e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073ea:	f003 0302 	and.w	r3, r3, #2
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d1f0      	bne.n	80073d4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 0320 	and.w	r3, r3, #32
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d036      	beq.n	800746c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	699b      	ldr	r3, [r3, #24]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d019      	beq.n	800743a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007406:	4b26      	ldr	r3, [pc, #152]	; (80074a0 <HAL_RCC_OscConfig+0x520>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a25      	ldr	r2, [pc, #148]	; (80074a0 <HAL_RCC_OscConfig+0x520>)
 800740c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007410:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007412:	f7fa fdbb 	bl	8001f8c <HAL_GetTick>
 8007416:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007418:	e008      	b.n	800742c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800741a:	f7fa fdb7 	bl	8001f8c <HAL_GetTick>
 800741e:	4602      	mov	r2, r0
 8007420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007422:	1ad3      	subs	r3, r2, r3
 8007424:	2b02      	cmp	r3, #2
 8007426:	d901      	bls.n	800742c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8007428:	2303      	movs	r3, #3
 800742a:	e1b2      	b.n	8007792 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800742c:	4b1c      	ldr	r3, [pc, #112]	; (80074a0 <HAL_RCC_OscConfig+0x520>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007434:	2b00      	cmp	r3, #0
 8007436:	d0f0      	beq.n	800741a <HAL_RCC_OscConfig+0x49a>
 8007438:	e018      	b.n	800746c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800743a:	4b19      	ldr	r3, [pc, #100]	; (80074a0 <HAL_RCC_OscConfig+0x520>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a18      	ldr	r2, [pc, #96]	; (80074a0 <HAL_RCC_OscConfig+0x520>)
 8007440:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007444:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007446:	f7fa fda1 	bl	8001f8c <HAL_GetTick>
 800744a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800744c:	e008      	b.n	8007460 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800744e:	f7fa fd9d 	bl	8001f8c <HAL_GetTick>
 8007452:	4602      	mov	r2, r0
 8007454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007456:	1ad3      	subs	r3, r2, r3
 8007458:	2b02      	cmp	r3, #2
 800745a:	d901      	bls.n	8007460 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800745c:	2303      	movs	r3, #3
 800745e:	e198      	b.n	8007792 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007460:	4b0f      	ldr	r3, [pc, #60]	; (80074a0 <HAL_RCC_OscConfig+0x520>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007468:	2b00      	cmp	r3, #0
 800746a:	d1f0      	bne.n	800744e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 0304 	and.w	r3, r3, #4
 8007474:	2b00      	cmp	r3, #0
 8007476:	f000 8085 	beq.w	8007584 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800747a:	4b0a      	ldr	r3, [pc, #40]	; (80074a4 <HAL_RCC_OscConfig+0x524>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a09      	ldr	r2, [pc, #36]	; (80074a4 <HAL_RCC_OscConfig+0x524>)
 8007480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007484:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007486:	f7fa fd81 	bl	8001f8c <HAL_GetTick>
 800748a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800748c:	e00c      	b.n	80074a8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800748e:	f7fa fd7d 	bl	8001f8c <HAL_GetTick>
 8007492:	4602      	mov	r2, r0
 8007494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007496:	1ad3      	subs	r3, r2, r3
 8007498:	2b64      	cmp	r3, #100	; 0x64
 800749a:	d905      	bls.n	80074a8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800749c:	2303      	movs	r3, #3
 800749e:	e178      	b.n	8007792 <HAL_RCC_OscConfig+0x812>
 80074a0:	58024400 	.word	0x58024400
 80074a4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074a8:	4b96      	ldr	r3, [pc, #600]	; (8007704 <HAL_RCC_OscConfig+0x784>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d0ec      	beq.n	800748e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d106      	bne.n	80074ca <HAL_RCC_OscConfig+0x54a>
 80074bc:	4b92      	ldr	r3, [pc, #584]	; (8007708 <HAL_RCC_OscConfig+0x788>)
 80074be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074c0:	4a91      	ldr	r2, [pc, #580]	; (8007708 <HAL_RCC_OscConfig+0x788>)
 80074c2:	f043 0301 	orr.w	r3, r3, #1
 80074c6:	6713      	str	r3, [r2, #112]	; 0x70
 80074c8:	e02d      	b.n	8007526 <HAL_RCC_OscConfig+0x5a6>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d10c      	bne.n	80074ec <HAL_RCC_OscConfig+0x56c>
 80074d2:	4b8d      	ldr	r3, [pc, #564]	; (8007708 <HAL_RCC_OscConfig+0x788>)
 80074d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074d6:	4a8c      	ldr	r2, [pc, #560]	; (8007708 <HAL_RCC_OscConfig+0x788>)
 80074d8:	f023 0301 	bic.w	r3, r3, #1
 80074dc:	6713      	str	r3, [r2, #112]	; 0x70
 80074de:	4b8a      	ldr	r3, [pc, #552]	; (8007708 <HAL_RCC_OscConfig+0x788>)
 80074e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074e2:	4a89      	ldr	r2, [pc, #548]	; (8007708 <HAL_RCC_OscConfig+0x788>)
 80074e4:	f023 0304 	bic.w	r3, r3, #4
 80074e8:	6713      	str	r3, [r2, #112]	; 0x70
 80074ea:	e01c      	b.n	8007526 <HAL_RCC_OscConfig+0x5a6>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	2b05      	cmp	r3, #5
 80074f2:	d10c      	bne.n	800750e <HAL_RCC_OscConfig+0x58e>
 80074f4:	4b84      	ldr	r3, [pc, #528]	; (8007708 <HAL_RCC_OscConfig+0x788>)
 80074f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074f8:	4a83      	ldr	r2, [pc, #524]	; (8007708 <HAL_RCC_OscConfig+0x788>)
 80074fa:	f043 0304 	orr.w	r3, r3, #4
 80074fe:	6713      	str	r3, [r2, #112]	; 0x70
 8007500:	4b81      	ldr	r3, [pc, #516]	; (8007708 <HAL_RCC_OscConfig+0x788>)
 8007502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007504:	4a80      	ldr	r2, [pc, #512]	; (8007708 <HAL_RCC_OscConfig+0x788>)
 8007506:	f043 0301 	orr.w	r3, r3, #1
 800750a:	6713      	str	r3, [r2, #112]	; 0x70
 800750c:	e00b      	b.n	8007526 <HAL_RCC_OscConfig+0x5a6>
 800750e:	4b7e      	ldr	r3, [pc, #504]	; (8007708 <HAL_RCC_OscConfig+0x788>)
 8007510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007512:	4a7d      	ldr	r2, [pc, #500]	; (8007708 <HAL_RCC_OscConfig+0x788>)
 8007514:	f023 0301 	bic.w	r3, r3, #1
 8007518:	6713      	str	r3, [r2, #112]	; 0x70
 800751a:	4b7b      	ldr	r3, [pc, #492]	; (8007708 <HAL_RCC_OscConfig+0x788>)
 800751c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800751e:	4a7a      	ldr	r2, [pc, #488]	; (8007708 <HAL_RCC_OscConfig+0x788>)
 8007520:	f023 0304 	bic.w	r3, r3, #4
 8007524:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d015      	beq.n	800755a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800752e:	f7fa fd2d 	bl	8001f8c <HAL_GetTick>
 8007532:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007534:	e00a      	b.n	800754c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007536:	f7fa fd29 	bl	8001f8c <HAL_GetTick>
 800753a:	4602      	mov	r2, r0
 800753c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	f241 3288 	movw	r2, #5000	; 0x1388
 8007544:	4293      	cmp	r3, r2
 8007546:	d901      	bls.n	800754c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8007548:	2303      	movs	r3, #3
 800754a:	e122      	b.n	8007792 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800754c:	4b6e      	ldr	r3, [pc, #440]	; (8007708 <HAL_RCC_OscConfig+0x788>)
 800754e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007550:	f003 0302 	and.w	r3, r3, #2
 8007554:	2b00      	cmp	r3, #0
 8007556:	d0ee      	beq.n	8007536 <HAL_RCC_OscConfig+0x5b6>
 8007558:	e014      	b.n	8007584 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800755a:	f7fa fd17 	bl	8001f8c <HAL_GetTick>
 800755e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007560:	e00a      	b.n	8007578 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007562:	f7fa fd13 	bl	8001f8c <HAL_GetTick>
 8007566:	4602      	mov	r2, r0
 8007568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756a:	1ad3      	subs	r3, r2, r3
 800756c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007570:	4293      	cmp	r3, r2
 8007572:	d901      	bls.n	8007578 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8007574:	2303      	movs	r3, #3
 8007576:	e10c      	b.n	8007792 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007578:	4b63      	ldr	r3, [pc, #396]	; (8007708 <HAL_RCC_OscConfig+0x788>)
 800757a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800757c:	f003 0302 	and.w	r3, r3, #2
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1ee      	bne.n	8007562 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007588:	2b00      	cmp	r3, #0
 800758a:	f000 8101 	beq.w	8007790 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800758e:	4b5e      	ldr	r3, [pc, #376]	; (8007708 <HAL_RCC_OscConfig+0x788>)
 8007590:	691b      	ldr	r3, [r3, #16]
 8007592:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007596:	2b18      	cmp	r3, #24
 8007598:	f000 80bc 	beq.w	8007714 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	f040 8095 	bne.w	80076d0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075a6:	4b58      	ldr	r3, [pc, #352]	; (8007708 <HAL_RCC_OscConfig+0x788>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a57      	ldr	r2, [pc, #348]	; (8007708 <HAL_RCC_OscConfig+0x788>)
 80075ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80075b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075b2:	f7fa fceb 	bl	8001f8c <HAL_GetTick>
 80075b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80075b8:	e008      	b.n	80075cc <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075ba:	f7fa fce7 	bl	8001f8c <HAL_GetTick>
 80075be:	4602      	mov	r2, r0
 80075c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c2:	1ad3      	subs	r3, r2, r3
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	d901      	bls.n	80075cc <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80075c8:	2303      	movs	r3, #3
 80075ca:	e0e2      	b.n	8007792 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80075cc:	4b4e      	ldr	r3, [pc, #312]	; (8007708 <HAL_RCC_OscConfig+0x788>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1f0      	bne.n	80075ba <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80075d8:	4b4b      	ldr	r3, [pc, #300]	; (8007708 <HAL_RCC_OscConfig+0x788>)
 80075da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075dc:	4b4b      	ldr	r3, [pc, #300]	; (800770c <HAL_RCC_OscConfig+0x78c>)
 80075de:	4013      	ands	r3, r2
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80075e8:	0112      	lsls	r2, r2, #4
 80075ea:	430a      	orrs	r2, r1
 80075ec:	4946      	ldr	r1, [pc, #280]	; (8007708 <HAL_RCC_OscConfig+0x788>)
 80075ee:	4313      	orrs	r3, r2
 80075f0:	628b      	str	r3, [r1, #40]	; 0x28
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f6:	3b01      	subs	r3, #1
 80075f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007600:	3b01      	subs	r3, #1
 8007602:	025b      	lsls	r3, r3, #9
 8007604:	b29b      	uxth	r3, r3
 8007606:	431a      	orrs	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800760c:	3b01      	subs	r3, #1
 800760e:	041b      	lsls	r3, r3, #16
 8007610:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007614:	431a      	orrs	r2, r3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800761a:	3b01      	subs	r3, #1
 800761c:	061b      	lsls	r3, r3, #24
 800761e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007622:	4939      	ldr	r1, [pc, #228]	; (8007708 <HAL_RCC_OscConfig+0x788>)
 8007624:	4313      	orrs	r3, r2
 8007626:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007628:	4b37      	ldr	r3, [pc, #220]	; (8007708 <HAL_RCC_OscConfig+0x788>)
 800762a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762c:	4a36      	ldr	r2, [pc, #216]	; (8007708 <HAL_RCC_OscConfig+0x788>)
 800762e:	f023 0301 	bic.w	r3, r3, #1
 8007632:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007634:	4b34      	ldr	r3, [pc, #208]	; (8007708 <HAL_RCC_OscConfig+0x788>)
 8007636:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007638:	4b35      	ldr	r3, [pc, #212]	; (8007710 <HAL_RCC_OscConfig+0x790>)
 800763a:	4013      	ands	r3, r2
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007640:	00d2      	lsls	r2, r2, #3
 8007642:	4931      	ldr	r1, [pc, #196]	; (8007708 <HAL_RCC_OscConfig+0x788>)
 8007644:	4313      	orrs	r3, r2
 8007646:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007648:	4b2f      	ldr	r3, [pc, #188]	; (8007708 <HAL_RCC_OscConfig+0x788>)
 800764a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764c:	f023 020c 	bic.w	r2, r3, #12
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007654:	492c      	ldr	r1, [pc, #176]	; (8007708 <HAL_RCC_OscConfig+0x788>)
 8007656:	4313      	orrs	r3, r2
 8007658:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800765a:	4b2b      	ldr	r3, [pc, #172]	; (8007708 <HAL_RCC_OscConfig+0x788>)
 800765c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800765e:	f023 0202 	bic.w	r2, r3, #2
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007666:	4928      	ldr	r1, [pc, #160]	; (8007708 <HAL_RCC_OscConfig+0x788>)
 8007668:	4313      	orrs	r3, r2
 800766a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800766c:	4b26      	ldr	r3, [pc, #152]	; (8007708 <HAL_RCC_OscConfig+0x788>)
 800766e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007670:	4a25      	ldr	r2, [pc, #148]	; (8007708 <HAL_RCC_OscConfig+0x788>)
 8007672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007676:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007678:	4b23      	ldr	r3, [pc, #140]	; (8007708 <HAL_RCC_OscConfig+0x788>)
 800767a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767c:	4a22      	ldr	r2, [pc, #136]	; (8007708 <HAL_RCC_OscConfig+0x788>)
 800767e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007682:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007684:	4b20      	ldr	r3, [pc, #128]	; (8007708 <HAL_RCC_OscConfig+0x788>)
 8007686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007688:	4a1f      	ldr	r2, [pc, #124]	; (8007708 <HAL_RCC_OscConfig+0x788>)
 800768a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800768e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007690:	4b1d      	ldr	r3, [pc, #116]	; (8007708 <HAL_RCC_OscConfig+0x788>)
 8007692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007694:	4a1c      	ldr	r2, [pc, #112]	; (8007708 <HAL_RCC_OscConfig+0x788>)
 8007696:	f043 0301 	orr.w	r3, r3, #1
 800769a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800769c:	4b1a      	ldr	r3, [pc, #104]	; (8007708 <HAL_RCC_OscConfig+0x788>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a19      	ldr	r2, [pc, #100]	; (8007708 <HAL_RCC_OscConfig+0x788>)
 80076a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076a8:	f7fa fc70 	bl	8001f8c <HAL_GetTick>
 80076ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80076ae:	e008      	b.n	80076c2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076b0:	f7fa fc6c 	bl	8001f8c <HAL_GetTick>
 80076b4:	4602      	mov	r2, r0
 80076b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b8:	1ad3      	subs	r3, r2, r3
 80076ba:	2b02      	cmp	r3, #2
 80076bc:	d901      	bls.n	80076c2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80076be:	2303      	movs	r3, #3
 80076c0:	e067      	b.n	8007792 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80076c2:	4b11      	ldr	r3, [pc, #68]	; (8007708 <HAL_RCC_OscConfig+0x788>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d0f0      	beq.n	80076b0 <HAL_RCC_OscConfig+0x730>
 80076ce:	e05f      	b.n	8007790 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076d0:	4b0d      	ldr	r3, [pc, #52]	; (8007708 <HAL_RCC_OscConfig+0x788>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a0c      	ldr	r2, [pc, #48]	; (8007708 <HAL_RCC_OscConfig+0x788>)
 80076d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80076da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076dc:	f7fa fc56 	bl	8001f8c <HAL_GetTick>
 80076e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80076e2:	e008      	b.n	80076f6 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076e4:	f7fa fc52 	bl	8001f8c <HAL_GetTick>
 80076e8:	4602      	mov	r2, r0
 80076ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	d901      	bls.n	80076f6 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80076f2:	2303      	movs	r3, #3
 80076f4:	e04d      	b.n	8007792 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80076f6:	4b04      	ldr	r3, [pc, #16]	; (8007708 <HAL_RCC_OscConfig+0x788>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d1f0      	bne.n	80076e4 <HAL_RCC_OscConfig+0x764>
 8007702:	e045      	b.n	8007790 <HAL_RCC_OscConfig+0x810>
 8007704:	58024800 	.word	0x58024800
 8007708:	58024400 	.word	0x58024400
 800770c:	fffffc0c 	.word	0xfffffc0c
 8007710:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007714:	4b21      	ldr	r3, [pc, #132]	; (800779c <HAL_RCC_OscConfig+0x81c>)
 8007716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007718:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800771a:	4b20      	ldr	r3, [pc, #128]	; (800779c <HAL_RCC_OscConfig+0x81c>)
 800771c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800771e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007724:	2b01      	cmp	r3, #1
 8007726:	d031      	beq.n	800778c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	f003 0203 	and.w	r2, r3, #3
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007732:	429a      	cmp	r2, r3
 8007734:	d12a      	bne.n	800778c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	091b      	lsrs	r3, r3, #4
 800773a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007742:	429a      	cmp	r2, r3
 8007744:	d122      	bne.n	800778c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007750:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007752:	429a      	cmp	r2, r3
 8007754:	d11a      	bne.n	800778c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	0a5b      	lsrs	r3, r3, #9
 800775a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007762:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007764:	429a      	cmp	r2, r3
 8007766:	d111      	bne.n	800778c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	0c1b      	lsrs	r3, r3, #16
 800776c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007774:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007776:	429a      	cmp	r2, r3
 8007778:	d108      	bne.n	800778c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	0e1b      	lsrs	r3, r3, #24
 800777e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007786:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007788:	429a      	cmp	r2, r3
 800778a:	d001      	beq.n	8007790 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	e000      	b.n	8007792 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3730      	adds	r7, #48	; 0x30
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	58024400 	.word	0x58024400

080077a0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b086      	sub	sp, #24
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d101      	bne.n	80077b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	e19c      	b.n	8007aee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80077b4:	4b8a      	ldr	r3, [pc, #552]	; (80079e0 <HAL_RCC_ClockConfig+0x240>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f003 030f 	and.w	r3, r3, #15
 80077bc:	683a      	ldr	r2, [r7, #0]
 80077be:	429a      	cmp	r2, r3
 80077c0:	d910      	bls.n	80077e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077c2:	4b87      	ldr	r3, [pc, #540]	; (80079e0 <HAL_RCC_ClockConfig+0x240>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f023 020f 	bic.w	r2, r3, #15
 80077ca:	4985      	ldr	r1, [pc, #532]	; (80079e0 <HAL_RCC_ClockConfig+0x240>)
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077d2:	4b83      	ldr	r3, [pc, #524]	; (80079e0 <HAL_RCC_ClockConfig+0x240>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f003 030f 	and.w	r3, r3, #15
 80077da:	683a      	ldr	r2, [r7, #0]
 80077dc:	429a      	cmp	r2, r3
 80077de:	d001      	beq.n	80077e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	e184      	b.n	8007aee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 0304 	and.w	r3, r3, #4
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d010      	beq.n	8007812 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	691a      	ldr	r2, [r3, #16]
 80077f4:	4b7b      	ldr	r3, [pc, #492]	; (80079e4 <HAL_RCC_ClockConfig+0x244>)
 80077f6:	699b      	ldr	r3, [r3, #24]
 80077f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d908      	bls.n	8007812 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007800:	4b78      	ldr	r3, [pc, #480]	; (80079e4 <HAL_RCC_ClockConfig+0x244>)
 8007802:	699b      	ldr	r3, [r3, #24]
 8007804:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	4975      	ldr	r1, [pc, #468]	; (80079e4 <HAL_RCC_ClockConfig+0x244>)
 800780e:	4313      	orrs	r3, r2
 8007810:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f003 0308 	and.w	r3, r3, #8
 800781a:	2b00      	cmp	r3, #0
 800781c:	d010      	beq.n	8007840 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	695a      	ldr	r2, [r3, #20]
 8007822:	4b70      	ldr	r3, [pc, #448]	; (80079e4 <HAL_RCC_ClockConfig+0x244>)
 8007824:	69db      	ldr	r3, [r3, #28]
 8007826:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800782a:	429a      	cmp	r2, r3
 800782c:	d908      	bls.n	8007840 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800782e:	4b6d      	ldr	r3, [pc, #436]	; (80079e4 <HAL_RCC_ClockConfig+0x244>)
 8007830:	69db      	ldr	r3, [r3, #28]
 8007832:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	695b      	ldr	r3, [r3, #20]
 800783a:	496a      	ldr	r1, [pc, #424]	; (80079e4 <HAL_RCC_ClockConfig+0x244>)
 800783c:	4313      	orrs	r3, r2
 800783e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f003 0310 	and.w	r3, r3, #16
 8007848:	2b00      	cmp	r3, #0
 800784a:	d010      	beq.n	800786e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	699a      	ldr	r2, [r3, #24]
 8007850:	4b64      	ldr	r3, [pc, #400]	; (80079e4 <HAL_RCC_ClockConfig+0x244>)
 8007852:	69db      	ldr	r3, [r3, #28]
 8007854:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007858:	429a      	cmp	r2, r3
 800785a:	d908      	bls.n	800786e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800785c:	4b61      	ldr	r3, [pc, #388]	; (80079e4 <HAL_RCC_ClockConfig+0x244>)
 800785e:	69db      	ldr	r3, [r3, #28]
 8007860:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	699b      	ldr	r3, [r3, #24]
 8007868:	495e      	ldr	r1, [pc, #376]	; (80079e4 <HAL_RCC_ClockConfig+0x244>)
 800786a:	4313      	orrs	r3, r2
 800786c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f003 0320 	and.w	r3, r3, #32
 8007876:	2b00      	cmp	r3, #0
 8007878:	d010      	beq.n	800789c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	69da      	ldr	r2, [r3, #28]
 800787e:	4b59      	ldr	r3, [pc, #356]	; (80079e4 <HAL_RCC_ClockConfig+0x244>)
 8007880:	6a1b      	ldr	r3, [r3, #32]
 8007882:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007886:	429a      	cmp	r2, r3
 8007888:	d908      	bls.n	800789c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800788a:	4b56      	ldr	r3, [pc, #344]	; (80079e4 <HAL_RCC_ClockConfig+0x244>)
 800788c:	6a1b      	ldr	r3, [r3, #32]
 800788e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	69db      	ldr	r3, [r3, #28]
 8007896:	4953      	ldr	r1, [pc, #332]	; (80079e4 <HAL_RCC_ClockConfig+0x244>)
 8007898:	4313      	orrs	r3, r2
 800789a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f003 0302 	and.w	r3, r3, #2
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d010      	beq.n	80078ca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	68da      	ldr	r2, [r3, #12]
 80078ac:	4b4d      	ldr	r3, [pc, #308]	; (80079e4 <HAL_RCC_ClockConfig+0x244>)
 80078ae:	699b      	ldr	r3, [r3, #24]
 80078b0:	f003 030f 	and.w	r3, r3, #15
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d908      	bls.n	80078ca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078b8:	4b4a      	ldr	r3, [pc, #296]	; (80079e4 <HAL_RCC_ClockConfig+0x244>)
 80078ba:	699b      	ldr	r3, [r3, #24]
 80078bc:	f023 020f 	bic.w	r2, r3, #15
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	4947      	ldr	r1, [pc, #284]	; (80079e4 <HAL_RCC_ClockConfig+0x244>)
 80078c6:	4313      	orrs	r3, r2
 80078c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f003 0301 	and.w	r3, r3, #1
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d055      	beq.n	8007982 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80078d6:	4b43      	ldr	r3, [pc, #268]	; (80079e4 <HAL_RCC_ClockConfig+0x244>)
 80078d8:	699b      	ldr	r3, [r3, #24]
 80078da:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	4940      	ldr	r1, [pc, #256]	; (80079e4 <HAL_RCC_ClockConfig+0x244>)
 80078e4:	4313      	orrs	r3, r2
 80078e6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d107      	bne.n	8007900 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80078f0:	4b3c      	ldr	r3, [pc, #240]	; (80079e4 <HAL_RCC_ClockConfig+0x244>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d121      	bne.n	8007940 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	e0f6      	b.n	8007aee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	2b03      	cmp	r3, #3
 8007906:	d107      	bne.n	8007918 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007908:	4b36      	ldr	r3, [pc, #216]	; (80079e4 <HAL_RCC_ClockConfig+0x244>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007910:	2b00      	cmp	r3, #0
 8007912:	d115      	bne.n	8007940 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	e0ea      	b.n	8007aee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	2b01      	cmp	r3, #1
 800791e:	d107      	bne.n	8007930 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007920:	4b30      	ldr	r3, [pc, #192]	; (80079e4 <HAL_RCC_ClockConfig+0x244>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007928:	2b00      	cmp	r3, #0
 800792a:	d109      	bne.n	8007940 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	e0de      	b.n	8007aee <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007930:	4b2c      	ldr	r3, [pc, #176]	; (80079e4 <HAL_RCC_ClockConfig+0x244>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 0304 	and.w	r3, r3, #4
 8007938:	2b00      	cmp	r3, #0
 800793a:	d101      	bne.n	8007940 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	e0d6      	b.n	8007aee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007940:	4b28      	ldr	r3, [pc, #160]	; (80079e4 <HAL_RCC_ClockConfig+0x244>)
 8007942:	691b      	ldr	r3, [r3, #16]
 8007944:	f023 0207 	bic.w	r2, r3, #7
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	4925      	ldr	r1, [pc, #148]	; (80079e4 <HAL_RCC_ClockConfig+0x244>)
 800794e:	4313      	orrs	r3, r2
 8007950:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007952:	f7fa fb1b 	bl	8001f8c <HAL_GetTick>
 8007956:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007958:	e00a      	b.n	8007970 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800795a:	f7fa fb17 	bl	8001f8c <HAL_GetTick>
 800795e:	4602      	mov	r2, r0
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	1ad3      	subs	r3, r2, r3
 8007964:	f241 3288 	movw	r2, #5000	; 0x1388
 8007968:	4293      	cmp	r3, r2
 800796a:	d901      	bls.n	8007970 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800796c:	2303      	movs	r3, #3
 800796e:	e0be      	b.n	8007aee <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007970:	4b1c      	ldr	r3, [pc, #112]	; (80079e4 <HAL_RCC_ClockConfig+0x244>)
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	00db      	lsls	r3, r3, #3
 800797e:	429a      	cmp	r2, r3
 8007980:	d1eb      	bne.n	800795a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f003 0302 	and.w	r3, r3, #2
 800798a:	2b00      	cmp	r3, #0
 800798c:	d010      	beq.n	80079b0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	68da      	ldr	r2, [r3, #12]
 8007992:	4b14      	ldr	r3, [pc, #80]	; (80079e4 <HAL_RCC_ClockConfig+0x244>)
 8007994:	699b      	ldr	r3, [r3, #24]
 8007996:	f003 030f 	and.w	r3, r3, #15
 800799a:	429a      	cmp	r2, r3
 800799c:	d208      	bcs.n	80079b0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800799e:	4b11      	ldr	r3, [pc, #68]	; (80079e4 <HAL_RCC_ClockConfig+0x244>)
 80079a0:	699b      	ldr	r3, [r3, #24]
 80079a2:	f023 020f 	bic.w	r2, r3, #15
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	490e      	ldr	r1, [pc, #56]	; (80079e4 <HAL_RCC_ClockConfig+0x244>)
 80079ac:	4313      	orrs	r3, r2
 80079ae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80079b0:	4b0b      	ldr	r3, [pc, #44]	; (80079e0 <HAL_RCC_ClockConfig+0x240>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 030f 	and.w	r3, r3, #15
 80079b8:	683a      	ldr	r2, [r7, #0]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d214      	bcs.n	80079e8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079be:	4b08      	ldr	r3, [pc, #32]	; (80079e0 <HAL_RCC_ClockConfig+0x240>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f023 020f 	bic.w	r2, r3, #15
 80079c6:	4906      	ldr	r1, [pc, #24]	; (80079e0 <HAL_RCC_ClockConfig+0x240>)
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80079ce:	4b04      	ldr	r3, [pc, #16]	; (80079e0 <HAL_RCC_ClockConfig+0x240>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f003 030f 	and.w	r3, r3, #15
 80079d6:	683a      	ldr	r2, [r7, #0]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d005      	beq.n	80079e8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	e086      	b.n	8007aee <HAL_RCC_ClockConfig+0x34e>
 80079e0:	52002000 	.word	0x52002000
 80079e4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f003 0304 	and.w	r3, r3, #4
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d010      	beq.n	8007a16 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	691a      	ldr	r2, [r3, #16]
 80079f8:	4b3f      	ldr	r3, [pc, #252]	; (8007af8 <HAL_RCC_ClockConfig+0x358>)
 80079fa:	699b      	ldr	r3, [r3, #24]
 80079fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d208      	bcs.n	8007a16 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007a04:	4b3c      	ldr	r3, [pc, #240]	; (8007af8 <HAL_RCC_ClockConfig+0x358>)
 8007a06:	699b      	ldr	r3, [r3, #24]
 8007a08:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	691b      	ldr	r3, [r3, #16]
 8007a10:	4939      	ldr	r1, [pc, #228]	; (8007af8 <HAL_RCC_ClockConfig+0x358>)
 8007a12:	4313      	orrs	r3, r2
 8007a14:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 0308 	and.w	r3, r3, #8
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d010      	beq.n	8007a44 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	695a      	ldr	r2, [r3, #20]
 8007a26:	4b34      	ldr	r3, [pc, #208]	; (8007af8 <HAL_RCC_ClockConfig+0x358>)
 8007a28:	69db      	ldr	r3, [r3, #28]
 8007a2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d208      	bcs.n	8007a44 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007a32:	4b31      	ldr	r3, [pc, #196]	; (8007af8 <HAL_RCC_ClockConfig+0x358>)
 8007a34:	69db      	ldr	r3, [r3, #28]
 8007a36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	695b      	ldr	r3, [r3, #20]
 8007a3e:	492e      	ldr	r1, [pc, #184]	; (8007af8 <HAL_RCC_ClockConfig+0x358>)
 8007a40:	4313      	orrs	r3, r2
 8007a42:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f003 0310 	and.w	r3, r3, #16
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d010      	beq.n	8007a72 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	699a      	ldr	r2, [r3, #24]
 8007a54:	4b28      	ldr	r3, [pc, #160]	; (8007af8 <HAL_RCC_ClockConfig+0x358>)
 8007a56:	69db      	ldr	r3, [r3, #28]
 8007a58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d208      	bcs.n	8007a72 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007a60:	4b25      	ldr	r3, [pc, #148]	; (8007af8 <HAL_RCC_ClockConfig+0x358>)
 8007a62:	69db      	ldr	r3, [r3, #28]
 8007a64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	699b      	ldr	r3, [r3, #24]
 8007a6c:	4922      	ldr	r1, [pc, #136]	; (8007af8 <HAL_RCC_ClockConfig+0x358>)
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f003 0320 	and.w	r3, r3, #32
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d010      	beq.n	8007aa0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	69da      	ldr	r2, [r3, #28]
 8007a82:	4b1d      	ldr	r3, [pc, #116]	; (8007af8 <HAL_RCC_ClockConfig+0x358>)
 8007a84:	6a1b      	ldr	r3, [r3, #32]
 8007a86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d208      	bcs.n	8007aa0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007a8e:	4b1a      	ldr	r3, [pc, #104]	; (8007af8 <HAL_RCC_ClockConfig+0x358>)
 8007a90:	6a1b      	ldr	r3, [r3, #32]
 8007a92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	69db      	ldr	r3, [r3, #28]
 8007a9a:	4917      	ldr	r1, [pc, #92]	; (8007af8 <HAL_RCC_ClockConfig+0x358>)
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007aa0:	f000 f844 	bl	8007b2c <HAL_RCC_GetSysClockFreq>
 8007aa4:	4601      	mov	r1, r0
 8007aa6:	4b14      	ldr	r3, [pc, #80]	; (8007af8 <HAL_RCC_ClockConfig+0x358>)
 8007aa8:	699b      	ldr	r3, [r3, #24]
 8007aaa:	0a1b      	lsrs	r3, r3, #8
 8007aac:	f003 030f 	and.w	r3, r3, #15
 8007ab0:	4a12      	ldr	r2, [pc, #72]	; (8007afc <HAL_RCC_ClockConfig+0x35c>)
 8007ab2:	5cd3      	ldrb	r3, [r2, r3]
 8007ab4:	f003 031f 	and.w	r3, r3, #31
 8007ab8:	fa21 f303 	lsr.w	r3, r1, r3
 8007abc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007abe:	4b0e      	ldr	r3, [pc, #56]	; (8007af8 <HAL_RCC_ClockConfig+0x358>)
 8007ac0:	699b      	ldr	r3, [r3, #24]
 8007ac2:	f003 030f 	and.w	r3, r3, #15
 8007ac6:	4a0d      	ldr	r2, [pc, #52]	; (8007afc <HAL_RCC_ClockConfig+0x35c>)
 8007ac8:	5cd3      	ldrb	r3, [r2, r3]
 8007aca:	f003 031f 	and.w	r3, r3, #31
 8007ace:	693a      	ldr	r2, [r7, #16]
 8007ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ad4:	4a0a      	ldr	r2, [pc, #40]	; (8007b00 <HAL_RCC_ClockConfig+0x360>)
 8007ad6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007ad8:	4a0a      	ldr	r2, [pc, #40]	; (8007b04 <HAL_RCC_ClockConfig+0x364>)
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007ade:	4b0a      	ldr	r3, [pc, #40]	; (8007b08 <HAL_RCC_ClockConfig+0x368>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f7fa fa08 	bl	8001ef8 <HAL_InitTick>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3718      	adds	r7, #24
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	58024400 	.word	0x58024400
 8007afc:	080170a0 	.word	0x080170a0
 8007b00:	24000008 	.word	0x24000008
 8007b04:	24000004 	.word	0x24000004
 8007b08:	2400000c 	.word	0x2400000c

08007b0c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8007b10:	4b05      	ldr	r3, [pc, #20]	; (8007b28 <HAL_RCC_EnableCSS+0x1c>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a04      	ldr	r2, [pc, #16]	; (8007b28 <HAL_RCC_EnableCSS+0x1c>)
 8007b16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b1a:	6013      	str	r3, [r2, #0]
}
 8007b1c:	bf00      	nop
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop
 8007b28:	58024400 	.word	0x58024400

08007b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b089      	sub	sp, #36	; 0x24
 8007b30:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007b32:	4baf      	ldr	r3, [pc, #700]	; (8007df0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b3a:	2b18      	cmp	r3, #24
 8007b3c:	f200 814e 	bhi.w	8007ddc <HAL_RCC_GetSysClockFreq+0x2b0>
 8007b40:	a201      	add	r2, pc, #4	; (adr r2, 8007b48 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b46:	bf00      	nop
 8007b48:	08007bad 	.word	0x08007bad
 8007b4c:	08007ddd 	.word	0x08007ddd
 8007b50:	08007ddd 	.word	0x08007ddd
 8007b54:	08007ddd 	.word	0x08007ddd
 8007b58:	08007ddd 	.word	0x08007ddd
 8007b5c:	08007ddd 	.word	0x08007ddd
 8007b60:	08007ddd 	.word	0x08007ddd
 8007b64:	08007ddd 	.word	0x08007ddd
 8007b68:	08007bd3 	.word	0x08007bd3
 8007b6c:	08007ddd 	.word	0x08007ddd
 8007b70:	08007ddd 	.word	0x08007ddd
 8007b74:	08007ddd 	.word	0x08007ddd
 8007b78:	08007ddd 	.word	0x08007ddd
 8007b7c:	08007ddd 	.word	0x08007ddd
 8007b80:	08007ddd 	.word	0x08007ddd
 8007b84:	08007ddd 	.word	0x08007ddd
 8007b88:	08007bd9 	.word	0x08007bd9
 8007b8c:	08007ddd 	.word	0x08007ddd
 8007b90:	08007ddd 	.word	0x08007ddd
 8007b94:	08007ddd 	.word	0x08007ddd
 8007b98:	08007ddd 	.word	0x08007ddd
 8007b9c:	08007ddd 	.word	0x08007ddd
 8007ba0:	08007ddd 	.word	0x08007ddd
 8007ba4:	08007ddd 	.word	0x08007ddd
 8007ba8:	08007bdf 	.word	0x08007bdf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bac:	4b90      	ldr	r3, [pc, #576]	; (8007df0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 0320 	and.w	r3, r3, #32
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d009      	beq.n	8007bcc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007bb8:	4b8d      	ldr	r3, [pc, #564]	; (8007df0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	08db      	lsrs	r3, r3, #3
 8007bbe:	f003 0303 	and.w	r3, r3, #3
 8007bc2:	4a8c      	ldr	r2, [pc, #560]	; (8007df4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8007bc8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007bca:	e10a      	b.n	8007de2 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007bcc:	4b89      	ldr	r3, [pc, #548]	; (8007df4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007bce:	61bb      	str	r3, [r7, #24]
    break;
 8007bd0:	e107      	b.n	8007de2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007bd2:	4b89      	ldr	r3, [pc, #548]	; (8007df8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8007bd4:	61bb      	str	r3, [r7, #24]
    break;
 8007bd6:	e104      	b.n	8007de2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007bd8:	4b88      	ldr	r3, [pc, #544]	; (8007dfc <HAL_RCC_GetSysClockFreq+0x2d0>)
 8007bda:	61bb      	str	r3, [r7, #24]
    break;
 8007bdc:	e101      	b.n	8007de2 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007bde:	4b84      	ldr	r3, [pc, #528]	; (8007df0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be2:	f003 0303 	and.w	r3, r3, #3
 8007be6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007be8:	4b81      	ldr	r3, [pc, #516]	; (8007df0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bec:	091b      	lsrs	r3, r3, #4
 8007bee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007bf2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007bf4:	4b7e      	ldr	r3, [pc, #504]	; (8007df0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf8:	f003 0301 	and.w	r3, r3, #1
 8007bfc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007bfe:	4b7c      	ldr	r3, [pc, #496]	; (8007df0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c02:	08db      	lsrs	r3, r3, #3
 8007c04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	fb02 f303 	mul.w	r3, r2, r3
 8007c0e:	ee07 3a90 	vmov	s15, r3
 8007c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c16:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f000 80da 	beq.w	8007dd6 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d05a      	beq.n	8007cde <HAL_RCC_GetSysClockFreq+0x1b2>
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d302      	bcc.n	8007c32 <HAL_RCC_GetSysClockFreq+0x106>
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	d078      	beq.n	8007d22 <HAL_RCC_GetSysClockFreq+0x1f6>
 8007c30:	e099      	b.n	8007d66 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c32:	4b6f      	ldr	r3, [pc, #444]	; (8007df0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f003 0320 	and.w	r3, r3, #32
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d02d      	beq.n	8007c9a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007c3e:	4b6c      	ldr	r3, [pc, #432]	; (8007df0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	08db      	lsrs	r3, r3, #3
 8007c44:	f003 0303 	and.w	r3, r3, #3
 8007c48:	4a6a      	ldr	r2, [pc, #424]	; (8007df4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c4e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	ee07 3a90 	vmov	s15, r3
 8007c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	ee07 3a90 	vmov	s15, r3
 8007c60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c68:	4b61      	ldr	r3, [pc, #388]	; (8007df0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c70:	ee07 3a90 	vmov	s15, r3
 8007c74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c78:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c7c:	eddf 5a60 	vldr	s11, [pc, #384]	; 8007e00 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007c80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c94:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007c98:	e087      	b.n	8007daa <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	ee07 3a90 	vmov	s15, r3
 8007ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ca4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8007e04 <HAL_RCC_GetSysClockFreq+0x2d8>
 8007ca8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cac:	4b50      	ldr	r3, [pc, #320]	; (8007df0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cb4:	ee07 3a90 	vmov	s15, r3
 8007cb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cbc:	ed97 6a02 	vldr	s12, [r7, #8]
 8007cc0:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8007e00 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007cc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ccc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cd8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cdc:	e065      	b.n	8007daa <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	ee07 3a90 	vmov	s15, r3
 8007ce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ce8:	eddf 6a47 	vldr	s13, [pc, #284]	; 8007e08 <HAL_RCC_GetSysClockFreq+0x2dc>
 8007cec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cf0:	4b3f      	ldr	r3, [pc, #252]	; (8007df0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cf8:	ee07 3a90 	vmov	s15, r3
 8007cfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d00:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d04:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8007e00 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007d08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d1c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d20:	e043      	b.n	8007daa <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	ee07 3a90 	vmov	s15, r3
 8007d28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d2c:	eddf 6a37 	vldr	s13, [pc, #220]	; 8007e0c <HAL_RCC_GetSysClockFreq+0x2e0>
 8007d30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d34:	4b2e      	ldr	r3, [pc, #184]	; (8007df0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d3c:	ee07 3a90 	vmov	s15, r3
 8007d40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d44:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d48:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8007e00 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007d4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d60:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d64:	e021      	b.n	8007daa <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	ee07 3a90 	vmov	s15, r3
 8007d6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d70:	eddf 6a25 	vldr	s13, [pc, #148]	; 8007e08 <HAL_RCC_GetSysClockFreq+0x2dc>
 8007d74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d78:	4b1d      	ldr	r3, [pc, #116]	; (8007df0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d80:	ee07 3a90 	vmov	s15, r3
 8007d84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d88:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d8c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8007e00 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007d90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007da0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007da4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007da8:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007daa:	4b11      	ldr	r3, [pc, #68]	; (8007df0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dae:	0a5b      	lsrs	r3, r3, #9
 8007db0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007db4:	3301      	adds	r3, #1
 8007db6:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	ee07 3a90 	vmov	s15, r3
 8007dbe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007dc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007dc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007dca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dce:	ee17 3a90 	vmov	r3, s15
 8007dd2:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007dd4:	e005      	b.n	8007de2 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	61bb      	str	r3, [r7, #24]
    break;
 8007dda:	e002      	b.n	8007de2 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8007ddc:	4b06      	ldr	r3, [pc, #24]	; (8007df8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8007dde:	61bb      	str	r3, [r7, #24]
    break;
 8007de0:	bf00      	nop
  }

  return sysclockfreq;
 8007de2:	69bb      	ldr	r3, [r7, #24]
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3724      	adds	r7, #36	; 0x24
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr
 8007df0:	58024400 	.word	0x58024400
 8007df4:	03d09000 	.word	0x03d09000
 8007df8:	003d0900 	.word	0x003d0900
 8007dfc:	017d7840 	.word	0x017d7840
 8007e00:	46000000 	.word	0x46000000
 8007e04:	4c742400 	.word	0x4c742400
 8007e08:	4a742400 	.word	0x4a742400
 8007e0c:	4bbebc20 	.word	0x4bbebc20

08007e10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007e16:	f7ff fe89 	bl	8007b2c <HAL_RCC_GetSysClockFreq>
 8007e1a:	4601      	mov	r1, r0
 8007e1c:	4b10      	ldr	r3, [pc, #64]	; (8007e60 <HAL_RCC_GetHCLKFreq+0x50>)
 8007e1e:	699b      	ldr	r3, [r3, #24]
 8007e20:	0a1b      	lsrs	r3, r3, #8
 8007e22:	f003 030f 	and.w	r3, r3, #15
 8007e26:	4a0f      	ldr	r2, [pc, #60]	; (8007e64 <HAL_RCC_GetHCLKFreq+0x54>)
 8007e28:	5cd3      	ldrb	r3, [r2, r3]
 8007e2a:	f003 031f 	and.w	r3, r3, #31
 8007e2e:	fa21 f303 	lsr.w	r3, r1, r3
 8007e32:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007e34:	4b0a      	ldr	r3, [pc, #40]	; (8007e60 <HAL_RCC_GetHCLKFreq+0x50>)
 8007e36:	699b      	ldr	r3, [r3, #24]
 8007e38:	f003 030f 	and.w	r3, r3, #15
 8007e3c:	4a09      	ldr	r2, [pc, #36]	; (8007e64 <HAL_RCC_GetHCLKFreq+0x54>)
 8007e3e:	5cd3      	ldrb	r3, [r2, r3]
 8007e40:	f003 031f 	and.w	r3, r3, #31
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	fa22 f303 	lsr.w	r3, r2, r3
 8007e4a:	4a07      	ldr	r2, [pc, #28]	; (8007e68 <HAL_RCC_GetHCLKFreq+0x58>)
 8007e4c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007e4e:	4a07      	ldr	r2, [pc, #28]	; (8007e6c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007e54:	4b04      	ldr	r3, [pc, #16]	; (8007e68 <HAL_RCC_GetHCLKFreq+0x58>)
 8007e56:	681b      	ldr	r3, [r3, #0]
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3708      	adds	r7, #8
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}
 8007e60:	58024400 	.word	0x58024400
 8007e64:	080170a0 	.word	0x080170a0
 8007e68:	24000008 	.word	0x24000008
 8007e6c:	24000004 	.word	0x24000004

08007e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007e74:	f7ff ffcc 	bl	8007e10 <HAL_RCC_GetHCLKFreq>
 8007e78:	4601      	mov	r1, r0
 8007e7a:	4b06      	ldr	r3, [pc, #24]	; (8007e94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e7c:	69db      	ldr	r3, [r3, #28]
 8007e7e:	091b      	lsrs	r3, r3, #4
 8007e80:	f003 0307 	and.w	r3, r3, #7
 8007e84:	4a04      	ldr	r2, [pc, #16]	; (8007e98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007e86:	5cd3      	ldrb	r3, [r2, r3]
 8007e88:	f003 031f 	and.w	r3, r3, #31
 8007e8c:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	58024400 	.word	0x58024400
 8007e98:	080170a0 	.word	0x080170a0

08007e9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007ea0:	f7ff ffb6 	bl	8007e10 <HAL_RCC_GetHCLKFreq>
 8007ea4:	4601      	mov	r1, r0
 8007ea6:	4b06      	ldr	r3, [pc, #24]	; (8007ec0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ea8:	69db      	ldr	r3, [r3, #28]
 8007eaa:	0a1b      	lsrs	r3, r3, #8
 8007eac:	f003 0307 	and.w	r3, r3, #7
 8007eb0:	4a04      	ldr	r2, [pc, #16]	; (8007ec4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007eb2:	5cd3      	ldrb	r3, [r2, r3]
 8007eb4:	f003 031f 	and.w	r3, r3, #31
 8007eb8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	bd80      	pop	{r7, pc}
 8007ec0:	58024400 	.word	0x58024400
 8007ec4:	080170a0 	.word	0x080170a0

08007ec8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8007ecc:	4b07      	ldr	r3, [pc, #28]	; (8007eec <HAL_RCC_NMI_IRQHandler+0x24>)
 8007ece:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ed8:	d105      	bne.n	8007ee6 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 8007eda:	f000 f809 	bl	8007ef0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8007ede:	4b03      	ldr	r3, [pc, #12]	; (8007eec <HAL_RCC_NMI_IRQHandler+0x24>)
 8007ee0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007ee4:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 8007ee6:	bf00      	nop
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	58024400 	.word	0x58024400

08007ef0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 8007ef4:	bf00      	nop
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr
	...

08007f00 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b086      	sub	sp, #24
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007f08:	2300      	movs	r3, #0
 8007f0a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d03d      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f24:	d013      	beq.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8007f26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f2a:	d802      	bhi.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d007      	beq.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8007f30:	e01f      	b.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007f32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f36:	d013      	beq.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8007f38:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007f3c:	d01c      	beq.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8007f3e:	e018      	b.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f40:	4baf      	ldr	r3, [pc, #700]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f44:	4aae      	ldr	r2, [pc, #696]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007f46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007f4c:	e015      	b.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	3304      	adds	r3, #4
 8007f52:	2102      	movs	r1, #2
 8007f54:	4618      	mov	r0, r3
 8007f56:	f001 fd33 	bl	80099c0 <RCCEx_PLL2_Config>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007f5e:	e00c      	b.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	3324      	adds	r3, #36	; 0x24
 8007f64:	2102      	movs	r1, #2
 8007f66:	4618      	mov	r0, r3
 8007f68:	f001 fddc 	bl	8009b24 <RCCEx_PLL3_Config>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007f70:	e003      	b.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	75fb      	strb	r3, [r7, #23]
      break;
 8007f76:	e000      	b.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8007f78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f7a:	7dfb      	ldrb	r3, [r7, #23]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d109      	bne.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007f80:	4b9f      	ldr	r3, [pc, #636]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f8c:	499c      	ldr	r1, [pc, #624]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	650b      	str	r3, [r1, #80]	; 0x50
 8007f92:	e001      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f94:	7dfb      	ldrb	r3, [r7, #23]
 8007f96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d03d      	beq.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fa8:	2b04      	cmp	r3, #4
 8007faa:	d826      	bhi.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8007fac:	a201      	add	r2, pc, #4	; (adr r2, 8007fb4 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8007fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb2:	bf00      	nop
 8007fb4:	08007fc9 	.word	0x08007fc9
 8007fb8:	08007fd7 	.word	0x08007fd7
 8007fbc:	08007fe9 	.word	0x08007fe9
 8007fc0:	08008001 	.word	0x08008001
 8007fc4:	08008001 	.word	0x08008001
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fc8:	4b8d      	ldr	r3, [pc, #564]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fcc:	4a8c      	ldr	r2, [pc, #560]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007fce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007fd4:	e015      	b.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	3304      	adds	r3, #4
 8007fda:	2100      	movs	r1, #0
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f001 fcef 	bl	80099c0 <RCCEx_PLL2_Config>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007fe6:	e00c      	b.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	3324      	adds	r3, #36	; 0x24
 8007fec:	2100      	movs	r1, #0
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f001 fd98 	bl	8009b24 <RCCEx_PLL3_Config>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007ff8:	e003      	b.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	75fb      	strb	r3, [r7, #23]
      break;
 8007ffe:	e000      	b.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8008000:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008002:	7dfb      	ldrb	r3, [r7, #23]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d109      	bne.n	800801c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008008:	4b7d      	ldr	r3, [pc, #500]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800800a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800800c:	f023 0207 	bic.w	r2, r3, #7
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008014:	497a      	ldr	r1, [pc, #488]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008016:	4313      	orrs	r3, r2
 8008018:	650b      	str	r3, [r1, #80]	; 0x50
 800801a:	e001      	b.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800801c:	7dfb      	ldrb	r3, [r7, #23]
 800801e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008028:	2b00      	cmp	r3, #0
 800802a:	d03e      	beq.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008030:	2b80      	cmp	r3, #128	; 0x80
 8008032:	d01c      	beq.n	800806e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8008034:	2b80      	cmp	r3, #128	; 0x80
 8008036:	d804      	bhi.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8008038:	2b00      	cmp	r3, #0
 800803a:	d008      	beq.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800803c:	2b40      	cmp	r3, #64	; 0x40
 800803e:	d00d      	beq.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8008040:	e01e      	b.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8008042:	2bc0      	cmp	r3, #192	; 0xc0
 8008044:	d01f      	beq.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8008046:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800804a:	d01e      	beq.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800804c:	e018      	b.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800804e:	4b6c      	ldr	r3, [pc, #432]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008052:	4a6b      	ldr	r2, [pc, #428]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008058:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800805a:	e017      	b.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	3304      	adds	r3, #4
 8008060:	2100      	movs	r1, #0
 8008062:	4618      	mov	r0, r3
 8008064:	f001 fcac 	bl	80099c0 <RCCEx_PLL2_Config>
 8008068:	4603      	mov	r3, r0
 800806a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800806c:	e00e      	b.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	3324      	adds	r3, #36	; 0x24
 8008072:	2100      	movs	r1, #0
 8008074:	4618      	mov	r0, r3
 8008076:	f001 fd55 	bl	8009b24 <RCCEx_PLL3_Config>
 800807a:	4603      	mov	r3, r0
 800807c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800807e:	e005      	b.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	75fb      	strb	r3, [r7, #23]
      break;
 8008084:	e002      	b.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8008086:	bf00      	nop
 8008088:	e000      	b.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800808a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800808c:	7dfb      	ldrb	r3, [r7, #23]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d109      	bne.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008092:	4b5b      	ldr	r3, [pc, #364]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008096:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800809e:	4958      	ldr	r1, [pc, #352]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80080a0:	4313      	orrs	r3, r2
 80080a2:	650b      	str	r3, [r1, #80]	; 0x50
 80080a4:	e001      	b.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080a6:	7dfb      	ldrb	r3, [r7, #23]
 80080a8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d044      	beq.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80080bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080c0:	d01f      	beq.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80080c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080c6:	d805      	bhi.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d00a      	beq.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80080cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080d0:	d00e      	beq.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80080d2:	e01f      	b.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80080d4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80080d8:	d01f      	beq.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80080da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80080de:	d01e      	beq.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80080e0:	e018      	b.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080e2:	4b47      	ldr	r3, [pc, #284]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80080e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e6:	4a46      	ldr	r2, [pc, #280]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80080e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80080ee:	e017      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	3304      	adds	r3, #4
 80080f4:	2100      	movs	r1, #0
 80080f6:	4618      	mov	r0, r3
 80080f8:	f001 fc62 	bl	80099c0 <RCCEx_PLL2_Config>
 80080fc:	4603      	mov	r3, r0
 80080fe:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008100:	e00e      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	3324      	adds	r3, #36	; 0x24
 8008106:	2100      	movs	r1, #0
 8008108:	4618      	mov	r0, r3
 800810a:	f001 fd0b 	bl	8009b24 <RCCEx_PLL3_Config>
 800810e:	4603      	mov	r3, r0
 8008110:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008112:	e005      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008114:	2301      	movs	r3, #1
 8008116:	75fb      	strb	r3, [r7, #23]
      break;
 8008118:	e002      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800811a:	bf00      	nop
 800811c:	e000      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800811e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008120:	7dfb      	ldrb	r3, [r7, #23]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d10a      	bne.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008126:	4b36      	ldr	r3, [pc, #216]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800812a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008134:	4932      	ldr	r1, [pc, #200]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008136:	4313      	orrs	r3, r2
 8008138:	658b      	str	r3, [r1, #88]	; 0x58
 800813a:	e001      	b.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800813c:	7dfb      	ldrb	r3, [r7, #23]
 800813e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008148:	2b00      	cmp	r3, #0
 800814a:	d044      	beq.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008152:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008156:	d01f      	beq.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008158:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800815c:	d805      	bhi.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800815e:	2b00      	cmp	r3, #0
 8008160:	d00a      	beq.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8008162:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008166:	d00e      	beq.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8008168:	e01f      	b.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800816a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800816e:	d01f      	beq.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008170:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008174:	d01e      	beq.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008176:	e018      	b.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008178:	4b21      	ldr	r3, [pc, #132]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800817a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800817c:	4a20      	ldr	r2, [pc, #128]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800817e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008182:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008184:	e017      	b.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	3304      	adds	r3, #4
 800818a:	2100      	movs	r1, #0
 800818c:	4618      	mov	r0, r3
 800818e:	f001 fc17 	bl	80099c0 <RCCEx_PLL2_Config>
 8008192:	4603      	mov	r3, r0
 8008194:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008196:	e00e      	b.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	3324      	adds	r3, #36	; 0x24
 800819c:	2100      	movs	r1, #0
 800819e:	4618      	mov	r0, r3
 80081a0:	f001 fcc0 	bl	8009b24 <RCCEx_PLL3_Config>
 80081a4:	4603      	mov	r3, r0
 80081a6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80081a8:	e005      	b.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80081aa:	2301      	movs	r3, #1
 80081ac:	75fb      	strb	r3, [r7, #23]
      break;
 80081ae:	e002      	b.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80081b0:	bf00      	nop
 80081b2:	e000      	b.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80081b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081b6:	7dfb      	ldrb	r3, [r7, #23]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d10a      	bne.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80081bc:	4b10      	ldr	r3, [pc, #64]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80081be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081c0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80081ca:	490d      	ldr	r1, [pc, #52]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80081cc:	4313      	orrs	r3, r2
 80081ce:	658b      	str	r3, [r1, #88]	; 0x58
 80081d0:	e001      	b.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081d2:	7dfb      	ldrb	r3, [r7, #23]
 80081d4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d035      	beq.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081e6:	2b10      	cmp	r3, #16
 80081e8:	d00c      	beq.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80081ea:	2b10      	cmp	r3, #16
 80081ec:	d802      	bhi.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d01b      	beq.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80081f2:	e017      	b.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80081f4:	2b20      	cmp	r3, #32
 80081f6:	d00c      	beq.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80081f8:	2b30      	cmp	r3, #48	; 0x30
 80081fa:	d018      	beq.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80081fc:	e012      	b.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80081fe:	bf00      	nop
 8008200:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008204:	4baf      	ldr	r3, [pc, #700]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008208:	4aae      	ldr	r2, [pc, #696]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800820a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800820e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008210:	e00e      	b.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	3304      	adds	r3, #4
 8008216:	2102      	movs	r1, #2
 8008218:	4618      	mov	r0, r3
 800821a:	f001 fbd1 	bl	80099c0 <RCCEx_PLL2_Config>
 800821e:	4603      	mov	r3, r0
 8008220:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008222:	e005      	b.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008224:	2301      	movs	r3, #1
 8008226:	75fb      	strb	r3, [r7, #23]
      break;
 8008228:	e002      	b.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800822a:	bf00      	nop
 800822c:	e000      	b.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800822e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008230:	7dfb      	ldrb	r3, [r7, #23]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d109      	bne.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008236:	4ba3      	ldr	r3, [pc, #652]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800823a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008242:	49a0      	ldr	r1, [pc, #640]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008244:	4313      	orrs	r3, r2
 8008246:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008248:	e001      	b.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800824a:	7dfb      	ldrb	r3, [r7, #23]
 800824c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008256:	2b00      	cmp	r3, #0
 8008258:	d042      	beq.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800825e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008262:	d01f      	beq.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8008264:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008268:	d805      	bhi.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800826a:	2b00      	cmp	r3, #0
 800826c:	d00a      	beq.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800826e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008272:	d00e      	beq.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8008274:	e01f      	b.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8008276:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800827a:	d01f      	beq.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800827c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008280:	d01e      	beq.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8008282:	e018      	b.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008284:	4b8f      	ldr	r3, [pc, #572]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008288:	4a8e      	ldr	r2, [pc, #568]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800828a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800828e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008290:	e017      	b.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	3304      	adds	r3, #4
 8008296:	2100      	movs	r1, #0
 8008298:	4618      	mov	r0, r3
 800829a:	f001 fb91 	bl	80099c0 <RCCEx_PLL2_Config>
 800829e:	4603      	mov	r3, r0
 80082a0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80082a2:	e00e      	b.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	3324      	adds	r3, #36	; 0x24
 80082a8:	2100      	movs	r1, #0
 80082aa:	4618      	mov	r0, r3
 80082ac:	f001 fc3a 	bl	8009b24 <RCCEx_PLL3_Config>
 80082b0:	4603      	mov	r3, r0
 80082b2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80082b4:	e005      	b.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
 80082b8:	75fb      	strb	r3, [r7, #23]
      break;
 80082ba:	e002      	b.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80082bc:	bf00      	nop
 80082be:	e000      	b.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80082c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082c2:	7dfb      	ldrb	r3, [r7, #23]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d109      	bne.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80082c8:	4b7e      	ldr	r3, [pc, #504]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80082ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082cc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082d4:	497b      	ldr	r1, [pc, #492]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80082d6:	4313      	orrs	r3, r2
 80082d8:	650b      	str	r3, [r1, #80]	; 0x50
 80082da:	e001      	b.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082dc:	7dfb      	ldrb	r3, [r7, #23]
 80082de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d042      	beq.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082f4:	d01b      	beq.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80082f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082fa:	d805      	bhi.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d022      	beq.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8008300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008304:	d00a      	beq.n	800831c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8008306:	e01b      	b.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8008308:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800830c:	d01d      	beq.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800830e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008312:	d01c      	beq.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8008314:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008318:	d01b      	beq.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800831a:	e011      	b.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	3304      	adds	r3, #4
 8008320:	2101      	movs	r1, #1
 8008322:	4618      	mov	r0, r3
 8008324:	f001 fb4c 	bl	80099c0 <RCCEx_PLL2_Config>
 8008328:	4603      	mov	r3, r0
 800832a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800832c:	e012      	b.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	3324      	adds	r3, #36	; 0x24
 8008332:	2101      	movs	r1, #1
 8008334:	4618      	mov	r0, r3
 8008336:	f001 fbf5 	bl	8009b24 <RCCEx_PLL3_Config>
 800833a:	4603      	mov	r3, r0
 800833c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800833e:	e009      	b.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008340:	2301      	movs	r3, #1
 8008342:	75fb      	strb	r3, [r7, #23]
      break;
 8008344:	e006      	b.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8008346:	bf00      	nop
 8008348:	e004      	b.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800834a:	bf00      	nop
 800834c:	e002      	b.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800834e:	bf00      	nop
 8008350:	e000      	b.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8008352:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008354:	7dfb      	ldrb	r3, [r7, #23]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d109      	bne.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800835a:	4b5a      	ldr	r3, [pc, #360]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800835c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800835e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008366:	4957      	ldr	r1, [pc, #348]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008368:	4313      	orrs	r3, r2
 800836a:	650b      	str	r3, [r1, #80]	; 0x50
 800836c:	e001      	b.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800836e:	7dfb      	ldrb	r3, [r7, #23]
 8008370:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800837a:	2b00      	cmp	r3, #0
 800837c:	d044      	beq.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008384:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008388:	d01b      	beq.n	80083c2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800838a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800838e:	d805      	bhi.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8008390:	2b00      	cmp	r3, #0
 8008392:	d022      	beq.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008394:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008398:	d00a      	beq.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800839a:	e01b      	b.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800839c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083a0:	d01d      	beq.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80083a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80083a6:	d01c      	beq.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80083a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80083ac:	d01b      	beq.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80083ae:	e011      	b.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	3304      	adds	r3, #4
 80083b4:	2101      	movs	r1, #1
 80083b6:	4618      	mov	r0, r3
 80083b8:	f001 fb02 	bl	80099c0 <RCCEx_PLL2_Config>
 80083bc:	4603      	mov	r3, r0
 80083be:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80083c0:	e012      	b.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	3324      	adds	r3, #36	; 0x24
 80083c6:	2101      	movs	r1, #1
 80083c8:	4618      	mov	r0, r3
 80083ca:	f001 fbab 	bl	8009b24 <RCCEx_PLL3_Config>
 80083ce:	4603      	mov	r3, r0
 80083d0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80083d2:	e009      	b.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80083d4:	2301      	movs	r3, #1
 80083d6:	75fb      	strb	r3, [r7, #23]
      break;
 80083d8:	e006      	b.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80083da:	bf00      	nop
 80083dc:	e004      	b.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80083de:	bf00      	nop
 80083e0:	e002      	b.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80083e2:	bf00      	nop
 80083e4:	e000      	b.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80083e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083e8:	7dfb      	ldrb	r3, [r7, #23]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d10a      	bne.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80083ee:	4b35      	ldr	r3, [pc, #212]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80083f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083f2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80083fc:	4931      	ldr	r1, [pc, #196]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80083fe:	4313      	orrs	r3, r2
 8008400:	658b      	str	r3, [r1, #88]	; 0x58
 8008402:	e001      	b.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008404:	7dfb      	ldrb	r3, [r7, #23]
 8008406:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008410:	2b00      	cmp	r3, #0
 8008412:	d02d      	beq.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008418:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800841c:	d005      	beq.n	800842a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800841e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008422:	d009      	beq.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8008424:	2b00      	cmp	r3, #0
 8008426:	d013      	beq.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8008428:	e00f      	b.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800842a:	4b26      	ldr	r3, [pc, #152]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800842c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800842e:	4a25      	ldr	r2, [pc, #148]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008434:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008436:	e00c      	b.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	3304      	adds	r3, #4
 800843c:	2101      	movs	r1, #1
 800843e:	4618      	mov	r0, r3
 8008440:	f001 fabe 	bl	80099c0 <RCCEx_PLL2_Config>
 8008444:	4603      	mov	r3, r0
 8008446:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008448:	e003      	b.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	75fb      	strb	r3, [r7, #23]
      break;
 800844e:	e000      	b.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8008450:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008452:	7dfb      	ldrb	r3, [r7, #23]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d109      	bne.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008458:	4b1a      	ldr	r3, [pc, #104]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800845a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800845c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008464:	4917      	ldr	r1, [pc, #92]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008466:	4313      	orrs	r3, r2
 8008468:	650b      	str	r3, [r1, #80]	; 0x50
 800846a:	e001      	b.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800846c:	7dfb      	ldrb	r3, [r7, #23]
 800846e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008478:	2b00      	cmp	r3, #0
 800847a:	d035      	beq.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008480:	2b03      	cmp	r3, #3
 8008482:	d81b      	bhi.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008484:	a201      	add	r2, pc, #4	; (adr r2, 800848c <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8008486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800848a:	bf00      	nop
 800848c:	080084c9 	.word	0x080084c9
 8008490:	0800849d 	.word	0x0800849d
 8008494:	080084ab 	.word	0x080084ab
 8008498:	080084c9 	.word	0x080084c9
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800849c:	4b09      	ldr	r3, [pc, #36]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800849e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a0:	4a08      	ldr	r2, [pc, #32]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80084a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80084a8:	e00f      	b.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	3304      	adds	r3, #4
 80084ae:	2102      	movs	r1, #2
 80084b0:	4618      	mov	r0, r3
 80084b2:	f001 fa85 	bl	80099c0 <RCCEx_PLL2_Config>
 80084b6:	4603      	mov	r3, r0
 80084b8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80084ba:	e006      	b.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80084bc:	2301      	movs	r3, #1
 80084be:	75fb      	strb	r3, [r7, #23]
      break;
 80084c0:	e003      	b.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80084c2:	bf00      	nop
 80084c4:	58024400 	.word	0x58024400
      break;
 80084c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084ca:	7dfb      	ldrb	r3, [r7, #23]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d109      	bne.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80084d0:	4bba      	ldr	r3, [pc, #744]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80084d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084d4:	f023 0203 	bic.w	r2, r3, #3
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084dc:	49b7      	ldr	r1, [pc, #732]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80084de:	4313      	orrs	r3, r2
 80084e0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80084e2:	e001      	b.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084e4:	7dfb      	ldrb	r3, [r7, #23]
 80084e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	f000 8086 	beq.w	8008602 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80084f6:	4bb2      	ldr	r3, [pc, #712]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4ab1      	ldr	r2, [pc, #708]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80084fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008500:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008502:	f7f9 fd43 	bl	8001f8c <HAL_GetTick>
 8008506:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008508:	e009      	b.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800850a:	f7f9 fd3f 	bl	8001f8c <HAL_GetTick>
 800850e:	4602      	mov	r2, r0
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	1ad3      	subs	r3, r2, r3
 8008514:	2b64      	cmp	r3, #100	; 0x64
 8008516:	d902      	bls.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8008518:	2303      	movs	r3, #3
 800851a:	75fb      	strb	r3, [r7, #23]
        break;
 800851c:	e005      	b.n	800852a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800851e:	4ba8      	ldr	r3, [pc, #672]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008526:	2b00      	cmp	r3, #0
 8008528:	d0ef      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800852a:	7dfb      	ldrb	r3, [r7, #23]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d166      	bne.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008530:	4ba2      	ldr	r3, [pc, #648]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008532:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800853a:	4053      	eors	r3, r2
 800853c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008540:	2b00      	cmp	r3, #0
 8008542:	d013      	beq.n	800856c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008544:	4b9d      	ldr	r3, [pc, #628]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800854c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800854e:	4b9b      	ldr	r3, [pc, #620]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008552:	4a9a      	ldr	r2, [pc, #616]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008558:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800855a:	4b98      	ldr	r3, [pc, #608]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800855c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800855e:	4a97      	ldr	r2, [pc, #604]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008560:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008564:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008566:	4a95      	ldr	r2, [pc, #596]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008576:	d115      	bne.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008578:	f7f9 fd08 	bl	8001f8c <HAL_GetTick>
 800857c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800857e:	e00b      	b.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008580:	f7f9 fd04 	bl	8001f8c <HAL_GetTick>
 8008584:	4602      	mov	r2, r0
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	1ad3      	subs	r3, r2, r3
 800858a:	f241 3288 	movw	r2, #5000	; 0x1388
 800858e:	4293      	cmp	r3, r2
 8008590:	d902      	bls.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8008592:	2303      	movs	r3, #3
 8008594:	75fb      	strb	r3, [r7, #23]
            break;
 8008596:	e005      	b.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008598:	4b88      	ldr	r3, [pc, #544]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800859a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800859c:	f003 0302 	and.w	r3, r3, #2
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d0ed      	beq.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80085a4:	7dfb      	ldrb	r3, [r7, #23]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d126      	bne.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80085b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085b8:	d10d      	bne.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80085ba:	4b80      	ldr	r3, [pc, #512]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80085bc:	691b      	ldr	r3, [r3, #16]
 80085be:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80085c8:	0919      	lsrs	r1, r3, #4
 80085ca:	4b7e      	ldr	r3, [pc, #504]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80085cc:	400b      	ands	r3, r1
 80085ce:	497b      	ldr	r1, [pc, #492]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80085d0:	4313      	orrs	r3, r2
 80085d2:	610b      	str	r3, [r1, #16]
 80085d4:	e005      	b.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80085d6:	4b79      	ldr	r3, [pc, #484]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80085d8:	691b      	ldr	r3, [r3, #16]
 80085da:	4a78      	ldr	r2, [pc, #480]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80085dc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80085e0:	6113      	str	r3, [r2, #16]
 80085e2:	4b76      	ldr	r3, [pc, #472]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80085e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80085ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80085f0:	4972      	ldr	r1, [pc, #456]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80085f2:	4313      	orrs	r3, r2
 80085f4:	670b      	str	r3, [r1, #112]	; 0x70
 80085f6:	e004      	b.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80085f8:	7dfb      	ldrb	r3, [r7, #23]
 80085fa:	75bb      	strb	r3, [r7, #22]
 80085fc:	e001      	b.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085fe:	7dfb      	ldrb	r3, [r7, #23]
 8008600:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f003 0301 	and.w	r3, r3, #1
 800860a:	2b00      	cmp	r3, #0
 800860c:	d07d      	beq.n	800870a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008612:	2b28      	cmp	r3, #40	; 0x28
 8008614:	d866      	bhi.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8008616:	a201      	add	r2, pc, #4	; (adr r2, 800861c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8008618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800861c:	080086eb 	.word	0x080086eb
 8008620:	080086e5 	.word	0x080086e5
 8008624:	080086e5 	.word	0x080086e5
 8008628:	080086e5 	.word	0x080086e5
 800862c:	080086e5 	.word	0x080086e5
 8008630:	080086e5 	.word	0x080086e5
 8008634:	080086e5 	.word	0x080086e5
 8008638:	080086e5 	.word	0x080086e5
 800863c:	080086c1 	.word	0x080086c1
 8008640:	080086e5 	.word	0x080086e5
 8008644:	080086e5 	.word	0x080086e5
 8008648:	080086e5 	.word	0x080086e5
 800864c:	080086e5 	.word	0x080086e5
 8008650:	080086e5 	.word	0x080086e5
 8008654:	080086e5 	.word	0x080086e5
 8008658:	080086e5 	.word	0x080086e5
 800865c:	080086d3 	.word	0x080086d3
 8008660:	080086e5 	.word	0x080086e5
 8008664:	080086e5 	.word	0x080086e5
 8008668:	080086e5 	.word	0x080086e5
 800866c:	080086e5 	.word	0x080086e5
 8008670:	080086e5 	.word	0x080086e5
 8008674:	080086e5 	.word	0x080086e5
 8008678:	080086e5 	.word	0x080086e5
 800867c:	080086eb 	.word	0x080086eb
 8008680:	080086e5 	.word	0x080086e5
 8008684:	080086e5 	.word	0x080086e5
 8008688:	080086e5 	.word	0x080086e5
 800868c:	080086e5 	.word	0x080086e5
 8008690:	080086e5 	.word	0x080086e5
 8008694:	080086e5 	.word	0x080086e5
 8008698:	080086e5 	.word	0x080086e5
 800869c:	080086eb 	.word	0x080086eb
 80086a0:	080086e5 	.word	0x080086e5
 80086a4:	080086e5 	.word	0x080086e5
 80086a8:	080086e5 	.word	0x080086e5
 80086ac:	080086e5 	.word	0x080086e5
 80086b0:	080086e5 	.word	0x080086e5
 80086b4:	080086e5 	.word	0x080086e5
 80086b8:	080086e5 	.word	0x080086e5
 80086bc:	080086eb 	.word	0x080086eb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	3304      	adds	r3, #4
 80086c4:	2101      	movs	r1, #1
 80086c6:	4618      	mov	r0, r3
 80086c8:	f001 f97a 	bl	80099c0 <RCCEx_PLL2_Config>
 80086cc:	4603      	mov	r3, r0
 80086ce:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80086d0:	e00c      	b.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	3324      	adds	r3, #36	; 0x24
 80086d6:	2101      	movs	r1, #1
 80086d8:	4618      	mov	r0, r3
 80086da:	f001 fa23 	bl	8009b24 <RCCEx_PLL3_Config>
 80086de:	4603      	mov	r3, r0
 80086e0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80086e2:	e003      	b.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	75fb      	strb	r3, [r7, #23]
      break;
 80086e8:	e000      	b.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80086ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086ec:	7dfb      	ldrb	r3, [r7, #23]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d109      	bne.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80086f2:	4b32      	ldr	r3, [pc, #200]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80086f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086f6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086fe:	492f      	ldr	r1, [pc, #188]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008700:	4313      	orrs	r3, r2
 8008702:	654b      	str	r3, [r1, #84]	; 0x54
 8008704:	e001      	b.n	800870a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008706:	7dfb      	ldrb	r3, [r7, #23]
 8008708:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f003 0302 	and.w	r3, r3, #2
 8008712:	2b00      	cmp	r3, #0
 8008714:	d037      	beq.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800871a:	2b05      	cmp	r3, #5
 800871c:	d820      	bhi.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800871e:	a201      	add	r2, pc, #4	; (adr r2, 8008724 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8008720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008724:	08008767 	.word	0x08008767
 8008728:	0800873d 	.word	0x0800873d
 800872c:	0800874f 	.word	0x0800874f
 8008730:	08008767 	.word	0x08008767
 8008734:	08008767 	.word	0x08008767
 8008738:	08008767 	.word	0x08008767
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	3304      	adds	r3, #4
 8008740:	2101      	movs	r1, #1
 8008742:	4618      	mov	r0, r3
 8008744:	f001 f93c 	bl	80099c0 <RCCEx_PLL2_Config>
 8008748:	4603      	mov	r3, r0
 800874a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800874c:	e00c      	b.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	3324      	adds	r3, #36	; 0x24
 8008752:	2101      	movs	r1, #1
 8008754:	4618      	mov	r0, r3
 8008756:	f001 f9e5 	bl	8009b24 <RCCEx_PLL3_Config>
 800875a:	4603      	mov	r3, r0
 800875c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800875e:	e003      	b.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008760:	2301      	movs	r3, #1
 8008762:	75fb      	strb	r3, [r7, #23]
      break;
 8008764:	e000      	b.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8008766:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008768:	7dfb      	ldrb	r3, [r7, #23]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d109      	bne.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800876e:	4b13      	ldr	r3, [pc, #76]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008772:	f023 0207 	bic.w	r2, r3, #7
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800877a:	4910      	ldr	r1, [pc, #64]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800877c:	4313      	orrs	r3, r2
 800877e:	654b      	str	r3, [r1, #84]	; 0x54
 8008780:	e001      	b.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008782:	7dfb      	ldrb	r3, [r7, #23]
 8008784:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f003 0304 	and.w	r3, r3, #4
 800878e:	2b00      	cmp	r3, #0
 8008790:	d040      	beq.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008798:	2b05      	cmp	r3, #5
 800879a:	d827      	bhi.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800879c:	a201      	add	r2, pc, #4	; (adr r2, 80087a4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800879e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a2:	bf00      	nop
 80087a4:	080087f3 	.word	0x080087f3
 80087a8:	080087c9 	.word	0x080087c9
 80087ac:	080087db 	.word	0x080087db
 80087b0:	080087f3 	.word	0x080087f3
 80087b4:	080087f3 	.word	0x080087f3
 80087b8:	080087f3 	.word	0x080087f3
 80087bc:	58024400 	.word	0x58024400
 80087c0:	58024800 	.word	0x58024800
 80087c4:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	3304      	adds	r3, #4
 80087cc:	2101      	movs	r1, #1
 80087ce:	4618      	mov	r0, r3
 80087d0:	f001 f8f6 	bl	80099c0 <RCCEx_PLL2_Config>
 80087d4:	4603      	mov	r3, r0
 80087d6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80087d8:	e00c      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	3324      	adds	r3, #36	; 0x24
 80087de:	2101      	movs	r1, #1
 80087e0:	4618      	mov	r0, r3
 80087e2:	f001 f99f 	bl	8009b24 <RCCEx_PLL3_Config>
 80087e6:	4603      	mov	r3, r0
 80087e8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80087ea:	e003      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	75fb      	strb	r3, [r7, #23]
      break;
 80087f0:	e000      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80087f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087f4:	7dfb      	ldrb	r3, [r7, #23]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d10a      	bne.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80087fa:	4bb2      	ldr	r3, [pc, #712]	; (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80087fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087fe:	f023 0207 	bic.w	r2, r3, #7
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008808:	49ae      	ldr	r1, [pc, #696]	; (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800880a:	4313      	orrs	r3, r2
 800880c:	658b      	str	r3, [r1, #88]	; 0x58
 800880e:	e001      	b.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008810:	7dfb      	ldrb	r3, [r7, #23]
 8008812:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f003 0320 	and.w	r3, r3, #32
 800881c:	2b00      	cmp	r3, #0
 800881e:	d044      	beq.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008826:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800882a:	d01b      	beq.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800882c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008830:	d805      	bhi.n	800883e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8008832:	2b00      	cmp	r3, #0
 8008834:	d022      	beq.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8008836:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800883a:	d00a      	beq.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800883c:	e01b      	b.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800883e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008842:	d01d      	beq.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8008844:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008848:	d01c      	beq.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800884a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800884e:	d01b      	beq.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8008850:	e011      	b.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	3304      	adds	r3, #4
 8008856:	2100      	movs	r1, #0
 8008858:	4618      	mov	r0, r3
 800885a:	f001 f8b1 	bl	80099c0 <RCCEx_PLL2_Config>
 800885e:	4603      	mov	r3, r0
 8008860:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008862:	e012      	b.n	800888a <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	3324      	adds	r3, #36	; 0x24
 8008868:	2102      	movs	r1, #2
 800886a:	4618      	mov	r0, r3
 800886c:	f001 f95a 	bl	8009b24 <RCCEx_PLL3_Config>
 8008870:	4603      	mov	r3, r0
 8008872:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008874:	e009      	b.n	800888a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	75fb      	strb	r3, [r7, #23]
      break;
 800887a:	e006      	b.n	800888a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800887c:	bf00      	nop
 800887e:	e004      	b.n	800888a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8008880:	bf00      	nop
 8008882:	e002      	b.n	800888a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8008884:	bf00      	nop
 8008886:	e000      	b.n	800888a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8008888:	bf00      	nop
    }

    if(ret == HAL_OK)
 800888a:	7dfb      	ldrb	r3, [r7, #23]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d10a      	bne.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008890:	4b8c      	ldr	r3, [pc, #560]	; (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008894:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800889e:	4989      	ldr	r1, [pc, #548]	; (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80088a0:	4313      	orrs	r3, r2
 80088a2:	654b      	str	r3, [r1, #84]	; 0x54
 80088a4:	e001      	b.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088a6:	7dfb      	ldrb	r3, [r7, #23]
 80088a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d044      	beq.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80088bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088c0:	d01b      	beq.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80088c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088c6:	d805      	bhi.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d022      	beq.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80088cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088d0:	d00a      	beq.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80088d2:	e01b      	b.n	800890c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80088d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088d8:	d01d      	beq.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80088da:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80088de:	d01c      	beq.n	800891a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80088e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80088e4:	d01b      	beq.n	800891e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80088e6:	e011      	b.n	800890c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	3304      	adds	r3, #4
 80088ec:	2100      	movs	r1, #0
 80088ee:	4618      	mov	r0, r3
 80088f0:	f001 f866 	bl	80099c0 <RCCEx_PLL2_Config>
 80088f4:	4603      	mov	r3, r0
 80088f6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80088f8:	e012      	b.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	3324      	adds	r3, #36	; 0x24
 80088fe:	2102      	movs	r1, #2
 8008900:	4618      	mov	r0, r3
 8008902:	f001 f90f 	bl	8009b24 <RCCEx_PLL3_Config>
 8008906:	4603      	mov	r3, r0
 8008908:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800890a:	e009      	b.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800890c:	2301      	movs	r3, #1
 800890e:	75fb      	strb	r3, [r7, #23]
      break;
 8008910:	e006      	b.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8008912:	bf00      	nop
 8008914:	e004      	b.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8008916:	bf00      	nop
 8008918:	e002      	b.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800891a:	bf00      	nop
 800891c:	e000      	b.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800891e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008920:	7dfb      	ldrb	r3, [r7, #23]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d10a      	bne.n	800893c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008926:	4b67      	ldr	r3, [pc, #412]	; (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800892a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008934:	4963      	ldr	r1, [pc, #396]	; (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008936:	4313      	orrs	r3, r2
 8008938:	658b      	str	r3, [r1, #88]	; 0x58
 800893a:	e001      	b.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800893c:	7dfb      	ldrb	r3, [r7, #23]
 800893e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008948:	2b00      	cmp	r3, #0
 800894a:	d044      	beq.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008952:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008956:	d01b      	beq.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8008958:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800895c:	d805      	bhi.n	800896a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800895e:	2b00      	cmp	r3, #0
 8008960:	d022      	beq.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008962:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008966:	d00a      	beq.n	800897e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008968:	e01b      	b.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800896a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800896e:	d01d      	beq.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8008970:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008974:	d01c      	beq.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8008976:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800897a:	d01b      	beq.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800897c:	e011      	b.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	3304      	adds	r3, #4
 8008982:	2100      	movs	r1, #0
 8008984:	4618      	mov	r0, r3
 8008986:	f001 f81b 	bl	80099c0 <RCCEx_PLL2_Config>
 800898a:	4603      	mov	r3, r0
 800898c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800898e:	e012      	b.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	3324      	adds	r3, #36	; 0x24
 8008994:	2102      	movs	r1, #2
 8008996:	4618      	mov	r0, r3
 8008998:	f001 f8c4 	bl	8009b24 <RCCEx_PLL3_Config>
 800899c:	4603      	mov	r3, r0
 800899e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80089a0:	e009      	b.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80089a2:	2301      	movs	r3, #1
 80089a4:	75fb      	strb	r3, [r7, #23]
      break;
 80089a6:	e006      	b.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80089a8:	bf00      	nop
 80089aa:	e004      	b.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80089ac:	bf00      	nop
 80089ae:	e002      	b.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80089b0:	bf00      	nop
 80089b2:	e000      	b.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80089b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089b6:	7dfb      	ldrb	r3, [r7, #23]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d10a      	bne.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80089bc:	4b41      	ldr	r3, [pc, #260]	; (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80089be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089c0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80089ca:	493e      	ldr	r1, [pc, #248]	; (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80089cc:	4313      	orrs	r3, r2
 80089ce:	658b      	str	r3, [r1, #88]	; 0x58
 80089d0:	e001      	b.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089d2:	7dfb      	ldrb	r3, [r7, #23]
 80089d4:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f003 0308 	and.w	r3, r3, #8
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d01a      	beq.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089ec:	d10a      	bne.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	3324      	adds	r3, #36	; 0x24
 80089f2:	2102      	movs	r1, #2
 80089f4:	4618      	mov	r0, r3
 80089f6:	f001 f895 	bl	8009b24 <RCCEx_PLL3_Config>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d001      	beq.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008a04:	4b2f      	ldr	r3, [pc, #188]	; (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a08:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a12:	492c      	ldr	r1, [pc, #176]	; (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008a14:	4313      	orrs	r3, r2
 8008a16:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f003 0310 	and.w	r3, r3, #16
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d01a      	beq.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a2e:	d10a      	bne.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	3324      	adds	r3, #36	; 0x24
 8008a34:	2102      	movs	r1, #2
 8008a36:	4618      	mov	r0, r3
 8008a38:	f001 f874 	bl	8009b24 <RCCEx_PLL3_Config>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d001      	beq.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008a46:	4b1f      	ldr	r3, [pc, #124]	; (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a54:	491b      	ldr	r1, [pc, #108]	; (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008a56:	4313      	orrs	r3, r2
 8008a58:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d032      	beq.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a70:	d00d      	beq.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8008a72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a76:	d016      	beq.n	8008aa6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d111      	bne.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	3304      	adds	r3, #4
 8008a80:	2100      	movs	r1, #0
 8008a82:	4618      	mov	r0, r3
 8008a84:	f000 ff9c 	bl	80099c0 <RCCEx_PLL2_Config>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008a8c:	e00c      	b.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	3324      	adds	r3, #36	; 0x24
 8008a92:	2102      	movs	r1, #2
 8008a94:	4618      	mov	r0, r3
 8008a96:	f001 f845 	bl	8009b24 <RCCEx_PLL3_Config>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008a9e:	e003      	b.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	75fb      	strb	r3, [r7, #23]
      break;
 8008aa4:	e000      	b.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8008aa6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008aa8:	7dfb      	ldrb	r3, [r7, #23]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d10c      	bne.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008aae:	4b05      	ldr	r3, [pc, #20]	; (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ab2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008abc:	4901      	ldr	r1, [pc, #4]	; (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	658b      	str	r3, [r1, #88]	; 0x58
 8008ac2:	e003      	b.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8008ac4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ac8:	7dfb      	ldrb	r3, [r7, #23]
 8008aca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d02f      	beq.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ade:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ae2:	d00c      	beq.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8008ae4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008ae8:	d015      	beq.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8008aea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008aee:	d10f      	bne.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008af0:	4b79      	ldr	r3, [pc, #484]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af4:	4a78      	ldr	r2, [pc, #480]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008afa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008afc:	e00c      	b.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	3324      	adds	r3, #36	; 0x24
 8008b02:	2101      	movs	r1, #1
 8008b04:	4618      	mov	r0, r3
 8008b06:	f001 f80d 	bl	8009b24 <RCCEx_PLL3_Config>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008b0e:	e003      	b.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b10:	2301      	movs	r3, #1
 8008b12:	75fb      	strb	r3, [r7, #23]
      break;
 8008b14:	e000      	b.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8008b16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b18:	7dfb      	ldrb	r3, [r7, #23]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d10a      	bne.n	8008b34 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008b1e:	4b6e      	ldr	r3, [pc, #440]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b2c:	496a      	ldr	r1, [pc, #424]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	654b      	str	r3, [r1, #84]	; 0x54
 8008b32:	e001      	b.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b34:	7dfb      	ldrb	r3, [r7, #23]
 8008b36:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d029      	beq.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d003      	beq.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8008b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b50:	d007      	beq.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8008b52:	e00f      	b.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b54:	4b60      	ldr	r3, [pc, #384]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b58:	4a5f      	ldr	r2, [pc, #380]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008b5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008b60:	e00b      	b.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	3304      	adds	r3, #4
 8008b66:	2102      	movs	r1, #2
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f000 ff29 	bl	80099c0 <RCCEx_PLL2_Config>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008b72:	e002      	b.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8008b74:	2301      	movs	r3, #1
 8008b76:	75fb      	strb	r3, [r7, #23]
      break;
 8008b78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b7a:	7dfb      	ldrb	r3, [r7, #23]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d109      	bne.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008b80:	4b55      	ldr	r3, [pc, #340]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b8c:	4952      	ldr	r1, [pc, #328]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008b92:	e001      	b.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b94:	7dfb      	ldrb	r3, [r7, #23]
 8008b96:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d00a      	beq.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	3324      	adds	r3, #36	; 0x24
 8008ba8:	2102      	movs	r1, #2
 8008baa:	4618      	mov	r0, r3
 8008bac:	f000 ffba 	bl	8009b24 <RCCEx_PLL3_Config>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d001      	beq.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d02f      	beq.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008bca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bce:	d00c      	beq.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008bd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bd4:	d802      	bhi.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d011      	beq.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8008bda:	e00d      	b.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8008bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008be0:	d00f      	beq.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8008be2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008be6:	d00e      	beq.n	8008c06 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8008be8:	e006      	b.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bea:	4b3b      	ldr	r3, [pc, #236]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bee:	4a3a      	ldr	r2, [pc, #232]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bf4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008bf6:	e007      	b.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	75fb      	strb	r3, [r7, #23]
      break;
 8008bfc:	e004      	b.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8008bfe:	bf00      	nop
 8008c00:	e002      	b.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8008c02:	bf00      	nop
 8008c04:	e000      	b.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8008c06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c08:	7dfb      	ldrb	r3, [r7, #23]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d109      	bne.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008c0e:	4b32      	ldr	r3, [pc, #200]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c12:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c1a:	492f      	ldr	r1, [pc, #188]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	654b      	str	r3, [r1, #84]	; 0x54
 8008c20:	e001      	b.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c22:	7dfb      	ldrb	r3, [r7, #23]
 8008c24:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d008      	beq.n	8008c44 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008c32:	4b29      	ldr	r3, [pc, #164]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c36:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c3e:	4926      	ldr	r1, [pc, #152]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008c40:	4313      	orrs	r3, r2
 8008c42:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d009      	beq.n	8008c64 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008c50:	4b21      	ldr	r3, [pc, #132]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008c52:	691b      	ldr	r3, [r3, #16]
 8008c54:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008c5e:	491e      	ldr	r1, [pc, #120]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008c60:	4313      	orrs	r3, r2
 8008c62:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d008      	beq.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008c70:	4b19      	ldr	r3, [pc, #100]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c74:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c7c:	4916      	ldr	r1, [pc, #88]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d00d      	beq.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008c8e:	4b12      	ldr	r3, [pc, #72]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	4a11      	ldr	r2, [pc, #68]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008c94:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008c98:	6113      	str	r3, [r2, #16]
 8008c9a:	4b0f      	ldr	r3, [pc, #60]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008c9c:	691a      	ldr	r2, [r3, #16]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008ca4:	490c      	ldr	r1, [pc, #48]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	da08      	bge.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008cb2:	4b09      	ldr	r3, [pc, #36]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cb6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cbe:	4906      	ldr	r1, [pc, #24]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8008cc4:	7dbb      	ldrb	r3, [r7, #22]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d101      	bne.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	e000      	b.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8008cce:	2301      	movs	r3, #1
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3718      	adds	r7, #24
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}
 8008cd8:	58024400 	.word	0x58024400

08008cdc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b090      	sub	sp, #64	; 0x40
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cea:	d150      	bne.n	8008d8e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008cec:	4ba1      	ldr	r3, [pc, #644]	; (8008f74 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cf0:	f003 0307 	and.w	r3, r3, #7
 8008cf4:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf8:	2b04      	cmp	r3, #4
 8008cfa:	d844      	bhi.n	8008d86 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8008cfc:	a201      	add	r2, pc, #4	; (adr r2, 8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8008cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d02:	bf00      	nop
 8008d04:	08008d19 	.word	0x08008d19
 8008d08:	08008d29 	.word	0x08008d29
 8008d0c:	08008d39 	.word	0x08008d39
 8008d10:	08008d81 	.word	0x08008d81
 8008d14:	08008d49 	.word	0x08008d49
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f000 fd03 	bl	8009728 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d26:	e241      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d28:	f107 0318 	add.w	r3, r7, #24
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f000 fa63 	bl	80091f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d36:	e239      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d38:	f107 030c 	add.w	r3, r7, #12
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f000 fba7 	bl	8009490 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d46:	e231      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008d48:	4b8a      	ldr	r3, [pc, #552]	; (8008f74 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d50:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d102      	bne.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008d58:	4b87      	ldr	r3, [pc, #540]	; (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008d5c:	e226      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d64:	d102      	bne.n	8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8008d66:	4b85      	ldr	r3, [pc, #532]	; (8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008d68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d6a:	e21f      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d72:	d102      	bne.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8008d74:	4b82      	ldr	r3, [pc, #520]	; (8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008d76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d78:	e218      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d7e:	e215      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008d80:	4b80      	ldr	r3, [pc, #512]	; (8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008d82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d84:	e212      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008d86:	2300      	movs	r3, #0
 8008d88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d8a:	bf00      	nop
 8008d8c:	e20e      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d94:	d14f      	bne.n	8008e36 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8008d96:	4b77      	ldr	r3, [pc, #476]	; (8008f74 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d9a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008d9e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da2:	2b80      	cmp	r3, #128	; 0x80
 8008da4:	d01c      	beq.n	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8008da6:	2b80      	cmp	r3, #128	; 0x80
 8008da8:	d804      	bhi.n	8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d008      	beq.n	8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8008dae:	2b40      	cmp	r3, #64	; 0x40
 8008db0:	d00e      	beq.n	8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8008db2:	e03c      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8008db4:	2bc0      	cmp	r3, #192	; 0xc0
 8008db6:	d037      	beq.n	8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8008db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dbc:	d018      	beq.n	8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8008dbe:	e036      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f000 fcaf 	bl	8009728 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dce:	e1ed      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dd0:	f107 0318 	add.w	r3, r7, #24
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f000 fa0f 	bl	80091f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008dda:	69bb      	ldr	r3, [r7, #24]
 8008ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dde:	e1e5      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008de0:	f107 030c 	add.w	r3, r7, #12
 8008de4:	4618      	mov	r0, r3
 8008de6:	f000 fb53 	bl	8009490 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dee:	e1dd      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008df0:	4b60      	ldr	r3, [pc, #384]	; (8008f74 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008df4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008df8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d102      	bne.n	8008e06 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008e00:	4b5d      	ldr	r3, [pc, #372]	; (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008e02:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008e04:	e1d2      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e0c:	d102      	bne.n	8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8008e0e:	4b5b      	ldr	r3, [pc, #364]	; (8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008e10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e12:	e1cb      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e1a:	d102      	bne.n	8008e22 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8008e1c:	4b58      	ldr	r3, [pc, #352]	; (8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e20:	e1c4      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008e22:	2300      	movs	r3, #0
 8008e24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e26:	e1c1      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008e28:	4b56      	ldr	r3, [pc, #344]	; (8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e2c:	e1be      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e32:	bf00      	nop
 8008e34:	e1ba      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e3c:	d153      	bne.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008e3e:	4b4d      	ldr	r3, [pc, #308]	; (8008f74 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e42:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008e46:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e4e:	d01f      	beq.n	8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8008e50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e54:	d805      	bhi.n	8008e62 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d00a      	beq.n	8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8008e5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e5e:	d00f      	beq.n	8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8008e60:	e03d      	b.n	8008ede <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8008e62:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008e66:	d037      	beq.n	8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8008e68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e6c:	d018      	beq.n	8008ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8008e6e:	e036      	b.n	8008ede <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e74:	4618      	mov	r0, r3
 8008e76:	f000 fc57 	bl	8009728 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e7e:	e195      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e80:	f107 0318 	add.w	r3, r7, #24
 8008e84:	4618      	mov	r0, r3
 8008e86:	f000 f9b7 	bl	80091f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e8a:	69bb      	ldr	r3, [r7, #24]
 8008e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e8e:	e18d      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e90:	f107 030c 	add.w	r3, r7, #12
 8008e94:	4618      	mov	r0, r3
 8008e96:	f000 fafb 	bl	8009490 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e9e:	e185      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008ea0:	4b34      	ldr	r3, [pc, #208]	; (8008f74 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ea4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008ea8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d102      	bne.n	8008eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008eb0:	4b31      	ldr	r3, [pc, #196]	; (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008eb4:	e17a      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ebc:	d102      	bne.n	8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8008ebe:	4b2f      	ldr	r3, [pc, #188]	; (8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ec2:	e173      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ec6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008eca:	d102      	bne.n	8008ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8008ecc:	4b2c      	ldr	r3, [pc, #176]	; (8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008ece:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ed0:	e16c      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ed6:	e169      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008ed8:	4b2a      	ldr	r3, [pc, #168]	; (8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008eda:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008edc:	e166      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ee2:	bf00      	nop
 8008ee4:	e162      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008eec:	d15d      	bne.n	8008faa <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008eee:	4b21      	ldr	r3, [pc, #132]	; (8008f74 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ef2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008ef6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008efa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008efe:	d01f      	beq.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008f00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f04:	d805      	bhi.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d00a      	beq.n	8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8008f0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008f0e:	d00f      	beq.n	8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8008f10:	e047      	b.n	8008fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8008f12:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008f16:	d041      	beq.n	8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8008f18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008f1c:	d018      	beq.n	8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8008f1e:	e040      	b.n	8008fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f24:	4618      	mov	r0, r3
 8008f26:	f000 fbff 	bl	8009728 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f2e:	e13d      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f30:	f107 0318 	add.w	r3, r7, #24
 8008f34:	4618      	mov	r0, r3
 8008f36:	f000 f95f 	bl	80091f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f3a:	69bb      	ldr	r3, [r7, #24]
 8008f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f3e:	e135      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f40:	f107 030c 	add.w	r3, r7, #12
 8008f44:	4618      	mov	r0, r3
 8008f46:	f000 faa3 	bl	8009490 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f4e:	e12d      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008f50:	4b08      	ldr	r3, [pc, #32]	; (8008f74 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f58:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d102      	bne.n	8008f66 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008f60:	4b05      	ldr	r3, [pc, #20]	; (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008f62:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008f64:	e122      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f6c:	d10c      	bne.n	8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8008f6e:	4b03      	ldr	r3, [pc, #12]	; (8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008f70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f72:	e11b      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8008f74:	58024400 	.word	0x58024400
 8008f78:	03d09000 	.word	0x03d09000
 8008f7c:	003d0900 	.word	0x003d0900
 8008f80:	017d7840 	.word	0x017d7840
 8008f84:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f8e:	d102      	bne.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8008f90:	4b89      	ldr	r3, [pc, #548]	; (80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008f92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f94:	e10a      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008f96:	2300      	movs	r3, #0
 8008f98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f9a:	e107      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008f9c:	4b87      	ldr	r3, [pc, #540]	; (80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8008f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fa0:	e104      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fa6:	bf00      	nop
 8008fa8:	e100      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fb0:	d153      	bne.n	800905a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008fb2:	4b83      	ldr	r3, [pc, #524]	; (80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fb6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008fba:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fc2:	d01f      	beq.n	8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8008fc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fc8:	d805      	bhi.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d00a      	beq.n	8008fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8008fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fd2:	d00f      	beq.n	8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8008fd4:	e03d      	b.n	8009052 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8008fd6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008fda:	d037      	beq.n	800904c <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8008fdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008fe0:	d018      	beq.n	8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8008fe2:	e036      	b.n	8009052 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f000 fb9d 	bl	8009728 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ff2:	e0db      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ff4:	f107 0318 	add.w	r3, r7, #24
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f000 f8fd 	bl	80091f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008ffe:	69bb      	ldr	r3, [r7, #24]
 8009000:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009002:	e0d3      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009004:	f107 030c 	add.w	r3, r7, #12
 8009008:	4618      	mov	r0, r3
 800900a:	f000 fa41 	bl	8009490 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009012:	e0cb      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009014:	4b6a      	ldr	r3, [pc, #424]	; (80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009018:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800901c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800901e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009020:	2b00      	cmp	r3, #0
 8009022:	d102      	bne.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8009024:	4b67      	ldr	r3, [pc, #412]	; (80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8009026:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009028:	e0c0      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800902a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800902c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009030:	d102      	bne.n	8009038 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8009032:	4b65      	ldr	r3, [pc, #404]	; (80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009034:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009036:	e0b9      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8009038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800903a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800903e:	d102      	bne.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8009040:	4b5d      	ldr	r3, [pc, #372]	; (80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8009042:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009044:	e0b2      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8009046:	2300      	movs	r3, #0
 8009048:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800904a:	e0af      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800904c:	4b5b      	ldr	r3, [pc, #364]	; (80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800904e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009050:	e0ac      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8009052:	2300      	movs	r3, #0
 8009054:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009056:	bf00      	nop
 8009058:	e0a8      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009060:	d13d      	bne.n	80090de <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009062:	4b57      	ldr	r3, [pc, #348]	; (80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009066:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800906a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800906c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009072:	d00c      	beq.n	800908e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8009074:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009078:	d011      	beq.n	800909e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800907a:	2b00      	cmp	r3, #0
 800907c:	d12b      	bne.n	80090d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800907e:	f107 0318 	add.w	r3, r7, #24
 8009082:	4618      	mov	r0, r3
 8009084:	f000 f8b8 	bl	80091f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009088:	69bb      	ldr	r3, [r7, #24]
 800908a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800908c:	e08e      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800908e:	f107 030c 	add.w	r3, r7, #12
 8009092:	4618      	mov	r0, r3
 8009094:	f000 f9fc 	bl	8009490 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800909c:	e086      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800909e:	4b48      	ldr	r3, [pc, #288]	; (80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80090a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80090a6:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80090a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d102      	bne.n	80090b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80090ae:	4b45      	ldr	r3, [pc, #276]	; (80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80090b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80090b2:	e07b      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80090b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090ba:	d102      	bne.n	80090c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 80090bc:	4b42      	ldr	r3, [pc, #264]	; (80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80090be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090c0:	e074      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80090c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090c8:	d102      	bne.n	80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 80090ca:	4b3b      	ldr	r3, [pc, #236]	; (80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80090cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090ce:	e06d      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80090d0:	2300      	movs	r3, #0
 80090d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090d4:	e06a      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80090d6:	2300      	movs	r3, #0
 80090d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090da:	bf00      	nop
 80090dc:	e066      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090e4:	d11f      	bne.n	8009126 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80090e6:	4b36      	ldr	r3, [pc, #216]	; (80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80090e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090ee:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80090f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d003      	beq.n	80090fe <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80090f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090fa:	d008      	beq.n	800910e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80090fc:	e00f      	b.n	800911e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009102:	4618      	mov	r0, r3
 8009104:	f000 fb10 	bl	8009728 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800910a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800910c:	e04e      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800910e:	f107 0318 	add.w	r3, r7, #24
 8009112:	4618      	mov	r0, r3
 8009114:	f000 f870 	bl	80091f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009118:	6a3b      	ldr	r3, [r7, #32]
 800911a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800911c:	e046      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800911e:	2300      	movs	r3, #0
 8009120:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009122:	bf00      	nop
 8009124:	e042      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800912c:	d13c      	bne.n	80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800912e:	4b24      	ldr	r3, [pc, #144]	; (80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009132:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009136:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800913a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800913e:	d01e      	beq.n	800917e <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8009140:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009144:	d805      	bhi.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8009146:	2b00      	cmp	r3, #0
 8009148:	d00d      	beq.n	8009166 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800914a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800914e:	d00e      	beq.n	800916e <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8009150:	e026      	b.n	80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8009152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009156:	d01d      	beq.n	8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8009158:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800915c:	d01d      	beq.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800915e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009162:	d014      	beq.n	800918e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8009164:	e01c      	b.n	80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009166:	f000 f831 	bl	80091cc <HAL_RCCEx_GetD3PCLK1Freq>
 800916a:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800916c:	e01e      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800916e:	f107 0318 	add.w	r3, r7, #24
 8009172:	4618      	mov	r0, r3
 8009174:	f000 f840 	bl	80091f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009178:	69fb      	ldr	r3, [r7, #28]
 800917a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800917c:	e016      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800917e:	f107 030c 	add.w	r3, r7, #12
 8009182:	4618      	mov	r0, r3
 8009184:	f000 f984 	bl	8009490 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800918c:	e00e      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 800918e:	4b0d      	ldr	r3, [pc, #52]	; (80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8009190:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009192:	e00b      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8009194:	4b0c      	ldr	r3, [pc, #48]	; (80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009196:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009198:	e008      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 800919a:	4b07      	ldr	r3, [pc, #28]	; (80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800919c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800919e:	e005      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80091a0:	2300      	movs	r3, #0
 80091a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091a4:	bf00      	nop
 80091a6:	e001      	b.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 80091a8:	2300      	movs	r3, #0
 80091aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80091ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3740      	adds	r7, #64	; 0x40
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	017d7840 	.word	0x017d7840
 80091bc:	00bb8000 	.word	0x00bb8000
 80091c0:	58024400 	.word	0x58024400
 80091c4:	03d09000 	.word	0x03d09000
 80091c8:	003d0900 	.word	0x003d0900

080091cc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80091d0:	f7fe fe1e 	bl	8007e10 <HAL_RCC_GetHCLKFreq>
 80091d4:	4601      	mov	r1, r0
 80091d6:	4b06      	ldr	r3, [pc, #24]	; (80091f0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80091d8:	6a1b      	ldr	r3, [r3, #32]
 80091da:	091b      	lsrs	r3, r3, #4
 80091dc:	f003 0307 	and.w	r3, r3, #7
 80091e0:	4a04      	ldr	r2, [pc, #16]	; (80091f4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80091e2:	5cd3      	ldrb	r3, [r2, r3]
 80091e4:	f003 031f 	and.w	r3, r3, #31
 80091e8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	bd80      	pop	{r7, pc}
 80091f0:	58024400 	.word	0x58024400
 80091f4:	080170a0 	.word	0x080170a0

080091f8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b089      	sub	sp, #36	; 0x24
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009200:	4b9d      	ldr	r3, [pc, #628]	; (8009478 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009204:	f003 0303 	and.w	r3, r3, #3
 8009208:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800920a:	4b9b      	ldr	r3, [pc, #620]	; (8009478 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800920c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800920e:	0b1b      	lsrs	r3, r3, #12
 8009210:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009214:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009216:	4b98      	ldr	r3, [pc, #608]	; (8009478 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800921a:	091b      	lsrs	r3, r3, #4
 800921c:	f003 0301 	and.w	r3, r3, #1
 8009220:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009222:	4b95      	ldr	r3, [pc, #596]	; (8009478 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009226:	08db      	lsrs	r3, r3, #3
 8009228:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800922c:	693a      	ldr	r2, [r7, #16]
 800922e:	fb02 f303 	mul.w	r3, r2, r3
 8009232:	ee07 3a90 	vmov	s15, r3
 8009236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800923a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	2b00      	cmp	r3, #0
 8009242:	f000 810a 	beq.w	800945a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8009246:	69bb      	ldr	r3, [r7, #24]
 8009248:	2b01      	cmp	r3, #1
 800924a:	d05a      	beq.n	8009302 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800924c:	2b01      	cmp	r3, #1
 800924e:	d302      	bcc.n	8009256 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8009250:	2b02      	cmp	r3, #2
 8009252:	d078      	beq.n	8009346 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8009254:	e099      	b.n	800938a <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009256:	4b88      	ldr	r3, [pc, #544]	; (8009478 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f003 0320 	and.w	r3, r3, #32
 800925e:	2b00      	cmp	r3, #0
 8009260:	d02d      	beq.n	80092be <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009262:	4b85      	ldr	r3, [pc, #532]	; (8009478 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	08db      	lsrs	r3, r3, #3
 8009268:	f003 0303 	and.w	r3, r3, #3
 800926c:	4a83      	ldr	r2, [pc, #524]	; (800947c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800926e:	fa22 f303 	lsr.w	r3, r2, r3
 8009272:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	ee07 3a90 	vmov	s15, r3
 800927a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	ee07 3a90 	vmov	s15, r3
 8009284:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009288:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800928c:	4b7a      	ldr	r3, [pc, #488]	; (8009478 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800928e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009294:	ee07 3a90 	vmov	s15, r3
 8009298:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800929c:	ed97 6a03 	vldr	s12, [r7, #12]
 80092a0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009480 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80092a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092b8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80092bc:	e087      	b.n	80093ce <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	ee07 3a90 	vmov	s15, r3
 80092c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092c8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009484 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80092cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092d0:	4b69      	ldr	r3, [pc, #420]	; (8009478 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80092d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092d8:	ee07 3a90 	vmov	s15, r3
 80092dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80092e4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009480 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80092e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009300:	e065      	b.n	80093ce <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	ee07 3a90 	vmov	s15, r3
 8009308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800930c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009488 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8009310:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009314:	4b58      	ldr	r3, [pc, #352]	; (8009478 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800931c:	ee07 3a90 	vmov	s15, r3
 8009320:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009324:	ed97 6a03 	vldr	s12, [r7, #12]
 8009328:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009480 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800932c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009330:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009334:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009338:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800933c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009340:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009344:	e043      	b.n	80093ce <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	ee07 3a90 	vmov	s15, r3
 800934c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009350:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800948c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8009354:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009358:	4b47      	ldr	r3, [pc, #284]	; (8009478 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800935a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800935c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009360:	ee07 3a90 	vmov	s15, r3
 8009364:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009368:	ed97 6a03 	vldr	s12, [r7, #12]
 800936c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009480 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009370:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009374:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009378:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800937c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009380:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009384:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009388:	e021      	b.n	80093ce <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	ee07 3a90 	vmov	s15, r3
 8009390:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009394:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8009488 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8009398:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800939c:	4b36      	ldr	r3, [pc, #216]	; (8009478 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800939e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093a4:	ee07 3a90 	vmov	s15, r3
 80093a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80093b0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009480 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80093b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80093cc:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80093ce:	4b2a      	ldr	r3, [pc, #168]	; (8009478 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80093d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d2:	0a5b      	lsrs	r3, r3, #9
 80093d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093d8:	ee07 3a90 	vmov	s15, r3
 80093dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80093e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80093ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093f4:	ee17 2a90 	vmov	r2, s15
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80093fc:	4b1e      	ldr	r3, [pc, #120]	; (8009478 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80093fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009400:	0c1b      	lsrs	r3, r3, #16
 8009402:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009406:	ee07 3a90 	vmov	s15, r3
 800940a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800940e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009412:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009416:	edd7 6a07 	vldr	s13, [r7, #28]
 800941a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800941e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009422:	ee17 2a90 	vmov	r2, s15
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800942a:	4b13      	ldr	r3, [pc, #76]	; (8009478 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800942c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800942e:	0e1b      	lsrs	r3, r3, #24
 8009430:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009434:	ee07 3a90 	vmov	s15, r3
 8009438:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800943c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009440:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009444:	edd7 6a07 	vldr	s13, [r7, #28]
 8009448:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800944c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009450:	ee17 2a90 	vmov	r2, s15
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009458:	e008      	b.n	800946c <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2200      	movs	r2, #0
 800945e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2200      	movs	r2, #0
 8009464:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	609a      	str	r2, [r3, #8]
}
 800946c:	bf00      	nop
 800946e:	3724      	adds	r7, #36	; 0x24
 8009470:	46bd      	mov	sp, r7
 8009472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009476:	4770      	bx	lr
 8009478:	58024400 	.word	0x58024400
 800947c:	03d09000 	.word	0x03d09000
 8009480:	46000000 	.word	0x46000000
 8009484:	4c742400 	.word	0x4c742400
 8009488:	4a742400 	.word	0x4a742400
 800948c:	4bbebc20 	.word	0x4bbebc20

08009490 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009490:	b480      	push	{r7}
 8009492:	b089      	sub	sp, #36	; 0x24
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009498:	4b9d      	ldr	r3, [pc, #628]	; (8009710 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800949a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800949c:	f003 0303 	and.w	r3, r3, #3
 80094a0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80094a2:	4b9b      	ldr	r3, [pc, #620]	; (8009710 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80094a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094a6:	0d1b      	lsrs	r3, r3, #20
 80094a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094ac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80094ae:	4b98      	ldr	r3, [pc, #608]	; (8009710 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80094b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b2:	0a1b      	lsrs	r3, r3, #8
 80094b4:	f003 0301 	and.w	r3, r3, #1
 80094b8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80094ba:	4b95      	ldr	r3, [pc, #596]	; (8009710 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80094bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094be:	08db      	lsrs	r3, r3, #3
 80094c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80094c4:	693a      	ldr	r2, [r7, #16]
 80094c6:	fb02 f303 	mul.w	r3, r2, r3
 80094ca:	ee07 3a90 	vmov	s15, r3
 80094ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	f000 810a 	beq.w	80096f2 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80094de:	69bb      	ldr	r3, [r7, #24]
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d05a      	beq.n	800959a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d302      	bcc.n	80094ee <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80094e8:	2b02      	cmp	r3, #2
 80094ea:	d078      	beq.n	80095de <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80094ec:	e099      	b.n	8009622 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094ee:	4b88      	ldr	r3, [pc, #544]	; (8009710 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f003 0320 	and.w	r3, r3, #32
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d02d      	beq.n	8009556 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80094fa:	4b85      	ldr	r3, [pc, #532]	; (8009710 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	08db      	lsrs	r3, r3, #3
 8009500:	f003 0303 	and.w	r3, r3, #3
 8009504:	4a83      	ldr	r2, [pc, #524]	; (8009714 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8009506:	fa22 f303 	lsr.w	r3, r2, r3
 800950a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	ee07 3a90 	vmov	s15, r3
 8009512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	ee07 3a90 	vmov	s15, r3
 800951c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009520:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009524:	4b7a      	ldr	r3, [pc, #488]	; (8009710 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800952c:	ee07 3a90 	vmov	s15, r3
 8009530:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009534:	ed97 6a03 	vldr	s12, [r7, #12]
 8009538:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009718 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800953c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009540:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009544:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009548:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800954c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009550:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009554:	e087      	b.n	8009666 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	ee07 3a90 	vmov	s15, r3
 800955c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009560:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800971c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8009564:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009568:	4b69      	ldr	r3, [pc, #420]	; (8009710 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800956a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800956c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009570:	ee07 3a90 	vmov	s15, r3
 8009574:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009578:	ed97 6a03 	vldr	s12, [r7, #12]
 800957c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009718 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009580:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009584:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009588:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800958c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009594:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009598:	e065      	b.n	8009666 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	ee07 3a90 	vmov	s15, r3
 80095a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095a4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009720 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80095a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095ac:	4b58      	ldr	r3, [pc, #352]	; (8009710 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80095ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095b4:	ee07 3a90 	vmov	s15, r3
 80095b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80095c0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009718 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80095c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80095dc:	e043      	b.n	8009666 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	ee07 3a90 	vmov	s15, r3
 80095e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095e8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009724 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80095ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095f0:	4b47      	ldr	r3, [pc, #284]	; (8009710 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80095f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095f8:	ee07 3a90 	vmov	s15, r3
 80095fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009600:	ed97 6a03 	vldr	s12, [r7, #12]
 8009604:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009718 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009608:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800960c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009610:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009614:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009618:	ee67 7a27 	vmul.f32	s15, s14, s15
 800961c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009620:	e021      	b.n	8009666 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	ee07 3a90 	vmov	s15, r3
 8009628:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800962c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8009720 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8009630:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009634:	4b36      	ldr	r3, [pc, #216]	; (8009710 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009638:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800963c:	ee07 3a90 	vmov	s15, r3
 8009640:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009644:	ed97 6a03 	vldr	s12, [r7, #12]
 8009648:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009718 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800964c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009650:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009654:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009658:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800965c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009660:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009664:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009666:	4b2a      	ldr	r3, [pc, #168]	; (8009710 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800966a:	0a5b      	lsrs	r3, r3, #9
 800966c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009670:	ee07 3a90 	vmov	s15, r3
 8009674:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009678:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800967c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009680:	edd7 6a07 	vldr	s13, [r7, #28]
 8009684:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009688:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800968c:	ee17 2a90 	vmov	r2, s15
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009694:	4b1e      	ldr	r3, [pc, #120]	; (8009710 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009698:	0c1b      	lsrs	r3, r3, #16
 800969a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800969e:	ee07 3a90 	vmov	s15, r3
 80096a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80096aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80096b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096ba:	ee17 2a90 	vmov	r2, s15
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80096c2:	4b13      	ldr	r3, [pc, #76]	; (8009710 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80096c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096c6:	0e1b      	lsrs	r3, r3, #24
 80096c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096cc:	ee07 3a90 	vmov	s15, r3
 80096d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80096d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80096e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096e8:	ee17 2a90 	vmov	r2, s15
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80096f0:	e008      	b.n	8009704 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2200      	movs	r2, #0
 80096fc:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2200      	movs	r2, #0
 8009702:	609a      	str	r2, [r3, #8]
}
 8009704:	bf00      	nop
 8009706:	3724      	adds	r7, #36	; 0x24
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr
 8009710:	58024400 	.word	0x58024400
 8009714:	03d09000 	.word	0x03d09000
 8009718:	46000000 	.word	0x46000000
 800971c:	4c742400 	.word	0x4c742400
 8009720:	4a742400 	.word	0x4a742400
 8009724:	4bbebc20 	.word	0x4bbebc20

08009728 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009728:	b480      	push	{r7}
 800972a:	b089      	sub	sp, #36	; 0x24
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009730:	4b9d      	ldr	r3, [pc, #628]	; (80099a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009734:	f003 0303 	and.w	r3, r3, #3
 8009738:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800973a:	4b9b      	ldr	r3, [pc, #620]	; (80099a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800973c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800973e:	091b      	lsrs	r3, r3, #4
 8009740:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009744:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009746:	4b98      	ldr	r3, [pc, #608]	; (80099a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800974a:	f003 0301 	and.w	r3, r3, #1
 800974e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009750:	4b95      	ldr	r3, [pc, #596]	; (80099a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009754:	08db      	lsrs	r3, r3, #3
 8009756:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800975a:	693a      	ldr	r2, [r7, #16]
 800975c:	fb02 f303 	mul.w	r3, r2, r3
 8009760:	ee07 3a90 	vmov	s15, r3
 8009764:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009768:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	2b00      	cmp	r3, #0
 8009770:	f000 810a 	beq.w	8009988 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8009774:	69bb      	ldr	r3, [r7, #24]
 8009776:	2b01      	cmp	r3, #1
 8009778:	d05a      	beq.n	8009830 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800977a:	2b01      	cmp	r3, #1
 800977c:	d302      	bcc.n	8009784 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800977e:	2b02      	cmp	r3, #2
 8009780:	d078      	beq.n	8009874 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8009782:	e099      	b.n	80098b8 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009784:	4b88      	ldr	r3, [pc, #544]	; (80099a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f003 0320 	and.w	r3, r3, #32
 800978c:	2b00      	cmp	r3, #0
 800978e:	d02d      	beq.n	80097ec <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009790:	4b85      	ldr	r3, [pc, #532]	; (80099a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	08db      	lsrs	r3, r3, #3
 8009796:	f003 0303 	and.w	r3, r3, #3
 800979a:	4a84      	ldr	r2, [pc, #528]	; (80099ac <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 800979c:	fa22 f303 	lsr.w	r3, r2, r3
 80097a0:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	ee07 3a90 	vmov	s15, r3
 80097a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	ee07 3a90 	vmov	s15, r3
 80097b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097ba:	4b7b      	ldr	r3, [pc, #492]	; (80099a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80097bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097c2:	ee07 3a90 	vmov	s15, r3
 80097c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80097ce:	eddf 5a78 	vldr	s11, [pc, #480]	; 80099b0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80097d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097e6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80097ea:	e087      	b.n	80098fc <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	ee07 3a90 	vmov	s15, r3
 80097f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097f6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80099b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 80097fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097fe:	4b6a      	ldr	r3, [pc, #424]	; (80099a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009806:	ee07 3a90 	vmov	s15, r3
 800980a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800980e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009812:	eddf 5a67 	vldr	s11, [pc, #412]	; 80099b0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8009816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800981a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800981e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800982a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800982e:	e065      	b.n	80098fc <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	ee07 3a90 	vmov	s15, r3
 8009836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800983a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80099b8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800983e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009842:	4b59      	ldr	r3, [pc, #356]	; (80099a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800984a:	ee07 3a90 	vmov	s15, r3
 800984e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009852:	ed97 6a03 	vldr	s12, [r7, #12]
 8009856:	eddf 5a56 	vldr	s11, [pc, #344]	; 80099b0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800985a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800985e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009862:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800986a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800986e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009872:	e043      	b.n	80098fc <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	ee07 3a90 	vmov	s15, r3
 800987a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800987e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80099bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009886:	4b48      	ldr	r3, [pc, #288]	; (80099a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800988a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800988e:	ee07 3a90 	vmov	s15, r3
 8009892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009896:	ed97 6a03 	vldr	s12, [r7, #12]
 800989a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80099b0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800989e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80098b6:	e021      	b.n	80098fc <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	ee07 3a90 	vmov	s15, r3
 80098be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098c2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80099b8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80098c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098ca:	4b37      	ldr	r3, [pc, #220]	; (80099a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80098cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098d2:	ee07 3a90 	vmov	s15, r3
 80098d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098da:	ed97 6a03 	vldr	s12, [r7, #12]
 80098de:	eddf 5a34 	vldr	s11, [pc, #208]	; 80099b0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80098e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80098fa:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80098fc:	4b2a      	ldr	r3, [pc, #168]	; (80099a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80098fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009900:	0a5b      	lsrs	r3, r3, #9
 8009902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009906:	ee07 3a90 	vmov	s15, r3
 800990a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800990e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009912:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009916:	edd7 6a07 	vldr	s13, [r7, #28]
 800991a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800991e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009922:	ee17 2a90 	vmov	r2, s15
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800992a:	4b1f      	ldr	r3, [pc, #124]	; (80099a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800992c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800992e:	0c1b      	lsrs	r3, r3, #16
 8009930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009934:	ee07 3a90 	vmov	s15, r3
 8009938:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800993c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009940:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009944:	edd7 6a07 	vldr	s13, [r7, #28]
 8009948:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800994c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009950:	ee17 2a90 	vmov	r2, s15
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009958:	4b13      	ldr	r3, [pc, #76]	; (80099a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800995a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800995c:	0e1b      	lsrs	r3, r3, #24
 800995e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009962:	ee07 3a90 	vmov	s15, r3
 8009966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800996a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800996e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009972:	edd7 6a07 	vldr	s13, [r7, #28]
 8009976:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800997a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800997e:	ee17 2a90 	vmov	r2, s15
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009986:	e008      	b.n	800999a <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2200      	movs	r2, #0
 800998c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2200      	movs	r2, #0
 8009992:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2200      	movs	r2, #0
 8009998:	609a      	str	r2, [r3, #8]
}
 800999a:	bf00      	nop
 800999c:	3724      	adds	r7, #36	; 0x24
 800999e:	46bd      	mov	sp, r7
 80099a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a4:	4770      	bx	lr
 80099a6:	bf00      	nop
 80099a8:	58024400 	.word	0x58024400
 80099ac:	03d09000 	.word	0x03d09000
 80099b0:	46000000 	.word	0x46000000
 80099b4:	4c742400 	.word	0x4c742400
 80099b8:	4a742400 	.word	0x4a742400
 80099bc:	4bbebc20 	.word	0x4bbebc20

080099c0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b084      	sub	sp, #16
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80099ca:	2300      	movs	r3, #0
 80099cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80099ce:	4b53      	ldr	r3, [pc, #332]	; (8009b1c <RCCEx_PLL2_Config+0x15c>)
 80099d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099d2:	f003 0303 	and.w	r3, r3, #3
 80099d6:	2b03      	cmp	r3, #3
 80099d8:	d101      	bne.n	80099de <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80099da:	2301      	movs	r3, #1
 80099dc:	e099      	b.n	8009b12 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80099de:	4b4f      	ldr	r3, [pc, #316]	; (8009b1c <RCCEx_PLL2_Config+0x15c>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a4e      	ldr	r2, [pc, #312]	; (8009b1c <RCCEx_PLL2_Config+0x15c>)
 80099e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80099e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099ea:	f7f8 facf 	bl	8001f8c <HAL_GetTick>
 80099ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80099f0:	e008      	b.n	8009a04 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80099f2:	f7f8 facb 	bl	8001f8c <HAL_GetTick>
 80099f6:	4602      	mov	r2, r0
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	1ad3      	subs	r3, r2, r3
 80099fc:	2b02      	cmp	r3, #2
 80099fe:	d901      	bls.n	8009a04 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009a00:	2303      	movs	r3, #3
 8009a02:	e086      	b.n	8009b12 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009a04:	4b45      	ldr	r3, [pc, #276]	; (8009b1c <RCCEx_PLL2_Config+0x15c>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d1f0      	bne.n	80099f2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009a10:	4b42      	ldr	r3, [pc, #264]	; (8009b1c <RCCEx_PLL2_Config+0x15c>)
 8009a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a14:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	031b      	lsls	r3, r3, #12
 8009a1e:	493f      	ldr	r1, [pc, #252]	; (8009b1c <RCCEx_PLL2_Config+0x15c>)
 8009a20:	4313      	orrs	r3, r2
 8009a22:	628b      	str	r3, [r1, #40]	; 0x28
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	689b      	ldr	r3, [r3, #8]
 8009a32:	3b01      	subs	r3, #1
 8009a34:	025b      	lsls	r3, r3, #9
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	431a      	orrs	r2, r3
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	68db      	ldr	r3, [r3, #12]
 8009a3e:	3b01      	subs	r3, #1
 8009a40:	041b      	lsls	r3, r3, #16
 8009a42:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009a46:	431a      	orrs	r2, r3
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	691b      	ldr	r3, [r3, #16]
 8009a4c:	3b01      	subs	r3, #1
 8009a4e:	061b      	lsls	r3, r3, #24
 8009a50:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009a54:	4931      	ldr	r1, [pc, #196]	; (8009b1c <RCCEx_PLL2_Config+0x15c>)
 8009a56:	4313      	orrs	r3, r2
 8009a58:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009a5a:	4b30      	ldr	r3, [pc, #192]	; (8009b1c <RCCEx_PLL2_Config+0x15c>)
 8009a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	695b      	ldr	r3, [r3, #20]
 8009a66:	492d      	ldr	r1, [pc, #180]	; (8009b1c <RCCEx_PLL2_Config+0x15c>)
 8009a68:	4313      	orrs	r3, r2
 8009a6a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009a6c:	4b2b      	ldr	r3, [pc, #172]	; (8009b1c <RCCEx_PLL2_Config+0x15c>)
 8009a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a70:	f023 0220 	bic.w	r2, r3, #32
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	699b      	ldr	r3, [r3, #24]
 8009a78:	4928      	ldr	r1, [pc, #160]	; (8009b1c <RCCEx_PLL2_Config+0x15c>)
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009a7e:	4b27      	ldr	r3, [pc, #156]	; (8009b1c <RCCEx_PLL2_Config+0x15c>)
 8009a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a82:	4a26      	ldr	r2, [pc, #152]	; (8009b1c <RCCEx_PLL2_Config+0x15c>)
 8009a84:	f023 0310 	bic.w	r3, r3, #16
 8009a88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009a8a:	4b24      	ldr	r3, [pc, #144]	; (8009b1c <RCCEx_PLL2_Config+0x15c>)
 8009a8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a8e:	4b24      	ldr	r3, [pc, #144]	; (8009b20 <RCCEx_PLL2_Config+0x160>)
 8009a90:	4013      	ands	r3, r2
 8009a92:	687a      	ldr	r2, [r7, #4]
 8009a94:	69d2      	ldr	r2, [r2, #28]
 8009a96:	00d2      	lsls	r2, r2, #3
 8009a98:	4920      	ldr	r1, [pc, #128]	; (8009b1c <RCCEx_PLL2_Config+0x15c>)
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009a9e:	4b1f      	ldr	r3, [pc, #124]	; (8009b1c <RCCEx_PLL2_Config+0x15c>)
 8009aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa2:	4a1e      	ldr	r2, [pc, #120]	; (8009b1c <RCCEx_PLL2_Config+0x15c>)
 8009aa4:	f043 0310 	orr.w	r3, r3, #16
 8009aa8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d106      	bne.n	8009abe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009ab0:	4b1a      	ldr	r3, [pc, #104]	; (8009b1c <RCCEx_PLL2_Config+0x15c>)
 8009ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ab4:	4a19      	ldr	r2, [pc, #100]	; (8009b1c <RCCEx_PLL2_Config+0x15c>)
 8009ab6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009aba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009abc:	e00f      	b.n	8009ade <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d106      	bne.n	8009ad2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009ac4:	4b15      	ldr	r3, [pc, #84]	; (8009b1c <RCCEx_PLL2_Config+0x15c>)
 8009ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac8:	4a14      	ldr	r2, [pc, #80]	; (8009b1c <RCCEx_PLL2_Config+0x15c>)
 8009aca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ace:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009ad0:	e005      	b.n	8009ade <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009ad2:	4b12      	ldr	r3, [pc, #72]	; (8009b1c <RCCEx_PLL2_Config+0x15c>)
 8009ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ad6:	4a11      	ldr	r2, [pc, #68]	; (8009b1c <RCCEx_PLL2_Config+0x15c>)
 8009ad8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009adc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009ade:	4b0f      	ldr	r3, [pc, #60]	; (8009b1c <RCCEx_PLL2_Config+0x15c>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4a0e      	ldr	r2, [pc, #56]	; (8009b1c <RCCEx_PLL2_Config+0x15c>)
 8009ae4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009ae8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009aea:	f7f8 fa4f 	bl	8001f8c <HAL_GetTick>
 8009aee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009af0:	e008      	b.n	8009b04 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009af2:	f7f8 fa4b 	bl	8001f8c <HAL_GetTick>
 8009af6:	4602      	mov	r2, r0
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	1ad3      	subs	r3, r2, r3
 8009afc:	2b02      	cmp	r3, #2
 8009afe:	d901      	bls.n	8009b04 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009b00:	2303      	movs	r3, #3
 8009b02:	e006      	b.n	8009b12 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009b04:	4b05      	ldr	r3, [pc, #20]	; (8009b1c <RCCEx_PLL2_Config+0x15c>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d0f0      	beq.n	8009af2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3710      	adds	r7, #16
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
 8009b1a:	bf00      	nop
 8009b1c:	58024400 	.word	0x58024400
 8009b20:	ffff0007 	.word	0xffff0007

08009b24 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b084      	sub	sp, #16
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009b32:	4b53      	ldr	r3, [pc, #332]	; (8009c80 <RCCEx_PLL3_Config+0x15c>)
 8009b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b36:	f003 0303 	and.w	r3, r3, #3
 8009b3a:	2b03      	cmp	r3, #3
 8009b3c:	d101      	bne.n	8009b42 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	e099      	b.n	8009c76 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009b42:	4b4f      	ldr	r3, [pc, #316]	; (8009c80 <RCCEx_PLL3_Config+0x15c>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4a4e      	ldr	r2, [pc, #312]	; (8009c80 <RCCEx_PLL3_Config+0x15c>)
 8009b48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b4e:	f7f8 fa1d 	bl	8001f8c <HAL_GetTick>
 8009b52:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009b54:	e008      	b.n	8009b68 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009b56:	f7f8 fa19 	bl	8001f8c <HAL_GetTick>
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	1ad3      	subs	r3, r2, r3
 8009b60:	2b02      	cmp	r3, #2
 8009b62:	d901      	bls.n	8009b68 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009b64:	2303      	movs	r3, #3
 8009b66:	e086      	b.n	8009c76 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009b68:	4b45      	ldr	r3, [pc, #276]	; (8009c80 <RCCEx_PLL3_Config+0x15c>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d1f0      	bne.n	8009b56 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009b74:	4b42      	ldr	r3, [pc, #264]	; (8009c80 <RCCEx_PLL3_Config+0x15c>)
 8009b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b78:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	051b      	lsls	r3, r3, #20
 8009b82:	493f      	ldr	r1, [pc, #252]	; (8009c80 <RCCEx_PLL3_Config+0x15c>)
 8009b84:	4313      	orrs	r3, r2
 8009b86:	628b      	str	r3, [r1, #40]	; 0x28
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	3b01      	subs	r3, #1
 8009b8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	3b01      	subs	r3, #1
 8009b98:	025b      	lsls	r3, r3, #9
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	431a      	orrs	r2, r3
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	68db      	ldr	r3, [r3, #12]
 8009ba2:	3b01      	subs	r3, #1
 8009ba4:	041b      	lsls	r3, r3, #16
 8009ba6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009baa:	431a      	orrs	r2, r3
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	691b      	ldr	r3, [r3, #16]
 8009bb0:	3b01      	subs	r3, #1
 8009bb2:	061b      	lsls	r3, r3, #24
 8009bb4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009bb8:	4931      	ldr	r1, [pc, #196]	; (8009c80 <RCCEx_PLL3_Config+0x15c>)
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009bbe:	4b30      	ldr	r3, [pc, #192]	; (8009c80 <RCCEx_PLL3_Config+0x15c>)
 8009bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	695b      	ldr	r3, [r3, #20]
 8009bca:	492d      	ldr	r1, [pc, #180]	; (8009c80 <RCCEx_PLL3_Config+0x15c>)
 8009bcc:	4313      	orrs	r3, r2
 8009bce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009bd0:	4b2b      	ldr	r3, [pc, #172]	; (8009c80 <RCCEx_PLL3_Config+0x15c>)
 8009bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	699b      	ldr	r3, [r3, #24]
 8009bdc:	4928      	ldr	r1, [pc, #160]	; (8009c80 <RCCEx_PLL3_Config+0x15c>)
 8009bde:	4313      	orrs	r3, r2
 8009be0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009be2:	4b27      	ldr	r3, [pc, #156]	; (8009c80 <RCCEx_PLL3_Config+0x15c>)
 8009be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009be6:	4a26      	ldr	r2, [pc, #152]	; (8009c80 <RCCEx_PLL3_Config+0x15c>)
 8009be8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009bec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009bee:	4b24      	ldr	r3, [pc, #144]	; (8009c80 <RCCEx_PLL3_Config+0x15c>)
 8009bf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009bf2:	4b24      	ldr	r3, [pc, #144]	; (8009c84 <RCCEx_PLL3_Config+0x160>)
 8009bf4:	4013      	ands	r3, r2
 8009bf6:	687a      	ldr	r2, [r7, #4]
 8009bf8:	69d2      	ldr	r2, [r2, #28]
 8009bfa:	00d2      	lsls	r2, r2, #3
 8009bfc:	4920      	ldr	r1, [pc, #128]	; (8009c80 <RCCEx_PLL3_Config+0x15c>)
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009c02:	4b1f      	ldr	r3, [pc, #124]	; (8009c80 <RCCEx_PLL3_Config+0x15c>)
 8009c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c06:	4a1e      	ldr	r2, [pc, #120]	; (8009c80 <RCCEx_PLL3_Config+0x15c>)
 8009c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d106      	bne.n	8009c22 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009c14:	4b1a      	ldr	r3, [pc, #104]	; (8009c80 <RCCEx_PLL3_Config+0x15c>)
 8009c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c18:	4a19      	ldr	r2, [pc, #100]	; (8009c80 <RCCEx_PLL3_Config+0x15c>)
 8009c1a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009c1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009c20:	e00f      	b.n	8009c42 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d106      	bne.n	8009c36 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009c28:	4b15      	ldr	r3, [pc, #84]	; (8009c80 <RCCEx_PLL3_Config+0x15c>)
 8009c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c2c:	4a14      	ldr	r2, [pc, #80]	; (8009c80 <RCCEx_PLL3_Config+0x15c>)
 8009c2e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009c32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009c34:	e005      	b.n	8009c42 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009c36:	4b12      	ldr	r3, [pc, #72]	; (8009c80 <RCCEx_PLL3_Config+0x15c>)
 8009c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c3a:	4a11      	ldr	r2, [pc, #68]	; (8009c80 <RCCEx_PLL3_Config+0x15c>)
 8009c3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009c40:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009c42:	4b0f      	ldr	r3, [pc, #60]	; (8009c80 <RCCEx_PLL3_Config+0x15c>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4a0e      	ldr	r2, [pc, #56]	; (8009c80 <RCCEx_PLL3_Config+0x15c>)
 8009c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c4e:	f7f8 f99d 	bl	8001f8c <HAL_GetTick>
 8009c52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009c54:	e008      	b.n	8009c68 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009c56:	f7f8 f999 	bl	8001f8c <HAL_GetTick>
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	1ad3      	subs	r3, r2, r3
 8009c60:	2b02      	cmp	r3, #2
 8009c62:	d901      	bls.n	8009c68 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009c64:	2303      	movs	r3, #3
 8009c66:	e006      	b.n	8009c76 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009c68:	4b05      	ldr	r3, [pc, #20]	; (8009c80 <RCCEx_PLL3_Config+0x15c>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d0f0      	beq.n	8009c56 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3710      	adds	r7, #16
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}
 8009c7e:	bf00      	nop
 8009c80:	58024400 	.word	0x58024400
 8009c84:	ffff0007 	.word	0xffff0007

08009c88 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009c90:	2301      	movs	r3, #1
 8009c92:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d067      	beq.n	8009d6a <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009ca0:	b2db      	uxtb	r3, r3
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d106      	bne.n	8009cb4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f7f7 fdb6 	bl	8001820 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2202      	movs	r2, #2
 8009cb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	22ca      	movs	r2, #202	; 0xca
 8009cc2:	625a      	str	r2, [r3, #36]	; 0x24
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	2253      	movs	r2, #83	; 0x53
 8009cca:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f000 f99f 	bl	800a010 <RTC_EnterInitMode>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8009cd6:	7bfb      	ldrb	r3, [r7, #15]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d13b      	bne.n	8009d54 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	6899      	ldr	r1, [r3, #8]
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681a      	ldr	r2, [r3, #0]
 8009ce6:	4b23      	ldr	r3, [pc, #140]	; (8009d74 <HAL_RTC_Init+0xec>)
 8009ce8:	400b      	ands	r3, r1
 8009cea:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	6899      	ldr	r1, [r3, #8]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	685a      	ldr	r2, [r3, #4]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	691b      	ldr	r3, [r3, #16]
 8009cfa:	431a      	orrs	r2, r3
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	699b      	ldr	r3, [r3, #24]
 8009d00:	431a      	orrs	r2, r3
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	430a      	orrs	r2, r1
 8009d08:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	689b      	ldr	r3, [r3, #8]
 8009d0e:	0419      	lsls	r1, r3, #16
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	68da      	ldr	r2, [r3, #12]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	430a      	orrs	r2, r1
 8009d1a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f000 f9a7 	bl	800a070 <RTC_ExitInitMode>
 8009d22:	4603      	mov	r3, r0
 8009d24:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 8009d26:	7bfb      	ldrb	r3, [r7, #15]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d113      	bne.n	8009d54 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f022 0203 	bic.w	r2, r2, #3
 8009d3a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	69da      	ldr	r2, [r3, #28]
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	695b      	ldr	r3, [r3, #20]
 8009d4a:	431a      	orrs	r2, r3
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	430a      	orrs	r2, r1
 8009d52:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	22ff      	movs	r2, #255	; 0xff
 8009d5a:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8009d5c:	7bfb      	ldrb	r3, [r7, #15]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d103      	bne.n	8009d6a <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2201      	movs	r2, #1
 8009d66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8009d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3710      	adds	r7, #16
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}
 8009d74:	ff8fffbf 	.word	0xff8fffbf

08009d78 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009d78:	b590      	push	{r4, r7, lr}
 8009d7a:	b087      	sub	sp, #28
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	60f8      	str	r0, [r7, #12]
 8009d80:	60b9      	str	r1, [r7, #8]
 8009d82:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d8a:	2b01      	cmp	r3, #1
 8009d8c:	d101      	bne.n	8009d92 <HAL_RTC_SetTime+0x1a>
 8009d8e:	2302      	movs	r3, #2
 8009d90:	e089      	b.n	8009ea6 <HAL_RTC_SetTime+0x12e>
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	2201      	movs	r2, #1
 8009d96:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2202      	movs	r2, #2
 8009d9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	22ca      	movs	r2, #202	; 0xca
 8009da8:	625a      	str	r2, [r3, #36]	; 0x24
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	2253      	movs	r2, #83	; 0x53
 8009db0:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009db2:	68f8      	ldr	r0, [r7, #12]
 8009db4:	f000 f92c 	bl	800a010 <RTC_EnterInitMode>
 8009db8:	4603      	mov	r3, r0
 8009dba:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009dbc:	7cfb      	ldrb	r3, [r7, #19]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d161      	bne.n	8009e86 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d126      	bne.n	8009e16 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	689b      	ldr	r3, [r3, #8]
 8009dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d102      	bne.n	8009ddc <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	4618      	mov	r0, r3
 8009de2:	f000 f983 	bl	800a0ec <RTC_ByteToBcd2>
 8009de6:	4603      	mov	r3, r0
 8009de8:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	785b      	ldrb	r3, [r3, #1]
 8009dee:	4618      	mov	r0, r3
 8009df0:	f000 f97c 	bl	800a0ec <RTC_ByteToBcd2>
 8009df4:	4603      	mov	r3, r0
 8009df6:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009df8:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	789b      	ldrb	r3, [r3, #2]
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f000 f974 	bl	800a0ec <RTC_ByteToBcd2>
 8009e04:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009e06:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	78db      	ldrb	r3, [r3, #3]
 8009e0e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009e10:	4313      	orrs	r3, r2
 8009e12:	617b      	str	r3, [r7, #20]
 8009e14:	e018      	b.n	8009e48 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	689b      	ldr	r3, [r3, #8]
 8009e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d102      	bne.n	8009e2a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	2200      	movs	r2, #0
 8009e28:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	781b      	ldrb	r3, [r3, #0]
 8009e2e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	785b      	ldrb	r3, [r3, #1]
 8009e34:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009e36:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8009e38:	68ba      	ldr	r2, [r7, #8]
 8009e3a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009e3c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	78db      	ldrb	r3, [r3, #3]
 8009e42:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009e44:	4313      	orrs	r3, r2
 8009e46:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681a      	ldr	r2, [r3, #0]
 8009e4c:	6979      	ldr	r1, [r7, #20]
 8009e4e:	4b18      	ldr	r3, [pc, #96]	; (8009eb0 <HAL_RTC_SetTime+0x138>)
 8009e50:	400b      	ands	r3, r1
 8009e52:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	689a      	ldr	r2, [r3, #8]
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009e62:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	6899      	ldr	r1, [r3, #8]
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	68da      	ldr	r2, [r3, #12]
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	691b      	ldr	r3, [r3, #16]
 8009e72:	431a      	orrs	r2, r3
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	430a      	orrs	r2, r1
 8009e7a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009e7c:	68f8      	ldr	r0, [r7, #12]
 8009e7e:	f000 f8f7 	bl	800a070 <RTC_ExitInitMode>
 8009e82:	4603      	mov	r3, r0
 8009e84:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	22ff      	movs	r2, #255	; 0xff
 8009e8c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8009e8e:	7cfb      	ldrb	r3, [r7, #19]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d103      	bne.n	8009e9c <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2201      	movs	r2, #1
 8009e98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009ea4:	7cfb      	ldrb	r3, [r7, #19]
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	371c      	adds	r7, #28
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd90      	pop	{r4, r7, pc}
 8009eae:	bf00      	nop
 8009eb0:	007f7f7f 	.word	0x007f7f7f

08009eb4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009eb4:	b590      	push	{r4, r7, lr}
 8009eb6:	b087      	sub	sp, #28
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	60f8      	str	r0, [r7, #12]
 8009ebc:	60b9      	str	r1, [r7, #8]
 8009ebe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	d101      	bne.n	8009ece <HAL_RTC_SetDate+0x1a>
 8009eca:	2302      	movs	r3, #2
 8009ecc:	e073      	b.n	8009fb6 <HAL_RTC_SetDate+0x102>
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2202      	movs	r2, #2
 8009eda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d10e      	bne.n	8009f02 <HAL_RTC_SetDate+0x4e>
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	785b      	ldrb	r3, [r3, #1]
 8009ee8:	f003 0310 	and.w	r3, r3, #16
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d008      	beq.n	8009f02 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	785b      	ldrb	r3, [r3, #1]
 8009ef4:	f023 0310 	bic.w	r3, r3, #16
 8009ef8:	b2db      	uxtb	r3, r3
 8009efa:	330a      	adds	r3, #10
 8009efc:	b2da      	uxtb	r2, r3
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d11c      	bne.n	8009f42 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	78db      	ldrb	r3, [r3, #3]
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f000 f8ed 	bl	800a0ec <RTC_ByteToBcd2>
 8009f12:	4603      	mov	r3, r0
 8009f14:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	785b      	ldrb	r3, [r3, #1]
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f000 f8e6 	bl	800a0ec <RTC_ByteToBcd2>
 8009f20:	4603      	mov	r3, r0
 8009f22:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009f24:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	789b      	ldrb	r3, [r3, #2]
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f000 f8de 	bl	800a0ec <RTC_ByteToBcd2>
 8009f30:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009f32:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	781b      	ldrb	r3, [r3, #0]
 8009f3a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	617b      	str	r3, [r7, #20]
 8009f40:	e00e      	b.n	8009f60 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	78db      	ldrb	r3, [r3, #3]
 8009f46:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	785b      	ldrb	r3, [r3, #1]
 8009f4c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009f4e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8009f50:	68ba      	ldr	r2, [r7, #8]
 8009f52:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009f54:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	781b      	ldrb	r3, [r3, #0]
 8009f5a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	22ca      	movs	r2, #202	; 0xca
 8009f66:	625a      	str	r2, [r3, #36]	; 0x24
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	2253      	movs	r2, #83	; 0x53
 8009f6e:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009f70:	68f8      	ldr	r0, [r7, #12]
 8009f72:	f000 f84d 	bl	800a010 <RTC_EnterInitMode>
 8009f76:	4603      	mov	r3, r0
 8009f78:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009f7a:	7cfb      	ldrb	r3, [r7, #19]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d10a      	bne.n	8009f96 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681a      	ldr	r2, [r3, #0]
 8009f84:	6979      	ldr	r1, [r7, #20]
 8009f86:	4b0e      	ldr	r3, [pc, #56]	; (8009fc0 <HAL_RTC_SetDate+0x10c>)
 8009f88:	400b      	ands	r3, r1
 8009f8a:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009f8c:	68f8      	ldr	r0, [r7, #12]
 8009f8e:	f000 f86f 	bl	800a070 <RTC_ExitInitMode>
 8009f92:	4603      	mov	r3, r0
 8009f94:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	22ff      	movs	r2, #255	; 0xff
 8009f9c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8009f9e:	7cfb      	ldrb	r3, [r7, #19]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d103      	bne.n	8009fac <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009fb4:	7cfb      	ldrb	r3, [r7, #19]


}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	371c      	adds	r7, #28
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd90      	pop	{r4, r7, pc}
 8009fbe:	bf00      	nop
 8009fc0:	00ffff3f 	.word	0x00ffff3f

08009fc4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	68da      	ldr	r2, [r3, #12]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009fda:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8009fdc:	f7f7 ffd6 	bl	8001f8c <HAL_GetTick>
 8009fe0:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009fe2:	e009      	b.n	8009ff8 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009fe4:	f7f7 ffd2 	bl	8001f8c <HAL_GetTick>
 8009fe8:	4602      	mov	r2, r0
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	1ad3      	subs	r3, r2, r3
 8009fee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ff2:	d901      	bls.n	8009ff8 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8009ff4:	2303      	movs	r3, #3
 8009ff6:	e007      	b.n	800a008 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	68db      	ldr	r3, [r3, #12]
 8009ffe:	f003 0320 	and.w	r3, r3, #32
 800a002:	2b00      	cmp	r3, #0
 800a004:	d0ee      	beq.n	8009fe4 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800a006:	2300      	movs	r3, #0
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3710      	adds	r7, #16
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b084      	sub	sp, #16
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a018:	2300      	movs	r3, #0
 800a01a:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	68db      	ldr	r3, [r3, #12]
 800a022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a026:	2b00      	cmp	r3, #0
 800a028:	d11d      	bne.n	800a066 <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f04f 32ff 	mov.w	r2, #4294967295
 800a032:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a034:	f7f7 ffaa 	bl	8001f8c <HAL_GetTick>
 800a038:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a03a:	e00d      	b.n	800a058 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a03c:	f7f7 ffa6 	bl	8001f8c <HAL_GetTick>
 800a040:	4602      	mov	r2, r0
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	1ad3      	subs	r3, r2, r3
 800a046:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a04a:	d905      	bls.n	800a058 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800a04c:	2303      	movs	r3, #3
 800a04e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2203      	movs	r2, #3
 800a054:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	68db      	ldr	r3, [r3, #12]
 800a05e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a062:	2b00      	cmp	r3, #0
 800a064:	d0ea      	beq.n	800a03c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800a066:	7bfb      	ldrb	r3, [r7, #15]
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3710      	adds	r7, #16
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b084      	sub	sp, #16
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a078:	2300      	movs	r3, #0
 800a07a:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800a07c:	4b1a      	ldr	r3, [pc, #104]	; (800a0e8 <RTC_ExitInitMode+0x78>)
 800a07e:	68db      	ldr	r3, [r3, #12]
 800a080:	4a19      	ldr	r2, [pc, #100]	; (800a0e8 <RTC_ExitInitMode+0x78>)
 800a082:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a086:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a088:	4b17      	ldr	r3, [pc, #92]	; (800a0e8 <RTC_ExitInitMode+0x78>)
 800a08a:	689b      	ldr	r3, [r3, #8]
 800a08c:	f003 0320 	and.w	r3, r3, #32
 800a090:	2b00      	cmp	r3, #0
 800a092:	d10c      	bne.n	800a0ae <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f7ff ff95 	bl	8009fc4 <HAL_RTC_WaitForSynchro>
 800a09a:	4603      	mov	r3, r0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d01e      	beq.n	800a0de <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2203      	movs	r2, #3
 800a0a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a0a8:	2303      	movs	r3, #3
 800a0aa:	73fb      	strb	r3, [r7, #15]
 800a0ac:	e017      	b.n	800a0de <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a0ae:	4b0e      	ldr	r3, [pc, #56]	; (800a0e8 <RTC_ExitInitMode+0x78>)
 800a0b0:	689b      	ldr	r3, [r3, #8]
 800a0b2:	4a0d      	ldr	r2, [pc, #52]	; (800a0e8 <RTC_ExitInitMode+0x78>)
 800a0b4:	f023 0320 	bic.w	r3, r3, #32
 800a0b8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f7ff ff82 	bl	8009fc4 <HAL_RTC_WaitForSynchro>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d005      	beq.n	800a0d2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2203      	movs	r2, #3
 800a0ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a0ce:	2303      	movs	r3, #3
 800a0d0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a0d2:	4b05      	ldr	r3, [pc, #20]	; (800a0e8 <RTC_ExitInitMode+0x78>)
 800a0d4:	689b      	ldr	r3, [r3, #8]
 800a0d6:	4a04      	ldr	r2, [pc, #16]	; (800a0e8 <RTC_ExitInitMode+0x78>)
 800a0d8:	f043 0320 	orr.w	r3, r3, #32
 800a0dc:	6093      	str	r3, [r2, #8]
  }

  return status;
 800a0de:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3710      	adds	r7, #16
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	58004000 	.word	0x58004000

0800a0ec <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b085      	sub	sp, #20
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800a0fa:	79fb      	ldrb	r3, [r7, #7]
 800a0fc:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800a0fe:	e005      	b.n	800a10c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	3301      	adds	r3, #1
 800a104:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800a106:	7afb      	ldrb	r3, [r7, #11]
 800a108:	3b0a      	subs	r3, #10
 800a10a:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800a10c:	7afb      	ldrb	r3, [r7, #11]
 800a10e:	2b09      	cmp	r3, #9
 800a110:	d8f6      	bhi.n	800a100 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	b2db      	uxtb	r3, r3
 800a116:	011b      	lsls	r3, r3, #4
 800a118:	b2da      	uxtb	r2, r3
 800a11a:	7afb      	ldrb	r3, [r7, #11]
 800a11c:	4313      	orrs	r3, r2
 800a11e:	b2db      	uxtb	r3, r3
}
 800a120:	4618      	mov	r0, r3
 800a122:	3714      	adds	r7, #20
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr

0800a12c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b08a      	sub	sp, #40	; 0x28
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d101      	bne.n	800a13e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a13a:	2301      	movs	r3, #1
 800a13c:	e07c      	b.n	800a238 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a144:	b2db      	uxtb	r3, r3
 800a146:	2b00      	cmp	r3, #0
 800a148:	d10c      	bne.n	800a164 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2200      	movs	r2, #0
 800a14e:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	699b      	ldr	r3, [r3, #24]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d102      	bne.n	800a15e <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2202      	movs	r2, #2
 800a15c:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f7f7 fb78 	bl	8001854 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2203      	movs	r2, #3
 800a168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f000 f867 	bl	800a240 <HAL_SD_InitCard>
 800a172:	4603      	mov	r3, r0
 800a174:	2b00      	cmp	r3, #0
 800a176:	d001      	beq.n	800a17c <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 800a178:	2301      	movs	r3, #1
 800a17a:	e05d      	b.n	800a238 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800a17c:	f107 0308 	add.w	r3, r7, #8
 800a180:	4619      	mov	r1, r3
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f001 f8ce 	bl	800b324 <HAL_SD_GetCardStatus>
 800a188:	4603      	mov	r3, r0
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d001      	beq.n	800a192 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 800a18e:	2301      	movs	r3, #1
 800a190:	e052      	b.n	800a238 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800a192:	7e3b      	ldrb	r3, [r7, #24]
 800a194:	b2db      	uxtb	r3, r3
 800a196:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800a198:	7e7b      	ldrb	r3, [r7, #25]
 800a19a:	b2db      	uxtb	r3, r3
 800a19c:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	d10a      	bne.n	800a1bc <HAL_SD_Init+0x90>
 800a1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d102      	bne.n	800a1b2 <HAL_SD_Init+0x86>
 800a1ac:	6a3b      	ldr	r3, [r7, #32]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d004      	beq.n	800a1bc <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1b8:	65da      	str	r2, [r3, #92]	; 0x5c
 800a1ba:	e00b      	b.n	800a1d4 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d104      	bne.n	800a1ce <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a1ca:	65da      	str	r2, [r3, #92]	; 0x5c
 800a1cc:	e002      	b.n	800a1d4 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	68db      	ldr	r3, [r3, #12]
 800a1d8:	4619      	mov	r1, r3
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f001 f984 	bl	800b4e8 <HAL_SD_ConfigWideBusOperation>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d001      	beq.n	800a1ea <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e026      	b.n	800a238 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800a1ea:	f7f7 fecf 	bl	8001f8c <HAL_GetTick>
 800a1ee:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a1f0:	e011      	b.n	800a216 <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800a1f2:	f7f7 fecb 	bl	8001f8c <HAL_GetTick>
 800a1f6:	4602      	mov	r2, r0
 800a1f8:	69fb      	ldr	r3, [r7, #28]
 800a1fa:	1ad3      	subs	r3, r2, r3
 800a1fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a200:	d109      	bne.n	800a216 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a208:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2201      	movs	r2, #1
 800a20e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800a212:	2303      	movs	r3, #3
 800a214:	e010      	b.n	800a238 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f001 fa10 	bl	800b63c <HAL_SD_GetCardState>
 800a21c:	4603      	mov	r3, r0
 800a21e:	2b04      	cmp	r3, #4
 800a220:	d1e7      	bne.n	800a1f2 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2200      	movs	r2, #0
 800a226:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2200      	movs	r2, #0
 800a22c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2201      	movs	r2, #1
 800a232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a236:	2300      	movs	r3, #0
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3728      	adds	r7, #40	; 0x28
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a240:	b5b0      	push	{r4, r5, r7, lr}
 800a242:	b08e      	sub	sp, #56	; 0x38
 800a244:	af04      	add	r7, sp, #16
 800a246:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a248:	2300      	movs	r3, #0
 800a24a:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a24c:	2300      	movs	r3, #0
 800a24e:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800a250:	2300      	movs	r3, #0
 800a252:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a254:	2300      	movs	r3, #0
 800a256:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a258:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800a25c:	f7fe fd3e 	bl	8008cdc <HAL_RCCEx_GetPeriphCLKFreq>
 800a260:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 800a262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a264:	0a1b      	lsrs	r3, r3, #8
 800a266:	4a40      	ldr	r2, [pc, #256]	; (800a368 <HAL_SD_InitCard+0x128>)
 800a268:	fba2 2303 	umull	r2, r3, r2, r3
 800a26c:	091b      	lsrs	r3, r3, #4
 800a26e:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	699b      	ldr	r3, [r3, #24]
 800a274:	2b02      	cmp	r3, #2
 800a276:	d107      	bne.n	800a288 <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	681a      	ldr	r2, [r3, #0]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f042 0210 	orr.w	r2, r2, #16
 800a286:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681d      	ldr	r5, [r3, #0]
 800a28c:	466c      	mov	r4, sp
 800a28e:	f107 0314 	add.w	r3, r7, #20
 800a292:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a296:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a29a:	f107 0308 	add.w	r3, r7, #8
 800a29e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a2a0:	4628      	mov	r0, r5
 800a2a2:	f003 fa57 	bl	800d754 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f003 fa9a 	bl	800d7e4 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800a2b0:	69bb      	ldr	r3, [r7, #24]
 800a2b2:	005b      	lsls	r3, r3, #1
 800a2b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2ba:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 800a2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d008      	beq.n	800a2d4 <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800a2c2:	4a2a      	ldr	r2, [pc, #168]	; (800a36c <HAL_SD_InitCard+0x12c>)
 800a2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f7f7 fe69 	bl	8001fa4 <HAL_Delay>
 800a2d2:	e002      	b.n	800a2da <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 800a2d4:	2002      	movs	r0, #2
 800a2d6:	f7f7 fe65 	bl	8001fa4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f001 fa8c 	bl	800b7f8 <SD_PowerON>
 800a2e0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a2e2:	6a3b      	ldr	r3, [r7, #32]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d00b      	beq.n	800a300 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2f4:	6a3b      	ldr	r3, [r7, #32]
 800a2f6:	431a      	orrs	r2, r3
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	e02e      	b.n	800a35e <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f001 f9bb 	bl	800b67c <SD_InitCard>
 800a306:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a308:	6a3b      	ldr	r3, [r7, #32]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d00b      	beq.n	800a326 <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2201      	movs	r2, #1
 800a312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a31a:	6a3b      	ldr	r3, [r7, #32]
 800a31c:	431a      	orrs	r2, r3
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a322:	2301      	movs	r3, #1
 800a324:	e01b      	b.n	800a35e <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a32e:	4618      	mov	r0, r3
 800a330:	f003 faee 	bl	800d910 <SDMMC_CmdBlockLength>
 800a334:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a336:	6a3b      	ldr	r3, [r7, #32]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d00f      	beq.n	800a35c <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	4a0b      	ldr	r2, [pc, #44]	; (800a370 <HAL_SD_InitCard+0x130>)
 800a342:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a348:	6a3b      	ldr	r3, [r7, #32]
 800a34a:	431a      	orrs	r2, r3
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2201      	movs	r2, #1
 800a354:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a358:	2301      	movs	r3, #1
 800a35a:	e000      	b.n	800a35e <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 800a35c:	2300      	movs	r3, #0
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3728      	adds	r7, #40	; 0x28
 800a362:	46bd      	mov	sp, r7
 800a364:	bdb0      	pop	{r4, r5, r7, pc}
 800a366:	bf00      	nop
 800a368:	014f8b59 	.word	0x014f8b59
 800a36c:	00012110 	.word	0x00012110
 800a370:	1fe00fff 	.word	0x1fe00fff

0800a374 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b092      	sub	sp, #72	; 0x48
 800a378:	af00      	add	r7, sp, #0
 800a37a:	60f8      	str	r0, [r7, #12]
 800a37c:	60b9      	str	r1, [r7, #8]
 800a37e:	607a      	str	r2, [r7, #4]
 800a380:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a382:	f7f7 fe03 	bl	8001f8c <HAL_GetTick>
 800a386:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d107      	bne.n	800a3a6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a39a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	e167      	b.n	800a676 <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a3ac:	b2db      	uxtb	r3, r3
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	f040 815a 	bne.w	800a668 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a3ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	441a      	add	r2, r3
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d907      	bls.n	800a3d8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3cc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	e14e      	b.n	800a676 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2203      	movs	r2, #3
 800a3dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	d002      	beq.n	800a3f6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800a3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f2:	025b      	lsls	r3, r3, #9
 800a3f4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a3f6:	f04f 33ff 	mov.w	r3, #4294967295
 800a3fa:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	025b      	lsls	r3, r3, #9
 800a400:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a402:	2390      	movs	r3, #144	; 0x90
 800a404:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a406:	2302      	movs	r3, #2
 800a408:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a40a:	2300      	movs	r3, #0
 800a40c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a40e:	2300      	movs	r3, #0
 800a410:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f107 0214 	add.w	r2, r7, #20
 800a41a:	4611      	mov	r1, r2
 800a41c:	4618      	mov	r0, r3
 800a41e:	f003 fa4b 	bl	800d8b8 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	68da      	ldr	r2, [r3, #12]
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a430:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	2b01      	cmp	r3, #1
 800a436:	d90a      	bls.n	800a44e <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	2202      	movs	r2, #2
 800a43c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a444:	4618      	mov	r0, r3
 800a446:	f003 faa9 	bl	800d99c <SDMMC_CmdReadMultiBlock>
 800a44a:	6478      	str	r0, [r7, #68]	; 0x44
 800a44c:	e009      	b.n	800a462 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	2201      	movs	r2, #1
 800a452:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a45a:	4618      	mov	r0, r3
 800a45c:	f003 fa7b 	bl	800d956 <SDMMC_CmdReadSingleBlock>
 800a460:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a462:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a464:	2b00      	cmp	r3, #0
 800a466:	d012      	beq.n	800a48e <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	4a84      	ldr	r2, [pc, #528]	; (800a680 <HAL_SD_ReadBlocks+0x30c>)
 800a46e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a476:	431a      	orrs	r2, r3
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2201      	movs	r2, #1
 800a480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2200      	movs	r2, #0
 800a488:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a48a:	2301      	movs	r3, #1
 800a48c:	e0f3      	b.n	800a676 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800a48e:	69bb      	ldr	r3, [r7, #24]
 800a490:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a492:	e058      	b.n	800a546 <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a49a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d033      	beq.n	800a50a <HAL_SD_ReadBlocks+0x196>
 800a4a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4a4:	2b1f      	cmp	r3, #31
 800a4a6:	d930      	bls.n	800a50a <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	643b      	str	r3, [r7, #64]	; 0x40
 800a4ac:	e027      	b.n	800a4fe <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f003 f978 	bl	800d7a8 <SDMMC_ReadFIFO>
 800a4b8:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800a4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4bc:	b2da      	uxtb	r2, r3
 800a4be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4c0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a4c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4c4:	3301      	adds	r3, #1
 800a4c6:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800a4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ca:	0a1b      	lsrs	r3, r3, #8
 800a4cc:	b2da      	uxtb	r2, r3
 800a4ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4d0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a4d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4d4:	3301      	adds	r3, #1
 800a4d6:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800a4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4da:	0c1b      	lsrs	r3, r3, #16
 800a4dc:	b2da      	uxtb	r2, r3
 800a4de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4e0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a4e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4e4:	3301      	adds	r3, #1
 800a4e6:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800a4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ea:	0e1b      	lsrs	r3, r3, #24
 800a4ec:	b2da      	uxtb	r2, r3
 800a4ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4f0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a4f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4f4:	3301      	adds	r3, #1
 800a4f6:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 800a4f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	643b      	str	r3, [r7, #64]	; 0x40
 800a4fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a500:	2b07      	cmp	r3, #7
 800a502:	d9d4      	bls.n	800a4ae <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800a504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a506:	3b20      	subs	r3, #32
 800a508:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a50a:	f7f7 fd3f 	bl	8001f8c <HAL_GetTick>
 800a50e:	4602      	mov	r2, r0
 800a510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a512:	1ad3      	subs	r3, r2, r3
 800a514:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a516:	429a      	cmp	r2, r3
 800a518:	d902      	bls.n	800a520 <HAL_SD_ReadBlocks+0x1ac>
 800a51a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d112      	bne.n	800a546 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4a56      	ldr	r2, [pc, #344]	; (800a680 <HAL_SD_ReadBlocks+0x30c>)
 800a526:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a52c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2201      	movs	r2, #1
 800a538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2200      	movs	r2, #0
 800a540:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800a542:	2303      	movs	r3, #3
 800a544:	e097      	b.n	800a676 <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a54c:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800a550:	2b00      	cmp	r3, #0
 800a552:	d09f      	beq.n	800a494 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	68da      	ldr	r2, [r3, #12]
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a562:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a56a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d022      	beq.n	800a5b8 <HAL_SD_ReadBlocks+0x244>
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	2b01      	cmp	r3, #1
 800a576:	d91f      	bls.n	800a5b8 <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a57c:	2b03      	cmp	r3, #3
 800a57e:	d01b      	beq.n	800a5b8 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4618      	mov	r0, r3
 800a586:	f003 fa73 	bl	800da70 <SDMMC_CmdStopTransfer>
 800a58a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800a58c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d012      	beq.n	800a5b8 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4a3a      	ldr	r2, [pc, #232]	; (800a680 <HAL_SD_ReadBlocks+0x30c>)
 800a598:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a59e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5a0:	431a      	orrs	r2, r3
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2201      	movs	r2, #1
 800a5aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	e05e      	b.n	800a676 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5be:	f003 0308 	and.w	r3, r3, #8
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d012      	beq.n	800a5ec <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	4a2d      	ldr	r2, [pc, #180]	; (800a680 <HAL_SD_ReadBlocks+0x30c>)
 800a5cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5d2:	f043 0208 	orr.w	r2, r3, #8
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2201      	movs	r2, #1
 800a5de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	e044      	b.n	800a676 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5f2:	f003 0302 	and.w	r3, r3, #2
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d012      	beq.n	800a620 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4a20      	ldr	r2, [pc, #128]	; (800a680 <HAL_SD_ReadBlocks+0x30c>)
 800a600:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a606:	f043 0202 	orr.w	r2, r3, #2
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2201      	movs	r2, #1
 800a612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	2200      	movs	r2, #0
 800a61a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a61c:	2301      	movs	r3, #1
 800a61e:	e02a      	b.n	800a676 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a626:	f003 0320 	and.w	r3, r3, #32
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d012      	beq.n	800a654 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	4a13      	ldr	r2, [pc, #76]	; (800a680 <HAL_SD_ReadBlocks+0x30c>)
 800a634:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a63a:	f043 0220 	orr.w	r2, r3, #32
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2201      	movs	r2, #1
 800a646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	2200      	movs	r2, #0
 800a64e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a650:	2301      	movs	r3, #1
 800a652:	e010      	b.n	800a676 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	4a0a      	ldr	r2, [pc, #40]	; (800a684 <HAL_SD_ReadBlocks+0x310>)
 800a65a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2201      	movs	r2, #1
 800a660:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800a664:	2300      	movs	r3, #0
 800a666:	e006      	b.n	800a676 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a66c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a674:	2301      	movs	r3, #1
  }
}
 800a676:	4618      	mov	r0, r3
 800a678:	3748      	adds	r7, #72	; 0x48
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}
 800a67e:	bf00      	nop
 800a680:	1fe00fff 	.word	0x1fe00fff
 800a684:	18000f3a 	.word	0x18000f3a

0800a688 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b092      	sub	sp, #72	; 0x48
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	60f8      	str	r0, [r7, #12]
 800a690:	60b9      	str	r1, [r7, #8]
 800a692:	607a      	str	r2, [r7, #4]
 800a694:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a696:	f7f7 fc79 	bl	8001f8c <HAL_GetTick>
 800a69a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d107      	bne.n	800a6ba <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	e16b      	b.n	800a992 <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a6c0:	b2db      	uxtb	r3, r3
 800a6c2:	2b01      	cmp	r3, #1
 800a6c4:	f040 815e 	bne.w	800a984 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a6ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	441a      	add	r2, r3
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d907      	bls.n	800a6ec <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6e0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	e152      	b.n	800a992 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	2203      	movs	r2, #3
 800a6f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a700:	2b01      	cmp	r3, #1
 800a702:	d002      	beq.n	800a70a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800a704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a706:	025b      	lsls	r3, r3, #9
 800a708:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a70a:	f04f 33ff 	mov.w	r3, #4294967295
 800a70e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	025b      	lsls	r3, r3, #9
 800a714:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a716:	2390      	movs	r3, #144	; 0x90
 800a718:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a71a:	2300      	movs	r3, #0
 800a71c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a71e:	2300      	movs	r3, #0
 800a720:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a722:	2300      	movs	r3, #0
 800a724:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f107 0218 	add.w	r2, r7, #24
 800a72e:	4611      	mov	r1, r2
 800a730:	4618      	mov	r0, r3
 800a732:	f003 f8c1 	bl	800d8b8 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	68da      	ldr	r2, [r3, #12]
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a744:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d90a      	bls.n	800a762 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	2220      	movs	r2, #32
 800a750:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a758:	4618      	mov	r0, r3
 800a75a:	f003 f965 	bl	800da28 <SDMMC_CmdWriteMultiBlock>
 800a75e:	6478      	str	r0, [r7, #68]	; 0x44
 800a760:	e009      	b.n	800a776 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	2210      	movs	r2, #16
 800a766:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a76e:	4618      	mov	r0, r3
 800a770:	f003 f937 	bl	800d9e2 <SDMMC_CmdWriteSingleBlock>
 800a774:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a776:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d012      	beq.n	800a7a2 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4a86      	ldr	r2, [pc, #536]	; (800a99c <HAL_SD_WriteBlocks+0x314>)
 800a782:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a788:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a78a:	431a      	orrs	r2, r3
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2201      	movs	r2, #1
 800a794:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2200      	movs	r2, #0
 800a79c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a79e:	2301      	movs	r3, #1
 800a7a0:	e0f7      	b.n	800a992 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800a7a2:	69fb      	ldr	r3, [r7, #28]
 800a7a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a7a6:	e05c      	b.n	800a862 <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d037      	beq.n	800a826 <HAL_SD_WriteBlocks+0x19e>
 800a7b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7b8:	2b1f      	cmp	r3, #31
 800a7ba:	d934      	bls.n	800a826 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800a7bc:	2300      	movs	r3, #0
 800a7be:	643b      	str	r3, [r7, #64]	; 0x40
 800a7c0:	e02b      	b.n	800a81a <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800a7c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a7c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800a7ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7d0:	781b      	ldrb	r3, [r3, #0]
 800a7d2:	021a      	lsls	r2, r3, #8
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a7da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7dc:	3301      	adds	r3, #1
 800a7de:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800a7e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7e2:	781b      	ldrb	r3, [r3, #0]
 800a7e4:	041a      	lsls	r2, r3, #16
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	4313      	orrs	r3, r2
 800a7ea:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a7ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800a7f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7f4:	781b      	ldrb	r3, [r3, #0]
 800a7f6:	061a      	lsls	r2, r3, #24
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	4313      	orrs	r3, r2
 800a7fc:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a7fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a800:	3301      	adds	r3, #1
 800a802:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f107 0214 	add.w	r2, r7, #20
 800a80c:	4611      	mov	r1, r2
 800a80e:	4618      	mov	r0, r3
 800a810:	f002 ffd7 	bl	800d7c2 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800a814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a816:	3301      	adds	r3, #1
 800a818:	643b      	str	r3, [r7, #64]	; 0x40
 800a81a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a81c:	2b07      	cmp	r3, #7
 800a81e:	d9d0      	bls.n	800a7c2 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 800a820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a822:	3b20      	subs	r3, #32
 800a824:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a826:	f7f7 fbb1 	bl	8001f8c <HAL_GetTick>
 800a82a:	4602      	mov	r2, r0
 800a82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a82e:	1ad3      	subs	r3, r2, r3
 800a830:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a832:	429a      	cmp	r2, r3
 800a834:	d902      	bls.n	800a83c <HAL_SD_WriteBlocks+0x1b4>
 800a836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d112      	bne.n	800a862 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4a56      	ldr	r2, [pc, #344]	; (800a99c <HAL_SD_WriteBlocks+0x314>)
 800a842:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a848:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a84a:	431a      	orrs	r2, r3
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2201      	movs	r2, #1
 800a854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2200      	movs	r2, #0
 800a85c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800a85e:	2303      	movs	r3, #3
 800a860:	e097      	b.n	800a992 <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a868:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d09b      	beq.n	800a7a8 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	68da      	ldr	r2, [r3, #12]
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a87e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d022      	beq.n	800a8d4 <HAL_SD_WriteBlocks+0x24c>
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	2b01      	cmp	r3, #1
 800a892:	d91f      	bls.n	800a8d4 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a898:	2b03      	cmp	r3, #3
 800a89a:	d01b      	beq.n	800a8d4 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f003 f8e5 	bl	800da70 <SDMMC_CmdStopTransfer>
 800a8a6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800a8a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d012      	beq.n	800a8d4 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	4a3a      	ldr	r2, [pc, #232]	; (800a99c <HAL_SD_WriteBlocks+0x314>)
 800a8b4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8bc:	431a      	orrs	r2, r3
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	2201      	movs	r2, #1
 800a8c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	e05e      	b.n	800a992 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8da:	f003 0308 	and.w	r3, r3, #8
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d012      	beq.n	800a908 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4a2d      	ldr	r2, [pc, #180]	; (800a99c <HAL_SD_WriteBlocks+0x314>)
 800a8e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ee:	f043 0208 	orr.w	r2, r3, #8
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2200      	movs	r2, #0
 800a902:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a904:	2301      	movs	r3, #1
 800a906:	e044      	b.n	800a992 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a90e:	f003 0302 	and.w	r3, r3, #2
 800a912:	2b00      	cmp	r3, #0
 800a914:	d012      	beq.n	800a93c <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	4a20      	ldr	r2, [pc, #128]	; (800a99c <HAL_SD_WriteBlocks+0x314>)
 800a91c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a922:	f043 0202 	orr.w	r2, r3, #2
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	2201      	movs	r2, #1
 800a92e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	2200      	movs	r2, #0
 800a936:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a938:	2301      	movs	r3, #1
 800a93a:	e02a      	b.n	800a992 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a942:	f003 0310 	and.w	r3, r3, #16
 800a946:	2b00      	cmp	r3, #0
 800a948:	d012      	beq.n	800a970 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	4a13      	ldr	r2, [pc, #76]	; (800a99c <HAL_SD_WriteBlocks+0x314>)
 800a950:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a956:	f043 0210 	orr.w	r2, r3, #16
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2201      	movs	r2, #1
 800a962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	2200      	movs	r2, #0
 800a96a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a96c:	2301      	movs	r3, #1
 800a96e:	e010      	b.n	800a992 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4a0a      	ldr	r2, [pc, #40]	; (800a9a0 <HAL_SD_WriteBlocks+0x318>)
 800a976:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2201      	movs	r2, #1
 800a97c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800a980:	2300      	movs	r3, #0
 800a982:	e006      	b.n	800a992 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a988:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a990:	2301      	movs	r3, #1
  }
}
 800a992:	4618      	mov	r0, r3
 800a994:	3748      	adds	r7, #72	; 0x48
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}
 800a99a:	bf00      	nop
 800a99c:	1fe00fff 	.word	0x1fe00fff
 800a9a0:	18000f3a 	.word	0x18000f3a

0800a9a4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b08c      	sub	sp, #48	; 0x30
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	60f8      	str	r0, [r7, #12]
 800a9ac:	60b9      	str	r1, [r7, #8]
 800a9ae:	607a      	str	r2, [r7, #4]
 800a9b0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d107      	bne.n	800a9cc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	e08d      	b.n	800aae8 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a9d2:	b2db      	uxtb	r3, r3
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	f040 8086 	bne.w	800aae6 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a9e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	441a      	add	r2, r3
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d907      	bls.n	800a9fe <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9f2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	e074      	b.n	800aae8 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	2203      	movs	r2, #3
 800aa02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	68ba      	ldr	r2, [r7, #8]
 800aa12:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	025a      	lsls	r2, r3, #9
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa20:	2b01      	cmp	r3, #1
 800aa22:	d002      	beq.n	800aa2a <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800aa24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa26:	025b      	lsls	r3, r3, #9
 800aa28:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800aa2a:	f04f 33ff 	mov.w	r3, #4294967295
 800aa2e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	025b      	lsls	r3, r3, #9
 800aa34:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800aa36:	2390      	movs	r3, #144	; 0x90
 800aa38:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800aa3a:	2302      	movs	r3, #2
 800aa3c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800aa42:	2300      	movs	r3, #0
 800aa44:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f107 0210 	add.w	r2, r7, #16
 800aa4e:	4611      	mov	r1, r2
 800aa50:	4618      	mov	r0, r3
 800aa52:	f002 ff31 	bl	800d8b8 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	68da      	ldr	r2, [r3, #12]
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aa64:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	68ba      	ldr	r2, [r7, #8]
 800aa6c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	2201      	movs	r2, #1
 800aa74:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	d90a      	bls.n	800aa92 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2282      	movs	r2, #130	; 0x82
 800aa80:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f002 ff87 	bl	800d99c <SDMMC_CmdReadMultiBlock>
 800aa8e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800aa90:	e009      	b.n	800aaa6 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2281      	movs	r2, #129	; 0x81
 800aa96:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f002 ff59 	bl	800d956 <SDMMC_CmdReadSingleBlock>
 800aaa4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800aaa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d012      	beq.n	800aad2 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	4a0f      	ldr	r2, [pc, #60]	; (800aaf0 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800aab2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaba:	431a      	orrs	r2, r3
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	2201      	movs	r2, #1
 800aac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	2200      	movs	r2, #0
 800aacc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800aace:	2301      	movs	r3, #1
 800aad0:	e00a      	b.n	800aae8 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800aae0:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800aae2:	2300      	movs	r3, #0
 800aae4:	e000      	b.n	800aae8 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800aae6:	2302      	movs	r3, #2
  }
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3730      	adds	r7, #48	; 0x30
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}
 800aaf0:	1fe00fff 	.word	0x1fe00fff

0800aaf4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b08c      	sub	sp, #48	; 0x30
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	60f8      	str	r0, [r7, #12]
 800aafc:	60b9      	str	r1, [r7, #8]
 800aafe:	607a      	str	r2, [r7, #4]
 800ab00:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d107      	bne.n	800ab1c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab10:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ab18:	2301      	movs	r3, #1
 800ab1a:	e08d      	b.n	800ac38 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ab22:	b2db      	uxtb	r3, r3
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	f040 8086 	bne.w	800ac36 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ab30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	441a      	add	r2, r3
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d907      	bls.n	800ab4e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab42:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	e074      	b.n	800ac38 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	2203      	movs	r2, #3
 800ab52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	68ba      	ldr	r2, [r7, #8]
 800ab62:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	025a      	lsls	r2, r3, #9
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	625a      	str	r2, [r3, #36]	; 0x24

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab70:	2b01      	cmp	r3, #1
 800ab72:	d002      	beq.n	800ab7a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800ab74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab76:	025b      	lsls	r3, r3, #9
 800ab78:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ab7a:	f04f 33ff 	mov.w	r3, #4294967295
 800ab7e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	025b      	lsls	r3, r3, #9
 800ab84:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800ab86:	2390      	movs	r3, #144	; 0x90
 800ab88:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800ab92:	2300      	movs	r3, #0
 800ab94:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f107 0210 	add.w	r2, r7, #16
 800ab9e:	4611      	mov	r1, r2
 800aba0:	4618      	mov	r0, r3
 800aba2:	f002 fe89 	bl	800d8b8 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	68da      	ldr	r2, [r3, #12]
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800abb4:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	68ba      	ldr	r2, [r7, #8]
 800abbc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	2201      	movs	r2, #1
 800abc4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	2b01      	cmp	r3, #1
 800abca:	d90a      	bls.n	800abe2 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	22a0      	movs	r2, #160	; 0xa0
 800abd0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800abd8:	4618      	mov	r0, r3
 800abda:	f002 ff25 	bl	800da28 <SDMMC_CmdWriteMultiBlock>
 800abde:	62f8      	str	r0, [r7, #44]	; 0x2c
 800abe0:	e009      	b.n	800abf6 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	2290      	movs	r2, #144	; 0x90
 800abe6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800abee:	4618      	mov	r0, r3
 800abf0:	f002 fef7 	bl	800d9e2 <SDMMC_CmdWriteSingleBlock>
 800abf4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800abf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d012      	beq.n	800ac22 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4a0f      	ldr	r2, [pc, #60]	; (800ac40 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800ac02:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac0a:	431a      	orrs	r2, r3
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	2201      	movs	r2, #1
 800ac14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	e00a      	b.n	800ac38 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800ac30:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ac32:	2300      	movs	r3, #0
 800ac34:	e000      	b.n	800ac38 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800ac36:	2302      	movs	r3, #2
  }
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3730      	adds	r7, #48	; 0x30
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}
 800ac40:	1fe00fff 	.word	0x1fe00fff

0800ac44 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b084      	sub	sp, #16
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac50:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d008      	beq.n	800ac72 <HAL_SD_IRQHandler+0x2e>
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	f003 0308 	and.w	r3, r3, #8
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d003      	beq.n	800ac72 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f001 f92a 	bl	800bec4 <SD_Read_IT>
 800ac70:	e19a      	b.n	800afa8 <HAL_SD_IRQHandler+0x364>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	f000 80ac 	beq.w	800adda <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ac8a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681a      	ldr	r2, [r3, #0]
 800ac96:	4b9d      	ldr	r3, [pc, #628]	; (800af0c <HAL_SD_IRQHandler+0x2c8>)
 800ac98:	400b      	ands	r3, r1
 800ac9a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800acaa:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	68da      	ldr	r2, [r3, #12]
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800acba:	60da      	str	r2, [r3, #12]

    if((context & SD_CONTEXT_IT) != 0U)
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	f003 0308 	and.w	r3, r3, #8
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d038      	beq.n	800ad38 <HAL_SD_IRQHandler+0xf4>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	f003 0302 	and.w	r3, r3, #2
 800accc:	2b00      	cmp	r3, #0
 800acce:	d104      	bne.n	800acda <HAL_SD_IRQHandler+0x96>
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f003 0320 	and.w	r3, r3, #32
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d011      	beq.n	800acfe <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4618      	mov	r0, r3
 800ace0:	f002 fec6 	bl	800da70 <SDMMC_CmdStopTransfer>
 800ace4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d008      	beq.n	800acfe <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	431a      	orrs	r2, r3
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f000 f959 	bl	800afb0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	4a83      	ldr	r2, [pc, #524]	; (800af10 <HAL_SD_IRQHandler+0x2cc>)
 800ad04:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2201      	movs	r2, #1
 800ad0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2200      	movs	r2, #0
 800ad12:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f003 0301 	and.w	r3, r3, #1
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d104      	bne.n	800ad28 <HAL_SD_IRQHandler+0xe4>
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f003 0302 	and.w	r3, r3, #2
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d003      	beq.n	800ad30 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f004 feb7 	bl	800fa9c <HAL_SD_RxCpltCallback>
 800ad2e:	e13b      	b.n	800afa8 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f004 fea9 	bl	800fa88 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ad36:	e137      	b.n	800afa8 <HAL_SD_IRQHandler+0x364>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	f000 8132 	beq.w	800afa8 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	2200      	movs	r2, #0
 800ad52:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f003 0302 	and.w	r3, r3, #2
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d104      	bne.n	800ad70 <HAL_SD_IRQHandler+0x12c>
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	f003 0320 	and.w	r3, r3, #32
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d011      	beq.n	800ad94 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4618      	mov	r0, r3
 800ad76:	f002 fe7b 	bl	800da70 <SDMMC_CmdStopTransfer>
 800ad7a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d008      	beq.n	800ad94 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	431a      	orrs	r2, r3
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f000 f90e 	bl	800afb0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2201      	movs	r2, #1
 800ad98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	f003 0310 	and.w	r3, r3, #16
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d104      	bne.n	800adb6 <HAL_SD_IRQHandler+0x172>
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f003 0320 	and.w	r3, r3, #32
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d002      	beq.n	800adbc <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f004 fe66 	bl	800fa88 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	f003 0301 	and.w	r3, r3, #1
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d105      	bne.n	800add2 <HAL_SD_IRQHandler+0x18e>
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	f003 0302 	and.w	r3, r3, #2
 800adcc:	2b00      	cmp	r3, #0
 800adce:	f000 80eb 	beq.w	800afa8 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f004 fe62 	bl	800fa9c <HAL_SD_RxCpltCallback>
}
 800add8:	e0e6      	b.n	800afa8 <HAL_SD_IRQHandler+0x364>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ade0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d008      	beq.n	800adfa <HAL_SD_IRQHandler+0x1b6>
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	f003 0308 	and.w	r3, r3, #8
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d003      	beq.n	800adfa <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f001 f8ac 	bl	800bf50 <SD_Write_IT>
 800adf8:	e0d6      	b.n	800afa8 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae00:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	f000 80a2 	beq.w	800af4e <HAL_SD_IRQHandler+0x30a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae10:	f003 0302 	and.w	r3, r3, #2
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d005      	beq.n	800ae24 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae1c:	f043 0202 	orr.w	r2, r3, #2
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae2a:	f003 0308 	and.w	r3, r3, #8
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d005      	beq.n	800ae3e <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae36:	f043 0208 	orr.w	r2, r3, #8
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae44:	f003 0320 	and.w	r3, r3, #32
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d005      	beq.n	800ae58 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae50:	f043 0220 	orr.w	r2, r3, #32
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae5e:	f003 0310 	and.w	r3, r3, #16
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d005      	beq.n	800ae72 <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae6a:	f043 0210 	orr.w	r2, r3, #16
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	4a26      	ldr	r2, [pc, #152]	; (800af10 <HAL_SD_IRQHandler+0x2cc>)
 800ae78:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800ae88:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	68da      	ldr	r2, [r3, #12]
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae98:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aea8:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	68da      	ldr	r2, [r3, #12]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800aeb8:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	4618      	mov	r0, r3
 800aec0:	f002 fdd6 	bl	800da70 <SDMMC_CmdStopTransfer>
 800aec4:	4602      	mov	r2, r0
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeca:	431a      	orrs	r2, r3
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	68da      	ldr	r2, [r3, #12]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aede:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aee8:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	f003 0308 	and.w	r3, r3, #8
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d00f      	beq.n	800af14 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2201      	movs	r2, #1
 800aef8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2200      	movs	r2, #0
 800af00:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f000 f854 	bl	800afb0 <HAL_SD_ErrorCallback>
}
 800af08:	e04e      	b.n	800afa8 <HAL_SD_IRQHandler+0x364>
 800af0a:	bf00      	nop
 800af0c:	ffff3ec5 	.word	0xffff3ec5
 800af10:	18000f3a 	.word	0x18000f3a
    else if((context & SD_CONTEXT_DMA) != 0U)
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d044      	beq.n	800afa8 <HAL_SD_IRQHandler+0x364>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af22:	2b00      	cmp	r3, #0
 800af24:	d040      	beq.n	800afa8 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800af34:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	2200      	movs	r2, #0
 800af3c:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2201      	movs	r2, #1
 800af42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 f832 	bl	800afb0 <HAL_SD_ErrorCallback>
}
 800af4c:	e02c      	b.n	800afa8 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d025      	beq.n	800afa8 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af64:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af6c:	f003 0304 	and.w	r3, r3, #4
 800af70:	2b00      	cmp	r3, #0
 800af72:	d10c      	bne.n	800af8e <HAL_SD_IRQHandler+0x34a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	f003 0320 	and.w	r3, r3, #32
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d003      	beq.n	800af86 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f001 f84e 	bl	800c020 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800af84:	e010      	b.n	800afa8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f001 f836 	bl	800bff8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800af8c:	e00c      	b.n	800afa8 <HAL_SD_IRQHandler+0x364>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	f003 0320 	and.w	r3, r3, #32
 800af94:	2b00      	cmp	r3, #0
 800af96:	d003      	beq.n	800afa0 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f001 f837 	bl	800c00c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800af9e:	e003      	b.n	800afa8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f001 f81f 	bl	800bfe4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800afa6:	e7ff      	b.n	800afa8 <HAL_SD_IRQHandler+0x364>
 800afa8:	bf00      	nop
 800afaa:	3710      	adds	r7, #16
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}

0800afb0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800afb0:	b480      	push	{r7}
 800afb2:	b083      	sub	sp, #12
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800afb8:	bf00      	nop
 800afba:	370c      	adds	r7, #12
 800afbc:	46bd      	mov	sp, r7
 800afbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc2:	4770      	bx	lr

0800afc4 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b083      	sub	sp, #12
 800afc8:	af00      	add	r7, sp, #0
 800afca:	4603      	mov	r3, r0
 800afcc:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 800afce:	bf00      	nop
 800afd0:	370c      	adds	r7, #12
 800afd2:	46bd      	mov	sp, r7
 800afd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd8:	4770      	bx	lr
	...

0800afdc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800afdc:	b480      	push	{r7}
 800afde:	b083      	sub	sp, #12
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800afea:	0f9b      	lsrs	r3, r3, #30
 800afec:	b2da      	uxtb	r2, r3
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aff6:	0e9b      	lsrs	r3, r3, #26
 800aff8:	b2db      	uxtb	r3, r3
 800affa:	f003 030f 	and.w	r3, r3, #15
 800affe:	b2da      	uxtb	r2, r3
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b008:	0e1b      	lsrs	r3, r3, #24
 800b00a:	b2db      	uxtb	r3, r3
 800b00c:	f003 0303 	and.w	r3, r3, #3
 800b010:	b2da      	uxtb	r2, r3
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b01a:	0c1b      	lsrs	r3, r3, #16
 800b01c:	b2da      	uxtb	r2, r3
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b026:	0a1b      	lsrs	r3, r3, #8
 800b028:	b2da      	uxtb	r2, r3
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b032:	b2da      	uxtb	r2, r3
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b03c:	0d1b      	lsrs	r3, r3, #20
 800b03e:	b29a      	uxth	r2, r3
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b048:	0c1b      	lsrs	r3, r3, #16
 800b04a:	b2db      	uxtb	r3, r3
 800b04c:	f003 030f 	and.w	r3, r3, #15
 800b050:	b2da      	uxtb	r2, r3
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b05a:	0bdb      	lsrs	r3, r3, #15
 800b05c:	b2db      	uxtb	r3, r3
 800b05e:	f003 0301 	and.w	r3, r3, #1
 800b062:	b2da      	uxtb	r2, r3
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b06c:	0b9b      	lsrs	r3, r3, #14
 800b06e:	b2db      	uxtb	r3, r3
 800b070:	f003 0301 	and.w	r3, r3, #1
 800b074:	b2da      	uxtb	r2, r3
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b07e:	0b5b      	lsrs	r3, r3, #13
 800b080:	b2db      	uxtb	r3, r3
 800b082:	f003 0301 	and.w	r3, r3, #1
 800b086:	b2da      	uxtb	r2, r3
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b090:	0b1b      	lsrs	r3, r3, #12
 800b092:	b2db      	uxtb	r3, r3
 800b094:	f003 0301 	and.w	r3, r3, #1
 800b098:	b2da      	uxtb	r2, r3
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d163      	bne.n	800b174 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b0b0:	009a      	lsls	r2, r3, #2
 800b0b2:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b0b6:	4013      	ands	r3, r2
 800b0b8:	687a      	ldr	r2, [r7, #4]
 800b0ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800b0bc:	0f92      	lsrs	r2, r2, #30
 800b0be:	431a      	orrs	r2, r3
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b0c8:	0edb      	lsrs	r3, r3, #27
 800b0ca:	b2db      	uxtb	r3, r3
 800b0cc:	f003 0307 	and.w	r3, r3, #7
 800b0d0:	b2da      	uxtb	r2, r3
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b0da:	0e1b      	lsrs	r3, r3, #24
 800b0dc:	b2db      	uxtb	r3, r3
 800b0de:	f003 0307 	and.w	r3, r3, #7
 800b0e2:	b2da      	uxtb	r2, r3
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b0ec:	0d5b      	lsrs	r3, r3, #21
 800b0ee:	b2db      	uxtb	r3, r3
 800b0f0:	f003 0307 	and.w	r3, r3, #7
 800b0f4:	b2da      	uxtb	r2, r3
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b0fe:	0c9b      	lsrs	r3, r3, #18
 800b100:	b2db      	uxtb	r3, r3
 800b102:	f003 0307 	and.w	r3, r3, #7
 800b106:	b2da      	uxtb	r2, r3
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b110:	0bdb      	lsrs	r3, r3, #15
 800b112:	b2db      	uxtb	r3, r3
 800b114:	f003 0307 	and.w	r3, r3, #7
 800b118:	b2da      	uxtb	r2, r3
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	691b      	ldr	r3, [r3, #16]
 800b122:	1c5a      	adds	r2, r3, #1
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	7e1b      	ldrb	r3, [r3, #24]
 800b12c:	b2db      	uxtb	r3, r3
 800b12e:	f003 0307 	and.w	r3, r3, #7
 800b132:	3302      	adds	r3, #2
 800b134:	2201      	movs	r2, #1
 800b136:	fa02 f303 	lsl.w	r3, r2, r3
 800b13a:	687a      	ldr	r2, [r7, #4]
 800b13c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800b13e:	fb02 f203 	mul.w	r2, r2, r3
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	7a1b      	ldrb	r3, [r3, #8]
 800b14a:	b2db      	uxtb	r3, r3
 800b14c:	f003 030f 	and.w	r3, r3, #15
 800b150:	2201      	movs	r2, #1
 800b152:	409a      	lsls	r2, r3
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b15c:	687a      	ldr	r2, [r7, #4]
 800b15e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b160:	0a52      	lsrs	r2, r2, #9
 800b162:	fb02 f203 	mul.w	r2, r2, r3
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b170:	659a      	str	r2, [r3, #88]	; 0x58
 800b172:	e031      	b.n	800b1d8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b178:	2b01      	cmp	r3, #1
 800b17a:	d11d      	bne.n	800b1b8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b180:	041b      	lsls	r3, r3, #16
 800b182:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b18a:	0c1b      	lsrs	r3, r3, #16
 800b18c:	431a      	orrs	r2, r3
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	691b      	ldr	r3, [r3, #16]
 800b196:	3301      	adds	r3, #1
 800b198:	029a      	lsls	r2, r3, #10
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b1ac:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	659a      	str	r2, [r3, #88]	; 0x58
 800b1b6:	e00f      	b.n	800b1d8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	4a58      	ldr	r2, [pc, #352]	; (800b320 <HAL_SD_GetCardCSD+0x344>)
 800b1be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2201      	movs	r2, #1
 800b1d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	e09d      	b.n	800b314 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b1dc:	0b9b      	lsrs	r3, r3, #14
 800b1de:	b2db      	uxtb	r3, r3
 800b1e0:	f003 0301 	and.w	r3, r3, #1
 800b1e4:	b2da      	uxtb	r2, r3
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b1ee:	09db      	lsrs	r3, r3, #7
 800b1f0:	b2db      	uxtb	r3, r3
 800b1f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1f6:	b2da      	uxtb	r2, r3
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b200:	b2db      	uxtb	r3, r3
 800b202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b206:	b2da      	uxtb	r2, r3
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b210:	0fdb      	lsrs	r3, r3, #31
 800b212:	b2da      	uxtb	r2, r3
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b21c:	0f5b      	lsrs	r3, r3, #29
 800b21e:	b2db      	uxtb	r3, r3
 800b220:	f003 0303 	and.w	r3, r3, #3
 800b224:	b2da      	uxtb	r2, r3
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b22e:	0e9b      	lsrs	r3, r3, #26
 800b230:	b2db      	uxtb	r3, r3
 800b232:	f003 0307 	and.w	r3, r3, #7
 800b236:	b2da      	uxtb	r2, r3
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b240:	0d9b      	lsrs	r3, r3, #22
 800b242:	b2db      	uxtb	r3, r3
 800b244:	f003 030f 	and.w	r3, r3, #15
 800b248:	b2da      	uxtb	r2, r3
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b252:	0d5b      	lsrs	r3, r3, #21
 800b254:	b2db      	uxtb	r3, r3
 800b256:	f003 0301 	and.w	r3, r3, #1
 800b25a:	b2da      	uxtb	r2, r3
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	2200      	movs	r2, #0
 800b266:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b26e:	0c1b      	lsrs	r3, r3, #16
 800b270:	b2db      	uxtb	r3, r3
 800b272:	f003 0301 	and.w	r3, r3, #1
 800b276:	b2da      	uxtb	r2, r3
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b282:	0bdb      	lsrs	r3, r3, #15
 800b284:	b2db      	uxtb	r3, r3
 800b286:	f003 0301 	and.w	r3, r3, #1
 800b28a:	b2da      	uxtb	r2, r3
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b296:	0b9b      	lsrs	r3, r3, #14
 800b298:	b2db      	uxtb	r3, r3
 800b29a:	f003 0301 	and.w	r3, r3, #1
 800b29e:	b2da      	uxtb	r2, r3
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2aa:	0b5b      	lsrs	r3, r3, #13
 800b2ac:	b2db      	uxtb	r3, r3
 800b2ae:	f003 0301 	and.w	r3, r3, #1
 800b2b2:	b2da      	uxtb	r2, r3
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2be:	0b1b      	lsrs	r3, r3, #12
 800b2c0:	b2db      	uxtb	r3, r3
 800b2c2:	f003 0301 	and.w	r3, r3, #1
 800b2c6:	b2da      	uxtb	r2, r3
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2d2:	0a9b      	lsrs	r3, r3, #10
 800b2d4:	b2db      	uxtb	r3, r3
 800b2d6:	f003 0303 	and.w	r3, r3, #3
 800b2da:	b2da      	uxtb	r2, r3
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2e6:	0a1b      	lsrs	r3, r3, #8
 800b2e8:	b2db      	uxtb	r3, r3
 800b2ea:	f003 0303 	and.w	r3, r3, #3
 800b2ee:	b2da      	uxtb	r2, r3
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2fa:	085b      	lsrs	r3, r3, #1
 800b2fc:	b2db      	uxtb	r3, r3
 800b2fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b302:	b2da      	uxtb	r2, r3
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	2201      	movs	r2, #1
 800b30e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800b312:	2300      	movs	r3, #0
}
 800b314:	4618      	mov	r0, r3
 800b316:	370c      	adds	r7, #12
 800b318:	46bd      	mov	sp, r7
 800b31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31e:	4770      	bx	lr
 800b320:	1fe00fff 	.word	0x1fe00fff

0800b324 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b094      	sub	sp, #80	; 0x50
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
 800b32c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800b32e:	2300      	movs	r3, #0
 800b330:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800b334:	f107 0308 	add.w	r3, r7, #8
 800b338:	4619      	mov	r1, r3
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f000 fb64 	bl	800ba08 <SD_SendSDStatus>
 800b340:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800b342:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b344:	2b00      	cmp	r3, #0
 800b346:	d011      	beq.n	800b36c <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	4a4f      	ldr	r2, [pc, #316]	; (800b48c <HAL_SD_GetCardStatus+0x168>)
 800b34e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b354:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b356:	431a      	orrs	r2, r3
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2201      	movs	r2, #1
 800b360:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800b364:	2301      	movs	r3, #1
 800b366:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800b36a:	e070      	b.n	800b44e <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	099b      	lsrs	r3, r3, #6
 800b370:	b2db      	uxtb	r3, r3
 800b372:	f003 0303 	and.w	r3, r3, #3
 800b376:	b2da      	uxtb	r2, r3
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	095b      	lsrs	r3, r3, #5
 800b380:	b2db      	uxtb	r3, r3
 800b382:	f003 0301 	and.w	r3, r3, #1
 800b386:	b2da      	uxtb	r2, r3
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	0a1b      	lsrs	r3, r3, #8
 800b390:	b29b      	uxth	r3, r3
 800b392:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b396:	b29a      	uxth	r2, r3
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	0e1b      	lsrs	r3, r3, #24
 800b39c:	b29b      	uxth	r3, r3
 800b39e:	4313      	orrs	r3, r2
 800b3a0:	b29a      	uxth	r2, r3
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	061a      	lsls	r2, r3, #24
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	021b      	lsls	r3, r3, #8
 800b3ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b3b2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	0a1b      	lsrs	r3, r3, #8
 800b3b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800b3bc:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	0e1b      	lsrs	r3, r3, #24
 800b3c2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	b2da      	uxtb	r2, r3
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800b3d0:	693b      	ldr	r3, [r7, #16]
 800b3d2:	0a1b      	lsrs	r3, r3, #8
 800b3d4:	b2da      	uxtb	r2, r3
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	0d1b      	lsrs	r3, r3, #20
 800b3de:	b2db      	uxtb	r3, r3
 800b3e0:	f003 030f 	and.w	r3, r3, #15
 800b3e4:	b2da      	uxtb	r2, r3
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	0c1b      	lsrs	r3, r3, #16
 800b3ee:	b29b      	uxth	r3, r3
 800b3f0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b3f4:	b29a      	uxth	r2, r3
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	b29b      	uxth	r3, r3
 800b3fa:	b2db      	uxtb	r3, r3
 800b3fc:	b29b      	uxth	r3, r3
 800b3fe:	4313      	orrs	r3, r2
 800b400:	b29a      	uxth	r2, r3
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	0a9b      	lsrs	r3, r3, #10
 800b40a:	b2db      	uxtb	r3, r3
 800b40c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b410:	b2da      	uxtb	r2, r3
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	0a1b      	lsrs	r3, r3, #8
 800b41a:	b2db      	uxtb	r3, r3
 800b41c:	f003 0303 	and.w	r3, r3, #3
 800b420:	b2da      	uxtb	r2, r3
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	091b      	lsrs	r3, r3, #4
 800b42a:	b2db      	uxtb	r3, r3
 800b42c:	f003 030f 	and.w	r3, r3, #15
 800b430:	b2da      	uxtb	r2, r3
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	b2db      	uxtb	r3, r3
 800b43a:	f003 030f 	and.w	r3, r3, #15
 800b43e:	b2da      	uxtb	r2, r3
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800b444:	69bb      	ldr	r3, [r7, #24]
 800b446:	0e1b      	lsrs	r3, r3, #24
 800b448:	b2da      	uxtb	r2, r3
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b456:	4618      	mov	r0, r3
 800b458:	f002 fa5a 	bl	800d910 <SDMMC_CmdBlockLength>
 800b45c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800b45e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b460:	2b00      	cmp	r3, #0
 800b462:	d00d      	beq.n	800b480 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	4a08      	ldr	r2, [pc, #32]	; (800b48c <HAL_SD_GetCardStatus+0x168>)
 800b46a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b470:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2201      	movs	r2, #1
 800b476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800b47a:	2301      	movs	r3, #1
 800b47c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800b480:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800b484:	4618      	mov	r0, r3
 800b486:	3750      	adds	r7, #80	; 0x50
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}
 800b48c:	1fe00fff 	.word	0x1fe00fff

0800b490 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800b490:	b480      	push	{r7}
 800b492:	b083      	sub	sp, #12
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800b4da:	2300      	movs	r3, #0
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	370c      	adds	r7, #12
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e6:	4770      	bx	lr

0800b4e8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800b4e8:	b5b0      	push	{r4, r5, r7, lr}
 800b4ea:	b08e      	sub	sp, #56	; 0x38
 800b4ec:	af04      	add	r7, sp, #16
 800b4ee:	6078      	str	r0, [r7, #4]
 800b4f0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2203      	movs	r2, #3
 800b4fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b504:	2b03      	cmp	r3, #3
 800b506:	d02e      	beq.n	800b566 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b50e:	d106      	bne.n	800b51e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b514:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	639a      	str	r2, [r3, #56]	; 0x38
 800b51c:	e029      	b.n	800b572 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b524:	d10a      	bne.n	800b53c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f000 fb66 	bl	800bbf8 <SD_WideBus_Enable>
 800b52c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b532:	6a3b      	ldr	r3, [r7, #32]
 800b534:	431a      	orrs	r2, r3
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	639a      	str	r2, [r3, #56]	; 0x38
 800b53a:	e01a      	b.n	800b572 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d10a      	bne.n	800b558 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f000 fba3 	bl	800bc8e <SD_WideBus_Disable>
 800b548:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b54e:	6a3b      	ldr	r3, [r7, #32]
 800b550:	431a      	orrs	r2, r3
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	639a      	str	r2, [r3, #56]	; 0x38
 800b556:	e00c      	b.n	800b572 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b55c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	639a      	str	r2, [r3, #56]	; 0x38
 800b564:	e005      	b.n	800b572 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b56a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b576:	2b00      	cmp	r3, #0
 800b578:	d007      	beq.n	800b58a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	4a2e      	ldr	r2, [pc, #184]	; (800b638 <HAL_SD_ConfigWideBusOperation+0x150>)
 800b580:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800b582:	2301      	movs	r3, #1
 800b584:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b588:	e034      	b.n	800b5f4 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	685b      	ldr	r3, [r3, #4]
 800b58e:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	689b      	ldr	r3, [r3, #8]
 800b594:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	691b      	ldr	r3, [r3, #16]
 800b59e:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	695b      	ldr	r3, [r3, #20]
 800b5a4:	2b03      	cmp	r3, #3
 800b5a6:	d903      	bls.n	800b5b0 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	695b      	ldr	r3, [r3, #20]
 800b5ac:	61bb      	str	r3, [r7, #24]
 800b5ae:	e012      	b.n	800b5d6 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5b8:	d103      	bne.n	800b5c2 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	695b      	ldr	r3, [r3, #20]
 800b5be:	61bb      	str	r3, [r7, #24]
 800b5c0:	e009      	b.n	800b5d6 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5ca:	d102      	bne.n	800b5d2 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800b5cc:	2302      	movs	r3, #2
 800b5ce:	61bb      	str	r3, [r7, #24]
 800b5d0:	e001      	b.n	800b5d6 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800b5d2:	2304      	movs	r3, #4
 800b5d4:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681d      	ldr	r5, [r3, #0]
 800b5da:	466c      	mov	r4, sp
 800b5dc:	f107 0314 	add.w	r3, r7, #20
 800b5e0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b5e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b5e8:	f107 0308 	add.w	r3, r7, #8
 800b5ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b5ee:	4628      	mov	r0, r5
 800b5f0:	f002 f8b0 	bl	800d754 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f002 f987 	bl	800d910 <SDMMC_CmdBlockLength>
 800b602:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b604:	6a3b      	ldr	r3, [r7, #32]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d00c      	beq.n	800b624 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	4a0a      	ldr	r2, [pc, #40]	; (800b638 <HAL_SD_ConfigWideBusOperation+0x150>)
 800b610:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b616:	6a3b      	ldr	r3, [r7, #32]
 800b618:	431a      	orrs	r2, r3
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800b61e:	2301      	movs	r3, #1
 800b620:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2201      	movs	r2, #1
 800b628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800b62c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b630:	4618      	mov	r0, r3
 800b632:	3728      	adds	r7, #40	; 0x28
 800b634:	46bd      	mov	sp, r7
 800b636:	bdb0      	pop	{r4, r5, r7, pc}
 800b638:	1fe00fff 	.word	0x1fe00fff

0800b63c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b086      	sub	sp, #24
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b644:	2300      	movs	r3, #0
 800b646:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b648:	f107 030c 	add.w	r3, r7, #12
 800b64c:	4619      	mov	r1, r3
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f000 faaa 	bl	800bba8 <SD_SendStatus>
 800b654:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d005      	beq.n	800b668 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	431a      	orrs	r2, r3
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	0a5b      	lsrs	r3, r3, #9
 800b66c:	f003 030f 	and.w	r3, r3, #15
 800b670:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b672:	693b      	ldr	r3, [r7, #16]
}
 800b674:	4618      	mov	r0, r3
 800b676:	3718      	adds	r7, #24
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b67c:	b590      	push	{r4, r7, lr}
 800b67e:	b091      	sub	sp, #68	; 0x44
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800b684:	2301      	movs	r3, #1
 800b686:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	4618      	mov	r0, r3
 800b68e:	f002 f8ba 	bl	800d806 <SDMMC_GetPowerState>
 800b692:	4603      	mov	r3, r0
 800b694:	2b00      	cmp	r3, #0
 800b696:	d102      	bne.n	800b69e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b698:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b69c:	e0a8      	b.n	800b7f0 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6a2:	2b03      	cmp	r3, #3
 800b6a4:	d02e      	beq.n	800b704 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f002 fb06 	bl	800dcbc <SDMMC_CmdSendCID>
 800b6b0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b6b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d001      	beq.n	800b6bc <SD_InitCard+0x40>
    {
      return errorstate;
 800b6b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6ba:	e099      	b.n	800b7f0 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	2100      	movs	r1, #0
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f002 f8e5 	bl	800d892 <SDMMC_GetResponse>
 800b6c8:	4602      	mov	r2, r0
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	2104      	movs	r1, #4
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f002 f8dc 	bl	800d892 <SDMMC_GetResponse>
 800b6da:	4602      	mov	r2, r0
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	2108      	movs	r1, #8
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f002 f8d3 	bl	800d892 <SDMMC_GetResponse>
 800b6ec:	4602      	mov	r2, r0
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	210c      	movs	r1, #12
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f002 f8ca 	bl	800d892 <SDMMC_GetResponse>
 800b6fe:	4602      	mov	r2, r0
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b708:	2b03      	cmp	r3, #3
 800b70a:	d00d      	beq.n	800b728 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f107 020e 	add.w	r2, r7, #14
 800b714:	4611      	mov	r1, r2
 800b716:	4618      	mov	r0, r3
 800b718:	f002 fb0f 	bl	800dd3a <SDMMC_CmdSetRelAdd>
 800b71c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b71e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b720:	2b00      	cmp	r3, #0
 800b722:	d001      	beq.n	800b728 <SD_InitCard+0xac>
    {
      return errorstate;
 800b724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b726:	e063      	b.n	800b7f0 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b72c:	2b03      	cmp	r3, #3
 800b72e:	d036      	beq.n	800b79e <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b730:	89fb      	ldrh	r3, [r7, #14]
 800b732:	461a      	mov	r2, r3
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681a      	ldr	r2, [r3, #0]
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b740:	041b      	lsls	r3, r3, #16
 800b742:	4619      	mov	r1, r3
 800b744:	4610      	mov	r0, r2
 800b746:	f002 fad8 	bl	800dcfa <SDMMC_CmdSendCSD>
 800b74a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b74c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d001      	beq.n	800b756 <SD_InitCard+0xda>
    {
      return errorstate;
 800b752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b754:	e04c      	b.n	800b7f0 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	2100      	movs	r1, #0
 800b75c:	4618      	mov	r0, r3
 800b75e:	f002 f898 	bl	800d892 <SDMMC_GetResponse>
 800b762:	4602      	mov	r2, r0
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	2104      	movs	r1, #4
 800b76e:	4618      	mov	r0, r3
 800b770:	f002 f88f 	bl	800d892 <SDMMC_GetResponse>
 800b774:	4602      	mov	r2, r0
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	2108      	movs	r1, #8
 800b780:	4618      	mov	r0, r3
 800b782:	f002 f886 	bl	800d892 <SDMMC_GetResponse>
 800b786:	4602      	mov	r2, r0
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	210c      	movs	r1, #12
 800b792:	4618      	mov	r0, r3
 800b794:	f002 f87d 	bl	800d892 <SDMMC_GetResponse>
 800b798:	4602      	mov	r2, r0
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	2104      	movs	r1, #4
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f002 f874 	bl	800d892 <SDMMC_GetResponse>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	0d1a      	lsrs	r2, r3, #20
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b7b2:	f107 0310 	add.w	r3, r7, #16
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f7ff fc0f 	bl	800afdc <HAL_SD_GetCardCSD>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d002      	beq.n	800b7ca <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b7c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b7c8:	e012      	b.n	800b7f0 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	6819      	ldr	r1, [r3, #0]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b7d2:	041b      	lsls	r3, r3, #16
 800b7d4:	f04f 0400 	mov.w	r4, #0
 800b7d8:	461a      	mov	r2, r3
 800b7da:	4623      	mov	r3, r4
 800b7dc:	4608      	mov	r0, r1
 800b7de:	f002 f983 	bl	800dae8 <SDMMC_CmdSelDesel>
 800b7e2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b7e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d001      	beq.n	800b7ee <SD_InitCard+0x172>
  {
    return errorstate;
 800b7ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7ec:	e000      	b.n	800b7f0 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b7ee:	2300      	movs	r3, #0
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3744      	adds	r7, #68	; 0x44
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd90      	pop	{r4, r7, pc}

0800b7f8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b088      	sub	sp, #32
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b800:	2300      	movs	r3, #0
 800b802:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800b804:	2300      	movs	r3, #0
 800b806:	61fb      	str	r3, [r7, #28]
 800b808:	2300      	movs	r3, #0
 800b80a:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 800b80c:	f7f6 fbbe 	bl	8001f8c <HAL_GetTick>
 800b810:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	4618      	mov	r0, r3
 800b818:	f002 f98a 	bl	800db30 <SDMMC_CmdGoIdleState>
 800b81c:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d001      	beq.n	800b828 <SD_PowerON+0x30>
  {
    return errorstate;
 800b824:	693b      	ldr	r3, [r7, #16]
 800b826:	e0e9      	b.n	800b9fc <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	4618      	mov	r0, r3
 800b82e:	f002 f99d 	bl	800db6c <SDMMC_CmdOperCond>
 800b832:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d00d      	beq.n	800b856 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2200      	movs	r2, #0
 800b83e:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	4618      	mov	r0, r3
 800b846:	f002 f973 	bl	800db30 <SDMMC_CmdGoIdleState>
 800b84a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d004      	beq.n	800b85c <SD_PowerON+0x64>
    {
      return errorstate;
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	e0d2      	b.n	800b9fc <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2201      	movs	r2, #1
 800b85a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b860:	2b01      	cmp	r3, #1
 800b862:	d137      	bne.n	800b8d4 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	2100      	movs	r1, #0
 800b86a:	4618      	mov	r0, r3
 800b86c:	f002 f99e 	bl	800dbac <SDMMC_CmdAppCommand>
 800b870:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b872:	693b      	ldr	r3, [r7, #16]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d02d      	beq.n	800b8d4 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b878:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b87c:	e0be      	b.n	800b9fc <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	2100      	movs	r1, #0
 800b884:	4618      	mov	r0, r3
 800b886:	f002 f991 	bl	800dbac <SDMMC_CmdAppCommand>
 800b88a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d001      	beq.n	800b896 <SD_PowerON+0x9e>
    {
      return errorstate;
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	e0b2      	b.n	800b9fc <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	495a      	ldr	r1, [pc, #360]	; (800ba04 <SD_PowerON+0x20c>)
 800b89c:	4618      	mov	r0, r3
 800b89e:	f002 f9a8 	bl	800dbf2 <SDMMC_CmdAppOperCommand>
 800b8a2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d002      	beq.n	800b8b0 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b8aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b8ae:	e0a5      	b.n	800b9fc <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	2100      	movs	r1, #0
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f001 ffeb 	bl	800d892 <SDMMC_GetResponse>
 800b8bc:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b8be:	69fb      	ldr	r3, [r7, #28]
 800b8c0:	0fdb      	lsrs	r3, r3, #31
 800b8c2:	2b01      	cmp	r3, #1
 800b8c4:	d101      	bne.n	800b8ca <SD_PowerON+0xd2>
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	e000      	b.n	800b8cc <SD_PowerON+0xd4>
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	61bb      	str	r3, [r7, #24]

    count++;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	3301      	adds	r3, #1
 800b8d2:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d802      	bhi.n	800b8e4 <SD_PowerON+0xec>
 800b8de:	69bb      	ldr	r3, [r7, #24]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d0cc      	beq.n	800b87e <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d902      	bls.n	800b8f4 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b8ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b8f2:	e083      	b.n	800b9fc <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b8f4:	69fb      	ldr	r3, [r7, #28]
 800b8f6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d07d      	beq.n	800b9fa <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2201      	movs	r2, #1
 800b902:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	699b      	ldr	r3, [r3, #24]
 800b908:	2b02      	cmp	r3, #2
 800b90a:	d176      	bne.n	800b9fa <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800b90c:	69fb      	ldr	r3, [r7, #28]
 800b90e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b912:	2b00      	cmp	r3, #0
 800b914:	d071      	beq.n	800b9fa <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b91c:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	681a      	ldr	r2, [r3, #0]
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f042 0208 	orr.w	r2, r2, #8
 800b92c:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	4618      	mov	r0, r3
 800b934:	f002 fa68 	bl	800de08 <SDMMC_CmdVoltageSwitch>
 800b938:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800b93a:	693b      	ldr	r3, [r7, #16]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d00c      	beq.n	800b95a <SD_PowerON+0x162>
        {
          return errorstate;
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	e05b      	b.n	800b9fc <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b944:	f7f6 fb22 	bl	8001f8c <HAL_GetTick>
 800b948:	4602      	mov	r2, r0
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	1ad3      	subs	r3, r2, r3
 800b94e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b952:	d102      	bne.n	800b95a <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800b954:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b958:	e050      	b.n	800b9fc <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b960:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b964:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b968:	d1ec      	bne.n	800b944 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800b972:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b97a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b97e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b982:	d002      	beq.n	800b98a <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800b984:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b988:	e038      	b.n	800b9fc <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800b98a:	2001      	movs	r0, #1
 800b98c:	f7ff fb1a 	bl	800afc4 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	681a      	ldr	r2, [r3, #0]
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	f042 0204 	orr.w	r2, r2, #4
 800b99e:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800b9a0:	e00a      	b.n	800b9b8 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b9a2:	f7f6 faf3 	bl	8001f8c <HAL_GetTick>
 800b9a6:	4602      	mov	r2, r0
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	1ad3      	subs	r3, r2, r3
 800b9ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9b0:	d102      	bne.n	800b9b8 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800b9b2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b9b6:	e021      	b.n	800b9fc <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b9c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b9c6:	d1ec      	bne.n	800b9a2 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800b9d0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b9dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b9e0:	d102      	bne.n	800b9e8 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b9e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b9e6:	e009      	b.n	800b9fc <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	2213      	movs	r2, #19
 800b9ee:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b9f8:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800b9fa:	2300      	movs	r3, #0
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3720      	adds	r7, #32
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}
 800ba04:	c1100000 	.word	0xc1100000

0800ba08 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b08c      	sub	sp, #48	; 0x30
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
 800ba10:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ba12:	f7f6 fabb 	bl	8001f8c <HAL_GetTick>
 800ba16:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	2100      	movs	r1, #0
 800ba22:	4618      	mov	r0, r3
 800ba24:	f001 ff35 	bl	800d892 <SDMMC_GetResponse>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba32:	d102      	bne.n	800ba3a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ba34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ba38:	e0b0      	b.n	800bb9c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	2140      	movs	r1, #64	; 0x40
 800ba40:	4618      	mov	r0, r3
 800ba42:	f001 ff65 	bl	800d910 <SDMMC_CmdBlockLength>
 800ba46:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ba48:	6a3b      	ldr	r3, [r7, #32]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d005      	beq.n	800ba5a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800ba56:	6a3b      	ldr	r3, [r7, #32]
 800ba58:	e0a0      	b.n	800bb9c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681a      	ldr	r2, [r3, #0]
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba62:	041b      	lsls	r3, r3, #16
 800ba64:	4619      	mov	r1, r3
 800ba66:	4610      	mov	r0, r2
 800ba68:	f002 f8a0 	bl	800dbac <SDMMC_CmdAppCommand>
 800ba6c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ba6e:	6a3b      	ldr	r3, [r7, #32]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d005      	beq.n	800ba80 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800ba7c:	6a3b      	ldr	r3, [r7, #32]
 800ba7e:	e08d      	b.n	800bb9c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ba80:	f04f 33ff 	mov.w	r3, #4294967295
 800ba84:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800ba86:	2340      	movs	r3, #64	; 0x40
 800ba88:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800ba8a:	2360      	movs	r3, #96	; 0x60
 800ba8c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ba8e:	2302      	movs	r3, #2
 800ba90:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ba92:	2300      	movs	r3, #0
 800ba94:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ba96:	2301      	movs	r3, #1
 800ba98:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	f107 0208 	add.w	r2, r7, #8
 800baa2:	4611      	mov	r1, r2
 800baa4:	4618      	mov	r0, r3
 800baa6:	f001 ff07 	bl	800d8b8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	4618      	mov	r0, r3
 800bab0:	f002 f988 	bl	800ddc4 <SDMMC_CmdStatusRegister>
 800bab4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bab6:	6a3b      	ldr	r3, [r7, #32]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d02b      	beq.n	800bb14 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800bac4:	6a3b      	ldr	r3, [r7, #32]
 800bac6:	e069      	b.n	800bb9c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bace:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d013      	beq.n	800bafe <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800bad6:	2300      	movs	r3, #0
 800bad8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bada:	e00d      	b.n	800baf8 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	4618      	mov	r0, r3
 800bae2:	f001 fe61 	bl	800d7a8 <SDMMC_ReadFIFO>
 800bae6:	4602      	mov	r2, r0
 800bae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baea:	601a      	str	r2, [r3, #0]
        pData++;
 800baec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baee:	3304      	adds	r3, #4
 800baf0:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800baf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baf4:	3301      	adds	r3, #1
 800baf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800baf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bafa:	2b07      	cmp	r3, #7
 800bafc:	d9ee      	bls.n	800badc <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bafe:	f7f6 fa45 	bl	8001f8c <HAL_GetTick>
 800bb02:	4602      	mov	r2, r0
 800bb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb06:	1ad3      	subs	r3, r2, r3
 800bb08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb0c:	d102      	bne.n	800bb14 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800bb0e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bb12:	e043      	b.n	800bb9c <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb1a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d0d2      	beq.n	800bac8 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb28:	f003 0308 	and.w	r3, r3, #8
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d001      	beq.n	800bb34 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800bb30:	2308      	movs	r3, #8
 800bb32:	e033      	b.n	800bb9c <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb3a:	f003 0302 	and.w	r3, r3, #2
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d001      	beq.n	800bb46 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800bb42:	2302      	movs	r3, #2
 800bb44:	e02a      	b.n	800bb9c <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb4c:	f003 0320 	and.w	r3, r3, #32
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d017      	beq.n	800bb84 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800bb54:	2320      	movs	r3, #32
 800bb56:	e021      	b.n	800bb9c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f001 fe23 	bl	800d7a8 <SDMMC_ReadFIFO>
 800bb62:	4602      	mov	r2, r0
 800bb64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb66:	601a      	str	r2, [r3, #0]
    pData++;
 800bb68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb6a:	3304      	adds	r3, #4
 800bb6c:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bb6e:	f7f6 fa0d 	bl	8001f8c <HAL_GetTick>
 800bb72:	4602      	mov	r2, r0
 800bb74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb76:	1ad3      	subs	r3, r2, r3
 800bb78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb7c:	d102      	bne.n	800bb84 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800bb7e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bb82:	e00b      	b.n	800bb9c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d1e2      	bne.n	800bb58 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	4a03      	ldr	r2, [pc, #12]	; (800bba4 <SD_SendSDStatus+0x19c>)
 800bb98:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800bb9a:	2300      	movs	r3, #0
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	3730      	adds	r7, #48	; 0x30
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}
 800bba4:	18000f3a 	.word	0x18000f3a

0800bba8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b084      	sub	sp, #16
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
 800bbb0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d102      	bne.n	800bbbe <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800bbb8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bbbc:	e018      	b.n	800bbf0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681a      	ldr	r2, [r3, #0]
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbc6:	041b      	lsls	r3, r3, #16
 800bbc8:	4619      	mov	r1, r3
 800bbca:	4610      	mov	r0, r2
 800bbcc:	f002 f8d7 	bl	800dd7e <SDMMC_CmdSendStatus>
 800bbd0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d001      	beq.n	800bbdc <SD_SendStatus+0x34>
  {
    return errorstate;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	e009      	b.n	800bbf0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	2100      	movs	r1, #0
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f001 fe55 	bl	800d892 <SDMMC_GetResponse>
 800bbe8:	4602      	mov	r2, r0
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800bbee:	2300      	movs	r3, #0
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3710      	adds	r7, #16
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}

0800bbf8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b086      	sub	sp, #24
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800bc00:	2300      	movs	r3, #0
 800bc02:	60fb      	str	r3, [r7, #12]
 800bc04:	2300      	movs	r3, #0
 800bc06:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	2100      	movs	r1, #0
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f001 fe3f 	bl	800d892 <SDMMC_GetResponse>
 800bc14:	4603      	mov	r3, r0
 800bc16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc1e:	d102      	bne.n	800bc26 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bc20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bc24:	e02f      	b.n	800bc86 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800bc26:	f107 030c 	add.w	r3, r7, #12
 800bc2a:	4619      	mov	r1, r3
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f000 f879 	bl	800bd24 <SD_FindSCR>
 800bc32:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d001      	beq.n	800bc3e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	e023      	b.n	800bc86 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d01c      	beq.n	800bc82 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681a      	ldr	r2, [r3, #0]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc50:	041b      	lsls	r3, r3, #16
 800bc52:	4619      	mov	r1, r3
 800bc54:	4610      	mov	r0, r2
 800bc56:	f001 ffa9 	bl	800dbac <SDMMC_CmdAppCommand>
 800bc5a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d001      	beq.n	800bc66 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	e00f      	b.n	800bc86 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	2102      	movs	r1, #2
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f001 ffe0 	bl	800dc32 <SDMMC_CmdBusWidth>
 800bc72:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d001      	beq.n	800bc7e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	e003      	b.n	800bc86 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	e001      	b.n	800bc86 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bc82:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3718      	adds	r7, #24
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}

0800bc8e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800bc8e:	b580      	push	{r7, lr}
 800bc90:	b086      	sub	sp, #24
 800bc92:	af00      	add	r7, sp, #0
 800bc94:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800bc96:	2300      	movs	r3, #0
 800bc98:	60fb      	str	r3, [r7, #12]
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	2100      	movs	r1, #0
 800bca4:	4618      	mov	r0, r3
 800bca6:	f001 fdf4 	bl	800d892 <SDMMC_GetResponse>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bcb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bcb4:	d102      	bne.n	800bcbc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bcb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bcba:	e02f      	b.n	800bd1c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800bcbc:	f107 030c 	add.w	r3, r7, #12
 800bcc0:	4619      	mov	r1, r3
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f000 f82e 	bl	800bd24 <SD_FindSCR>
 800bcc8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d001      	beq.n	800bcd4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	e023      	b.n	800bd1c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d01c      	beq.n	800bd18 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681a      	ldr	r2, [r3, #0]
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bce6:	041b      	lsls	r3, r3, #16
 800bce8:	4619      	mov	r1, r3
 800bcea:	4610      	mov	r0, r2
 800bcec:	f001 ff5e 	bl	800dbac <SDMMC_CmdAppCommand>
 800bcf0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d001      	beq.n	800bcfc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	e00f      	b.n	800bd1c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	2100      	movs	r1, #0
 800bd02:	4618      	mov	r0, r3
 800bd04:	f001 ff95 	bl	800dc32 <SDMMC_CmdBusWidth>
 800bd08:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d001      	beq.n	800bd14 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	e003      	b.n	800bd1c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800bd14:	2300      	movs	r3, #0
 800bd16:	e001      	b.n	800bd1c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bd18:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3718      	adds	r7, #24
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}

0800bd24 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b08e      	sub	sp, #56	; 0x38
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
 800bd2c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800bd2e:	f7f6 f92d 	bl	8001f8c <HAL_GetTick>
 800bd32:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800bd34:	2300      	movs	r3, #0
 800bd36:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800bd38:	2300      	movs	r3, #0
 800bd3a:	60bb      	str	r3, [r7, #8]
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	2108      	movs	r1, #8
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f001 fde0 	bl	800d910 <SDMMC_CmdBlockLength>
 800bd50:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bd52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d001      	beq.n	800bd5c <SD_FindSCR+0x38>
  {
    return errorstate;
 800bd58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd5a:	e0ad      	b.n	800beb8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681a      	ldr	r2, [r3, #0]
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd64:	041b      	lsls	r3, r3, #16
 800bd66:	4619      	mov	r1, r3
 800bd68:	4610      	mov	r0, r2
 800bd6a:	f001 ff1f 	bl	800dbac <SDMMC_CmdAppCommand>
 800bd6e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bd70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d001      	beq.n	800bd7a <SD_FindSCR+0x56>
  {
    return errorstate;
 800bd76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd78:	e09e      	b.n	800beb8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bd7a:	f04f 33ff 	mov.w	r3, #4294967295
 800bd7e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800bd80:	2308      	movs	r3, #8
 800bd82:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800bd84:	2330      	movs	r3, #48	; 0x30
 800bd86:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800bd88:	2302      	movs	r3, #2
 800bd8a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800bd90:	2301      	movs	r3, #1
 800bd92:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	f107 0210 	add.w	r2, r7, #16
 800bd9c:	4611      	mov	r1, r2
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f001 fd8a 	bl	800d8b8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f001 ff65 	bl	800dc78 <SDMMC_CmdSendSCR>
 800bdae:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bdb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d027      	beq.n	800be06 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800bdb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb8:	e07e      	b.n	800beb8 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d113      	bne.n	800bdf0 <SD_FindSCR+0xcc>
 800bdc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d110      	bne.n	800bdf0 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f001 fce8 	bl	800d7a8 <SDMMC_ReadFIFO>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	4618      	mov	r0, r3
 800bde2:	f001 fce1 	bl	800d7a8 <SDMMC_ReadFIFO>
 800bde6:	4603      	mov	r3, r0
 800bde8:	60fb      	str	r3, [r7, #12]
      index++;
 800bdea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdec:	3301      	adds	r3, #1
 800bdee:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bdf0:	f7f6 f8cc 	bl	8001f8c <HAL_GetTick>
 800bdf4:	4602      	mov	r2, r0
 800bdf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf8:	1ad3      	subs	r3, r2, r3
 800bdfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdfe:	d102      	bne.n	800be06 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800be00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800be04:	e058      	b.n	800beb8 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800be0c:	f240 532a 	movw	r3, #1322	; 0x52a
 800be10:	4013      	ands	r3, r2
 800be12:	2b00      	cmp	r3, #0
 800be14:	d0d1      	beq.n	800bdba <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be1c:	f003 0308 	and.w	r3, r3, #8
 800be20:	2b00      	cmp	r3, #0
 800be22:	d005      	beq.n	800be30 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	2208      	movs	r2, #8
 800be2a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800be2c:	2308      	movs	r3, #8
 800be2e:	e043      	b.n	800beb8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be36:	f003 0302 	and.w	r3, r3, #2
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d005      	beq.n	800be4a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	2202      	movs	r2, #2
 800be44:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800be46:	2302      	movs	r3, #2
 800be48:	e036      	b.n	800beb8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be50:	f003 0320 	and.w	r3, r3, #32
 800be54:	2b00      	cmp	r3, #0
 800be56:	d005      	beq.n	800be64 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	2220      	movs	r2, #32
 800be5e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800be60:	2320      	movs	r3, #32
 800be62:	e029      	b.n	800beb8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	4a15      	ldr	r2, [pc, #84]	; (800bec0 <SD_FindSCR+0x19c>)
 800be6a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	061a      	lsls	r2, r3, #24
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	021b      	lsls	r3, r3, #8
 800be74:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800be78:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	0a1b      	lsrs	r3, r3, #8
 800be7e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800be82:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	0e1b      	lsrs	r3, r3, #24
 800be88:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800be8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be8c:	601a      	str	r2, [r3, #0]
    scr++;
 800be8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be90:	3304      	adds	r3, #4
 800be92:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	061a      	lsls	r2, r3, #24
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	021b      	lsls	r3, r3, #8
 800be9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bea0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	0a1b      	lsrs	r3, r3, #8
 800bea6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800beaa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	0e1b      	lsrs	r3, r3, #24
 800beb0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800beb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beb4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800beb6:	2300      	movs	r3, #0
}
 800beb8:	4618      	mov	r0, r3
 800beba:	3738      	adds	r7, #56	; 0x38
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}
 800bec0:	18000f3a 	.word	0x18000f3a

0800bec4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b086      	sub	sp, #24
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bed0:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bed6:	2b1f      	cmp	r3, #31
 800bed8:	d936      	bls.n	800bf48 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800beda:	2300      	movs	r3, #0
 800bedc:	617b      	str	r3, [r7, #20]
 800bede:	e027      	b.n	800bf30 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	4618      	mov	r0, r3
 800bee6:	f001 fc5f 	bl	800d7a8 <SDMMC_ReadFIFO>
 800beea:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	b2da      	uxtb	r2, r3
 800bef0:	693b      	ldr	r3, [r7, #16]
 800bef2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	3301      	adds	r3, #1
 800bef8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	0a1b      	lsrs	r3, r3, #8
 800befe:	b2da      	uxtb	r2, r3
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	3301      	adds	r3, #1
 800bf08:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	0c1b      	lsrs	r3, r3, #16
 800bf0e:	b2da      	uxtb	r2, r3
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bf14:	693b      	ldr	r3, [r7, #16]
 800bf16:	3301      	adds	r3, #1
 800bf18:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	0e1b      	lsrs	r3, r3, #24
 800bf1e:	b2da      	uxtb	r2, r3
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	3301      	adds	r3, #1
 800bf28:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800bf2a:	697b      	ldr	r3, [r7, #20]
 800bf2c:	3301      	adds	r3, #1
 800bf2e:	617b      	str	r3, [r7, #20]
 800bf30:	697b      	ldr	r3, [r7, #20]
 800bf32:	2b07      	cmp	r3, #7
 800bf34:	d9d4      	bls.n	800bee0 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	693a      	ldr	r2, [r7, #16]
 800bf3a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf40:	f1a3 0220 	sub.w	r2, r3, #32
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800bf48:	bf00      	nop
 800bf4a:	3718      	adds	r7, #24
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}

0800bf50 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b086      	sub	sp, #24
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	6a1b      	ldr	r3, [r3, #32]
 800bf5c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf62:	2b1f      	cmp	r3, #31
 800bf64:	d93a      	bls.n	800bfdc <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800bf66:	2300      	movs	r3, #0
 800bf68:	617b      	str	r3, [r7, #20]
 800bf6a:	e02b      	b.n	800bfc4 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800bf6c:	693b      	ldr	r3, [r7, #16]
 800bf6e:	781b      	ldrb	r3, [r3, #0]
 800bf70:	60fb      	str	r3, [r7, #12]
      tmp++;
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	3301      	adds	r3, #1
 800bf76:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800bf78:	693b      	ldr	r3, [r7, #16]
 800bf7a:	781b      	ldrb	r3, [r3, #0]
 800bf7c:	021a      	lsls	r2, r3, #8
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	4313      	orrs	r3, r2
 800bf82:	60fb      	str	r3, [r7, #12]
      tmp++;
 800bf84:	693b      	ldr	r3, [r7, #16]
 800bf86:	3301      	adds	r3, #1
 800bf88:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800bf8a:	693b      	ldr	r3, [r7, #16]
 800bf8c:	781b      	ldrb	r3, [r3, #0]
 800bf8e:	041a      	lsls	r2, r3, #16
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	4313      	orrs	r3, r2
 800bf94:	60fb      	str	r3, [r7, #12]
      tmp++;
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	3301      	adds	r3, #1
 800bf9a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	781b      	ldrb	r3, [r3, #0]
 800bfa0:	061a      	lsls	r2, r3, #24
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	4313      	orrs	r3, r2
 800bfa6:	60fb      	str	r3, [r7, #12]
      tmp++;
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	3301      	adds	r3, #1
 800bfac:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	f107 020c 	add.w	r2, r7, #12
 800bfb6:	4611      	mov	r1, r2
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f001 fc02 	bl	800d7c2 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800bfbe:	697b      	ldr	r3, [r7, #20]
 800bfc0:	3301      	adds	r3, #1
 800bfc2:	617b      	str	r3, [r7, #20]
 800bfc4:	697b      	ldr	r3, [r7, #20]
 800bfc6:	2b07      	cmp	r3, #7
 800bfc8:	d9d0      	bls.n	800bf6c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	693a      	ldr	r2, [r7, #16]
 800bfce:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfd4:	f1a3 0220 	sub.w	r2, r3, #32
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800bfdc:	bf00      	nop
 800bfde:	3718      	adds	r7, #24
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}

0800bfe4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	b083      	sub	sp, #12
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800bfec:	bf00      	nop
 800bfee:	370c      	adds	r7, #12
 800bff0:	46bd      	mov	sp, r7
 800bff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff6:	4770      	bx	lr

0800bff8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800bff8:	b480      	push	{r7}
 800bffa:	b083      	sub	sp, #12
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800c000:	bf00      	nop
 800c002:	370c      	adds	r7, #12
 800c004:	46bd      	mov	sp, r7
 800c006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00a:	4770      	bx	lr

0800c00c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800c00c:	b480      	push	{r7}
 800c00e:	b083      	sub	sp, #12
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800c014:	bf00      	nop
 800c016:	370c      	adds	r7, #12
 800c018:	46bd      	mov	sp, r7
 800c01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01e:	4770      	bx	lr

0800c020 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800c020:	b480      	push	{r7}
 800c022:	b083      	sub	sp, #12
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800c028:	bf00      	nop
 800c02a:	370c      	adds	r7, #12
 800c02c:	46bd      	mov	sp, r7
 800c02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c032:	4770      	bx	lr

0800c034 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b084      	sub	sp, #16
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 800c03c:	2300      	movs	r3, #0
 800c03e:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d101      	bne.n	800c04a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800c046:	2301      	movs	r3, #1
 800c048:	e0e2      	b.n	800c210 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2200      	movs	r2, #0
 800c04e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	4a70      	ldr	r2, [pc, #448]	; (800c218 <HAL_SPI_Init+0x1e4>)
 800c056:	4293      	cmp	r3, r2
 800c058:	d00f      	beq.n	800c07a <HAL_SPI_Init+0x46>
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	4a6f      	ldr	r2, [pc, #444]	; (800c21c <HAL_SPI_Init+0x1e8>)
 800c060:	4293      	cmp	r3, r2
 800c062:	d00a      	beq.n	800c07a <HAL_SPI_Init+0x46>
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	4a6d      	ldr	r2, [pc, #436]	; (800c220 <HAL_SPI_Init+0x1ec>)
 800c06a:	4293      	cmp	r3, r2
 800c06c:	d005      	beq.n	800c07a <HAL_SPI_Init+0x46>
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	68db      	ldr	r3, [r3, #12]
 800c072:	2b0f      	cmp	r3, #15
 800c074:	d901      	bls.n	800c07a <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800c076:	2301      	movs	r3, #1
 800c078:	e0ca      	b.n	800c210 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f000 f8d2 	bl	800c224 <SPI_GetPacketSize>
 800c080:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	4a64      	ldr	r2, [pc, #400]	; (800c218 <HAL_SPI_Init+0x1e4>)
 800c088:	4293      	cmp	r3, r2
 800c08a:	d00c      	beq.n	800c0a6 <HAL_SPI_Init+0x72>
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	4a62      	ldr	r2, [pc, #392]	; (800c21c <HAL_SPI_Init+0x1e8>)
 800c092:	4293      	cmp	r3, r2
 800c094:	d007      	beq.n	800c0a6 <HAL_SPI_Init+0x72>
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	4a61      	ldr	r2, [pc, #388]	; (800c220 <HAL_SPI_Init+0x1ec>)
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d002      	beq.n	800c0a6 <HAL_SPI_Init+0x72>
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	2b08      	cmp	r3, #8
 800c0a4:	d811      	bhi.n	800c0ca <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c0aa:	4a5b      	ldr	r2, [pc, #364]	; (800c218 <HAL_SPI_Init+0x1e4>)
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d009      	beq.n	800c0c4 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	4a59      	ldr	r2, [pc, #356]	; (800c21c <HAL_SPI_Init+0x1e8>)
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	d004      	beq.n	800c0c4 <HAL_SPI_Init+0x90>
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	4a58      	ldr	r2, [pc, #352]	; (800c220 <HAL_SPI_Init+0x1ec>)
 800c0c0:	4293      	cmp	r3, r2
 800c0c2:	d104      	bne.n	800c0ce <HAL_SPI_Init+0x9a>
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	2b10      	cmp	r3, #16
 800c0c8:	d901      	bls.n	800c0ce <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	e0a0      	b.n	800c210 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c0d4:	b2db      	uxtb	r3, r3
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d106      	bne.n	800c0e8 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f7f5 fc2a 	bl	800193c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2202      	movs	r2, #2
 800c0ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	681a      	ldr	r2, [r3, #0]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	f022 0201 	bic.w	r2, r2, #1
 800c0fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	699b      	ldr	r3, [r3, #24]
 800c104:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c108:	d110      	bne.n	800c12c <HAL_SPI_Init+0xf8>
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	685b      	ldr	r3, [r3, #4]
 800c10e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c112:	d10b      	bne.n	800c12c <HAL_SPI_Init+0xf8>
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d107      	bne.n	800c12c <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	681a      	ldr	r2, [r3, #0]
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c12a:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	69da      	ldr	r2, [r3, #28]
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c134:	431a      	orrs	r2, r3
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	431a      	orrs	r2, r3
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c13e:	ea42 0103 	orr.w	r1, r2, r3
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	68da      	ldr	r2, [r3, #12]
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	430a      	orrs	r2, r1
 800c14c:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c156:	431a      	orrs	r2, r3
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c15c:	431a      	orrs	r2, r3
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	699b      	ldr	r3, [r3, #24]
 800c162:	431a      	orrs	r2, r3
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	691b      	ldr	r3, [r3, #16]
 800c168:	431a      	orrs	r2, r3
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	695b      	ldr	r3, [r3, #20]
 800c16e:	431a      	orrs	r2, r3
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	6a1b      	ldr	r3, [r3, #32]
 800c174:	431a      	orrs	r2, r3
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	685b      	ldr	r3, [r3, #4]
 800c17a:	431a      	orrs	r2, r3
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c180:	431a      	orrs	r2, r3
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	689b      	ldr	r3, [r3, #8]
 800c186:	431a      	orrs	r2, r3
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c18c:	ea42 0103 	orr.w	r1, r2, r3
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	430a      	orrs	r2, r1
 800c19a:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	685b      	ldr	r3, [r3, #4]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d113      	bne.n	800c1cc <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	689b      	ldr	r3, [r3, #8]
 800c1aa:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c1b6:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	689b      	ldr	r3, [r3, #8]
 800c1be:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c1ca:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	f022 0201 	bic.w	r2, r2, #1
 800c1da:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	685b      	ldr	r3, [r3, #4]
 800c1e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d00a      	beq.n	800c1fe <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	68db      	ldr	r3, [r3, #12]
 800c1ee:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	430a      	orrs	r2, r1
 800c1fc:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2200      	movs	r2, #0
 800c202:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2201      	movs	r2, #1
 800c20a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800c20e:	2300      	movs	r3, #0
}
 800c210:	4618      	mov	r0, r3
 800c212:	3710      	adds	r7, #16
 800c214:	46bd      	mov	sp, r7
 800c216:	bd80      	pop	{r7, pc}
 800c218:	40013000 	.word	0x40013000
 800c21c:	40003800 	.word	0x40003800
 800c220:	40003c00 	.word	0x40003c00

0800c224 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c224:	b480      	push	{r7}
 800c226:	b085      	sub	sp, #20
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c230:	095b      	lsrs	r3, r3, #5
 800c232:	3301      	adds	r3, #1
 800c234:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	68db      	ldr	r3, [r3, #12]
 800c23a:	3301      	adds	r3, #1
 800c23c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	3307      	adds	r3, #7
 800c242:	08db      	lsrs	r3, r3, #3
 800c244:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c246:	68bb      	ldr	r3, [r7, #8]
 800c248:	68fa      	ldr	r2, [r7, #12]
 800c24a:	fb02 f303 	mul.w	r3, r2, r3
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3714      	adds	r7, #20
 800c252:	46bd      	mov	sp, r7
 800c254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c258:	4770      	bx	lr

0800c25a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c25a:	b580      	push	{r7, lr}
 800c25c:	b082      	sub	sp, #8
 800c25e:	af00      	add	r7, sp, #0
 800c260:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d101      	bne.n	800c26c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c268:	2301      	movs	r3, #1
 800c26a:	e042      	b.n	800c2f2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c272:	2b00      	cmp	r3, #0
 800c274:	d106      	bne.n	800c284 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2200      	movs	r2, #0
 800c27a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f7f5 fba6 	bl	80019d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2224      	movs	r2, #36	; 0x24
 800c288:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	681a      	ldr	r2, [r3, #0]
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	f022 0201 	bic.w	r2, r2, #1
 800c29a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f000 f95f 	bl	800c560 <UART_SetConfig>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	2b01      	cmp	r3, #1
 800c2a6:	d101      	bne.n	800c2ac <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	e022      	b.n	800c2f2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d002      	beq.n	800c2ba <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f000 ff03 	bl	800d0c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	685a      	ldr	r2, [r3, #4]
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c2c8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	689a      	ldr	r2, [r3, #8]
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c2d8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	681a      	ldr	r2, [r3, #0]
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	f042 0201 	orr.w	r2, r2, #1
 800c2e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f000 ff8a 	bl	800d204 <UART_CheckIdleState>
 800c2f0:	4603      	mov	r3, r0
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3708      	adds	r7, #8
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}

0800c2fa <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c2fa:	b580      	push	{r7, lr}
 800c2fc:	b08a      	sub	sp, #40	; 0x28
 800c2fe:	af02      	add	r7, sp, #8
 800c300:	60f8      	str	r0, [r7, #12]
 800c302:	60b9      	str	r1, [r7, #8]
 800c304:	603b      	str	r3, [r7, #0]
 800c306:	4613      	mov	r3, r2
 800c308:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c310:	2b20      	cmp	r3, #32
 800c312:	f040 8083 	bne.w	800c41c <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d002      	beq.n	800c322 <HAL_UART_Transmit+0x28>
 800c31c:	88fb      	ldrh	r3, [r7, #6]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d101      	bne.n	800c326 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800c322:	2301      	movs	r3, #1
 800c324:	e07b      	b.n	800c41e <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c32c:	2b01      	cmp	r3, #1
 800c32e:	d101      	bne.n	800c334 <HAL_UART_Transmit+0x3a>
 800c330:	2302      	movs	r3, #2
 800c332:	e074      	b.n	800c41e <HAL_UART_Transmit+0x124>
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	2201      	movs	r2, #1
 800c338:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	2200      	movs	r2, #0
 800c340:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	2221      	movs	r2, #33	; 0x21
 800c348:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800c34c:	f7f5 fe1e 	bl	8001f8c <HAL_GetTick>
 800c350:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	88fa      	ldrh	r2, [r7, #6]
 800c356:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	88fa      	ldrh	r2, [r7, #6]
 800c35e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	689b      	ldr	r3, [r3, #8]
 800c366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c36a:	d108      	bne.n	800c37e <HAL_UART_Transmit+0x84>
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	691b      	ldr	r3, [r3, #16]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d104      	bne.n	800c37e <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800c374:	2300      	movs	r3, #0
 800c376:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	61bb      	str	r3, [r7, #24]
 800c37c:	e003      	b.n	800c386 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c382:	2300      	movs	r3, #0
 800c384:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	2200      	movs	r2, #0
 800c38a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800c38e:	e02c      	b.n	800c3ea <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	9300      	str	r3, [sp, #0]
 800c394:	697b      	ldr	r3, [r7, #20]
 800c396:	2200      	movs	r2, #0
 800c398:	2180      	movs	r1, #128	; 0x80
 800c39a:	68f8      	ldr	r0, [r7, #12]
 800c39c:	f000 ff7a 	bl	800d294 <UART_WaitOnFlagUntilTimeout>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d001      	beq.n	800c3aa <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800c3a6:	2303      	movs	r3, #3
 800c3a8:	e039      	b.n	800c41e <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800c3aa:	69fb      	ldr	r3, [r7, #28]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d10b      	bne.n	800c3c8 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c3b0:	69bb      	ldr	r3, [r7, #24]
 800c3b2:	881b      	ldrh	r3, [r3, #0]
 800c3b4:	461a      	mov	r2, r3
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c3be:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c3c0:	69bb      	ldr	r3, [r7, #24]
 800c3c2:	3302      	adds	r3, #2
 800c3c4:	61bb      	str	r3, [r7, #24]
 800c3c6:	e007      	b.n	800c3d8 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c3c8:	69fb      	ldr	r3, [r7, #28]
 800c3ca:	781a      	ldrb	r2, [r3, #0]
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c3d2:	69fb      	ldr	r3, [r7, #28]
 800c3d4:	3301      	adds	r3, #1
 800c3d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c3de:	b29b      	uxth	r3, r3
 800c3e0:	3b01      	subs	r3, #1
 800c3e2:	b29a      	uxth	r2, r3
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c3f0:	b29b      	uxth	r3, r3
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d1cc      	bne.n	800c390 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	9300      	str	r3, [sp, #0]
 800c3fa:	697b      	ldr	r3, [r7, #20]
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	2140      	movs	r1, #64	; 0x40
 800c400:	68f8      	ldr	r0, [r7, #12]
 800c402:	f000 ff47 	bl	800d294 <UART_WaitOnFlagUntilTimeout>
 800c406:	4603      	mov	r3, r0
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d001      	beq.n	800c410 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800c40c:	2303      	movs	r3, #3
 800c40e:	e006      	b.n	800c41e <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	2220      	movs	r2, #32
 800c414:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800c418:	2300      	movs	r3, #0
 800c41a:	e000      	b.n	800c41e <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800c41c:	2302      	movs	r3, #2
  }
}
 800c41e:	4618      	mov	r0, r3
 800c420:	3720      	adds	r7, #32
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}
	...

0800c428 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b084      	sub	sp, #16
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	60f8      	str	r0, [r7, #12]
 800c430:	60b9      	str	r1, [r7, #8]
 800c432:	4613      	mov	r3, r2
 800c434:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c43c:	2b20      	cmp	r3, #32
 800c43e:	d170      	bne.n	800c522 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 800c440:	68bb      	ldr	r3, [r7, #8]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d002      	beq.n	800c44c <HAL_UART_Receive_DMA+0x24>
 800c446:	88fb      	ldrh	r3, [r7, #6]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d101      	bne.n	800c450 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c44c:	2301      	movs	r3, #1
 800c44e:	e069      	b.n	800c524 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c456:	2b01      	cmp	r3, #1
 800c458:	d101      	bne.n	800c45e <HAL_UART_Receive_DMA+0x36>
 800c45a:	2302      	movs	r3, #2
 800c45c:	e062      	b.n	800c524 <HAL_UART_Receive_DMA+0xfc>
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	2201      	movs	r2, #1
 800c462:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	68ba      	ldr	r2, [r7, #8]
 800c46a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	88fa      	ldrh	r2, [r7, #6]
 800c470:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	2200      	movs	r2, #0
 800c478:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	2222      	movs	r2, #34	; 0x22
 800c480:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d02c      	beq.n	800c4e6 <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c490:	4a26      	ldr	r2, [pc, #152]	; (800c52c <HAL_UART_Receive_DMA+0x104>)
 800c492:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c498:	4a25      	ldr	r2, [pc, #148]	; (800c530 <HAL_UART_Receive_DMA+0x108>)
 800c49a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c4a0:	4a24      	ldr	r2, [pc, #144]	; (800c534 <HAL_UART_Receive_DMA+0x10c>)
 800c4a2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	3324      	adds	r3, #36	; 0x24
 800c4b6:	4619      	mov	r1, r3
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4bc:	461a      	mov	r2, r3
 800c4be:	88fb      	ldrh	r3, [r7, #6]
 800c4c0:	f7f6 fa0a 	bl	80028d8 <HAL_DMA_Start_IT>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d00d      	beq.n	800c4e6 <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	2210      	movs	r2, #16
 800c4ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	2220      	movs	r2, #32
 800c4de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	e01e      	b.n	800c524 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	681a      	ldr	r2, [r3, #0]
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c4fc:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	689a      	ldr	r2, [r3, #8]
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	f042 0201 	orr.w	r2, r2, #1
 800c50c:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	689a      	ldr	r2, [r3, #8]
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c51c:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800c51e:	2300      	movs	r3, #0
 800c520:	e000      	b.n	800c524 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 800c522:	2302      	movs	r3, #2
  }
}
 800c524:	4618      	mov	r0, r3
 800c526:	3710      	adds	r7, #16
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd80      	pop	{r7, pc}
 800c52c:	0800d419 	.word	0x0800d419
 800c530:	0800d47f 	.word	0x0800d47f
 800c534:	0800d49b 	.word	0x0800d49b

0800c538 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c538:	b480      	push	{r7}
 800c53a:	b083      	sub	sp, #12
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800c540:	bf00      	nop
 800c542:	370c      	adds	r7, #12
 800c544:	46bd      	mov	sp, r7
 800c546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54a:	4770      	bx	lr

0800c54c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c54c:	b480      	push	{r7}
 800c54e:	b083      	sub	sp, #12
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c554:	bf00      	nop
 800c556:	370c      	adds	r7, #12
 800c558:	46bd      	mov	sp, r7
 800c55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55e:	4770      	bx	lr

0800c560 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c560:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800c564:	b08e      	sub	sp, #56	; 0x38
 800c566:	af00      	add	r7, sp, #0
 800c568:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c56a:	2300      	movs	r3, #0
 800c56c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	689a      	ldr	r2, [r3, #8]
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	691b      	ldr	r3, [r3, #16]
 800c578:	431a      	orrs	r2, r3
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	695b      	ldr	r3, [r3, #20]
 800c57e:	431a      	orrs	r2, r3
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	69db      	ldr	r3, [r3, #28]
 800c584:	4313      	orrs	r3, r2
 800c586:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c58c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c58e:	4313      	orrs	r3, r2
 800c590:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	681a      	ldr	r2, [r3, #0]
 800c598:	4bc1      	ldr	r3, [pc, #772]	; (800c8a0 <UART_SetConfig+0x340>)
 800c59a:	4013      	ands	r3, r2
 800c59c:	687a      	ldr	r2, [r7, #4]
 800c59e:	6812      	ldr	r2, [r2, #0]
 800c5a0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c5a2:	430b      	orrs	r3, r1
 800c5a4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	685b      	ldr	r3, [r3, #4]
 800c5ac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	68da      	ldr	r2, [r3, #12]
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	430a      	orrs	r2, r1
 800c5ba:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	699b      	ldr	r3, [r3, #24]
 800c5c0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	4ab7      	ldr	r2, [pc, #732]	; (800c8a4 <UART_SetConfig+0x344>)
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	d004      	beq.n	800c5d6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	6a1b      	ldr	r3, [r3, #32]
 800c5d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c5d2:	4313      	orrs	r3, r2
 800c5d4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	689a      	ldr	r2, [r3, #8]
 800c5dc:	4bb2      	ldr	r3, [pc, #712]	; (800c8a8 <UART_SetConfig+0x348>)
 800c5de:	4013      	ands	r3, r2
 800c5e0:	687a      	ldr	r2, [r7, #4]
 800c5e2:	6812      	ldr	r2, [r2, #0]
 800c5e4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c5e6:	430b      	orrs	r3, r1
 800c5e8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5f0:	f023 010f 	bic.w	r1, r3, #15
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	430a      	orrs	r2, r1
 800c5fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	4aa9      	ldr	r2, [pc, #676]	; (800c8ac <UART_SetConfig+0x34c>)
 800c606:	4293      	cmp	r3, r2
 800c608:	d177      	bne.n	800c6fa <UART_SetConfig+0x19a>
 800c60a:	4ba9      	ldr	r3, [pc, #676]	; (800c8b0 <UART_SetConfig+0x350>)
 800c60c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c60e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c612:	2b28      	cmp	r3, #40	; 0x28
 800c614:	d86c      	bhi.n	800c6f0 <UART_SetConfig+0x190>
 800c616:	a201      	add	r2, pc, #4	; (adr r2, 800c61c <UART_SetConfig+0xbc>)
 800c618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c61c:	0800c6c1 	.word	0x0800c6c1
 800c620:	0800c6f1 	.word	0x0800c6f1
 800c624:	0800c6f1 	.word	0x0800c6f1
 800c628:	0800c6f1 	.word	0x0800c6f1
 800c62c:	0800c6f1 	.word	0x0800c6f1
 800c630:	0800c6f1 	.word	0x0800c6f1
 800c634:	0800c6f1 	.word	0x0800c6f1
 800c638:	0800c6f1 	.word	0x0800c6f1
 800c63c:	0800c6c9 	.word	0x0800c6c9
 800c640:	0800c6f1 	.word	0x0800c6f1
 800c644:	0800c6f1 	.word	0x0800c6f1
 800c648:	0800c6f1 	.word	0x0800c6f1
 800c64c:	0800c6f1 	.word	0x0800c6f1
 800c650:	0800c6f1 	.word	0x0800c6f1
 800c654:	0800c6f1 	.word	0x0800c6f1
 800c658:	0800c6f1 	.word	0x0800c6f1
 800c65c:	0800c6d1 	.word	0x0800c6d1
 800c660:	0800c6f1 	.word	0x0800c6f1
 800c664:	0800c6f1 	.word	0x0800c6f1
 800c668:	0800c6f1 	.word	0x0800c6f1
 800c66c:	0800c6f1 	.word	0x0800c6f1
 800c670:	0800c6f1 	.word	0x0800c6f1
 800c674:	0800c6f1 	.word	0x0800c6f1
 800c678:	0800c6f1 	.word	0x0800c6f1
 800c67c:	0800c6d9 	.word	0x0800c6d9
 800c680:	0800c6f1 	.word	0x0800c6f1
 800c684:	0800c6f1 	.word	0x0800c6f1
 800c688:	0800c6f1 	.word	0x0800c6f1
 800c68c:	0800c6f1 	.word	0x0800c6f1
 800c690:	0800c6f1 	.word	0x0800c6f1
 800c694:	0800c6f1 	.word	0x0800c6f1
 800c698:	0800c6f1 	.word	0x0800c6f1
 800c69c:	0800c6e1 	.word	0x0800c6e1
 800c6a0:	0800c6f1 	.word	0x0800c6f1
 800c6a4:	0800c6f1 	.word	0x0800c6f1
 800c6a8:	0800c6f1 	.word	0x0800c6f1
 800c6ac:	0800c6f1 	.word	0x0800c6f1
 800c6b0:	0800c6f1 	.word	0x0800c6f1
 800c6b4:	0800c6f1 	.word	0x0800c6f1
 800c6b8:	0800c6f1 	.word	0x0800c6f1
 800c6bc:	0800c6e9 	.word	0x0800c6e9
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6c6:	e233      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800c6c8:	2304      	movs	r3, #4
 800c6ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6ce:	e22f      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800c6d0:	2308      	movs	r3, #8
 800c6d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6d6:	e22b      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800c6d8:	2310      	movs	r3, #16
 800c6da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6de:	e227      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800c6e0:	2320      	movs	r3, #32
 800c6e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6e6:	e223      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800c6e8:	2340      	movs	r3, #64	; 0x40
 800c6ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6ee:	e21f      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800c6f0:	2380      	movs	r3, #128	; 0x80
 800c6f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6f6:	bf00      	nop
 800c6f8:	e21a      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	4a6d      	ldr	r2, [pc, #436]	; (800c8b4 <UART_SetConfig+0x354>)
 800c700:	4293      	cmp	r3, r2
 800c702:	d132      	bne.n	800c76a <UART_SetConfig+0x20a>
 800c704:	4b6a      	ldr	r3, [pc, #424]	; (800c8b0 <UART_SetConfig+0x350>)
 800c706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c708:	f003 0307 	and.w	r3, r3, #7
 800c70c:	2b05      	cmp	r3, #5
 800c70e:	d827      	bhi.n	800c760 <UART_SetConfig+0x200>
 800c710:	a201      	add	r2, pc, #4	; (adr r2, 800c718 <UART_SetConfig+0x1b8>)
 800c712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c716:	bf00      	nop
 800c718:	0800c731 	.word	0x0800c731
 800c71c:	0800c739 	.word	0x0800c739
 800c720:	0800c741 	.word	0x0800c741
 800c724:	0800c749 	.word	0x0800c749
 800c728:	0800c751 	.word	0x0800c751
 800c72c:	0800c759 	.word	0x0800c759
 800c730:	2300      	movs	r3, #0
 800c732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c736:	e1fb      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800c738:	2304      	movs	r3, #4
 800c73a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c73e:	e1f7      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800c740:	2308      	movs	r3, #8
 800c742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c746:	e1f3      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800c748:	2310      	movs	r3, #16
 800c74a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c74e:	e1ef      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800c750:	2320      	movs	r3, #32
 800c752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c756:	e1eb      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800c758:	2340      	movs	r3, #64	; 0x40
 800c75a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c75e:	e1e7      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800c760:	2380      	movs	r3, #128	; 0x80
 800c762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c766:	bf00      	nop
 800c768:	e1e2      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	4a52      	ldr	r2, [pc, #328]	; (800c8b8 <UART_SetConfig+0x358>)
 800c770:	4293      	cmp	r3, r2
 800c772:	d132      	bne.n	800c7da <UART_SetConfig+0x27a>
 800c774:	4b4e      	ldr	r3, [pc, #312]	; (800c8b0 <UART_SetConfig+0x350>)
 800c776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c778:	f003 0307 	and.w	r3, r3, #7
 800c77c:	2b05      	cmp	r3, #5
 800c77e:	d827      	bhi.n	800c7d0 <UART_SetConfig+0x270>
 800c780:	a201      	add	r2, pc, #4	; (adr r2, 800c788 <UART_SetConfig+0x228>)
 800c782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c786:	bf00      	nop
 800c788:	0800c7a1 	.word	0x0800c7a1
 800c78c:	0800c7a9 	.word	0x0800c7a9
 800c790:	0800c7b1 	.word	0x0800c7b1
 800c794:	0800c7b9 	.word	0x0800c7b9
 800c798:	0800c7c1 	.word	0x0800c7c1
 800c79c:	0800c7c9 	.word	0x0800c7c9
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7a6:	e1c3      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800c7a8:	2304      	movs	r3, #4
 800c7aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7ae:	e1bf      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800c7b0:	2308      	movs	r3, #8
 800c7b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7b6:	e1bb      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800c7b8:	2310      	movs	r3, #16
 800c7ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7be:	e1b7      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800c7c0:	2320      	movs	r3, #32
 800c7c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7c6:	e1b3      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800c7c8:	2340      	movs	r3, #64	; 0x40
 800c7ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7ce:	e1af      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800c7d0:	2380      	movs	r3, #128	; 0x80
 800c7d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7d6:	bf00      	nop
 800c7d8:	e1aa      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	4a37      	ldr	r2, [pc, #220]	; (800c8bc <UART_SetConfig+0x35c>)
 800c7e0:	4293      	cmp	r3, r2
 800c7e2:	d132      	bne.n	800c84a <UART_SetConfig+0x2ea>
 800c7e4:	4b32      	ldr	r3, [pc, #200]	; (800c8b0 <UART_SetConfig+0x350>)
 800c7e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7e8:	f003 0307 	and.w	r3, r3, #7
 800c7ec:	2b05      	cmp	r3, #5
 800c7ee:	d827      	bhi.n	800c840 <UART_SetConfig+0x2e0>
 800c7f0:	a201      	add	r2, pc, #4	; (adr r2, 800c7f8 <UART_SetConfig+0x298>)
 800c7f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7f6:	bf00      	nop
 800c7f8:	0800c811 	.word	0x0800c811
 800c7fc:	0800c819 	.word	0x0800c819
 800c800:	0800c821 	.word	0x0800c821
 800c804:	0800c829 	.word	0x0800c829
 800c808:	0800c831 	.word	0x0800c831
 800c80c:	0800c839 	.word	0x0800c839
 800c810:	2300      	movs	r3, #0
 800c812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c816:	e18b      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800c818:	2304      	movs	r3, #4
 800c81a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c81e:	e187      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800c820:	2308      	movs	r3, #8
 800c822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c826:	e183      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800c828:	2310      	movs	r3, #16
 800c82a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c82e:	e17f      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800c830:	2320      	movs	r3, #32
 800c832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c836:	e17b      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800c838:	2340      	movs	r3, #64	; 0x40
 800c83a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c83e:	e177      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800c840:	2380      	movs	r3, #128	; 0x80
 800c842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c846:	bf00      	nop
 800c848:	e172      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	4a1c      	ldr	r2, [pc, #112]	; (800c8c0 <UART_SetConfig+0x360>)
 800c850:	4293      	cmp	r3, r2
 800c852:	d144      	bne.n	800c8de <UART_SetConfig+0x37e>
 800c854:	4b16      	ldr	r3, [pc, #88]	; (800c8b0 <UART_SetConfig+0x350>)
 800c856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c858:	f003 0307 	and.w	r3, r3, #7
 800c85c:	2b05      	cmp	r3, #5
 800c85e:	d839      	bhi.n	800c8d4 <UART_SetConfig+0x374>
 800c860:	a201      	add	r2, pc, #4	; (adr r2, 800c868 <UART_SetConfig+0x308>)
 800c862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c866:	bf00      	nop
 800c868:	0800c881 	.word	0x0800c881
 800c86c:	0800c889 	.word	0x0800c889
 800c870:	0800c891 	.word	0x0800c891
 800c874:	0800c899 	.word	0x0800c899
 800c878:	0800c8c5 	.word	0x0800c8c5
 800c87c:	0800c8cd 	.word	0x0800c8cd
 800c880:	2300      	movs	r3, #0
 800c882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c886:	e153      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800c888:	2304      	movs	r3, #4
 800c88a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c88e:	e14f      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800c890:	2308      	movs	r3, #8
 800c892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c896:	e14b      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800c898:	2310      	movs	r3, #16
 800c89a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c89e:	e147      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800c8a0:	cfff69f3 	.word	0xcfff69f3
 800c8a4:	58000c00 	.word	0x58000c00
 800c8a8:	11fff4ff 	.word	0x11fff4ff
 800c8ac:	40011000 	.word	0x40011000
 800c8b0:	58024400 	.word	0x58024400
 800c8b4:	40004400 	.word	0x40004400
 800c8b8:	40004800 	.word	0x40004800
 800c8bc:	40004c00 	.word	0x40004c00
 800c8c0:	40005000 	.word	0x40005000
 800c8c4:	2320      	movs	r3, #32
 800c8c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8ca:	e131      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800c8cc:	2340      	movs	r3, #64	; 0x40
 800c8ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8d2:	e12d      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800c8d4:	2380      	movs	r3, #128	; 0x80
 800c8d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8da:	bf00      	nop
 800c8dc:	e128      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	4ab6      	ldr	r2, [pc, #728]	; (800cbbc <UART_SetConfig+0x65c>)
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	d178      	bne.n	800c9da <UART_SetConfig+0x47a>
 800c8e8:	4bb5      	ldr	r3, [pc, #724]	; (800cbc0 <UART_SetConfig+0x660>)
 800c8ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c8f0:	2b28      	cmp	r3, #40	; 0x28
 800c8f2:	d86d      	bhi.n	800c9d0 <UART_SetConfig+0x470>
 800c8f4:	a201      	add	r2, pc, #4	; (adr r2, 800c8fc <UART_SetConfig+0x39c>)
 800c8f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8fa:	bf00      	nop
 800c8fc:	0800c9a1 	.word	0x0800c9a1
 800c900:	0800c9d1 	.word	0x0800c9d1
 800c904:	0800c9d1 	.word	0x0800c9d1
 800c908:	0800c9d1 	.word	0x0800c9d1
 800c90c:	0800c9d1 	.word	0x0800c9d1
 800c910:	0800c9d1 	.word	0x0800c9d1
 800c914:	0800c9d1 	.word	0x0800c9d1
 800c918:	0800c9d1 	.word	0x0800c9d1
 800c91c:	0800c9a9 	.word	0x0800c9a9
 800c920:	0800c9d1 	.word	0x0800c9d1
 800c924:	0800c9d1 	.word	0x0800c9d1
 800c928:	0800c9d1 	.word	0x0800c9d1
 800c92c:	0800c9d1 	.word	0x0800c9d1
 800c930:	0800c9d1 	.word	0x0800c9d1
 800c934:	0800c9d1 	.word	0x0800c9d1
 800c938:	0800c9d1 	.word	0x0800c9d1
 800c93c:	0800c9b1 	.word	0x0800c9b1
 800c940:	0800c9d1 	.word	0x0800c9d1
 800c944:	0800c9d1 	.word	0x0800c9d1
 800c948:	0800c9d1 	.word	0x0800c9d1
 800c94c:	0800c9d1 	.word	0x0800c9d1
 800c950:	0800c9d1 	.word	0x0800c9d1
 800c954:	0800c9d1 	.word	0x0800c9d1
 800c958:	0800c9d1 	.word	0x0800c9d1
 800c95c:	0800c9b9 	.word	0x0800c9b9
 800c960:	0800c9d1 	.word	0x0800c9d1
 800c964:	0800c9d1 	.word	0x0800c9d1
 800c968:	0800c9d1 	.word	0x0800c9d1
 800c96c:	0800c9d1 	.word	0x0800c9d1
 800c970:	0800c9d1 	.word	0x0800c9d1
 800c974:	0800c9d1 	.word	0x0800c9d1
 800c978:	0800c9d1 	.word	0x0800c9d1
 800c97c:	0800c9c1 	.word	0x0800c9c1
 800c980:	0800c9d1 	.word	0x0800c9d1
 800c984:	0800c9d1 	.word	0x0800c9d1
 800c988:	0800c9d1 	.word	0x0800c9d1
 800c98c:	0800c9d1 	.word	0x0800c9d1
 800c990:	0800c9d1 	.word	0x0800c9d1
 800c994:	0800c9d1 	.word	0x0800c9d1
 800c998:	0800c9d1 	.word	0x0800c9d1
 800c99c:	0800c9c9 	.word	0x0800c9c9
 800c9a0:	2301      	movs	r3, #1
 800c9a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9a6:	e0c3      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800c9a8:	2304      	movs	r3, #4
 800c9aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9ae:	e0bf      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800c9b0:	2308      	movs	r3, #8
 800c9b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9b6:	e0bb      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800c9b8:	2310      	movs	r3, #16
 800c9ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9be:	e0b7      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800c9c0:	2320      	movs	r3, #32
 800c9c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9c6:	e0b3      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800c9c8:	2340      	movs	r3, #64	; 0x40
 800c9ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9ce:	e0af      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800c9d0:	2380      	movs	r3, #128	; 0x80
 800c9d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9d6:	bf00      	nop
 800c9d8:	e0aa      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	4a79      	ldr	r2, [pc, #484]	; (800cbc4 <UART_SetConfig+0x664>)
 800c9e0:	4293      	cmp	r3, r2
 800c9e2:	d132      	bne.n	800ca4a <UART_SetConfig+0x4ea>
 800c9e4:	4b76      	ldr	r3, [pc, #472]	; (800cbc0 <UART_SetConfig+0x660>)
 800c9e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9e8:	f003 0307 	and.w	r3, r3, #7
 800c9ec:	2b05      	cmp	r3, #5
 800c9ee:	d827      	bhi.n	800ca40 <UART_SetConfig+0x4e0>
 800c9f0:	a201      	add	r2, pc, #4	; (adr r2, 800c9f8 <UART_SetConfig+0x498>)
 800c9f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9f6:	bf00      	nop
 800c9f8:	0800ca11 	.word	0x0800ca11
 800c9fc:	0800ca19 	.word	0x0800ca19
 800ca00:	0800ca21 	.word	0x0800ca21
 800ca04:	0800ca29 	.word	0x0800ca29
 800ca08:	0800ca31 	.word	0x0800ca31
 800ca0c:	0800ca39 	.word	0x0800ca39
 800ca10:	2300      	movs	r3, #0
 800ca12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca16:	e08b      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800ca18:	2304      	movs	r3, #4
 800ca1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca1e:	e087      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800ca20:	2308      	movs	r3, #8
 800ca22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca26:	e083      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800ca28:	2310      	movs	r3, #16
 800ca2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca2e:	e07f      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800ca30:	2320      	movs	r3, #32
 800ca32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca36:	e07b      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800ca38:	2340      	movs	r3, #64	; 0x40
 800ca3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca3e:	e077      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800ca40:	2380      	movs	r3, #128	; 0x80
 800ca42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca46:	bf00      	nop
 800ca48:	e072      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	4a5e      	ldr	r2, [pc, #376]	; (800cbc8 <UART_SetConfig+0x668>)
 800ca50:	4293      	cmp	r3, r2
 800ca52:	d132      	bne.n	800caba <UART_SetConfig+0x55a>
 800ca54:	4b5a      	ldr	r3, [pc, #360]	; (800cbc0 <UART_SetConfig+0x660>)
 800ca56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca58:	f003 0307 	and.w	r3, r3, #7
 800ca5c:	2b05      	cmp	r3, #5
 800ca5e:	d827      	bhi.n	800cab0 <UART_SetConfig+0x550>
 800ca60:	a201      	add	r2, pc, #4	; (adr r2, 800ca68 <UART_SetConfig+0x508>)
 800ca62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca66:	bf00      	nop
 800ca68:	0800ca81 	.word	0x0800ca81
 800ca6c:	0800ca89 	.word	0x0800ca89
 800ca70:	0800ca91 	.word	0x0800ca91
 800ca74:	0800ca99 	.word	0x0800ca99
 800ca78:	0800caa1 	.word	0x0800caa1
 800ca7c:	0800caa9 	.word	0x0800caa9
 800ca80:	2300      	movs	r3, #0
 800ca82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca86:	e053      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800ca88:	2304      	movs	r3, #4
 800ca8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca8e:	e04f      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800ca90:	2308      	movs	r3, #8
 800ca92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca96:	e04b      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800ca98:	2310      	movs	r3, #16
 800ca9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca9e:	e047      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800caa0:	2320      	movs	r3, #32
 800caa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800caa6:	e043      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800caa8:	2340      	movs	r3, #64	; 0x40
 800caaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800caae:	e03f      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800cab0:	2380      	movs	r3, #128	; 0x80
 800cab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cab6:	bf00      	nop
 800cab8:	e03a      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	4a43      	ldr	r2, [pc, #268]	; (800cbcc <UART_SetConfig+0x66c>)
 800cac0:	4293      	cmp	r3, r2
 800cac2:	d132      	bne.n	800cb2a <UART_SetConfig+0x5ca>
 800cac4:	4b3e      	ldr	r3, [pc, #248]	; (800cbc0 <UART_SetConfig+0x660>)
 800cac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cac8:	f003 0307 	and.w	r3, r3, #7
 800cacc:	2b05      	cmp	r3, #5
 800cace:	d827      	bhi.n	800cb20 <UART_SetConfig+0x5c0>
 800cad0:	a201      	add	r2, pc, #4	; (adr r2, 800cad8 <UART_SetConfig+0x578>)
 800cad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cad6:	bf00      	nop
 800cad8:	0800caf1 	.word	0x0800caf1
 800cadc:	0800caf9 	.word	0x0800caf9
 800cae0:	0800cb01 	.word	0x0800cb01
 800cae4:	0800cb09 	.word	0x0800cb09
 800cae8:	0800cb11 	.word	0x0800cb11
 800caec:	0800cb19 	.word	0x0800cb19
 800caf0:	2302      	movs	r3, #2
 800caf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800caf6:	e01b      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800caf8:	2304      	movs	r3, #4
 800cafa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cafe:	e017      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800cb00:	2308      	movs	r3, #8
 800cb02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb06:	e013      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800cb08:	2310      	movs	r3, #16
 800cb0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb0e:	e00f      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800cb10:	2320      	movs	r3, #32
 800cb12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb16:	e00b      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800cb18:	2340      	movs	r3, #64	; 0x40
 800cb1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb1e:	e007      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800cb20:	2380      	movs	r3, #128	; 0x80
 800cb22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb26:	bf00      	nop
 800cb28:	e002      	b.n	800cb30 <UART_SetConfig+0x5d0>
 800cb2a:	2380      	movs	r3, #128	; 0x80
 800cb2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	4a25      	ldr	r2, [pc, #148]	; (800cbcc <UART_SetConfig+0x66c>)
 800cb36:	4293      	cmp	r3, r2
 800cb38:	f040 80b8 	bne.w	800ccac <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cb3c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cb40:	2b08      	cmp	r3, #8
 800cb42:	d019      	beq.n	800cb78 <UART_SetConfig+0x618>
 800cb44:	2b08      	cmp	r3, #8
 800cb46:	dc04      	bgt.n	800cb52 <UART_SetConfig+0x5f2>
 800cb48:	2b02      	cmp	r3, #2
 800cb4a:	d009      	beq.n	800cb60 <UART_SetConfig+0x600>
 800cb4c:	2b04      	cmp	r3, #4
 800cb4e:	d00b      	beq.n	800cb68 <UART_SetConfig+0x608>
 800cb50:	e042      	b.n	800cbd8 <UART_SetConfig+0x678>
 800cb52:	2b20      	cmp	r3, #32
 800cb54:	d02b      	beq.n	800cbae <UART_SetConfig+0x64e>
 800cb56:	2b40      	cmp	r3, #64	; 0x40
 800cb58:	d02c      	beq.n	800cbb4 <UART_SetConfig+0x654>
 800cb5a:	2b10      	cmp	r3, #16
 800cb5c:	d014      	beq.n	800cb88 <UART_SetConfig+0x628>
 800cb5e:	e03b      	b.n	800cbd8 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cb60:	f7fc fb34 	bl	80091cc <HAL_RCCEx_GetD3PCLK1Freq>
 800cb64:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cb66:	e03d      	b.n	800cbe4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb68:	f107 0314 	add.w	r3, r7, #20
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f7fc fb43 	bl	80091f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cb72:	69bb      	ldr	r3, [r7, #24]
 800cb74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cb76:	e035      	b.n	800cbe4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb78:	f107 0308 	add.w	r3, r7, #8
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	f7fc fc87 	bl	8009490 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cb86:	e02d      	b.n	800cbe4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb88:	4b0d      	ldr	r3, [pc, #52]	; (800cbc0 <UART_SetConfig+0x660>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	f003 0320 	and.w	r3, r3, #32
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d009      	beq.n	800cba8 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cb94:	4b0a      	ldr	r3, [pc, #40]	; (800cbc0 <UART_SetConfig+0x660>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	08db      	lsrs	r3, r3, #3
 800cb9a:	f003 0303 	and.w	r3, r3, #3
 800cb9e:	4a0c      	ldr	r2, [pc, #48]	; (800cbd0 <UART_SetConfig+0x670>)
 800cba0:	fa22 f303 	lsr.w	r3, r2, r3
 800cba4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cba6:	e01d      	b.n	800cbe4 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800cba8:	4b09      	ldr	r3, [pc, #36]	; (800cbd0 <UART_SetConfig+0x670>)
 800cbaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cbac:	e01a      	b.n	800cbe4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cbae:	4b09      	ldr	r3, [pc, #36]	; (800cbd4 <UART_SetConfig+0x674>)
 800cbb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cbb2:	e017      	b.n	800cbe4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cbb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cbb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cbba:	e013      	b.n	800cbe4 <UART_SetConfig+0x684>
 800cbbc:	40011400 	.word	0x40011400
 800cbc0:	58024400 	.word	0x58024400
 800cbc4:	40007800 	.word	0x40007800
 800cbc8:	40007c00 	.word	0x40007c00
 800cbcc:	58000c00 	.word	0x58000c00
 800cbd0:	03d09000 	.word	0x03d09000
 800cbd4:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800cbdc:	2301      	movs	r3, #1
 800cbde:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800cbe2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cbe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	f000 824d 	beq.w	800d086 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbf0:	4aad      	ldr	r2, [pc, #692]	; (800cea8 <UART_SetConfig+0x948>)
 800cbf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cbf6:	461a      	mov	r2, r3
 800cbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbfa:	fbb3 f3f2 	udiv	r3, r3, r2
 800cbfe:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	685a      	ldr	r2, [r3, #4]
 800cc04:	4613      	mov	r3, r2
 800cc06:	005b      	lsls	r3, r3, #1
 800cc08:	4413      	add	r3, r2
 800cc0a:	6a3a      	ldr	r2, [r7, #32]
 800cc0c:	429a      	cmp	r2, r3
 800cc0e:	d305      	bcc.n	800cc1c <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	685b      	ldr	r3, [r3, #4]
 800cc14:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cc16:	6a3a      	ldr	r2, [r7, #32]
 800cc18:	429a      	cmp	r2, r3
 800cc1a:	d903      	bls.n	800cc24 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800cc1c:	2301      	movs	r3, #1
 800cc1e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cc22:	e230      	b.n	800d086 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cc24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc26:	4618      	mov	r0, r3
 800cc28:	f04f 0100 	mov.w	r1, #0
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc30:	4a9d      	ldr	r2, [pc, #628]	; (800cea8 <UART_SetConfig+0x948>)
 800cc32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc36:	b29b      	uxth	r3, r3
 800cc38:	f04f 0400 	mov.w	r4, #0
 800cc3c:	461a      	mov	r2, r3
 800cc3e:	4623      	mov	r3, r4
 800cc40:	f7f3 fba6 	bl	8000390 <__aeabi_uldivmod>
 800cc44:	4603      	mov	r3, r0
 800cc46:	460c      	mov	r4, r1
 800cc48:	4619      	mov	r1, r3
 800cc4a:	4622      	mov	r2, r4
 800cc4c:	f04f 0300 	mov.w	r3, #0
 800cc50:	f04f 0400 	mov.w	r4, #0
 800cc54:	0214      	lsls	r4, r2, #8
 800cc56:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800cc5a:	020b      	lsls	r3, r1, #8
 800cc5c:	687a      	ldr	r2, [r7, #4]
 800cc5e:	6852      	ldr	r2, [r2, #4]
 800cc60:	0852      	lsrs	r2, r2, #1
 800cc62:	4611      	mov	r1, r2
 800cc64:	f04f 0200 	mov.w	r2, #0
 800cc68:	eb13 0b01 	adds.w	fp, r3, r1
 800cc6c:	eb44 0c02 	adc.w	ip, r4, r2
 800cc70:	4658      	mov	r0, fp
 800cc72:	4661      	mov	r1, ip
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	685b      	ldr	r3, [r3, #4]
 800cc78:	f04f 0400 	mov.w	r4, #0
 800cc7c:	461a      	mov	r2, r3
 800cc7e:	4623      	mov	r3, r4
 800cc80:	f7f3 fb86 	bl	8000390 <__aeabi_uldivmod>
 800cc84:	4603      	mov	r3, r0
 800cc86:	460c      	mov	r4, r1
 800cc88:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cc8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cc90:	d308      	bcc.n	800cca4 <UART_SetConfig+0x744>
 800cc92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc98:	d204      	bcs.n	800cca4 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cca0:	60da      	str	r2, [r3, #12]
 800cca2:	e1f0      	b.n	800d086 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800cca4:	2301      	movs	r3, #1
 800cca6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ccaa:	e1ec      	b.n	800d086 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	69db      	ldr	r3, [r3, #28]
 800ccb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ccb4:	f040 8100 	bne.w	800ceb8 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800ccb8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ccbc:	2b40      	cmp	r3, #64	; 0x40
 800ccbe:	f200 80b7 	bhi.w	800ce30 <UART_SetConfig+0x8d0>
 800ccc2:	a201      	add	r2, pc, #4	; (adr r2, 800ccc8 <UART_SetConfig+0x768>)
 800ccc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccc8:	0800cdcd 	.word	0x0800cdcd
 800cccc:	0800cdd5 	.word	0x0800cdd5
 800ccd0:	0800ce31 	.word	0x0800ce31
 800ccd4:	0800ce31 	.word	0x0800ce31
 800ccd8:	0800cddd 	.word	0x0800cddd
 800ccdc:	0800ce31 	.word	0x0800ce31
 800cce0:	0800ce31 	.word	0x0800ce31
 800cce4:	0800ce31 	.word	0x0800ce31
 800cce8:	0800cded 	.word	0x0800cded
 800ccec:	0800ce31 	.word	0x0800ce31
 800ccf0:	0800ce31 	.word	0x0800ce31
 800ccf4:	0800ce31 	.word	0x0800ce31
 800ccf8:	0800ce31 	.word	0x0800ce31
 800ccfc:	0800ce31 	.word	0x0800ce31
 800cd00:	0800ce31 	.word	0x0800ce31
 800cd04:	0800ce31 	.word	0x0800ce31
 800cd08:	0800cdfd 	.word	0x0800cdfd
 800cd0c:	0800ce31 	.word	0x0800ce31
 800cd10:	0800ce31 	.word	0x0800ce31
 800cd14:	0800ce31 	.word	0x0800ce31
 800cd18:	0800ce31 	.word	0x0800ce31
 800cd1c:	0800ce31 	.word	0x0800ce31
 800cd20:	0800ce31 	.word	0x0800ce31
 800cd24:	0800ce31 	.word	0x0800ce31
 800cd28:	0800ce31 	.word	0x0800ce31
 800cd2c:	0800ce31 	.word	0x0800ce31
 800cd30:	0800ce31 	.word	0x0800ce31
 800cd34:	0800ce31 	.word	0x0800ce31
 800cd38:	0800ce31 	.word	0x0800ce31
 800cd3c:	0800ce31 	.word	0x0800ce31
 800cd40:	0800ce31 	.word	0x0800ce31
 800cd44:	0800ce31 	.word	0x0800ce31
 800cd48:	0800ce23 	.word	0x0800ce23
 800cd4c:	0800ce31 	.word	0x0800ce31
 800cd50:	0800ce31 	.word	0x0800ce31
 800cd54:	0800ce31 	.word	0x0800ce31
 800cd58:	0800ce31 	.word	0x0800ce31
 800cd5c:	0800ce31 	.word	0x0800ce31
 800cd60:	0800ce31 	.word	0x0800ce31
 800cd64:	0800ce31 	.word	0x0800ce31
 800cd68:	0800ce31 	.word	0x0800ce31
 800cd6c:	0800ce31 	.word	0x0800ce31
 800cd70:	0800ce31 	.word	0x0800ce31
 800cd74:	0800ce31 	.word	0x0800ce31
 800cd78:	0800ce31 	.word	0x0800ce31
 800cd7c:	0800ce31 	.word	0x0800ce31
 800cd80:	0800ce31 	.word	0x0800ce31
 800cd84:	0800ce31 	.word	0x0800ce31
 800cd88:	0800ce31 	.word	0x0800ce31
 800cd8c:	0800ce31 	.word	0x0800ce31
 800cd90:	0800ce31 	.word	0x0800ce31
 800cd94:	0800ce31 	.word	0x0800ce31
 800cd98:	0800ce31 	.word	0x0800ce31
 800cd9c:	0800ce31 	.word	0x0800ce31
 800cda0:	0800ce31 	.word	0x0800ce31
 800cda4:	0800ce31 	.word	0x0800ce31
 800cda8:	0800ce31 	.word	0x0800ce31
 800cdac:	0800ce31 	.word	0x0800ce31
 800cdb0:	0800ce31 	.word	0x0800ce31
 800cdb4:	0800ce31 	.word	0x0800ce31
 800cdb8:	0800ce31 	.word	0x0800ce31
 800cdbc:	0800ce31 	.word	0x0800ce31
 800cdc0:	0800ce31 	.word	0x0800ce31
 800cdc4:	0800ce31 	.word	0x0800ce31
 800cdc8:	0800ce29 	.word	0x0800ce29
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cdcc:	f7fb f850 	bl	8007e70 <HAL_RCC_GetPCLK1Freq>
 800cdd0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cdd2:	e033      	b.n	800ce3c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cdd4:	f7fb f862 	bl	8007e9c <HAL_RCC_GetPCLK2Freq>
 800cdd8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cdda:	e02f      	b.n	800ce3c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cddc:	f107 0314 	add.w	r3, r7, #20
 800cde0:	4618      	mov	r0, r3
 800cde2:	f7fc fa09 	bl	80091f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cde6:	69bb      	ldr	r3, [r7, #24]
 800cde8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cdea:	e027      	b.n	800ce3c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cdec:	f107 0308 	add.w	r3, r7, #8
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f7fc fb4d 	bl	8009490 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cdfa:	e01f      	b.n	800ce3c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cdfc:	4b2b      	ldr	r3, [pc, #172]	; (800ceac <UART_SetConfig+0x94c>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	f003 0320 	and.w	r3, r3, #32
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d009      	beq.n	800ce1c <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ce08:	4b28      	ldr	r3, [pc, #160]	; (800ceac <UART_SetConfig+0x94c>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	08db      	lsrs	r3, r3, #3
 800ce0e:	f003 0303 	and.w	r3, r3, #3
 800ce12:	4a27      	ldr	r2, [pc, #156]	; (800ceb0 <UART_SetConfig+0x950>)
 800ce14:	fa22 f303 	lsr.w	r3, r2, r3
 800ce18:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ce1a:	e00f      	b.n	800ce3c <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800ce1c:	4b24      	ldr	r3, [pc, #144]	; (800ceb0 <UART_SetConfig+0x950>)
 800ce1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ce20:	e00c      	b.n	800ce3c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ce22:	4b24      	ldr	r3, [pc, #144]	; (800ceb4 <UART_SetConfig+0x954>)
 800ce24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ce26:	e009      	b.n	800ce3c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ce28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ce2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ce2e:	e005      	b.n	800ce3c <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800ce30:	2300      	movs	r3, #0
 800ce32:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ce34:	2301      	movs	r3, #1
 800ce36:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ce3a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ce3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	f000 8121 	beq.w	800d086 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce48:	4a17      	ldr	r2, [pc, #92]	; (800cea8 <UART_SetConfig+0x948>)
 800ce4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce4e:	461a      	mov	r2, r3
 800ce50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce52:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce56:	005a      	lsls	r2, r3, #1
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	685b      	ldr	r3, [r3, #4]
 800ce5c:	085b      	lsrs	r3, r3, #1
 800ce5e:	441a      	add	r2, r3
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	685b      	ldr	r3, [r3, #4]
 800ce64:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce68:	b29b      	uxth	r3, r3
 800ce6a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ce6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce6e:	2b0f      	cmp	r3, #15
 800ce70:	d916      	bls.n	800cea0 <UART_SetConfig+0x940>
 800ce72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce78:	d212      	bcs.n	800cea0 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ce7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce7c:	b29b      	uxth	r3, r3
 800ce7e:	f023 030f 	bic.w	r3, r3, #15
 800ce82:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ce84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce86:	085b      	lsrs	r3, r3, #1
 800ce88:	b29b      	uxth	r3, r3
 800ce8a:	f003 0307 	and.w	r3, r3, #7
 800ce8e:	b29a      	uxth	r2, r3
 800ce90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ce92:	4313      	orrs	r3, r2
 800ce94:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ce9c:	60da      	str	r2, [r3, #12]
 800ce9e:	e0f2      	b.n	800d086 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800cea0:	2301      	movs	r3, #1
 800cea2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cea6:	e0ee      	b.n	800d086 <UART_SetConfig+0xb26>
 800cea8:	080170c8 	.word	0x080170c8
 800ceac:	58024400 	.word	0x58024400
 800ceb0:	03d09000 	.word	0x03d09000
 800ceb4:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800ceb8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cebc:	2b40      	cmp	r3, #64	; 0x40
 800cebe:	f200 80b7 	bhi.w	800d030 <UART_SetConfig+0xad0>
 800cec2:	a201      	add	r2, pc, #4	; (adr r2, 800cec8 <UART_SetConfig+0x968>)
 800cec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cec8:	0800cfcd 	.word	0x0800cfcd
 800cecc:	0800cfd5 	.word	0x0800cfd5
 800ced0:	0800d031 	.word	0x0800d031
 800ced4:	0800d031 	.word	0x0800d031
 800ced8:	0800cfdd 	.word	0x0800cfdd
 800cedc:	0800d031 	.word	0x0800d031
 800cee0:	0800d031 	.word	0x0800d031
 800cee4:	0800d031 	.word	0x0800d031
 800cee8:	0800cfed 	.word	0x0800cfed
 800ceec:	0800d031 	.word	0x0800d031
 800cef0:	0800d031 	.word	0x0800d031
 800cef4:	0800d031 	.word	0x0800d031
 800cef8:	0800d031 	.word	0x0800d031
 800cefc:	0800d031 	.word	0x0800d031
 800cf00:	0800d031 	.word	0x0800d031
 800cf04:	0800d031 	.word	0x0800d031
 800cf08:	0800cffd 	.word	0x0800cffd
 800cf0c:	0800d031 	.word	0x0800d031
 800cf10:	0800d031 	.word	0x0800d031
 800cf14:	0800d031 	.word	0x0800d031
 800cf18:	0800d031 	.word	0x0800d031
 800cf1c:	0800d031 	.word	0x0800d031
 800cf20:	0800d031 	.word	0x0800d031
 800cf24:	0800d031 	.word	0x0800d031
 800cf28:	0800d031 	.word	0x0800d031
 800cf2c:	0800d031 	.word	0x0800d031
 800cf30:	0800d031 	.word	0x0800d031
 800cf34:	0800d031 	.word	0x0800d031
 800cf38:	0800d031 	.word	0x0800d031
 800cf3c:	0800d031 	.word	0x0800d031
 800cf40:	0800d031 	.word	0x0800d031
 800cf44:	0800d031 	.word	0x0800d031
 800cf48:	0800d023 	.word	0x0800d023
 800cf4c:	0800d031 	.word	0x0800d031
 800cf50:	0800d031 	.word	0x0800d031
 800cf54:	0800d031 	.word	0x0800d031
 800cf58:	0800d031 	.word	0x0800d031
 800cf5c:	0800d031 	.word	0x0800d031
 800cf60:	0800d031 	.word	0x0800d031
 800cf64:	0800d031 	.word	0x0800d031
 800cf68:	0800d031 	.word	0x0800d031
 800cf6c:	0800d031 	.word	0x0800d031
 800cf70:	0800d031 	.word	0x0800d031
 800cf74:	0800d031 	.word	0x0800d031
 800cf78:	0800d031 	.word	0x0800d031
 800cf7c:	0800d031 	.word	0x0800d031
 800cf80:	0800d031 	.word	0x0800d031
 800cf84:	0800d031 	.word	0x0800d031
 800cf88:	0800d031 	.word	0x0800d031
 800cf8c:	0800d031 	.word	0x0800d031
 800cf90:	0800d031 	.word	0x0800d031
 800cf94:	0800d031 	.word	0x0800d031
 800cf98:	0800d031 	.word	0x0800d031
 800cf9c:	0800d031 	.word	0x0800d031
 800cfa0:	0800d031 	.word	0x0800d031
 800cfa4:	0800d031 	.word	0x0800d031
 800cfa8:	0800d031 	.word	0x0800d031
 800cfac:	0800d031 	.word	0x0800d031
 800cfb0:	0800d031 	.word	0x0800d031
 800cfb4:	0800d031 	.word	0x0800d031
 800cfb8:	0800d031 	.word	0x0800d031
 800cfbc:	0800d031 	.word	0x0800d031
 800cfc0:	0800d031 	.word	0x0800d031
 800cfc4:	0800d031 	.word	0x0800d031
 800cfc8:	0800d029 	.word	0x0800d029
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cfcc:	f7fa ff50 	bl	8007e70 <HAL_RCC_GetPCLK1Freq>
 800cfd0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cfd2:	e033      	b.n	800d03c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cfd4:	f7fa ff62 	bl	8007e9c <HAL_RCC_GetPCLK2Freq>
 800cfd8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cfda:	e02f      	b.n	800d03c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cfdc:	f107 0314 	add.w	r3, r7, #20
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	f7fc f909 	bl	80091f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cfe6:	69bb      	ldr	r3, [r7, #24]
 800cfe8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cfea:	e027      	b.n	800d03c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cfec:	f107 0308 	add.w	r3, r7, #8
 800cff0:	4618      	mov	r0, r3
 800cff2:	f7fc fa4d 	bl	8009490 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cffa:	e01f      	b.n	800d03c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cffc:	4b2c      	ldr	r3, [pc, #176]	; (800d0b0 <UART_SetConfig+0xb50>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	f003 0320 	and.w	r3, r3, #32
 800d004:	2b00      	cmp	r3, #0
 800d006:	d009      	beq.n	800d01c <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d008:	4b29      	ldr	r3, [pc, #164]	; (800d0b0 <UART_SetConfig+0xb50>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	08db      	lsrs	r3, r3, #3
 800d00e:	f003 0303 	and.w	r3, r3, #3
 800d012:	4a28      	ldr	r2, [pc, #160]	; (800d0b4 <UART_SetConfig+0xb54>)
 800d014:	fa22 f303 	lsr.w	r3, r2, r3
 800d018:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d01a:	e00f      	b.n	800d03c <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800d01c:	4b25      	ldr	r3, [pc, #148]	; (800d0b4 <UART_SetConfig+0xb54>)
 800d01e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d020:	e00c      	b.n	800d03c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d022:	4b25      	ldr	r3, [pc, #148]	; (800d0b8 <UART_SetConfig+0xb58>)
 800d024:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d026:	e009      	b.n	800d03c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d028:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d02c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d02e:	e005      	b.n	800d03c <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800d030:	2300      	movs	r3, #0
 800d032:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d034:	2301      	movs	r3, #1
 800d036:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d03a:	bf00      	nop
    }

    if (pclk != 0U)
 800d03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d021      	beq.n	800d086 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d046:	4a1d      	ldr	r2, [pc, #116]	; (800d0bc <UART_SetConfig+0xb5c>)
 800d048:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d04c:	461a      	mov	r2, r3
 800d04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d050:	fbb3 f2f2 	udiv	r2, r3, r2
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	685b      	ldr	r3, [r3, #4]
 800d058:	085b      	lsrs	r3, r3, #1
 800d05a:	441a      	add	r2, r3
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	685b      	ldr	r3, [r3, #4]
 800d060:	fbb2 f3f3 	udiv	r3, r2, r3
 800d064:	b29b      	uxth	r3, r3
 800d066:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d06a:	2b0f      	cmp	r3, #15
 800d06c:	d908      	bls.n	800d080 <UART_SetConfig+0xb20>
 800d06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d074:	d204      	bcs.n	800d080 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d07c:	60da      	str	r2, [r3, #12]
 800d07e:	e002      	b.n	800d086 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800d080:	2301      	movs	r3, #1
 800d082:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2201      	movs	r2, #1
 800d08a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2201      	movs	r2, #1
 800d092:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2200      	movs	r2, #0
 800d09a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2200      	movs	r2, #0
 800d0a0:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800d0a2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	3738      	adds	r7, #56	; 0x38
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800d0b0:	58024400 	.word	0x58024400
 800d0b4:	03d09000 	.word	0x03d09000
 800d0b8:	003d0900 	.word	0x003d0900
 800d0bc:	080170c8 	.word	0x080170c8

0800d0c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d0c0:	b480      	push	{r7}
 800d0c2:	b083      	sub	sp, #12
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0cc:	f003 0301 	and.w	r3, r3, #1
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d00a      	beq.n	800d0ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	685b      	ldr	r3, [r3, #4]
 800d0da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	430a      	orrs	r2, r1
 800d0e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0ee:	f003 0302 	and.w	r3, r3, #2
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d00a      	beq.n	800d10c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	685b      	ldr	r3, [r3, #4]
 800d0fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	430a      	orrs	r2, r1
 800d10a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d110:	f003 0304 	and.w	r3, r3, #4
 800d114:	2b00      	cmp	r3, #0
 800d116:	d00a      	beq.n	800d12e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	685b      	ldr	r3, [r3, #4]
 800d11e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	430a      	orrs	r2, r1
 800d12c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d132:	f003 0308 	and.w	r3, r3, #8
 800d136:	2b00      	cmp	r3, #0
 800d138:	d00a      	beq.n	800d150 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	685b      	ldr	r3, [r3, #4]
 800d140:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	430a      	orrs	r2, r1
 800d14e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d154:	f003 0310 	and.w	r3, r3, #16
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d00a      	beq.n	800d172 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	689b      	ldr	r3, [r3, #8]
 800d162:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	430a      	orrs	r2, r1
 800d170:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d176:	f003 0320 	and.w	r3, r3, #32
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d00a      	beq.n	800d194 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	689b      	ldr	r3, [r3, #8]
 800d184:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	430a      	orrs	r2, r1
 800d192:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d01a      	beq.n	800d1d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	685b      	ldr	r3, [r3, #4]
 800d1a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	430a      	orrs	r2, r1
 800d1b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d1be:	d10a      	bne.n	800d1d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	685b      	ldr	r3, [r3, #4]
 800d1c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	430a      	orrs	r2, r1
 800d1d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d00a      	beq.n	800d1f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	685b      	ldr	r3, [r3, #4]
 800d1e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	430a      	orrs	r2, r1
 800d1f6:	605a      	str	r2, [r3, #4]
  }
}
 800d1f8:	bf00      	nop
 800d1fa:	370c      	adds	r7, #12
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d202:	4770      	bx	lr

0800d204 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b086      	sub	sp, #24
 800d208:	af02      	add	r7, sp, #8
 800d20a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2200      	movs	r2, #0
 800d210:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800d214:	f7f4 feba 	bl	8001f8c <HAL_GetTick>
 800d218:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	f003 0308 	and.w	r3, r3, #8
 800d224:	2b08      	cmp	r3, #8
 800d226:	d10e      	bne.n	800d246 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d228:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d22c:	9300      	str	r3, [sp, #0]
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	2200      	movs	r2, #0
 800d232:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f000 f82c 	bl	800d294 <UART_WaitOnFlagUntilTimeout>
 800d23c:	4603      	mov	r3, r0
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d001      	beq.n	800d246 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d242:	2303      	movs	r3, #3
 800d244:	e022      	b.n	800d28c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	f003 0304 	and.w	r3, r3, #4
 800d250:	2b04      	cmp	r3, #4
 800d252:	d10e      	bne.n	800d272 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d254:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d258:	9300      	str	r3, [sp, #0]
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	2200      	movs	r2, #0
 800d25e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f000 f816 	bl	800d294 <UART_WaitOnFlagUntilTimeout>
 800d268:	4603      	mov	r3, r0
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d001      	beq.n	800d272 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d26e:	2303      	movs	r3, #3
 800d270:	e00c      	b.n	800d28c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	2220      	movs	r2, #32
 800d276:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	2220      	movs	r2, #32
 800d27e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	2200      	movs	r2, #0
 800d286:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d28a:	2300      	movs	r3, #0
}
 800d28c:	4618      	mov	r0, r3
 800d28e:	3710      	adds	r7, #16
 800d290:	46bd      	mov	sp, r7
 800d292:	bd80      	pop	{r7, pc}

0800d294 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b084      	sub	sp, #16
 800d298:	af00      	add	r7, sp, #0
 800d29a:	60f8      	str	r0, [r7, #12]
 800d29c:	60b9      	str	r1, [r7, #8]
 800d29e:	603b      	str	r3, [r7, #0]
 800d2a0:	4613      	mov	r3, r2
 800d2a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d2a4:	e062      	b.n	800d36c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d2a6:	69bb      	ldr	r3, [r7, #24]
 800d2a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2ac:	d05e      	beq.n	800d36c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d2ae:	f7f4 fe6d 	bl	8001f8c <HAL_GetTick>
 800d2b2:	4602      	mov	r2, r0
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	1ad3      	subs	r3, r2, r3
 800d2b8:	69ba      	ldr	r2, [r7, #24]
 800d2ba:	429a      	cmp	r2, r3
 800d2bc:	d302      	bcc.n	800d2c4 <UART_WaitOnFlagUntilTimeout+0x30>
 800d2be:	69bb      	ldr	r3, [r7, #24]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d11d      	bne.n	800d300 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	681a      	ldr	r2, [r3, #0]
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d2d2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	689a      	ldr	r2, [r3, #8]
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	f022 0201 	bic.w	r2, r2, #1
 800d2e2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	2220      	movs	r2, #32
 800d2e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	2220      	movs	r2, #32
 800d2f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800d2fc:	2303      	movs	r3, #3
 800d2fe:	e045      	b.n	800d38c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	f003 0304 	and.w	r3, r3, #4
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d02e      	beq.n	800d36c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	69db      	ldr	r3, [r3, #28]
 800d314:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d318:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d31c:	d126      	bne.n	800d36c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d326:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	681a      	ldr	r2, [r3, #0]
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d336:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	689a      	ldr	r2, [r3, #8]
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	f022 0201 	bic.w	r2, r2, #1
 800d346:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	2220      	movs	r2, #32
 800d34c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	2220      	movs	r2, #32
 800d354:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	2220      	movs	r2, #32
 800d35c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	2200      	movs	r2, #0
 800d364:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800d368:	2303      	movs	r3, #3
 800d36a:	e00f      	b.n	800d38c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	69da      	ldr	r2, [r3, #28]
 800d372:	68bb      	ldr	r3, [r7, #8]
 800d374:	4013      	ands	r3, r2
 800d376:	68ba      	ldr	r2, [r7, #8]
 800d378:	429a      	cmp	r2, r3
 800d37a:	bf0c      	ite	eq
 800d37c:	2301      	moveq	r3, #1
 800d37e:	2300      	movne	r3, #0
 800d380:	b2db      	uxtb	r3, r3
 800d382:	461a      	mov	r2, r3
 800d384:	79fb      	ldrb	r3, [r7, #7]
 800d386:	429a      	cmp	r2, r3
 800d388:	d08d      	beq.n	800d2a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d38a:	2300      	movs	r3, #0
}
 800d38c:	4618      	mov	r0, r3
 800d38e:	3710      	adds	r7, #16
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}

0800d394 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d394:	b480      	push	{r7}
 800d396:	b083      	sub	sp, #12
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	681a      	ldr	r2, [r3, #0]
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800d3aa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	689a      	ldr	r2, [r3, #8]
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800d3ba:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2220      	movs	r2, #32
 800d3c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800d3c4:	bf00      	nop
 800d3c6:	370c      	adds	r7, #12
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ce:	4770      	bx	lr

0800d3d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d3d0:	b480      	push	{r7}
 800d3d2:	b083      	sub	sp, #12
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	681a      	ldr	r2, [r3, #0]
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d3e6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	6899      	ldr	r1, [r3, #8]
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681a      	ldr	r2, [r3, #0]
 800d3f2:	4b08      	ldr	r3, [pc, #32]	; (800d414 <UART_EndRxTransfer+0x44>)
 800d3f4:	400b      	ands	r3, r1
 800d3f6:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2220      	movs	r2, #32
 800d3fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2200      	movs	r2, #0
 800d404:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800d406:	bf00      	nop
 800d408:	370c      	adds	r7, #12
 800d40a:	46bd      	mov	sp, r7
 800d40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d410:	4770      	bx	lr
 800d412:	bf00      	nop
 800d414:	effffffe 	.word	0xeffffffe

0800d418 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b084      	sub	sp, #16
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d424:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	69db      	ldr	r3, [r3, #28]
 800d42a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d42e:	d01f      	beq.n	800d470 <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	2200      	movs	r2, #0
 800d434:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	681a      	ldr	r2, [r3, #0]
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d446:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	689a      	ldr	r2, [r3, #8]
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	f022 0201 	bic.w	r2, r2, #1
 800d456:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	689a      	ldr	r2, [r3, #8]
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d466:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	2220      	movs	r2, #32
 800d46c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800d470:	68f8      	ldr	r0, [r7, #12]
 800d472:	f7ff f861 	bl	800c538 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d476:	bf00      	nop
 800d478:	3710      	adds	r7, #16
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}

0800d47e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d47e:	b580      	push	{r7, lr}
 800d480:	b084      	sub	sp, #16
 800d482:	af00      	add	r7, sp, #0
 800d484:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d48a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800d48c:	68f8      	ldr	r0, [r7, #12]
 800d48e:	f7f3 fa33 	bl	80008f8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d492:	bf00      	nop
 800d494:	3710      	adds	r7, #16
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}

0800d49a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d49a:	b580      	push	{r7, lr}
 800d49c:	b086      	sub	sp, #24
 800d49e:	af00      	add	r7, sp, #0
 800d4a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4a6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d4a8:	697b      	ldr	r3, [r7, #20]
 800d4aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d4ae:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d4b0:	697b      	ldr	r3, [r7, #20]
 800d4b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d4b6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d4b8:	697b      	ldr	r3, [r7, #20]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	689b      	ldr	r3, [r3, #8]
 800d4be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4c2:	2b80      	cmp	r3, #128	; 0x80
 800d4c4:	d109      	bne.n	800d4da <UART_DMAError+0x40>
 800d4c6:	693b      	ldr	r3, [r7, #16]
 800d4c8:	2b21      	cmp	r3, #33	; 0x21
 800d4ca:	d106      	bne.n	800d4da <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d4cc:	697b      	ldr	r3, [r7, #20]
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800d4d4:	6978      	ldr	r0, [r7, #20]
 800d4d6:	f7ff ff5d 	bl	800d394 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d4da:	697b      	ldr	r3, [r7, #20]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	689b      	ldr	r3, [r3, #8]
 800d4e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4e4:	2b40      	cmp	r3, #64	; 0x40
 800d4e6:	d109      	bne.n	800d4fc <UART_DMAError+0x62>
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	2b22      	cmp	r3, #34	; 0x22
 800d4ec:	d106      	bne.n	800d4fc <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d4ee:	697b      	ldr	r3, [r7, #20]
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800d4f6:	6978      	ldr	r0, [r7, #20]
 800d4f8:	f7ff ff6a 	bl	800d3d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d4fc:	697b      	ldr	r3, [r7, #20]
 800d4fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d502:	f043 0210 	orr.w	r2, r3, #16
 800d506:	697b      	ldr	r3, [r7, #20]
 800d508:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d50c:	6978      	ldr	r0, [r7, #20]
 800d50e:	f7ff f81d 	bl	800c54c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d512:	bf00      	nop
 800d514:	3718      	adds	r7, #24
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}

0800d51a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d51a:	b480      	push	{r7}
 800d51c:	b085      	sub	sp, #20
 800d51e:	af00      	add	r7, sp, #0
 800d520:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d528:	2b01      	cmp	r3, #1
 800d52a:	d101      	bne.n	800d530 <HAL_UARTEx_DisableFifoMode+0x16>
 800d52c:	2302      	movs	r3, #2
 800d52e:	e027      	b.n	800d580 <HAL_UARTEx_DisableFifoMode+0x66>
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2201      	movs	r2, #1
 800d534:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2224      	movs	r2, #36	; 0x24
 800d53c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	681a      	ldr	r2, [r3, #0]
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	f022 0201 	bic.w	r2, r2, #1
 800d556:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d55e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2200      	movs	r2, #0
 800d564:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	68fa      	ldr	r2, [r7, #12]
 800d56c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	2220      	movs	r2, #32
 800d572:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	2200      	movs	r2, #0
 800d57a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d57e:	2300      	movs	r3, #0
}
 800d580:	4618      	mov	r0, r3
 800d582:	3714      	adds	r7, #20
 800d584:	46bd      	mov	sp, r7
 800d586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58a:	4770      	bx	lr

0800d58c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b084      	sub	sp, #16
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
 800d594:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d59c:	2b01      	cmp	r3, #1
 800d59e:	d101      	bne.n	800d5a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d5a0:	2302      	movs	r3, #2
 800d5a2:	e02d      	b.n	800d600 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2201      	movs	r2, #1
 800d5a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2224      	movs	r2, #36	; 0x24
 800d5b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	681a      	ldr	r2, [r3, #0]
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	f022 0201 	bic.w	r2, r2, #1
 800d5ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	689b      	ldr	r3, [r3, #8]
 800d5d2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	683a      	ldr	r2, [r7, #0]
 800d5dc:	430a      	orrs	r2, r1
 800d5de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d5e0:	6878      	ldr	r0, [r7, #4]
 800d5e2:	f000 f84f 	bl	800d684 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	68fa      	ldr	r2, [r7, #12]
 800d5ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2220      	movs	r2, #32
 800d5f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d5fe:	2300      	movs	r3, #0
}
 800d600:	4618      	mov	r0, r3
 800d602:	3710      	adds	r7, #16
 800d604:	46bd      	mov	sp, r7
 800d606:	bd80      	pop	{r7, pc}

0800d608 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b084      	sub	sp, #16
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
 800d610:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d618:	2b01      	cmp	r3, #1
 800d61a:	d101      	bne.n	800d620 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d61c:	2302      	movs	r3, #2
 800d61e:	e02d      	b.n	800d67c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	2201      	movs	r2, #1
 800d624:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2224      	movs	r2, #36	; 0x24
 800d62c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	681a      	ldr	r2, [r3, #0]
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	f022 0201 	bic.w	r2, r2, #1
 800d646:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	689b      	ldr	r3, [r3, #8]
 800d64e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	683a      	ldr	r2, [r7, #0]
 800d658:	430a      	orrs	r2, r1
 800d65a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d65c:	6878      	ldr	r0, [r7, #4]
 800d65e:	f000 f811 	bl	800d684 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	68fa      	ldr	r2, [r7, #12]
 800d668:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2220      	movs	r2, #32
 800d66e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2200      	movs	r2, #0
 800d676:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d67a:	2300      	movs	r3, #0
}
 800d67c:	4618      	mov	r0, r3
 800d67e:	3710      	adds	r7, #16
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}

0800d684 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d684:	b480      	push	{r7}
 800d686:	b089      	sub	sp, #36	; 0x24
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800d68c:	4a2f      	ldr	r2, [pc, #188]	; (800d74c <UARTEx_SetNbDataToProcess+0xc8>)
 800d68e:	f107 0314 	add.w	r3, r7, #20
 800d692:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d696:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800d69a:	4a2d      	ldr	r2, [pc, #180]	; (800d750 <UARTEx_SetNbDataToProcess+0xcc>)
 800d69c:	f107 030c 	add.w	r3, r7, #12
 800d6a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d6a4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d108      	bne.n	800d6c2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2201      	movs	r2, #1
 800d6b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2201      	movs	r2, #1
 800d6bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d6c0:	e03d      	b.n	800d73e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d6c2:	2310      	movs	r3, #16
 800d6c4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d6c6:	2310      	movs	r3, #16
 800d6c8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	689b      	ldr	r3, [r3, #8]
 800d6d0:	0e5b      	lsrs	r3, r3, #25
 800d6d2:	b2db      	uxtb	r3, r3
 800d6d4:	f003 0307 	and.w	r3, r3, #7
 800d6d8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	689b      	ldr	r3, [r3, #8]
 800d6e0:	0f5b      	lsrs	r3, r3, #29
 800d6e2:	b2db      	uxtb	r3, r3
 800d6e4:	f003 0307 	and.w	r3, r3, #7
 800d6e8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800d6ea:	7fbb      	ldrb	r3, [r7, #30]
 800d6ec:	7f3a      	ldrb	r2, [r7, #28]
 800d6ee:	f107 0120 	add.w	r1, r7, #32
 800d6f2:	440a      	add	r2, r1
 800d6f4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800d6f8:	fb02 f303 	mul.w	r3, r2, r3
 800d6fc:	7f3a      	ldrb	r2, [r7, #28]
 800d6fe:	f107 0120 	add.w	r1, r7, #32
 800d702:	440a      	add	r2, r1
 800d704:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800d708:	fb93 f3f2 	sdiv	r3, r3, r2
 800d70c:	b29a      	uxth	r2, r3
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800d714:	7ffb      	ldrb	r3, [r7, #31]
 800d716:	7f7a      	ldrb	r2, [r7, #29]
 800d718:	f107 0120 	add.w	r1, r7, #32
 800d71c:	440a      	add	r2, r1
 800d71e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800d722:	fb02 f303 	mul.w	r3, r2, r3
 800d726:	7f7a      	ldrb	r2, [r7, #29]
 800d728:	f107 0120 	add.w	r1, r7, #32
 800d72c:	440a      	add	r2, r1
 800d72e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800d732:	fb93 f3f2 	sdiv	r3, r3, r2
 800d736:	b29a      	uxth	r2, r3
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d73e:	bf00      	nop
 800d740:	3724      	adds	r7, #36	; 0x24
 800d742:	46bd      	mov	sp, r7
 800d744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d748:	4770      	bx	lr
 800d74a:	bf00      	nop
 800d74c:	08017008 	.word	0x08017008
 800d750:	08017010 	.word	0x08017010

0800d754 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d754:	b084      	sub	sp, #16
 800d756:	b480      	push	{r7}
 800d758:	b085      	sub	sp, #20
 800d75a:	af00      	add	r7, sp, #0
 800d75c:	6078      	str	r0, [r7, #4]
 800d75e:	f107 001c 	add.w	r0, r7, #28
 800d762:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d766:	2300      	movs	r3, #0
 800d768:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d76a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800d76c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d76e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800d772:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d774:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800d776:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800d77a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d77c:	68fa      	ldr	r2, [r7, #12]
 800d77e:	4313      	orrs	r3, r2
 800d780:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	685a      	ldr	r2, [r3, #4]
 800d786:	4b07      	ldr	r3, [pc, #28]	; (800d7a4 <SDMMC_Init+0x50>)
 800d788:	4013      	ands	r3, r2
 800d78a:	68fa      	ldr	r2, [r7, #12]
 800d78c:	431a      	orrs	r2, r3
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d792:	2300      	movs	r3, #0
}
 800d794:	4618      	mov	r0, r3
 800d796:	3714      	adds	r7, #20
 800d798:	46bd      	mov	sp, r7
 800d79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79e:	b004      	add	sp, #16
 800d7a0:	4770      	bx	lr
 800d7a2:	bf00      	nop
 800d7a4:	ffc02c00 	.word	0xffc02c00

0800d7a8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d7a8:	b480      	push	{r7}
 800d7aa:	b083      	sub	sp, #12
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	370c      	adds	r7, #12
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c0:	4770      	bx	lr

0800d7c2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800d7c2:	b480      	push	{r7}
 800d7c4:	b083      	sub	sp, #12
 800d7c6:	af00      	add	r7, sp, #0
 800d7c8:	6078      	str	r0, [r7, #4]
 800d7ca:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	681a      	ldr	r2, [r3, #0]
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d7d6:	2300      	movs	r3, #0
}
 800d7d8:	4618      	mov	r0, r3
 800d7da:	370c      	adds	r7, #12
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e2:	4770      	bx	lr

0800d7e4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800d7e4:	b480      	push	{r7}
 800d7e6:	b083      	sub	sp, #12
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	f043 0203 	orr.w	r2, r3, #3
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d7f8:	2300      	movs	r3, #0
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	370c      	adds	r7, #12
 800d7fe:	46bd      	mov	sp, r7
 800d800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d804:	4770      	bx	lr

0800d806 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800d806:	b480      	push	{r7}
 800d808:	b083      	sub	sp, #12
 800d80a:	af00      	add	r7, sp, #0
 800d80c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	f003 0303 	and.w	r3, r3, #3
}
 800d816:	4618      	mov	r0, r3
 800d818:	370c      	adds	r7, #12
 800d81a:	46bd      	mov	sp, r7
 800d81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d820:	4770      	bx	lr
	...

0800d824 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d824:	b480      	push	{r7}
 800d826:	b085      	sub	sp, #20
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
 800d82c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d82e:	2300      	movs	r3, #0
 800d830:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d832:	683b      	ldr	r3, [r7, #0]
 800d834:	681a      	ldr	r2, [r3, #0]
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d842:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d848:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d84e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d850:	68fa      	ldr	r2, [r7, #12]
 800d852:	4313      	orrs	r3, r2
 800d854:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	68da      	ldr	r2, [r3, #12]
 800d85a:	4b06      	ldr	r3, [pc, #24]	; (800d874 <SDMMC_SendCommand+0x50>)
 800d85c:	4013      	ands	r3, r2
 800d85e:	68fa      	ldr	r2, [r7, #12]
 800d860:	431a      	orrs	r2, r3
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d866:	2300      	movs	r3, #0
}
 800d868:	4618      	mov	r0, r3
 800d86a:	3714      	adds	r7, #20
 800d86c:	46bd      	mov	sp, r7
 800d86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d872:	4770      	bx	lr
 800d874:	fffee0c0 	.word	0xfffee0c0

0800d878 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d878:	b480      	push	{r7}
 800d87a:	b083      	sub	sp, #12
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	691b      	ldr	r3, [r3, #16]
 800d884:	b2db      	uxtb	r3, r3
}
 800d886:	4618      	mov	r0, r3
 800d888:	370c      	adds	r7, #12
 800d88a:	46bd      	mov	sp, r7
 800d88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d890:	4770      	bx	lr

0800d892 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d892:	b480      	push	{r7}
 800d894:	b085      	sub	sp, #20
 800d896:	af00      	add	r7, sp, #0
 800d898:	6078      	str	r0, [r7, #4]
 800d89a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	3314      	adds	r3, #20
 800d8a0:	461a      	mov	r2, r3
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	4413      	add	r3, r2
 800d8a6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	681b      	ldr	r3, [r3, #0]
}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	3714      	adds	r7, #20
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b6:	4770      	bx	lr

0800d8b8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800d8b8:	b480      	push	{r7}
 800d8ba:	b085      	sub	sp, #20
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
 800d8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	681a      	ldr	r2, [r3, #0]
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	685a      	ldr	r2, [r3, #4]
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d8da:	683b      	ldr	r3, [r7, #0]
 800d8dc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d8de:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d8e4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d8ea:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d8ec:	68fa      	ldr	r2, [r7, #12]
 800d8ee:	4313      	orrs	r3, r2
 800d8f0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	431a      	orrs	r2, r3
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d902:	2300      	movs	r3, #0

}
 800d904:	4618      	mov	r0, r3
 800d906:	3714      	adds	r7, #20
 800d908:	46bd      	mov	sp, r7
 800d90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90e:	4770      	bx	lr

0800d910 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b088      	sub	sp, #32
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
 800d918:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d91e:	2310      	movs	r3, #16
 800d920:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d922:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d926:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d928:	2300      	movs	r3, #0
 800d92a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d92c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d930:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d932:	f107 0308 	add.w	r3, r7, #8
 800d936:	4619      	mov	r1, r3
 800d938:	6878      	ldr	r0, [r7, #4]
 800d93a:	f7ff ff73 	bl	800d824 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800d93e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d942:	2110      	movs	r1, #16
 800d944:	6878      	ldr	r0, [r7, #4]
 800d946:	f000 faaf 	bl	800dea8 <SDMMC_GetCmdResp1>
 800d94a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d94c:	69fb      	ldr	r3, [r7, #28]
}
 800d94e:	4618      	mov	r0, r3
 800d950:	3720      	adds	r7, #32
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}

0800d956 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d956:	b580      	push	{r7, lr}
 800d958:	b088      	sub	sp, #32
 800d95a:	af00      	add	r7, sp, #0
 800d95c:	6078      	str	r0, [r7, #4]
 800d95e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d964:	2311      	movs	r3, #17
 800d966:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d968:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d96c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d96e:	2300      	movs	r3, #0
 800d970:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d972:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d976:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d978:	f107 0308 	add.w	r3, r7, #8
 800d97c:	4619      	mov	r1, r3
 800d97e:	6878      	ldr	r0, [r7, #4]
 800d980:	f7ff ff50 	bl	800d824 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d984:	f241 3288 	movw	r2, #5000	; 0x1388
 800d988:	2111      	movs	r1, #17
 800d98a:	6878      	ldr	r0, [r7, #4]
 800d98c:	f000 fa8c 	bl	800dea8 <SDMMC_GetCmdResp1>
 800d990:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d992:	69fb      	ldr	r3, [r7, #28]
}
 800d994:	4618      	mov	r0, r3
 800d996:	3720      	adds	r7, #32
 800d998:	46bd      	mov	sp, r7
 800d99a:	bd80      	pop	{r7, pc}

0800d99c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b088      	sub	sp, #32
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
 800d9a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d9aa:	2312      	movs	r3, #18
 800d9ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d9ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d9b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d9b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d9bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d9be:	f107 0308 	add.w	r3, r7, #8
 800d9c2:	4619      	mov	r1, r3
 800d9c4:	6878      	ldr	r0, [r7, #4]
 800d9c6:	f7ff ff2d 	bl	800d824 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d9ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9ce:	2112      	movs	r1, #18
 800d9d0:	6878      	ldr	r0, [r7, #4]
 800d9d2:	f000 fa69 	bl	800dea8 <SDMMC_GetCmdResp1>
 800d9d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d9d8:	69fb      	ldr	r3, [r7, #28]
}
 800d9da:	4618      	mov	r0, r3
 800d9dc:	3720      	adds	r7, #32
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}

0800d9e2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d9e2:	b580      	push	{r7, lr}
 800d9e4:	b088      	sub	sp, #32
 800d9e6:	af00      	add	r7, sp, #0
 800d9e8:	6078      	str	r0, [r7, #4]
 800d9ea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d9ec:	683b      	ldr	r3, [r7, #0]
 800d9ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d9f0:	2318      	movs	r3, #24
 800d9f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d9f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d9f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d9fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800da02:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800da04:	f107 0308 	add.w	r3, r7, #8
 800da08:	4619      	mov	r1, r3
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	f7ff ff0a 	bl	800d824 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800da10:	f241 3288 	movw	r2, #5000	; 0x1388
 800da14:	2118      	movs	r1, #24
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	f000 fa46 	bl	800dea8 <SDMMC_GetCmdResp1>
 800da1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da1e:	69fb      	ldr	r3, [r7, #28]
}
 800da20:	4618      	mov	r0, r3
 800da22:	3720      	adds	r7, #32
 800da24:	46bd      	mov	sp, r7
 800da26:	bd80      	pop	{r7, pc}

0800da28 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b088      	sub	sp, #32
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
 800da30:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800da36:	2319      	movs	r3, #25
 800da38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800da3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800da3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800da40:	2300      	movs	r3, #0
 800da42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800da44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800da48:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800da4a:	f107 0308 	add.w	r3, r7, #8
 800da4e:	4619      	mov	r1, r3
 800da50:	6878      	ldr	r0, [r7, #4]
 800da52:	f7ff fee7 	bl	800d824 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800da56:	f241 3288 	movw	r2, #5000	; 0x1388
 800da5a:	2119      	movs	r1, #25
 800da5c:	6878      	ldr	r0, [r7, #4]
 800da5e:	f000 fa23 	bl	800dea8 <SDMMC_GetCmdResp1>
 800da62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da64:	69fb      	ldr	r3, [r7, #28]
}
 800da66:	4618      	mov	r0, r3
 800da68:	3720      	adds	r7, #32
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}
	...

0800da70 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b088      	sub	sp, #32
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800da78:	2300      	movs	r3, #0
 800da7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800da7c:	230c      	movs	r3, #12
 800da7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800da80:	f44f 7380 	mov.w	r3, #256	; 0x100
 800da84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800da86:	2300      	movs	r3, #0
 800da88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800da8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800da8e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	68db      	ldr	r3, [r3, #12]
 800da94:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	68db      	ldr	r3, [r3, #12]
 800daa0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800daa8:	f107 0308 	add.w	r3, r7, #8
 800daac:	4619      	mov	r1, r3
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	f7ff feb8 	bl	800d824 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800dab4:	4a0b      	ldr	r2, [pc, #44]	; (800dae4 <SDMMC_CmdStopTransfer+0x74>)
 800dab6:	210c      	movs	r1, #12
 800dab8:	6878      	ldr	r0, [r7, #4]
 800daba:	f000 f9f5 	bl	800dea8 <SDMMC_GetCmdResp1>
 800dabe:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	68db      	ldr	r3, [r3, #12]
 800dac4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800dacc:	69fb      	ldr	r3, [r7, #28]
 800dace:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dad2:	d101      	bne.n	800dad8 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800dad4:	2300      	movs	r3, #0
 800dad6:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800dad8:	69fb      	ldr	r3, [r7, #28]
}
 800dada:	4618      	mov	r0, r3
 800dadc:	3720      	adds	r7, #32
 800dade:	46bd      	mov	sp, r7
 800dae0:	bd80      	pop	{r7, pc}
 800dae2:	bf00      	nop
 800dae4:	05f5e100 	.word	0x05f5e100

0800dae8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b08a      	sub	sp, #40	; 0x28
 800daec:	af00      	add	r7, sp, #0
 800daee:	60f8      	str	r0, [r7, #12]
 800daf0:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800daf8:	2307      	movs	r3, #7
 800dafa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dafc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800db00:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db02:	2300      	movs	r3, #0
 800db04:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800db0a:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db0c:	f107 0310 	add.w	r3, r7, #16
 800db10:	4619      	mov	r1, r3
 800db12:	68f8      	ldr	r0, [r7, #12]
 800db14:	f7ff fe86 	bl	800d824 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800db18:	f241 3288 	movw	r2, #5000	; 0x1388
 800db1c:	2107      	movs	r1, #7
 800db1e:	68f8      	ldr	r0, [r7, #12]
 800db20:	f000 f9c2 	bl	800dea8 <SDMMC_GetCmdResp1>
 800db24:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800db26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800db28:	4618      	mov	r0, r3
 800db2a:	3728      	adds	r7, #40	; 0x28
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd80      	pop	{r7, pc}

0800db30 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b088      	sub	sp, #32
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800db38:	2300      	movs	r3, #0
 800db3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800db3c:	2300      	movs	r3, #0
 800db3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800db40:	2300      	movs	r3, #0
 800db42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db44:	2300      	movs	r3, #0
 800db46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800db4c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db4e:	f107 0308 	add.w	r3, r7, #8
 800db52:	4619      	mov	r1, r3
 800db54:	6878      	ldr	r0, [r7, #4]
 800db56:	f7ff fe65 	bl	800d824 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800db5a:	6878      	ldr	r0, [r7, #4]
 800db5c:	f000 f976 	bl	800de4c <SDMMC_GetCmdError>
 800db60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db62:	69fb      	ldr	r3, [r7, #28]
}
 800db64:	4618      	mov	r0, r3
 800db66:	3720      	adds	r7, #32
 800db68:	46bd      	mov	sp, r7
 800db6a:	bd80      	pop	{r7, pc}

0800db6c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b088      	sub	sp, #32
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800db74:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800db78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800db7a:	2308      	movs	r3, #8
 800db7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800db7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800db82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db84:	2300      	movs	r3, #0
 800db86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800db8c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db8e:	f107 0308 	add.w	r3, r7, #8
 800db92:	4619      	mov	r1, r3
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	f7ff fe45 	bl	800d824 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800db9a:	6878      	ldr	r0, [r7, #4]
 800db9c:	f000 fb78 	bl	800e290 <SDMMC_GetCmdResp7>
 800dba0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dba2:	69fb      	ldr	r3, [r7, #28]
}
 800dba4:	4618      	mov	r0, r3
 800dba6:	3720      	adds	r7, #32
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd80      	pop	{r7, pc}

0800dbac <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b088      	sub	sp, #32
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
 800dbb4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800dbba:	2337      	movs	r3, #55	; 0x37
 800dbbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dbbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dbc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dbc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dbcc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dbce:	f107 0308 	add.w	r3, r7, #8
 800dbd2:	4619      	mov	r1, r3
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	f7ff fe25 	bl	800d824 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800dbda:	f241 3288 	movw	r2, #5000	; 0x1388
 800dbde:	2137      	movs	r1, #55	; 0x37
 800dbe0:	6878      	ldr	r0, [r7, #4]
 800dbe2:	f000 f961 	bl	800dea8 <SDMMC_GetCmdResp1>
 800dbe6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dbe8:	69fb      	ldr	r3, [r7, #28]
}
 800dbea:	4618      	mov	r0, r3
 800dbec:	3720      	adds	r7, #32
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}

0800dbf2 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dbf2:	b580      	push	{r7, lr}
 800dbf4:	b088      	sub	sp, #32
 800dbf6:	af00      	add	r7, sp, #0
 800dbf8:	6078      	str	r0, [r7, #4]
 800dbfa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800dc00:	2329      	movs	r3, #41	; 0x29
 800dc02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc04:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dc08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc12:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc14:	f107 0308 	add.w	r3, r7, #8
 800dc18:	4619      	mov	r1, r3
 800dc1a:	6878      	ldr	r0, [r7, #4]
 800dc1c:	f7ff fe02 	bl	800d824 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800dc20:	6878      	ldr	r0, [r7, #4]
 800dc22:	f000 fa7d 	bl	800e120 <SDMMC_GetCmdResp3>
 800dc26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc28:	69fb      	ldr	r3, [r7, #28]
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	3720      	adds	r7, #32
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}

0800dc32 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800dc32:	b580      	push	{r7, lr}
 800dc34:	b088      	sub	sp, #32
 800dc36:	af00      	add	r7, sp, #0
 800dc38:	6078      	str	r0, [r7, #4]
 800dc3a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800dc40:	2306      	movs	r3, #6
 800dc42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc44:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dc48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc52:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc54:	f107 0308 	add.w	r3, r7, #8
 800dc58:	4619      	mov	r1, r3
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f7ff fde2 	bl	800d824 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800dc60:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc64:	2106      	movs	r1, #6
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	f000 f91e 	bl	800dea8 <SDMMC_GetCmdResp1>
 800dc6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc6e:	69fb      	ldr	r3, [r7, #28]
}
 800dc70:	4618      	mov	r0, r3
 800dc72:	3720      	adds	r7, #32
 800dc74:	46bd      	mov	sp, r7
 800dc76:	bd80      	pop	{r7, pc}

0800dc78 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b088      	sub	sp, #32
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800dc80:	2300      	movs	r3, #0
 800dc82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800dc84:	2333      	movs	r3, #51	; 0x33
 800dc86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc88:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dc8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc8e:	2300      	movs	r3, #0
 800dc90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc98:	f107 0308 	add.w	r3, r7, #8
 800dc9c:	4619      	mov	r1, r3
 800dc9e:	6878      	ldr	r0, [r7, #4]
 800dca0:	f7ff fdc0 	bl	800d824 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800dca4:	f241 3288 	movw	r2, #5000	; 0x1388
 800dca8:	2133      	movs	r1, #51	; 0x33
 800dcaa:	6878      	ldr	r0, [r7, #4]
 800dcac:	f000 f8fc 	bl	800dea8 <SDMMC_GetCmdResp1>
 800dcb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dcb2:	69fb      	ldr	r3, [r7, #28]
}
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	3720      	adds	r7, #32
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bd80      	pop	{r7, pc}

0800dcbc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b088      	sub	sp, #32
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800dcc8:	2302      	movs	r3, #2
 800dcca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800dccc:	f44f 7340 	mov.w	r3, #768	; 0x300
 800dcd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dcd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dcda:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dcdc:	f107 0308 	add.w	r3, r7, #8
 800dce0:	4619      	mov	r1, r3
 800dce2:	6878      	ldr	r0, [r7, #4]
 800dce4:	f7ff fd9e 	bl	800d824 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800dce8:	6878      	ldr	r0, [r7, #4]
 800dcea:	f000 f9cf 	bl	800e08c <SDMMC_GetCmdResp2>
 800dcee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dcf0:	69fb      	ldr	r3, [r7, #28]
}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	3720      	adds	r7, #32
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}

0800dcfa <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dcfa:	b580      	push	{r7, lr}
 800dcfc:	b088      	sub	sp, #32
 800dcfe:	af00      	add	r7, sp, #0
 800dd00:	6078      	str	r0, [r7, #4]
 800dd02:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800dd08:	2309      	movs	r3, #9
 800dd0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800dd0c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800dd10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd12:	2300      	movs	r3, #0
 800dd14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd1c:	f107 0308 	add.w	r3, r7, #8
 800dd20:	4619      	mov	r1, r3
 800dd22:	6878      	ldr	r0, [r7, #4]
 800dd24:	f7ff fd7e 	bl	800d824 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800dd28:	6878      	ldr	r0, [r7, #4]
 800dd2a:	f000 f9af 	bl	800e08c <SDMMC_GetCmdResp2>
 800dd2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd30:	69fb      	ldr	r3, [r7, #28]
}
 800dd32:	4618      	mov	r0, r3
 800dd34:	3720      	adds	r7, #32
 800dd36:	46bd      	mov	sp, r7
 800dd38:	bd80      	pop	{r7, pc}

0800dd3a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800dd3a:	b580      	push	{r7, lr}
 800dd3c:	b088      	sub	sp, #32
 800dd3e:	af00      	add	r7, sp, #0
 800dd40:	6078      	str	r0, [r7, #4]
 800dd42:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800dd44:	2300      	movs	r3, #0
 800dd46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800dd48:	2303      	movs	r3, #3
 800dd4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dd4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dd50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd52:	2300      	movs	r3, #0
 800dd54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd5c:	f107 0308 	add.w	r3, r7, #8
 800dd60:	4619      	mov	r1, r3
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	f7ff fd5e 	bl	800d824 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800dd68:	683a      	ldr	r2, [r7, #0]
 800dd6a:	2103      	movs	r1, #3
 800dd6c:	6878      	ldr	r0, [r7, #4]
 800dd6e:	f000 fa17 	bl	800e1a0 <SDMMC_GetCmdResp6>
 800dd72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd74:	69fb      	ldr	r3, [r7, #28]
}
 800dd76:	4618      	mov	r0, r3
 800dd78:	3720      	adds	r7, #32
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bd80      	pop	{r7, pc}

0800dd7e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dd7e:	b580      	push	{r7, lr}
 800dd80:	b088      	sub	sp, #32
 800dd82:	af00      	add	r7, sp, #0
 800dd84:	6078      	str	r0, [r7, #4]
 800dd86:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800dd8c:	230d      	movs	r3, #13
 800dd8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dd90:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dd94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd96:	2300      	movs	r3, #0
 800dd98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dda0:	f107 0308 	add.w	r3, r7, #8
 800dda4:	4619      	mov	r1, r3
 800dda6:	6878      	ldr	r0, [r7, #4]
 800dda8:	f7ff fd3c 	bl	800d824 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800ddac:	f241 3288 	movw	r2, #5000	; 0x1388
 800ddb0:	210d      	movs	r1, #13
 800ddb2:	6878      	ldr	r0, [r7, #4]
 800ddb4:	f000 f878 	bl	800dea8 <SDMMC_GetCmdResp1>
 800ddb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ddba:	69fb      	ldr	r3, [r7, #28]
}
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	3720      	adds	r7, #32
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}

0800ddc4 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b088      	sub	sp, #32
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ddcc:	2300      	movs	r3, #0
 800ddce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800ddd0:	230d      	movs	r3, #13
 800ddd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ddd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ddd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ddda:	2300      	movs	r3, #0
 800dddc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ddde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dde2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dde4:	f107 0308 	add.w	r3, r7, #8
 800dde8:	4619      	mov	r1, r3
 800ddea:	6878      	ldr	r0, [r7, #4]
 800ddec:	f7ff fd1a 	bl	800d824 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800ddf0:	f241 3288 	movw	r2, #5000	; 0x1388
 800ddf4:	210d      	movs	r1, #13
 800ddf6:	6878      	ldr	r0, [r7, #4]
 800ddf8:	f000 f856 	bl	800dea8 <SDMMC_GetCmdResp1>
 800ddfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ddfe:	69fb      	ldr	r3, [r7, #28]
}
 800de00:	4618      	mov	r0, r3
 800de02:	3720      	adds	r7, #32
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}

0800de08 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b088      	sub	sp, #32
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800de10:	2300      	movs	r3, #0
 800de12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800de14:	230b      	movs	r3, #11
 800de16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800de18:	f44f 7380 	mov.w	r3, #256	; 0x100
 800de1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800de1e:	2300      	movs	r3, #0
 800de20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800de22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800de26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de28:	f107 0308 	add.w	r3, r7, #8
 800de2c:	4619      	mov	r1, r3
 800de2e:	6878      	ldr	r0, [r7, #4]
 800de30:	f7ff fcf8 	bl	800d824 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800de34:	f241 3288 	movw	r2, #5000	; 0x1388
 800de38:	210b      	movs	r1, #11
 800de3a:	6878      	ldr	r0, [r7, #4]
 800de3c:	f000 f834 	bl	800dea8 <SDMMC_GetCmdResp1>
 800de40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de42:	69fb      	ldr	r3, [r7, #28]
}
 800de44:	4618      	mov	r0, r3
 800de46:	3720      	adds	r7, #32
 800de48:	46bd      	mov	sp, r7
 800de4a:	bd80      	pop	{r7, pc}

0800de4c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800de4c:	b480      	push	{r7}
 800de4e:	b085      	sub	sp, #20
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800de54:	4b11      	ldr	r3, [pc, #68]	; (800de9c <SDMMC_GetCmdError+0x50>)
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	4a11      	ldr	r2, [pc, #68]	; (800dea0 <SDMMC_GetCmdError+0x54>)
 800de5a:	fba2 2303 	umull	r2, r3, r2, r3
 800de5e:	0a5b      	lsrs	r3, r3, #9
 800de60:	f241 3288 	movw	r2, #5000	; 0x1388
 800de64:	fb02 f303 	mul.w	r3, r2, r3
 800de68:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	1e5a      	subs	r2, r3, #1
 800de6e:	60fa      	str	r2, [r7, #12]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d102      	bne.n	800de7a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800de74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800de78:	e009      	b.n	800de8e <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de82:	2b00      	cmp	r3, #0
 800de84:	d0f1      	beq.n	800de6a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	4a06      	ldr	r2, [pc, #24]	; (800dea4 <SDMMC_GetCmdError+0x58>)
 800de8a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800de8c:	2300      	movs	r3, #0
}
 800de8e:	4618      	mov	r0, r3
 800de90:	3714      	adds	r7, #20
 800de92:	46bd      	mov	sp, r7
 800de94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de98:	4770      	bx	lr
 800de9a:	bf00      	nop
 800de9c:	24000004 	.word	0x24000004
 800dea0:	10624dd3 	.word	0x10624dd3
 800dea4:	002000c5 	.word	0x002000c5

0800dea8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b088      	sub	sp, #32
 800deac:	af00      	add	r7, sp, #0
 800deae:	60f8      	str	r0, [r7, #12]
 800deb0:	460b      	mov	r3, r1
 800deb2:	607a      	str	r2, [r7, #4]
 800deb4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800deb6:	4b70      	ldr	r3, [pc, #448]	; (800e078 <SDMMC_GetCmdResp1+0x1d0>)
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	4a70      	ldr	r2, [pc, #448]	; (800e07c <SDMMC_GetCmdResp1+0x1d4>)
 800debc:	fba2 2303 	umull	r2, r3, r2, r3
 800dec0:	0a5a      	lsrs	r2, r3, #9
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	fb02 f303 	mul.w	r3, r2, r3
 800dec8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800deca:	69fb      	ldr	r3, [r7, #28]
 800decc:	1e5a      	subs	r2, r3, #1
 800dece:	61fa      	str	r2, [r7, #28]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d102      	bne.n	800deda <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ded4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ded8:	e0c9      	b.n	800e06e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dede:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800dee0:	69ba      	ldr	r2, [r7, #24]
 800dee2:	4b67      	ldr	r3, [pc, #412]	; (800e080 <SDMMC_GetCmdResp1+0x1d8>)
 800dee4:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d0ef      	beq.n	800deca <SDMMC_GetCmdResp1+0x22>
 800deea:	69bb      	ldr	r3, [r7, #24]
 800deec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800def0:	2b00      	cmp	r3, #0
 800def2:	d1ea      	bne.n	800deca <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800def8:	f003 0304 	and.w	r3, r3, #4
 800defc:	2b00      	cmp	r3, #0
 800defe:	d004      	beq.n	800df0a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	2204      	movs	r2, #4
 800df04:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800df06:	2304      	movs	r3, #4
 800df08:	e0b1      	b.n	800e06e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df0e:	f003 0301 	and.w	r3, r3, #1
 800df12:	2b00      	cmp	r3, #0
 800df14:	d004      	beq.n	800df20 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	2201      	movs	r2, #1
 800df1a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800df1c:	2301      	movs	r3, #1
 800df1e:	e0a6      	b.n	800e06e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	4a58      	ldr	r2, [pc, #352]	; (800e084 <SDMMC_GetCmdResp1+0x1dc>)
 800df24:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800df26:	68f8      	ldr	r0, [r7, #12]
 800df28:	f7ff fca6 	bl	800d878 <SDMMC_GetCommandResponse>
 800df2c:	4603      	mov	r3, r0
 800df2e:	461a      	mov	r2, r3
 800df30:	7afb      	ldrb	r3, [r7, #11]
 800df32:	4293      	cmp	r3, r2
 800df34:	d001      	beq.n	800df3a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800df36:	2301      	movs	r3, #1
 800df38:	e099      	b.n	800e06e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800df3a:	2100      	movs	r1, #0
 800df3c:	68f8      	ldr	r0, [r7, #12]
 800df3e:	f7ff fca8 	bl	800d892 <SDMMC_GetResponse>
 800df42:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800df44:	697a      	ldr	r2, [r7, #20]
 800df46:	4b50      	ldr	r3, [pc, #320]	; (800e088 <SDMMC_GetCmdResp1+0x1e0>)
 800df48:	4013      	ands	r3, r2
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d101      	bne.n	800df52 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800df4e:	2300      	movs	r3, #0
 800df50:	e08d      	b.n	800e06e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800df52:	697b      	ldr	r3, [r7, #20]
 800df54:	2b00      	cmp	r3, #0
 800df56:	da02      	bge.n	800df5e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800df58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800df5c:	e087      	b.n	800e06e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800df5e:	697b      	ldr	r3, [r7, #20]
 800df60:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800df64:	2b00      	cmp	r3, #0
 800df66:	d001      	beq.n	800df6c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800df68:	2340      	movs	r3, #64	; 0x40
 800df6a:	e080      	b.n	800e06e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800df6c:	697b      	ldr	r3, [r7, #20]
 800df6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800df72:	2b00      	cmp	r3, #0
 800df74:	d001      	beq.n	800df7a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800df76:	2380      	movs	r3, #128	; 0x80
 800df78:	e079      	b.n	800e06e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800df7a:	697b      	ldr	r3, [r7, #20]
 800df7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800df80:	2b00      	cmp	r3, #0
 800df82:	d002      	beq.n	800df8a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800df84:	f44f 7380 	mov.w	r3, #256	; 0x100
 800df88:	e071      	b.n	800e06e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800df8a:	697b      	ldr	r3, [r7, #20]
 800df8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800df90:	2b00      	cmp	r3, #0
 800df92:	d002      	beq.n	800df9a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800df94:	f44f 7300 	mov.w	r3, #512	; 0x200
 800df98:	e069      	b.n	800e06e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800df9a:	697b      	ldr	r3, [r7, #20]
 800df9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d002      	beq.n	800dfaa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800dfa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dfa8:	e061      	b.n	800e06e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800dfaa:	697b      	ldr	r3, [r7, #20]
 800dfac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d002      	beq.n	800dfba <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800dfb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dfb8:	e059      	b.n	800e06e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800dfba:	697b      	ldr	r3, [r7, #20]
 800dfbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d002      	beq.n	800dfca <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dfc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dfc8:	e051      	b.n	800e06e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800dfca:	697b      	ldr	r3, [r7, #20]
 800dfcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d002      	beq.n	800dfda <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dfd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dfd8:	e049      	b.n	800e06e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800dfda:	697b      	ldr	r3, [r7, #20]
 800dfdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d002      	beq.n	800dfea <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800dfe4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800dfe8:	e041      	b.n	800e06e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800dfea:	697b      	ldr	r3, [r7, #20]
 800dfec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d002      	beq.n	800dffa <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800dff4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dff8:	e039      	b.n	800e06e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800dffa:	697b      	ldr	r3, [r7, #20]
 800dffc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e000:	2b00      	cmp	r3, #0
 800e002:	d002      	beq.n	800e00a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e004:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e008:	e031      	b.n	800e06e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e00a:	697b      	ldr	r3, [r7, #20]
 800e00c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e010:	2b00      	cmp	r3, #0
 800e012:	d002      	beq.n	800e01a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e014:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e018:	e029      	b.n	800e06e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e01a:	697b      	ldr	r3, [r7, #20]
 800e01c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e020:	2b00      	cmp	r3, #0
 800e022:	d002      	beq.n	800e02a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e024:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e028:	e021      	b.n	800e06e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e02a:	697b      	ldr	r3, [r7, #20]
 800e02c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e030:	2b00      	cmp	r3, #0
 800e032:	d002      	beq.n	800e03a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e034:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e038:	e019      	b.n	800e06e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e03a:	697b      	ldr	r3, [r7, #20]
 800e03c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e040:	2b00      	cmp	r3, #0
 800e042:	d002      	beq.n	800e04a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e044:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e048:	e011      	b.n	800e06e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e04a:	697b      	ldr	r3, [r7, #20]
 800e04c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e050:	2b00      	cmp	r3, #0
 800e052:	d002      	beq.n	800e05a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e054:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e058:	e009      	b.n	800e06e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e05a:	697b      	ldr	r3, [r7, #20]
 800e05c:	f003 0308 	and.w	r3, r3, #8
 800e060:	2b00      	cmp	r3, #0
 800e062:	d002      	beq.n	800e06a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e064:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e068:	e001      	b.n	800e06e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e06a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e06e:	4618      	mov	r0, r3
 800e070:	3720      	adds	r7, #32
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}
 800e076:	bf00      	nop
 800e078:	24000004 	.word	0x24000004
 800e07c:	10624dd3 	.word	0x10624dd3
 800e080:	00200045 	.word	0x00200045
 800e084:	002000c5 	.word	0x002000c5
 800e088:	fdffe008 	.word	0xfdffe008

0800e08c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800e08c:	b480      	push	{r7}
 800e08e:	b085      	sub	sp, #20
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e094:	4b1f      	ldr	r3, [pc, #124]	; (800e114 <SDMMC_GetCmdResp2+0x88>)
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	4a1f      	ldr	r2, [pc, #124]	; (800e118 <SDMMC_GetCmdResp2+0x8c>)
 800e09a:	fba2 2303 	umull	r2, r3, r2, r3
 800e09e:	0a5b      	lsrs	r3, r3, #9
 800e0a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e0a4:	fb02 f303 	mul.w	r3, r2, r3
 800e0a8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	1e5a      	subs	r2, r3, #1
 800e0ae:	60fa      	str	r2, [r7, #12]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d102      	bne.n	800e0ba <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e0b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e0b8:	e026      	b.n	800e108 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0be:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e0c0:	68bb      	ldr	r3, [r7, #8]
 800e0c2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d0ef      	beq.n	800e0aa <SDMMC_GetCmdResp2+0x1e>
 800e0ca:	68bb      	ldr	r3, [r7, #8]
 800e0cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d1ea      	bne.n	800e0aa <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0d8:	f003 0304 	and.w	r3, r3, #4
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d004      	beq.n	800e0ea <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	2204      	movs	r2, #4
 800e0e4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e0e6:	2304      	movs	r3, #4
 800e0e8:	e00e      	b.n	800e108 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0ee:	f003 0301 	and.w	r3, r3, #1
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d004      	beq.n	800e100 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	2201      	movs	r2, #1
 800e0fa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e0fc:	2301      	movs	r3, #1
 800e0fe:	e003      	b.n	800e108 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	4a06      	ldr	r2, [pc, #24]	; (800e11c <SDMMC_GetCmdResp2+0x90>)
 800e104:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e106:	2300      	movs	r3, #0
}
 800e108:	4618      	mov	r0, r3
 800e10a:	3714      	adds	r7, #20
 800e10c:	46bd      	mov	sp, r7
 800e10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e112:	4770      	bx	lr
 800e114:	24000004 	.word	0x24000004
 800e118:	10624dd3 	.word	0x10624dd3
 800e11c:	002000c5 	.word	0x002000c5

0800e120 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800e120:	b480      	push	{r7}
 800e122:	b085      	sub	sp, #20
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e128:	4b1a      	ldr	r3, [pc, #104]	; (800e194 <SDMMC_GetCmdResp3+0x74>)
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	4a1a      	ldr	r2, [pc, #104]	; (800e198 <SDMMC_GetCmdResp3+0x78>)
 800e12e:	fba2 2303 	umull	r2, r3, r2, r3
 800e132:	0a5b      	lsrs	r3, r3, #9
 800e134:	f241 3288 	movw	r2, #5000	; 0x1388
 800e138:	fb02 f303 	mul.w	r3, r2, r3
 800e13c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	1e5a      	subs	r2, r3, #1
 800e142:	60fa      	str	r2, [r7, #12]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d102      	bne.n	800e14e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e148:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e14c:	e01b      	b.n	800e186 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e152:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d0ef      	beq.n	800e13e <SDMMC_GetCmdResp3+0x1e>
 800e15e:	68bb      	ldr	r3, [r7, #8]
 800e160:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e164:	2b00      	cmp	r3, #0
 800e166:	d1ea      	bne.n	800e13e <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e16c:	f003 0304 	and.w	r3, r3, #4
 800e170:	2b00      	cmp	r3, #0
 800e172:	d004      	beq.n	800e17e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	2204      	movs	r2, #4
 800e178:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e17a:	2304      	movs	r3, #4
 800e17c:	e003      	b.n	800e186 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	4a06      	ldr	r2, [pc, #24]	; (800e19c <SDMMC_GetCmdResp3+0x7c>)
 800e182:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e184:	2300      	movs	r3, #0
}
 800e186:	4618      	mov	r0, r3
 800e188:	3714      	adds	r7, #20
 800e18a:	46bd      	mov	sp, r7
 800e18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e190:	4770      	bx	lr
 800e192:	bf00      	nop
 800e194:	24000004 	.word	0x24000004
 800e198:	10624dd3 	.word	0x10624dd3
 800e19c:	002000c5 	.word	0x002000c5

0800e1a0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b088      	sub	sp, #32
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	60f8      	str	r0, [r7, #12]
 800e1a8:	460b      	mov	r3, r1
 800e1aa:	607a      	str	r2, [r7, #4]
 800e1ac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e1ae:	4b35      	ldr	r3, [pc, #212]	; (800e284 <SDMMC_GetCmdResp6+0xe4>)
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	4a35      	ldr	r2, [pc, #212]	; (800e288 <SDMMC_GetCmdResp6+0xe8>)
 800e1b4:	fba2 2303 	umull	r2, r3, r2, r3
 800e1b8:	0a5b      	lsrs	r3, r3, #9
 800e1ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800e1be:	fb02 f303 	mul.w	r3, r2, r3
 800e1c2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e1c4:	69fb      	ldr	r3, [r7, #28]
 800e1c6:	1e5a      	subs	r2, r3, #1
 800e1c8:	61fa      	str	r2, [r7, #28]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d102      	bne.n	800e1d4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e1ce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e1d2:	e052      	b.n	800e27a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1d8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e1da:	69bb      	ldr	r3, [r7, #24]
 800e1dc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d0ef      	beq.n	800e1c4 <SDMMC_GetCmdResp6+0x24>
 800e1e4:	69bb      	ldr	r3, [r7, #24]
 800e1e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d1ea      	bne.n	800e1c4 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1f2:	f003 0304 	and.w	r3, r3, #4
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d004      	beq.n	800e204 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	2204      	movs	r2, #4
 800e1fe:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e200:	2304      	movs	r3, #4
 800e202:	e03a      	b.n	800e27a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e208:	f003 0301 	and.w	r3, r3, #1
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d004      	beq.n	800e21a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	2201      	movs	r2, #1
 800e214:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e216:	2301      	movs	r3, #1
 800e218:	e02f      	b.n	800e27a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e21a:	68f8      	ldr	r0, [r7, #12]
 800e21c:	f7ff fb2c 	bl	800d878 <SDMMC_GetCommandResponse>
 800e220:	4603      	mov	r3, r0
 800e222:	461a      	mov	r2, r3
 800e224:	7afb      	ldrb	r3, [r7, #11]
 800e226:	4293      	cmp	r3, r2
 800e228:	d001      	beq.n	800e22e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e22a:	2301      	movs	r3, #1
 800e22c:	e025      	b.n	800e27a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	4a16      	ldr	r2, [pc, #88]	; (800e28c <SDMMC_GetCmdResp6+0xec>)
 800e232:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e234:	2100      	movs	r1, #0
 800e236:	68f8      	ldr	r0, [r7, #12]
 800e238:	f7ff fb2b 	bl	800d892 <SDMMC_GetResponse>
 800e23c:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e23e:	697b      	ldr	r3, [r7, #20]
 800e240:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e244:	2b00      	cmp	r3, #0
 800e246:	d106      	bne.n	800e256 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e248:	697b      	ldr	r3, [r7, #20]
 800e24a:	0c1b      	lsrs	r3, r3, #16
 800e24c:	b29a      	uxth	r2, r3
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800e252:	2300      	movs	r3, #0
 800e254:	e011      	b.n	800e27a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e256:	697b      	ldr	r3, [r7, #20]
 800e258:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d002      	beq.n	800e266 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e260:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e264:	e009      	b.n	800e27a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e266:	697b      	ldr	r3, [r7, #20]
 800e268:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d002      	beq.n	800e276 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e270:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e274:	e001      	b.n	800e27a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e276:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e27a:	4618      	mov	r0, r3
 800e27c:	3720      	adds	r7, #32
 800e27e:	46bd      	mov	sp, r7
 800e280:	bd80      	pop	{r7, pc}
 800e282:	bf00      	nop
 800e284:	24000004 	.word	0x24000004
 800e288:	10624dd3 	.word	0x10624dd3
 800e28c:	002000c5 	.word	0x002000c5

0800e290 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800e290:	b480      	push	{r7}
 800e292:	b085      	sub	sp, #20
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e298:	4b22      	ldr	r3, [pc, #136]	; (800e324 <SDMMC_GetCmdResp7+0x94>)
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	4a22      	ldr	r2, [pc, #136]	; (800e328 <SDMMC_GetCmdResp7+0x98>)
 800e29e:	fba2 2303 	umull	r2, r3, r2, r3
 800e2a2:	0a5b      	lsrs	r3, r3, #9
 800e2a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e2a8:	fb02 f303 	mul.w	r3, r2, r3
 800e2ac:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	1e5a      	subs	r2, r3, #1
 800e2b2:	60fa      	str	r2, [r7, #12]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d102      	bne.n	800e2be <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e2b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e2bc:	e02c      	b.n	800e318 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2c2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e2c4:	68bb      	ldr	r3, [r7, #8]
 800e2c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d0ef      	beq.n	800e2ae <SDMMC_GetCmdResp7+0x1e>
 800e2ce:	68bb      	ldr	r3, [r7, #8]
 800e2d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d1ea      	bne.n	800e2ae <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2dc:	f003 0304 	and.w	r3, r3, #4
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d004      	beq.n	800e2ee <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	2204      	movs	r2, #4
 800e2e8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e2ea:	2304      	movs	r3, #4
 800e2ec:	e014      	b.n	800e318 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2f2:	f003 0301 	and.w	r3, r3, #1
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d004      	beq.n	800e304 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	2201      	movs	r2, #1
 800e2fe:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e300:	2301      	movs	r3, #1
 800e302:	e009      	b.n	800e318 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d002      	beq.n	800e316 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2240      	movs	r2, #64	; 0x40
 800e314:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e316:	2300      	movs	r3, #0

}
 800e318:	4618      	mov	r0, r3
 800e31a:	3714      	adds	r7, #20
 800e31c:	46bd      	mov	sp, r7
 800e31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e322:	4770      	bx	lr
 800e324:	24000004 	.word	0x24000004
 800e328:	10624dd3 	.word	0x10624dd3

0800e32c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e32c:	b084      	sub	sp, #16
 800e32e:	b580      	push	{r7, lr}
 800e330:	b084      	sub	sp, #16
 800e332:	af00      	add	r7, sp, #0
 800e334:	6078      	str	r0, [r7, #4]
 800e336:	f107 001c 	add.w	r0, r7, #28
 800e33a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e340:	2b01      	cmp	r3, #1
 800e342:	d120      	bne.n	800e386 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e348:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	68da      	ldr	r2, [r3, #12]
 800e354:	4b25      	ldr	r3, [pc, #148]	; (800e3ec <USB_CoreInit+0xc0>)
 800e356:	4013      	ands	r3, r2
 800e358:	687a      	ldr	r2, [r7, #4]
 800e35a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	68db      	ldr	r3, [r3, #12]
 800e360:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e36a:	2b01      	cmp	r3, #1
 800e36c:	d105      	bne.n	800e37a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	68db      	ldr	r3, [r3, #12]
 800e372:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800e37a:	6878      	ldr	r0, [r7, #4]
 800e37c:	f001 fabe 	bl	800f8fc <USB_CoreReset>
 800e380:	4603      	mov	r3, r0
 800e382:	73fb      	strb	r3, [r7, #15]
 800e384:	e01a      	b.n	800e3bc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	68db      	ldr	r3, [r3, #12]
 800e38a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800e392:	6878      	ldr	r0, [r7, #4]
 800e394:	f001 fab2 	bl	800f8fc <USB_CoreReset>
 800e398:	4603      	mov	r3, r0
 800e39a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e39c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d106      	bne.n	800e3b0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	639a      	str	r2, [r3, #56]	; 0x38
 800e3ae:	e005      	b.n	800e3bc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3be:	2b01      	cmp	r3, #1
 800e3c0:	d10b      	bne.n	800e3da <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	689b      	ldr	r3, [r3, #8]
 800e3c6:	f043 0206 	orr.w	r2, r3, #6
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	689b      	ldr	r3, [r3, #8]
 800e3d2:	f043 0220 	orr.w	r2, r3, #32
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e3da:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3dc:	4618      	mov	r0, r3
 800e3de:	3710      	adds	r7, #16
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e3e6:	b004      	add	sp, #16
 800e3e8:	4770      	bx	lr
 800e3ea:	bf00      	nop
 800e3ec:	ffbdffbf 	.word	0xffbdffbf

0800e3f0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e3f0:	b480      	push	{r7}
 800e3f2:	b087      	sub	sp, #28
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	60f8      	str	r0, [r7, #12]
 800e3f8:	60b9      	str	r1, [r7, #8]
 800e3fa:	4613      	mov	r3, r2
 800e3fc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e3fe:	79fb      	ldrb	r3, [r7, #7]
 800e400:	2b02      	cmp	r3, #2
 800e402:	d165      	bne.n	800e4d0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e404:	68bb      	ldr	r3, [r7, #8]
 800e406:	4a41      	ldr	r2, [pc, #260]	; (800e50c <USB_SetTurnaroundTime+0x11c>)
 800e408:	4293      	cmp	r3, r2
 800e40a:	d906      	bls.n	800e41a <USB_SetTurnaroundTime+0x2a>
 800e40c:	68bb      	ldr	r3, [r7, #8]
 800e40e:	4a40      	ldr	r2, [pc, #256]	; (800e510 <USB_SetTurnaroundTime+0x120>)
 800e410:	4293      	cmp	r3, r2
 800e412:	d802      	bhi.n	800e41a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e414:	230f      	movs	r3, #15
 800e416:	617b      	str	r3, [r7, #20]
 800e418:	e062      	b.n	800e4e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e41a:	68bb      	ldr	r3, [r7, #8]
 800e41c:	4a3c      	ldr	r2, [pc, #240]	; (800e510 <USB_SetTurnaroundTime+0x120>)
 800e41e:	4293      	cmp	r3, r2
 800e420:	d906      	bls.n	800e430 <USB_SetTurnaroundTime+0x40>
 800e422:	68bb      	ldr	r3, [r7, #8]
 800e424:	4a3b      	ldr	r2, [pc, #236]	; (800e514 <USB_SetTurnaroundTime+0x124>)
 800e426:	4293      	cmp	r3, r2
 800e428:	d802      	bhi.n	800e430 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e42a:	230e      	movs	r3, #14
 800e42c:	617b      	str	r3, [r7, #20]
 800e42e:	e057      	b.n	800e4e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e430:	68bb      	ldr	r3, [r7, #8]
 800e432:	4a38      	ldr	r2, [pc, #224]	; (800e514 <USB_SetTurnaroundTime+0x124>)
 800e434:	4293      	cmp	r3, r2
 800e436:	d906      	bls.n	800e446 <USB_SetTurnaroundTime+0x56>
 800e438:	68bb      	ldr	r3, [r7, #8]
 800e43a:	4a37      	ldr	r2, [pc, #220]	; (800e518 <USB_SetTurnaroundTime+0x128>)
 800e43c:	4293      	cmp	r3, r2
 800e43e:	d802      	bhi.n	800e446 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e440:	230d      	movs	r3, #13
 800e442:	617b      	str	r3, [r7, #20]
 800e444:	e04c      	b.n	800e4e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e446:	68bb      	ldr	r3, [r7, #8]
 800e448:	4a33      	ldr	r2, [pc, #204]	; (800e518 <USB_SetTurnaroundTime+0x128>)
 800e44a:	4293      	cmp	r3, r2
 800e44c:	d906      	bls.n	800e45c <USB_SetTurnaroundTime+0x6c>
 800e44e:	68bb      	ldr	r3, [r7, #8]
 800e450:	4a32      	ldr	r2, [pc, #200]	; (800e51c <USB_SetTurnaroundTime+0x12c>)
 800e452:	4293      	cmp	r3, r2
 800e454:	d802      	bhi.n	800e45c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e456:	230c      	movs	r3, #12
 800e458:	617b      	str	r3, [r7, #20]
 800e45a:	e041      	b.n	800e4e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e45c:	68bb      	ldr	r3, [r7, #8]
 800e45e:	4a2f      	ldr	r2, [pc, #188]	; (800e51c <USB_SetTurnaroundTime+0x12c>)
 800e460:	4293      	cmp	r3, r2
 800e462:	d906      	bls.n	800e472 <USB_SetTurnaroundTime+0x82>
 800e464:	68bb      	ldr	r3, [r7, #8]
 800e466:	4a2e      	ldr	r2, [pc, #184]	; (800e520 <USB_SetTurnaroundTime+0x130>)
 800e468:	4293      	cmp	r3, r2
 800e46a:	d802      	bhi.n	800e472 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e46c:	230b      	movs	r3, #11
 800e46e:	617b      	str	r3, [r7, #20]
 800e470:	e036      	b.n	800e4e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e472:	68bb      	ldr	r3, [r7, #8]
 800e474:	4a2a      	ldr	r2, [pc, #168]	; (800e520 <USB_SetTurnaroundTime+0x130>)
 800e476:	4293      	cmp	r3, r2
 800e478:	d906      	bls.n	800e488 <USB_SetTurnaroundTime+0x98>
 800e47a:	68bb      	ldr	r3, [r7, #8]
 800e47c:	4a29      	ldr	r2, [pc, #164]	; (800e524 <USB_SetTurnaroundTime+0x134>)
 800e47e:	4293      	cmp	r3, r2
 800e480:	d802      	bhi.n	800e488 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e482:	230a      	movs	r3, #10
 800e484:	617b      	str	r3, [r7, #20]
 800e486:	e02b      	b.n	800e4e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e488:	68bb      	ldr	r3, [r7, #8]
 800e48a:	4a26      	ldr	r2, [pc, #152]	; (800e524 <USB_SetTurnaroundTime+0x134>)
 800e48c:	4293      	cmp	r3, r2
 800e48e:	d906      	bls.n	800e49e <USB_SetTurnaroundTime+0xae>
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	4a25      	ldr	r2, [pc, #148]	; (800e528 <USB_SetTurnaroundTime+0x138>)
 800e494:	4293      	cmp	r3, r2
 800e496:	d802      	bhi.n	800e49e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e498:	2309      	movs	r3, #9
 800e49a:	617b      	str	r3, [r7, #20]
 800e49c:	e020      	b.n	800e4e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e49e:	68bb      	ldr	r3, [r7, #8]
 800e4a0:	4a21      	ldr	r2, [pc, #132]	; (800e528 <USB_SetTurnaroundTime+0x138>)
 800e4a2:	4293      	cmp	r3, r2
 800e4a4:	d906      	bls.n	800e4b4 <USB_SetTurnaroundTime+0xc4>
 800e4a6:	68bb      	ldr	r3, [r7, #8]
 800e4a8:	4a20      	ldr	r2, [pc, #128]	; (800e52c <USB_SetTurnaroundTime+0x13c>)
 800e4aa:	4293      	cmp	r3, r2
 800e4ac:	d802      	bhi.n	800e4b4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e4ae:	2308      	movs	r3, #8
 800e4b0:	617b      	str	r3, [r7, #20]
 800e4b2:	e015      	b.n	800e4e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e4b4:	68bb      	ldr	r3, [r7, #8]
 800e4b6:	4a1d      	ldr	r2, [pc, #116]	; (800e52c <USB_SetTurnaroundTime+0x13c>)
 800e4b8:	4293      	cmp	r3, r2
 800e4ba:	d906      	bls.n	800e4ca <USB_SetTurnaroundTime+0xda>
 800e4bc:	68bb      	ldr	r3, [r7, #8]
 800e4be:	4a1c      	ldr	r2, [pc, #112]	; (800e530 <USB_SetTurnaroundTime+0x140>)
 800e4c0:	4293      	cmp	r3, r2
 800e4c2:	d802      	bhi.n	800e4ca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e4c4:	2307      	movs	r3, #7
 800e4c6:	617b      	str	r3, [r7, #20]
 800e4c8:	e00a      	b.n	800e4e0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e4ca:	2306      	movs	r3, #6
 800e4cc:	617b      	str	r3, [r7, #20]
 800e4ce:	e007      	b.n	800e4e0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800e4d0:	79fb      	ldrb	r3, [r7, #7]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d102      	bne.n	800e4dc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800e4d6:	2309      	movs	r3, #9
 800e4d8:	617b      	str	r3, [r7, #20]
 800e4da:	e001      	b.n	800e4e0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e4dc:	2309      	movs	r3, #9
 800e4de:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	68db      	ldr	r3, [r3, #12]
 800e4e4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	68da      	ldr	r2, [r3, #12]
 800e4f0:	697b      	ldr	r3, [r7, #20]
 800e4f2:	029b      	lsls	r3, r3, #10
 800e4f4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800e4f8:	431a      	orrs	r2, r3
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e4fe:	2300      	movs	r3, #0
}
 800e500:	4618      	mov	r0, r3
 800e502:	371c      	adds	r7, #28
 800e504:	46bd      	mov	sp, r7
 800e506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50a:	4770      	bx	lr
 800e50c:	00d8acbf 	.word	0x00d8acbf
 800e510:	00e4e1bf 	.word	0x00e4e1bf
 800e514:	00f423ff 	.word	0x00f423ff
 800e518:	0106737f 	.word	0x0106737f
 800e51c:	011a499f 	.word	0x011a499f
 800e520:	01312cff 	.word	0x01312cff
 800e524:	014ca43f 	.word	0x014ca43f
 800e528:	016e35ff 	.word	0x016e35ff
 800e52c:	01a6ab1f 	.word	0x01a6ab1f
 800e530:	01e847ff 	.word	0x01e847ff

0800e534 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e534:	b480      	push	{r7}
 800e536:	b083      	sub	sp, #12
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	689b      	ldr	r3, [r3, #8]
 800e540:	f043 0201 	orr.w	r2, r3, #1
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e548:	2300      	movs	r3, #0
}
 800e54a:	4618      	mov	r0, r3
 800e54c:	370c      	adds	r7, #12
 800e54e:	46bd      	mov	sp, r7
 800e550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e554:	4770      	bx	lr

0800e556 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e556:	b480      	push	{r7}
 800e558:	b083      	sub	sp, #12
 800e55a:	af00      	add	r7, sp, #0
 800e55c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	689b      	ldr	r3, [r3, #8]
 800e562:	f023 0201 	bic.w	r2, r3, #1
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e56a:	2300      	movs	r3, #0
}
 800e56c:	4618      	mov	r0, r3
 800e56e:	370c      	adds	r7, #12
 800e570:	46bd      	mov	sp, r7
 800e572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e576:	4770      	bx	lr

0800e578 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b082      	sub	sp, #8
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
 800e580:	460b      	mov	r3, r1
 800e582:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	68db      	ldr	r3, [r3, #12]
 800e588:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e590:	78fb      	ldrb	r3, [r7, #3]
 800e592:	2b01      	cmp	r3, #1
 800e594:	d106      	bne.n	800e5a4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	68db      	ldr	r3, [r3, #12]
 800e59a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	60da      	str	r2, [r3, #12]
 800e5a2:	e00b      	b.n	800e5bc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800e5a4:	78fb      	ldrb	r3, [r7, #3]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d106      	bne.n	800e5b8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	68db      	ldr	r3, [r3, #12]
 800e5ae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	60da      	str	r2, [r3, #12]
 800e5b6:	e001      	b.n	800e5bc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800e5b8:	2301      	movs	r3, #1
 800e5ba:	e003      	b.n	800e5c4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800e5bc:	2032      	movs	r0, #50	; 0x32
 800e5be:	f7f3 fcf1 	bl	8001fa4 <HAL_Delay>

  return HAL_OK;
 800e5c2:	2300      	movs	r3, #0
}
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	3708      	adds	r7, #8
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}

0800e5cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e5cc:	b084      	sub	sp, #16
 800e5ce:	b580      	push	{r7, lr}
 800e5d0:	b086      	sub	sp, #24
 800e5d2:	af00      	add	r7, sp, #0
 800e5d4:	6078      	str	r0, [r7, #4]
 800e5d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e5da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e5de:	2300      	movs	r3, #0
 800e5e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	613b      	str	r3, [r7, #16]
 800e5ea:	e009      	b.n	800e600 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e5ec:	687a      	ldr	r2, [r7, #4]
 800e5ee:	693b      	ldr	r3, [r7, #16]
 800e5f0:	3340      	adds	r3, #64	; 0x40
 800e5f2:	009b      	lsls	r3, r3, #2
 800e5f4:	4413      	add	r3, r2
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e5fa:	693b      	ldr	r3, [r7, #16]
 800e5fc:	3301      	adds	r3, #1
 800e5fe:	613b      	str	r3, [r7, #16]
 800e600:	693b      	ldr	r3, [r7, #16]
 800e602:	2b0e      	cmp	r3, #14
 800e604:	d9f2      	bls.n	800e5ec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d11c      	bne.n	800e646 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e612:	685b      	ldr	r3, [r3, #4]
 800e614:	68fa      	ldr	r2, [r7, #12]
 800e616:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e61a:	f043 0302 	orr.w	r3, r3, #2
 800e61e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e624:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	601a      	str	r2, [r3, #0]
 800e644:	e005      	b.n	800e652 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e64a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e658:	461a      	mov	r2, r3
 800e65a:	2300      	movs	r3, #0
 800e65c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e664:	4619      	mov	r1, r3
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e66c:	461a      	mov	r2, r3
 800e66e:	680b      	ldr	r3, [r1, #0]
 800e670:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e674:	2b01      	cmp	r3, #1
 800e676:	d10c      	bne.n	800e692 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d104      	bne.n	800e688 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e67e:	2100      	movs	r1, #0
 800e680:	6878      	ldr	r0, [r7, #4]
 800e682:	f000 f949 	bl	800e918 <USB_SetDevSpeed>
 800e686:	e008      	b.n	800e69a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e688:	2101      	movs	r1, #1
 800e68a:	6878      	ldr	r0, [r7, #4]
 800e68c:	f000 f944 	bl	800e918 <USB_SetDevSpeed>
 800e690:	e003      	b.n	800e69a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e692:	2103      	movs	r1, #3
 800e694:	6878      	ldr	r0, [r7, #4]
 800e696:	f000 f93f 	bl	800e918 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e69a:	2110      	movs	r1, #16
 800e69c:	6878      	ldr	r0, [r7, #4]
 800e69e:	f000 f8f3 	bl	800e888 <USB_FlushTxFifo>
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d001      	beq.n	800e6ac <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800e6a8:	2301      	movs	r3, #1
 800e6aa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	f000 f911 	bl	800e8d4 <USB_FlushRxFifo>
 800e6b2:	4603      	mov	r3, r0
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d001      	beq.n	800e6bc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800e6b8:	2301      	movs	r3, #1
 800e6ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6c2:	461a      	mov	r2, r3
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6ce:	461a      	mov	r2, r3
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6da:	461a      	mov	r2, r3
 800e6dc:	2300      	movs	r3, #0
 800e6de:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	613b      	str	r3, [r7, #16]
 800e6e4:	e043      	b.n	800e76e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e6e6:	693b      	ldr	r3, [r7, #16]
 800e6e8:	015a      	lsls	r2, r3, #5
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	4413      	add	r3, r2
 800e6ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e6f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e6fc:	d118      	bne.n	800e730 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800e6fe:	693b      	ldr	r3, [r7, #16]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d10a      	bne.n	800e71a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e704:	693b      	ldr	r3, [r7, #16]
 800e706:	015a      	lsls	r2, r3, #5
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	4413      	add	r3, r2
 800e70c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e710:	461a      	mov	r2, r3
 800e712:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e716:	6013      	str	r3, [r2, #0]
 800e718:	e013      	b.n	800e742 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e71a:	693b      	ldr	r3, [r7, #16]
 800e71c:	015a      	lsls	r2, r3, #5
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	4413      	add	r3, r2
 800e722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e726:	461a      	mov	r2, r3
 800e728:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e72c:	6013      	str	r3, [r2, #0]
 800e72e:	e008      	b.n	800e742 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e730:	693b      	ldr	r3, [r7, #16]
 800e732:	015a      	lsls	r2, r3, #5
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	4413      	add	r3, r2
 800e738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e73c:	461a      	mov	r2, r3
 800e73e:	2300      	movs	r3, #0
 800e740:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e742:	693b      	ldr	r3, [r7, #16]
 800e744:	015a      	lsls	r2, r3, #5
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	4413      	add	r3, r2
 800e74a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e74e:	461a      	mov	r2, r3
 800e750:	2300      	movs	r3, #0
 800e752:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e754:	693b      	ldr	r3, [r7, #16]
 800e756:	015a      	lsls	r2, r3, #5
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	4413      	add	r3, r2
 800e75c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e760:	461a      	mov	r2, r3
 800e762:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e766:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e768:	693b      	ldr	r3, [r7, #16]
 800e76a:	3301      	adds	r3, #1
 800e76c:	613b      	str	r3, [r7, #16]
 800e76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e770:	693a      	ldr	r2, [r7, #16]
 800e772:	429a      	cmp	r2, r3
 800e774:	d3b7      	bcc.n	800e6e6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e776:	2300      	movs	r3, #0
 800e778:	613b      	str	r3, [r7, #16]
 800e77a:	e043      	b.n	800e804 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e77c:	693b      	ldr	r3, [r7, #16]
 800e77e:	015a      	lsls	r2, r3, #5
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	4413      	add	r3, r2
 800e784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e78e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e792:	d118      	bne.n	800e7c6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800e794:	693b      	ldr	r3, [r7, #16]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d10a      	bne.n	800e7b0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e79a:	693b      	ldr	r3, [r7, #16]
 800e79c:	015a      	lsls	r2, r3, #5
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	4413      	add	r3, r2
 800e7a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7a6:	461a      	mov	r2, r3
 800e7a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e7ac:	6013      	str	r3, [r2, #0]
 800e7ae:	e013      	b.n	800e7d8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e7b0:	693b      	ldr	r3, [r7, #16]
 800e7b2:	015a      	lsls	r2, r3, #5
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	4413      	add	r3, r2
 800e7b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7bc:	461a      	mov	r2, r3
 800e7be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e7c2:	6013      	str	r3, [r2, #0]
 800e7c4:	e008      	b.n	800e7d8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e7c6:	693b      	ldr	r3, [r7, #16]
 800e7c8:	015a      	lsls	r2, r3, #5
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	4413      	add	r3, r2
 800e7ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7d2:	461a      	mov	r2, r3
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e7d8:	693b      	ldr	r3, [r7, #16]
 800e7da:	015a      	lsls	r2, r3, #5
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	4413      	add	r3, r2
 800e7e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7e4:	461a      	mov	r2, r3
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e7ea:	693b      	ldr	r3, [r7, #16]
 800e7ec:	015a      	lsls	r2, r3, #5
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	4413      	add	r3, r2
 800e7f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7f6:	461a      	mov	r2, r3
 800e7f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e7fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e7fe:	693b      	ldr	r3, [r7, #16]
 800e800:	3301      	adds	r3, #1
 800e802:	613b      	str	r3, [r7, #16]
 800e804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e806:	693a      	ldr	r2, [r7, #16]
 800e808:	429a      	cmp	r2, r3
 800e80a:	d3b7      	bcc.n	800e77c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e812:	691b      	ldr	r3, [r3, #16]
 800e814:	68fa      	ldr	r2, [r7, #12]
 800e816:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e81a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e81e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	2200      	movs	r2, #0
 800e824:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800e82c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e830:	2b00      	cmp	r3, #0
 800e832:	d105      	bne.n	800e840 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	699b      	ldr	r3, [r3, #24]
 800e838:	f043 0210 	orr.w	r2, r3, #16
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	699a      	ldr	r2, [r3, #24]
 800e844:	4b0e      	ldr	r3, [pc, #56]	; (800e880 <USB_DevInit+0x2b4>)
 800e846:	4313      	orrs	r3, r2
 800e848:	687a      	ldr	r2, [r7, #4]
 800e84a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e84c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d005      	beq.n	800e85e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	699b      	ldr	r3, [r3, #24]
 800e856:	f043 0208 	orr.w	r2, r3, #8
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e85e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e860:	2b01      	cmp	r3, #1
 800e862:	d105      	bne.n	800e870 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	699a      	ldr	r2, [r3, #24]
 800e868:	4b06      	ldr	r3, [pc, #24]	; (800e884 <USB_DevInit+0x2b8>)
 800e86a:	4313      	orrs	r3, r2
 800e86c:	687a      	ldr	r2, [r7, #4]
 800e86e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e870:	7dfb      	ldrb	r3, [r7, #23]
}
 800e872:	4618      	mov	r0, r3
 800e874:	3718      	adds	r7, #24
 800e876:	46bd      	mov	sp, r7
 800e878:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e87c:	b004      	add	sp, #16
 800e87e:	4770      	bx	lr
 800e880:	803c3800 	.word	0x803c3800
 800e884:	40000004 	.word	0x40000004

0800e888 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e888:	b480      	push	{r7}
 800e88a:	b085      	sub	sp, #20
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
 800e890:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800e892:	2300      	movs	r3, #0
 800e894:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	019b      	lsls	r3, r3, #6
 800e89a:	f043 0220 	orr.w	r2, r3, #32
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	3301      	adds	r3, #1
 800e8a6:	60fb      	str	r3, [r7, #12]
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	4a09      	ldr	r2, [pc, #36]	; (800e8d0 <USB_FlushTxFifo+0x48>)
 800e8ac:	4293      	cmp	r3, r2
 800e8ae:	d901      	bls.n	800e8b4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800e8b0:	2303      	movs	r3, #3
 800e8b2:	e006      	b.n	800e8c2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	691b      	ldr	r3, [r3, #16]
 800e8b8:	f003 0320 	and.w	r3, r3, #32
 800e8bc:	2b20      	cmp	r3, #32
 800e8be:	d0f0      	beq.n	800e8a2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800e8c0:	2300      	movs	r3, #0
}
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	3714      	adds	r7, #20
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8cc:	4770      	bx	lr
 800e8ce:	bf00      	nop
 800e8d0:	00030d40 	.word	0x00030d40

0800e8d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e8d4:	b480      	push	{r7}
 800e8d6:	b085      	sub	sp, #20
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800e8dc:	2300      	movs	r3, #0
 800e8de:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2210      	movs	r2, #16
 800e8e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	3301      	adds	r3, #1
 800e8ea:	60fb      	str	r3, [r7, #12]
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	4a09      	ldr	r2, [pc, #36]	; (800e914 <USB_FlushRxFifo+0x40>)
 800e8f0:	4293      	cmp	r3, r2
 800e8f2:	d901      	bls.n	800e8f8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800e8f4:	2303      	movs	r3, #3
 800e8f6:	e006      	b.n	800e906 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	691b      	ldr	r3, [r3, #16]
 800e8fc:	f003 0310 	and.w	r3, r3, #16
 800e900:	2b10      	cmp	r3, #16
 800e902:	d0f0      	beq.n	800e8e6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800e904:	2300      	movs	r3, #0
}
 800e906:	4618      	mov	r0, r3
 800e908:	3714      	adds	r7, #20
 800e90a:	46bd      	mov	sp, r7
 800e90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e910:	4770      	bx	lr
 800e912:	bf00      	nop
 800e914:	00030d40 	.word	0x00030d40

0800e918 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e918:	b480      	push	{r7}
 800e91a:	b085      	sub	sp, #20
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
 800e920:	460b      	mov	r3, r1
 800e922:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e92e:	681a      	ldr	r2, [r3, #0]
 800e930:	78fb      	ldrb	r3, [r7, #3]
 800e932:	68f9      	ldr	r1, [r7, #12]
 800e934:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e938:	4313      	orrs	r3, r2
 800e93a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e93c:	2300      	movs	r3, #0
}
 800e93e:	4618      	mov	r0, r3
 800e940:	3714      	adds	r7, #20
 800e942:	46bd      	mov	sp, r7
 800e944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e948:	4770      	bx	lr

0800e94a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800e94a:	b480      	push	{r7}
 800e94c:	b087      	sub	sp, #28
 800e94e:	af00      	add	r7, sp, #0
 800e950:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e956:	693b      	ldr	r3, [r7, #16]
 800e958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e95c:	689b      	ldr	r3, [r3, #8]
 800e95e:	f003 0306 	and.w	r3, r3, #6
 800e962:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d102      	bne.n	800e970 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e96a:	2300      	movs	r3, #0
 800e96c:	75fb      	strb	r3, [r7, #23]
 800e96e:	e00a      	b.n	800e986 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	2b02      	cmp	r3, #2
 800e974:	d002      	beq.n	800e97c <USB_GetDevSpeed+0x32>
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	2b06      	cmp	r3, #6
 800e97a:	d102      	bne.n	800e982 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e97c:	2302      	movs	r3, #2
 800e97e:	75fb      	strb	r3, [r7, #23]
 800e980:	e001      	b.n	800e986 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e982:	230f      	movs	r3, #15
 800e984:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e986:	7dfb      	ldrb	r3, [r7, #23]
}
 800e988:	4618      	mov	r0, r3
 800e98a:	371c      	adds	r7, #28
 800e98c:	46bd      	mov	sp, r7
 800e98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e992:	4770      	bx	lr

0800e994 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e994:	b480      	push	{r7}
 800e996:	b085      	sub	sp, #20
 800e998:	af00      	add	r7, sp, #0
 800e99a:	6078      	str	r0, [r7, #4]
 800e99c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	781b      	ldrb	r3, [r3, #0]
 800e9a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	785b      	ldrb	r3, [r3, #1]
 800e9ac:	2b01      	cmp	r3, #1
 800e9ae:	d139      	bne.n	800ea24 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9b6:	69da      	ldr	r2, [r3, #28]
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	781b      	ldrb	r3, [r3, #0]
 800e9bc:	f003 030f 	and.w	r3, r3, #15
 800e9c0:	2101      	movs	r1, #1
 800e9c2:	fa01 f303 	lsl.w	r3, r1, r3
 800e9c6:	b29b      	uxth	r3, r3
 800e9c8:	68f9      	ldr	r1, [r7, #12]
 800e9ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e9ce:	4313      	orrs	r3, r2
 800e9d0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e9d2:	68bb      	ldr	r3, [r7, #8]
 800e9d4:	015a      	lsls	r2, r3, #5
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	4413      	add	r3, r2
 800e9da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d153      	bne.n	800ea90 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e9e8:	68bb      	ldr	r3, [r7, #8]
 800e9ea:	015a      	lsls	r2, r3, #5
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	4413      	add	r3, r2
 800e9f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9f4:	681a      	ldr	r2, [r3, #0]
 800e9f6:	683b      	ldr	r3, [r7, #0]
 800e9f8:	689b      	ldr	r3, [r3, #8]
 800e9fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e9fe:	683b      	ldr	r3, [r7, #0]
 800ea00:	78db      	ldrb	r3, [r3, #3]
 800ea02:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ea04:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ea06:	68bb      	ldr	r3, [r7, #8]
 800ea08:	059b      	lsls	r3, r3, #22
 800ea0a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ea0c:	431a      	orrs	r2, r3
 800ea0e:	68bb      	ldr	r3, [r7, #8]
 800ea10:	0159      	lsls	r1, r3, #5
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	440b      	add	r3, r1
 800ea16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea1a:	4619      	mov	r1, r3
 800ea1c:	4b20      	ldr	r3, [pc, #128]	; (800eaa0 <USB_ActivateEndpoint+0x10c>)
 800ea1e:	4313      	orrs	r3, r2
 800ea20:	600b      	str	r3, [r1, #0]
 800ea22:	e035      	b.n	800ea90 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea2a:	69da      	ldr	r2, [r3, #28]
 800ea2c:	683b      	ldr	r3, [r7, #0]
 800ea2e:	781b      	ldrb	r3, [r3, #0]
 800ea30:	f003 030f 	and.w	r3, r3, #15
 800ea34:	2101      	movs	r1, #1
 800ea36:	fa01 f303 	lsl.w	r3, r1, r3
 800ea3a:	041b      	lsls	r3, r3, #16
 800ea3c:	68f9      	ldr	r1, [r7, #12]
 800ea3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ea42:	4313      	orrs	r3, r2
 800ea44:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ea46:	68bb      	ldr	r3, [r7, #8]
 800ea48:	015a      	lsls	r2, r3, #5
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	4413      	add	r3, r2
 800ea4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d119      	bne.n	800ea90 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ea5c:	68bb      	ldr	r3, [r7, #8]
 800ea5e:	015a      	lsls	r2, r3, #5
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	4413      	add	r3, r2
 800ea64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea68:	681a      	ldr	r2, [r3, #0]
 800ea6a:	683b      	ldr	r3, [r7, #0]
 800ea6c:	689b      	ldr	r3, [r3, #8]
 800ea6e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ea72:	683b      	ldr	r3, [r7, #0]
 800ea74:	78db      	ldrb	r3, [r3, #3]
 800ea76:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ea78:	430b      	orrs	r3, r1
 800ea7a:	431a      	orrs	r2, r3
 800ea7c:	68bb      	ldr	r3, [r7, #8]
 800ea7e:	0159      	lsls	r1, r3, #5
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	440b      	add	r3, r1
 800ea84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea88:	4619      	mov	r1, r3
 800ea8a:	4b05      	ldr	r3, [pc, #20]	; (800eaa0 <USB_ActivateEndpoint+0x10c>)
 800ea8c:	4313      	orrs	r3, r2
 800ea8e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ea90:	2300      	movs	r3, #0
}
 800ea92:	4618      	mov	r0, r3
 800ea94:	3714      	adds	r7, #20
 800ea96:	46bd      	mov	sp, r7
 800ea98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9c:	4770      	bx	lr
 800ea9e:	bf00      	nop
 800eaa0:	10008000 	.word	0x10008000

0800eaa4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800eaa4:	b480      	push	{r7}
 800eaa6:	b085      	sub	sp, #20
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
 800eaac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	781b      	ldrb	r3, [r3, #0]
 800eab6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800eab8:	683b      	ldr	r3, [r7, #0]
 800eaba:	785b      	ldrb	r3, [r3, #1]
 800eabc:	2b01      	cmp	r3, #1
 800eabe:	d161      	bne.n	800eb84 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800eac0:	68bb      	ldr	r3, [r7, #8]
 800eac2:	015a      	lsls	r2, r3, #5
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	4413      	add	r3, r2
 800eac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ead2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ead6:	d11f      	bne.n	800eb18 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ead8:	68bb      	ldr	r3, [r7, #8]
 800eada:	015a      	lsls	r2, r3, #5
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	4413      	add	r3, r2
 800eae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	68ba      	ldr	r2, [r7, #8]
 800eae8:	0151      	lsls	r1, r2, #5
 800eaea:	68fa      	ldr	r2, [r7, #12]
 800eaec:	440a      	add	r2, r1
 800eaee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eaf2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800eaf6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800eaf8:	68bb      	ldr	r3, [r7, #8]
 800eafa:	015a      	lsls	r2, r3, #5
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	4413      	add	r3, r2
 800eb00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	68ba      	ldr	r2, [r7, #8]
 800eb08:	0151      	lsls	r1, r2, #5
 800eb0a:	68fa      	ldr	r2, [r7, #12]
 800eb0c:	440a      	add	r2, r1
 800eb0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800eb16:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eb20:	683b      	ldr	r3, [r7, #0]
 800eb22:	781b      	ldrb	r3, [r3, #0]
 800eb24:	f003 030f 	and.w	r3, r3, #15
 800eb28:	2101      	movs	r1, #1
 800eb2a:	fa01 f303 	lsl.w	r3, r1, r3
 800eb2e:	b29b      	uxth	r3, r3
 800eb30:	43db      	mvns	r3, r3
 800eb32:	68f9      	ldr	r1, [r7, #12]
 800eb34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800eb38:	4013      	ands	r3, r2
 800eb3a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb42:	69da      	ldr	r2, [r3, #28]
 800eb44:	683b      	ldr	r3, [r7, #0]
 800eb46:	781b      	ldrb	r3, [r3, #0]
 800eb48:	f003 030f 	and.w	r3, r3, #15
 800eb4c:	2101      	movs	r1, #1
 800eb4e:	fa01 f303 	lsl.w	r3, r1, r3
 800eb52:	b29b      	uxth	r3, r3
 800eb54:	43db      	mvns	r3, r3
 800eb56:	68f9      	ldr	r1, [r7, #12]
 800eb58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800eb5c:	4013      	ands	r3, r2
 800eb5e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800eb60:	68bb      	ldr	r3, [r7, #8]
 800eb62:	015a      	lsls	r2, r3, #5
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	4413      	add	r3, r2
 800eb68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb6c:	681a      	ldr	r2, [r3, #0]
 800eb6e:	68bb      	ldr	r3, [r7, #8]
 800eb70:	0159      	lsls	r1, r3, #5
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	440b      	add	r3, r1
 800eb76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb7a:	4619      	mov	r1, r3
 800eb7c:	4b35      	ldr	r3, [pc, #212]	; (800ec54 <USB_DeactivateEndpoint+0x1b0>)
 800eb7e:	4013      	ands	r3, r2
 800eb80:	600b      	str	r3, [r1, #0]
 800eb82:	e060      	b.n	800ec46 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800eb84:	68bb      	ldr	r3, [r7, #8]
 800eb86:	015a      	lsls	r2, r3, #5
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	4413      	add	r3, r2
 800eb8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800eb96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800eb9a:	d11f      	bne.n	800ebdc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800eb9c:	68bb      	ldr	r3, [r7, #8]
 800eb9e:	015a      	lsls	r2, r3, #5
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	4413      	add	r3, r2
 800eba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	68ba      	ldr	r2, [r7, #8]
 800ebac:	0151      	lsls	r1, r2, #5
 800ebae:	68fa      	ldr	r2, [r7, #12]
 800ebb0:	440a      	add	r2, r1
 800ebb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ebb6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ebba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ebbc:	68bb      	ldr	r3, [r7, #8]
 800ebbe:	015a      	lsls	r2, r3, #5
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	4413      	add	r3, r2
 800ebc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	68ba      	ldr	r2, [r7, #8]
 800ebcc:	0151      	lsls	r1, r2, #5
 800ebce:	68fa      	ldr	r2, [r7, #12]
 800ebd0:	440a      	add	r2, r1
 800ebd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ebd6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ebda:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebe2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	781b      	ldrb	r3, [r3, #0]
 800ebe8:	f003 030f 	and.w	r3, r3, #15
 800ebec:	2101      	movs	r1, #1
 800ebee:	fa01 f303 	lsl.w	r3, r1, r3
 800ebf2:	041b      	lsls	r3, r3, #16
 800ebf4:	43db      	mvns	r3, r3
 800ebf6:	68f9      	ldr	r1, [r7, #12]
 800ebf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ebfc:	4013      	ands	r3, r2
 800ebfe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec06:	69da      	ldr	r2, [r3, #28]
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	781b      	ldrb	r3, [r3, #0]
 800ec0c:	f003 030f 	and.w	r3, r3, #15
 800ec10:	2101      	movs	r1, #1
 800ec12:	fa01 f303 	lsl.w	r3, r1, r3
 800ec16:	041b      	lsls	r3, r3, #16
 800ec18:	43db      	mvns	r3, r3
 800ec1a:	68f9      	ldr	r1, [r7, #12]
 800ec1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ec20:	4013      	ands	r3, r2
 800ec22:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ec24:	68bb      	ldr	r3, [r7, #8]
 800ec26:	015a      	lsls	r2, r3, #5
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	4413      	add	r3, r2
 800ec2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec30:	681a      	ldr	r2, [r3, #0]
 800ec32:	68bb      	ldr	r3, [r7, #8]
 800ec34:	0159      	lsls	r1, r3, #5
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	440b      	add	r3, r1
 800ec3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec3e:	4619      	mov	r1, r3
 800ec40:	4b05      	ldr	r3, [pc, #20]	; (800ec58 <USB_DeactivateEndpoint+0x1b4>)
 800ec42:	4013      	ands	r3, r2
 800ec44:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ec46:	2300      	movs	r3, #0
}
 800ec48:	4618      	mov	r0, r3
 800ec4a:	3714      	adds	r7, #20
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec52:	4770      	bx	lr
 800ec54:	ec337800 	.word	0xec337800
 800ec58:	eff37800 	.word	0xeff37800

0800ec5c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b08a      	sub	sp, #40	; 0x28
 800ec60:	af02      	add	r7, sp, #8
 800ec62:	60f8      	str	r0, [r7, #12]
 800ec64:	60b9      	str	r1, [r7, #8]
 800ec66:	4613      	mov	r3, r2
 800ec68:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ec6e:	68bb      	ldr	r3, [r7, #8]
 800ec70:	781b      	ldrb	r3, [r3, #0]
 800ec72:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ec74:	68bb      	ldr	r3, [r7, #8]
 800ec76:	785b      	ldrb	r3, [r3, #1]
 800ec78:	2b01      	cmp	r3, #1
 800ec7a:	f040 8163 	bne.w	800ef44 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ec7e:	68bb      	ldr	r3, [r7, #8]
 800ec80:	695b      	ldr	r3, [r3, #20]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d132      	bne.n	800ecec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ec86:	69bb      	ldr	r3, [r7, #24]
 800ec88:	015a      	lsls	r2, r3, #5
 800ec8a:	69fb      	ldr	r3, [r7, #28]
 800ec8c:	4413      	add	r3, r2
 800ec8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec92:	691a      	ldr	r2, [r3, #16]
 800ec94:	69bb      	ldr	r3, [r7, #24]
 800ec96:	0159      	lsls	r1, r3, #5
 800ec98:	69fb      	ldr	r3, [r7, #28]
 800ec9a:	440b      	add	r3, r1
 800ec9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eca0:	4619      	mov	r1, r3
 800eca2:	4ba5      	ldr	r3, [pc, #660]	; (800ef38 <USB_EPStartXfer+0x2dc>)
 800eca4:	4013      	ands	r3, r2
 800eca6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800eca8:	69bb      	ldr	r3, [r7, #24]
 800ecaa:	015a      	lsls	r2, r3, #5
 800ecac:	69fb      	ldr	r3, [r7, #28]
 800ecae:	4413      	add	r3, r2
 800ecb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecb4:	691b      	ldr	r3, [r3, #16]
 800ecb6:	69ba      	ldr	r2, [r7, #24]
 800ecb8:	0151      	lsls	r1, r2, #5
 800ecba:	69fa      	ldr	r2, [r7, #28]
 800ecbc:	440a      	add	r2, r1
 800ecbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ecc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ecc6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ecc8:	69bb      	ldr	r3, [r7, #24]
 800ecca:	015a      	lsls	r2, r3, #5
 800eccc:	69fb      	ldr	r3, [r7, #28]
 800ecce:	4413      	add	r3, r2
 800ecd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecd4:	691a      	ldr	r2, [r3, #16]
 800ecd6:	69bb      	ldr	r3, [r7, #24]
 800ecd8:	0159      	lsls	r1, r3, #5
 800ecda:	69fb      	ldr	r3, [r7, #28]
 800ecdc:	440b      	add	r3, r1
 800ecde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ece2:	4619      	mov	r1, r3
 800ece4:	4b95      	ldr	r3, [pc, #596]	; (800ef3c <USB_EPStartXfer+0x2e0>)
 800ece6:	4013      	ands	r3, r2
 800ece8:	610b      	str	r3, [r1, #16]
 800ecea:	e074      	b.n	800edd6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ecec:	69bb      	ldr	r3, [r7, #24]
 800ecee:	015a      	lsls	r2, r3, #5
 800ecf0:	69fb      	ldr	r3, [r7, #28]
 800ecf2:	4413      	add	r3, r2
 800ecf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecf8:	691a      	ldr	r2, [r3, #16]
 800ecfa:	69bb      	ldr	r3, [r7, #24]
 800ecfc:	0159      	lsls	r1, r3, #5
 800ecfe:	69fb      	ldr	r3, [r7, #28]
 800ed00:	440b      	add	r3, r1
 800ed02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed06:	4619      	mov	r1, r3
 800ed08:	4b8c      	ldr	r3, [pc, #560]	; (800ef3c <USB_EPStartXfer+0x2e0>)
 800ed0a:	4013      	ands	r3, r2
 800ed0c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ed0e:	69bb      	ldr	r3, [r7, #24]
 800ed10:	015a      	lsls	r2, r3, #5
 800ed12:	69fb      	ldr	r3, [r7, #28]
 800ed14:	4413      	add	r3, r2
 800ed16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed1a:	691a      	ldr	r2, [r3, #16]
 800ed1c:	69bb      	ldr	r3, [r7, #24]
 800ed1e:	0159      	lsls	r1, r3, #5
 800ed20:	69fb      	ldr	r3, [r7, #28]
 800ed22:	440b      	add	r3, r1
 800ed24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed28:	4619      	mov	r1, r3
 800ed2a:	4b83      	ldr	r3, [pc, #524]	; (800ef38 <USB_EPStartXfer+0x2dc>)
 800ed2c:	4013      	ands	r3, r2
 800ed2e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ed30:	69bb      	ldr	r3, [r7, #24]
 800ed32:	015a      	lsls	r2, r3, #5
 800ed34:	69fb      	ldr	r3, [r7, #28]
 800ed36:	4413      	add	r3, r2
 800ed38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed3c:	691a      	ldr	r2, [r3, #16]
 800ed3e:	68bb      	ldr	r3, [r7, #8]
 800ed40:	6959      	ldr	r1, [r3, #20]
 800ed42:	68bb      	ldr	r3, [r7, #8]
 800ed44:	689b      	ldr	r3, [r3, #8]
 800ed46:	440b      	add	r3, r1
 800ed48:	1e59      	subs	r1, r3, #1
 800ed4a:	68bb      	ldr	r3, [r7, #8]
 800ed4c:	689b      	ldr	r3, [r3, #8]
 800ed4e:	fbb1 f3f3 	udiv	r3, r1, r3
 800ed52:	04d9      	lsls	r1, r3, #19
 800ed54:	4b7a      	ldr	r3, [pc, #488]	; (800ef40 <USB_EPStartXfer+0x2e4>)
 800ed56:	400b      	ands	r3, r1
 800ed58:	69b9      	ldr	r1, [r7, #24]
 800ed5a:	0148      	lsls	r0, r1, #5
 800ed5c:	69f9      	ldr	r1, [r7, #28]
 800ed5e:	4401      	add	r1, r0
 800ed60:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ed64:	4313      	orrs	r3, r2
 800ed66:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ed68:	69bb      	ldr	r3, [r7, #24]
 800ed6a:	015a      	lsls	r2, r3, #5
 800ed6c:	69fb      	ldr	r3, [r7, #28]
 800ed6e:	4413      	add	r3, r2
 800ed70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed74:	691a      	ldr	r2, [r3, #16]
 800ed76:	68bb      	ldr	r3, [r7, #8]
 800ed78:	695b      	ldr	r3, [r3, #20]
 800ed7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ed7e:	69b9      	ldr	r1, [r7, #24]
 800ed80:	0148      	lsls	r0, r1, #5
 800ed82:	69f9      	ldr	r1, [r7, #28]
 800ed84:	4401      	add	r1, r0
 800ed86:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ed8a:	4313      	orrs	r3, r2
 800ed8c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ed8e:	68bb      	ldr	r3, [r7, #8]
 800ed90:	78db      	ldrb	r3, [r3, #3]
 800ed92:	2b01      	cmp	r3, #1
 800ed94:	d11f      	bne.n	800edd6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ed96:	69bb      	ldr	r3, [r7, #24]
 800ed98:	015a      	lsls	r2, r3, #5
 800ed9a:	69fb      	ldr	r3, [r7, #28]
 800ed9c:	4413      	add	r3, r2
 800ed9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eda2:	691b      	ldr	r3, [r3, #16]
 800eda4:	69ba      	ldr	r2, [r7, #24]
 800eda6:	0151      	lsls	r1, r2, #5
 800eda8:	69fa      	ldr	r2, [r7, #28]
 800edaa:	440a      	add	r2, r1
 800edac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800edb0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800edb4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800edb6:	69bb      	ldr	r3, [r7, #24]
 800edb8:	015a      	lsls	r2, r3, #5
 800edba:	69fb      	ldr	r3, [r7, #28]
 800edbc:	4413      	add	r3, r2
 800edbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800edc2:	691b      	ldr	r3, [r3, #16]
 800edc4:	69ba      	ldr	r2, [r7, #24]
 800edc6:	0151      	lsls	r1, r2, #5
 800edc8:	69fa      	ldr	r2, [r7, #28]
 800edca:	440a      	add	r2, r1
 800edcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800edd0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800edd4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800edd6:	79fb      	ldrb	r3, [r7, #7]
 800edd8:	2b01      	cmp	r3, #1
 800edda:	d14b      	bne.n	800ee74 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800eddc:	68bb      	ldr	r3, [r7, #8]
 800edde:	691b      	ldr	r3, [r3, #16]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d009      	beq.n	800edf8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ede4:	69bb      	ldr	r3, [r7, #24]
 800ede6:	015a      	lsls	r2, r3, #5
 800ede8:	69fb      	ldr	r3, [r7, #28]
 800edea:	4413      	add	r3, r2
 800edec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800edf0:	461a      	mov	r2, r3
 800edf2:	68bb      	ldr	r3, [r7, #8]
 800edf4:	691b      	ldr	r3, [r3, #16]
 800edf6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800edf8:	68bb      	ldr	r3, [r7, #8]
 800edfa:	78db      	ldrb	r3, [r3, #3]
 800edfc:	2b01      	cmp	r3, #1
 800edfe:	d128      	bne.n	800ee52 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ee00:	69fb      	ldr	r3, [r7, #28]
 800ee02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee06:	689b      	ldr	r3, [r3, #8]
 800ee08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d110      	bne.n	800ee32 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ee10:	69bb      	ldr	r3, [r7, #24]
 800ee12:	015a      	lsls	r2, r3, #5
 800ee14:	69fb      	ldr	r3, [r7, #28]
 800ee16:	4413      	add	r3, r2
 800ee18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	69ba      	ldr	r2, [r7, #24]
 800ee20:	0151      	lsls	r1, r2, #5
 800ee22:	69fa      	ldr	r2, [r7, #28]
 800ee24:	440a      	add	r2, r1
 800ee26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ee2e:	6013      	str	r3, [r2, #0]
 800ee30:	e00f      	b.n	800ee52 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ee32:	69bb      	ldr	r3, [r7, #24]
 800ee34:	015a      	lsls	r2, r3, #5
 800ee36:	69fb      	ldr	r3, [r7, #28]
 800ee38:	4413      	add	r3, r2
 800ee3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	69ba      	ldr	r2, [r7, #24]
 800ee42:	0151      	lsls	r1, r2, #5
 800ee44:	69fa      	ldr	r2, [r7, #28]
 800ee46:	440a      	add	r2, r1
 800ee48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ee50:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ee52:	69bb      	ldr	r3, [r7, #24]
 800ee54:	015a      	lsls	r2, r3, #5
 800ee56:	69fb      	ldr	r3, [r7, #28]
 800ee58:	4413      	add	r3, r2
 800ee5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	69ba      	ldr	r2, [r7, #24]
 800ee62:	0151      	lsls	r1, r2, #5
 800ee64:	69fa      	ldr	r2, [r7, #28]
 800ee66:	440a      	add	r2, r1
 800ee68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee6c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ee70:	6013      	str	r3, [r2, #0]
 800ee72:	e133      	b.n	800f0dc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ee74:	69bb      	ldr	r3, [r7, #24]
 800ee76:	015a      	lsls	r2, r3, #5
 800ee78:	69fb      	ldr	r3, [r7, #28]
 800ee7a:	4413      	add	r3, r2
 800ee7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	69ba      	ldr	r2, [r7, #24]
 800ee84:	0151      	lsls	r1, r2, #5
 800ee86:	69fa      	ldr	r2, [r7, #28]
 800ee88:	440a      	add	r2, r1
 800ee8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ee92:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ee94:	68bb      	ldr	r3, [r7, #8]
 800ee96:	78db      	ldrb	r3, [r3, #3]
 800ee98:	2b01      	cmp	r3, #1
 800ee9a:	d015      	beq.n	800eec8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ee9c:	68bb      	ldr	r3, [r7, #8]
 800ee9e:	695b      	ldr	r3, [r3, #20]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	f000 811b 	beq.w	800f0dc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800eea6:	69fb      	ldr	r3, [r7, #28]
 800eea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eeac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eeae:	68bb      	ldr	r3, [r7, #8]
 800eeb0:	781b      	ldrb	r3, [r3, #0]
 800eeb2:	f003 030f 	and.w	r3, r3, #15
 800eeb6:	2101      	movs	r1, #1
 800eeb8:	fa01 f303 	lsl.w	r3, r1, r3
 800eebc:	69f9      	ldr	r1, [r7, #28]
 800eebe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800eec2:	4313      	orrs	r3, r2
 800eec4:	634b      	str	r3, [r1, #52]	; 0x34
 800eec6:	e109      	b.n	800f0dc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800eec8:	69fb      	ldr	r3, [r7, #28]
 800eeca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eece:	689b      	ldr	r3, [r3, #8]
 800eed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d110      	bne.n	800eefa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800eed8:	69bb      	ldr	r3, [r7, #24]
 800eeda:	015a      	lsls	r2, r3, #5
 800eedc:	69fb      	ldr	r3, [r7, #28]
 800eede:	4413      	add	r3, r2
 800eee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	69ba      	ldr	r2, [r7, #24]
 800eee8:	0151      	lsls	r1, r2, #5
 800eeea:	69fa      	ldr	r2, [r7, #28]
 800eeec:	440a      	add	r2, r1
 800eeee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eef2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800eef6:	6013      	str	r3, [r2, #0]
 800eef8:	e00f      	b.n	800ef1a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800eefa:	69bb      	ldr	r3, [r7, #24]
 800eefc:	015a      	lsls	r2, r3, #5
 800eefe:	69fb      	ldr	r3, [r7, #28]
 800ef00:	4413      	add	r3, r2
 800ef02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	69ba      	ldr	r2, [r7, #24]
 800ef0a:	0151      	lsls	r1, r2, #5
 800ef0c:	69fa      	ldr	r2, [r7, #28]
 800ef0e:	440a      	add	r2, r1
 800ef10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ef18:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ef1a:	68bb      	ldr	r3, [r7, #8]
 800ef1c:	68d9      	ldr	r1, [r3, #12]
 800ef1e:	68bb      	ldr	r3, [r7, #8]
 800ef20:	781a      	ldrb	r2, [r3, #0]
 800ef22:	68bb      	ldr	r3, [r7, #8]
 800ef24:	695b      	ldr	r3, [r3, #20]
 800ef26:	b298      	uxth	r0, r3
 800ef28:	79fb      	ldrb	r3, [r7, #7]
 800ef2a:	9300      	str	r3, [sp, #0]
 800ef2c:	4603      	mov	r3, r0
 800ef2e:	68f8      	ldr	r0, [r7, #12]
 800ef30:	f000 fa38 	bl	800f3a4 <USB_WritePacket>
 800ef34:	e0d2      	b.n	800f0dc <USB_EPStartXfer+0x480>
 800ef36:	bf00      	nop
 800ef38:	e007ffff 	.word	0xe007ffff
 800ef3c:	fff80000 	.word	0xfff80000
 800ef40:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ef44:	69bb      	ldr	r3, [r7, #24]
 800ef46:	015a      	lsls	r2, r3, #5
 800ef48:	69fb      	ldr	r3, [r7, #28]
 800ef4a:	4413      	add	r3, r2
 800ef4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef50:	691a      	ldr	r2, [r3, #16]
 800ef52:	69bb      	ldr	r3, [r7, #24]
 800ef54:	0159      	lsls	r1, r3, #5
 800ef56:	69fb      	ldr	r3, [r7, #28]
 800ef58:	440b      	add	r3, r1
 800ef5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef5e:	4619      	mov	r1, r3
 800ef60:	4b61      	ldr	r3, [pc, #388]	; (800f0e8 <USB_EPStartXfer+0x48c>)
 800ef62:	4013      	ands	r3, r2
 800ef64:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ef66:	69bb      	ldr	r3, [r7, #24]
 800ef68:	015a      	lsls	r2, r3, #5
 800ef6a:	69fb      	ldr	r3, [r7, #28]
 800ef6c:	4413      	add	r3, r2
 800ef6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef72:	691a      	ldr	r2, [r3, #16]
 800ef74:	69bb      	ldr	r3, [r7, #24]
 800ef76:	0159      	lsls	r1, r3, #5
 800ef78:	69fb      	ldr	r3, [r7, #28]
 800ef7a:	440b      	add	r3, r1
 800ef7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef80:	4619      	mov	r1, r3
 800ef82:	4b5a      	ldr	r3, [pc, #360]	; (800f0ec <USB_EPStartXfer+0x490>)
 800ef84:	4013      	ands	r3, r2
 800ef86:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800ef88:	68bb      	ldr	r3, [r7, #8]
 800ef8a:	695b      	ldr	r3, [r3, #20]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d123      	bne.n	800efd8 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ef90:	69bb      	ldr	r3, [r7, #24]
 800ef92:	015a      	lsls	r2, r3, #5
 800ef94:	69fb      	ldr	r3, [r7, #28]
 800ef96:	4413      	add	r3, r2
 800ef98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef9c:	691a      	ldr	r2, [r3, #16]
 800ef9e:	68bb      	ldr	r3, [r7, #8]
 800efa0:	689b      	ldr	r3, [r3, #8]
 800efa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800efa6:	69b9      	ldr	r1, [r7, #24]
 800efa8:	0148      	lsls	r0, r1, #5
 800efaa:	69f9      	ldr	r1, [r7, #28]
 800efac:	4401      	add	r1, r0
 800efae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800efb2:	4313      	orrs	r3, r2
 800efb4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800efb6:	69bb      	ldr	r3, [r7, #24]
 800efb8:	015a      	lsls	r2, r3, #5
 800efba:	69fb      	ldr	r3, [r7, #28]
 800efbc:	4413      	add	r3, r2
 800efbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efc2:	691b      	ldr	r3, [r3, #16]
 800efc4:	69ba      	ldr	r2, [r7, #24]
 800efc6:	0151      	lsls	r1, r2, #5
 800efc8:	69fa      	ldr	r2, [r7, #28]
 800efca:	440a      	add	r2, r1
 800efcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800efd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800efd4:	6113      	str	r3, [r2, #16]
 800efd6:	e033      	b.n	800f040 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800efd8:	68bb      	ldr	r3, [r7, #8]
 800efda:	695a      	ldr	r2, [r3, #20]
 800efdc:	68bb      	ldr	r3, [r7, #8]
 800efde:	689b      	ldr	r3, [r3, #8]
 800efe0:	4413      	add	r3, r2
 800efe2:	1e5a      	subs	r2, r3, #1
 800efe4:	68bb      	ldr	r3, [r7, #8]
 800efe6:	689b      	ldr	r3, [r3, #8]
 800efe8:	fbb2 f3f3 	udiv	r3, r2, r3
 800efec:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800efee:	69bb      	ldr	r3, [r7, #24]
 800eff0:	015a      	lsls	r2, r3, #5
 800eff2:	69fb      	ldr	r3, [r7, #28]
 800eff4:	4413      	add	r3, r2
 800eff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800effa:	691a      	ldr	r2, [r3, #16]
 800effc:	8afb      	ldrh	r3, [r7, #22]
 800effe:	04d9      	lsls	r1, r3, #19
 800f000:	4b3b      	ldr	r3, [pc, #236]	; (800f0f0 <USB_EPStartXfer+0x494>)
 800f002:	400b      	ands	r3, r1
 800f004:	69b9      	ldr	r1, [r7, #24]
 800f006:	0148      	lsls	r0, r1, #5
 800f008:	69f9      	ldr	r1, [r7, #28]
 800f00a:	4401      	add	r1, r0
 800f00c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f010:	4313      	orrs	r3, r2
 800f012:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800f014:	69bb      	ldr	r3, [r7, #24]
 800f016:	015a      	lsls	r2, r3, #5
 800f018:	69fb      	ldr	r3, [r7, #28]
 800f01a:	4413      	add	r3, r2
 800f01c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f020:	691a      	ldr	r2, [r3, #16]
 800f022:	68bb      	ldr	r3, [r7, #8]
 800f024:	689b      	ldr	r3, [r3, #8]
 800f026:	8af9      	ldrh	r1, [r7, #22]
 800f028:	fb01 f303 	mul.w	r3, r1, r3
 800f02c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f030:	69b9      	ldr	r1, [r7, #24]
 800f032:	0148      	lsls	r0, r1, #5
 800f034:	69f9      	ldr	r1, [r7, #28]
 800f036:	4401      	add	r1, r0
 800f038:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f03c:	4313      	orrs	r3, r2
 800f03e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f040:	79fb      	ldrb	r3, [r7, #7]
 800f042:	2b01      	cmp	r3, #1
 800f044:	d10d      	bne.n	800f062 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f046:	68bb      	ldr	r3, [r7, #8]
 800f048:	68db      	ldr	r3, [r3, #12]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d009      	beq.n	800f062 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f04e:	68bb      	ldr	r3, [r7, #8]
 800f050:	68d9      	ldr	r1, [r3, #12]
 800f052:	69bb      	ldr	r3, [r7, #24]
 800f054:	015a      	lsls	r2, r3, #5
 800f056:	69fb      	ldr	r3, [r7, #28]
 800f058:	4413      	add	r3, r2
 800f05a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f05e:	460a      	mov	r2, r1
 800f060:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f062:	68bb      	ldr	r3, [r7, #8]
 800f064:	78db      	ldrb	r3, [r3, #3]
 800f066:	2b01      	cmp	r3, #1
 800f068:	d128      	bne.n	800f0bc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f06a:	69fb      	ldr	r3, [r7, #28]
 800f06c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f070:	689b      	ldr	r3, [r3, #8]
 800f072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f076:	2b00      	cmp	r3, #0
 800f078:	d110      	bne.n	800f09c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f07a:	69bb      	ldr	r3, [r7, #24]
 800f07c:	015a      	lsls	r2, r3, #5
 800f07e:	69fb      	ldr	r3, [r7, #28]
 800f080:	4413      	add	r3, r2
 800f082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	69ba      	ldr	r2, [r7, #24]
 800f08a:	0151      	lsls	r1, r2, #5
 800f08c:	69fa      	ldr	r2, [r7, #28]
 800f08e:	440a      	add	r2, r1
 800f090:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f094:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f098:	6013      	str	r3, [r2, #0]
 800f09a:	e00f      	b.n	800f0bc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f09c:	69bb      	ldr	r3, [r7, #24]
 800f09e:	015a      	lsls	r2, r3, #5
 800f0a0:	69fb      	ldr	r3, [r7, #28]
 800f0a2:	4413      	add	r3, r2
 800f0a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	69ba      	ldr	r2, [r7, #24]
 800f0ac:	0151      	lsls	r1, r2, #5
 800f0ae:	69fa      	ldr	r2, [r7, #28]
 800f0b0:	440a      	add	r2, r1
 800f0b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f0b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f0ba:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f0bc:	69bb      	ldr	r3, [r7, #24]
 800f0be:	015a      	lsls	r2, r3, #5
 800f0c0:	69fb      	ldr	r3, [r7, #28]
 800f0c2:	4413      	add	r3, r2
 800f0c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	69ba      	ldr	r2, [r7, #24]
 800f0cc:	0151      	lsls	r1, r2, #5
 800f0ce:	69fa      	ldr	r2, [r7, #28]
 800f0d0:	440a      	add	r2, r1
 800f0d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f0d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f0da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f0dc:	2300      	movs	r3, #0
}
 800f0de:	4618      	mov	r0, r3
 800f0e0:	3720      	adds	r7, #32
 800f0e2:	46bd      	mov	sp, r7
 800f0e4:	bd80      	pop	{r7, pc}
 800f0e6:	bf00      	nop
 800f0e8:	fff80000 	.word	0xfff80000
 800f0ec:	e007ffff 	.word	0xe007ffff
 800f0f0:	1ff80000 	.word	0x1ff80000

0800f0f4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f0f4:	b480      	push	{r7}
 800f0f6:	b087      	sub	sp, #28
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	60f8      	str	r0, [r7, #12]
 800f0fc:	60b9      	str	r1, [r7, #8]
 800f0fe:	4613      	mov	r3, r2
 800f100:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800f106:	68bb      	ldr	r3, [r7, #8]
 800f108:	781b      	ldrb	r3, [r3, #0]
 800f10a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f10c:	68bb      	ldr	r3, [r7, #8]
 800f10e:	785b      	ldrb	r3, [r3, #1]
 800f110:	2b01      	cmp	r3, #1
 800f112:	f040 80cd 	bne.w	800f2b0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f116:	68bb      	ldr	r3, [r7, #8]
 800f118:	695b      	ldr	r3, [r3, #20]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d132      	bne.n	800f184 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f11e:	693b      	ldr	r3, [r7, #16]
 800f120:	015a      	lsls	r2, r3, #5
 800f122:	697b      	ldr	r3, [r7, #20]
 800f124:	4413      	add	r3, r2
 800f126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f12a:	691a      	ldr	r2, [r3, #16]
 800f12c:	693b      	ldr	r3, [r7, #16]
 800f12e:	0159      	lsls	r1, r3, #5
 800f130:	697b      	ldr	r3, [r7, #20]
 800f132:	440b      	add	r3, r1
 800f134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f138:	4619      	mov	r1, r3
 800f13a:	4b98      	ldr	r3, [pc, #608]	; (800f39c <USB_EP0StartXfer+0x2a8>)
 800f13c:	4013      	ands	r3, r2
 800f13e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f140:	693b      	ldr	r3, [r7, #16]
 800f142:	015a      	lsls	r2, r3, #5
 800f144:	697b      	ldr	r3, [r7, #20]
 800f146:	4413      	add	r3, r2
 800f148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f14c:	691b      	ldr	r3, [r3, #16]
 800f14e:	693a      	ldr	r2, [r7, #16]
 800f150:	0151      	lsls	r1, r2, #5
 800f152:	697a      	ldr	r2, [r7, #20]
 800f154:	440a      	add	r2, r1
 800f156:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f15a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f15e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f160:	693b      	ldr	r3, [r7, #16]
 800f162:	015a      	lsls	r2, r3, #5
 800f164:	697b      	ldr	r3, [r7, #20]
 800f166:	4413      	add	r3, r2
 800f168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f16c:	691a      	ldr	r2, [r3, #16]
 800f16e:	693b      	ldr	r3, [r7, #16]
 800f170:	0159      	lsls	r1, r3, #5
 800f172:	697b      	ldr	r3, [r7, #20]
 800f174:	440b      	add	r3, r1
 800f176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f17a:	4619      	mov	r1, r3
 800f17c:	4b88      	ldr	r3, [pc, #544]	; (800f3a0 <USB_EP0StartXfer+0x2ac>)
 800f17e:	4013      	ands	r3, r2
 800f180:	610b      	str	r3, [r1, #16]
 800f182:	e04e      	b.n	800f222 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f184:	693b      	ldr	r3, [r7, #16]
 800f186:	015a      	lsls	r2, r3, #5
 800f188:	697b      	ldr	r3, [r7, #20]
 800f18a:	4413      	add	r3, r2
 800f18c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f190:	691a      	ldr	r2, [r3, #16]
 800f192:	693b      	ldr	r3, [r7, #16]
 800f194:	0159      	lsls	r1, r3, #5
 800f196:	697b      	ldr	r3, [r7, #20]
 800f198:	440b      	add	r3, r1
 800f19a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f19e:	4619      	mov	r1, r3
 800f1a0:	4b7f      	ldr	r3, [pc, #508]	; (800f3a0 <USB_EP0StartXfer+0x2ac>)
 800f1a2:	4013      	ands	r3, r2
 800f1a4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f1a6:	693b      	ldr	r3, [r7, #16]
 800f1a8:	015a      	lsls	r2, r3, #5
 800f1aa:	697b      	ldr	r3, [r7, #20]
 800f1ac:	4413      	add	r3, r2
 800f1ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1b2:	691a      	ldr	r2, [r3, #16]
 800f1b4:	693b      	ldr	r3, [r7, #16]
 800f1b6:	0159      	lsls	r1, r3, #5
 800f1b8:	697b      	ldr	r3, [r7, #20]
 800f1ba:	440b      	add	r3, r1
 800f1bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1c0:	4619      	mov	r1, r3
 800f1c2:	4b76      	ldr	r3, [pc, #472]	; (800f39c <USB_EP0StartXfer+0x2a8>)
 800f1c4:	4013      	ands	r3, r2
 800f1c6:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800f1c8:	68bb      	ldr	r3, [r7, #8]
 800f1ca:	695a      	ldr	r2, [r3, #20]
 800f1cc:	68bb      	ldr	r3, [r7, #8]
 800f1ce:	689b      	ldr	r3, [r3, #8]
 800f1d0:	429a      	cmp	r2, r3
 800f1d2:	d903      	bls.n	800f1dc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800f1d4:	68bb      	ldr	r3, [r7, #8]
 800f1d6:	689a      	ldr	r2, [r3, #8]
 800f1d8:	68bb      	ldr	r3, [r7, #8]
 800f1da:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f1dc:	693b      	ldr	r3, [r7, #16]
 800f1de:	015a      	lsls	r2, r3, #5
 800f1e0:	697b      	ldr	r3, [r7, #20]
 800f1e2:	4413      	add	r3, r2
 800f1e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1e8:	691b      	ldr	r3, [r3, #16]
 800f1ea:	693a      	ldr	r2, [r7, #16]
 800f1ec:	0151      	lsls	r1, r2, #5
 800f1ee:	697a      	ldr	r2, [r7, #20]
 800f1f0:	440a      	add	r2, r1
 800f1f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f1f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f1fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f1fc:	693b      	ldr	r3, [r7, #16]
 800f1fe:	015a      	lsls	r2, r3, #5
 800f200:	697b      	ldr	r3, [r7, #20]
 800f202:	4413      	add	r3, r2
 800f204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f208:	691a      	ldr	r2, [r3, #16]
 800f20a:	68bb      	ldr	r3, [r7, #8]
 800f20c:	695b      	ldr	r3, [r3, #20]
 800f20e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f212:	6939      	ldr	r1, [r7, #16]
 800f214:	0148      	lsls	r0, r1, #5
 800f216:	6979      	ldr	r1, [r7, #20]
 800f218:	4401      	add	r1, r0
 800f21a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f21e:	4313      	orrs	r3, r2
 800f220:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f222:	79fb      	ldrb	r3, [r7, #7]
 800f224:	2b01      	cmp	r3, #1
 800f226:	d11e      	bne.n	800f266 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f228:	68bb      	ldr	r3, [r7, #8]
 800f22a:	691b      	ldr	r3, [r3, #16]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d009      	beq.n	800f244 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f230:	693b      	ldr	r3, [r7, #16]
 800f232:	015a      	lsls	r2, r3, #5
 800f234:	697b      	ldr	r3, [r7, #20]
 800f236:	4413      	add	r3, r2
 800f238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f23c:	461a      	mov	r2, r3
 800f23e:	68bb      	ldr	r3, [r7, #8]
 800f240:	691b      	ldr	r3, [r3, #16]
 800f242:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f244:	693b      	ldr	r3, [r7, #16]
 800f246:	015a      	lsls	r2, r3, #5
 800f248:	697b      	ldr	r3, [r7, #20]
 800f24a:	4413      	add	r3, r2
 800f24c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	693a      	ldr	r2, [r7, #16]
 800f254:	0151      	lsls	r1, r2, #5
 800f256:	697a      	ldr	r2, [r7, #20]
 800f258:	440a      	add	r2, r1
 800f25a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f25e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f262:	6013      	str	r3, [r2, #0]
 800f264:	e092      	b.n	800f38c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f266:	693b      	ldr	r3, [r7, #16]
 800f268:	015a      	lsls	r2, r3, #5
 800f26a:	697b      	ldr	r3, [r7, #20]
 800f26c:	4413      	add	r3, r2
 800f26e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	693a      	ldr	r2, [r7, #16]
 800f276:	0151      	lsls	r1, r2, #5
 800f278:	697a      	ldr	r2, [r7, #20]
 800f27a:	440a      	add	r2, r1
 800f27c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f280:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f284:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800f286:	68bb      	ldr	r3, [r7, #8]
 800f288:	695b      	ldr	r3, [r3, #20]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d07e      	beq.n	800f38c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f28e:	697b      	ldr	r3, [r7, #20]
 800f290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f294:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f296:	68bb      	ldr	r3, [r7, #8]
 800f298:	781b      	ldrb	r3, [r3, #0]
 800f29a:	f003 030f 	and.w	r3, r3, #15
 800f29e:	2101      	movs	r1, #1
 800f2a0:	fa01 f303 	lsl.w	r3, r1, r3
 800f2a4:	6979      	ldr	r1, [r7, #20]
 800f2a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f2aa:	4313      	orrs	r3, r2
 800f2ac:	634b      	str	r3, [r1, #52]	; 0x34
 800f2ae:	e06d      	b.n	800f38c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f2b0:	693b      	ldr	r3, [r7, #16]
 800f2b2:	015a      	lsls	r2, r3, #5
 800f2b4:	697b      	ldr	r3, [r7, #20]
 800f2b6:	4413      	add	r3, r2
 800f2b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2bc:	691a      	ldr	r2, [r3, #16]
 800f2be:	693b      	ldr	r3, [r7, #16]
 800f2c0:	0159      	lsls	r1, r3, #5
 800f2c2:	697b      	ldr	r3, [r7, #20]
 800f2c4:	440b      	add	r3, r1
 800f2c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2ca:	4619      	mov	r1, r3
 800f2cc:	4b34      	ldr	r3, [pc, #208]	; (800f3a0 <USB_EP0StartXfer+0x2ac>)
 800f2ce:	4013      	ands	r3, r2
 800f2d0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f2d2:	693b      	ldr	r3, [r7, #16]
 800f2d4:	015a      	lsls	r2, r3, #5
 800f2d6:	697b      	ldr	r3, [r7, #20]
 800f2d8:	4413      	add	r3, r2
 800f2da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2de:	691a      	ldr	r2, [r3, #16]
 800f2e0:	693b      	ldr	r3, [r7, #16]
 800f2e2:	0159      	lsls	r1, r3, #5
 800f2e4:	697b      	ldr	r3, [r7, #20]
 800f2e6:	440b      	add	r3, r1
 800f2e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2ec:	4619      	mov	r1, r3
 800f2ee:	4b2b      	ldr	r3, [pc, #172]	; (800f39c <USB_EP0StartXfer+0x2a8>)
 800f2f0:	4013      	ands	r3, r2
 800f2f2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800f2f4:	68bb      	ldr	r3, [r7, #8]
 800f2f6:	695b      	ldr	r3, [r3, #20]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d003      	beq.n	800f304 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800f2fc:	68bb      	ldr	r3, [r7, #8]
 800f2fe:	689a      	ldr	r2, [r3, #8]
 800f300:	68bb      	ldr	r3, [r7, #8]
 800f302:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f304:	693b      	ldr	r3, [r7, #16]
 800f306:	015a      	lsls	r2, r3, #5
 800f308:	697b      	ldr	r3, [r7, #20]
 800f30a:	4413      	add	r3, r2
 800f30c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f310:	691b      	ldr	r3, [r3, #16]
 800f312:	693a      	ldr	r2, [r7, #16]
 800f314:	0151      	lsls	r1, r2, #5
 800f316:	697a      	ldr	r2, [r7, #20]
 800f318:	440a      	add	r2, r1
 800f31a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f31e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f322:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800f324:	693b      	ldr	r3, [r7, #16]
 800f326:	015a      	lsls	r2, r3, #5
 800f328:	697b      	ldr	r3, [r7, #20]
 800f32a:	4413      	add	r3, r2
 800f32c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f330:	691a      	ldr	r2, [r3, #16]
 800f332:	68bb      	ldr	r3, [r7, #8]
 800f334:	689b      	ldr	r3, [r3, #8]
 800f336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f33a:	6939      	ldr	r1, [r7, #16]
 800f33c:	0148      	lsls	r0, r1, #5
 800f33e:	6979      	ldr	r1, [r7, #20]
 800f340:	4401      	add	r1, r0
 800f342:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f346:	4313      	orrs	r3, r2
 800f348:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800f34a:	79fb      	ldrb	r3, [r7, #7]
 800f34c:	2b01      	cmp	r3, #1
 800f34e:	d10d      	bne.n	800f36c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f350:	68bb      	ldr	r3, [r7, #8]
 800f352:	68db      	ldr	r3, [r3, #12]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d009      	beq.n	800f36c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f358:	68bb      	ldr	r3, [r7, #8]
 800f35a:	68d9      	ldr	r1, [r3, #12]
 800f35c:	693b      	ldr	r3, [r7, #16]
 800f35e:	015a      	lsls	r2, r3, #5
 800f360:	697b      	ldr	r3, [r7, #20]
 800f362:	4413      	add	r3, r2
 800f364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f368:	460a      	mov	r2, r1
 800f36a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f36c:	693b      	ldr	r3, [r7, #16]
 800f36e:	015a      	lsls	r2, r3, #5
 800f370:	697b      	ldr	r3, [r7, #20]
 800f372:	4413      	add	r3, r2
 800f374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	693a      	ldr	r2, [r7, #16]
 800f37c:	0151      	lsls	r1, r2, #5
 800f37e:	697a      	ldr	r2, [r7, #20]
 800f380:	440a      	add	r2, r1
 800f382:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f386:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f38a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f38c:	2300      	movs	r3, #0
}
 800f38e:	4618      	mov	r0, r3
 800f390:	371c      	adds	r7, #28
 800f392:	46bd      	mov	sp, r7
 800f394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f398:	4770      	bx	lr
 800f39a:	bf00      	nop
 800f39c:	e007ffff 	.word	0xe007ffff
 800f3a0:	fff80000 	.word	0xfff80000

0800f3a4 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f3a4:	b480      	push	{r7}
 800f3a6:	b089      	sub	sp, #36	; 0x24
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	60f8      	str	r0, [r7, #12]
 800f3ac:	60b9      	str	r1, [r7, #8]
 800f3ae:	4611      	mov	r1, r2
 800f3b0:	461a      	mov	r2, r3
 800f3b2:	460b      	mov	r3, r1
 800f3b4:	71fb      	strb	r3, [r7, #7]
 800f3b6:	4613      	mov	r3, r2
 800f3b8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800f3be:	68bb      	ldr	r3, [r7, #8]
 800f3c0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800f3c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d11a      	bne.n	800f400 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f3ca:	88bb      	ldrh	r3, [r7, #4]
 800f3cc:	3303      	adds	r3, #3
 800f3ce:	089b      	lsrs	r3, r3, #2
 800f3d0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	61bb      	str	r3, [r7, #24]
 800f3d6:	e00f      	b.n	800f3f8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f3d8:	79fb      	ldrb	r3, [r7, #7]
 800f3da:	031a      	lsls	r2, r3, #12
 800f3dc:	697b      	ldr	r3, [r7, #20]
 800f3de:	4413      	add	r3, r2
 800f3e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f3e4:	461a      	mov	r2, r3
 800f3e6:	69fb      	ldr	r3, [r7, #28]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f3ec:	69fb      	ldr	r3, [r7, #28]
 800f3ee:	3304      	adds	r3, #4
 800f3f0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f3f2:	69bb      	ldr	r3, [r7, #24]
 800f3f4:	3301      	adds	r3, #1
 800f3f6:	61bb      	str	r3, [r7, #24]
 800f3f8:	69ba      	ldr	r2, [r7, #24]
 800f3fa:	693b      	ldr	r3, [r7, #16]
 800f3fc:	429a      	cmp	r2, r3
 800f3fe:	d3eb      	bcc.n	800f3d8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f400:	2300      	movs	r3, #0
}
 800f402:	4618      	mov	r0, r3
 800f404:	3724      	adds	r7, #36	; 0x24
 800f406:	46bd      	mov	sp, r7
 800f408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40c:	4770      	bx	lr

0800f40e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f40e:	b480      	push	{r7}
 800f410:	b089      	sub	sp, #36	; 0x24
 800f412:	af00      	add	r7, sp, #0
 800f414:	60f8      	str	r0, [r7, #12]
 800f416:	60b9      	str	r1, [r7, #8]
 800f418:	4613      	mov	r3, r2
 800f41a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800f420:	68bb      	ldr	r3, [r7, #8]
 800f422:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800f424:	88fb      	ldrh	r3, [r7, #6]
 800f426:	3303      	adds	r3, #3
 800f428:	089b      	lsrs	r3, r3, #2
 800f42a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800f42c:	2300      	movs	r3, #0
 800f42e:	61bb      	str	r3, [r7, #24]
 800f430:	e00b      	b.n	800f44a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f432:	697b      	ldr	r3, [r7, #20]
 800f434:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f438:	681a      	ldr	r2, [r3, #0]
 800f43a:	69fb      	ldr	r3, [r7, #28]
 800f43c:	601a      	str	r2, [r3, #0]
    pDest++;
 800f43e:	69fb      	ldr	r3, [r7, #28]
 800f440:	3304      	adds	r3, #4
 800f442:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800f444:	69bb      	ldr	r3, [r7, #24]
 800f446:	3301      	adds	r3, #1
 800f448:	61bb      	str	r3, [r7, #24]
 800f44a:	69ba      	ldr	r2, [r7, #24]
 800f44c:	693b      	ldr	r3, [r7, #16]
 800f44e:	429a      	cmp	r2, r3
 800f450:	d3ef      	bcc.n	800f432 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800f452:	69fb      	ldr	r3, [r7, #28]
}
 800f454:	4618      	mov	r0, r3
 800f456:	3724      	adds	r7, #36	; 0x24
 800f458:	46bd      	mov	sp, r7
 800f45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45e:	4770      	bx	lr

0800f460 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f460:	b480      	push	{r7}
 800f462:	b085      	sub	sp, #20
 800f464:	af00      	add	r7, sp, #0
 800f466:	6078      	str	r0, [r7, #4]
 800f468:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f46e:	683b      	ldr	r3, [r7, #0]
 800f470:	781b      	ldrb	r3, [r3, #0]
 800f472:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	785b      	ldrb	r3, [r3, #1]
 800f478:	2b01      	cmp	r3, #1
 800f47a:	d12c      	bne.n	800f4d6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f47c:	68bb      	ldr	r3, [r7, #8]
 800f47e:	015a      	lsls	r2, r3, #5
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	4413      	add	r3, r2
 800f484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	db12      	blt.n	800f4b4 <USB_EPSetStall+0x54>
 800f48e:	68bb      	ldr	r3, [r7, #8]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d00f      	beq.n	800f4b4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f494:	68bb      	ldr	r3, [r7, #8]
 800f496:	015a      	lsls	r2, r3, #5
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	4413      	add	r3, r2
 800f49c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	68ba      	ldr	r2, [r7, #8]
 800f4a4:	0151      	lsls	r1, r2, #5
 800f4a6:	68fa      	ldr	r2, [r7, #12]
 800f4a8:	440a      	add	r2, r1
 800f4aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f4ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f4b2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f4b4:	68bb      	ldr	r3, [r7, #8]
 800f4b6:	015a      	lsls	r2, r3, #5
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	4413      	add	r3, r2
 800f4bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	68ba      	ldr	r2, [r7, #8]
 800f4c4:	0151      	lsls	r1, r2, #5
 800f4c6:	68fa      	ldr	r2, [r7, #12]
 800f4c8:	440a      	add	r2, r1
 800f4ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f4ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f4d2:	6013      	str	r3, [r2, #0]
 800f4d4:	e02b      	b.n	800f52e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f4d6:	68bb      	ldr	r3, [r7, #8]
 800f4d8:	015a      	lsls	r2, r3, #5
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	4413      	add	r3, r2
 800f4de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	db12      	blt.n	800f50e <USB_EPSetStall+0xae>
 800f4e8:	68bb      	ldr	r3, [r7, #8]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d00f      	beq.n	800f50e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f4ee:	68bb      	ldr	r3, [r7, #8]
 800f4f0:	015a      	lsls	r2, r3, #5
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	4413      	add	r3, r2
 800f4f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	68ba      	ldr	r2, [r7, #8]
 800f4fe:	0151      	lsls	r1, r2, #5
 800f500:	68fa      	ldr	r2, [r7, #12]
 800f502:	440a      	add	r2, r1
 800f504:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f508:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f50c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f50e:	68bb      	ldr	r3, [r7, #8]
 800f510:	015a      	lsls	r2, r3, #5
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	4413      	add	r3, r2
 800f516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	68ba      	ldr	r2, [r7, #8]
 800f51e:	0151      	lsls	r1, r2, #5
 800f520:	68fa      	ldr	r2, [r7, #12]
 800f522:	440a      	add	r2, r1
 800f524:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f528:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f52c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f52e:	2300      	movs	r3, #0
}
 800f530:	4618      	mov	r0, r3
 800f532:	3714      	adds	r7, #20
 800f534:	46bd      	mov	sp, r7
 800f536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53a:	4770      	bx	lr

0800f53c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f53c:	b480      	push	{r7}
 800f53e:	b085      	sub	sp, #20
 800f540:	af00      	add	r7, sp, #0
 800f542:	6078      	str	r0, [r7, #4]
 800f544:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f54a:	683b      	ldr	r3, [r7, #0]
 800f54c:	781b      	ldrb	r3, [r3, #0]
 800f54e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f550:	683b      	ldr	r3, [r7, #0]
 800f552:	785b      	ldrb	r3, [r3, #1]
 800f554:	2b01      	cmp	r3, #1
 800f556:	d128      	bne.n	800f5aa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f558:	68bb      	ldr	r3, [r7, #8]
 800f55a:	015a      	lsls	r2, r3, #5
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	4413      	add	r3, r2
 800f560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	68ba      	ldr	r2, [r7, #8]
 800f568:	0151      	lsls	r1, r2, #5
 800f56a:	68fa      	ldr	r2, [r7, #12]
 800f56c:	440a      	add	r2, r1
 800f56e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f572:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f576:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f578:	683b      	ldr	r3, [r7, #0]
 800f57a:	78db      	ldrb	r3, [r3, #3]
 800f57c:	2b03      	cmp	r3, #3
 800f57e:	d003      	beq.n	800f588 <USB_EPClearStall+0x4c>
 800f580:	683b      	ldr	r3, [r7, #0]
 800f582:	78db      	ldrb	r3, [r3, #3]
 800f584:	2b02      	cmp	r3, #2
 800f586:	d138      	bne.n	800f5fa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f588:	68bb      	ldr	r3, [r7, #8]
 800f58a:	015a      	lsls	r2, r3, #5
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	4413      	add	r3, r2
 800f590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	68ba      	ldr	r2, [r7, #8]
 800f598:	0151      	lsls	r1, r2, #5
 800f59a:	68fa      	ldr	r2, [r7, #12]
 800f59c:	440a      	add	r2, r1
 800f59e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f5a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f5a6:	6013      	str	r3, [r2, #0]
 800f5a8:	e027      	b.n	800f5fa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f5aa:	68bb      	ldr	r3, [r7, #8]
 800f5ac:	015a      	lsls	r2, r3, #5
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	4413      	add	r3, r2
 800f5b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	68ba      	ldr	r2, [r7, #8]
 800f5ba:	0151      	lsls	r1, r2, #5
 800f5bc:	68fa      	ldr	r2, [r7, #12]
 800f5be:	440a      	add	r2, r1
 800f5c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f5c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f5c8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f5ca:	683b      	ldr	r3, [r7, #0]
 800f5cc:	78db      	ldrb	r3, [r3, #3]
 800f5ce:	2b03      	cmp	r3, #3
 800f5d0:	d003      	beq.n	800f5da <USB_EPClearStall+0x9e>
 800f5d2:	683b      	ldr	r3, [r7, #0]
 800f5d4:	78db      	ldrb	r3, [r3, #3]
 800f5d6:	2b02      	cmp	r3, #2
 800f5d8:	d10f      	bne.n	800f5fa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f5da:	68bb      	ldr	r3, [r7, #8]
 800f5dc:	015a      	lsls	r2, r3, #5
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	4413      	add	r3, r2
 800f5e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	68ba      	ldr	r2, [r7, #8]
 800f5ea:	0151      	lsls	r1, r2, #5
 800f5ec:	68fa      	ldr	r2, [r7, #12]
 800f5ee:	440a      	add	r2, r1
 800f5f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f5f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f5f8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f5fa:	2300      	movs	r3, #0
}
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	3714      	adds	r7, #20
 800f600:	46bd      	mov	sp, r7
 800f602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f606:	4770      	bx	lr

0800f608 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f608:	b480      	push	{r7}
 800f60a:	b085      	sub	sp, #20
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
 800f610:	460b      	mov	r3, r1
 800f612:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	68fa      	ldr	r2, [r7, #12]
 800f622:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f626:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f62a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f632:	681a      	ldr	r2, [r3, #0]
 800f634:	78fb      	ldrb	r3, [r7, #3]
 800f636:	011b      	lsls	r3, r3, #4
 800f638:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800f63c:	68f9      	ldr	r1, [r7, #12]
 800f63e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f642:	4313      	orrs	r3, r2
 800f644:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f646:	2300      	movs	r3, #0
}
 800f648:	4618      	mov	r0, r3
 800f64a:	3714      	adds	r7, #20
 800f64c:	46bd      	mov	sp, r7
 800f64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f652:	4770      	bx	lr

0800f654 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b084      	sub	sp, #16
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f666:	685b      	ldr	r3, [r3, #4]
 800f668:	68fa      	ldr	r2, [r7, #12]
 800f66a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f66e:	f023 0302 	bic.w	r3, r3, #2
 800f672:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800f674:	2003      	movs	r0, #3
 800f676:	f7f2 fc95 	bl	8001fa4 <HAL_Delay>

  return HAL_OK;
 800f67a:	2300      	movs	r3, #0
}
 800f67c:	4618      	mov	r0, r3
 800f67e:	3710      	adds	r7, #16
 800f680:	46bd      	mov	sp, r7
 800f682:	bd80      	pop	{r7, pc}

0800f684 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f684:	b580      	push	{r7, lr}
 800f686:	b084      	sub	sp, #16
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f696:	685b      	ldr	r3, [r3, #4]
 800f698:	68fa      	ldr	r2, [r7, #12]
 800f69a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f69e:	f043 0302 	orr.w	r3, r3, #2
 800f6a2:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800f6a4:	2003      	movs	r0, #3
 800f6a6:	f7f2 fc7d 	bl	8001fa4 <HAL_Delay>

  return HAL_OK;
 800f6aa:	2300      	movs	r3, #0
}
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	3710      	adds	r7, #16
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	bd80      	pop	{r7, pc}

0800f6b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800f6b4:	b480      	push	{r7}
 800f6b6:	b085      	sub	sp, #20
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	695b      	ldr	r3, [r3, #20]
 800f6c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	699b      	ldr	r3, [r3, #24]
 800f6c6:	68fa      	ldr	r2, [r7, #12]
 800f6c8:	4013      	ands	r3, r2
 800f6ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f6cc:	68fb      	ldr	r3, [r7, #12]
}
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	3714      	adds	r7, #20
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d8:	4770      	bx	lr

0800f6da <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f6da:	b480      	push	{r7}
 800f6dc:	b085      	sub	sp, #20
 800f6de:	af00      	add	r7, sp, #0
 800f6e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6ec:	699b      	ldr	r3, [r3, #24]
 800f6ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6f6:	69db      	ldr	r3, [r3, #28]
 800f6f8:	68ba      	ldr	r2, [r7, #8]
 800f6fa:	4013      	ands	r3, r2
 800f6fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f6fe:	68bb      	ldr	r3, [r7, #8]
 800f700:	0c1b      	lsrs	r3, r3, #16
}
 800f702:	4618      	mov	r0, r3
 800f704:	3714      	adds	r7, #20
 800f706:	46bd      	mov	sp, r7
 800f708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70c:	4770      	bx	lr

0800f70e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f70e:	b480      	push	{r7}
 800f710:	b085      	sub	sp, #20
 800f712:	af00      	add	r7, sp, #0
 800f714:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f720:	699b      	ldr	r3, [r3, #24]
 800f722:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f72a:	69db      	ldr	r3, [r3, #28]
 800f72c:	68ba      	ldr	r2, [r7, #8]
 800f72e:	4013      	ands	r3, r2
 800f730:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f732:	68bb      	ldr	r3, [r7, #8]
 800f734:	b29b      	uxth	r3, r3
}
 800f736:	4618      	mov	r0, r3
 800f738:	3714      	adds	r7, #20
 800f73a:	46bd      	mov	sp, r7
 800f73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f740:	4770      	bx	lr

0800f742 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f742:	b480      	push	{r7}
 800f744:	b085      	sub	sp, #20
 800f746:	af00      	add	r7, sp, #0
 800f748:	6078      	str	r0, [r7, #4]
 800f74a:	460b      	mov	r3, r1
 800f74c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f752:	78fb      	ldrb	r3, [r7, #3]
 800f754:	015a      	lsls	r2, r3, #5
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	4413      	add	r3, r2
 800f75a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f75e:	689b      	ldr	r3, [r3, #8]
 800f760:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f768:	695b      	ldr	r3, [r3, #20]
 800f76a:	68ba      	ldr	r2, [r7, #8]
 800f76c:	4013      	ands	r3, r2
 800f76e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f770:	68bb      	ldr	r3, [r7, #8]
}
 800f772:	4618      	mov	r0, r3
 800f774:	3714      	adds	r7, #20
 800f776:	46bd      	mov	sp, r7
 800f778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77c:	4770      	bx	lr

0800f77e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f77e:	b480      	push	{r7}
 800f780:	b087      	sub	sp, #28
 800f782:	af00      	add	r7, sp, #0
 800f784:	6078      	str	r0, [r7, #4]
 800f786:	460b      	mov	r3, r1
 800f788:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f78e:	697b      	ldr	r3, [r7, #20]
 800f790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f794:	691b      	ldr	r3, [r3, #16]
 800f796:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f798:	697b      	ldr	r3, [r7, #20]
 800f79a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f79e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7a0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f7a2:	78fb      	ldrb	r3, [r7, #3]
 800f7a4:	f003 030f 	and.w	r3, r3, #15
 800f7a8:	68fa      	ldr	r2, [r7, #12]
 800f7aa:	fa22 f303 	lsr.w	r3, r2, r3
 800f7ae:	01db      	lsls	r3, r3, #7
 800f7b0:	b2db      	uxtb	r3, r3
 800f7b2:	693a      	ldr	r2, [r7, #16]
 800f7b4:	4313      	orrs	r3, r2
 800f7b6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f7b8:	78fb      	ldrb	r3, [r7, #3]
 800f7ba:	015a      	lsls	r2, r3, #5
 800f7bc:	697b      	ldr	r3, [r7, #20]
 800f7be:	4413      	add	r3, r2
 800f7c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7c4:	689b      	ldr	r3, [r3, #8]
 800f7c6:	693a      	ldr	r2, [r7, #16]
 800f7c8:	4013      	ands	r3, r2
 800f7ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f7cc:	68bb      	ldr	r3, [r7, #8]
}
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	371c      	adds	r7, #28
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d8:	4770      	bx	lr

0800f7da <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800f7da:	b480      	push	{r7}
 800f7dc:	b083      	sub	sp, #12
 800f7de:	af00      	add	r7, sp, #0
 800f7e0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	695b      	ldr	r3, [r3, #20]
 800f7e6:	f003 0301 	and.w	r3, r3, #1
}
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	370c      	adds	r7, #12
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f4:	4770      	bx	lr
	...

0800f7f8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800f7f8:	b480      	push	{r7}
 800f7fa:	b085      	sub	sp, #20
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f80a:	681a      	ldr	r2, [r3, #0]
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f812:	4619      	mov	r1, r3
 800f814:	4b09      	ldr	r3, [pc, #36]	; (800f83c <USB_ActivateSetup+0x44>)
 800f816:	4013      	ands	r3, r2
 800f818:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f820:	685b      	ldr	r3, [r3, #4]
 800f822:	68fa      	ldr	r2, [r7, #12]
 800f824:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f82c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f82e:	2300      	movs	r3, #0
}
 800f830:	4618      	mov	r0, r3
 800f832:	3714      	adds	r7, #20
 800f834:	46bd      	mov	sp, r7
 800f836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f83a:	4770      	bx	lr
 800f83c:	fffff800 	.word	0xfffff800

0800f840 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800f840:	b480      	push	{r7}
 800f842:	b087      	sub	sp, #28
 800f844:	af00      	add	r7, sp, #0
 800f846:	60f8      	str	r0, [r7, #12]
 800f848:	460b      	mov	r3, r1
 800f84a:	607a      	str	r2, [r7, #4]
 800f84c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	333c      	adds	r3, #60	; 0x3c
 800f856:	3304      	adds	r3, #4
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f85c:	693b      	ldr	r3, [r7, #16]
 800f85e:	4a26      	ldr	r2, [pc, #152]	; (800f8f8 <USB_EP0_OutStart+0xb8>)
 800f860:	4293      	cmp	r3, r2
 800f862:	d90a      	bls.n	800f87a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f864:	697b      	ldr	r3, [r7, #20]
 800f866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f870:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f874:	d101      	bne.n	800f87a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f876:	2300      	movs	r3, #0
 800f878:	e037      	b.n	800f8ea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f87a:	697b      	ldr	r3, [r7, #20]
 800f87c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f880:	461a      	mov	r2, r3
 800f882:	2300      	movs	r3, #0
 800f884:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f886:	697b      	ldr	r3, [r7, #20]
 800f888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f88c:	691b      	ldr	r3, [r3, #16]
 800f88e:	697a      	ldr	r2, [r7, #20]
 800f890:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f894:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f898:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f89a:	697b      	ldr	r3, [r7, #20]
 800f89c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8a0:	691b      	ldr	r3, [r3, #16]
 800f8a2:	697a      	ldr	r2, [r7, #20]
 800f8a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f8a8:	f043 0318 	orr.w	r3, r3, #24
 800f8ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f8ae:	697b      	ldr	r3, [r7, #20]
 800f8b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8b4:	691b      	ldr	r3, [r3, #16]
 800f8b6:	697a      	ldr	r2, [r7, #20]
 800f8b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f8bc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800f8c0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f8c2:	7afb      	ldrb	r3, [r7, #11]
 800f8c4:	2b01      	cmp	r3, #1
 800f8c6:	d10f      	bne.n	800f8e8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f8c8:	697b      	ldr	r3, [r7, #20]
 800f8ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8ce:	461a      	mov	r2, r3
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f8d4:	697b      	ldr	r3, [r7, #20]
 800f8d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	697a      	ldr	r2, [r7, #20]
 800f8de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f8e2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800f8e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f8e8:	2300      	movs	r3, #0
}
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	371c      	adds	r7, #28
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f4:	4770      	bx	lr
 800f8f6:	bf00      	nop
 800f8f8:	4f54300a 	.word	0x4f54300a

0800f8fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f8fc:	b480      	push	{r7}
 800f8fe:	b085      	sub	sp, #20
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800f904:	2300      	movs	r3, #0
 800f906:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	3301      	adds	r3, #1
 800f90c:	60fb      	str	r3, [r7, #12]
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	4a13      	ldr	r2, [pc, #76]	; (800f960 <USB_CoreReset+0x64>)
 800f912:	4293      	cmp	r3, r2
 800f914:	d901      	bls.n	800f91a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f916:	2303      	movs	r3, #3
 800f918:	e01b      	b.n	800f952 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	691b      	ldr	r3, [r3, #16]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	daf2      	bge.n	800f908 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f922:	2300      	movs	r3, #0
 800f924:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	691b      	ldr	r3, [r3, #16]
 800f92a:	f043 0201 	orr.w	r2, r3, #1
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	3301      	adds	r3, #1
 800f936:	60fb      	str	r3, [r7, #12]
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	4a09      	ldr	r2, [pc, #36]	; (800f960 <USB_CoreReset+0x64>)
 800f93c:	4293      	cmp	r3, r2
 800f93e:	d901      	bls.n	800f944 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f940:	2303      	movs	r3, #3
 800f942:	e006      	b.n	800f952 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	691b      	ldr	r3, [r3, #16]
 800f948:	f003 0301 	and.w	r3, r3, #1
 800f94c:	2b01      	cmp	r3, #1
 800f94e:	d0f0      	beq.n	800f932 <USB_CoreReset+0x36>

  return HAL_OK;
 800f950:	2300      	movs	r3, #0
}
 800f952:	4618      	mov	r0, r3
 800f954:	3714      	adds	r7, #20
 800f956:	46bd      	mov	sp, r7
 800f958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95c:	4770      	bx	lr
 800f95e:	bf00      	nop
 800f960:	00030d40 	.word	0x00030d40

0800f964 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f964:	b580      	push	{r7, lr}
 800f966:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800f968:	4904      	ldr	r1, [pc, #16]	; (800f97c <MX_FATFS_Init+0x18>)
 800f96a:	4805      	ldr	r0, [pc, #20]	; (800f980 <MX_FATFS_Init+0x1c>)
 800f96c:	f005 fbec 	bl	8015148 <FATFS_LinkDriver>
 800f970:	4603      	mov	r3, r0
 800f972:	461a      	mov	r2, r3
 800f974:	4b03      	ldr	r3, [pc, #12]	; (800f984 <MX_FATFS_Init+0x20>)
 800f976:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800f978:	bf00      	nop
 800f97a:	bd80      	pop	{r7, pc}
 800f97c:	240015f0 	.word	0x240015f0
 800f980:	080170e0 	.word	0x080170e0
 800f984:	240015ec 	.word	0x240015ec

0800f988 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800f988:	b480      	push	{r7}
 800f98a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800f98c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800f98e:	4618      	mov	r0, r3
 800f990:	46bd      	mov	sp, r7
 800f992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f996:	4770      	bx	lr

0800f998 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b082      	sub	sp, #8
 800f99c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800f99e:	2300      	movs	r3, #0
 800f9a0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800f9a2:	f000 f885 	bl	800fab0 <BSP_SD_IsDetected>
 800f9a6:	4603      	mov	r3, r0
 800f9a8:	2b01      	cmp	r3, #1
 800f9aa:	d001      	beq.n	800f9b0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800f9ac:	2302      	movs	r3, #2
 800f9ae:	e012      	b.n	800f9d6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800f9b0:	480b      	ldr	r0, [pc, #44]	; (800f9e0 <BSP_SD_Init+0x48>)
 800f9b2:	f7fa fbbb 	bl	800a12c <HAL_SD_Init>
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800f9ba:	79fb      	ldrb	r3, [r7, #7]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d109      	bne.n	800f9d4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800f9c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800f9c4:	4806      	ldr	r0, [pc, #24]	; (800f9e0 <BSP_SD_Init+0x48>)
 800f9c6:	f7fb fd8f 	bl	800b4e8 <HAL_SD_ConfigWideBusOperation>
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d001      	beq.n	800f9d4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800f9d0:	2301      	movs	r3, #1
 800f9d2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800f9d4:	79fb      	ldrb	r3, [r7, #7]
}
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	3708      	adds	r7, #8
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	bd80      	pop	{r7, pc}
 800f9de:	bf00      	nop
 800f9e0:	24001294 	.word	0x24001294

0800f9e4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b086      	sub	sp, #24
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	60f8      	str	r0, [r7, #12]
 800f9ec:	60b9      	str	r1, [r7, #8]
 800f9ee:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	68ba      	ldr	r2, [r7, #8]
 800f9f8:	68f9      	ldr	r1, [r7, #12]
 800f9fa:	4806      	ldr	r0, [pc, #24]	; (800fa14 <BSP_SD_ReadBlocks_DMA+0x30>)
 800f9fc:	f7fa ffd2 	bl	800a9a4 <HAL_SD_ReadBlocks_DMA>
 800fa00:	4603      	mov	r3, r0
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d001      	beq.n	800fa0a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800fa06:	2301      	movs	r3, #1
 800fa08:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800fa0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	3718      	adds	r7, #24
 800fa10:	46bd      	mov	sp, r7
 800fa12:	bd80      	pop	{r7, pc}
 800fa14:	24001294 	.word	0x24001294

0800fa18 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b086      	sub	sp, #24
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	60f8      	str	r0, [r7, #12]
 800fa20:	60b9      	str	r1, [r7, #8]
 800fa22:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800fa24:	2300      	movs	r3, #0
 800fa26:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	68ba      	ldr	r2, [r7, #8]
 800fa2c:	68f9      	ldr	r1, [r7, #12]
 800fa2e:	4806      	ldr	r0, [pc, #24]	; (800fa48 <BSP_SD_WriteBlocks_DMA+0x30>)
 800fa30:	f7fb f860 	bl	800aaf4 <HAL_SD_WriteBlocks_DMA>
 800fa34:	4603      	mov	r3, r0
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d001      	beq.n	800fa3e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800fa3a:	2301      	movs	r3, #1
 800fa3c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800fa3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa40:	4618      	mov	r0, r3
 800fa42:	3718      	adds	r7, #24
 800fa44:	46bd      	mov	sp, r7
 800fa46:	bd80      	pop	{r7, pc}
 800fa48:	24001294 	.word	0x24001294

0800fa4c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800fa4c:	b580      	push	{r7, lr}
 800fa4e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800fa50:	4805      	ldr	r0, [pc, #20]	; (800fa68 <BSP_SD_GetCardState+0x1c>)
 800fa52:	f7fb fdf3 	bl	800b63c <HAL_SD_GetCardState>
 800fa56:	4603      	mov	r3, r0
 800fa58:	2b04      	cmp	r3, #4
 800fa5a:	bf14      	ite	ne
 800fa5c:	2301      	movne	r3, #1
 800fa5e:	2300      	moveq	r3, #0
 800fa60:	b2db      	uxtb	r3, r3
}
 800fa62:	4618      	mov	r0, r3
 800fa64:	bd80      	pop	{r7, pc}
 800fa66:	bf00      	nop
 800fa68:	24001294 	.word	0x24001294

0800fa6c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	b082      	sub	sp, #8
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800fa74:	6879      	ldr	r1, [r7, #4]
 800fa76:	4803      	ldr	r0, [pc, #12]	; (800fa84 <BSP_SD_GetCardInfo+0x18>)
 800fa78:	f7fb fd0a 	bl	800b490 <HAL_SD_GetCardInfo>
}
 800fa7c:	bf00      	nop
 800fa7e:	3708      	adds	r7, #8
 800fa80:	46bd      	mov	sp, r7
 800fa82:	bd80      	pop	{r7, pc}
 800fa84:	24001294 	.word	0x24001294

0800fa88 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b082      	sub	sp, #8
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800fa90:	f000 f9a0 	bl	800fdd4 <BSP_SD_WriteCpltCallback>
}
 800fa94:	bf00      	nop
 800fa96:	3708      	adds	r7, #8
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	bd80      	pop	{r7, pc}

0800fa9c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b082      	sub	sp, #8
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800faa4:	f000 f9a2 	bl	800fdec <BSP_SD_ReadCpltCallback>
}
 800faa8:	bf00      	nop
 800faaa:	3708      	adds	r7, #8
 800faac:	46bd      	mov	sp, r7
 800faae:	bd80      	pop	{r7, pc}

0800fab0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800fab0:	b580      	push	{r7, lr}
 800fab2:	b082      	sub	sp, #8
 800fab4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800fab6:	2301      	movs	r3, #1
 800fab8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800faba:	f000 f80b 	bl	800fad4 <BSP_PlatformIsDetected>
 800fabe:	4603      	mov	r3, r0
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d101      	bne.n	800fac8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800fac4:	2300      	movs	r3, #0
 800fac6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800fac8:	79fb      	ldrb	r3, [r7, #7]
 800faca:	b2db      	uxtb	r3, r3
}
 800facc:	4618      	mov	r0, r3
 800face:	3708      	adds	r7, #8
 800fad0:	46bd      	mov	sp, r7
 800fad2:	bd80      	pop	{r7, pc}

0800fad4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b082      	sub	sp, #8
 800fad8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800fada:	2301      	movs	r3, #1
 800fadc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800fade:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800fae2:	4806      	ldr	r0, [pc, #24]	; (800fafc <BSP_PlatformIsDetected+0x28>)
 800fae4:	f7f5 ff60 	bl	80059a8 <HAL_GPIO_ReadPin>
 800fae8:	4603      	mov	r3, r0
 800faea:	2b00      	cmp	r3, #0
 800faec:	d001      	beq.n	800faf2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800faee:	2300      	movs	r3, #0
 800faf0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800faf2:	79fb      	ldrb	r3, [r7, #7]
}
 800faf4:	4618      	mov	r0, r3
 800faf6:	3708      	adds	r7, #8
 800faf8:	46bd      	mov	sp, r7
 800fafa:	bd80      	pop	{r7, pc}
 800fafc:	58020000 	.word	0x58020000

0800fb00 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b084      	sub	sp, #16
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800fb08:	f7f2 fa40 	bl	8001f8c <HAL_GetTick>
 800fb0c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800fb0e:	e006      	b.n	800fb1e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fb10:	f7ff ff9c 	bl	800fa4c <BSP_SD_GetCardState>
 800fb14:	4603      	mov	r3, r0
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d101      	bne.n	800fb1e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	e009      	b.n	800fb32 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800fb1e:	f7f2 fa35 	bl	8001f8c <HAL_GetTick>
 800fb22:	4602      	mov	r2, r0
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	1ad3      	subs	r3, r2, r3
 800fb28:	687a      	ldr	r2, [r7, #4]
 800fb2a:	429a      	cmp	r2, r3
 800fb2c:	d8f0      	bhi.n	800fb10 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800fb2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fb32:	4618      	mov	r0, r3
 800fb34:	3710      	adds	r7, #16
 800fb36:	46bd      	mov	sp, r7
 800fb38:	bd80      	pop	{r7, pc}
	...

0800fb3c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b082      	sub	sp, #8
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	4603      	mov	r3, r0
 800fb44:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800fb46:	4b0b      	ldr	r3, [pc, #44]	; (800fb74 <SD_CheckStatus+0x38>)
 800fb48:	2201      	movs	r2, #1
 800fb4a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800fb4c:	f7ff ff7e 	bl	800fa4c <BSP_SD_GetCardState>
 800fb50:	4603      	mov	r3, r0
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d107      	bne.n	800fb66 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800fb56:	4b07      	ldr	r3, [pc, #28]	; (800fb74 <SD_CheckStatus+0x38>)
 800fb58:	781b      	ldrb	r3, [r3, #0]
 800fb5a:	b2db      	uxtb	r3, r3
 800fb5c:	f023 0301 	bic.w	r3, r3, #1
 800fb60:	b2da      	uxtb	r2, r3
 800fb62:	4b04      	ldr	r3, [pc, #16]	; (800fb74 <SD_CheckStatus+0x38>)
 800fb64:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800fb66:	4b03      	ldr	r3, [pc, #12]	; (800fb74 <SD_CheckStatus+0x38>)
 800fb68:	781b      	ldrb	r3, [r3, #0]
 800fb6a:	b2db      	uxtb	r3, r3
}
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	3708      	adds	r7, #8
 800fb70:	46bd      	mov	sp, r7
 800fb72:	bd80      	pop	{r7, pc}
 800fb74:	24000011 	.word	0x24000011

0800fb78 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b082      	sub	sp, #8
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	4603      	mov	r3, r0
 800fb80:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800fb82:	f7ff ff09 	bl	800f998 <BSP_SD_Init>
 800fb86:	4603      	mov	r3, r0
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d107      	bne.n	800fb9c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800fb8c:	79fb      	ldrb	r3, [r7, #7]
 800fb8e:	4618      	mov	r0, r3
 800fb90:	f7ff ffd4 	bl	800fb3c <SD_CheckStatus>
 800fb94:	4603      	mov	r3, r0
 800fb96:	461a      	mov	r2, r3
 800fb98:	4b04      	ldr	r3, [pc, #16]	; (800fbac <SD_initialize+0x34>)
 800fb9a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800fb9c:	4b03      	ldr	r3, [pc, #12]	; (800fbac <SD_initialize+0x34>)
 800fb9e:	781b      	ldrb	r3, [r3, #0]
 800fba0:	b2db      	uxtb	r3, r3
}
 800fba2:	4618      	mov	r0, r3
 800fba4:	3708      	adds	r7, #8
 800fba6:	46bd      	mov	sp, r7
 800fba8:	bd80      	pop	{r7, pc}
 800fbaa:	bf00      	nop
 800fbac:	24000011 	.word	0x24000011

0800fbb0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b082      	sub	sp, #8
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800fbba:	79fb      	ldrb	r3, [r7, #7]
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	f7ff ffbd 	bl	800fb3c <SD_CheckStatus>
 800fbc2:	4603      	mov	r3, r0
}
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	3708      	adds	r7, #8
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	bd80      	pop	{r7, pc}

0800fbcc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b086      	sub	sp, #24
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	60b9      	str	r1, [r7, #8]
 800fbd4:	607a      	str	r2, [r7, #4]
 800fbd6:	603b      	str	r3, [r7, #0]
 800fbd8:	4603      	mov	r3, r0
 800fbda:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800fbdc:	2301      	movs	r3, #1
 800fbde:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800fbe0:	f247 5030 	movw	r0, #30000	; 0x7530
 800fbe4:	f7ff ff8c 	bl	800fb00 <SD_CheckStatusWithTimeout>
 800fbe8:	4603      	mov	r3, r0
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	da01      	bge.n	800fbf2 <SD_read+0x26>
  {
    return res;
 800fbee:	7dfb      	ldrb	r3, [r7, #23]
 800fbf0:	e03b      	b.n	800fc6a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800fbf2:	683a      	ldr	r2, [r7, #0]
 800fbf4:	6879      	ldr	r1, [r7, #4]
 800fbf6:	68b8      	ldr	r0, [r7, #8]
 800fbf8:	f7ff fef4 	bl	800f9e4 <BSP_SD_ReadBlocks_DMA>
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d132      	bne.n	800fc68 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800fc02:	4b1c      	ldr	r3, [pc, #112]	; (800fc74 <SD_read+0xa8>)
 800fc04:	2200      	movs	r2, #0
 800fc06:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800fc08:	f7f2 f9c0 	bl	8001f8c <HAL_GetTick>
 800fc0c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800fc0e:	bf00      	nop
 800fc10:	4b18      	ldr	r3, [pc, #96]	; (800fc74 <SD_read+0xa8>)
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d108      	bne.n	800fc2a <SD_read+0x5e>
 800fc18:	f7f2 f9b8 	bl	8001f8c <HAL_GetTick>
 800fc1c:	4602      	mov	r2, r0
 800fc1e:	693b      	ldr	r3, [r7, #16]
 800fc20:	1ad3      	subs	r3, r2, r3
 800fc22:	f247 522f 	movw	r2, #29999	; 0x752f
 800fc26:	4293      	cmp	r3, r2
 800fc28:	d9f2      	bls.n	800fc10 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800fc2a:	4b12      	ldr	r3, [pc, #72]	; (800fc74 <SD_read+0xa8>)
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d102      	bne.n	800fc38 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800fc32:	2301      	movs	r3, #1
 800fc34:	75fb      	strb	r3, [r7, #23]
 800fc36:	e017      	b.n	800fc68 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800fc38:	4b0e      	ldr	r3, [pc, #56]	; (800fc74 <SD_read+0xa8>)
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800fc3e:	f7f2 f9a5 	bl	8001f8c <HAL_GetTick>
 800fc42:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800fc44:	e007      	b.n	800fc56 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fc46:	f7ff ff01 	bl	800fa4c <BSP_SD_GetCardState>
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d102      	bne.n	800fc56 <SD_read+0x8a>
          {
            res = RES_OK;
 800fc50:	2300      	movs	r3, #0
 800fc52:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800fc54:	e008      	b.n	800fc68 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800fc56:	f7f2 f999 	bl	8001f8c <HAL_GetTick>
 800fc5a:	4602      	mov	r2, r0
 800fc5c:	693b      	ldr	r3, [r7, #16]
 800fc5e:	1ad3      	subs	r3, r2, r3
 800fc60:	f247 522f 	movw	r2, #29999	; 0x752f
 800fc64:	4293      	cmp	r3, r2
 800fc66:	d9ee      	bls.n	800fc46 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800fc68:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	3718      	adds	r7, #24
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	bd80      	pop	{r7, pc}
 800fc72:	bf00      	nop
 800fc74:	24000a00 	.word	0x24000a00

0800fc78 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b086      	sub	sp, #24
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	60b9      	str	r1, [r7, #8]
 800fc80:	607a      	str	r2, [r7, #4]
 800fc82:	603b      	str	r3, [r7, #0]
 800fc84:	4603      	mov	r3, r0
 800fc86:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800fc88:	2301      	movs	r3, #1
 800fc8a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800fc8c:	4b24      	ldr	r3, [pc, #144]	; (800fd20 <SD_write+0xa8>)
 800fc8e:	2200      	movs	r2, #0
 800fc90:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800fc92:	f247 5030 	movw	r0, #30000	; 0x7530
 800fc96:	f7ff ff33 	bl	800fb00 <SD_CheckStatusWithTimeout>
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	da01      	bge.n	800fca4 <SD_write+0x2c>
  {
    return res;
 800fca0:	7dfb      	ldrb	r3, [r7, #23]
 800fca2:	e038      	b.n	800fd16 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800fca4:	683a      	ldr	r2, [r7, #0]
 800fca6:	6879      	ldr	r1, [r7, #4]
 800fca8:	68b8      	ldr	r0, [r7, #8]
 800fcaa:	f7ff feb5 	bl	800fa18 <BSP_SD_WriteBlocks_DMA>
 800fcae:	4603      	mov	r3, r0
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d12f      	bne.n	800fd14 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800fcb4:	f7f2 f96a 	bl	8001f8c <HAL_GetTick>
 800fcb8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800fcba:	bf00      	nop
 800fcbc:	4b18      	ldr	r3, [pc, #96]	; (800fd20 <SD_write+0xa8>)
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d108      	bne.n	800fcd6 <SD_write+0x5e>
 800fcc4:	f7f2 f962 	bl	8001f8c <HAL_GetTick>
 800fcc8:	4602      	mov	r2, r0
 800fcca:	693b      	ldr	r3, [r7, #16]
 800fccc:	1ad3      	subs	r3, r2, r3
 800fcce:	f247 522f 	movw	r2, #29999	; 0x752f
 800fcd2:	4293      	cmp	r3, r2
 800fcd4:	d9f2      	bls.n	800fcbc <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800fcd6:	4b12      	ldr	r3, [pc, #72]	; (800fd20 <SD_write+0xa8>)
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d102      	bne.n	800fce4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800fcde:	2301      	movs	r3, #1
 800fce0:	75fb      	strb	r3, [r7, #23]
 800fce2:	e017      	b.n	800fd14 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800fce4:	4b0e      	ldr	r3, [pc, #56]	; (800fd20 <SD_write+0xa8>)
 800fce6:	2200      	movs	r2, #0
 800fce8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800fcea:	f7f2 f94f 	bl	8001f8c <HAL_GetTick>
 800fcee:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800fcf0:	e007      	b.n	800fd02 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fcf2:	f7ff feab 	bl	800fa4c <BSP_SD_GetCardState>
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d102      	bne.n	800fd02 <SD_write+0x8a>
          {
            res = RES_OK;
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	75fb      	strb	r3, [r7, #23]
            break;
 800fd00:	e008      	b.n	800fd14 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800fd02:	f7f2 f943 	bl	8001f8c <HAL_GetTick>
 800fd06:	4602      	mov	r2, r0
 800fd08:	693b      	ldr	r3, [r7, #16]
 800fd0a:	1ad3      	subs	r3, r2, r3
 800fd0c:	f247 522f 	movw	r2, #29999	; 0x752f
 800fd10:	4293      	cmp	r3, r2
 800fd12:	d9ee      	bls.n	800fcf2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800fd14:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd16:	4618      	mov	r0, r3
 800fd18:	3718      	adds	r7, #24
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	bd80      	pop	{r7, pc}
 800fd1e:	bf00      	nop
 800fd20:	240009fc 	.word	0x240009fc

0800fd24 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b08c      	sub	sp, #48	; 0x30
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	4603      	mov	r3, r0
 800fd2c:	603a      	str	r2, [r7, #0]
 800fd2e:	71fb      	strb	r3, [r7, #7]
 800fd30:	460b      	mov	r3, r1
 800fd32:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800fd34:	2301      	movs	r3, #1
 800fd36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800fd3a:	4b25      	ldr	r3, [pc, #148]	; (800fdd0 <SD_ioctl+0xac>)
 800fd3c:	781b      	ldrb	r3, [r3, #0]
 800fd3e:	b2db      	uxtb	r3, r3
 800fd40:	f003 0301 	and.w	r3, r3, #1
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d001      	beq.n	800fd4c <SD_ioctl+0x28>
 800fd48:	2303      	movs	r3, #3
 800fd4a:	e03c      	b.n	800fdc6 <SD_ioctl+0xa2>

  switch (cmd)
 800fd4c:	79bb      	ldrb	r3, [r7, #6]
 800fd4e:	2b03      	cmp	r3, #3
 800fd50:	d834      	bhi.n	800fdbc <SD_ioctl+0x98>
 800fd52:	a201      	add	r2, pc, #4	; (adr r2, 800fd58 <SD_ioctl+0x34>)
 800fd54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd58:	0800fd69 	.word	0x0800fd69
 800fd5c:	0800fd71 	.word	0x0800fd71
 800fd60:	0800fd89 	.word	0x0800fd89
 800fd64:	0800fda3 	.word	0x0800fda3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800fd68:	2300      	movs	r3, #0
 800fd6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800fd6e:	e028      	b.n	800fdc2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800fd70:	f107 0308 	add.w	r3, r7, #8
 800fd74:	4618      	mov	r0, r3
 800fd76:	f7ff fe79 	bl	800fa6c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800fd7a:	6a3a      	ldr	r2, [r7, #32]
 800fd7c:	683b      	ldr	r3, [r7, #0]
 800fd7e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800fd80:	2300      	movs	r3, #0
 800fd82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800fd86:	e01c      	b.n	800fdc2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800fd88:	f107 0308 	add.w	r3, r7, #8
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	f7ff fe6d 	bl	800fa6c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800fd92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd94:	b29a      	uxth	r2, r3
 800fd96:	683b      	ldr	r3, [r7, #0]
 800fd98:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800fda0:	e00f      	b.n	800fdc2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800fda2:	f107 0308 	add.w	r3, r7, #8
 800fda6:	4618      	mov	r0, r3
 800fda8:	f7ff fe60 	bl	800fa6c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800fdac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdae:	0a5a      	lsrs	r2, r3, #9
 800fdb0:	683b      	ldr	r3, [r7, #0]
 800fdb2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800fdba:	e002      	b.n	800fdc2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800fdbc:	2304      	movs	r3, #4
 800fdbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800fdc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	3730      	adds	r7, #48	; 0x30
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	bd80      	pop	{r7, pc}
 800fdce:	bf00      	nop
 800fdd0:	24000011 	.word	0x24000011

0800fdd4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800fdd4:	b480      	push	{r7}
 800fdd6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800fdd8:	4b03      	ldr	r3, [pc, #12]	; (800fde8 <BSP_SD_WriteCpltCallback+0x14>)
 800fdda:	2201      	movs	r2, #1
 800fddc:	601a      	str	r2, [r3, #0]
}
 800fdde:	bf00      	nop
 800fde0:	46bd      	mov	sp, r7
 800fde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde6:	4770      	bx	lr
 800fde8:	240009fc 	.word	0x240009fc

0800fdec <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800fdec:	b480      	push	{r7}
 800fdee:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800fdf0:	4b03      	ldr	r3, [pc, #12]	; (800fe00 <BSP_SD_ReadCpltCallback+0x14>)
 800fdf2:	2201      	movs	r2, #1
 800fdf4:	601a      	str	r2, [r3, #0]
}
 800fdf6:	bf00      	nop
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdfe:	4770      	bx	lr
 800fe00:	24000a00 	.word	0x24000a00

0800fe04 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fe04:	b580      	push	{r7, lr}
 800fe06:	b084      	sub	sp, #16
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	6078      	str	r0, [r7, #4]
 800fe0c:	460b      	mov	r3, r1
 800fe0e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800fe10:	f248 0074 	movw	r0, #32884	; 0x8074
 800fe14:	f005 fed0 	bl	8015bb8 <malloc>
 800fe18:	4603      	mov	r3, r0
 800fe1a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d105      	bne.n	800fe2e <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	2200      	movs	r2, #0
 800fe26:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800fe2a:	2302      	movs	r3, #2
 800fe2c:	e034      	b.n	800fe98 <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	68fa      	ldr	r2, [r7, #12]
 800fe32:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	7c1b      	ldrb	r3, [r3, #16]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d115      	bne.n	800fe6a <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800fe3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fe42:	2202      	movs	r2, #2
 800fe44:	2101      	movs	r1, #1
 800fe46:	6878      	ldr	r0, [r7, #4]
 800fe48:	f005 fd1d 	bl	8015886 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	2201      	movs	r2, #1
 800fe50:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800fe54:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fe58:	2202      	movs	r2, #2
 800fe5a:	2181      	movs	r1, #129	; 0x81
 800fe5c:	6878      	ldr	r0, [r7, #4]
 800fe5e:	f005 fd12 	bl	8015886 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	2201      	movs	r2, #1
 800fe66:	871a      	strh	r2, [r3, #56]	; 0x38
 800fe68:	e012      	b.n	800fe90 <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800fe6a:	2340      	movs	r3, #64	; 0x40
 800fe6c:	2202      	movs	r2, #2
 800fe6e:	2101      	movs	r1, #1
 800fe70:	6878      	ldr	r0, [r7, #4]
 800fe72:	f005 fd08 	bl	8015886 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	2201      	movs	r2, #1
 800fe7a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800fe7e:	2340      	movs	r3, #64	; 0x40
 800fe80:	2202      	movs	r2, #2
 800fe82:	2181      	movs	r1, #129	; 0x81
 800fe84:	6878      	ldr	r0, [r7, #4]
 800fe86:	f005 fcfe 	bl	8015886 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	2201      	movs	r2, #1
 800fe8e:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800fe90:	6878      	ldr	r0, [r7, #4]
 800fe92:	f000 f98e 	bl	80101b2 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800fe96:	2300      	movs	r3, #0
}
 800fe98:	4618      	mov	r0, r3
 800fe9a:	3710      	adds	r7, #16
 800fe9c:	46bd      	mov	sp, r7
 800fe9e:	bd80      	pop	{r7, pc}

0800fea0 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b082      	sub	sp, #8
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	6078      	str	r0, [r7, #4]
 800fea8:	460b      	mov	r3, r1
 800feaa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800feac:	2101      	movs	r1, #1
 800feae:	6878      	ldr	r0, [r7, #4]
 800feb0:	f005 fd0f 	bl	80158d2 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2200      	movs	r2, #0
 800feb8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800febc:	2181      	movs	r1, #129	; 0x81
 800febe:	6878      	ldr	r0, [r7, #4]
 800fec0:	f005 fd07 	bl	80158d2 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	2200      	movs	r2, #0
 800fec8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 800feca:	6878      	ldr	r0, [r7, #4]
 800fecc:	f000 f9cf 	bl	801026e <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d009      	beq.n	800feee <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fee0:	4618      	mov	r0, r3
 800fee2:	f005 fe71 	bl	8015bc8 <free>
    pdev->pClassData = NULL;
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	2200      	movs	r2, #0
 800feea:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800feee:	2300      	movs	r3, #0
}
 800fef0:	4618      	mov	r0, r3
 800fef2:	3708      	adds	r7, #8
 800fef4:	46bd      	mov	sp, r7
 800fef6:	bd80      	pop	{r7, pc}

0800fef8 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fef8:	b580      	push	{r7, lr}
 800fefa:	b086      	sub	sp, #24
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
 800ff00:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ff08:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800ff0e:	2300      	movs	r3, #0
 800ff10:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ff12:	683b      	ldr	r3, [r7, #0]
 800ff14:	781b      	ldrb	r3, [r3, #0]
 800ff16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d04d      	beq.n	800ffba <USBD_MSC_Setup+0xc2>
 800ff1e:	2b20      	cmp	r3, #32
 800ff20:	f040 80c6 	bne.w	80100b0 <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800ff24:	683b      	ldr	r3, [r7, #0]
 800ff26:	785b      	ldrb	r3, [r3, #1]
 800ff28:	2bfe      	cmp	r3, #254	; 0xfe
 800ff2a:	d002      	beq.n	800ff32 <USBD_MSC_Setup+0x3a>
 800ff2c:	2bff      	cmp	r3, #255	; 0xff
 800ff2e:	d024      	beq.n	800ff7a <USBD_MSC_Setup+0x82>
 800ff30:	e03b      	b.n	800ffaa <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800ff32:	683b      	ldr	r3, [r7, #0]
 800ff34:	885b      	ldrh	r3, [r3, #2]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d118      	bne.n	800ff6c <USBD_MSC_Setup+0x74>
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	88db      	ldrh	r3, [r3, #6]
 800ff3e:	2b01      	cmp	r3, #1
 800ff40:	d114      	bne.n	800ff6c <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 800ff42:	683b      	ldr	r3, [r7, #0]
 800ff44:	781b      	ldrb	r3, [r3, #0]
 800ff46:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	da0f      	bge.n	800ff6c <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ff52:	699b      	ldr	r3, [r3, #24]
 800ff54:	4798      	blx	r3
 800ff56:	4603      	mov	r3, r0
 800ff58:	461a      	mov	r2, r3
 800ff5a:	693b      	ldr	r3, [r7, #16]
 800ff5c:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800ff5e:	693b      	ldr	r3, [r7, #16]
 800ff60:	2201      	movs	r2, #1
 800ff62:	4619      	mov	r1, r3
 800ff64:	6878      	ldr	r0, [r7, #4]
 800ff66:	f002 fdaa 	bl	8012abe <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ff6a:	e025      	b.n	800ffb8 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800ff6c:	6839      	ldr	r1, [r7, #0]
 800ff6e:	6878      	ldr	r0, [r7, #4]
 800ff70:	f002 fd34 	bl	80129dc <USBD_CtlError>
        ret = USBD_FAIL;
 800ff74:	2303      	movs	r3, #3
 800ff76:	75fb      	strb	r3, [r7, #23]
      break;
 800ff78:	e01e      	b.n	800ffb8 <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800ff7a:	683b      	ldr	r3, [r7, #0]
 800ff7c:	885b      	ldrh	r3, [r3, #2]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d10c      	bne.n	800ff9c <USBD_MSC_Setup+0xa4>
 800ff82:	683b      	ldr	r3, [r7, #0]
 800ff84:	88db      	ldrh	r3, [r3, #6]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d108      	bne.n	800ff9c <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 800ff8a:	683b      	ldr	r3, [r7, #0]
 800ff8c:	781b      	ldrb	r3, [r3, #0]
 800ff8e:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	db03      	blt.n	800ff9c <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 800ff94:	6878      	ldr	r0, [r7, #4]
 800ff96:	f000 f947 	bl	8010228 <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ff9a:	e00d      	b.n	800ffb8 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800ff9c:	6839      	ldr	r1, [r7, #0]
 800ff9e:	6878      	ldr	r0, [r7, #4]
 800ffa0:	f002 fd1c 	bl	80129dc <USBD_CtlError>
        ret = USBD_FAIL;
 800ffa4:	2303      	movs	r3, #3
 800ffa6:	75fb      	strb	r3, [r7, #23]
      break;
 800ffa8:	e006      	b.n	800ffb8 <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 800ffaa:	6839      	ldr	r1, [r7, #0]
 800ffac:	6878      	ldr	r0, [r7, #4]
 800ffae:	f002 fd15 	bl	80129dc <USBD_CtlError>
      ret = USBD_FAIL;
 800ffb2:	2303      	movs	r3, #3
 800ffb4:	75fb      	strb	r3, [r7, #23]
      break;
 800ffb6:	bf00      	nop
    }
    break;
 800ffb8:	e081      	b.n	80100be <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ffba:	683b      	ldr	r3, [r7, #0]
 800ffbc:	785b      	ldrb	r3, [r3, #1]
 800ffbe:	2b0b      	cmp	r3, #11
 800ffc0:	d86d      	bhi.n	801009e <USBD_MSC_Setup+0x1a6>
 800ffc2:	a201      	add	r2, pc, #4	; (adr r2, 800ffc8 <USBD_MSC_Setup+0xd0>)
 800ffc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffc8:	0800fff9 	.word	0x0800fff9
 800ffcc:	0801006f 	.word	0x0801006f
 800ffd0:	0801009f 	.word	0x0801009f
 800ffd4:	0801009f 	.word	0x0801009f
 800ffd8:	0801009f 	.word	0x0801009f
 800ffdc:	0801009f 	.word	0x0801009f
 800ffe0:	0801009f 	.word	0x0801009f
 800ffe4:	0801009f 	.word	0x0801009f
 800ffe8:	0801009f 	.word	0x0801009f
 800ffec:	0801009f 	.word	0x0801009f
 800fff0:	08010021 	.word	0x08010021
 800fff4:	08010049 	.word	0x08010049
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fffe:	2b03      	cmp	r3, #3
 8010000:	d107      	bne.n	8010012 <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010002:	f107 030e 	add.w	r3, r7, #14
 8010006:	2202      	movs	r2, #2
 8010008:	4619      	mov	r1, r3
 801000a:	6878      	ldr	r0, [r7, #4]
 801000c:	f002 fd57 	bl	8012abe <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8010010:	e04d      	b.n	80100ae <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 8010012:	6839      	ldr	r1, [r7, #0]
 8010014:	6878      	ldr	r0, [r7, #4]
 8010016:	f002 fce1 	bl	80129dc <USBD_CtlError>
        ret = USBD_FAIL;
 801001a:	2303      	movs	r3, #3
 801001c:	75fb      	strb	r3, [r7, #23]
      break;
 801001e:	e046      	b.n	80100ae <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010026:	2b03      	cmp	r3, #3
 8010028:	d107      	bne.n	801003a <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 801002a:	693b      	ldr	r3, [r7, #16]
 801002c:	3304      	adds	r3, #4
 801002e:	2201      	movs	r2, #1
 8010030:	4619      	mov	r1, r3
 8010032:	6878      	ldr	r0, [r7, #4]
 8010034:	f002 fd43 	bl	8012abe <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8010038:	e039      	b.n	80100ae <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 801003a:	6839      	ldr	r1, [r7, #0]
 801003c:	6878      	ldr	r0, [r7, #4]
 801003e:	f002 fccd 	bl	80129dc <USBD_CtlError>
        ret = USBD_FAIL;
 8010042:	2303      	movs	r3, #3
 8010044:	75fb      	strb	r3, [r7, #23]
      break;
 8010046:	e032      	b.n	80100ae <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801004e:	2b03      	cmp	r3, #3
 8010050:	d106      	bne.n	8010060 <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 8010052:	683b      	ldr	r3, [r7, #0]
 8010054:	885b      	ldrh	r3, [r3, #2]
 8010056:	b2db      	uxtb	r3, r3
 8010058:	461a      	mov	r2, r3
 801005a:	693b      	ldr	r3, [r7, #16]
 801005c:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 801005e:	e026      	b.n	80100ae <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 8010060:	6839      	ldr	r1, [r7, #0]
 8010062:	6878      	ldr	r0, [r7, #4]
 8010064:	f002 fcba 	bl	80129dc <USBD_CtlError>
        ret = USBD_FAIL;
 8010068:	2303      	movs	r3, #3
 801006a:	75fb      	strb	r3, [r7, #23]
      break;
 801006c:	e01f      	b.n	80100ae <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010074:	2b03      	cmp	r3, #3
 8010076:	d119      	bne.n	80100ac <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 8010078:	683b      	ldr	r3, [r7, #0]
 801007a:	885b      	ldrh	r3, [r3, #2]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d115      	bne.n	80100ac <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8010080:	683b      	ldr	r3, [r7, #0]
 8010082:	889b      	ldrh	r3, [r3, #4]
 8010084:	b2db      	uxtb	r3, r3
 8010086:	4619      	mov	r1, r3
 8010088:	6878      	ldr	r0, [r7, #4]
 801008a:	f005 fc41 	bl	8015910 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 801008e:	683b      	ldr	r3, [r7, #0]
 8010090:	889b      	ldrh	r3, [r3, #4]
 8010092:	b2db      	uxtb	r3, r3
 8010094:	4619      	mov	r1, r3
 8010096:	6878      	ldr	r0, [r7, #4]
 8010098:	f000 fa90 	bl	80105bc <MSC_BOT_CplClrFeature>
        }
      }
      break;
 801009c:	e006      	b.n	80100ac <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 801009e:	6839      	ldr	r1, [r7, #0]
 80100a0:	6878      	ldr	r0, [r7, #4]
 80100a2:	f002 fc9b 	bl	80129dc <USBD_CtlError>
      ret = USBD_FAIL;
 80100a6:	2303      	movs	r3, #3
 80100a8:	75fb      	strb	r3, [r7, #23]
      break;
 80100aa:	e000      	b.n	80100ae <USBD_MSC_Setup+0x1b6>
      break;
 80100ac:	bf00      	nop
    }
    break;
 80100ae:	e006      	b.n	80100be <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 80100b0:	6839      	ldr	r1, [r7, #0]
 80100b2:	6878      	ldr	r0, [r7, #4]
 80100b4:	f002 fc92 	bl	80129dc <USBD_CtlError>
    ret = USBD_FAIL;
 80100b8:	2303      	movs	r3, #3
 80100ba:	75fb      	strb	r3, [r7, #23]
    break;
 80100bc:	bf00      	nop
  }

  return (uint8_t)ret;
 80100be:	7dfb      	ldrb	r3, [r7, #23]
}
 80100c0:	4618      	mov	r0, r3
 80100c2:	3718      	adds	r7, #24
 80100c4:	46bd      	mov	sp, r7
 80100c6:	bd80      	pop	{r7, pc}

080100c8 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b082      	sub	sp, #8
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	6078      	str	r0, [r7, #4]
 80100d0:	460b      	mov	r3, r1
 80100d2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 80100d4:	78fb      	ldrb	r3, [r7, #3]
 80100d6:	4619      	mov	r1, r3
 80100d8:	6878      	ldr	r0, [r7, #4]
 80100da:	f000 f8d9 	bl	8010290 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 80100de:	2300      	movs	r3, #0
}
 80100e0:	4618      	mov	r0, r3
 80100e2:	3708      	adds	r7, #8
 80100e4:	46bd      	mov	sp, r7
 80100e6:	bd80      	pop	{r7, pc}

080100e8 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	b082      	sub	sp, #8
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	6078      	str	r0, [r7, #4]
 80100f0:	460b      	mov	r3, r1
 80100f2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 80100f4:	78fb      	ldrb	r3, [r7, #3]
 80100f6:	4619      	mov	r1, r3
 80100f8:	6878      	ldr	r0, [r7, #4]
 80100fa:	f000 f8fd 	bl	80102f8 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 80100fe:	2300      	movs	r3, #0
}
 8010100:	4618      	mov	r0, r3
 8010102:	3708      	adds	r7, #8
 8010104:	46bd      	mov	sp, r7
 8010106:	bd80      	pop	{r7, pc}

08010108 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8010108:	b480      	push	{r7}
 801010a:	b083      	sub	sp, #12
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	2220      	movs	r2, #32
 8010114:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8010116:	4b03      	ldr	r3, [pc, #12]	; (8010124 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8010118:	4618      	mov	r0, r3
 801011a:	370c      	adds	r7, #12
 801011c:	46bd      	mov	sp, r7
 801011e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010122:	4770      	bx	lr
 8010124:	2400004c 	.word	0x2400004c

08010128 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8010128:	b480      	push	{r7}
 801012a:	b083      	sub	sp, #12
 801012c:	af00      	add	r7, sp, #0
 801012e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	2220      	movs	r2, #32
 8010134:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8010136:	4b03      	ldr	r3, [pc, #12]	; (8010144 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8010138:	4618      	mov	r0, r3
 801013a:	370c      	adds	r7, #12
 801013c:	46bd      	mov	sp, r7
 801013e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010142:	4770      	bx	lr
 8010144:	2400006c 	.word	0x2400006c

08010148 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010148:	b480      	push	{r7}
 801014a:	b083      	sub	sp, #12
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	2220      	movs	r2, #32
 8010154:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8010156:	4b03      	ldr	r3, [pc, #12]	; (8010164 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8010158:	4618      	mov	r0, r3
 801015a:	370c      	adds	r7, #12
 801015c:	46bd      	mov	sp, r7
 801015e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010162:	4770      	bx	lr
 8010164:	2400008c 	.word	0x2400008c

08010168 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010168:	b480      	push	{r7}
 801016a:	b083      	sub	sp, #12
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	220a      	movs	r2, #10
 8010174:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8010176:	4b03      	ldr	r3, [pc, #12]	; (8010184 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010178:	4618      	mov	r0, r3
 801017a:	370c      	adds	r7, #12
 801017c:	46bd      	mov	sp, r7
 801017e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010182:	4770      	bx	lr
 8010184:	240000ac 	.word	0x240000ac

08010188 <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8010188:	b480      	push	{r7}
 801018a:	b083      	sub	sp, #12
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
 8010190:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8010192:	683b      	ldr	r3, [r7, #0]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d101      	bne.n	801019c <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010198:	2303      	movs	r3, #3
 801019a:	e004      	b.n	80101a6 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	683a      	ldr	r2, [r7, #0]
 80101a0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80101a4:	2300      	movs	r3, #0
}
 80101a6:	4618      	mov	r0, r3
 80101a8:	370c      	adds	r7, #12
 80101aa:	46bd      	mov	sp, r7
 80101ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b0:	4770      	bx	lr

080101b2 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 80101b2:	b580      	push	{r7, lr}
 80101b4:	b084      	sub	sp, #16
 80101b6:	af00      	add	r7, sp, #0
 80101b8:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80101c0:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	2200      	movs	r2, #0
 80101c6:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	2200      	movs	r2, #0
 80101cc:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 80101ce:	68fa      	ldr	r2, [r7, #12]
 80101d0:	f248 0361 	movw	r3, #32865	; 0x8061
 80101d4:	4413      	add	r3, r2
 80101d6:	2200      	movs	r2, #0
 80101d8:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_sense_head = 0U;
 80101da:	68fa      	ldr	r2, [r7, #12]
 80101dc:	f248 0360 	movw	r3, #32864	; 0x8060
 80101e0:	4413      	add	r3, r2
 80101e2:	2200      	movs	r2, #0
 80101e4:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80101e6:	68fa      	ldr	r2, [r7, #12]
 80101e8:	f248 0362 	movw	r3, #32866	; 0x8062
 80101ec:	4413      	add	r3, r2
 80101ee:	2200      	movs	r2, #0
 80101f0:	701a      	strb	r2, [r3, #0]

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	2000      	movs	r0, #0
 80101fc:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 80101fe:	2101      	movs	r1, #1
 8010200:	6878      	ldr	r0, [r7, #4]
 8010202:	f005 fb85 	bl	8015910 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8010206:	2181      	movs	r1, #129	; 0x81
 8010208:	6878      	ldr	r0, [r7, #4]
 801020a:	f005 fb81 	bl	8015910 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	f248 0210 	movw	r2, #32784	; 0x8010
 8010214:	441a      	add	r2, r3
 8010216:	231f      	movs	r3, #31
 8010218:	2101      	movs	r1, #1
 801021a:	6878      	ldr	r0, [r7, #4]
 801021c:	f005 fc41 	bl	8015aa2 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8010220:	bf00      	nop
 8010222:	3710      	adds	r7, #16
 8010224:	46bd      	mov	sp, r7
 8010226:	bd80      	pop	{r7, pc}

08010228 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8010228:	b580      	push	{r7, lr}
 801022a:	b084      	sub	sp, #16
 801022c:	af00      	add	r7, sp, #0
 801022e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010236:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	2200      	movs	r2, #0
 801023c:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	2201      	movs	r2, #1
 8010242:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 8010244:	2181      	movs	r1, #129	; 0x81
 8010246:	6878      	ldr	r0, [r7, #4]
 8010248:	f005 fba0 	bl	801598c <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 801024c:	2101      	movs	r1, #1
 801024e:	6878      	ldr	r0, [r7, #4]
 8010250:	f005 fb9c 	bl	801598c <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	f248 0210 	movw	r2, #32784	; 0x8010
 801025a:	441a      	add	r2, r3
 801025c:	231f      	movs	r3, #31
 801025e:	2101      	movs	r1, #1
 8010260:	6878      	ldr	r0, [r7, #4]
 8010262:	f005 fc1e 	bl	8015aa2 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8010266:	bf00      	nop
 8010268:	3710      	adds	r7, #16
 801026a:	46bd      	mov	sp, r7
 801026c:	bd80      	pop	{r7, pc}

0801026e <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 801026e:	b480      	push	{r7}
 8010270:	b085      	sub	sp, #20
 8010272:	af00      	add	r7, sp, #0
 8010274:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801027c:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	2200      	movs	r2, #0
 8010282:	721a      	strb	r2, [r3, #8]
}
 8010284:	bf00      	nop
 8010286:	3714      	adds	r7, #20
 8010288:	46bd      	mov	sp, r7
 801028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028e:	4770      	bx	lr

08010290 <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010290:	b580      	push	{r7, lr}
 8010292:	b084      	sub	sp, #16
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
 8010298:	460b      	mov	r3, r1
 801029a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80102a2:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	7a1b      	ldrb	r3, [r3, #8]
 80102a8:	2b02      	cmp	r3, #2
 80102aa:	d004      	beq.n	80102b6 <MSC_BOT_DataIn+0x26>
 80102ac:	2b02      	cmp	r3, #2
 80102ae:	db1c      	blt.n	80102ea <MSC_BOT_DataIn+0x5a>
 80102b0:	2b04      	cmp	r3, #4
 80102b2:	dc1a      	bgt.n	80102ea <MSC_BOT_DataIn+0x5a>
 80102b4:	e014      	b.n	80102e0 <MSC_BOT_DataIn+0x50>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80102b6:	68fa      	ldr	r2, [r7, #12]
 80102b8:	f248 031d 	movw	r3, #32797	; 0x801d
 80102bc:	4413      	add	r3, r2
 80102be:	7819      	ldrb	r1, [r3, #0]
 80102c0:	68fa      	ldr	r2, [r7, #12]
 80102c2:	f248 031f 	movw	r3, #32799	; 0x801f
 80102c6:	4413      	add	r3, r2
 80102c8:	461a      	mov	r2, r3
 80102ca:	6878      	ldr	r0, [r7, #4]
 80102cc:	f000 f99e 	bl	801060c <SCSI_ProcessCmd>
 80102d0:	4603      	mov	r3, r0
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	da0b      	bge.n	80102ee <MSC_BOT_DataIn+0x5e>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80102d6:	2101      	movs	r1, #1
 80102d8:	6878      	ldr	r0, [r7, #4]
 80102da:	f000 f90b 	bl	80104f4 <MSC_BOT_SendCSW>
    }
    break;
 80102de:	e006      	b.n	80102ee <MSC_BOT_DataIn+0x5e>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80102e0:	2100      	movs	r1, #0
 80102e2:	6878      	ldr	r0, [r7, #4]
 80102e4:	f000 f906 	bl	80104f4 <MSC_BOT_SendCSW>
    break;
 80102e8:	e002      	b.n	80102f0 <MSC_BOT_DataIn+0x60>

  default:
    break;
 80102ea:	bf00      	nop
 80102ec:	e000      	b.n	80102f0 <MSC_BOT_DataIn+0x60>
    break;
 80102ee:	bf00      	nop
  }
}
 80102f0:	bf00      	nop
 80102f2:	3710      	adds	r7, #16
 80102f4:	46bd      	mov	sp, r7
 80102f6:	bd80      	pop	{r7, pc}

080102f8 <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b084      	sub	sp, #16
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
 8010300:	460b      	mov	r3, r1
 8010302:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801030a:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	7a1b      	ldrb	r3, [r3, #8]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d002      	beq.n	801031a <MSC_BOT_DataOut+0x22>
 8010314:	2b01      	cmp	r3, #1
 8010316:	d004      	beq.n	8010322 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8010318:	e018      	b.n	801034c <MSC_BOT_DataOut+0x54>
      MSC_BOT_CBW_Decode(pdev);
 801031a:	6878      	ldr	r0, [r7, #4]
 801031c:	f000 f81a 	bl	8010354 <MSC_BOT_CBW_Decode>
      break;
 8010320:	e014      	b.n	801034c <MSC_BOT_DataOut+0x54>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8010322:	68fa      	ldr	r2, [r7, #12]
 8010324:	f248 031d 	movw	r3, #32797	; 0x801d
 8010328:	4413      	add	r3, r2
 801032a:	7819      	ldrb	r1, [r3, #0]
 801032c:	68fa      	ldr	r2, [r7, #12]
 801032e:	f248 031f 	movw	r3, #32799	; 0x801f
 8010332:	4413      	add	r3, r2
 8010334:	461a      	mov	r2, r3
 8010336:	6878      	ldr	r0, [r7, #4]
 8010338:	f000 f968 	bl	801060c <SCSI_ProcessCmd>
 801033c:	4603      	mov	r3, r0
 801033e:	2b00      	cmp	r3, #0
 8010340:	da03      	bge.n	801034a <MSC_BOT_DataOut+0x52>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8010342:	2101      	movs	r1, #1
 8010344:	6878      	ldr	r0, [r7, #4]
 8010346:	f000 f8d5 	bl	80104f4 <MSC_BOT_SendCSW>
      break;
 801034a:	bf00      	nop
  }
}
 801034c:	bf00      	nop
 801034e:	3710      	adds	r7, #16
 8010350:	46bd      	mov	sp, r7
 8010352:	bd80      	pop	{r7, pc}

08010354 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8010354:	b580      	push	{r7, lr}
 8010356:	b084      	sub	sp, #16
 8010358:	af00      	add	r7, sp, #0
 801035a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010362:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8010364:	68fa      	ldr	r2, [r7, #12]
 8010366:	f248 0314 	movw	r3, #32788	; 0x8014
 801036a:	4413      	add	r3, r2
 801036c:	681a      	ldr	r2, [r3, #0]
 801036e:	68f9      	ldr	r1, [r7, #12]
 8010370:	f248 0334 	movw	r3, #32820	; 0x8034
 8010374:	440b      	add	r3, r1
 8010376:	601a      	str	r2, [r3, #0]
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8010378:	68fa      	ldr	r2, [r7, #12]
 801037a:	f248 0318 	movw	r3, #32792	; 0x8018
 801037e:	4413      	add	r3, r2
 8010380:	681a      	ldr	r2, [r3, #0]
 8010382:	68f9      	ldr	r1, [r7, #12]
 8010384:	f248 0338 	movw	r3, #32824	; 0x8038
 8010388:	440b      	add	r3, r1
 801038a:	601a      	str	r2, [r3, #0]

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 801038c:	2101      	movs	r1, #1
 801038e:	6878      	ldr	r0, [r7, #4]
 8010390:	f005 fba8 	bl	8015ae4 <USBD_LL_GetRxDataSize>
 8010394:	4603      	mov	r3, r0
 8010396:	2b1f      	cmp	r3, #31
 8010398:	d11c      	bne.n	80103d4 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801039a:	68fa      	ldr	r2, [r7, #12]
 801039c:	f248 0310 	movw	r3, #32784	; 0x8010
 80103a0:	4413      	add	r3, r2
 80103a2:	681b      	ldr	r3, [r3, #0]
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80103a4:	4a38      	ldr	r2, [pc, #224]	; (8010488 <MSC_BOT_CBW_Decode+0x134>)
 80103a6:	4293      	cmp	r3, r2
 80103a8:	d114      	bne.n	80103d4 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80103aa:	68fa      	ldr	r2, [r7, #12]
 80103ac:	f248 031d 	movw	r3, #32797	; 0x801d
 80103b0:	4413      	add	r3, r2
 80103b2:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80103b4:	2b01      	cmp	r3, #1
 80103b6:	d80d      	bhi.n	80103d4 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80103b8:	68fa      	ldr	r2, [r7, #12]
 80103ba:	f248 031e 	movw	r3, #32798	; 0x801e
 80103be:	4413      	add	r3, r2
 80103c0:	781b      	ldrb	r3, [r3, #0]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d006      	beq.n	80103d4 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bCBLength > 16U))
 80103c6:	68fa      	ldr	r2, [r7, #12]
 80103c8:	f248 031e 	movw	r3, #32798	; 0x801e
 80103cc:	4413      	add	r3, r2
 80103ce:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80103d0:	2b10      	cmp	r3, #16
 80103d2:	d910      	bls.n	80103f6 <MSC_BOT_CBW_Decode+0xa2>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80103d4:	68fa      	ldr	r2, [r7, #12]
 80103d6:	f248 031d 	movw	r3, #32797	; 0x801d
 80103da:	4413      	add	r3, r2
 80103dc:	7819      	ldrb	r1, [r3, #0]
 80103de:	2320      	movs	r3, #32
 80103e0:	2205      	movs	r2, #5
 80103e2:	6878      	ldr	r0, [r7, #4]
 80103e4:	f000 fd36 	bl	8010e54 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	2202      	movs	r2, #2
 80103ec:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 80103ee:	6878      	ldr	r0, [r7, #4]
 80103f0:	f000 f8b2 	bl	8010558 <MSC_BOT_Abort>
 80103f4:	e044      	b.n	8010480 <MSC_BOT_CBW_Decode+0x12c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80103f6:	68fa      	ldr	r2, [r7, #12]
 80103f8:	f248 031d 	movw	r3, #32797	; 0x801d
 80103fc:	4413      	add	r3, r2
 80103fe:	7819      	ldrb	r1, [r3, #0]
 8010400:	68fa      	ldr	r2, [r7, #12]
 8010402:	f248 031f 	movw	r3, #32799	; 0x801f
 8010406:	4413      	add	r3, r2
 8010408:	461a      	mov	r2, r3
 801040a:	6878      	ldr	r0, [r7, #4]
 801040c:	f000 f8fe 	bl	801060c <SCSI_ProcessCmd>
 8010410:	4603      	mov	r3, r0
 8010412:	2b00      	cmp	r3, #0
 8010414:	da0c      	bge.n	8010430 <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	7a1b      	ldrb	r3, [r3, #8]
 801041a:	2b05      	cmp	r3, #5
 801041c:	d104      	bne.n	8010428 <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801041e:	2101      	movs	r1, #1
 8010420:	6878      	ldr	r0, [r7, #4]
 8010422:	f000 f867 	bl	80104f4 <MSC_BOT_SendCSW>
 8010426:	e02b      	b.n	8010480 <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8010428:	6878      	ldr	r0, [r7, #4]
 801042a:	f000 f895 	bl	8010558 <MSC_BOT_Abort>
 801042e:	e027      	b.n	8010480 <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	7a1b      	ldrb	r3, [r3, #8]
 8010434:	2b02      	cmp	r3, #2
 8010436:	d022      	beq.n	801047e <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801043c:	2b01      	cmp	r3, #1
 801043e:	d01e      	beq.n	801047e <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8010444:	2b03      	cmp	r3, #3
 8010446:	d01a      	beq.n	801047e <MSC_BOT_CBW_Decode+0x12a>
    {
      if (hmsc->bot_data_length > 0U)
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	68db      	ldr	r3, [r3, #12]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d009      	beq.n	8010464 <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	f103 0110 	add.w	r1, r3, #16
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	68db      	ldr	r3, [r3, #12]
 801045a:	461a      	mov	r2, r3
 801045c:	6878      	ldr	r0, [r7, #4]
 801045e:	f000 f815 	bl	801048c <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8010462:	e00d      	b.n	8010480 <MSC_BOT_CBW_Decode+0x12c>
      }
      else if (hmsc->bot_data_length == 0U)
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	68db      	ldr	r3, [r3, #12]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d104      	bne.n	8010476 <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801046c:	2100      	movs	r1, #0
 801046e:	6878      	ldr	r0, [r7, #4]
 8010470:	f000 f840 	bl	80104f4 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8010474:	e004      	b.n	8010480 <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8010476:	6878      	ldr	r0, [r7, #4]
 8010478:	f000 f86e 	bl	8010558 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 801047c:	e000      	b.n	8010480 <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    else
    {
      return;
 801047e:	bf00      	nop
    }
  }
}
 8010480:	3710      	adds	r7, #16
 8010482:	46bd      	mov	sp, r7
 8010484:	bd80      	pop	{r7, pc}
 8010486:	bf00      	nop
 8010488:	43425355 	.word	0x43425355

0801048c <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 801048c:	b580      	push	{r7, lr}
 801048e:	b086      	sub	sp, #24
 8010490:	af00      	add	r7, sp, #0
 8010492:	60f8      	str	r0, [r7, #12]
 8010494:	60b9      	str	r1, [r7, #8]
 8010496:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801049e:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 80104a0:	697a      	ldr	r2, [r7, #20]
 80104a2:	f248 0318 	movw	r3, #32792	; 0x8018
 80104a6:	4413      	add	r3, r2
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	687a      	ldr	r2, [r7, #4]
 80104ac:	4293      	cmp	r3, r2
 80104ae:	bf28      	it	cs
 80104b0:	4613      	movcs	r3, r2
 80104b2:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 80104b4:	697a      	ldr	r2, [r7, #20]
 80104b6:	f248 0338 	movw	r3, #32824	; 0x8038
 80104ba:	4413      	add	r3, r2
 80104bc:	681a      	ldr	r2, [r3, #0]
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	1ad2      	subs	r2, r2, r3
 80104c2:	6979      	ldr	r1, [r7, #20]
 80104c4:	f248 0338 	movw	r3, #32824	; 0x8038
 80104c8:	440b      	add	r3, r1
 80104ca:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 80104cc:	697a      	ldr	r2, [r7, #20]
 80104ce:	f248 033c 	movw	r3, #32828	; 0x803c
 80104d2:	4413      	add	r3, r2
 80104d4:	2200      	movs	r2, #0
 80104d6:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 80104d8:	697b      	ldr	r3, [r7, #20]
 80104da:	2204      	movs	r2, #4
 80104dc:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 80104de:	693b      	ldr	r3, [r7, #16]
 80104e0:	68ba      	ldr	r2, [r7, #8]
 80104e2:	2181      	movs	r1, #129	; 0x81
 80104e4:	68f8      	ldr	r0, [r7, #12]
 80104e6:	f005 fabb 	bl	8015a60 <USBD_LL_Transmit>
}
 80104ea:	bf00      	nop
 80104ec:	3718      	adds	r7, #24
 80104ee:	46bd      	mov	sp, r7
 80104f0:	bd80      	pop	{r7, pc}
	...

080104f4 <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 80104f4:	b580      	push	{r7, lr}
 80104f6:	b084      	sub	sp, #16
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	6078      	str	r0, [r7, #4]
 80104fc:	460b      	mov	r3, r1
 80104fe:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010506:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8010508:	68fa      	ldr	r2, [r7, #12]
 801050a:	f248 0330 	movw	r3, #32816	; 0x8030
 801050e:	4413      	add	r3, r2
 8010510:	4a10      	ldr	r2, [pc, #64]	; (8010554 <MSC_BOT_SendCSW+0x60>)
 8010512:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = CSW_Status;
 8010514:	68fa      	ldr	r2, [r7, #12]
 8010516:	f248 033c 	movw	r3, #32828	; 0x803c
 801051a:	4413      	add	r3, r2
 801051c:	78fa      	ldrb	r2, [r7, #3]
 801051e:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_IDLE;
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	2200      	movs	r2, #0
 8010524:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	f248 0230 	movw	r2, #32816	; 0x8030
 801052c:	441a      	add	r2, r3
 801052e:	230d      	movs	r3, #13
 8010530:	2181      	movs	r1, #129	; 0x81
 8010532:	6878      	ldr	r0, [r7, #4]
 8010534:	f005 fa94 	bl	8015a60 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	f248 0210 	movw	r2, #32784	; 0x8010
 801053e:	441a      	add	r2, r3
 8010540:	231f      	movs	r3, #31
 8010542:	2101      	movs	r1, #1
 8010544:	6878      	ldr	r0, [r7, #4]
 8010546:	f005 faac 	bl	8015aa2 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 801054a:	bf00      	nop
 801054c:	3710      	adds	r7, #16
 801054e:	46bd      	mov	sp, r7
 8010550:	bd80      	pop	{r7, pc}
 8010552:	bf00      	nop
 8010554:	53425355 	.word	0x53425355

08010558 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b084      	sub	sp, #16
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010566:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8010568:	68fa      	ldr	r2, [r7, #12]
 801056a:	f248 031c 	movw	r3, #32796	; 0x801c
 801056e:	4413      	add	r3, r2
 8010570:	781b      	ldrb	r3, [r3, #0]
 8010572:	2b00      	cmp	r3, #0
 8010574:	d10e      	bne.n	8010594 <MSC_BOT_Abort+0x3c>
      (hmsc->cbw.dDataLength != 0U) &&
 8010576:	68fa      	ldr	r2, [r7, #12]
 8010578:	f248 0318 	movw	r3, #32792	; 0x8018
 801057c:	4413      	add	r3, r2
 801057e:	681b      	ldr	r3, [r3, #0]
  if ((hmsc->cbw.bmFlags == 0U) &&
 8010580:	2b00      	cmp	r3, #0
 8010582:	d007      	beq.n	8010594 <MSC_BOT_Abort+0x3c>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8010588:	2b00      	cmp	r3, #0
 801058a:	d103      	bne.n	8010594 <MSC_BOT_Abort+0x3c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 801058c:	2101      	movs	r1, #1
 801058e:	6878      	ldr	r0, [r7, #4]
 8010590:	f005 f9dd 	bl	801594e <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8010594:	2181      	movs	r1, #129	; 0x81
 8010596:	6878      	ldr	r0, [r7, #4]
 8010598:	f005 f9d9 	bl	801594e <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	7a5b      	ldrb	r3, [r3, #9]
 80105a0:	2b02      	cmp	r3, #2
 80105a2:	d107      	bne.n	80105b4 <MSC_BOT_Abort+0x5c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80105a4:	2181      	movs	r1, #129	; 0x81
 80105a6:	6878      	ldr	r0, [r7, #4]
 80105a8:	f005 f9d1 	bl	801594e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80105ac:	2101      	movs	r1, #1
 80105ae:	6878      	ldr	r0, [r7, #4]
 80105b0:	f005 f9cd 	bl	801594e <USBD_LL_StallEP>
  }
}
 80105b4:	bf00      	nop
 80105b6:	3710      	adds	r7, #16
 80105b8:	46bd      	mov	sp, r7
 80105ba:	bd80      	pop	{r7, pc}

080105bc <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80105bc:	b580      	push	{r7, lr}
 80105be:	b084      	sub	sp, #16
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
 80105c4:	460b      	mov	r3, r1
 80105c6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80105ce:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	7a5b      	ldrb	r3, [r3, #9]
 80105d4:	2b02      	cmp	r3, #2
 80105d6:	d108      	bne.n	80105ea <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80105d8:	2181      	movs	r1, #129	; 0x81
 80105da:	6878      	ldr	r0, [r7, #4]
 80105dc:	f005 f9b7 	bl	801594e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80105e0:	2101      	movs	r1, #1
 80105e2:	6878      	ldr	r0, [r7, #4]
 80105e4:	f005 f9b3 	bl	801594e <USBD_LL_StallEP>
 80105e8:	e00d      	b.n	8010606 <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80105ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	da08      	bge.n	8010604 <MSC_BOT_CplClrFeature+0x48>
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	7a5b      	ldrb	r3, [r3, #9]
 80105f6:	2b01      	cmp	r3, #1
 80105f8:	d004      	beq.n	8010604 <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80105fa:	2101      	movs	r1, #1
 80105fc:	6878      	ldr	r0, [r7, #4]
 80105fe:	f7ff ff79 	bl	80104f4 <MSC_BOT_SendCSW>
 8010602:	e000      	b.n	8010606 <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 8010604:	bf00      	nop
  }
}
 8010606:	3710      	adds	r7, #16
 8010608:	46bd      	mov	sp, r7
 801060a:	bd80      	pop	{r7, pc}

0801060c <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 801060c:	b580      	push	{r7, lr}
 801060e:	b086      	sub	sp, #24
 8010610:	af00      	add	r7, sp, #0
 8010612:	60f8      	str	r0, [r7, #12]
 8010614:	460b      	mov	r3, r1
 8010616:	607a      	str	r2, [r7, #4]
 8010618:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010620:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	781b      	ldrb	r3, [r3, #0]
 8010626:	2b25      	cmp	r3, #37	; 0x25
 8010628:	d06e      	beq.n	8010708 <SCSI_ProcessCmd+0xfc>
 801062a:	2b25      	cmp	r3, #37	; 0x25
 801062c:	dc11      	bgt.n	8010652 <SCSI_ProcessCmd+0x46>
 801062e:	2b1a      	cmp	r3, #26
 8010630:	d04f      	beq.n	80106d2 <SCSI_ProcessCmd+0xc6>
 8010632:	2b1a      	cmp	r3, #26
 8010634:	dc06      	bgt.n	8010644 <SCSI_ProcessCmd+0x38>
 8010636:	2b03      	cmp	r3, #3
 8010638:	d027      	beq.n	801068a <SCSI_ProcessCmd+0x7e>
 801063a:	2b12      	cmp	r3, #18
 801063c:	d02e      	beq.n	801069c <SCSI_ProcessCmd+0x90>
 801063e:	2b00      	cmp	r3, #0
 8010640:	d01a      	beq.n	8010678 <SCSI_ProcessCmd+0x6c>
 8010642:	e0a0      	b.n	8010786 <SCSI_ProcessCmd+0x17a>
 8010644:	2b1e      	cmp	r3, #30
 8010646:	d03b      	beq.n	80106c0 <SCSI_ProcessCmd+0xb4>
 8010648:	2b23      	cmp	r3, #35	; 0x23
 801064a:	d054      	beq.n	80106f6 <SCSI_ProcessCmd+0xea>
 801064c:	2b1b      	cmp	r3, #27
 801064e:	d02e      	beq.n	80106ae <SCSI_ProcessCmd+0xa2>
 8010650:	e099      	b.n	8010786 <SCSI_ProcessCmd+0x17a>
 8010652:	2b5a      	cmp	r3, #90	; 0x5a
 8010654:	d046      	beq.n	80106e4 <SCSI_ProcessCmd+0xd8>
 8010656:	2b5a      	cmp	r3, #90	; 0x5a
 8010658:	dc07      	bgt.n	801066a <SCSI_ProcessCmd+0x5e>
 801065a:	2b2a      	cmp	r3, #42	; 0x2a
 801065c:	d078      	beq.n	8010750 <SCSI_ProcessCmd+0x144>
 801065e:	2b2f      	cmp	r3, #47	; 0x2f
 8010660:	f000 8088 	beq.w	8010774 <SCSI_ProcessCmd+0x168>
 8010664:	2b28      	cmp	r3, #40	; 0x28
 8010666:	d061      	beq.n	801072c <SCSI_ProcessCmd+0x120>
 8010668:	e08d      	b.n	8010786 <SCSI_ProcessCmd+0x17a>
 801066a:	2ba8      	cmp	r3, #168	; 0xa8
 801066c:	d067      	beq.n	801073e <SCSI_ProcessCmd+0x132>
 801066e:	2baa      	cmp	r3, #170	; 0xaa
 8010670:	d077      	beq.n	8010762 <SCSI_ProcessCmd+0x156>
 8010672:	2b9e      	cmp	r3, #158	; 0x9e
 8010674:	d051      	beq.n	801071a <SCSI_ProcessCmd+0x10e>
 8010676:	e086      	b.n	8010786 <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8010678:	7afb      	ldrb	r3, [r7, #11]
 801067a:	687a      	ldr	r2, [r7, #4]
 801067c:	4619      	mov	r1, r3
 801067e:	68f8      	ldr	r0, [r7, #12]
 8010680:	f000 f893 	bl	80107aa <SCSI_TestUnitReady>
 8010684:	4603      	mov	r3, r0
 8010686:	75fb      	strb	r3, [r7, #23]
    break;
 8010688:	e089      	b.n	801079e <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 801068a:	7afb      	ldrb	r3, [r7, #11]
 801068c:	687a      	ldr	r2, [r7, #4]
 801068e:	4619      	mov	r1, r3
 8010690:	68f8      	ldr	r0, [r7, #12]
 8010692:	f000 fb47 	bl	8010d24 <SCSI_RequestSense>
 8010696:	4603      	mov	r3, r0
 8010698:	75fb      	strb	r3, [r7, #23]
    break;
 801069a:	e080      	b.n	801079e <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 801069c:	7afb      	ldrb	r3, [r7, #11]
 801069e:	687a      	ldr	r2, [r7, #4]
 80106a0:	4619      	mov	r1, r3
 80106a2:	68f8      	ldr	r0, [r7, #12]
 80106a4:	f000 f8d2 	bl	801084c <SCSI_Inquiry>
 80106a8:	4603      	mov	r3, r0
 80106aa:	75fb      	strb	r3, [r7, #23]
    break;
 80106ac:	e077      	b.n	801079e <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 80106ae:	7afb      	ldrb	r3, [r7, #11]
 80106b0:	687a      	ldr	r2, [r7, #4]
 80106b2:	4619      	mov	r1, r3
 80106b4:	68f8      	ldr	r0, [r7, #12]
 80106b6:	f000 fc27 	bl	8010f08 <SCSI_StartStopUnit>
 80106ba:	4603      	mov	r3, r0
 80106bc:	75fb      	strb	r3, [r7, #23]
    break;
 80106be:	e06e      	b.n	801079e <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 80106c0:	7afb      	ldrb	r3, [r7, #11]
 80106c2:	687a      	ldr	r2, [r7, #4]
 80106c4:	4619      	mov	r1, r3
 80106c6:	68f8      	ldr	r0, [r7, #12]
 80106c8:	f000 fc71 	bl	8010fae <SCSI_AllowPreventRemovable>
 80106cc:	4603      	mov	r3, r0
 80106ce:	75fb      	strb	r3, [r7, #23]
    break;
 80106d0:	e065      	b.n	801079e <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 80106d2:	7afb      	ldrb	r3, [r7, #11]
 80106d4:	687a      	ldr	r2, [r7, #4]
 80106d6:	4619      	mov	r1, r3
 80106d8:	68f8      	ldr	r0, [r7, #12]
 80106da:	f000 fad7 	bl	8010c8c <SCSI_ModeSense6>
 80106de:	4603      	mov	r3, r0
 80106e0:	75fb      	strb	r3, [r7, #23]
    break;
 80106e2:	e05c      	b.n	801079e <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 80106e4:	7afb      	ldrb	r3, [r7, #11]
 80106e6:	687a      	ldr	r2, [r7, #4]
 80106e8:	4619      	mov	r1, r3
 80106ea:	68f8      	ldr	r0, [r7, #12]
 80106ec:	f000 faf4 	bl	8010cd8 <SCSI_ModeSense10>
 80106f0:	4603      	mov	r3, r0
 80106f2:	75fb      	strb	r3, [r7, #23]
    break;
 80106f4:	e053      	b.n	801079e <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 80106f6:	7afb      	ldrb	r3, [r7, #11]
 80106f8:	687a      	ldr	r2, [r7, #4]
 80106fa:	4619      	mov	r1, r3
 80106fc:	68f8      	ldr	r0, [r7, #12]
 80106fe:	f000 fa56 	bl	8010bae <SCSI_ReadFormatCapacity>
 8010702:	4603      	mov	r3, r0
 8010704:	75fb      	strb	r3, [r7, #23]
    break;
 8010706:	e04a      	b.n	801079e <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8010708:	7afb      	ldrb	r3, [r7, #11]
 801070a:	687a      	ldr	r2, [r7, #4]
 801070c:	4619      	mov	r1, r3
 801070e:	68f8      	ldr	r0, [r7, #12]
 8010710:	f000 f910 	bl	8010934 <SCSI_ReadCapacity10>
 8010714:	4603      	mov	r3, r0
 8010716:	75fb      	strb	r3, [r7, #23]
    break;
 8010718:	e041      	b.n	801079e <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 801071a:	7afb      	ldrb	r3, [r7, #11]
 801071c:	687a      	ldr	r2, [r7, #4]
 801071e:	4619      	mov	r1, r3
 8010720:	68f8      	ldr	r0, [r7, #12]
 8010722:	f000 f98b 	bl	8010a3c <SCSI_ReadCapacity16>
 8010726:	4603      	mov	r3, r0
 8010728:	75fb      	strb	r3, [r7, #23]
    break;
 801072a:	e038      	b.n	801079e <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 801072c:	7afb      	ldrb	r3, [r7, #11]
 801072e:	687a      	ldr	r2, [r7, #4]
 8010730:	4619      	mov	r1, r3
 8010732:	68f8      	ldr	r0, [r7, #12]
 8010734:	f000 fc62 	bl	8010ffc <SCSI_Read10>
 8010738:	4603      	mov	r3, r0
 801073a:	75fb      	strb	r3, [r7, #23]
    break;
 801073c:	e02f      	b.n	801079e <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 801073e:	7afb      	ldrb	r3, [r7, #11]
 8010740:	687a      	ldr	r2, [r7, #4]
 8010742:	4619      	mov	r1, r3
 8010744:	68f8      	ldr	r0, [r7, #12]
 8010746:	f000 fd0b 	bl	8011160 <SCSI_Read12>
 801074a:	4603      	mov	r3, r0
 801074c:	75fb      	strb	r3, [r7, #23]
    break;
 801074e:	e026      	b.n	801079e <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 8010750:	7afb      	ldrb	r3, [r7, #11]
 8010752:	687a      	ldr	r2, [r7, #4]
 8010754:	4619      	mov	r1, r3
 8010756:	68f8      	ldr	r0, [r7, #12]
 8010758:	f000 fdbe 	bl	80112d8 <SCSI_Write10>
 801075c:	4603      	mov	r3, r0
 801075e:	75fb      	strb	r3, [r7, #23]
    break;
 8010760:	e01d      	b.n	801079e <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 8010762:	7afb      	ldrb	r3, [r7, #11]
 8010764:	687a      	ldr	r2, [r7, #4]
 8010766:	4619      	mov	r1, r3
 8010768:	68f8      	ldr	r0, [r7, #12]
 801076a:	f000 fe8d 	bl	8011488 <SCSI_Write12>
 801076e:	4603      	mov	r3, r0
 8010770:	75fb      	strb	r3, [r7, #23]
    break;
 8010772:	e014      	b.n	801079e <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 8010774:	7afb      	ldrb	r3, [r7, #11]
 8010776:	687a      	ldr	r2, [r7, #4]
 8010778:	4619      	mov	r1, r3
 801077a:	68f8      	ldr	r0, [r7, #12]
 801077c:	f000 ff6c 	bl	8011658 <SCSI_Verify10>
 8010780:	4603      	mov	r3, r0
 8010782:	75fb      	strb	r3, [r7, #23]
    break;
 8010784:	e00b      	b.n	801079e <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8010786:	7af9      	ldrb	r1, [r7, #11]
 8010788:	2320      	movs	r3, #32
 801078a:	2205      	movs	r2, #5
 801078c:	68f8      	ldr	r0, [r7, #12]
 801078e:	f000 fb61 	bl	8010e54 <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8010792:	693b      	ldr	r3, [r7, #16]
 8010794:	2202      	movs	r2, #2
 8010796:	725a      	strb	r2, [r3, #9]
    ret = -1;
 8010798:	23ff      	movs	r3, #255	; 0xff
 801079a:	75fb      	strb	r3, [r7, #23]
    break;
 801079c:	bf00      	nop
  }

  return ret;
 801079e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80107a2:	4618      	mov	r0, r3
 80107a4:	3718      	adds	r7, #24
 80107a6:	46bd      	mov	sp, r7
 80107a8:	bd80      	pop	{r7, pc}

080107aa <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80107aa:	b580      	push	{r7, lr}
 80107ac:	b086      	sub	sp, #24
 80107ae:	af00      	add	r7, sp, #0
 80107b0:	60f8      	str	r0, [r7, #12]
 80107b2:	460b      	mov	r3, r1
 80107b4:	607a      	str	r2, [r7, #4]
 80107b6:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80107be:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 80107c0:	697a      	ldr	r2, [r7, #20]
 80107c2:	f248 0318 	movw	r3, #32792	; 0x8018
 80107c6:	4413      	add	r3, r2
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d00c      	beq.n	80107e8 <SCSI_TestUnitReady+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80107ce:	697a      	ldr	r2, [r7, #20]
 80107d0:	f248 031d 	movw	r3, #32797	; 0x801d
 80107d4:	4413      	add	r3, r2
 80107d6:	7819      	ldrb	r1, [r3, #0]
 80107d8:	2320      	movs	r3, #32
 80107da:	2205      	movs	r2, #5
 80107dc:	68f8      	ldr	r0, [r7, #12]
 80107de:	f000 fb39 	bl	8010e54 <SCSI_SenseCode>

    return -1;
 80107e2:	f04f 33ff 	mov.w	r3, #4294967295
 80107e6:	e02c      	b.n	8010842 <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80107e8:	697a      	ldr	r2, [r7, #20]
 80107ea:	f248 0362 	movw	r3, #32866	; 0x8062
 80107ee:	4413      	add	r3, r2
 80107f0:	781b      	ldrb	r3, [r3, #0]
 80107f2:	2b02      	cmp	r3, #2
 80107f4:	d10b      	bne.n	801080e <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80107f6:	7af9      	ldrb	r1, [r7, #11]
 80107f8:	233a      	movs	r3, #58	; 0x3a
 80107fa:	2202      	movs	r2, #2
 80107fc:	68f8      	ldr	r0, [r7, #12]
 80107fe:	f000 fb29 	bl	8010e54 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8010802:	697b      	ldr	r3, [r7, #20]
 8010804:	2205      	movs	r2, #5
 8010806:	721a      	strb	r2, [r3, #8]
    return -1;
 8010808:	f04f 33ff 	mov.w	r3, #4294967295
 801080c:	e019      	b.n	8010842 <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010814:	689b      	ldr	r3, [r3, #8]
 8010816:	7afa      	ldrb	r2, [r7, #11]
 8010818:	4610      	mov	r0, r2
 801081a:	4798      	blx	r3
 801081c:	4603      	mov	r3, r0
 801081e:	2b00      	cmp	r3, #0
 8010820:	d00b      	beq.n	801083a <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010822:	7af9      	ldrb	r1, [r7, #11]
 8010824:	233a      	movs	r3, #58	; 0x3a
 8010826:	2202      	movs	r2, #2
 8010828:	68f8      	ldr	r0, [r7, #12]
 801082a:	f000 fb13 	bl	8010e54 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801082e:	697b      	ldr	r3, [r7, #20]
 8010830:	2205      	movs	r2, #5
 8010832:	721a      	strb	r2, [r3, #8]

    return -1;
 8010834:	f04f 33ff 	mov.w	r3, #4294967295
 8010838:	e003      	b.n	8010842 <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 801083a:	697b      	ldr	r3, [r7, #20]
 801083c:	2200      	movs	r2, #0
 801083e:	60da      	str	r2, [r3, #12]

  return 0;
 8010840:	2300      	movs	r3, #0
}
 8010842:	4618      	mov	r0, r3
 8010844:	3718      	adds	r7, #24
 8010846:	46bd      	mov	sp, r7
 8010848:	bd80      	pop	{r7, pc}
	...

0801084c <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801084c:	b580      	push	{r7, lr}
 801084e:	b088      	sub	sp, #32
 8010850:	af00      	add	r7, sp, #0
 8010852:	60f8      	str	r0, [r7, #12]
 8010854:	460b      	mov	r3, r1
 8010856:	607a      	str	r2, [r7, #4]
 8010858:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010860:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 8010862:	69ba      	ldr	r2, [r7, #24]
 8010864:	f248 0318 	movw	r3, #32792	; 0x8018
 8010868:	4413      	add	r3, r2
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d10c      	bne.n	801088a <SCSI_Inquiry+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010870:	69ba      	ldr	r2, [r7, #24]
 8010872:	f248 031d 	movw	r3, #32797	; 0x801d
 8010876:	4413      	add	r3, r2
 8010878:	7819      	ldrb	r1, [r3, #0]
 801087a:	2320      	movs	r3, #32
 801087c:	2205      	movs	r2, #5
 801087e:	68f8      	ldr	r0, [r7, #12]
 8010880:	f000 fae8 	bl	8010e54 <SCSI_SenseCode>
    return -1;
 8010884:	f04f 33ff 	mov.w	r3, #4294967295
 8010888:	e04c      	b.n	8010924 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	3301      	adds	r3, #1
 801088e:	781b      	ldrb	r3, [r3, #0]
 8010890:	f003 0301 	and.w	r3, r3, #1
 8010894:	2b00      	cmp	r3, #0
 8010896:	d022      	beq.n	80108de <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	3302      	adds	r3, #2
 801089c:	781b      	ldrb	r3, [r3, #0]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d105      	bne.n	80108ae <SCSI_Inquiry+0x62>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 80108a2:	2206      	movs	r2, #6
 80108a4:	4921      	ldr	r1, [pc, #132]	; (801092c <SCSI_Inquiry+0xe0>)
 80108a6:	69b8      	ldr	r0, [r7, #24]
 80108a8:	f001 f862 	bl	8011970 <SCSI_UpdateBotData>
 80108ac:	e039      	b.n	8010922 <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	3302      	adds	r3, #2
 80108b2:	781b      	ldrb	r3, [r3, #0]
 80108b4:	2b80      	cmp	r3, #128	; 0x80
 80108b6:	d105      	bne.n	80108c4 <SCSI_Inquiry+0x78>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 80108b8:	2208      	movs	r2, #8
 80108ba:	491d      	ldr	r1, [pc, #116]	; (8010930 <SCSI_Inquiry+0xe4>)
 80108bc:	69b8      	ldr	r0, [r7, #24]
 80108be:	f001 f857 	bl	8011970 <SCSI_UpdateBotData>
 80108c2:	e02e      	b.n	8010922 <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 80108c4:	69ba      	ldr	r2, [r7, #24]
 80108c6:	f248 031d 	movw	r3, #32797	; 0x801d
 80108ca:	4413      	add	r3, r2
 80108cc:	7819      	ldrb	r1, [r3, #0]
 80108ce:	2324      	movs	r3, #36	; 0x24
 80108d0:	2205      	movs	r2, #5
 80108d2:	68f8      	ldr	r0, [r7, #12]
 80108d4:	f000 fabe 	bl	8010e54 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 80108d8:	f04f 33ff 	mov.w	r3, #4294967295
 80108dc:	e022      	b.n	8010924 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80108e4:	69d9      	ldr	r1, [r3, #28]
 80108e6:	7afa      	ldrb	r2, [r7, #11]
 80108e8:	4613      	mov	r3, r2
 80108ea:	00db      	lsls	r3, r3, #3
 80108ec:	4413      	add	r3, r2
 80108ee:	009b      	lsls	r3, r3, #2
 80108f0:	440b      	add	r3, r1
 80108f2:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 80108f4:	697b      	ldr	r3, [r7, #20]
 80108f6:	3304      	adds	r3, #4
 80108f8:	781b      	ldrb	r3, [r3, #0]
 80108fa:	b29b      	uxth	r3, r3
 80108fc:	3305      	adds	r3, #5
 80108fe:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	3304      	adds	r3, #4
 8010904:	781b      	ldrb	r3, [r3, #0]
 8010906:	b29b      	uxth	r3, r3
 8010908:	8bfa      	ldrh	r2, [r7, #30]
 801090a:	429a      	cmp	r2, r3
 801090c:	d303      	bcc.n	8010916 <SCSI_Inquiry+0xca>
    {
      len = params[4];
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	3304      	adds	r3, #4
 8010912:	781b      	ldrb	r3, [r3, #0]
 8010914:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8010916:	8bfb      	ldrh	r3, [r7, #30]
 8010918:	461a      	mov	r2, r3
 801091a:	6979      	ldr	r1, [r7, #20]
 801091c:	69b8      	ldr	r0, [r7, #24]
 801091e:	f001 f827 	bl	8011970 <SCSI_UpdateBotData>
  }

  return 0;
 8010922:	2300      	movs	r3, #0
}
 8010924:	4618      	mov	r0, r3
 8010926:	3720      	adds	r7, #32
 8010928:	46bd      	mov	sp, r7
 801092a:	bd80      	pop	{r7, pc}
 801092c:	240000b8 	.word	0x240000b8
 8010930:	240000c0 	.word	0x240000c0

08010934 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010934:	b590      	push	{r4, r7, lr}
 8010936:	b087      	sub	sp, #28
 8010938:	af00      	add	r7, sp, #0
 801093a:	60f8      	str	r0, [r7, #12]
 801093c:	460b      	mov	r3, r1
 801093e:	607a      	str	r2, [r7, #4]
 8010940:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010948:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010950:	685c      	ldr	r4, [r3, #4]
 8010952:	697a      	ldr	r2, [r7, #20]
 8010954:	f248 0368 	movw	r3, #32872	; 0x8068
 8010958:	4413      	add	r3, r2
 801095a:	6979      	ldr	r1, [r7, #20]
 801095c:	f248 0264 	movw	r2, #32868	; 0x8064
 8010960:	440a      	add	r2, r1
 8010962:	7af8      	ldrb	r0, [r7, #11]
 8010964:	4619      	mov	r1, r3
 8010966:	47a0      	blx	r4
 8010968:	4603      	mov	r3, r0
 801096a:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801096c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d106      	bne.n	8010982 <SCSI_ReadCapacity10+0x4e>
 8010974:	697a      	ldr	r2, [r7, #20]
 8010976:	f248 0362 	movw	r3, #32866	; 0x8062
 801097a:	4413      	add	r3, r2
 801097c:	781b      	ldrb	r3, [r3, #0]
 801097e:	2b02      	cmp	r3, #2
 8010980:	d108      	bne.n	8010994 <SCSI_ReadCapacity10+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010982:	7af9      	ldrb	r1, [r7, #11]
 8010984:	233a      	movs	r3, #58	; 0x3a
 8010986:	2202      	movs	r2, #2
 8010988:	68f8      	ldr	r0, [r7, #12]
 801098a:	f000 fa63 	bl	8010e54 <SCSI_SenseCode>
    return -1;
 801098e:	f04f 33ff 	mov.w	r3, #4294967295
 8010992:	e04f      	b.n	8010a34 <SCSI_ReadCapacity10+0x100>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8010994:	697a      	ldr	r2, [r7, #20]
 8010996:	f248 0368 	movw	r3, #32872	; 0x8068
 801099a:	4413      	add	r3, r2
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	3b01      	subs	r3, #1
 80109a0:	0e1b      	lsrs	r3, r3, #24
 80109a2:	b2da      	uxtb	r2, r3
 80109a4:	697b      	ldr	r3, [r7, #20]
 80109a6:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80109a8:	697a      	ldr	r2, [r7, #20]
 80109aa:	f248 0368 	movw	r3, #32872	; 0x8068
 80109ae:	4413      	add	r3, r2
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	3b01      	subs	r3, #1
 80109b4:	0c1b      	lsrs	r3, r3, #16
 80109b6:	b2da      	uxtb	r2, r3
 80109b8:	697b      	ldr	r3, [r7, #20]
 80109ba:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80109bc:	697a      	ldr	r2, [r7, #20]
 80109be:	f248 0368 	movw	r3, #32872	; 0x8068
 80109c2:	4413      	add	r3, r2
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	3b01      	subs	r3, #1
 80109c8:	0a1b      	lsrs	r3, r3, #8
 80109ca:	b2da      	uxtb	r2, r3
 80109cc:	697b      	ldr	r3, [r7, #20]
 80109ce:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80109d0:	697a      	ldr	r2, [r7, #20]
 80109d2:	f248 0368 	movw	r3, #32872	; 0x8068
 80109d6:	4413      	add	r3, r2
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	b2db      	uxtb	r3, r3
 80109dc:	3b01      	subs	r3, #1
 80109de:	b2da      	uxtb	r2, r3
 80109e0:	697b      	ldr	r3, [r7, #20]
 80109e2:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80109e4:	697a      	ldr	r2, [r7, #20]
 80109e6:	f248 0364 	movw	r3, #32868	; 0x8064
 80109ea:	4413      	add	r3, r2
 80109ec:	881b      	ldrh	r3, [r3, #0]
 80109ee:	161b      	asrs	r3, r3, #24
 80109f0:	b2da      	uxtb	r2, r3
 80109f2:	697b      	ldr	r3, [r7, #20]
 80109f4:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80109f6:	697a      	ldr	r2, [r7, #20]
 80109f8:	f248 0364 	movw	r3, #32868	; 0x8064
 80109fc:	4413      	add	r3, r2
 80109fe:	881b      	ldrh	r3, [r3, #0]
 8010a00:	141b      	asrs	r3, r3, #16
 8010a02:	b2da      	uxtb	r2, r3
 8010a04:	697b      	ldr	r3, [r7, #20]
 8010a06:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8010a08:	697a      	ldr	r2, [r7, #20]
 8010a0a:	f248 0364 	movw	r3, #32868	; 0x8064
 8010a0e:	4413      	add	r3, r2
 8010a10:	881b      	ldrh	r3, [r3, #0]
 8010a12:	0a1b      	lsrs	r3, r3, #8
 8010a14:	b29b      	uxth	r3, r3
 8010a16:	b2da      	uxtb	r2, r3
 8010a18:	697b      	ldr	r3, [r7, #20]
 8010a1a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8010a1c:	697a      	ldr	r2, [r7, #20]
 8010a1e:	f248 0364 	movw	r3, #32868	; 0x8064
 8010a22:	4413      	add	r3, r2
 8010a24:	881b      	ldrh	r3, [r3, #0]
 8010a26:	b2da      	uxtb	r2, r3
 8010a28:	697b      	ldr	r3, [r7, #20]
 8010a2a:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8010a2c:	697b      	ldr	r3, [r7, #20]
 8010a2e:	2208      	movs	r2, #8
 8010a30:	60da      	str	r2, [r3, #12]

  return 0;
 8010a32:	2300      	movs	r3, #0

}
 8010a34:	4618      	mov	r0, r3
 8010a36:	371c      	adds	r7, #28
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	bd90      	pop	{r4, r7, pc}

08010a3c <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010a3c:	b590      	push	{r4, r7, lr}
 8010a3e:	b089      	sub	sp, #36	; 0x24
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	60f8      	str	r0, [r7, #12]
 8010a44:	460b      	mov	r3, r1
 8010a46:	607a      	str	r2, [r7, #4]
 8010a48:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010a50:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010a58:	685c      	ldr	r4, [r3, #4]
 8010a5a:	69ba      	ldr	r2, [r7, #24]
 8010a5c:	f248 0368 	movw	r3, #32872	; 0x8068
 8010a60:	4413      	add	r3, r2
 8010a62:	69b9      	ldr	r1, [r7, #24]
 8010a64:	f248 0264 	movw	r2, #32868	; 0x8064
 8010a68:	440a      	add	r2, r1
 8010a6a:	7af8      	ldrb	r0, [r7, #11]
 8010a6c:	4619      	mov	r1, r3
 8010a6e:	47a0      	blx	r4
 8010a70:	4603      	mov	r3, r0
 8010a72:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8010a74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d106      	bne.n	8010a8a <SCSI_ReadCapacity16+0x4e>
 8010a7c:	69ba      	ldr	r2, [r7, #24]
 8010a7e:	f248 0362 	movw	r3, #32866	; 0x8062
 8010a82:	4413      	add	r3, r2
 8010a84:	781b      	ldrb	r3, [r3, #0]
 8010a86:	2b02      	cmp	r3, #2
 8010a88:	d108      	bne.n	8010a9c <SCSI_ReadCapacity16+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010a8a:	7af9      	ldrb	r1, [r7, #11]
 8010a8c:	233a      	movs	r3, #58	; 0x3a
 8010a8e:	2202      	movs	r2, #2
 8010a90:	68f8      	ldr	r0, [r7, #12]
 8010a92:	f000 f9df 	bl	8010e54 <SCSI_SenseCode>
    return -1;
 8010a96:	f04f 33ff 	mov.w	r3, #4294967295
 8010a9a:	e084      	b.n	8010ba6 <SCSI_ReadCapacity16+0x16a>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	330a      	adds	r3, #10
 8010aa0:	781b      	ldrb	r3, [r3, #0]
 8010aa2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	330b      	adds	r3, #11
 8010aa8:	781b      	ldrb	r3, [r3, #0]
 8010aaa:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8010aac:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	330c      	adds	r3, #12
 8010ab2:	781b      	ldrb	r3, [r3, #0]
 8010ab4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8010ab6:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8010ab8:	687a      	ldr	r2, [r7, #4]
 8010aba:	320d      	adds	r2, #13
 8010abc:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8010abe:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8010ac0:	69bb      	ldr	r3, [r7, #24]
 8010ac2:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	77fb      	strb	r3, [r7, #31]
 8010ac8:	e007      	b.n	8010ada <SCSI_ReadCapacity16+0x9e>
  {
    hmsc->bot_data[idx] = 0U;
 8010aca:	7ffb      	ldrb	r3, [r7, #31]
 8010acc:	69ba      	ldr	r2, [r7, #24]
 8010ace:	4413      	add	r3, r2
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8010ad4:	7ffb      	ldrb	r3, [r7, #31]
 8010ad6:	3301      	adds	r3, #1
 8010ad8:	77fb      	strb	r3, [r7, #31]
 8010ada:	7ffa      	ldrb	r2, [r7, #31]
 8010adc:	69bb      	ldr	r3, [r7, #24]
 8010ade:	68db      	ldr	r3, [r3, #12]
 8010ae0:	429a      	cmp	r2, r3
 8010ae2:	d3f2      	bcc.n	8010aca <SCSI_ReadCapacity16+0x8e>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8010ae4:	69ba      	ldr	r2, [r7, #24]
 8010ae6:	f248 0368 	movw	r3, #32872	; 0x8068
 8010aea:	4413      	add	r3, r2
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	3b01      	subs	r3, #1
 8010af0:	0e1b      	lsrs	r3, r3, #24
 8010af2:	b2da      	uxtb	r2, r3
 8010af4:	69bb      	ldr	r3, [r7, #24]
 8010af6:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8010af8:	69ba      	ldr	r2, [r7, #24]
 8010afa:	f248 0368 	movw	r3, #32872	; 0x8068
 8010afe:	4413      	add	r3, r2
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	3b01      	subs	r3, #1
 8010b04:	0c1b      	lsrs	r3, r3, #16
 8010b06:	b2da      	uxtb	r2, r3
 8010b08:	69bb      	ldr	r3, [r7, #24]
 8010b0a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8010b0c:	69ba      	ldr	r2, [r7, #24]
 8010b0e:	f248 0368 	movw	r3, #32872	; 0x8068
 8010b12:	4413      	add	r3, r2
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	3b01      	subs	r3, #1
 8010b18:	0a1b      	lsrs	r3, r3, #8
 8010b1a:	b2da      	uxtb	r2, r3
 8010b1c:	69bb      	ldr	r3, [r7, #24]
 8010b1e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8010b20:	69ba      	ldr	r2, [r7, #24]
 8010b22:	f248 0368 	movw	r3, #32872	; 0x8068
 8010b26:	4413      	add	r3, r2
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	b2db      	uxtb	r3, r3
 8010b2c:	3b01      	subs	r3, #1
 8010b2e:	b2da      	uxtb	r2, r3
 8010b30:	69bb      	ldr	r3, [r7, #24]
 8010b32:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8010b34:	69ba      	ldr	r2, [r7, #24]
 8010b36:	f248 0364 	movw	r3, #32868	; 0x8064
 8010b3a:	4413      	add	r3, r2
 8010b3c:	881b      	ldrh	r3, [r3, #0]
 8010b3e:	161b      	asrs	r3, r3, #24
 8010b40:	b2da      	uxtb	r2, r3
 8010b42:	69bb      	ldr	r3, [r7, #24]
 8010b44:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8010b46:	69ba      	ldr	r2, [r7, #24]
 8010b48:	f248 0364 	movw	r3, #32868	; 0x8064
 8010b4c:	4413      	add	r3, r2
 8010b4e:	881b      	ldrh	r3, [r3, #0]
 8010b50:	141b      	asrs	r3, r3, #16
 8010b52:	b2da      	uxtb	r2, r3
 8010b54:	69bb      	ldr	r3, [r7, #24]
 8010b56:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8010b58:	69ba      	ldr	r2, [r7, #24]
 8010b5a:	f248 0364 	movw	r3, #32868	; 0x8064
 8010b5e:	4413      	add	r3, r2
 8010b60:	881b      	ldrh	r3, [r3, #0]
 8010b62:	0a1b      	lsrs	r3, r3, #8
 8010b64:	b29b      	uxth	r3, r3
 8010b66:	b2da      	uxtb	r2, r3
 8010b68:	69bb      	ldr	r3, [r7, #24]
 8010b6a:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8010b6c:	69ba      	ldr	r2, [r7, #24]
 8010b6e:	f248 0364 	movw	r3, #32868	; 0x8064
 8010b72:	4413      	add	r3, r2
 8010b74:	881b      	ldrh	r3, [r3, #0]
 8010b76:	b2da      	uxtb	r2, r3
 8010b78:	69bb      	ldr	r3, [r7, #24]
 8010b7a:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	330a      	adds	r3, #10
 8010b80:	781b      	ldrb	r3, [r3, #0]
 8010b82:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	330b      	adds	r3, #11
 8010b88:	781b      	ldrb	r3, [r3, #0]
 8010b8a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8010b8c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	330c      	adds	r3, #12
 8010b92:	781b      	ldrb	r3, [r3, #0]
 8010b94:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8010b96:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8010b98:	687a      	ldr	r2, [r7, #4]
 8010b9a:	320d      	adds	r2, #13
 8010b9c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8010b9e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8010ba0:	69bb      	ldr	r3, [r7, #24]
 8010ba2:	60da      	str	r2, [r3, #12]

  return 0;
 8010ba4:	2300      	movs	r3, #0
}
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	3724      	adds	r7, #36	; 0x24
 8010baa:	46bd      	mov	sp, r7
 8010bac:	bd90      	pop	{r4, r7, pc}

08010bae <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010bae:	b580      	push	{r7, lr}
 8010bb0:	b088      	sub	sp, #32
 8010bb2:	af00      	add	r7, sp, #0
 8010bb4:	60f8      	str	r0, [r7, #12]
 8010bb6:	460b      	mov	r3, r1
 8010bb8:	607a      	str	r2, [r7, #4]
 8010bba:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010bc2:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010bca:	685b      	ldr	r3, [r3, #4]
 8010bcc:	f107 0214 	add.w	r2, r7, #20
 8010bd0:	f107 0110 	add.w	r1, r7, #16
 8010bd4:	7af8      	ldrb	r0, [r7, #11]
 8010bd6:	4798      	blx	r3
 8010bd8:	4603      	mov	r3, r0
 8010bda:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8010bdc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d106      	bne.n	8010bf2 <SCSI_ReadFormatCapacity+0x44>
 8010be4:	69ba      	ldr	r2, [r7, #24]
 8010be6:	f248 0362 	movw	r3, #32866	; 0x8062
 8010bea:	4413      	add	r3, r2
 8010bec:	781b      	ldrb	r3, [r3, #0]
 8010bee:	2b02      	cmp	r3, #2
 8010bf0:	d108      	bne.n	8010c04 <SCSI_ReadFormatCapacity+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010bf2:	7af9      	ldrb	r1, [r7, #11]
 8010bf4:	233a      	movs	r3, #58	; 0x3a
 8010bf6:	2202      	movs	r2, #2
 8010bf8:	68f8      	ldr	r0, [r7, #12]
 8010bfa:	f000 f92b 	bl	8010e54 <SCSI_SenseCode>
    return -1;
 8010bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8010c02:	e03e      	b.n	8010c82 <SCSI_ReadFormatCapacity+0xd4>
  }

  for (i = 0U; i < 12U ; i++)
 8010c04:	2300      	movs	r3, #0
 8010c06:	83fb      	strh	r3, [r7, #30]
 8010c08:	e007      	b.n	8010c1a <SCSI_ReadFormatCapacity+0x6c>
  {
    hmsc->bot_data[i] = 0U;
 8010c0a:	8bfb      	ldrh	r3, [r7, #30]
 8010c0c:	69ba      	ldr	r2, [r7, #24]
 8010c0e:	4413      	add	r3, r2
 8010c10:	2200      	movs	r2, #0
 8010c12:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8010c14:	8bfb      	ldrh	r3, [r7, #30]
 8010c16:	3301      	adds	r3, #1
 8010c18:	83fb      	strh	r3, [r7, #30]
 8010c1a:	8bfb      	ldrh	r3, [r7, #30]
 8010c1c:	2b0b      	cmp	r3, #11
 8010c1e:	d9f4      	bls.n	8010c0a <SCSI_ReadFormatCapacity+0x5c>
  }

  hmsc->bot_data[3] = 0x08U;
 8010c20:	69bb      	ldr	r3, [r7, #24]
 8010c22:	2208      	movs	r2, #8
 8010c24:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8010c26:	693b      	ldr	r3, [r7, #16]
 8010c28:	3b01      	subs	r3, #1
 8010c2a:	0e1b      	lsrs	r3, r3, #24
 8010c2c:	b2da      	uxtb	r2, r3
 8010c2e:	69bb      	ldr	r3, [r7, #24]
 8010c30:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8010c32:	693b      	ldr	r3, [r7, #16]
 8010c34:	3b01      	subs	r3, #1
 8010c36:	0c1b      	lsrs	r3, r3, #16
 8010c38:	b2da      	uxtb	r2, r3
 8010c3a:	69bb      	ldr	r3, [r7, #24]
 8010c3c:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8010c3e:	693b      	ldr	r3, [r7, #16]
 8010c40:	3b01      	subs	r3, #1
 8010c42:	0a1b      	lsrs	r3, r3, #8
 8010c44:	b2da      	uxtb	r2, r3
 8010c46:	69bb      	ldr	r3, [r7, #24]
 8010c48:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8010c4a:	693b      	ldr	r3, [r7, #16]
 8010c4c:	b2db      	uxtb	r3, r3
 8010c4e:	3b01      	subs	r3, #1
 8010c50:	b2da      	uxtb	r2, r3
 8010c52:	69bb      	ldr	r3, [r7, #24]
 8010c54:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8010c56:	69bb      	ldr	r3, [r7, #24]
 8010c58:	2202      	movs	r2, #2
 8010c5a:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8010c5c:	8abb      	ldrh	r3, [r7, #20]
 8010c5e:	141b      	asrs	r3, r3, #16
 8010c60:	b2da      	uxtb	r2, r3
 8010c62:	69bb      	ldr	r3, [r7, #24]
 8010c64:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8010c66:	8abb      	ldrh	r3, [r7, #20]
 8010c68:	0a1b      	lsrs	r3, r3, #8
 8010c6a:	b29b      	uxth	r3, r3
 8010c6c:	b2da      	uxtb	r2, r3
 8010c6e:	69bb      	ldr	r3, [r7, #24]
 8010c70:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8010c72:	8abb      	ldrh	r3, [r7, #20]
 8010c74:	b2da      	uxtb	r2, r3
 8010c76:	69bb      	ldr	r3, [r7, #24]
 8010c78:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8010c7a:	69bb      	ldr	r3, [r7, #24]
 8010c7c:	220c      	movs	r2, #12
 8010c7e:	60da      	str	r2, [r3, #12]

  return 0;
 8010c80:	2300      	movs	r3, #0
}
 8010c82:	4618      	mov	r0, r3
 8010c84:	3720      	adds	r7, #32
 8010c86:	46bd      	mov	sp, r7
 8010c88:	bd80      	pop	{r7, pc}
	...

08010c8c <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b086      	sub	sp, #24
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	60f8      	str	r0, [r7, #12]
 8010c94:	460b      	mov	r3, r1
 8010c96:	607a      	str	r2, [r7, #4]
 8010c98:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010ca0:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8010ca2:	2317      	movs	r3, #23
 8010ca4:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	3304      	adds	r3, #4
 8010caa:	781b      	ldrb	r3, [r3, #0]
 8010cac:	b29b      	uxth	r3, r3
 8010cae:	8afa      	ldrh	r2, [r7, #22]
 8010cb0:	429a      	cmp	r2, r3
 8010cb2:	d303      	bcc.n	8010cbc <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	3304      	adds	r3, #4
 8010cb8:	781b      	ldrb	r3, [r3, #0]
 8010cba:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8010cbc:	8afb      	ldrh	r3, [r7, #22]
 8010cbe:	461a      	mov	r2, r3
 8010cc0:	4904      	ldr	r1, [pc, #16]	; (8010cd4 <SCSI_ModeSense6+0x48>)
 8010cc2:	6938      	ldr	r0, [r7, #16]
 8010cc4:	f000 fe54 	bl	8011970 <SCSI_UpdateBotData>

  return 0;
 8010cc8:	2300      	movs	r3, #0
}
 8010cca:	4618      	mov	r0, r3
 8010ccc:	3718      	adds	r7, #24
 8010cce:	46bd      	mov	sp, r7
 8010cd0:	bd80      	pop	{r7, pc}
 8010cd2:	bf00      	nop
 8010cd4:	240000c8 	.word	0x240000c8

08010cd8 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010cd8:	b580      	push	{r7, lr}
 8010cda:	b086      	sub	sp, #24
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	60f8      	str	r0, [r7, #12]
 8010ce0:	460b      	mov	r3, r1
 8010ce2:	607a      	str	r2, [r7, #4]
 8010ce4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010cec:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8010cee:	231b      	movs	r3, #27
 8010cf0:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	3308      	adds	r3, #8
 8010cf6:	781b      	ldrb	r3, [r3, #0]
 8010cf8:	b29b      	uxth	r3, r3
 8010cfa:	8afa      	ldrh	r2, [r7, #22]
 8010cfc:	429a      	cmp	r2, r3
 8010cfe:	d303      	bcc.n	8010d08 <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	3308      	adds	r3, #8
 8010d04:	781b      	ldrb	r3, [r3, #0]
 8010d06:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8010d08:	8afb      	ldrh	r3, [r7, #22]
 8010d0a:	461a      	mov	r2, r3
 8010d0c:	4904      	ldr	r1, [pc, #16]	; (8010d20 <SCSI_ModeSense10+0x48>)
 8010d0e:	6938      	ldr	r0, [r7, #16]
 8010d10:	f000 fe2e 	bl	8011970 <SCSI_UpdateBotData>

  return 0;
 8010d14:	2300      	movs	r3, #0
}
 8010d16:	4618      	mov	r0, r3
 8010d18:	3718      	adds	r7, #24
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	bd80      	pop	{r7, pc}
 8010d1e:	bf00      	nop
 8010d20:	240000e0 	.word	0x240000e0

08010d24 <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010d24:	b580      	push	{r7, lr}
 8010d26:	b086      	sub	sp, #24
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	60f8      	str	r0, [r7, #12]
 8010d2c:	460b      	mov	r3, r1
 8010d2e:	607a      	str	r2, [r7, #4]
 8010d30:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010d38:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 8010d3a:	693a      	ldr	r2, [r7, #16]
 8010d3c:	f248 0318 	movw	r3, #32792	; 0x8018
 8010d40:	4413      	add	r3, r2
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d10c      	bne.n	8010d62 <SCSI_RequestSense+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010d48:	693a      	ldr	r2, [r7, #16]
 8010d4a:	f248 031d 	movw	r3, #32797	; 0x801d
 8010d4e:	4413      	add	r3, r2
 8010d50:	7819      	ldrb	r1, [r3, #0]
 8010d52:	2320      	movs	r3, #32
 8010d54:	2205      	movs	r2, #5
 8010d56:	68f8      	ldr	r0, [r7, #12]
 8010d58:	f000 f87c 	bl	8010e54 <SCSI_SenseCode>
    return -1;
 8010d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8010d60:	e074      	b.n	8010e4c <SCSI_RequestSense+0x128>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8010d62:	2300      	movs	r3, #0
 8010d64:	75fb      	strb	r3, [r7, #23]
 8010d66:	e007      	b.n	8010d78 <SCSI_RequestSense+0x54>
  {
    hmsc->bot_data[i] = 0U;
 8010d68:	7dfb      	ldrb	r3, [r7, #23]
 8010d6a:	693a      	ldr	r2, [r7, #16]
 8010d6c:	4413      	add	r3, r2
 8010d6e:	2200      	movs	r2, #0
 8010d70:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8010d72:	7dfb      	ldrb	r3, [r7, #23]
 8010d74:	3301      	adds	r3, #1
 8010d76:	75fb      	strb	r3, [r7, #23]
 8010d78:	7dfb      	ldrb	r3, [r7, #23]
 8010d7a:	2b11      	cmp	r3, #17
 8010d7c:	d9f4      	bls.n	8010d68 <SCSI_RequestSense+0x44>
  }

  hmsc->bot_data[0] = 0x70U;
 8010d7e:	693b      	ldr	r3, [r7, #16]
 8010d80:	2270      	movs	r2, #112	; 0x70
 8010d82:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8010d84:	693b      	ldr	r3, [r7, #16]
 8010d86:	220c      	movs	r2, #12
 8010d88:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8010d8a:	693a      	ldr	r2, [r7, #16]
 8010d8c:	f248 0360 	movw	r3, #32864	; 0x8060
 8010d90:	4413      	add	r3, r2
 8010d92:	781a      	ldrb	r2, [r3, #0]
 8010d94:	6939      	ldr	r1, [r7, #16]
 8010d96:	f248 0361 	movw	r3, #32865	; 0x8061
 8010d9a:	440b      	add	r3, r1
 8010d9c:	781b      	ldrb	r3, [r3, #0]
 8010d9e:	429a      	cmp	r2, r3
 8010da0:	d045      	beq.n	8010e2e <SCSI_RequestSense+0x10a>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8010da2:	693a      	ldr	r2, [r7, #16]
 8010da4:	f248 0360 	movw	r3, #32864	; 0x8060
 8010da8:	4413      	add	r3, r2
 8010daa:	781b      	ldrb	r3, [r3, #0]
 8010dac:	4619      	mov	r1, r3
 8010dae:	693a      	ldr	r2, [r7, #16]
 8010db0:	f241 0308 	movw	r3, #4104	; 0x1008
 8010db4:	440b      	add	r3, r1
 8010db6:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8010dba:	693b      	ldr	r3, [r7, #16]
 8010dbc:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8010dbe:	693a      	ldr	r2, [r7, #16]
 8010dc0:	f248 0360 	movw	r3, #32864	; 0x8060
 8010dc4:	4413      	add	r3, r2
 8010dc6:	781b      	ldrb	r3, [r3, #0]
 8010dc8:	4619      	mov	r1, r3
 8010dca:	693a      	ldr	r2, [r7, #16]
 8010dcc:	f241 0308 	movw	r3, #4104	; 0x1008
 8010dd0:	440b      	add	r3, r1
 8010dd2:	00db      	lsls	r3, r3, #3
 8010dd4:	4413      	add	r3, r2
 8010dd6:	791a      	ldrb	r2, [r3, #4]
 8010dd8:	693b      	ldr	r3, [r7, #16]
 8010dda:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8010ddc:	693a      	ldr	r2, [r7, #16]
 8010dde:	f248 0360 	movw	r3, #32864	; 0x8060
 8010de2:	4413      	add	r3, r2
 8010de4:	781b      	ldrb	r3, [r3, #0]
 8010de6:	4619      	mov	r1, r3
 8010de8:	693a      	ldr	r2, [r7, #16]
 8010dea:	f241 0308 	movw	r3, #4104	; 0x1008
 8010dee:	440b      	add	r3, r1
 8010df0:	00db      	lsls	r3, r3, #3
 8010df2:	4413      	add	r3, r2
 8010df4:	795a      	ldrb	r2, [r3, #5]
 8010df6:	693b      	ldr	r3, [r7, #16]
 8010df8:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8010dfa:	693a      	ldr	r2, [r7, #16]
 8010dfc:	f248 0360 	movw	r3, #32864	; 0x8060
 8010e00:	4413      	add	r3, r2
 8010e02:	781b      	ldrb	r3, [r3, #0]
 8010e04:	3301      	adds	r3, #1
 8010e06:	b2d9      	uxtb	r1, r3
 8010e08:	693a      	ldr	r2, [r7, #16]
 8010e0a:	f248 0360 	movw	r3, #32864	; 0x8060
 8010e0e:	4413      	add	r3, r2
 8010e10:	460a      	mov	r2, r1
 8010e12:	701a      	strb	r2, [r3, #0]

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8010e14:	693a      	ldr	r2, [r7, #16]
 8010e16:	f248 0360 	movw	r3, #32864	; 0x8060
 8010e1a:	4413      	add	r3, r2
 8010e1c:	781b      	ldrb	r3, [r3, #0]
 8010e1e:	2b04      	cmp	r3, #4
 8010e20:	d105      	bne.n	8010e2e <SCSI_RequestSense+0x10a>
    {
      hmsc->scsi_sense_head = 0U;
 8010e22:	693a      	ldr	r2, [r7, #16]
 8010e24:	f248 0360 	movw	r3, #32864	; 0x8060
 8010e28:	4413      	add	r3, r2
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	701a      	strb	r2, [r3, #0]
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8010e2e:	693b      	ldr	r3, [r7, #16]
 8010e30:	2212      	movs	r2, #18
 8010e32:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	3304      	adds	r3, #4
 8010e38:	781b      	ldrb	r3, [r3, #0]
 8010e3a:	2b12      	cmp	r3, #18
 8010e3c:	d805      	bhi.n	8010e4a <SCSI_RequestSense+0x126>
  {
    hmsc->bot_data_length = params[4];
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	3304      	adds	r3, #4
 8010e42:	781b      	ldrb	r3, [r3, #0]
 8010e44:	461a      	mov	r2, r3
 8010e46:	693b      	ldr	r3, [r7, #16]
 8010e48:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8010e4a:	2300      	movs	r3, #0
}
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	3718      	adds	r7, #24
 8010e50:	46bd      	mov	sp, r7
 8010e52:	bd80      	pop	{r7, pc}

08010e54 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8010e54:	b480      	push	{r7}
 8010e56:	b085      	sub	sp, #20
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	6078      	str	r0, [r7, #4]
 8010e5c:	4608      	mov	r0, r1
 8010e5e:	4611      	mov	r1, r2
 8010e60:	461a      	mov	r2, r3
 8010e62:	4603      	mov	r3, r0
 8010e64:	70fb      	strb	r3, [r7, #3]
 8010e66:	460b      	mov	r3, r1
 8010e68:	70bb      	strb	r3, [r7, #2]
 8010e6a:	4613      	mov	r3, r2
 8010e6c:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010e74:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8010e76:	68fa      	ldr	r2, [r7, #12]
 8010e78:	f248 0361 	movw	r3, #32865	; 0x8061
 8010e7c:	4413      	add	r3, r2
 8010e7e:	781b      	ldrb	r3, [r3, #0]
 8010e80:	4619      	mov	r1, r3
 8010e82:	68fa      	ldr	r2, [r7, #12]
 8010e84:	f241 0308 	movw	r3, #4104	; 0x1008
 8010e88:	440b      	add	r3, r1
 8010e8a:	78b9      	ldrb	r1, [r7, #2]
 8010e8c:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8010e90:	68fa      	ldr	r2, [r7, #12]
 8010e92:	f248 0361 	movw	r3, #32865	; 0x8061
 8010e96:	4413      	add	r3, r2
 8010e98:	781b      	ldrb	r3, [r3, #0]
 8010e9a:	4619      	mov	r1, r3
 8010e9c:	68fa      	ldr	r2, [r7, #12]
 8010e9e:	f241 0308 	movw	r3, #4104	; 0x1008
 8010ea2:	440b      	add	r3, r1
 8010ea4:	00db      	lsls	r3, r3, #3
 8010ea6:	4413      	add	r3, r2
 8010ea8:	787a      	ldrb	r2, [r7, #1]
 8010eaa:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8010eac:	68fa      	ldr	r2, [r7, #12]
 8010eae:	f248 0361 	movw	r3, #32865	; 0x8061
 8010eb2:	4413      	add	r3, r2
 8010eb4:	781b      	ldrb	r3, [r3, #0]
 8010eb6:	4619      	mov	r1, r3
 8010eb8:	68fa      	ldr	r2, [r7, #12]
 8010eba:	f241 0308 	movw	r3, #4104	; 0x1008
 8010ebe:	440b      	add	r3, r1
 8010ec0:	00db      	lsls	r3, r3, #3
 8010ec2:	4413      	add	r3, r2
 8010ec4:	2200      	movs	r2, #0
 8010ec6:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8010ec8:	68fa      	ldr	r2, [r7, #12]
 8010eca:	f248 0361 	movw	r3, #32865	; 0x8061
 8010ece:	4413      	add	r3, r2
 8010ed0:	781b      	ldrb	r3, [r3, #0]
 8010ed2:	3301      	adds	r3, #1
 8010ed4:	b2d9      	uxtb	r1, r3
 8010ed6:	68fa      	ldr	r2, [r7, #12]
 8010ed8:	f248 0361 	movw	r3, #32865	; 0x8061
 8010edc:	4413      	add	r3, r2
 8010ede:	460a      	mov	r2, r1
 8010ee0:	701a      	strb	r2, [r3, #0]

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8010ee2:	68fa      	ldr	r2, [r7, #12]
 8010ee4:	f248 0361 	movw	r3, #32865	; 0x8061
 8010ee8:	4413      	add	r3, r2
 8010eea:	781b      	ldrb	r3, [r3, #0]
 8010eec:	2b04      	cmp	r3, #4
 8010eee:	d105      	bne.n	8010efc <SCSI_SenseCode+0xa8>
  {
    hmsc->scsi_sense_tail = 0U;
 8010ef0:	68fa      	ldr	r2, [r7, #12]
 8010ef2:	f248 0361 	movw	r3, #32865	; 0x8061
 8010ef6:	4413      	add	r3, r2
 8010ef8:	2200      	movs	r2, #0
 8010efa:	701a      	strb	r2, [r3, #0]
  }
}
 8010efc:	bf00      	nop
 8010efe:	3714      	adds	r7, #20
 8010f00:	46bd      	mov	sp, r7
 8010f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f06:	4770      	bx	lr

08010f08 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010f08:	b580      	push	{r7, lr}
 8010f0a:	b086      	sub	sp, #24
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	60f8      	str	r0, [r7, #12]
 8010f10:	460b      	mov	r3, r1
 8010f12:	607a      	str	r2, [r7, #4]
 8010f14:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010f1c:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8010f1e:	697a      	ldr	r2, [r7, #20]
 8010f20:	f248 0362 	movw	r3, #32866	; 0x8062
 8010f24:	4413      	add	r3, r2
 8010f26:	781b      	ldrb	r3, [r3, #0]
 8010f28:	2b01      	cmp	r3, #1
 8010f2a:	d10f      	bne.n	8010f4c <SCSI_StartStopUnit+0x44>
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	3304      	adds	r3, #4
 8010f30:	781b      	ldrb	r3, [r3, #0]
 8010f32:	f003 0303 	and.w	r3, r3, #3
 8010f36:	2b02      	cmp	r3, #2
 8010f38:	d108      	bne.n	8010f4c <SCSI_StartStopUnit+0x44>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8010f3a:	7af9      	ldrb	r1, [r7, #11]
 8010f3c:	2324      	movs	r3, #36	; 0x24
 8010f3e:	2205      	movs	r2, #5
 8010f40:	68f8      	ldr	r0, [r7, #12]
 8010f42:	f7ff ff87 	bl	8010e54 <SCSI_SenseCode>

    return -1;
 8010f46:	f04f 33ff 	mov.w	r3, #4294967295
 8010f4a:	e02c      	b.n	8010fa6 <SCSI_StartStopUnit+0x9e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	3304      	adds	r3, #4
 8010f50:	781b      	ldrb	r3, [r3, #0]
 8010f52:	f003 0303 	and.w	r3, r3, #3
 8010f56:	2b01      	cmp	r3, #1
 8010f58:	d106      	bne.n	8010f68 <SCSI_StartStopUnit+0x60>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8010f5a:	697a      	ldr	r2, [r7, #20]
 8010f5c:	f248 0362 	movw	r3, #32866	; 0x8062
 8010f60:	4413      	add	r3, r2
 8010f62:	2200      	movs	r2, #0
 8010f64:	701a      	strb	r2, [r3, #0]
 8010f66:	e01a      	b.n	8010f9e <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	3304      	adds	r3, #4
 8010f6c:	781b      	ldrb	r3, [r3, #0]
 8010f6e:	f003 0303 	and.w	r3, r3, #3
 8010f72:	2b02      	cmp	r3, #2
 8010f74:	d106      	bne.n	8010f84 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8010f76:	697a      	ldr	r2, [r7, #20]
 8010f78:	f248 0362 	movw	r3, #32866	; 0x8062
 8010f7c:	4413      	add	r3, r2
 8010f7e:	2202      	movs	r2, #2
 8010f80:	701a      	strb	r2, [r3, #0]
 8010f82:	e00c      	b.n	8010f9e <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	3304      	adds	r3, #4
 8010f88:	781b      	ldrb	r3, [r3, #0]
 8010f8a:	f003 0303 	and.w	r3, r3, #3
 8010f8e:	2b03      	cmp	r3, #3
 8010f90:	d105      	bne.n	8010f9e <SCSI_StartStopUnit+0x96>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8010f92:	697a      	ldr	r2, [r7, #20]
 8010f94:	f248 0362 	movw	r3, #32866	; 0x8062
 8010f98:	4413      	add	r3, r2
 8010f9a:	2200      	movs	r2, #0
 8010f9c:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8010f9e:	697b      	ldr	r3, [r7, #20]
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	60da      	str	r2, [r3, #12]

  return 0;
 8010fa4:	2300      	movs	r3, #0
}
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	3718      	adds	r7, #24
 8010faa:	46bd      	mov	sp, r7
 8010fac:	bd80      	pop	{r7, pc}

08010fae <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010fae:	b480      	push	{r7}
 8010fb0:	b087      	sub	sp, #28
 8010fb2:	af00      	add	r7, sp, #0
 8010fb4:	60f8      	str	r0, [r7, #12]
 8010fb6:	460b      	mov	r3, r1
 8010fb8:	607a      	str	r2, [r7, #4]
 8010fba:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010fc2:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	3304      	adds	r3, #4
 8010fc8:	781b      	ldrb	r3, [r3, #0]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d106      	bne.n	8010fdc <SCSI_AllowPreventRemovable+0x2e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8010fce:	697a      	ldr	r2, [r7, #20]
 8010fd0:	f248 0362 	movw	r3, #32866	; 0x8062
 8010fd4:	4413      	add	r3, r2
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	701a      	strb	r2, [r3, #0]
 8010fda:	e005      	b.n	8010fe8 <SCSI_AllowPreventRemovable+0x3a>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8010fdc:	697a      	ldr	r2, [r7, #20]
 8010fde:	f248 0362 	movw	r3, #32866	; 0x8062
 8010fe2:	4413      	add	r3, r2
 8010fe4:	2201      	movs	r2, #1
 8010fe6:	701a      	strb	r2, [r3, #0]
  }

  hmsc->bot_data_length = 0U;
 8010fe8:	697b      	ldr	r3, [r7, #20]
 8010fea:	2200      	movs	r2, #0
 8010fec:	60da      	str	r2, [r3, #12]

  return 0;
 8010fee:	2300      	movs	r3, #0
}
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	371c      	adds	r7, #28
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ffa:	4770      	bx	lr

08010ffc <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010ffc:	b580      	push	{r7, lr}
 8010ffe:	b086      	sub	sp, #24
 8011000:	af00      	add	r7, sp, #0
 8011002:	60f8      	str	r0, [r7, #12]
 8011004:	460b      	mov	r3, r1
 8011006:	607a      	str	r2, [r7, #4]
 8011008:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011010:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8011012:	697b      	ldr	r3, [r7, #20]
 8011014:	7a1b      	ldrb	r3, [r3, #8]
 8011016:	2b00      	cmp	r3, #0
 8011018:	f040 8094 	bne.w	8011144 <SCSI_Read10+0x148>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 801101c:	697a      	ldr	r2, [r7, #20]
 801101e:	f248 031c 	movw	r3, #32796	; 0x801c
 8011022:	4413      	add	r3, r2
 8011024:	781b      	ldrb	r3, [r3, #0]
 8011026:	b25b      	sxtb	r3, r3
 8011028:	2b00      	cmp	r3, #0
 801102a:	db0c      	blt.n	8011046 <SCSI_Read10+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801102c:	697a      	ldr	r2, [r7, #20]
 801102e:	f248 031d 	movw	r3, #32797	; 0x801d
 8011032:	4413      	add	r3, r2
 8011034:	7819      	ldrb	r1, [r3, #0]
 8011036:	2320      	movs	r3, #32
 8011038:	2205      	movs	r2, #5
 801103a:	68f8      	ldr	r0, [r7, #12]
 801103c:	f7ff ff0a 	bl	8010e54 <SCSI_SenseCode>
      return -1;
 8011040:	f04f 33ff 	mov.w	r3, #4294967295
 8011044:	e088      	b.n	8011158 <SCSI_Read10+0x15c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8011046:	697a      	ldr	r2, [r7, #20]
 8011048:	f248 0362 	movw	r3, #32866	; 0x8062
 801104c:	4413      	add	r3, r2
 801104e:	781b      	ldrb	r3, [r3, #0]
 8011050:	2b02      	cmp	r3, #2
 8011052:	d108      	bne.n	8011066 <SCSI_Read10+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011054:	7af9      	ldrb	r1, [r7, #11]
 8011056:	233a      	movs	r3, #58	; 0x3a
 8011058:	2202      	movs	r2, #2
 801105a:	68f8      	ldr	r0, [r7, #12]
 801105c:	f7ff fefa 	bl	8010e54 <SCSI_SenseCode>

      return -1;
 8011060:	f04f 33ff 	mov.w	r3, #4294967295
 8011064:	e078      	b.n	8011158 <SCSI_Read10+0x15c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801106c:	689b      	ldr	r3, [r3, #8]
 801106e:	7afa      	ldrb	r2, [r7, #11]
 8011070:	4610      	mov	r0, r2
 8011072:	4798      	blx	r3
 8011074:	4603      	mov	r3, r0
 8011076:	2b00      	cmp	r3, #0
 8011078:	d008      	beq.n	801108c <SCSI_Read10+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801107a:	7af9      	ldrb	r1, [r7, #11]
 801107c:	233a      	movs	r3, #58	; 0x3a
 801107e:	2202      	movs	r2, #2
 8011080:	68f8      	ldr	r0, [r7, #12]
 8011082:	f7ff fee7 	bl	8010e54 <SCSI_SenseCode>
      return -1;
 8011086:	f04f 33ff 	mov.w	r3, #4294967295
 801108a:	e065      	b.n	8011158 <SCSI_Read10+0x15c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	3302      	adds	r3, #2
 8011090:	781b      	ldrb	r3, [r3, #0]
 8011092:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	3303      	adds	r3, #3
 8011098:	781b      	ldrb	r3, [r3, #0]
 801109a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801109c:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	3304      	adds	r3, #4
 80110a2:	781b      	ldrb	r3, [r3, #0]
 80110a4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80110a6:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80110a8:	687a      	ldr	r2, [r7, #4]
 80110aa:	3205      	adds	r2, #5
 80110ac:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80110ae:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80110b0:	6979      	ldr	r1, [r7, #20]
 80110b2:	f248 036c 	movw	r3, #32876	; 0x806c
 80110b6:	440b      	add	r3, r1
 80110b8:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	3307      	adds	r3, #7
 80110be:	781b      	ldrb	r3, [r3, #0]
 80110c0:	021b      	lsls	r3, r3, #8
 80110c2:	687a      	ldr	r2, [r7, #4]
 80110c4:	3208      	adds	r2, #8
 80110c6:	7812      	ldrb	r2, [r2, #0]
 80110c8:	431a      	orrs	r2, r3
 80110ca:	6979      	ldr	r1, [r7, #20]
 80110cc:	f248 0370 	movw	r3, #32880	; 0x8070
 80110d0:	440b      	add	r3, r1
 80110d2:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80110d4:	697a      	ldr	r2, [r7, #20]
 80110d6:	f248 036c 	movw	r3, #32876	; 0x806c
 80110da:	4413      	add	r3, r2
 80110dc:	6818      	ldr	r0, [r3, #0]
 80110de:	697a      	ldr	r2, [r7, #20]
 80110e0:	f248 0370 	movw	r3, #32880	; 0x8070
 80110e4:	4413      	add	r3, r2
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	7af9      	ldrb	r1, [r7, #11]
 80110ea:	4602      	mov	r2, r0
 80110ec:	68f8      	ldr	r0, [r7, #12]
 80110ee:	f000 faeb 	bl	80116c8 <SCSI_CheckAddressRange>
 80110f2:	4603      	mov	r3, r0
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	da02      	bge.n	80110fe <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80110f8:	f04f 33ff 	mov.w	r3, #4294967295
 80110fc:	e02c      	b.n	8011158 <SCSI_Read10+0x15c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80110fe:	697a      	ldr	r2, [r7, #20]
 8011100:	f248 0318 	movw	r3, #32792	; 0x8018
 8011104:	4413      	add	r3, r2
 8011106:	681a      	ldr	r2, [r3, #0]
 8011108:	6979      	ldr	r1, [r7, #20]
 801110a:	f248 0370 	movw	r3, #32880	; 0x8070
 801110e:	440b      	add	r3, r1
 8011110:	6819      	ldr	r1, [r3, #0]
 8011112:	6978      	ldr	r0, [r7, #20]
 8011114:	f248 0364 	movw	r3, #32868	; 0x8064
 8011118:	4403      	add	r3, r0
 801111a:	881b      	ldrh	r3, [r3, #0]
 801111c:	fb03 f301 	mul.w	r3, r3, r1
 8011120:	429a      	cmp	r2, r3
 8011122:	d00c      	beq.n	801113e <SCSI_Read10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011124:	697a      	ldr	r2, [r7, #20]
 8011126:	f248 031d 	movw	r3, #32797	; 0x801d
 801112a:	4413      	add	r3, r2
 801112c:	7819      	ldrb	r1, [r3, #0]
 801112e:	2320      	movs	r3, #32
 8011130:	2205      	movs	r2, #5
 8011132:	68f8      	ldr	r0, [r7, #12]
 8011134:	f7ff fe8e 	bl	8010e54 <SCSI_SenseCode>
      return -1;
 8011138:	f04f 33ff 	mov.w	r3, #4294967295
 801113c:	e00c      	b.n	8011158 <SCSI_Read10+0x15c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 801113e:	697b      	ldr	r3, [r7, #20]
 8011140:	2202      	movs	r2, #2
 8011142:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8011144:	697b      	ldr	r3, [r7, #20]
 8011146:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801114a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 801114c:	7afb      	ldrb	r3, [r7, #11]
 801114e:	4619      	mov	r1, r3
 8011150:	68f8      	ldr	r0, [r7, #12]
 8011152:	f000 fadd 	bl	8011710 <SCSI_ProcessRead>
 8011156:	4603      	mov	r3, r0
}
 8011158:	4618      	mov	r0, r3
 801115a:	3718      	adds	r7, #24
 801115c:	46bd      	mov	sp, r7
 801115e:	bd80      	pop	{r7, pc}

08011160 <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011160:	b580      	push	{r7, lr}
 8011162:	b086      	sub	sp, #24
 8011164:	af00      	add	r7, sp, #0
 8011166:	60f8      	str	r0, [r7, #12]
 8011168:	460b      	mov	r3, r1
 801116a:	607a      	str	r2, [r7, #4]
 801116c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011174:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8011176:	697b      	ldr	r3, [r7, #20]
 8011178:	7a1b      	ldrb	r3, [r3, #8]
 801117a:	2b00      	cmp	r3, #0
 801117c:	f040 809e 	bne.w	80112bc <SCSI_Read12+0x15c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8011180:	697a      	ldr	r2, [r7, #20]
 8011182:	f248 031c 	movw	r3, #32796	; 0x801c
 8011186:	4413      	add	r3, r2
 8011188:	781b      	ldrb	r3, [r3, #0]
 801118a:	b25b      	sxtb	r3, r3
 801118c:	2b00      	cmp	r3, #0
 801118e:	db0c      	blt.n	80111aa <SCSI_Read12+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011190:	697a      	ldr	r2, [r7, #20]
 8011192:	f248 031d 	movw	r3, #32797	; 0x801d
 8011196:	4413      	add	r3, r2
 8011198:	7819      	ldrb	r1, [r3, #0]
 801119a:	2320      	movs	r3, #32
 801119c:	2205      	movs	r2, #5
 801119e:	68f8      	ldr	r0, [r7, #12]
 80111a0:	f7ff fe58 	bl	8010e54 <SCSI_SenseCode>
      return -1;
 80111a4:	f04f 33ff 	mov.w	r3, #4294967295
 80111a8:	e092      	b.n	80112d0 <SCSI_Read12+0x170>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80111aa:	697a      	ldr	r2, [r7, #20]
 80111ac:	f248 0362 	movw	r3, #32866	; 0x8062
 80111b0:	4413      	add	r3, r2
 80111b2:	781b      	ldrb	r3, [r3, #0]
 80111b4:	2b02      	cmp	r3, #2
 80111b6:	d108      	bne.n	80111ca <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80111b8:	7af9      	ldrb	r1, [r7, #11]
 80111ba:	233a      	movs	r3, #58	; 0x3a
 80111bc:	2202      	movs	r2, #2
 80111be:	68f8      	ldr	r0, [r7, #12]
 80111c0:	f7ff fe48 	bl	8010e54 <SCSI_SenseCode>
      return -1;
 80111c4:	f04f 33ff 	mov.w	r3, #4294967295
 80111c8:	e082      	b.n	80112d0 <SCSI_Read12+0x170>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80111d0:	689b      	ldr	r3, [r3, #8]
 80111d2:	7afa      	ldrb	r2, [r7, #11]
 80111d4:	4610      	mov	r0, r2
 80111d6:	4798      	blx	r3
 80111d8:	4603      	mov	r3, r0
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d008      	beq.n	80111f0 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80111de:	7af9      	ldrb	r1, [r7, #11]
 80111e0:	233a      	movs	r3, #58	; 0x3a
 80111e2:	2202      	movs	r2, #2
 80111e4:	68f8      	ldr	r0, [r7, #12]
 80111e6:	f7ff fe35 	bl	8010e54 <SCSI_SenseCode>
      return -1;
 80111ea:	f04f 33ff 	mov.w	r3, #4294967295
 80111ee:	e06f      	b.n	80112d0 <SCSI_Read12+0x170>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	3302      	adds	r3, #2
 80111f4:	781b      	ldrb	r3, [r3, #0]
 80111f6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	3303      	adds	r3, #3
 80111fc:	781b      	ldrb	r3, [r3, #0]
 80111fe:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011200:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	3304      	adds	r3, #4
 8011206:	781b      	ldrb	r3, [r3, #0]
 8011208:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801120a:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801120c:	687a      	ldr	r2, [r7, #4]
 801120e:	3205      	adds	r2, #5
 8011210:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8011212:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011214:	6979      	ldr	r1, [r7, #20]
 8011216:	f248 036c 	movw	r3, #32876	; 0x806c
 801121a:	440b      	add	r3, r1
 801121c:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	3306      	adds	r3, #6
 8011222:	781b      	ldrb	r3, [r3, #0]
 8011224:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	3307      	adds	r3, #7
 801122a:	781b      	ldrb	r3, [r3, #0]
 801122c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801122e:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	3308      	adds	r3, #8
 8011234:	781b      	ldrb	r3, [r3, #0]
 8011236:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8011238:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 801123a:	687a      	ldr	r2, [r7, #4]
 801123c:	3209      	adds	r2, #9
 801123e:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8011240:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8011242:	6979      	ldr	r1, [r7, #20]
 8011244:	f248 0370 	movw	r3, #32880	; 0x8070
 8011248:	440b      	add	r3, r1
 801124a:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801124c:	697a      	ldr	r2, [r7, #20]
 801124e:	f248 036c 	movw	r3, #32876	; 0x806c
 8011252:	4413      	add	r3, r2
 8011254:	6818      	ldr	r0, [r3, #0]
 8011256:	697a      	ldr	r2, [r7, #20]
 8011258:	f248 0370 	movw	r3, #32880	; 0x8070
 801125c:	4413      	add	r3, r2
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	7af9      	ldrb	r1, [r7, #11]
 8011262:	4602      	mov	r2, r0
 8011264:	68f8      	ldr	r0, [r7, #12]
 8011266:	f000 fa2f 	bl	80116c8 <SCSI_CheckAddressRange>
 801126a:	4603      	mov	r3, r0
 801126c:	2b00      	cmp	r3, #0
 801126e:	da02      	bge.n	8011276 <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8011270:	f04f 33ff 	mov.w	r3, #4294967295
 8011274:	e02c      	b.n	80112d0 <SCSI_Read12+0x170>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8011276:	697a      	ldr	r2, [r7, #20]
 8011278:	f248 0318 	movw	r3, #32792	; 0x8018
 801127c:	4413      	add	r3, r2
 801127e:	681a      	ldr	r2, [r3, #0]
 8011280:	6979      	ldr	r1, [r7, #20]
 8011282:	f248 0370 	movw	r3, #32880	; 0x8070
 8011286:	440b      	add	r3, r1
 8011288:	6819      	ldr	r1, [r3, #0]
 801128a:	6978      	ldr	r0, [r7, #20]
 801128c:	f248 0364 	movw	r3, #32868	; 0x8064
 8011290:	4403      	add	r3, r0
 8011292:	881b      	ldrh	r3, [r3, #0]
 8011294:	fb03 f301 	mul.w	r3, r3, r1
 8011298:	429a      	cmp	r2, r3
 801129a:	d00c      	beq.n	80112b6 <SCSI_Read12+0x156>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801129c:	697a      	ldr	r2, [r7, #20]
 801129e:	f248 031d 	movw	r3, #32797	; 0x801d
 80112a2:	4413      	add	r3, r2
 80112a4:	7819      	ldrb	r1, [r3, #0]
 80112a6:	2320      	movs	r3, #32
 80112a8:	2205      	movs	r2, #5
 80112aa:	68f8      	ldr	r0, [r7, #12]
 80112ac:	f7ff fdd2 	bl	8010e54 <SCSI_SenseCode>
      return -1;
 80112b0:	f04f 33ff 	mov.w	r3, #4294967295
 80112b4:	e00c      	b.n	80112d0 <SCSI_Read12+0x170>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80112b6:	697b      	ldr	r3, [r7, #20]
 80112b8:	2202      	movs	r2, #2
 80112ba:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80112bc:	697b      	ldr	r3, [r7, #20]
 80112be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80112c2:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80112c4:	7afb      	ldrb	r3, [r7, #11]
 80112c6:	4619      	mov	r1, r3
 80112c8:	68f8      	ldr	r0, [r7, #12]
 80112ca:	f000 fa21 	bl	8011710 <SCSI_ProcessRead>
 80112ce:	4603      	mov	r3, r0
}
 80112d0:	4618      	mov	r0, r3
 80112d2:	3718      	adds	r7, #24
 80112d4:	46bd      	mov	sp, r7
 80112d6:	bd80      	pop	{r7, pc}

080112d8 <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80112d8:	b580      	push	{r7, lr}
 80112da:	b086      	sub	sp, #24
 80112dc:	af00      	add	r7, sp, #0
 80112de:	60f8      	str	r0, [r7, #12]
 80112e0:	460b      	mov	r3, r1
 80112e2:	607a      	str	r2, [r7, #4]
 80112e4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80112ec:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80112ee:	697b      	ldr	r3, [r7, #20]
 80112f0:	7a1b      	ldrb	r3, [r3, #8]
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	f040 80be 	bne.w	8011474 <SCSI_Write10+0x19c>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80112f8:	697a      	ldr	r2, [r7, #20]
 80112fa:	f248 0318 	movw	r3, #32792	; 0x8018
 80112fe:	4413      	add	r3, r2
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d10c      	bne.n	8011320 <SCSI_Write10+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011306:	697a      	ldr	r2, [r7, #20]
 8011308:	f248 031d 	movw	r3, #32797	; 0x801d
 801130c:	4413      	add	r3, r2
 801130e:	7819      	ldrb	r1, [r3, #0]
 8011310:	2320      	movs	r3, #32
 8011312:	2205      	movs	r2, #5
 8011314:	68f8      	ldr	r0, [r7, #12]
 8011316:	f7ff fd9d 	bl	8010e54 <SCSI_SenseCode>
      return -1;
 801131a:	f04f 33ff 	mov.w	r3, #4294967295
 801131e:	e0af      	b.n	8011480 <SCSI_Write10+0x1a8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8011320:	697a      	ldr	r2, [r7, #20]
 8011322:	f248 031c 	movw	r3, #32796	; 0x801c
 8011326:	4413      	add	r3, r2
 8011328:	781b      	ldrb	r3, [r3, #0]
 801132a:	b25b      	sxtb	r3, r3
 801132c:	2b00      	cmp	r3, #0
 801132e:	da0c      	bge.n	801134a <SCSI_Write10+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011330:	697a      	ldr	r2, [r7, #20]
 8011332:	f248 031d 	movw	r3, #32797	; 0x801d
 8011336:	4413      	add	r3, r2
 8011338:	7819      	ldrb	r1, [r3, #0]
 801133a:	2320      	movs	r3, #32
 801133c:	2205      	movs	r2, #5
 801133e:	68f8      	ldr	r0, [r7, #12]
 8011340:	f7ff fd88 	bl	8010e54 <SCSI_SenseCode>
      return -1;
 8011344:	f04f 33ff 	mov.w	r3, #4294967295
 8011348:	e09a      	b.n	8011480 <SCSI_Write10+0x1a8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011350:	689b      	ldr	r3, [r3, #8]
 8011352:	7afa      	ldrb	r2, [r7, #11]
 8011354:	4610      	mov	r0, r2
 8011356:	4798      	blx	r3
 8011358:	4603      	mov	r3, r0
 801135a:	2b00      	cmp	r3, #0
 801135c:	d008      	beq.n	8011370 <SCSI_Write10+0x98>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801135e:	7af9      	ldrb	r1, [r7, #11]
 8011360:	233a      	movs	r3, #58	; 0x3a
 8011362:	2202      	movs	r2, #2
 8011364:	68f8      	ldr	r0, [r7, #12]
 8011366:	f7ff fd75 	bl	8010e54 <SCSI_SenseCode>
      return -1;
 801136a:	f04f 33ff 	mov.w	r3, #4294967295
 801136e:	e087      	b.n	8011480 <SCSI_Write10+0x1a8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011376:	68db      	ldr	r3, [r3, #12]
 8011378:	7afa      	ldrb	r2, [r7, #11]
 801137a:	4610      	mov	r0, r2
 801137c:	4798      	blx	r3
 801137e:	4603      	mov	r3, r0
 8011380:	2b00      	cmp	r3, #0
 8011382:	d008      	beq.n	8011396 <SCSI_Write10+0xbe>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8011384:	7af9      	ldrb	r1, [r7, #11]
 8011386:	2327      	movs	r3, #39	; 0x27
 8011388:	2202      	movs	r2, #2
 801138a:	68f8      	ldr	r0, [r7, #12]
 801138c:	f7ff fd62 	bl	8010e54 <SCSI_SenseCode>
      return -1;
 8011390:	f04f 33ff 	mov.w	r3, #4294967295
 8011394:	e074      	b.n	8011480 <SCSI_Write10+0x1a8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	3302      	adds	r3, #2
 801139a:	781b      	ldrb	r3, [r3, #0]
 801139c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	3303      	adds	r3, #3
 80113a2:	781b      	ldrb	r3, [r3, #0]
 80113a4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80113a6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	3304      	adds	r3, #4
 80113ac:	781b      	ldrb	r3, [r3, #0]
 80113ae:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80113b0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80113b2:	687a      	ldr	r2, [r7, #4]
 80113b4:	3205      	adds	r2, #5
 80113b6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80113b8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80113ba:	6979      	ldr	r1, [r7, #20]
 80113bc:	f248 036c 	movw	r3, #32876	; 0x806c
 80113c0:	440b      	add	r3, r1
 80113c2:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	3307      	adds	r3, #7
 80113c8:	781b      	ldrb	r3, [r3, #0]
 80113ca:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 80113cc:	687a      	ldr	r2, [r7, #4]
 80113ce:	3208      	adds	r2, #8
 80113d0:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80113d2:	431a      	orrs	r2, r3
 80113d4:	6979      	ldr	r1, [r7, #20]
 80113d6:	f248 0370 	movw	r3, #32880	; 0x8070
 80113da:	440b      	add	r3, r1
 80113dc:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80113de:	697a      	ldr	r2, [r7, #20]
 80113e0:	f248 036c 	movw	r3, #32876	; 0x806c
 80113e4:	4413      	add	r3, r2
 80113e6:	6818      	ldr	r0, [r3, #0]
 80113e8:	697a      	ldr	r2, [r7, #20]
 80113ea:	f248 0370 	movw	r3, #32880	; 0x8070
 80113ee:	4413      	add	r3, r2
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	7af9      	ldrb	r1, [r7, #11]
 80113f4:	4602      	mov	r2, r0
 80113f6:	68f8      	ldr	r0, [r7, #12]
 80113f8:	f000 f966 	bl	80116c8 <SCSI_CheckAddressRange>
 80113fc:	4603      	mov	r3, r0
 80113fe:	2b00      	cmp	r3, #0
 8011400:	da02      	bge.n	8011408 <SCSI_Write10+0x130>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8011402:	f04f 33ff 	mov.w	r3, #4294967295
 8011406:	e03b      	b.n	8011480 <SCSI_Write10+0x1a8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8011408:	697a      	ldr	r2, [r7, #20]
 801140a:	f248 0370 	movw	r3, #32880	; 0x8070
 801140e:	4413      	add	r3, r2
 8011410:	681a      	ldr	r2, [r3, #0]
 8011412:	6979      	ldr	r1, [r7, #20]
 8011414:	f248 0364 	movw	r3, #32868	; 0x8064
 8011418:	440b      	add	r3, r1
 801141a:	881b      	ldrh	r3, [r3, #0]
 801141c:	fb03 f302 	mul.w	r3, r3, r2
 8011420:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8011422:	697a      	ldr	r2, [r7, #20]
 8011424:	f248 0318 	movw	r3, #32792	; 0x8018
 8011428:	4413      	add	r3, r2
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	693a      	ldr	r2, [r7, #16]
 801142e:	429a      	cmp	r2, r3
 8011430:	d00c      	beq.n	801144c <SCSI_Write10+0x174>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011432:	697a      	ldr	r2, [r7, #20]
 8011434:	f248 031d 	movw	r3, #32797	; 0x801d
 8011438:	4413      	add	r3, r2
 801143a:	7819      	ldrb	r1, [r3, #0]
 801143c:	2320      	movs	r3, #32
 801143e:	2205      	movs	r2, #5
 8011440:	68f8      	ldr	r0, [r7, #12]
 8011442:	f7ff fd07 	bl	8010e54 <SCSI_SenseCode>
      return -1;
 8011446:	f04f 33ff 	mov.w	r3, #4294967295
 801144a:	e019      	b.n	8011480 <SCSI_Write10+0x1a8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 801144c:	693b      	ldr	r3, [r7, #16]
 801144e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011452:	bf28      	it	cs
 8011454:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8011458:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 801145a:	697b      	ldr	r3, [r7, #20]
 801145c:	2201      	movs	r2, #1
 801145e:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8011460:	697b      	ldr	r3, [r7, #20]
 8011462:	f103 0210 	add.w	r2, r3, #16
 8011466:	693b      	ldr	r3, [r7, #16]
 8011468:	2101      	movs	r1, #1
 801146a:	68f8      	ldr	r0, [r7, #12]
 801146c:	f004 fb19 	bl	8015aa2 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8011470:	2300      	movs	r3, #0
 8011472:	e005      	b.n	8011480 <SCSI_Write10+0x1a8>
    return SCSI_ProcessWrite(pdev, lun);
 8011474:	7afb      	ldrb	r3, [r7, #11]
 8011476:	4619      	mov	r1, r3
 8011478:	68f8      	ldr	r0, [r7, #12]
 801147a:	f000 f9d7 	bl	801182c <SCSI_ProcessWrite>
 801147e:	4603      	mov	r3, r0
}
 8011480:	4618      	mov	r0, r3
 8011482:	3718      	adds	r7, #24
 8011484:	46bd      	mov	sp, r7
 8011486:	bd80      	pop	{r7, pc}

08011488 <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011488:	b580      	push	{r7, lr}
 801148a:	b086      	sub	sp, #24
 801148c:	af00      	add	r7, sp, #0
 801148e:	60f8      	str	r0, [r7, #12]
 8011490:	460b      	mov	r3, r1
 8011492:	607a      	str	r2, [r7, #4]
 8011494:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801149c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801149e:	697b      	ldr	r3, [r7, #20]
 80114a0:	7a1b      	ldrb	r3, [r3, #8]
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	f040 80ce 	bne.w	8011644 <SCSI_Write12+0x1bc>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80114a8:	697a      	ldr	r2, [r7, #20]
 80114aa:	f248 0318 	movw	r3, #32792	; 0x8018
 80114ae:	4413      	add	r3, r2
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d10c      	bne.n	80114d0 <SCSI_Write12+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80114b6:	697a      	ldr	r2, [r7, #20]
 80114b8:	f248 031d 	movw	r3, #32797	; 0x801d
 80114bc:	4413      	add	r3, r2
 80114be:	7819      	ldrb	r1, [r3, #0]
 80114c0:	2320      	movs	r3, #32
 80114c2:	2205      	movs	r2, #5
 80114c4:	68f8      	ldr	r0, [r7, #12]
 80114c6:	f7ff fcc5 	bl	8010e54 <SCSI_SenseCode>
      return -1;
 80114ca:	f04f 33ff 	mov.w	r3, #4294967295
 80114ce:	e0bf      	b.n	8011650 <SCSI_Write12+0x1c8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80114d0:	697a      	ldr	r2, [r7, #20]
 80114d2:	f248 031c 	movw	r3, #32796	; 0x801c
 80114d6:	4413      	add	r3, r2
 80114d8:	781b      	ldrb	r3, [r3, #0]
 80114da:	b25b      	sxtb	r3, r3
 80114dc:	2b00      	cmp	r3, #0
 80114de:	da0c      	bge.n	80114fa <SCSI_Write12+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80114e0:	697a      	ldr	r2, [r7, #20]
 80114e2:	f248 031d 	movw	r3, #32797	; 0x801d
 80114e6:	4413      	add	r3, r2
 80114e8:	7819      	ldrb	r1, [r3, #0]
 80114ea:	2320      	movs	r3, #32
 80114ec:	2205      	movs	r2, #5
 80114ee:	68f8      	ldr	r0, [r7, #12]
 80114f0:	f7ff fcb0 	bl	8010e54 <SCSI_SenseCode>
      return -1;
 80114f4:	f04f 33ff 	mov.w	r3, #4294967295
 80114f8:	e0aa      	b.n	8011650 <SCSI_Write12+0x1c8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011500:	689b      	ldr	r3, [r3, #8]
 8011502:	7afa      	ldrb	r2, [r7, #11]
 8011504:	4610      	mov	r0, r2
 8011506:	4798      	blx	r3
 8011508:	4603      	mov	r3, r0
 801150a:	2b00      	cmp	r3, #0
 801150c:	d00b      	beq.n	8011526 <SCSI_Write12+0x9e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801150e:	7af9      	ldrb	r1, [r7, #11]
 8011510:	233a      	movs	r3, #58	; 0x3a
 8011512:	2202      	movs	r2, #2
 8011514:	68f8      	ldr	r0, [r7, #12]
 8011516:	f7ff fc9d 	bl	8010e54 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 801151a:	697b      	ldr	r3, [r7, #20]
 801151c:	2205      	movs	r2, #5
 801151e:	721a      	strb	r2, [r3, #8]
      return -1;
 8011520:	f04f 33ff 	mov.w	r3, #4294967295
 8011524:	e094      	b.n	8011650 <SCSI_Write12+0x1c8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801152c:	68db      	ldr	r3, [r3, #12]
 801152e:	7afa      	ldrb	r2, [r7, #11]
 8011530:	4610      	mov	r0, r2
 8011532:	4798      	blx	r3
 8011534:	4603      	mov	r3, r0
 8011536:	2b00      	cmp	r3, #0
 8011538:	d00b      	beq.n	8011552 <SCSI_Write12+0xca>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 801153a:	7af9      	ldrb	r1, [r7, #11]
 801153c:	2327      	movs	r3, #39	; 0x27
 801153e:	2202      	movs	r2, #2
 8011540:	68f8      	ldr	r0, [r7, #12]
 8011542:	f7ff fc87 	bl	8010e54 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8011546:	697b      	ldr	r3, [r7, #20]
 8011548:	2205      	movs	r2, #5
 801154a:	721a      	strb	r2, [r3, #8]
      return -1;
 801154c:	f04f 33ff 	mov.w	r3, #4294967295
 8011550:	e07e      	b.n	8011650 <SCSI_Write12+0x1c8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	3302      	adds	r3, #2
 8011556:	781b      	ldrb	r3, [r3, #0]
 8011558:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	3303      	adds	r3, #3
 801155e:	781b      	ldrb	r3, [r3, #0]
 8011560:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011562:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	3304      	adds	r3, #4
 8011568:	781b      	ldrb	r3, [r3, #0]
 801156a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801156c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801156e:	687a      	ldr	r2, [r7, #4]
 8011570:	3205      	adds	r2, #5
 8011572:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8011574:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011576:	6979      	ldr	r1, [r7, #20]
 8011578:	f248 036c 	movw	r3, #32876	; 0x806c
 801157c:	440b      	add	r3, r1
 801157e:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	3306      	adds	r3, #6
 8011584:	781b      	ldrb	r3, [r3, #0]
 8011586:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	3307      	adds	r3, #7
 801158c:	781b      	ldrb	r3, [r3, #0]
 801158e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8011590:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	3308      	adds	r3, #8
 8011596:	781b      	ldrb	r3, [r3, #0]
 8011598:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 801159a:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 801159c:	687a      	ldr	r2, [r7, #4]
 801159e:	3209      	adds	r2, #9
 80115a0:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80115a2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80115a4:	6979      	ldr	r1, [r7, #20]
 80115a6:	f248 0370 	movw	r3, #32880	; 0x8070
 80115aa:	440b      	add	r3, r1
 80115ac:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80115ae:	697a      	ldr	r2, [r7, #20]
 80115b0:	f248 036c 	movw	r3, #32876	; 0x806c
 80115b4:	4413      	add	r3, r2
 80115b6:	6818      	ldr	r0, [r3, #0]
 80115b8:	697a      	ldr	r2, [r7, #20]
 80115ba:	f248 0370 	movw	r3, #32880	; 0x8070
 80115be:	4413      	add	r3, r2
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	7af9      	ldrb	r1, [r7, #11]
 80115c4:	4602      	mov	r2, r0
 80115c6:	68f8      	ldr	r0, [r7, #12]
 80115c8:	f000 f87e 	bl	80116c8 <SCSI_CheckAddressRange>
 80115cc:	4603      	mov	r3, r0
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	da02      	bge.n	80115d8 <SCSI_Write12+0x150>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80115d2:	f04f 33ff 	mov.w	r3, #4294967295
 80115d6:	e03b      	b.n	8011650 <SCSI_Write12+0x1c8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80115d8:	697a      	ldr	r2, [r7, #20]
 80115da:	f248 0370 	movw	r3, #32880	; 0x8070
 80115de:	4413      	add	r3, r2
 80115e0:	681a      	ldr	r2, [r3, #0]
 80115e2:	6979      	ldr	r1, [r7, #20]
 80115e4:	f248 0364 	movw	r3, #32868	; 0x8064
 80115e8:	440b      	add	r3, r1
 80115ea:	881b      	ldrh	r3, [r3, #0]
 80115ec:	fb03 f302 	mul.w	r3, r3, r2
 80115f0:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80115f2:	697a      	ldr	r2, [r7, #20]
 80115f4:	f248 0318 	movw	r3, #32792	; 0x8018
 80115f8:	4413      	add	r3, r2
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	693a      	ldr	r2, [r7, #16]
 80115fe:	429a      	cmp	r2, r3
 8011600:	d00c      	beq.n	801161c <SCSI_Write12+0x194>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011602:	697a      	ldr	r2, [r7, #20]
 8011604:	f248 031d 	movw	r3, #32797	; 0x801d
 8011608:	4413      	add	r3, r2
 801160a:	7819      	ldrb	r1, [r3, #0]
 801160c:	2320      	movs	r3, #32
 801160e:	2205      	movs	r2, #5
 8011610:	68f8      	ldr	r0, [r7, #12]
 8011612:	f7ff fc1f 	bl	8010e54 <SCSI_SenseCode>
      return -1;
 8011616:	f04f 33ff 	mov.w	r3, #4294967295
 801161a:	e019      	b.n	8011650 <SCSI_Write12+0x1c8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 801161c:	693b      	ldr	r3, [r7, #16]
 801161e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011622:	bf28      	it	cs
 8011624:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8011628:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 801162a:	697b      	ldr	r3, [r7, #20]
 801162c:	2201      	movs	r2, #1
 801162e:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8011630:	697b      	ldr	r3, [r7, #20]
 8011632:	f103 0210 	add.w	r2, r3, #16
 8011636:	693b      	ldr	r3, [r7, #16]
 8011638:	2101      	movs	r1, #1
 801163a:	68f8      	ldr	r0, [r7, #12]
 801163c:	f004 fa31 	bl	8015aa2 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8011640:	2300      	movs	r3, #0
 8011642:	e005      	b.n	8011650 <SCSI_Write12+0x1c8>
    return SCSI_ProcessWrite(pdev, lun);
 8011644:	7afb      	ldrb	r3, [r7, #11]
 8011646:	4619      	mov	r1, r3
 8011648:	68f8      	ldr	r0, [r7, #12]
 801164a:	f000 f8ef 	bl	801182c <SCSI_ProcessWrite>
 801164e:	4603      	mov	r3, r0
}
 8011650:	4618      	mov	r0, r3
 8011652:	3718      	adds	r7, #24
 8011654:	46bd      	mov	sp, r7
 8011656:	bd80      	pop	{r7, pc}

08011658 <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011658:	b580      	push	{r7, lr}
 801165a:	b086      	sub	sp, #24
 801165c:	af00      	add	r7, sp, #0
 801165e:	60f8      	str	r0, [r7, #12]
 8011660:	460b      	mov	r3, r1
 8011662:	607a      	str	r2, [r7, #4]
 8011664:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801166c:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	3301      	adds	r3, #1
 8011672:	781b      	ldrb	r3, [r3, #0]
 8011674:	f003 0302 	and.w	r3, r3, #2
 8011678:	2b00      	cmp	r3, #0
 801167a:	d008      	beq.n	801168e <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 801167c:	7af9      	ldrb	r1, [r7, #11]
 801167e:	2324      	movs	r3, #36	; 0x24
 8011680:	2205      	movs	r2, #5
 8011682:	68f8      	ldr	r0, [r7, #12]
 8011684:	f7ff fbe6 	bl	8010e54 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8011688:	f04f 33ff 	mov.w	r3, #4294967295
 801168c:	e018      	b.n	80116c0 <SCSI_Verify10+0x68>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 801168e:	697a      	ldr	r2, [r7, #20]
 8011690:	f248 036c 	movw	r3, #32876	; 0x806c
 8011694:	4413      	add	r3, r2
 8011696:	6818      	ldr	r0, [r3, #0]
 8011698:	697a      	ldr	r2, [r7, #20]
 801169a:	f248 0370 	movw	r3, #32880	; 0x8070
 801169e:	4413      	add	r3, r2
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	7af9      	ldrb	r1, [r7, #11]
 80116a4:	4602      	mov	r2, r0
 80116a6:	68f8      	ldr	r0, [r7, #12]
 80116a8:	f000 f80e 	bl	80116c8 <SCSI_CheckAddressRange>
 80116ac:	4603      	mov	r3, r0
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	da02      	bge.n	80116b8 <SCSI_Verify10+0x60>
  {
    return -1; /* error */
 80116b2:	f04f 33ff 	mov.w	r3, #4294967295
 80116b6:	e003      	b.n	80116c0 <SCSI_Verify10+0x68>
  }

  hmsc->bot_data_length = 0U;
 80116b8:	697b      	ldr	r3, [r7, #20]
 80116ba:	2200      	movs	r2, #0
 80116bc:	60da      	str	r2, [r3, #12]

  return 0;
 80116be:	2300      	movs	r3, #0
}
 80116c0:	4618      	mov	r0, r3
 80116c2:	3718      	adds	r7, #24
 80116c4:	46bd      	mov	sp, r7
 80116c6:	bd80      	pop	{r7, pc}

080116c8 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b086      	sub	sp, #24
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	60f8      	str	r0, [r7, #12]
 80116d0:	607a      	str	r2, [r7, #4]
 80116d2:	603b      	str	r3, [r7, #0]
 80116d4:	460b      	mov	r3, r1
 80116d6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80116de:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 80116e0:	687a      	ldr	r2, [r7, #4]
 80116e2:	683b      	ldr	r3, [r7, #0]
 80116e4:	441a      	add	r2, r3
 80116e6:	6979      	ldr	r1, [r7, #20]
 80116e8:	f248 0368 	movw	r3, #32872	; 0x8068
 80116ec:	440b      	add	r3, r1
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	429a      	cmp	r2, r3
 80116f2:	d908      	bls.n	8011706 <SCSI_CheckAddressRange+0x3e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 80116f4:	7af9      	ldrb	r1, [r7, #11]
 80116f6:	2321      	movs	r3, #33	; 0x21
 80116f8:	2205      	movs	r2, #5
 80116fa:	68f8      	ldr	r0, [r7, #12]
 80116fc:	f7ff fbaa 	bl	8010e54 <SCSI_SenseCode>
    return -1;
 8011700:	f04f 33ff 	mov.w	r3, #4294967295
 8011704:	e000      	b.n	8011708 <SCSI_CheckAddressRange+0x40>
  }

  return 0;
 8011706:	2300      	movs	r3, #0
}
 8011708:	4618      	mov	r0, r3
 801170a:	3718      	adds	r7, #24
 801170c:	46bd      	mov	sp, r7
 801170e:	bd80      	pop	{r7, pc}

08011710 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8011710:	b5b0      	push	{r4, r5, r7, lr}
 8011712:	b084      	sub	sp, #16
 8011714:	af00      	add	r7, sp, #0
 8011716:	6078      	str	r0, [r7, #4]
 8011718:	460b      	mov	r3, r1
 801171a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011722:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8011724:	68fa      	ldr	r2, [r7, #12]
 8011726:	f248 0370 	movw	r3, #32880	; 0x8070
 801172a:	4413      	add	r3, r2
 801172c:	681a      	ldr	r2, [r3, #0]
 801172e:	68f9      	ldr	r1, [r7, #12]
 8011730:	f248 0364 	movw	r3, #32868	; 0x8064
 8011734:	440b      	add	r3, r1
 8011736:	881b      	ldrh	r3, [r3, #0]
 8011738:	fb03 f302 	mul.w	r3, r3, r2
 801173c:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 801173e:	68bb      	ldr	r3, [r7, #8]
 8011740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011744:	bf28      	it	cs
 8011746:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 801174a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011752:	691c      	ldr	r4, [r3, #16]
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	f103 0110 	add.w	r1, r3, #16
 801175a:	68fa      	ldr	r2, [r7, #12]
 801175c:	f248 036c 	movw	r3, #32876	; 0x806c
 8011760:	4413      	add	r3, r2
 8011762:	681d      	ldr	r5, [r3, #0]
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8011764:	68fa      	ldr	r2, [r7, #12]
 8011766:	f248 0364 	movw	r3, #32868	; 0x8064
 801176a:	4413      	add	r3, r2
 801176c:	881b      	ldrh	r3, [r3, #0]
 801176e:	461a      	mov	r2, r3
 8011770:	68bb      	ldr	r3, [r7, #8]
 8011772:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8011776:	b29b      	uxth	r3, r3
 8011778:	78f8      	ldrb	r0, [r7, #3]
 801177a:	462a      	mov	r2, r5
 801177c:	47a0      	blx	r4
 801177e:	4603      	mov	r3, r0
 8011780:	2b00      	cmp	r3, #0
 8011782:	da08      	bge.n	8011796 <SCSI_ProcessRead+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8011784:	78f9      	ldrb	r1, [r7, #3]
 8011786:	2311      	movs	r3, #17
 8011788:	2204      	movs	r2, #4
 801178a:	6878      	ldr	r0, [r7, #4]
 801178c:	f7ff fb62 	bl	8010e54 <SCSI_SenseCode>
    return -1;
 8011790:	f04f 33ff 	mov.w	r3, #4294967295
 8011794:	e046      	b.n	8011824 <SCSI_ProcessRead+0x114>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	f103 0210 	add.w	r2, r3, #16
 801179c:	68bb      	ldr	r3, [r7, #8]
 801179e:	2181      	movs	r1, #129	; 0x81
 80117a0:	6878      	ldr	r0, [r7, #4]
 80117a2:	f004 f95d 	bl	8015a60 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80117a6:	68fa      	ldr	r2, [r7, #12]
 80117a8:	f248 036c 	movw	r3, #32876	; 0x806c
 80117ac:	4413      	add	r3, r2
 80117ae:	681a      	ldr	r2, [r3, #0]
 80117b0:	68f9      	ldr	r1, [r7, #12]
 80117b2:	f248 0364 	movw	r3, #32868	; 0x8064
 80117b6:	440b      	add	r3, r1
 80117b8:	881b      	ldrh	r3, [r3, #0]
 80117ba:	4619      	mov	r1, r3
 80117bc:	68bb      	ldr	r3, [r7, #8]
 80117be:	fbb3 f3f1 	udiv	r3, r3, r1
 80117c2:	441a      	add	r2, r3
 80117c4:	68f9      	ldr	r1, [r7, #12]
 80117c6:	f248 036c 	movw	r3, #32876	; 0x806c
 80117ca:	440b      	add	r3, r1
 80117cc:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80117ce:	68fa      	ldr	r2, [r7, #12]
 80117d0:	f248 0370 	movw	r3, #32880	; 0x8070
 80117d4:	4413      	add	r3, r2
 80117d6:	681a      	ldr	r2, [r3, #0]
 80117d8:	68f9      	ldr	r1, [r7, #12]
 80117da:	f248 0364 	movw	r3, #32868	; 0x8064
 80117de:	440b      	add	r3, r1
 80117e0:	881b      	ldrh	r3, [r3, #0]
 80117e2:	4619      	mov	r1, r3
 80117e4:	68bb      	ldr	r3, [r7, #8]
 80117e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80117ea:	1ad2      	subs	r2, r2, r3
 80117ec:	68f9      	ldr	r1, [r7, #12]
 80117ee:	f248 0370 	movw	r3, #32880	; 0x8070
 80117f2:	440b      	add	r3, r1
 80117f4:	601a      	str	r2, [r3, #0]

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 80117f6:	68fa      	ldr	r2, [r7, #12]
 80117f8:	f248 0338 	movw	r3, #32824	; 0x8038
 80117fc:	4413      	add	r3, r2
 80117fe:	681a      	ldr	r2, [r3, #0]
 8011800:	68bb      	ldr	r3, [r7, #8]
 8011802:	1ad2      	subs	r2, r2, r3
 8011804:	68f9      	ldr	r1, [r7, #12]
 8011806:	f248 0338 	movw	r3, #32824	; 0x8038
 801180a:	440b      	add	r3, r1
 801180c:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 801180e:	68fa      	ldr	r2, [r7, #12]
 8011810:	f248 0370 	movw	r3, #32880	; 0x8070
 8011814:	4413      	add	r3, r2
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	2b00      	cmp	r3, #0
 801181a:	d102      	bne.n	8011822 <SCSI_ProcessRead+0x112>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	2203      	movs	r2, #3
 8011820:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8011822:	2300      	movs	r3, #0
}
 8011824:	4618      	mov	r0, r3
 8011826:	3710      	adds	r7, #16
 8011828:	46bd      	mov	sp, r7
 801182a:	bdb0      	pop	{r4, r5, r7, pc}

0801182c <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 801182c:	b5b0      	push	{r4, r5, r7, lr}
 801182e:	b084      	sub	sp, #16
 8011830:	af00      	add	r7, sp, #0
 8011832:	6078      	str	r0, [r7, #4]
 8011834:	460b      	mov	r3, r1
 8011836:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801183e:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8011840:	68fa      	ldr	r2, [r7, #12]
 8011842:	f248 0370 	movw	r3, #32880	; 0x8070
 8011846:	4413      	add	r3, r2
 8011848:	681a      	ldr	r2, [r3, #0]
 801184a:	68f9      	ldr	r1, [r7, #12]
 801184c:	f248 0364 	movw	r3, #32868	; 0x8064
 8011850:	440b      	add	r3, r1
 8011852:	881b      	ldrh	r3, [r3, #0]
 8011854:	fb03 f302 	mul.w	r3, r3, r2
 8011858:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 801185a:	68bb      	ldr	r3, [r7, #8]
 801185c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011860:	bf28      	it	cs
 8011862:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8011866:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801186e:	695c      	ldr	r4, [r3, #20]
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	f103 0110 	add.w	r1, r3, #16
 8011876:	68fa      	ldr	r2, [r7, #12]
 8011878:	f248 036c 	movw	r3, #32876	; 0x806c
 801187c:	4413      	add	r3, r2
 801187e:	681d      	ldr	r5, [r3, #0]
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8011880:	68fa      	ldr	r2, [r7, #12]
 8011882:	f248 0364 	movw	r3, #32868	; 0x8064
 8011886:	4413      	add	r3, r2
 8011888:	881b      	ldrh	r3, [r3, #0]
 801188a:	461a      	mov	r2, r3
 801188c:	68bb      	ldr	r3, [r7, #8]
 801188e:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8011892:	b29b      	uxth	r3, r3
 8011894:	78f8      	ldrb	r0, [r7, #3]
 8011896:	462a      	mov	r2, r5
 8011898:	47a0      	blx	r4
 801189a:	4603      	mov	r3, r0
 801189c:	2b00      	cmp	r3, #0
 801189e:	da08      	bge.n	80118b2 <SCSI_ProcessWrite+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 80118a0:	78f9      	ldrb	r1, [r7, #3]
 80118a2:	2303      	movs	r3, #3
 80118a4:	2204      	movs	r2, #4
 80118a6:	6878      	ldr	r0, [r7, #4]
 80118a8:	f7ff fad4 	bl	8010e54 <SCSI_SenseCode>
    return -1;
 80118ac:	f04f 33ff 	mov.w	r3, #4294967295
 80118b0:	e05a      	b.n	8011968 <SCSI_ProcessWrite+0x13c>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80118b2:	68fa      	ldr	r2, [r7, #12]
 80118b4:	f248 036c 	movw	r3, #32876	; 0x806c
 80118b8:	4413      	add	r3, r2
 80118ba:	681a      	ldr	r2, [r3, #0]
 80118bc:	68f9      	ldr	r1, [r7, #12]
 80118be:	f248 0364 	movw	r3, #32868	; 0x8064
 80118c2:	440b      	add	r3, r1
 80118c4:	881b      	ldrh	r3, [r3, #0]
 80118c6:	4619      	mov	r1, r3
 80118c8:	68bb      	ldr	r3, [r7, #8]
 80118ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80118ce:	441a      	add	r2, r3
 80118d0:	68f9      	ldr	r1, [r7, #12]
 80118d2:	f248 036c 	movw	r3, #32876	; 0x806c
 80118d6:	440b      	add	r3, r1
 80118d8:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80118da:	68fa      	ldr	r2, [r7, #12]
 80118dc:	f248 0370 	movw	r3, #32880	; 0x8070
 80118e0:	4413      	add	r3, r2
 80118e2:	681a      	ldr	r2, [r3, #0]
 80118e4:	68f9      	ldr	r1, [r7, #12]
 80118e6:	f248 0364 	movw	r3, #32868	; 0x8064
 80118ea:	440b      	add	r3, r1
 80118ec:	881b      	ldrh	r3, [r3, #0]
 80118ee:	4619      	mov	r1, r3
 80118f0:	68bb      	ldr	r3, [r7, #8]
 80118f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80118f6:	1ad2      	subs	r2, r2, r3
 80118f8:	68f9      	ldr	r1, [r7, #12]
 80118fa:	f248 0370 	movw	r3, #32880	; 0x8070
 80118fe:	440b      	add	r3, r1
 8011900:	601a      	str	r2, [r3, #0]

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8011902:	68fa      	ldr	r2, [r7, #12]
 8011904:	f248 0338 	movw	r3, #32824	; 0x8038
 8011908:	4413      	add	r3, r2
 801190a:	681a      	ldr	r2, [r3, #0]
 801190c:	68bb      	ldr	r3, [r7, #8]
 801190e:	1ad2      	subs	r2, r2, r3
 8011910:	68f9      	ldr	r1, [r7, #12]
 8011912:	f248 0338 	movw	r3, #32824	; 0x8038
 8011916:	440b      	add	r3, r1
 8011918:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 801191a:	68fa      	ldr	r2, [r7, #12]
 801191c:	f248 0370 	movw	r3, #32880	; 0x8070
 8011920:	4413      	add	r3, r2
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	2b00      	cmp	r3, #0
 8011926:	d104      	bne.n	8011932 <SCSI_ProcessWrite+0x106>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8011928:	2100      	movs	r1, #0
 801192a:	6878      	ldr	r0, [r7, #4]
 801192c:	f7fe fde2 	bl	80104f4 <MSC_BOT_SendCSW>
 8011930:	e019      	b.n	8011966 <SCSI_ProcessWrite+0x13a>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8011932:	68fa      	ldr	r2, [r7, #12]
 8011934:	f248 0370 	movw	r3, #32880	; 0x8070
 8011938:	4413      	add	r3, r2
 801193a:	681a      	ldr	r2, [r3, #0]
 801193c:	68f9      	ldr	r1, [r7, #12]
 801193e:	f248 0364 	movw	r3, #32868	; 0x8064
 8011942:	440b      	add	r3, r1
 8011944:	881b      	ldrh	r3, [r3, #0]
 8011946:	fb03 f302 	mul.w	r3, r3, r2
 801194a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801194e:	bf28      	it	cs
 8011950:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8011954:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	f103 0210 	add.w	r2, r3, #16
 801195c:	68bb      	ldr	r3, [r7, #8]
 801195e:	2101      	movs	r1, #1
 8011960:	6878      	ldr	r0, [r7, #4]
 8011962:	f004 f89e 	bl	8015aa2 <USBD_LL_PrepareReceive>
  }

  return 0;
 8011966:	2300      	movs	r3, #0
}
 8011968:	4618      	mov	r0, r3
 801196a:	3710      	adds	r7, #16
 801196c:	46bd      	mov	sp, r7
 801196e:	bdb0      	pop	{r4, r5, r7, pc}

08011970 <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8011970:	b480      	push	{r7}
 8011972:	b087      	sub	sp, #28
 8011974:	af00      	add	r7, sp, #0
 8011976:	60f8      	str	r0, [r7, #12]
 8011978:	60b9      	str	r1, [r7, #8]
 801197a:	4613      	mov	r3, r2
 801197c:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 801197e:	88fb      	ldrh	r3, [r7, #6]
 8011980:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 8011982:	8afa      	ldrh	r2, [r7, #22]
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8011988:	e00b      	b.n	80119a2 <SCSI_UpdateBotData+0x32>
  {
    len--;
 801198a:	8afb      	ldrh	r3, [r7, #22]
 801198c:	3b01      	subs	r3, #1
 801198e:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8011990:	8afb      	ldrh	r3, [r7, #22]
 8011992:	68ba      	ldr	r2, [r7, #8]
 8011994:	441a      	add	r2, r3
 8011996:	8afb      	ldrh	r3, [r7, #22]
 8011998:	7811      	ldrb	r1, [r2, #0]
 801199a:	68fa      	ldr	r2, [r7, #12]
 801199c:	4413      	add	r3, r2
 801199e:	460a      	mov	r2, r1
 80119a0:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 80119a2:	8afb      	ldrh	r3, [r7, #22]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d1f0      	bne.n	801198a <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 80119a8:	2300      	movs	r3, #0
}
 80119aa:	4618      	mov	r0, r3
 80119ac:	371c      	adds	r7, #28
 80119ae:	46bd      	mov	sp, r7
 80119b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b4:	4770      	bx	lr

080119b6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80119b6:	b580      	push	{r7, lr}
 80119b8:	b086      	sub	sp, #24
 80119ba:	af00      	add	r7, sp, #0
 80119bc:	60f8      	str	r0, [r7, #12]
 80119be:	60b9      	str	r1, [r7, #8]
 80119c0:	4613      	mov	r3, r2
 80119c2:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d101      	bne.n	80119ce <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80119ca:	2303      	movs	r3, #3
 80119cc:	e025      	b.n	8011a1a <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d003      	beq.n	80119e0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	2200      	movs	r2, #0
 80119dc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d003      	beq.n	80119f2 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	2200      	movs	r2, #0
 80119ee:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80119f2:	68bb      	ldr	r3, [r7, #8]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d003      	beq.n	8011a00 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	68ba      	ldr	r2, [r7, #8]
 80119fc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	2201      	movs	r2, #1
 8011a04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	79fa      	ldrb	r2, [r7, #7]
 8011a0c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011a0e:	68f8      	ldr	r0, [r7, #12]
 8011a10:	f003 fece 	bl	80157b0 <USBD_LL_Init>
 8011a14:	4603      	mov	r3, r0
 8011a16:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011a18:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	3718      	adds	r7, #24
 8011a1e:	46bd      	mov	sp, r7
 8011a20:	bd80      	pop	{r7, pc}

08011a22 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011a22:	b580      	push	{r7, lr}
 8011a24:	b084      	sub	sp, #16
 8011a26:	af00      	add	r7, sp, #0
 8011a28:	6078      	str	r0, [r7, #4]
 8011a2a:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011a2c:	2300      	movs	r3, #0
 8011a2e:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011a30:	683b      	ldr	r3, [r7, #0]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d101      	bne.n	8011a3a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8011a36:	2303      	movs	r3, #3
 8011a38:	e010      	b.n	8011a5c <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	683a      	ldr	r2, [r7, #0]
 8011a3e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a4a:	f107 020e 	add.w	r2, r7, #14
 8011a4e:	4610      	mov	r0, r2
 8011a50:	4798      	blx	r3
 8011a52:	4602      	mov	r2, r0
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8011a5a:	2300      	movs	r3, #0
}
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	3710      	adds	r7, #16
 8011a60:	46bd      	mov	sp, r7
 8011a62:	bd80      	pop	{r7, pc}

08011a64 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b082      	sub	sp, #8
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011a6c:	6878      	ldr	r0, [r7, #4]
 8011a6e:	f003 feef 	bl	8015850 <USBD_LL_Start>
 8011a72:	4603      	mov	r3, r0
}
 8011a74:	4618      	mov	r0, r3
 8011a76:	3708      	adds	r7, #8
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	bd80      	pop	{r7, pc}

08011a7c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8011a7c:	b480      	push	{r7}
 8011a7e:	b083      	sub	sp, #12
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011a84:	2300      	movs	r3, #0
}
 8011a86:	4618      	mov	r0, r3
 8011a88:	370c      	adds	r7, #12
 8011a8a:	46bd      	mov	sp, r7
 8011a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a90:	4770      	bx	lr

08011a92 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011a92:	b580      	push	{r7, lr}
 8011a94:	b084      	sub	sp, #16
 8011a96:	af00      	add	r7, sp, #0
 8011a98:	6078      	str	r0, [r7, #4]
 8011a9a:	460b      	mov	r3, r1
 8011a9c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8011a9e:	2303      	movs	r3, #3
 8011aa0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d009      	beq.n	8011ac0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	78fa      	ldrb	r2, [r7, #3]
 8011ab6:	4611      	mov	r1, r2
 8011ab8:	6878      	ldr	r0, [r7, #4]
 8011aba:	4798      	blx	r3
 8011abc:	4603      	mov	r3, r0
 8011abe:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8011ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ac2:	4618      	mov	r0, r3
 8011ac4:	3710      	adds	r7, #16
 8011ac6:	46bd      	mov	sp, r7
 8011ac8:	bd80      	pop	{r7, pc}

08011aca <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011aca:	b580      	push	{r7, lr}
 8011acc:	b082      	sub	sp, #8
 8011ace:	af00      	add	r7, sp, #0
 8011ad0:	6078      	str	r0, [r7, #4]
 8011ad2:	460b      	mov	r3, r1
 8011ad4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d007      	beq.n	8011af0 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ae6:	685b      	ldr	r3, [r3, #4]
 8011ae8:	78fa      	ldrb	r2, [r7, #3]
 8011aea:	4611      	mov	r1, r2
 8011aec:	6878      	ldr	r0, [r7, #4]
 8011aee:	4798      	blx	r3
  }

  return USBD_OK;
 8011af0:	2300      	movs	r3, #0
}
 8011af2:	4618      	mov	r0, r3
 8011af4:	3708      	adds	r7, #8
 8011af6:	46bd      	mov	sp, r7
 8011af8:	bd80      	pop	{r7, pc}

08011afa <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011afa:	b580      	push	{r7, lr}
 8011afc:	b084      	sub	sp, #16
 8011afe:	af00      	add	r7, sp, #0
 8011b00:	6078      	str	r0, [r7, #4]
 8011b02:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011b0a:	6839      	ldr	r1, [r7, #0]
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	f000 ff2b 	bl	8012968 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	2201      	movs	r2, #1
 8011b16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8011b20:	461a      	mov	r2, r3
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011b2e:	f003 031f 	and.w	r3, r3, #31
 8011b32:	2b01      	cmp	r3, #1
 8011b34:	d00e      	beq.n	8011b54 <USBD_LL_SetupStage+0x5a>
 8011b36:	2b01      	cmp	r3, #1
 8011b38:	d302      	bcc.n	8011b40 <USBD_LL_SetupStage+0x46>
 8011b3a:	2b02      	cmp	r3, #2
 8011b3c:	d014      	beq.n	8011b68 <USBD_LL_SetupStage+0x6e>
 8011b3e:	e01d      	b.n	8011b7c <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011b46:	4619      	mov	r1, r3
 8011b48:	6878      	ldr	r0, [r7, #4]
 8011b4a:	f000 fa17 	bl	8011f7c <USBD_StdDevReq>
 8011b4e:	4603      	mov	r3, r0
 8011b50:	73fb      	strb	r3, [r7, #15]
      break;
 8011b52:	e020      	b.n	8011b96 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011b5a:	4619      	mov	r1, r3
 8011b5c:	6878      	ldr	r0, [r7, #4]
 8011b5e:	f000 fa7b 	bl	8012058 <USBD_StdItfReq>
 8011b62:	4603      	mov	r3, r0
 8011b64:	73fb      	strb	r3, [r7, #15]
      break;
 8011b66:	e016      	b.n	8011b96 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011b6e:	4619      	mov	r1, r3
 8011b70:	6878      	ldr	r0, [r7, #4]
 8011b72:	f000 fab7 	bl	80120e4 <USBD_StdEPReq>
 8011b76:	4603      	mov	r3, r0
 8011b78:	73fb      	strb	r3, [r7, #15]
      break;
 8011b7a:	e00c      	b.n	8011b96 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011b82:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011b86:	b2db      	uxtb	r3, r3
 8011b88:	4619      	mov	r1, r3
 8011b8a:	6878      	ldr	r0, [r7, #4]
 8011b8c:	f003 fedf 	bl	801594e <USBD_LL_StallEP>
 8011b90:	4603      	mov	r3, r0
 8011b92:	73fb      	strb	r3, [r7, #15]
      break;
 8011b94:	bf00      	nop
  }

  return ret;
 8011b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b98:	4618      	mov	r0, r3
 8011b9a:	3710      	adds	r7, #16
 8011b9c:	46bd      	mov	sp, r7
 8011b9e:	bd80      	pop	{r7, pc}

08011ba0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011ba0:	b580      	push	{r7, lr}
 8011ba2:	b086      	sub	sp, #24
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	60f8      	str	r0, [r7, #12]
 8011ba8:	460b      	mov	r3, r1
 8011baa:	607a      	str	r2, [r7, #4]
 8011bac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011bae:	7afb      	ldrb	r3, [r7, #11]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d137      	bne.n	8011c24 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011bba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011bc2:	2b03      	cmp	r3, #3
 8011bc4:	d14a      	bne.n	8011c5c <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8011bc6:	693b      	ldr	r3, [r7, #16]
 8011bc8:	689a      	ldr	r2, [r3, #8]
 8011bca:	693b      	ldr	r3, [r7, #16]
 8011bcc:	68db      	ldr	r3, [r3, #12]
 8011bce:	429a      	cmp	r2, r3
 8011bd0:	d913      	bls.n	8011bfa <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011bd2:	693b      	ldr	r3, [r7, #16]
 8011bd4:	689a      	ldr	r2, [r3, #8]
 8011bd6:	693b      	ldr	r3, [r7, #16]
 8011bd8:	68db      	ldr	r3, [r3, #12]
 8011bda:	1ad2      	subs	r2, r2, r3
 8011bdc:	693b      	ldr	r3, [r7, #16]
 8011bde:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011be0:	693b      	ldr	r3, [r7, #16]
 8011be2:	68da      	ldr	r2, [r3, #12]
 8011be4:	693b      	ldr	r3, [r7, #16]
 8011be6:	689b      	ldr	r3, [r3, #8]
 8011be8:	4293      	cmp	r3, r2
 8011bea:	bf28      	it	cs
 8011bec:	4613      	movcs	r3, r2
 8011bee:	461a      	mov	r2, r3
 8011bf0:	6879      	ldr	r1, [r7, #4]
 8011bf2:	68f8      	ldr	r0, [r7, #12]
 8011bf4:	f000 ff8f 	bl	8012b16 <USBD_CtlContinueRx>
 8011bf8:	e030      	b.n	8011c5c <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c00:	691b      	ldr	r3, [r3, #16]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d00a      	beq.n	8011c1c <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011c0c:	2b03      	cmp	r3, #3
 8011c0e:	d105      	bne.n	8011c1c <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c16:	691b      	ldr	r3, [r3, #16]
 8011c18:	68f8      	ldr	r0, [r7, #12]
 8011c1a:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8011c1c:	68f8      	ldr	r0, [r7, #12]
 8011c1e:	f000 ff8b 	bl	8012b38 <USBD_CtlSendStatus>
 8011c22:	e01b      	b.n	8011c5c <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c2a:	699b      	ldr	r3, [r3, #24]
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d013      	beq.n	8011c58 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8011c36:	2b03      	cmp	r3, #3
 8011c38:	d10e      	bne.n	8011c58 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c40:	699b      	ldr	r3, [r3, #24]
 8011c42:	7afa      	ldrb	r2, [r7, #11]
 8011c44:	4611      	mov	r1, r2
 8011c46:	68f8      	ldr	r0, [r7, #12]
 8011c48:	4798      	blx	r3
 8011c4a:	4603      	mov	r3, r0
 8011c4c:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8011c4e:	7dfb      	ldrb	r3, [r7, #23]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d003      	beq.n	8011c5c <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8011c54:	7dfb      	ldrb	r3, [r7, #23]
 8011c56:	e002      	b.n	8011c5e <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011c58:	2303      	movs	r3, #3
 8011c5a:	e000      	b.n	8011c5e <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8011c5c:	2300      	movs	r3, #0
}
 8011c5e:	4618      	mov	r0, r3
 8011c60:	3718      	adds	r7, #24
 8011c62:	46bd      	mov	sp, r7
 8011c64:	bd80      	pop	{r7, pc}

08011c66 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011c66:	b580      	push	{r7, lr}
 8011c68:	b086      	sub	sp, #24
 8011c6a:	af00      	add	r7, sp, #0
 8011c6c:	60f8      	str	r0, [r7, #12]
 8011c6e:	460b      	mov	r3, r1
 8011c70:	607a      	str	r2, [r7, #4]
 8011c72:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011c74:	7afb      	ldrb	r3, [r7, #11]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d16a      	bne.n	8011d50 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	3314      	adds	r3, #20
 8011c7e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011c86:	2b02      	cmp	r3, #2
 8011c88:	d155      	bne.n	8011d36 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8011c8a:	693b      	ldr	r3, [r7, #16]
 8011c8c:	689a      	ldr	r2, [r3, #8]
 8011c8e:	693b      	ldr	r3, [r7, #16]
 8011c90:	68db      	ldr	r3, [r3, #12]
 8011c92:	429a      	cmp	r2, r3
 8011c94:	d914      	bls.n	8011cc0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011c96:	693b      	ldr	r3, [r7, #16]
 8011c98:	689a      	ldr	r2, [r3, #8]
 8011c9a:	693b      	ldr	r3, [r7, #16]
 8011c9c:	68db      	ldr	r3, [r3, #12]
 8011c9e:	1ad2      	subs	r2, r2, r3
 8011ca0:	693b      	ldr	r3, [r7, #16]
 8011ca2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011ca4:	693b      	ldr	r3, [r7, #16]
 8011ca6:	689b      	ldr	r3, [r3, #8]
 8011ca8:	461a      	mov	r2, r3
 8011caa:	6879      	ldr	r1, [r7, #4]
 8011cac:	68f8      	ldr	r0, [r7, #12]
 8011cae:	f000 ff21 	bl	8012af4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	2200      	movs	r2, #0
 8011cb6:	2100      	movs	r1, #0
 8011cb8:	68f8      	ldr	r0, [r7, #12]
 8011cba:	f003 fef2 	bl	8015aa2 <USBD_LL_PrepareReceive>
 8011cbe:	e03a      	b.n	8011d36 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011cc0:	693b      	ldr	r3, [r7, #16]
 8011cc2:	68da      	ldr	r2, [r3, #12]
 8011cc4:	693b      	ldr	r3, [r7, #16]
 8011cc6:	689b      	ldr	r3, [r3, #8]
 8011cc8:	429a      	cmp	r2, r3
 8011cca:	d11c      	bne.n	8011d06 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011ccc:	693b      	ldr	r3, [r7, #16]
 8011cce:	685a      	ldr	r2, [r3, #4]
 8011cd0:	693b      	ldr	r3, [r7, #16]
 8011cd2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011cd4:	429a      	cmp	r2, r3
 8011cd6:	d316      	bcc.n	8011d06 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011cd8:	693b      	ldr	r3, [r7, #16]
 8011cda:	685a      	ldr	r2, [r3, #4]
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011ce2:	429a      	cmp	r2, r3
 8011ce4:	d20f      	bcs.n	8011d06 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011ce6:	2200      	movs	r2, #0
 8011ce8:	2100      	movs	r1, #0
 8011cea:	68f8      	ldr	r0, [r7, #12]
 8011cec:	f000 ff02 	bl	8012af4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	2200      	movs	r2, #0
 8011cf4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	2200      	movs	r2, #0
 8011cfc:	2100      	movs	r1, #0
 8011cfe:	68f8      	ldr	r0, [r7, #12]
 8011d00:	f003 fecf 	bl	8015aa2 <USBD_LL_PrepareReceive>
 8011d04:	e017      	b.n	8011d36 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d0c:	68db      	ldr	r3, [r3, #12]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d00a      	beq.n	8011d28 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011d18:	2b03      	cmp	r3, #3
 8011d1a:	d105      	bne.n	8011d28 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d22:	68db      	ldr	r3, [r3, #12]
 8011d24:	68f8      	ldr	r0, [r7, #12]
 8011d26:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011d28:	2180      	movs	r1, #128	; 0x80
 8011d2a:	68f8      	ldr	r0, [r7, #12]
 8011d2c:	f003 fe0f 	bl	801594e <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011d30:	68f8      	ldr	r0, [r7, #12]
 8011d32:	f000 ff14 	bl	8012b5e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8011d3c:	2b01      	cmp	r3, #1
 8011d3e:	d123      	bne.n	8011d88 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8011d40:	68f8      	ldr	r0, [r7, #12]
 8011d42:	f7ff fe9b 	bl	8011a7c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	2200      	movs	r2, #0
 8011d4a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8011d4e:	e01b      	b.n	8011d88 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d56:	695b      	ldr	r3, [r3, #20]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d013      	beq.n	8011d84 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8011d62:	2b03      	cmp	r3, #3
 8011d64:	d10e      	bne.n	8011d84 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d6c:	695b      	ldr	r3, [r3, #20]
 8011d6e:	7afa      	ldrb	r2, [r7, #11]
 8011d70:	4611      	mov	r1, r2
 8011d72:	68f8      	ldr	r0, [r7, #12]
 8011d74:	4798      	blx	r3
 8011d76:	4603      	mov	r3, r0
 8011d78:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8011d7a:	7dfb      	ldrb	r3, [r7, #23]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d003      	beq.n	8011d88 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8011d80:	7dfb      	ldrb	r3, [r7, #23]
 8011d82:	e002      	b.n	8011d8a <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011d84:	2303      	movs	r3, #3
 8011d86:	e000      	b.n	8011d8a <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8011d88:	2300      	movs	r3, #0
}
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	3718      	adds	r7, #24
 8011d8e:	46bd      	mov	sp, r7
 8011d90:	bd80      	pop	{r7, pc}

08011d92 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011d92:	b580      	push	{r7, lr}
 8011d94:	b082      	sub	sp, #8
 8011d96:	af00      	add	r7, sp, #0
 8011d98:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	2201      	movs	r2, #1
 8011d9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	2200      	movs	r2, #0
 8011da6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	2200      	movs	r2, #0
 8011dae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	2200      	movs	r2, #0
 8011db4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d009      	beq.n	8011dd6 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011dc8:	685b      	ldr	r3, [r3, #4]
 8011dca:	687a      	ldr	r2, [r7, #4]
 8011dcc:	6852      	ldr	r2, [r2, #4]
 8011dce:	b2d2      	uxtb	r2, r2
 8011dd0:	4611      	mov	r1, r2
 8011dd2:	6878      	ldr	r0, [r7, #4]
 8011dd4:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011dd6:	2340      	movs	r3, #64	; 0x40
 8011dd8:	2200      	movs	r2, #0
 8011dda:	2100      	movs	r1, #0
 8011ddc:	6878      	ldr	r0, [r7, #4]
 8011dde:	f003 fd52 	bl	8015886 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	2201      	movs	r2, #1
 8011de6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	2240      	movs	r2, #64	; 0x40
 8011dee:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011df2:	2340      	movs	r3, #64	; 0x40
 8011df4:	2200      	movs	r2, #0
 8011df6:	2180      	movs	r1, #128	; 0x80
 8011df8:	6878      	ldr	r0, [r7, #4]
 8011dfa:	f003 fd44 	bl	8015886 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	2201      	movs	r2, #1
 8011e02:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	2240      	movs	r2, #64	; 0x40
 8011e08:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8011e0a:	2300      	movs	r3, #0
}
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	3708      	adds	r7, #8
 8011e10:	46bd      	mov	sp, r7
 8011e12:	bd80      	pop	{r7, pc}

08011e14 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011e14:	b480      	push	{r7}
 8011e16:	b083      	sub	sp, #12
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	6078      	str	r0, [r7, #4]
 8011e1c:	460b      	mov	r3, r1
 8011e1e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	78fa      	ldrb	r2, [r7, #3]
 8011e24:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011e26:	2300      	movs	r3, #0
}
 8011e28:	4618      	mov	r0, r3
 8011e2a:	370c      	adds	r7, #12
 8011e2c:	46bd      	mov	sp, r7
 8011e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e32:	4770      	bx	lr

08011e34 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011e34:	b480      	push	{r7}
 8011e36:	b083      	sub	sp, #12
 8011e38:	af00      	add	r7, sp, #0
 8011e3a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	2204      	movs	r2, #4
 8011e4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011e50:	2300      	movs	r3, #0
}
 8011e52:	4618      	mov	r0, r3
 8011e54:	370c      	adds	r7, #12
 8011e56:	46bd      	mov	sp, r7
 8011e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e5c:	4770      	bx	lr

08011e5e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011e5e:	b480      	push	{r7}
 8011e60:	b083      	sub	sp, #12
 8011e62:	af00      	add	r7, sp, #0
 8011e64:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011e6c:	2b04      	cmp	r3, #4
 8011e6e:	d105      	bne.n	8011e7c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011e7c:	2300      	movs	r3, #0
}
 8011e7e:	4618      	mov	r0, r3
 8011e80:	370c      	adds	r7, #12
 8011e82:	46bd      	mov	sp, r7
 8011e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e88:	4770      	bx	lr

08011e8a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011e8a:	b580      	push	{r7, lr}
 8011e8c:	b082      	sub	sp, #8
 8011e8e:	af00      	add	r7, sp, #0
 8011e90:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011e98:	2b03      	cmp	r3, #3
 8011e9a:	d10b      	bne.n	8011eb4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ea2:	69db      	ldr	r3, [r3, #28]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d005      	beq.n	8011eb4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011eae:	69db      	ldr	r3, [r3, #28]
 8011eb0:	6878      	ldr	r0, [r7, #4]
 8011eb2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011eb4:	2300      	movs	r3, #0
}
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	3708      	adds	r7, #8
 8011eba:	46bd      	mov	sp, r7
 8011ebc:	bd80      	pop	{r7, pc}

08011ebe <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8011ebe:	b480      	push	{r7}
 8011ec0:	b083      	sub	sp, #12
 8011ec2:	af00      	add	r7, sp, #0
 8011ec4:	6078      	str	r0, [r7, #4]
 8011ec6:	460b      	mov	r3, r1
 8011ec8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8011eca:	2300      	movs	r3, #0
}
 8011ecc:	4618      	mov	r0, r3
 8011ece:	370c      	adds	r7, #12
 8011ed0:	46bd      	mov	sp, r7
 8011ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed6:	4770      	bx	lr

08011ed8 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8011ed8:	b480      	push	{r7}
 8011eda:	b083      	sub	sp, #12
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	6078      	str	r0, [r7, #4]
 8011ee0:	460b      	mov	r3, r1
 8011ee2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8011ee4:	2300      	movs	r3, #0
}
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	370c      	adds	r7, #12
 8011eea:	46bd      	mov	sp, r7
 8011eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef0:	4770      	bx	lr

08011ef2 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8011ef2:	b480      	push	{r7}
 8011ef4:	b083      	sub	sp, #12
 8011ef6:	af00      	add	r7, sp, #0
 8011ef8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011efa:	2300      	movs	r3, #0
}
 8011efc:	4618      	mov	r0, r3
 8011efe:	370c      	adds	r7, #12
 8011f00:	46bd      	mov	sp, r7
 8011f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f06:	4770      	bx	lr

08011f08 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011f08:	b580      	push	{r7, lr}
 8011f0a:	b082      	sub	sp, #8
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	2201      	movs	r2, #1
 8011f14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d009      	beq.n	8011f36 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f28:	685b      	ldr	r3, [r3, #4]
 8011f2a:	687a      	ldr	r2, [r7, #4]
 8011f2c:	6852      	ldr	r2, [r2, #4]
 8011f2e:	b2d2      	uxtb	r2, r2
 8011f30:	4611      	mov	r1, r2
 8011f32:	6878      	ldr	r0, [r7, #4]
 8011f34:	4798      	blx	r3
  }

  return USBD_OK;
 8011f36:	2300      	movs	r3, #0
}
 8011f38:	4618      	mov	r0, r3
 8011f3a:	3708      	adds	r7, #8
 8011f3c:	46bd      	mov	sp, r7
 8011f3e:	bd80      	pop	{r7, pc}

08011f40 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011f40:	b480      	push	{r7}
 8011f42:	b087      	sub	sp, #28
 8011f44:	af00      	add	r7, sp, #0
 8011f46:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011f4c:	697b      	ldr	r3, [r7, #20]
 8011f4e:	781b      	ldrb	r3, [r3, #0]
 8011f50:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011f52:	697b      	ldr	r3, [r7, #20]
 8011f54:	3301      	adds	r3, #1
 8011f56:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011f58:	697b      	ldr	r3, [r7, #20]
 8011f5a:	781b      	ldrb	r3, [r3, #0]
 8011f5c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011f5e:	8a3b      	ldrh	r3, [r7, #16]
 8011f60:	021b      	lsls	r3, r3, #8
 8011f62:	b21a      	sxth	r2, r3
 8011f64:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011f68:	4313      	orrs	r3, r2
 8011f6a:	b21b      	sxth	r3, r3
 8011f6c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011f6e:	89fb      	ldrh	r3, [r7, #14]
}
 8011f70:	4618      	mov	r0, r3
 8011f72:	371c      	adds	r7, #28
 8011f74:	46bd      	mov	sp, r7
 8011f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f7a:	4770      	bx	lr

08011f7c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011f7c:	b580      	push	{r7, lr}
 8011f7e:	b084      	sub	sp, #16
 8011f80:	af00      	add	r7, sp, #0
 8011f82:	6078      	str	r0, [r7, #4]
 8011f84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011f86:	2300      	movs	r3, #0
 8011f88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011f8a:	683b      	ldr	r3, [r7, #0]
 8011f8c:	781b      	ldrb	r3, [r3, #0]
 8011f8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011f92:	2b20      	cmp	r3, #32
 8011f94:	d004      	beq.n	8011fa0 <USBD_StdDevReq+0x24>
 8011f96:	2b40      	cmp	r3, #64	; 0x40
 8011f98:	d002      	beq.n	8011fa0 <USBD_StdDevReq+0x24>
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d00a      	beq.n	8011fb4 <USBD_StdDevReq+0x38>
 8011f9e:	e050      	b.n	8012042 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011fa6:	689b      	ldr	r3, [r3, #8]
 8011fa8:	6839      	ldr	r1, [r7, #0]
 8011faa:	6878      	ldr	r0, [r7, #4]
 8011fac:	4798      	blx	r3
 8011fae:	4603      	mov	r3, r0
 8011fb0:	73fb      	strb	r3, [r7, #15]
    break;
 8011fb2:	e04b      	b.n	801204c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011fb4:	683b      	ldr	r3, [r7, #0]
 8011fb6:	785b      	ldrb	r3, [r3, #1]
 8011fb8:	2b09      	cmp	r3, #9
 8011fba:	d83c      	bhi.n	8012036 <USBD_StdDevReq+0xba>
 8011fbc:	a201      	add	r2, pc, #4	; (adr r2, 8011fc4 <USBD_StdDevReq+0x48>)
 8011fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fc2:	bf00      	nop
 8011fc4:	08012019 	.word	0x08012019
 8011fc8:	0801202d 	.word	0x0801202d
 8011fcc:	08012037 	.word	0x08012037
 8011fd0:	08012023 	.word	0x08012023
 8011fd4:	08012037 	.word	0x08012037
 8011fd8:	08011ff7 	.word	0x08011ff7
 8011fdc:	08011fed 	.word	0x08011fed
 8011fe0:	08012037 	.word	0x08012037
 8011fe4:	0801200f 	.word	0x0801200f
 8011fe8:	08012001 	.word	0x08012001
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8011fec:	6839      	ldr	r1, [r7, #0]
 8011fee:	6878      	ldr	r0, [r7, #4]
 8011ff0:	f000 f9ce 	bl	8012390 <USBD_GetDescriptor>
      break;
 8011ff4:	e024      	b.n	8012040 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8011ff6:	6839      	ldr	r1, [r7, #0]
 8011ff8:	6878      	ldr	r0, [r7, #4]
 8011ffa:	f000 fb33 	bl	8012664 <USBD_SetAddress>
      break;
 8011ffe:	e01f      	b.n	8012040 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8012000:	6839      	ldr	r1, [r7, #0]
 8012002:	6878      	ldr	r0, [r7, #4]
 8012004:	f000 fb70 	bl	80126e8 <USBD_SetConfig>
 8012008:	4603      	mov	r3, r0
 801200a:	73fb      	strb	r3, [r7, #15]
      break;
 801200c:	e018      	b.n	8012040 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 801200e:	6839      	ldr	r1, [r7, #0]
 8012010:	6878      	ldr	r0, [r7, #4]
 8012012:	f000 fc0d 	bl	8012830 <USBD_GetConfig>
      break;
 8012016:	e013      	b.n	8012040 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8012018:	6839      	ldr	r1, [r7, #0]
 801201a:	6878      	ldr	r0, [r7, #4]
 801201c:	f000 fc3c 	bl	8012898 <USBD_GetStatus>
      break;
 8012020:	e00e      	b.n	8012040 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8012022:	6839      	ldr	r1, [r7, #0]
 8012024:	6878      	ldr	r0, [r7, #4]
 8012026:	f000 fc6a 	bl	80128fe <USBD_SetFeature>
      break;
 801202a:	e009      	b.n	8012040 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 801202c:	6839      	ldr	r1, [r7, #0]
 801202e:	6878      	ldr	r0, [r7, #4]
 8012030:	f000 fc79 	bl	8012926 <USBD_ClrFeature>
      break;
 8012034:	e004      	b.n	8012040 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8012036:	6839      	ldr	r1, [r7, #0]
 8012038:	6878      	ldr	r0, [r7, #4]
 801203a:	f000 fccf 	bl	80129dc <USBD_CtlError>
      break;
 801203e:	bf00      	nop
    }
    break;
 8012040:	e004      	b.n	801204c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8012042:	6839      	ldr	r1, [r7, #0]
 8012044:	6878      	ldr	r0, [r7, #4]
 8012046:	f000 fcc9 	bl	80129dc <USBD_CtlError>
    break;
 801204a:	bf00      	nop
  }

  return ret;
 801204c:	7bfb      	ldrb	r3, [r7, #15]
}
 801204e:	4618      	mov	r0, r3
 8012050:	3710      	adds	r7, #16
 8012052:	46bd      	mov	sp, r7
 8012054:	bd80      	pop	{r7, pc}
 8012056:	bf00      	nop

08012058 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012058:	b580      	push	{r7, lr}
 801205a:	b084      	sub	sp, #16
 801205c:	af00      	add	r7, sp, #0
 801205e:	6078      	str	r0, [r7, #4]
 8012060:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012062:	2300      	movs	r3, #0
 8012064:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012066:	683b      	ldr	r3, [r7, #0]
 8012068:	781b      	ldrb	r3, [r3, #0]
 801206a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801206e:	2b20      	cmp	r3, #32
 8012070:	d003      	beq.n	801207a <USBD_StdItfReq+0x22>
 8012072:	2b40      	cmp	r3, #64	; 0x40
 8012074:	d001      	beq.n	801207a <USBD_StdItfReq+0x22>
 8012076:	2b00      	cmp	r3, #0
 8012078:	d12a      	bne.n	80120d0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012080:	3b01      	subs	r3, #1
 8012082:	2b02      	cmp	r3, #2
 8012084:	d81d      	bhi.n	80120c2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8012086:	683b      	ldr	r3, [r7, #0]
 8012088:	889b      	ldrh	r3, [r3, #4]
 801208a:	b2db      	uxtb	r3, r3
 801208c:	2b01      	cmp	r3, #1
 801208e:	d813      	bhi.n	80120b8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012096:	689b      	ldr	r3, [r3, #8]
 8012098:	6839      	ldr	r1, [r7, #0]
 801209a:	6878      	ldr	r0, [r7, #4]
 801209c:	4798      	blx	r3
 801209e:	4603      	mov	r3, r0
 80120a0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80120a2:	683b      	ldr	r3, [r7, #0]
 80120a4:	88db      	ldrh	r3, [r3, #6]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d110      	bne.n	80120cc <USBD_StdItfReq+0x74>
 80120aa:	7bfb      	ldrb	r3, [r7, #15]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d10d      	bne.n	80120cc <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80120b0:	6878      	ldr	r0, [r7, #4]
 80120b2:	f000 fd41 	bl	8012b38 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80120b6:	e009      	b.n	80120cc <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80120b8:	6839      	ldr	r1, [r7, #0]
 80120ba:	6878      	ldr	r0, [r7, #4]
 80120bc:	f000 fc8e 	bl	80129dc <USBD_CtlError>
      break;
 80120c0:	e004      	b.n	80120cc <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80120c2:	6839      	ldr	r1, [r7, #0]
 80120c4:	6878      	ldr	r0, [r7, #4]
 80120c6:	f000 fc89 	bl	80129dc <USBD_CtlError>
      break;
 80120ca:	e000      	b.n	80120ce <USBD_StdItfReq+0x76>
      break;
 80120cc:	bf00      	nop
    }
    break;
 80120ce:	e004      	b.n	80120da <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80120d0:	6839      	ldr	r1, [r7, #0]
 80120d2:	6878      	ldr	r0, [r7, #4]
 80120d4:	f000 fc82 	bl	80129dc <USBD_CtlError>
    break;
 80120d8:	bf00      	nop
  }

  return ret;
 80120da:	7bfb      	ldrb	r3, [r7, #15]
}
 80120dc:	4618      	mov	r0, r3
 80120de:	3710      	adds	r7, #16
 80120e0:	46bd      	mov	sp, r7
 80120e2:	bd80      	pop	{r7, pc}

080120e4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80120e4:	b580      	push	{r7, lr}
 80120e6:	b084      	sub	sp, #16
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	6078      	str	r0, [r7, #4]
 80120ec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80120ee:	2300      	movs	r3, #0
 80120f0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80120f2:	683b      	ldr	r3, [r7, #0]
 80120f4:	889b      	ldrh	r3, [r3, #4]
 80120f6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80120f8:	683b      	ldr	r3, [r7, #0]
 80120fa:	781b      	ldrb	r3, [r3, #0]
 80120fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012100:	2b20      	cmp	r3, #32
 8012102:	d004      	beq.n	801210e <USBD_StdEPReq+0x2a>
 8012104:	2b40      	cmp	r3, #64	; 0x40
 8012106:	d002      	beq.n	801210e <USBD_StdEPReq+0x2a>
 8012108:	2b00      	cmp	r3, #0
 801210a:	d00a      	beq.n	8012122 <USBD_StdEPReq+0x3e>
 801210c:	e135      	b.n	801237a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012114:	689b      	ldr	r3, [r3, #8]
 8012116:	6839      	ldr	r1, [r7, #0]
 8012118:	6878      	ldr	r0, [r7, #4]
 801211a:	4798      	blx	r3
 801211c:	4603      	mov	r3, r0
 801211e:	73fb      	strb	r3, [r7, #15]
    break;
 8012120:	e130      	b.n	8012384 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8012122:	683b      	ldr	r3, [r7, #0]
 8012124:	785b      	ldrb	r3, [r3, #1]
 8012126:	2b01      	cmp	r3, #1
 8012128:	d03e      	beq.n	80121a8 <USBD_StdEPReq+0xc4>
 801212a:	2b03      	cmp	r3, #3
 801212c:	d002      	beq.n	8012134 <USBD_StdEPReq+0x50>
 801212e:	2b00      	cmp	r3, #0
 8012130:	d077      	beq.n	8012222 <USBD_StdEPReq+0x13e>
 8012132:	e11c      	b.n	801236e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801213a:	2b02      	cmp	r3, #2
 801213c:	d002      	beq.n	8012144 <USBD_StdEPReq+0x60>
 801213e:	2b03      	cmp	r3, #3
 8012140:	d015      	beq.n	801216e <USBD_StdEPReq+0x8a>
 8012142:	e02b      	b.n	801219c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012144:	7bbb      	ldrb	r3, [r7, #14]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d00c      	beq.n	8012164 <USBD_StdEPReq+0x80>
 801214a:	7bbb      	ldrb	r3, [r7, #14]
 801214c:	2b80      	cmp	r3, #128	; 0x80
 801214e:	d009      	beq.n	8012164 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8012150:	7bbb      	ldrb	r3, [r7, #14]
 8012152:	4619      	mov	r1, r3
 8012154:	6878      	ldr	r0, [r7, #4]
 8012156:	f003 fbfa 	bl	801594e <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801215a:	2180      	movs	r1, #128	; 0x80
 801215c:	6878      	ldr	r0, [r7, #4]
 801215e:	f003 fbf6 	bl	801594e <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8012162:	e020      	b.n	80121a6 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8012164:	6839      	ldr	r1, [r7, #0]
 8012166:	6878      	ldr	r0, [r7, #4]
 8012168:	f000 fc38 	bl	80129dc <USBD_CtlError>
        break;
 801216c:	e01b      	b.n	80121a6 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 801216e:	683b      	ldr	r3, [r7, #0]
 8012170:	885b      	ldrh	r3, [r3, #2]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d10e      	bne.n	8012194 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8012176:	7bbb      	ldrb	r3, [r7, #14]
 8012178:	2b00      	cmp	r3, #0
 801217a:	d00b      	beq.n	8012194 <USBD_StdEPReq+0xb0>
 801217c:	7bbb      	ldrb	r3, [r7, #14]
 801217e:	2b80      	cmp	r3, #128	; 0x80
 8012180:	d008      	beq.n	8012194 <USBD_StdEPReq+0xb0>
 8012182:	683b      	ldr	r3, [r7, #0]
 8012184:	88db      	ldrh	r3, [r3, #6]
 8012186:	2b00      	cmp	r3, #0
 8012188:	d104      	bne.n	8012194 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 801218a:	7bbb      	ldrb	r3, [r7, #14]
 801218c:	4619      	mov	r1, r3
 801218e:	6878      	ldr	r0, [r7, #4]
 8012190:	f003 fbdd 	bl	801594e <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8012194:	6878      	ldr	r0, [r7, #4]
 8012196:	f000 fccf 	bl	8012b38 <USBD_CtlSendStatus>

        break;
 801219a:	e004      	b.n	80121a6 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 801219c:	6839      	ldr	r1, [r7, #0]
 801219e:	6878      	ldr	r0, [r7, #4]
 80121a0:	f000 fc1c 	bl	80129dc <USBD_CtlError>
        break;
 80121a4:	bf00      	nop
      }
      break;
 80121a6:	e0e7      	b.n	8012378 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80121ae:	2b02      	cmp	r3, #2
 80121b0:	d002      	beq.n	80121b8 <USBD_StdEPReq+0xd4>
 80121b2:	2b03      	cmp	r3, #3
 80121b4:	d015      	beq.n	80121e2 <USBD_StdEPReq+0xfe>
 80121b6:	e02d      	b.n	8012214 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80121b8:	7bbb      	ldrb	r3, [r7, #14]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d00c      	beq.n	80121d8 <USBD_StdEPReq+0xf4>
 80121be:	7bbb      	ldrb	r3, [r7, #14]
 80121c0:	2b80      	cmp	r3, #128	; 0x80
 80121c2:	d009      	beq.n	80121d8 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80121c4:	7bbb      	ldrb	r3, [r7, #14]
 80121c6:	4619      	mov	r1, r3
 80121c8:	6878      	ldr	r0, [r7, #4]
 80121ca:	f003 fbc0 	bl	801594e <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80121ce:	2180      	movs	r1, #128	; 0x80
 80121d0:	6878      	ldr	r0, [r7, #4]
 80121d2:	f003 fbbc 	bl	801594e <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80121d6:	e023      	b.n	8012220 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80121d8:	6839      	ldr	r1, [r7, #0]
 80121da:	6878      	ldr	r0, [r7, #4]
 80121dc:	f000 fbfe 	bl	80129dc <USBD_CtlError>
        break;
 80121e0:	e01e      	b.n	8012220 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80121e2:	683b      	ldr	r3, [r7, #0]
 80121e4:	885b      	ldrh	r3, [r3, #2]
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d119      	bne.n	801221e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80121ea:	7bbb      	ldrb	r3, [r7, #14]
 80121ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d004      	beq.n	80121fe <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80121f4:	7bbb      	ldrb	r3, [r7, #14]
 80121f6:	4619      	mov	r1, r3
 80121f8:	6878      	ldr	r0, [r7, #4]
 80121fa:	f003 fbc7 	bl	801598c <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80121fe:	6878      	ldr	r0, [r7, #4]
 8012200:	f000 fc9a 	bl	8012b38 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801220a:	689b      	ldr	r3, [r3, #8]
 801220c:	6839      	ldr	r1, [r7, #0]
 801220e:	6878      	ldr	r0, [r7, #4]
 8012210:	4798      	blx	r3
        }
        break;
 8012212:	e004      	b.n	801221e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8012214:	6839      	ldr	r1, [r7, #0]
 8012216:	6878      	ldr	r0, [r7, #4]
 8012218:	f000 fbe0 	bl	80129dc <USBD_CtlError>
        break;
 801221c:	e000      	b.n	8012220 <USBD_StdEPReq+0x13c>
        break;
 801221e:	bf00      	nop
      }
      break;
 8012220:	e0aa      	b.n	8012378 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012228:	2b02      	cmp	r3, #2
 801222a:	d002      	beq.n	8012232 <USBD_StdEPReq+0x14e>
 801222c:	2b03      	cmp	r3, #3
 801222e:	d032      	beq.n	8012296 <USBD_StdEPReq+0x1b2>
 8012230:	e097      	b.n	8012362 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012232:	7bbb      	ldrb	r3, [r7, #14]
 8012234:	2b00      	cmp	r3, #0
 8012236:	d007      	beq.n	8012248 <USBD_StdEPReq+0x164>
 8012238:	7bbb      	ldrb	r3, [r7, #14]
 801223a:	2b80      	cmp	r3, #128	; 0x80
 801223c:	d004      	beq.n	8012248 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 801223e:	6839      	ldr	r1, [r7, #0]
 8012240:	6878      	ldr	r0, [r7, #4]
 8012242:	f000 fbcb 	bl	80129dc <USBD_CtlError>
          break;
 8012246:	e091      	b.n	801236c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012248:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801224c:	2b00      	cmp	r3, #0
 801224e:	da0b      	bge.n	8012268 <USBD_StdEPReq+0x184>
 8012250:	7bbb      	ldrb	r3, [r7, #14]
 8012252:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012256:	4613      	mov	r3, r2
 8012258:	009b      	lsls	r3, r3, #2
 801225a:	4413      	add	r3, r2
 801225c:	009b      	lsls	r3, r3, #2
 801225e:	3310      	adds	r3, #16
 8012260:	687a      	ldr	r2, [r7, #4]
 8012262:	4413      	add	r3, r2
 8012264:	3304      	adds	r3, #4
 8012266:	e00b      	b.n	8012280 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8012268:	7bbb      	ldrb	r3, [r7, #14]
 801226a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801226e:	4613      	mov	r3, r2
 8012270:	009b      	lsls	r3, r3, #2
 8012272:	4413      	add	r3, r2
 8012274:	009b      	lsls	r3, r3, #2
 8012276:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801227a:	687a      	ldr	r2, [r7, #4]
 801227c:	4413      	add	r3, r2
 801227e:	3304      	adds	r3, #4
 8012280:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8012282:	68bb      	ldr	r3, [r7, #8]
 8012284:	2200      	movs	r2, #0
 8012286:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012288:	68bb      	ldr	r3, [r7, #8]
 801228a:	2202      	movs	r2, #2
 801228c:	4619      	mov	r1, r3
 801228e:	6878      	ldr	r0, [r7, #4]
 8012290:	f000 fc15 	bl	8012abe <USBD_CtlSendData>
        break;
 8012294:	e06a      	b.n	801236c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8012296:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801229a:	2b00      	cmp	r3, #0
 801229c:	da11      	bge.n	80122c2 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801229e:	7bbb      	ldrb	r3, [r7, #14]
 80122a0:	f003 020f 	and.w	r2, r3, #15
 80122a4:	6879      	ldr	r1, [r7, #4]
 80122a6:	4613      	mov	r3, r2
 80122a8:	009b      	lsls	r3, r3, #2
 80122aa:	4413      	add	r3, r2
 80122ac:	009b      	lsls	r3, r3, #2
 80122ae:	440b      	add	r3, r1
 80122b0:	3324      	adds	r3, #36	; 0x24
 80122b2:	881b      	ldrh	r3, [r3, #0]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d117      	bne.n	80122e8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80122b8:	6839      	ldr	r1, [r7, #0]
 80122ba:	6878      	ldr	r0, [r7, #4]
 80122bc:	f000 fb8e 	bl	80129dc <USBD_CtlError>
            break;
 80122c0:	e054      	b.n	801236c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80122c2:	7bbb      	ldrb	r3, [r7, #14]
 80122c4:	f003 020f 	and.w	r2, r3, #15
 80122c8:	6879      	ldr	r1, [r7, #4]
 80122ca:	4613      	mov	r3, r2
 80122cc:	009b      	lsls	r3, r3, #2
 80122ce:	4413      	add	r3, r2
 80122d0:	009b      	lsls	r3, r3, #2
 80122d2:	440b      	add	r3, r1
 80122d4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80122d8:	881b      	ldrh	r3, [r3, #0]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d104      	bne.n	80122e8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80122de:	6839      	ldr	r1, [r7, #0]
 80122e0:	6878      	ldr	r0, [r7, #4]
 80122e2:	f000 fb7b 	bl	80129dc <USBD_CtlError>
            break;
 80122e6:	e041      	b.n	801236c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80122e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	da0b      	bge.n	8012308 <USBD_StdEPReq+0x224>
 80122f0:	7bbb      	ldrb	r3, [r7, #14]
 80122f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80122f6:	4613      	mov	r3, r2
 80122f8:	009b      	lsls	r3, r3, #2
 80122fa:	4413      	add	r3, r2
 80122fc:	009b      	lsls	r3, r3, #2
 80122fe:	3310      	adds	r3, #16
 8012300:	687a      	ldr	r2, [r7, #4]
 8012302:	4413      	add	r3, r2
 8012304:	3304      	adds	r3, #4
 8012306:	e00b      	b.n	8012320 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8012308:	7bbb      	ldrb	r3, [r7, #14]
 801230a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801230e:	4613      	mov	r3, r2
 8012310:	009b      	lsls	r3, r3, #2
 8012312:	4413      	add	r3, r2
 8012314:	009b      	lsls	r3, r3, #2
 8012316:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801231a:	687a      	ldr	r2, [r7, #4]
 801231c:	4413      	add	r3, r2
 801231e:	3304      	adds	r3, #4
 8012320:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8012322:	7bbb      	ldrb	r3, [r7, #14]
 8012324:	2b00      	cmp	r3, #0
 8012326:	d002      	beq.n	801232e <USBD_StdEPReq+0x24a>
 8012328:	7bbb      	ldrb	r3, [r7, #14]
 801232a:	2b80      	cmp	r3, #128	; 0x80
 801232c:	d103      	bne.n	8012336 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 801232e:	68bb      	ldr	r3, [r7, #8]
 8012330:	2200      	movs	r2, #0
 8012332:	601a      	str	r2, [r3, #0]
 8012334:	e00e      	b.n	8012354 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8012336:	7bbb      	ldrb	r3, [r7, #14]
 8012338:	4619      	mov	r1, r3
 801233a:	6878      	ldr	r0, [r7, #4]
 801233c:	f003 fb45 	bl	80159ca <USBD_LL_IsStallEP>
 8012340:	4603      	mov	r3, r0
 8012342:	2b00      	cmp	r3, #0
 8012344:	d003      	beq.n	801234e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8012346:	68bb      	ldr	r3, [r7, #8]
 8012348:	2201      	movs	r2, #1
 801234a:	601a      	str	r2, [r3, #0]
 801234c:	e002      	b.n	8012354 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 801234e:	68bb      	ldr	r3, [r7, #8]
 8012350:	2200      	movs	r2, #0
 8012352:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012354:	68bb      	ldr	r3, [r7, #8]
 8012356:	2202      	movs	r2, #2
 8012358:	4619      	mov	r1, r3
 801235a:	6878      	ldr	r0, [r7, #4]
 801235c:	f000 fbaf 	bl	8012abe <USBD_CtlSendData>
          break;
 8012360:	e004      	b.n	801236c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8012362:	6839      	ldr	r1, [r7, #0]
 8012364:	6878      	ldr	r0, [r7, #4]
 8012366:	f000 fb39 	bl	80129dc <USBD_CtlError>
        break;
 801236a:	bf00      	nop
      }
      break;
 801236c:	e004      	b.n	8012378 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 801236e:	6839      	ldr	r1, [r7, #0]
 8012370:	6878      	ldr	r0, [r7, #4]
 8012372:	f000 fb33 	bl	80129dc <USBD_CtlError>
      break;
 8012376:	bf00      	nop
    }
    break;
 8012378:	e004      	b.n	8012384 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 801237a:	6839      	ldr	r1, [r7, #0]
 801237c:	6878      	ldr	r0, [r7, #4]
 801237e:	f000 fb2d 	bl	80129dc <USBD_CtlError>
    break;
 8012382:	bf00      	nop
  }

  return ret;
 8012384:	7bfb      	ldrb	r3, [r7, #15]
}
 8012386:	4618      	mov	r0, r3
 8012388:	3710      	adds	r7, #16
 801238a:	46bd      	mov	sp, r7
 801238c:	bd80      	pop	{r7, pc}
	...

08012390 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012390:	b580      	push	{r7, lr}
 8012392:	b084      	sub	sp, #16
 8012394:	af00      	add	r7, sp, #0
 8012396:	6078      	str	r0, [r7, #4]
 8012398:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801239a:	2300      	movs	r3, #0
 801239c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801239e:	2300      	movs	r3, #0
 80123a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80123a2:	2300      	movs	r3, #0
 80123a4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80123a6:	683b      	ldr	r3, [r7, #0]
 80123a8:	885b      	ldrh	r3, [r3, #2]
 80123aa:	0a1b      	lsrs	r3, r3, #8
 80123ac:	b29b      	uxth	r3, r3
 80123ae:	3b01      	subs	r3, #1
 80123b0:	2b06      	cmp	r3, #6
 80123b2:	f200 8128 	bhi.w	8012606 <USBD_GetDescriptor+0x276>
 80123b6:	a201      	add	r2, pc, #4	; (adr r2, 80123bc <USBD_GetDescriptor+0x2c>)
 80123b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123bc:	080123d9 	.word	0x080123d9
 80123c0:	080123f1 	.word	0x080123f1
 80123c4:	08012431 	.word	0x08012431
 80123c8:	08012607 	.word	0x08012607
 80123cc:	08012607 	.word	0x08012607
 80123d0:	080125a7 	.word	0x080125a7
 80123d4:	080125d3 	.word	0x080125d3
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	687a      	ldr	r2, [r7, #4]
 80123e2:	7c12      	ldrb	r2, [r2, #16]
 80123e4:	f107 0108 	add.w	r1, r7, #8
 80123e8:	4610      	mov	r0, r2
 80123ea:	4798      	blx	r3
 80123ec:	60f8      	str	r0, [r7, #12]
    break;
 80123ee:	e112      	b.n	8012616 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	7c1b      	ldrb	r3, [r3, #16]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d10d      	bne.n	8012414 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80123fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012400:	f107 0208 	add.w	r2, r7, #8
 8012404:	4610      	mov	r0, r2
 8012406:	4798      	blx	r3
 8012408:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	3301      	adds	r3, #1
 801240e:	2202      	movs	r2, #2
 8012410:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8012412:	e100      	b.n	8012616 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801241a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801241c:	f107 0208 	add.w	r2, r7, #8
 8012420:	4610      	mov	r0, r2
 8012422:	4798      	blx	r3
 8012424:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	3301      	adds	r3, #1
 801242a:	2202      	movs	r2, #2
 801242c:	701a      	strb	r2, [r3, #0]
    break;
 801242e:	e0f2      	b.n	8012616 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8012430:	683b      	ldr	r3, [r7, #0]
 8012432:	885b      	ldrh	r3, [r3, #2]
 8012434:	b2db      	uxtb	r3, r3
 8012436:	2b05      	cmp	r3, #5
 8012438:	f200 80ac 	bhi.w	8012594 <USBD_GetDescriptor+0x204>
 801243c:	a201      	add	r2, pc, #4	; (adr r2, 8012444 <USBD_GetDescriptor+0xb4>)
 801243e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012442:	bf00      	nop
 8012444:	0801245d 	.word	0x0801245d
 8012448:	08012491 	.word	0x08012491
 801244c:	080124c5 	.word	0x080124c5
 8012450:	080124f9 	.word	0x080124f9
 8012454:	0801252d 	.word	0x0801252d
 8012458:	08012561 	.word	0x08012561
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012462:	685b      	ldr	r3, [r3, #4]
 8012464:	2b00      	cmp	r3, #0
 8012466:	d00b      	beq.n	8012480 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801246e:	685b      	ldr	r3, [r3, #4]
 8012470:	687a      	ldr	r2, [r7, #4]
 8012472:	7c12      	ldrb	r2, [r2, #16]
 8012474:	f107 0108 	add.w	r1, r7, #8
 8012478:	4610      	mov	r0, r2
 801247a:	4798      	blx	r3
 801247c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801247e:	e091      	b.n	80125a4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8012480:	6839      	ldr	r1, [r7, #0]
 8012482:	6878      	ldr	r0, [r7, #4]
 8012484:	f000 faaa 	bl	80129dc <USBD_CtlError>
        err++;
 8012488:	7afb      	ldrb	r3, [r7, #11]
 801248a:	3301      	adds	r3, #1
 801248c:	72fb      	strb	r3, [r7, #11]
      break;
 801248e:	e089      	b.n	80125a4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012496:	689b      	ldr	r3, [r3, #8]
 8012498:	2b00      	cmp	r3, #0
 801249a:	d00b      	beq.n	80124b4 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80124a2:	689b      	ldr	r3, [r3, #8]
 80124a4:	687a      	ldr	r2, [r7, #4]
 80124a6:	7c12      	ldrb	r2, [r2, #16]
 80124a8:	f107 0108 	add.w	r1, r7, #8
 80124ac:	4610      	mov	r0, r2
 80124ae:	4798      	blx	r3
 80124b0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80124b2:	e077      	b.n	80125a4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80124b4:	6839      	ldr	r1, [r7, #0]
 80124b6:	6878      	ldr	r0, [r7, #4]
 80124b8:	f000 fa90 	bl	80129dc <USBD_CtlError>
        err++;
 80124bc:	7afb      	ldrb	r3, [r7, #11]
 80124be:	3301      	adds	r3, #1
 80124c0:	72fb      	strb	r3, [r7, #11]
      break;
 80124c2:	e06f      	b.n	80125a4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80124ca:	68db      	ldr	r3, [r3, #12]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d00b      	beq.n	80124e8 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80124d6:	68db      	ldr	r3, [r3, #12]
 80124d8:	687a      	ldr	r2, [r7, #4]
 80124da:	7c12      	ldrb	r2, [r2, #16]
 80124dc:	f107 0108 	add.w	r1, r7, #8
 80124e0:	4610      	mov	r0, r2
 80124e2:	4798      	blx	r3
 80124e4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80124e6:	e05d      	b.n	80125a4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80124e8:	6839      	ldr	r1, [r7, #0]
 80124ea:	6878      	ldr	r0, [r7, #4]
 80124ec:	f000 fa76 	bl	80129dc <USBD_CtlError>
        err++;
 80124f0:	7afb      	ldrb	r3, [r7, #11]
 80124f2:	3301      	adds	r3, #1
 80124f4:	72fb      	strb	r3, [r7, #11]
      break;
 80124f6:	e055      	b.n	80125a4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80124fe:	691b      	ldr	r3, [r3, #16]
 8012500:	2b00      	cmp	r3, #0
 8012502:	d00b      	beq.n	801251c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801250a:	691b      	ldr	r3, [r3, #16]
 801250c:	687a      	ldr	r2, [r7, #4]
 801250e:	7c12      	ldrb	r2, [r2, #16]
 8012510:	f107 0108 	add.w	r1, r7, #8
 8012514:	4610      	mov	r0, r2
 8012516:	4798      	blx	r3
 8012518:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801251a:	e043      	b.n	80125a4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 801251c:	6839      	ldr	r1, [r7, #0]
 801251e:	6878      	ldr	r0, [r7, #4]
 8012520:	f000 fa5c 	bl	80129dc <USBD_CtlError>
        err++;
 8012524:	7afb      	ldrb	r3, [r7, #11]
 8012526:	3301      	adds	r3, #1
 8012528:	72fb      	strb	r3, [r7, #11]
      break;
 801252a:	e03b      	b.n	80125a4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012532:	695b      	ldr	r3, [r3, #20]
 8012534:	2b00      	cmp	r3, #0
 8012536:	d00b      	beq.n	8012550 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801253e:	695b      	ldr	r3, [r3, #20]
 8012540:	687a      	ldr	r2, [r7, #4]
 8012542:	7c12      	ldrb	r2, [r2, #16]
 8012544:	f107 0108 	add.w	r1, r7, #8
 8012548:	4610      	mov	r0, r2
 801254a:	4798      	blx	r3
 801254c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801254e:	e029      	b.n	80125a4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8012550:	6839      	ldr	r1, [r7, #0]
 8012552:	6878      	ldr	r0, [r7, #4]
 8012554:	f000 fa42 	bl	80129dc <USBD_CtlError>
        err++;
 8012558:	7afb      	ldrb	r3, [r7, #11]
 801255a:	3301      	adds	r3, #1
 801255c:	72fb      	strb	r3, [r7, #11]
      break;
 801255e:	e021      	b.n	80125a4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012566:	699b      	ldr	r3, [r3, #24]
 8012568:	2b00      	cmp	r3, #0
 801256a:	d00b      	beq.n	8012584 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012572:	699b      	ldr	r3, [r3, #24]
 8012574:	687a      	ldr	r2, [r7, #4]
 8012576:	7c12      	ldrb	r2, [r2, #16]
 8012578:	f107 0108 	add.w	r1, r7, #8
 801257c:	4610      	mov	r0, r2
 801257e:	4798      	blx	r3
 8012580:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012582:	e00f      	b.n	80125a4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8012584:	6839      	ldr	r1, [r7, #0]
 8012586:	6878      	ldr	r0, [r7, #4]
 8012588:	f000 fa28 	bl	80129dc <USBD_CtlError>
        err++;
 801258c:	7afb      	ldrb	r3, [r7, #11]
 801258e:	3301      	adds	r3, #1
 8012590:	72fb      	strb	r3, [r7, #11]
      break;
 8012592:	e007      	b.n	80125a4 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8012594:	6839      	ldr	r1, [r7, #0]
 8012596:	6878      	ldr	r0, [r7, #4]
 8012598:	f000 fa20 	bl	80129dc <USBD_CtlError>
      err++;
 801259c:	7afb      	ldrb	r3, [r7, #11]
 801259e:	3301      	adds	r3, #1
 80125a0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80125a2:	bf00      	nop
    }
    break;
 80125a4:	e037      	b.n	8012616 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	7c1b      	ldrb	r3, [r3, #16]
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d109      	bne.n	80125c2 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80125b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125b6:	f107 0208 	add.w	r2, r7, #8
 80125ba:	4610      	mov	r0, r2
 80125bc:	4798      	blx	r3
 80125be:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80125c0:	e029      	b.n	8012616 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80125c2:	6839      	ldr	r1, [r7, #0]
 80125c4:	6878      	ldr	r0, [r7, #4]
 80125c6:	f000 fa09 	bl	80129dc <USBD_CtlError>
      err++;
 80125ca:	7afb      	ldrb	r3, [r7, #11]
 80125cc:	3301      	adds	r3, #1
 80125ce:	72fb      	strb	r3, [r7, #11]
    break;
 80125d0:	e021      	b.n	8012616 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	7c1b      	ldrb	r3, [r3, #16]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d10d      	bne.n	80125f6 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80125e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80125e2:	f107 0208 	add.w	r2, r7, #8
 80125e6:	4610      	mov	r0, r2
 80125e8:	4798      	blx	r3
 80125ea:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	3301      	adds	r3, #1
 80125f0:	2207      	movs	r2, #7
 80125f2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80125f4:	e00f      	b.n	8012616 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80125f6:	6839      	ldr	r1, [r7, #0]
 80125f8:	6878      	ldr	r0, [r7, #4]
 80125fa:	f000 f9ef 	bl	80129dc <USBD_CtlError>
      err++;
 80125fe:	7afb      	ldrb	r3, [r7, #11]
 8012600:	3301      	adds	r3, #1
 8012602:	72fb      	strb	r3, [r7, #11]
    break;
 8012604:	e007      	b.n	8012616 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8012606:	6839      	ldr	r1, [r7, #0]
 8012608:	6878      	ldr	r0, [r7, #4]
 801260a:	f000 f9e7 	bl	80129dc <USBD_CtlError>
    err++;
 801260e:	7afb      	ldrb	r3, [r7, #11]
 8012610:	3301      	adds	r3, #1
 8012612:	72fb      	strb	r3, [r7, #11]
    break;
 8012614:	bf00      	nop
  }

  if (err != 0U)
 8012616:	7afb      	ldrb	r3, [r7, #11]
 8012618:	2b00      	cmp	r3, #0
 801261a:	d11e      	bne.n	801265a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 801261c:	683b      	ldr	r3, [r7, #0]
 801261e:	88db      	ldrh	r3, [r3, #6]
 8012620:	2b00      	cmp	r3, #0
 8012622:	d016      	beq.n	8012652 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8012624:	893b      	ldrh	r3, [r7, #8]
 8012626:	2b00      	cmp	r3, #0
 8012628:	d00e      	beq.n	8012648 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 801262a:	683b      	ldr	r3, [r7, #0]
 801262c:	88da      	ldrh	r2, [r3, #6]
 801262e:	893b      	ldrh	r3, [r7, #8]
 8012630:	4293      	cmp	r3, r2
 8012632:	bf28      	it	cs
 8012634:	4613      	movcs	r3, r2
 8012636:	b29b      	uxth	r3, r3
 8012638:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 801263a:	893b      	ldrh	r3, [r7, #8]
 801263c:	461a      	mov	r2, r3
 801263e:	68f9      	ldr	r1, [r7, #12]
 8012640:	6878      	ldr	r0, [r7, #4]
 8012642:	f000 fa3c 	bl	8012abe <USBD_CtlSendData>
 8012646:	e009      	b.n	801265c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8012648:	6839      	ldr	r1, [r7, #0]
 801264a:	6878      	ldr	r0, [r7, #4]
 801264c:	f000 f9c6 	bl	80129dc <USBD_CtlError>
 8012650:	e004      	b.n	801265c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8012652:	6878      	ldr	r0, [r7, #4]
 8012654:	f000 fa70 	bl	8012b38 <USBD_CtlSendStatus>
 8012658:	e000      	b.n	801265c <USBD_GetDescriptor+0x2cc>
    return;
 801265a:	bf00      	nop
    }
  }
}
 801265c:	3710      	adds	r7, #16
 801265e:	46bd      	mov	sp, r7
 8012660:	bd80      	pop	{r7, pc}
 8012662:	bf00      	nop

08012664 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012664:	b580      	push	{r7, lr}
 8012666:	b084      	sub	sp, #16
 8012668:	af00      	add	r7, sp, #0
 801266a:	6078      	str	r0, [r7, #4]
 801266c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801266e:	683b      	ldr	r3, [r7, #0]
 8012670:	889b      	ldrh	r3, [r3, #4]
 8012672:	2b00      	cmp	r3, #0
 8012674:	d130      	bne.n	80126d8 <USBD_SetAddress+0x74>
 8012676:	683b      	ldr	r3, [r7, #0]
 8012678:	88db      	ldrh	r3, [r3, #6]
 801267a:	2b00      	cmp	r3, #0
 801267c:	d12c      	bne.n	80126d8 <USBD_SetAddress+0x74>
 801267e:	683b      	ldr	r3, [r7, #0]
 8012680:	885b      	ldrh	r3, [r3, #2]
 8012682:	2b7f      	cmp	r3, #127	; 0x7f
 8012684:	d828      	bhi.n	80126d8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012686:	683b      	ldr	r3, [r7, #0]
 8012688:	885b      	ldrh	r3, [r3, #2]
 801268a:	b2db      	uxtb	r3, r3
 801268c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012690:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012698:	2b03      	cmp	r3, #3
 801269a:	d104      	bne.n	80126a6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 801269c:	6839      	ldr	r1, [r7, #0]
 801269e:	6878      	ldr	r0, [r7, #4]
 80126a0:	f000 f99c 	bl	80129dc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80126a4:	e01c      	b.n	80126e0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	7bfa      	ldrb	r2, [r7, #15]
 80126aa:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80126ae:	7bfb      	ldrb	r3, [r7, #15]
 80126b0:	4619      	mov	r1, r3
 80126b2:	6878      	ldr	r0, [r7, #4]
 80126b4:	f003 f9b5 	bl	8015a22 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80126b8:	6878      	ldr	r0, [r7, #4]
 80126ba:	f000 fa3d 	bl	8012b38 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80126be:	7bfb      	ldrb	r3, [r7, #15]
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d004      	beq.n	80126ce <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	2202      	movs	r2, #2
 80126c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80126cc:	e008      	b.n	80126e0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	2201      	movs	r2, #1
 80126d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80126d6:	e003      	b.n	80126e0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80126d8:	6839      	ldr	r1, [r7, #0]
 80126da:	6878      	ldr	r0, [r7, #4]
 80126dc:	f000 f97e 	bl	80129dc <USBD_CtlError>
  }
}
 80126e0:	bf00      	nop
 80126e2:	3710      	adds	r7, #16
 80126e4:	46bd      	mov	sp, r7
 80126e6:	bd80      	pop	{r7, pc}

080126e8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80126e8:	b580      	push	{r7, lr}
 80126ea:	b084      	sub	sp, #16
 80126ec:	af00      	add	r7, sp, #0
 80126ee:	6078      	str	r0, [r7, #4]
 80126f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80126f2:	2300      	movs	r3, #0
 80126f4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80126f6:	683b      	ldr	r3, [r7, #0]
 80126f8:	885b      	ldrh	r3, [r3, #2]
 80126fa:	b2da      	uxtb	r2, r3
 80126fc:	4b4b      	ldr	r3, [pc, #300]	; (801282c <USBD_SetConfig+0x144>)
 80126fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012700:	4b4a      	ldr	r3, [pc, #296]	; (801282c <USBD_SetConfig+0x144>)
 8012702:	781b      	ldrb	r3, [r3, #0]
 8012704:	2b01      	cmp	r3, #1
 8012706:	d905      	bls.n	8012714 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012708:	6839      	ldr	r1, [r7, #0]
 801270a:	6878      	ldr	r0, [r7, #4]
 801270c:	f000 f966 	bl	80129dc <USBD_CtlError>
    return USBD_FAIL;
 8012710:	2303      	movs	r3, #3
 8012712:	e087      	b.n	8012824 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801271a:	2b02      	cmp	r3, #2
 801271c:	d002      	beq.n	8012724 <USBD_SetConfig+0x3c>
 801271e:	2b03      	cmp	r3, #3
 8012720:	d025      	beq.n	801276e <USBD_SetConfig+0x86>
 8012722:	e071      	b.n	8012808 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8012724:	4b41      	ldr	r3, [pc, #260]	; (801282c <USBD_SetConfig+0x144>)
 8012726:	781b      	ldrb	r3, [r3, #0]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d01c      	beq.n	8012766 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 801272c:	4b3f      	ldr	r3, [pc, #252]	; (801282c <USBD_SetConfig+0x144>)
 801272e:	781b      	ldrb	r3, [r3, #0]
 8012730:	461a      	mov	r2, r3
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8012736:	4b3d      	ldr	r3, [pc, #244]	; (801282c <USBD_SetConfig+0x144>)
 8012738:	781b      	ldrb	r3, [r3, #0]
 801273a:	4619      	mov	r1, r3
 801273c:	6878      	ldr	r0, [r7, #4]
 801273e:	f7ff f9a8 	bl	8011a92 <USBD_SetClassConfig>
 8012742:	4603      	mov	r3, r0
 8012744:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8012746:	7bfb      	ldrb	r3, [r7, #15]
 8012748:	2b00      	cmp	r3, #0
 801274a:	d004      	beq.n	8012756 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 801274c:	6839      	ldr	r1, [r7, #0]
 801274e:	6878      	ldr	r0, [r7, #4]
 8012750:	f000 f944 	bl	80129dc <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8012754:	e065      	b.n	8012822 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8012756:	6878      	ldr	r0, [r7, #4]
 8012758:	f000 f9ee 	bl	8012b38 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	2203      	movs	r2, #3
 8012760:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8012764:	e05d      	b.n	8012822 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8012766:	6878      	ldr	r0, [r7, #4]
 8012768:	f000 f9e6 	bl	8012b38 <USBD_CtlSendStatus>
    break;
 801276c:	e059      	b.n	8012822 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 801276e:	4b2f      	ldr	r3, [pc, #188]	; (801282c <USBD_SetConfig+0x144>)
 8012770:	781b      	ldrb	r3, [r3, #0]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d112      	bne.n	801279c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	2202      	movs	r2, #2
 801277a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 801277e:	4b2b      	ldr	r3, [pc, #172]	; (801282c <USBD_SetConfig+0x144>)
 8012780:	781b      	ldrb	r3, [r3, #0]
 8012782:	461a      	mov	r2, r3
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012788:	4b28      	ldr	r3, [pc, #160]	; (801282c <USBD_SetConfig+0x144>)
 801278a:	781b      	ldrb	r3, [r3, #0]
 801278c:	4619      	mov	r1, r3
 801278e:	6878      	ldr	r0, [r7, #4]
 8012790:	f7ff f99b 	bl	8011aca <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8012794:	6878      	ldr	r0, [r7, #4]
 8012796:	f000 f9cf 	bl	8012b38 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 801279a:	e042      	b.n	8012822 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 801279c:	4b23      	ldr	r3, [pc, #140]	; (801282c <USBD_SetConfig+0x144>)
 801279e:	781b      	ldrb	r3, [r3, #0]
 80127a0:	461a      	mov	r2, r3
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	685b      	ldr	r3, [r3, #4]
 80127a6:	429a      	cmp	r2, r3
 80127a8:	d02a      	beq.n	8012800 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	685b      	ldr	r3, [r3, #4]
 80127ae:	b2db      	uxtb	r3, r3
 80127b0:	4619      	mov	r1, r3
 80127b2:	6878      	ldr	r0, [r7, #4]
 80127b4:	f7ff f989 	bl	8011aca <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80127b8:	4b1c      	ldr	r3, [pc, #112]	; (801282c <USBD_SetConfig+0x144>)
 80127ba:	781b      	ldrb	r3, [r3, #0]
 80127bc:	461a      	mov	r2, r3
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80127c2:	4b1a      	ldr	r3, [pc, #104]	; (801282c <USBD_SetConfig+0x144>)
 80127c4:	781b      	ldrb	r3, [r3, #0]
 80127c6:	4619      	mov	r1, r3
 80127c8:	6878      	ldr	r0, [r7, #4]
 80127ca:	f7ff f962 	bl	8011a92 <USBD_SetClassConfig>
 80127ce:	4603      	mov	r3, r0
 80127d0:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80127d2:	7bfb      	ldrb	r3, [r7, #15]
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d00f      	beq.n	80127f8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80127d8:	6839      	ldr	r1, [r7, #0]
 80127da:	6878      	ldr	r0, [r7, #4]
 80127dc:	f000 f8fe 	bl	80129dc <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	685b      	ldr	r3, [r3, #4]
 80127e4:	b2db      	uxtb	r3, r3
 80127e6:	4619      	mov	r1, r3
 80127e8:	6878      	ldr	r0, [r7, #4]
 80127ea:	f7ff f96e 	bl	8011aca <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	2202      	movs	r2, #2
 80127f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80127f6:	e014      	b.n	8012822 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80127f8:	6878      	ldr	r0, [r7, #4]
 80127fa:	f000 f99d 	bl	8012b38 <USBD_CtlSendStatus>
    break;
 80127fe:	e010      	b.n	8012822 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8012800:	6878      	ldr	r0, [r7, #4]
 8012802:	f000 f999 	bl	8012b38 <USBD_CtlSendStatus>
    break;
 8012806:	e00c      	b.n	8012822 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8012808:	6839      	ldr	r1, [r7, #0]
 801280a:	6878      	ldr	r0, [r7, #4]
 801280c:	f000 f8e6 	bl	80129dc <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012810:	4b06      	ldr	r3, [pc, #24]	; (801282c <USBD_SetConfig+0x144>)
 8012812:	781b      	ldrb	r3, [r3, #0]
 8012814:	4619      	mov	r1, r3
 8012816:	6878      	ldr	r0, [r7, #4]
 8012818:	f7ff f957 	bl	8011aca <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 801281c:	2303      	movs	r3, #3
 801281e:	73fb      	strb	r3, [r7, #15]
    break;
 8012820:	bf00      	nop
  }

  return ret;
 8012822:	7bfb      	ldrb	r3, [r7, #15]
}
 8012824:	4618      	mov	r0, r3
 8012826:	3710      	adds	r7, #16
 8012828:	46bd      	mov	sp, r7
 801282a:	bd80      	pop	{r7, pc}
 801282c:	24000a04 	.word	0x24000a04

08012830 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012830:	b580      	push	{r7, lr}
 8012832:	b082      	sub	sp, #8
 8012834:	af00      	add	r7, sp, #0
 8012836:	6078      	str	r0, [r7, #4]
 8012838:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801283a:	683b      	ldr	r3, [r7, #0]
 801283c:	88db      	ldrh	r3, [r3, #6]
 801283e:	2b01      	cmp	r3, #1
 8012840:	d004      	beq.n	801284c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012842:	6839      	ldr	r1, [r7, #0]
 8012844:	6878      	ldr	r0, [r7, #4]
 8012846:	f000 f8c9 	bl	80129dc <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 801284a:	e021      	b.n	8012890 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012852:	2b01      	cmp	r3, #1
 8012854:	db17      	blt.n	8012886 <USBD_GetConfig+0x56>
 8012856:	2b02      	cmp	r3, #2
 8012858:	dd02      	ble.n	8012860 <USBD_GetConfig+0x30>
 801285a:	2b03      	cmp	r3, #3
 801285c:	d00b      	beq.n	8012876 <USBD_GetConfig+0x46>
 801285e:	e012      	b.n	8012886 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	2200      	movs	r2, #0
 8012864:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	3308      	adds	r3, #8
 801286a:	2201      	movs	r2, #1
 801286c:	4619      	mov	r1, r3
 801286e:	6878      	ldr	r0, [r7, #4]
 8012870:	f000 f925 	bl	8012abe <USBD_CtlSendData>
      break;
 8012874:	e00c      	b.n	8012890 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	3304      	adds	r3, #4
 801287a:	2201      	movs	r2, #1
 801287c:	4619      	mov	r1, r3
 801287e:	6878      	ldr	r0, [r7, #4]
 8012880:	f000 f91d 	bl	8012abe <USBD_CtlSendData>
      break;
 8012884:	e004      	b.n	8012890 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8012886:	6839      	ldr	r1, [r7, #0]
 8012888:	6878      	ldr	r0, [r7, #4]
 801288a:	f000 f8a7 	bl	80129dc <USBD_CtlError>
      break;
 801288e:	bf00      	nop
}
 8012890:	bf00      	nop
 8012892:	3708      	adds	r7, #8
 8012894:	46bd      	mov	sp, r7
 8012896:	bd80      	pop	{r7, pc}

08012898 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012898:	b580      	push	{r7, lr}
 801289a:	b082      	sub	sp, #8
 801289c:	af00      	add	r7, sp, #0
 801289e:	6078      	str	r0, [r7, #4]
 80128a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80128a8:	3b01      	subs	r3, #1
 80128aa:	2b02      	cmp	r3, #2
 80128ac:	d81e      	bhi.n	80128ec <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80128ae:	683b      	ldr	r3, [r7, #0]
 80128b0:	88db      	ldrh	r3, [r3, #6]
 80128b2:	2b02      	cmp	r3, #2
 80128b4:	d004      	beq.n	80128c0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80128b6:	6839      	ldr	r1, [r7, #0]
 80128b8:	6878      	ldr	r0, [r7, #4]
 80128ba:	f000 f88f 	bl	80129dc <USBD_CtlError>
      break;
 80128be:	e01a      	b.n	80128f6 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	2201      	movs	r2, #1
 80128c4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d005      	beq.n	80128dc <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	68db      	ldr	r3, [r3, #12]
 80128d4:	f043 0202 	orr.w	r2, r3, #2
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	330c      	adds	r3, #12
 80128e0:	2202      	movs	r2, #2
 80128e2:	4619      	mov	r1, r3
 80128e4:	6878      	ldr	r0, [r7, #4]
 80128e6:	f000 f8ea 	bl	8012abe <USBD_CtlSendData>
    break;
 80128ea:	e004      	b.n	80128f6 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80128ec:	6839      	ldr	r1, [r7, #0]
 80128ee:	6878      	ldr	r0, [r7, #4]
 80128f0:	f000 f874 	bl	80129dc <USBD_CtlError>
    break;
 80128f4:	bf00      	nop
  }
}
 80128f6:	bf00      	nop
 80128f8:	3708      	adds	r7, #8
 80128fa:	46bd      	mov	sp, r7
 80128fc:	bd80      	pop	{r7, pc}

080128fe <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80128fe:	b580      	push	{r7, lr}
 8012900:	b082      	sub	sp, #8
 8012902:	af00      	add	r7, sp, #0
 8012904:	6078      	str	r0, [r7, #4]
 8012906:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012908:	683b      	ldr	r3, [r7, #0]
 801290a:	885b      	ldrh	r3, [r3, #2]
 801290c:	2b01      	cmp	r3, #1
 801290e:	d106      	bne.n	801291e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	2201      	movs	r2, #1
 8012914:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012918:	6878      	ldr	r0, [r7, #4]
 801291a:	f000 f90d 	bl	8012b38 <USBD_CtlSendStatus>
  }
}
 801291e:	bf00      	nop
 8012920:	3708      	adds	r7, #8
 8012922:	46bd      	mov	sp, r7
 8012924:	bd80      	pop	{r7, pc}

08012926 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012926:	b580      	push	{r7, lr}
 8012928:	b082      	sub	sp, #8
 801292a:	af00      	add	r7, sp, #0
 801292c:	6078      	str	r0, [r7, #4]
 801292e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012936:	3b01      	subs	r3, #1
 8012938:	2b02      	cmp	r3, #2
 801293a:	d80b      	bhi.n	8012954 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801293c:	683b      	ldr	r3, [r7, #0]
 801293e:	885b      	ldrh	r3, [r3, #2]
 8012940:	2b01      	cmp	r3, #1
 8012942:	d10c      	bne.n	801295e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	2200      	movs	r2, #0
 8012948:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801294c:	6878      	ldr	r0, [r7, #4]
 801294e:	f000 f8f3 	bl	8012b38 <USBD_CtlSendStatus>
      }
      break;
 8012952:	e004      	b.n	801295e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8012954:	6839      	ldr	r1, [r7, #0]
 8012956:	6878      	ldr	r0, [r7, #4]
 8012958:	f000 f840 	bl	80129dc <USBD_CtlError>
      break;
 801295c:	e000      	b.n	8012960 <USBD_ClrFeature+0x3a>
      break;
 801295e:	bf00      	nop
  }
}
 8012960:	bf00      	nop
 8012962:	3708      	adds	r7, #8
 8012964:	46bd      	mov	sp, r7
 8012966:	bd80      	pop	{r7, pc}

08012968 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012968:	b580      	push	{r7, lr}
 801296a:	b084      	sub	sp, #16
 801296c:	af00      	add	r7, sp, #0
 801296e:	6078      	str	r0, [r7, #4]
 8012970:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012972:	683b      	ldr	r3, [r7, #0]
 8012974:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	781a      	ldrb	r2, [r3, #0]
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	3301      	adds	r3, #1
 8012982:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	781a      	ldrb	r2, [r3, #0]
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	3301      	adds	r3, #1
 8012990:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012992:	68f8      	ldr	r0, [r7, #12]
 8012994:	f7ff fad4 	bl	8011f40 <SWAPBYTE>
 8012998:	4603      	mov	r3, r0
 801299a:	461a      	mov	r2, r3
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	3301      	adds	r3, #1
 80129a4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	3301      	adds	r3, #1
 80129aa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80129ac:	68f8      	ldr	r0, [r7, #12]
 80129ae:	f7ff fac7 	bl	8011f40 <SWAPBYTE>
 80129b2:	4603      	mov	r3, r0
 80129b4:	461a      	mov	r2, r3
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	3301      	adds	r3, #1
 80129be:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	3301      	adds	r3, #1
 80129c4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80129c6:	68f8      	ldr	r0, [r7, #12]
 80129c8:	f7ff faba 	bl	8011f40 <SWAPBYTE>
 80129cc:	4603      	mov	r3, r0
 80129ce:	461a      	mov	r2, r3
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	80da      	strh	r2, [r3, #6]
}
 80129d4:	bf00      	nop
 80129d6:	3710      	adds	r7, #16
 80129d8:	46bd      	mov	sp, r7
 80129da:	bd80      	pop	{r7, pc}

080129dc <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80129dc:	b580      	push	{r7, lr}
 80129de:	b082      	sub	sp, #8
 80129e0:	af00      	add	r7, sp, #0
 80129e2:	6078      	str	r0, [r7, #4]
 80129e4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80129e6:	2180      	movs	r1, #128	; 0x80
 80129e8:	6878      	ldr	r0, [r7, #4]
 80129ea:	f002 ffb0 	bl	801594e <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80129ee:	2100      	movs	r1, #0
 80129f0:	6878      	ldr	r0, [r7, #4]
 80129f2:	f002 ffac 	bl	801594e <USBD_LL_StallEP>
}
 80129f6:	bf00      	nop
 80129f8:	3708      	adds	r7, #8
 80129fa:	46bd      	mov	sp, r7
 80129fc:	bd80      	pop	{r7, pc}

080129fe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80129fe:	b580      	push	{r7, lr}
 8012a00:	b086      	sub	sp, #24
 8012a02:	af00      	add	r7, sp, #0
 8012a04:	60f8      	str	r0, [r7, #12]
 8012a06:	60b9      	str	r1, [r7, #8]
 8012a08:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012a0a:	2300      	movs	r3, #0
 8012a0c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d036      	beq.n	8012a82 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012a18:	6938      	ldr	r0, [r7, #16]
 8012a1a:	f000 f836 	bl	8012a8a <USBD_GetLen>
 8012a1e:	4603      	mov	r3, r0
 8012a20:	3301      	adds	r3, #1
 8012a22:	b29b      	uxth	r3, r3
 8012a24:	005b      	lsls	r3, r3, #1
 8012a26:	b29a      	uxth	r2, r3
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012a2c:	7dfb      	ldrb	r3, [r7, #23]
 8012a2e:	68ba      	ldr	r2, [r7, #8]
 8012a30:	4413      	add	r3, r2
 8012a32:	687a      	ldr	r2, [r7, #4]
 8012a34:	7812      	ldrb	r2, [r2, #0]
 8012a36:	701a      	strb	r2, [r3, #0]
  idx++;
 8012a38:	7dfb      	ldrb	r3, [r7, #23]
 8012a3a:	3301      	adds	r3, #1
 8012a3c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012a3e:	7dfb      	ldrb	r3, [r7, #23]
 8012a40:	68ba      	ldr	r2, [r7, #8]
 8012a42:	4413      	add	r3, r2
 8012a44:	2203      	movs	r2, #3
 8012a46:	701a      	strb	r2, [r3, #0]
  idx++;
 8012a48:	7dfb      	ldrb	r3, [r7, #23]
 8012a4a:	3301      	adds	r3, #1
 8012a4c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012a4e:	e013      	b.n	8012a78 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8012a50:	7dfb      	ldrb	r3, [r7, #23]
 8012a52:	68ba      	ldr	r2, [r7, #8]
 8012a54:	4413      	add	r3, r2
 8012a56:	693a      	ldr	r2, [r7, #16]
 8012a58:	7812      	ldrb	r2, [r2, #0]
 8012a5a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012a5c:	693b      	ldr	r3, [r7, #16]
 8012a5e:	3301      	adds	r3, #1
 8012a60:	613b      	str	r3, [r7, #16]
    idx++;
 8012a62:	7dfb      	ldrb	r3, [r7, #23]
 8012a64:	3301      	adds	r3, #1
 8012a66:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012a68:	7dfb      	ldrb	r3, [r7, #23]
 8012a6a:	68ba      	ldr	r2, [r7, #8]
 8012a6c:	4413      	add	r3, r2
 8012a6e:	2200      	movs	r2, #0
 8012a70:	701a      	strb	r2, [r3, #0]
    idx++;
 8012a72:	7dfb      	ldrb	r3, [r7, #23]
 8012a74:	3301      	adds	r3, #1
 8012a76:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012a78:	693b      	ldr	r3, [r7, #16]
 8012a7a:	781b      	ldrb	r3, [r3, #0]
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d1e7      	bne.n	8012a50 <USBD_GetString+0x52>
 8012a80:	e000      	b.n	8012a84 <USBD_GetString+0x86>
    return;
 8012a82:	bf00      	nop
  }
}
 8012a84:	3718      	adds	r7, #24
 8012a86:	46bd      	mov	sp, r7
 8012a88:	bd80      	pop	{r7, pc}

08012a8a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012a8a:	b480      	push	{r7}
 8012a8c:	b085      	sub	sp, #20
 8012a8e:	af00      	add	r7, sp, #0
 8012a90:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012a92:	2300      	movs	r3, #0
 8012a94:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012a9a:	e005      	b.n	8012aa8 <USBD_GetLen+0x1e>
  {
    len++;
 8012a9c:	7bfb      	ldrb	r3, [r7, #15]
 8012a9e:	3301      	adds	r3, #1
 8012aa0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012aa2:	68bb      	ldr	r3, [r7, #8]
 8012aa4:	3301      	adds	r3, #1
 8012aa6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012aa8:	68bb      	ldr	r3, [r7, #8]
 8012aaa:	781b      	ldrb	r3, [r3, #0]
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d1f5      	bne.n	8012a9c <USBD_GetLen+0x12>
  }

  return len;
 8012ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	3714      	adds	r7, #20
 8012ab6:	46bd      	mov	sp, r7
 8012ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012abc:	4770      	bx	lr

08012abe <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012abe:	b580      	push	{r7, lr}
 8012ac0:	b084      	sub	sp, #16
 8012ac2:	af00      	add	r7, sp, #0
 8012ac4:	60f8      	str	r0, [r7, #12]
 8012ac6:	60b9      	str	r1, [r7, #8]
 8012ac8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	2202      	movs	r2, #2
 8012ace:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	687a      	ldr	r2, [r7, #4]
 8012ad6:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	687a      	ldr	r2, [r7, #4]
 8012adc:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	68ba      	ldr	r2, [r7, #8]
 8012ae2:	2100      	movs	r1, #0
 8012ae4:	68f8      	ldr	r0, [r7, #12]
 8012ae6:	f002 ffbb 	bl	8015a60 <USBD_LL_Transmit>

  return USBD_OK;
 8012aea:	2300      	movs	r3, #0
}
 8012aec:	4618      	mov	r0, r3
 8012aee:	3710      	adds	r7, #16
 8012af0:	46bd      	mov	sp, r7
 8012af2:	bd80      	pop	{r7, pc}

08012af4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012af4:	b580      	push	{r7, lr}
 8012af6:	b084      	sub	sp, #16
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	60f8      	str	r0, [r7, #12]
 8012afc:	60b9      	str	r1, [r7, #8]
 8012afe:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	68ba      	ldr	r2, [r7, #8]
 8012b04:	2100      	movs	r1, #0
 8012b06:	68f8      	ldr	r0, [r7, #12]
 8012b08:	f002 ffaa 	bl	8015a60 <USBD_LL_Transmit>

  return USBD_OK;
 8012b0c:	2300      	movs	r3, #0
}
 8012b0e:	4618      	mov	r0, r3
 8012b10:	3710      	adds	r7, #16
 8012b12:	46bd      	mov	sp, r7
 8012b14:	bd80      	pop	{r7, pc}

08012b16 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012b16:	b580      	push	{r7, lr}
 8012b18:	b084      	sub	sp, #16
 8012b1a:	af00      	add	r7, sp, #0
 8012b1c:	60f8      	str	r0, [r7, #12]
 8012b1e:	60b9      	str	r1, [r7, #8]
 8012b20:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	68ba      	ldr	r2, [r7, #8]
 8012b26:	2100      	movs	r1, #0
 8012b28:	68f8      	ldr	r0, [r7, #12]
 8012b2a:	f002 ffba 	bl	8015aa2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012b2e:	2300      	movs	r3, #0
}
 8012b30:	4618      	mov	r0, r3
 8012b32:	3710      	adds	r7, #16
 8012b34:	46bd      	mov	sp, r7
 8012b36:	bd80      	pop	{r7, pc}

08012b38 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012b38:	b580      	push	{r7, lr}
 8012b3a:	b082      	sub	sp, #8
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	2204      	movs	r2, #4
 8012b44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012b48:	2300      	movs	r3, #0
 8012b4a:	2200      	movs	r2, #0
 8012b4c:	2100      	movs	r1, #0
 8012b4e:	6878      	ldr	r0, [r7, #4]
 8012b50:	f002 ff86 	bl	8015a60 <USBD_LL_Transmit>

  return USBD_OK;
 8012b54:	2300      	movs	r3, #0
}
 8012b56:	4618      	mov	r0, r3
 8012b58:	3708      	adds	r7, #8
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	bd80      	pop	{r7, pc}

08012b5e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012b5e:	b580      	push	{r7, lr}
 8012b60:	b082      	sub	sp, #8
 8012b62:	af00      	add	r7, sp, #0
 8012b64:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	2205      	movs	r2, #5
 8012b6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012b6e:	2300      	movs	r3, #0
 8012b70:	2200      	movs	r2, #0
 8012b72:	2100      	movs	r1, #0
 8012b74:	6878      	ldr	r0, [r7, #4]
 8012b76:	f002 ff94 	bl	8015aa2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012b7a:	2300      	movs	r3, #0
}
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	3708      	adds	r7, #8
 8012b80:	46bd      	mov	sp, r7
 8012b82:	bd80      	pop	{r7, pc}

08012b84 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8012b84:	b580      	push	{r7, lr}
 8012b86:	b084      	sub	sp, #16
 8012b88:	af00      	add	r7, sp, #0
 8012b8a:	4603      	mov	r3, r0
 8012b8c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8012b8e:	79fb      	ldrb	r3, [r7, #7]
 8012b90:	4a08      	ldr	r2, [pc, #32]	; (8012bb4 <disk_status+0x30>)
 8012b92:	009b      	lsls	r3, r3, #2
 8012b94:	4413      	add	r3, r2
 8012b96:	685b      	ldr	r3, [r3, #4]
 8012b98:	685b      	ldr	r3, [r3, #4]
 8012b9a:	79fa      	ldrb	r2, [r7, #7]
 8012b9c:	4905      	ldr	r1, [pc, #20]	; (8012bb4 <disk_status+0x30>)
 8012b9e:	440a      	add	r2, r1
 8012ba0:	7a12      	ldrb	r2, [r2, #8]
 8012ba2:	4610      	mov	r0, r2
 8012ba4:	4798      	blx	r3
 8012ba6:	4603      	mov	r3, r0
 8012ba8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8012baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8012bac:	4618      	mov	r0, r3
 8012bae:	3710      	adds	r7, #16
 8012bb0:	46bd      	mov	sp, r7
 8012bb2:	bd80      	pop	{r7, pc}
 8012bb4:	24000a30 	.word	0x24000a30

08012bb8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8012bb8:	b580      	push	{r7, lr}
 8012bba:	b084      	sub	sp, #16
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	4603      	mov	r3, r0
 8012bc0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8012bc2:	2300      	movs	r3, #0
 8012bc4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8012bc6:	79fb      	ldrb	r3, [r7, #7]
 8012bc8:	4a0d      	ldr	r2, [pc, #52]	; (8012c00 <disk_initialize+0x48>)
 8012bca:	5cd3      	ldrb	r3, [r2, r3]
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d111      	bne.n	8012bf4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8012bd0:	79fb      	ldrb	r3, [r7, #7]
 8012bd2:	4a0b      	ldr	r2, [pc, #44]	; (8012c00 <disk_initialize+0x48>)
 8012bd4:	2101      	movs	r1, #1
 8012bd6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8012bd8:	79fb      	ldrb	r3, [r7, #7]
 8012bda:	4a09      	ldr	r2, [pc, #36]	; (8012c00 <disk_initialize+0x48>)
 8012bdc:	009b      	lsls	r3, r3, #2
 8012bde:	4413      	add	r3, r2
 8012be0:	685b      	ldr	r3, [r3, #4]
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	79fa      	ldrb	r2, [r7, #7]
 8012be6:	4906      	ldr	r1, [pc, #24]	; (8012c00 <disk_initialize+0x48>)
 8012be8:	440a      	add	r2, r1
 8012bea:	7a12      	ldrb	r2, [r2, #8]
 8012bec:	4610      	mov	r0, r2
 8012bee:	4798      	blx	r3
 8012bf0:	4603      	mov	r3, r0
 8012bf2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8012bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012bf6:	4618      	mov	r0, r3
 8012bf8:	3710      	adds	r7, #16
 8012bfa:	46bd      	mov	sp, r7
 8012bfc:	bd80      	pop	{r7, pc}
 8012bfe:	bf00      	nop
 8012c00:	24000a30 	.word	0x24000a30

08012c04 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8012c04:	b590      	push	{r4, r7, lr}
 8012c06:	b087      	sub	sp, #28
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	60b9      	str	r1, [r7, #8]
 8012c0c:	607a      	str	r2, [r7, #4]
 8012c0e:	603b      	str	r3, [r7, #0]
 8012c10:	4603      	mov	r3, r0
 8012c12:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8012c14:	7bfb      	ldrb	r3, [r7, #15]
 8012c16:	4a0a      	ldr	r2, [pc, #40]	; (8012c40 <disk_read+0x3c>)
 8012c18:	009b      	lsls	r3, r3, #2
 8012c1a:	4413      	add	r3, r2
 8012c1c:	685b      	ldr	r3, [r3, #4]
 8012c1e:	689c      	ldr	r4, [r3, #8]
 8012c20:	7bfb      	ldrb	r3, [r7, #15]
 8012c22:	4a07      	ldr	r2, [pc, #28]	; (8012c40 <disk_read+0x3c>)
 8012c24:	4413      	add	r3, r2
 8012c26:	7a18      	ldrb	r0, [r3, #8]
 8012c28:	683b      	ldr	r3, [r7, #0]
 8012c2a:	687a      	ldr	r2, [r7, #4]
 8012c2c:	68b9      	ldr	r1, [r7, #8]
 8012c2e:	47a0      	blx	r4
 8012c30:	4603      	mov	r3, r0
 8012c32:	75fb      	strb	r3, [r7, #23]
  return res;
 8012c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c36:	4618      	mov	r0, r3
 8012c38:	371c      	adds	r7, #28
 8012c3a:	46bd      	mov	sp, r7
 8012c3c:	bd90      	pop	{r4, r7, pc}
 8012c3e:	bf00      	nop
 8012c40:	24000a30 	.word	0x24000a30

08012c44 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8012c44:	b590      	push	{r4, r7, lr}
 8012c46:	b087      	sub	sp, #28
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	60b9      	str	r1, [r7, #8]
 8012c4c:	607a      	str	r2, [r7, #4]
 8012c4e:	603b      	str	r3, [r7, #0]
 8012c50:	4603      	mov	r3, r0
 8012c52:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8012c54:	7bfb      	ldrb	r3, [r7, #15]
 8012c56:	4a0a      	ldr	r2, [pc, #40]	; (8012c80 <disk_write+0x3c>)
 8012c58:	009b      	lsls	r3, r3, #2
 8012c5a:	4413      	add	r3, r2
 8012c5c:	685b      	ldr	r3, [r3, #4]
 8012c5e:	68dc      	ldr	r4, [r3, #12]
 8012c60:	7bfb      	ldrb	r3, [r7, #15]
 8012c62:	4a07      	ldr	r2, [pc, #28]	; (8012c80 <disk_write+0x3c>)
 8012c64:	4413      	add	r3, r2
 8012c66:	7a18      	ldrb	r0, [r3, #8]
 8012c68:	683b      	ldr	r3, [r7, #0]
 8012c6a:	687a      	ldr	r2, [r7, #4]
 8012c6c:	68b9      	ldr	r1, [r7, #8]
 8012c6e:	47a0      	blx	r4
 8012c70:	4603      	mov	r3, r0
 8012c72:	75fb      	strb	r3, [r7, #23]
  return res;
 8012c74:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c76:	4618      	mov	r0, r3
 8012c78:	371c      	adds	r7, #28
 8012c7a:	46bd      	mov	sp, r7
 8012c7c:	bd90      	pop	{r4, r7, pc}
 8012c7e:	bf00      	nop
 8012c80:	24000a30 	.word	0x24000a30

08012c84 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012c84:	b580      	push	{r7, lr}
 8012c86:	b084      	sub	sp, #16
 8012c88:	af00      	add	r7, sp, #0
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	603a      	str	r2, [r7, #0]
 8012c8e:	71fb      	strb	r3, [r7, #7]
 8012c90:	460b      	mov	r3, r1
 8012c92:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012c94:	79fb      	ldrb	r3, [r7, #7]
 8012c96:	4a09      	ldr	r2, [pc, #36]	; (8012cbc <disk_ioctl+0x38>)
 8012c98:	009b      	lsls	r3, r3, #2
 8012c9a:	4413      	add	r3, r2
 8012c9c:	685b      	ldr	r3, [r3, #4]
 8012c9e:	691b      	ldr	r3, [r3, #16]
 8012ca0:	79fa      	ldrb	r2, [r7, #7]
 8012ca2:	4906      	ldr	r1, [pc, #24]	; (8012cbc <disk_ioctl+0x38>)
 8012ca4:	440a      	add	r2, r1
 8012ca6:	7a10      	ldrb	r0, [r2, #8]
 8012ca8:	79b9      	ldrb	r1, [r7, #6]
 8012caa:	683a      	ldr	r2, [r7, #0]
 8012cac:	4798      	blx	r3
 8012cae:	4603      	mov	r3, r0
 8012cb0:	73fb      	strb	r3, [r7, #15]
  return res;
 8012cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	3710      	adds	r7, #16
 8012cb8:	46bd      	mov	sp, r7
 8012cba:	bd80      	pop	{r7, pc}
 8012cbc:	24000a30 	.word	0x24000a30

08012cc0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8012cc0:	b480      	push	{r7}
 8012cc2:	b085      	sub	sp, #20
 8012cc4:	af00      	add	r7, sp, #0
 8012cc6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	3301      	adds	r3, #1
 8012ccc:	781b      	ldrb	r3, [r3, #0]
 8012cce:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8012cd0:	89fb      	ldrh	r3, [r7, #14]
 8012cd2:	021b      	lsls	r3, r3, #8
 8012cd4:	b21a      	sxth	r2, r3
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	781b      	ldrb	r3, [r3, #0]
 8012cda:	b21b      	sxth	r3, r3
 8012cdc:	4313      	orrs	r3, r2
 8012cde:	b21b      	sxth	r3, r3
 8012ce0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8012ce2:	89fb      	ldrh	r3, [r7, #14]
}
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	3714      	adds	r7, #20
 8012ce8:	46bd      	mov	sp, r7
 8012cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cee:	4770      	bx	lr

08012cf0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8012cf0:	b480      	push	{r7}
 8012cf2:	b085      	sub	sp, #20
 8012cf4:	af00      	add	r7, sp, #0
 8012cf6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	3303      	adds	r3, #3
 8012cfc:	781b      	ldrb	r3, [r3, #0]
 8012cfe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	021b      	lsls	r3, r3, #8
 8012d04:	687a      	ldr	r2, [r7, #4]
 8012d06:	3202      	adds	r2, #2
 8012d08:	7812      	ldrb	r2, [r2, #0]
 8012d0a:	4313      	orrs	r3, r2
 8012d0c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	021b      	lsls	r3, r3, #8
 8012d12:	687a      	ldr	r2, [r7, #4]
 8012d14:	3201      	adds	r2, #1
 8012d16:	7812      	ldrb	r2, [r2, #0]
 8012d18:	4313      	orrs	r3, r2
 8012d1a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	021b      	lsls	r3, r3, #8
 8012d20:	687a      	ldr	r2, [r7, #4]
 8012d22:	7812      	ldrb	r2, [r2, #0]
 8012d24:	4313      	orrs	r3, r2
 8012d26:	60fb      	str	r3, [r7, #12]
	return rv;
 8012d28:	68fb      	ldr	r3, [r7, #12]
}
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	3714      	adds	r7, #20
 8012d2e:	46bd      	mov	sp, r7
 8012d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d34:	4770      	bx	lr

08012d36 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8012d36:	b480      	push	{r7}
 8012d38:	b083      	sub	sp, #12
 8012d3a:	af00      	add	r7, sp, #0
 8012d3c:	6078      	str	r0, [r7, #4]
 8012d3e:	460b      	mov	r3, r1
 8012d40:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	1c5a      	adds	r2, r3, #1
 8012d46:	607a      	str	r2, [r7, #4]
 8012d48:	887a      	ldrh	r2, [r7, #2]
 8012d4a:	b2d2      	uxtb	r2, r2
 8012d4c:	701a      	strb	r2, [r3, #0]
 8012d4e:	887b      	ldrh	r3, [r7, #2]
 8012d50:	0a1b      	lsrs	r3, r3, #8
 8012d52:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	1c5a      	adds	r2, r3, #1
 8012d58:	607a      	str	r2, [r7, #4]
 8012d5a:	887a      	ldrh	r2, [r7, #2]
 8012d5c:	b2d2      	uxtb	r2, r2
 8012d5e:	701a      	strb	r2, [r3, #0]
}
 8012d60:	bf00      	nop
 8012d62:	370c      	adds	r7, #12
 8012d64:	46bd      	mov	sp, r7
 8012d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d6a:	4770      	bx	lr

08012d6c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8012d6c:	b480      	push	{r7}
 8012d6e:	b083      	sub	sp, #12
 8012d70:	af00      	add	r7, sp, #0
 8012d72:	6078      	str	r0, [r7, #4]
 8012d74:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	1c5a      	adds	r2, r3, #1
 8012d7a:	607a      	str	r2, [r7, #4]
 8012d7c:	683a      	ldr	r2, [r7, #0]
 8012d7e:	b2d2      	uxtb	r2, r2
 8012d80:	701a      	strb	r2, [r3, #0]
 8012d82:	683b      	ldr	r3, [r7, #0]
 8012d84:	0a1b      	lsrs	r3, r3, #8
 8012d86:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	1c5a      	adds	r2, r3, #1
 8012d8c:	607a      	str	r2, [r7, #4]
 8012d8e:	683a      	ldr	r2, [r7, #0]
 8012d90:	b2d2      	uxtb	r2, r2
 8012d92:	701a      	strb	r2, [r3, #0]
 8012d94:	683b      	ldr	r3, [r7, #0]
 8012d96:	0a1b      	lsrs	r3, r3, #8
 8012d98:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	1c5a      	adds	r2, r3, #1
 8012d9e:	607a      	str	r2, [r7, #4]
 8012da0:	683a      	ldr	r2, [r7, #0]
 8012da2:	b2d2      	uxtb	r2, r2
 8012da4:	701a      	strb	r2, [r3, #0]
 8012da6:	683b      	ldr	r3, [r7, #0]
 8012da8:	0a1b      	lsrs	r3, r3, #8
 8012daa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	1c5a      	adds	r2, r3, #1
 8012db0:	607a      	str	r2, [r7, #4]
 8012db2:	683a      	ldr	r2, [r7, #0]
 8012db4:	b2d2      	uxtb	r2, r2
 8012db6:	701a      	strb	r2, [r3, #0]
}
 8012db8:	bf00      	nop
 8012dba:	370c      	adds	r7, #12
 8012dbc:	46bd      	mov	sp, r7
 8012dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dc2:	4770      	bx	lr

08012dc4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8012dc4:	b480      	push	{r7}
 8012dc6:	b087      	sub	sp, #28
 8012dc8:	af00      	add	r7, sp, #0
 8012dca:	60f8      	str	r0, [r7, #12]
 8012dcc:	60b9      	str	r1, [r7, #8]
 8012dce:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8012dd4:	68bb      	ldr	r3, [r7, #8]
 8012dd6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d00d      	beq.n	8012dfa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8012dde:	693a      	ldr	r2, [r7, #16]
 8012de0:	1c53      	adds	r3, r2, #1
 8012de2:	613b      	str	r3, [r7, #16]
 8012de4:	697b      	ldr	r3, [r7, #20]
 8012de6:	1c59      	adds	r1, r3, #1
 8012de8:	6179      	str	r1, [r7, #20]
 8012dea:	7812      	ldrb	r2, [r2, #0]
 8012dec:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	3b01      	subs	r3, #1
 8012df2:	607b      	str	r3, [r7, #4]
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d1f1      	bne.n	8012dde <mem_cpy+0x1a>
	}
}
 8012dfa:	bf00      	nop
 8012dfc:	371c      	adds	r7, #28
 8012dfe:	46bd      	mov	sp, r7
 8012e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e04:	4770      	bx	lr

08012e06 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8012e06:	b480      	push	{r7}
 8012e08:	b087      	sub	sp, #28
 8012e0a:	af00      	add	r7, sp, #0
 8012e0c:	60f8      	str	r0, [r7, #12]
 8012e0e:	60b9      	str	r1, [r7, #8]
 8012e10:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8012e16:	697b      	ldr	r3, [r7, #20]
 8012e18:	1c5a      	adds	r2, r3, #1
 8012e1a:	617a      	str	r2, [r7, #20]
 8012e1c:	68ba      	ldr	r2, [r7, #8]
 8012e1e:	b2d2      	uxtb	r2, r2
 8012e20:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	3b01      	subs	r3, #1
 8012e26:	607b      	str	r3, [r7, #4]
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d1f3      	bne.n	8012e16 <mem_set+0x10>
}
 8012e2e:	bf00      	nop
 8012e30:	371c      	adds	r7, #28
 8012e32:	46bd      	mov	sp, r7
 8012e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e38:	4770      	bx	lr

08012e3a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8012e3a:	b480      	push	{r7}
 8012e3c:	b089      	sub	sp, #36	; 0x24
 8012e3e:	af00      	add	r7, sp, #0
 8012e40:	60f8      	str	r0, [r7, #12]
 8012e42:	60b9      	str	r1, [r7, #8]
 8012e44:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	61fb      	str	r3, [r7, #28]
 8012e4a:	68bb      	ldr	r3, [r7, #8]
 8012e4c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8012e4e:	2300      	movs	r3, #0
 8012e50:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8012e52:	69fb      	ldr	r3, [r7, #28]
 8012e54:	1c5a      	adds	r2, r3, #1
 8012e56:	61fa      	str	r2, [r7, #28]
 8012e58:	781b      	ldrb	r3, [r3, #0]
 8012e5a:	4619      	mov	r1, r3
 8012e5c:	69bb      	ldr	r3, [r7, #24]
 8012e5e:	1c5a      	adds	r2, r3, #1
 8012e60:	61ba      	str	r2, [r7, #24]
 8012e62:	781b      	ldrb	r3, [r3, #0]
 8012e64:	1acb      	subs	r3, r1, r3
 8012e66:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	3b01      	subs	r3, #1
 8012e6c:	607b      	str	r3, [r7, #4]
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d002      	beq.n	8012e7a <mem_cmp+0x40>
 8012e74:	697b      	ldr	r3, [r7, #20]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d0eb      	beq.n	8012e52 <mem_cmp+0x18>

	return r;
 8012e7a:	697b      	ldr	r3, [r7, #20]
}
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	3724      	adds	r7, #36	; 0x24
 8012e80:	46bd      	mov	sp, r7
 8012e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e86:	4770      	bx	lr

08012e88 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8012e88:	b480      	push	{r7}
 8012e8a:	b083      	sub	sp, #12
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	6078      	str	r0, [r7, #4]
 8012e90:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8012e92:	e002      	b.n	8012e9a <chk_chr+0x12>
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	3301      	adds	r3, #1
 8012e98:	607b      	str	r3, [r7, #4]
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	781b      	ldrb	r3, [r3, #0]
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d005      	beq.n	8012eae <chk_chr+0x26>
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	781b      	ldrb	r3, [r3, #0]
 8012ea6:	461a      	mov	r2, r3
 8012ea8:	683b      	ldr	r3, [r7, #0]
 8012eaa:	4293      	cmp	r3, r2
 8012eac:	d1f2      	bne.n	8012e94 <chk_chr+0xc>
	return *str;
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	781b      	ldrb	r3, [r3, #0]
}
 8012eb2:	4618      	mov	r0, r3
 8012eb4:	370c      	adds	r7, #12
 8012eb6:	46bd      	mov	sp, r7
 8012eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ebc:	4770      	bx	lr
	...

08012ec0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012ec0:	b480      	push	{r7}
 8012ec2:	b085      	sub	sp, #20
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	6078      	str	r0, [r7, #4]
 8012ec8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012eca:	2300      	movs	r3, #0
 8012ecc:	60bb      	str	r3, [r7, #8]
 8012ece:	68bb      	ldr	r3, [r7, #8]
 8012ed0:	60fb      	str	r3, [r7, #12]
 8012ed2:	e029      	b.n	8012f28 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8012ed4:	4a27      	ldr	r2, [pc, #156]	; (8012f74 <chk_lock+0xb4>)
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	011b      	lsls	r3, r3, #4
 8012eda:	4413      	add	r3, r2
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d01d      	beq.n	8012f1e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012ee2:	4a24      	ldr	r2, [pc, #144]	; (8012f74 <chk_lock+0xb4>)
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	011b      	lsls	r3, r3, #4
 8012ee8:	4413      	add	r3, r2
 8012eea:	681a      	ldr	r2, [r3, #0]
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	429a      	cmp	r2, r3
 8012ef2:	d116      	bne.n	8012f22 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8012ef4:	4a1f      	ldr	r2, [pc, #124]	; (8012f74 <chk_lock+0xb4>)
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	011b      	lsls	r3, r3, #4
 8012efa:	4413      	add	r3, r2
 8012efc:	3304      	adds	r3, #4
 8012efe:	681a      	ldr	r2, [r3, #0]
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012f04:	429a      	cmp	r2, r3
 8012f06:	d10c      	bne.n	8012f22 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012f08:	4a1a      	ldr	r2, [pc, #104]	; (8012f74 <chk_lock+0xb4>)
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	011b      	lsls	r3, r3, #4
 8012f0e:	4413      	add	r3, r2
 8012f10:	3308      	adds	r3, #8
 8012f12:	681a      	ldr	r2, [r3, #0]
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8012f18:	429a      	cmp	r2, r3
 8012f1a:	d102      	bne.n	8012f22 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012f1c:	e007      	b.n	8012f2e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8012f1e:	2301      	movs	r3, #1
 8012f20:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	3301      	adds	r3, #1
 8012f26:	60fb      	str	r3, [r7, #12]
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	2b01      	cmp	r3, #1
 8012f2c:	d9d2      	bls.n	8012ed4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	2b02      	cmp	r3, #2
 8012f32:	d109      	bne.n	8012f48 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8012f34:	68bb      	ldr	r3, [r7, #8]
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d102      	bne.n	8012f40 <chk_lock+0x80>
 8012f3a:	683b      	ldr	r3, [r7, #0]
 8012f3c:	2b02      	cmp	r3, #2
 8012f3e:	d101      	bne.n	8012f44 <chk_lock+0x84>
 8012f40:	2300      	movs	r3, #0
 8012f42:	e010      	b.n	8012f66 <chk_lock+0xa6>
 8012f44:	2312      	movs	r3, #18
 8012f46:	e00e      	b.n	8012f66 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8012f48:	683b      	ldr	r3, [r7, #0]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d108      	bne.n	8012f60 <chk_lock+0xa0>
 8012f4e:	4a09      	ldr	r2, [pc, #36]	; (8012f74 <chk_lock+0xb4>)
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	011b      	lsls	r3, r3, #4
 8012f54:	4413      	add	r3, r2
 8012f56:	330c      	adds	r3, #12
 8012f58:	881b      	ldrh	r3, [r3, #0]
 8012f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012f5e:	d101      	bne.n	8012f64 <chk_lock+0xa4>
 8012f60:	2310      	movs	r3, #16
 8012f62:	e000      	b.n	8012f66 <chk_lock+0xa6>
 8012f64:	2300      	movs	r3, #0
}
 8012f66:	4618      	mov	r0, r3
 8012f68:	3714      	adds	r7, #20
 8012f6a:	46bd      	mov	sp, r7
 8012f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f70:	4770      	bx	lr
 8012f72:	bf00      	nop
 8012f74:	24000a10 	.word	0x24000a10

08012f78 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8012f78:	b480      	push	{r7}
 8012f7a:	b083      	sub	sp, #12
 8012f7c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012f7e:	2300      	movs	r3, #0
 8012f80:	607b      	str	r3, [r7, #4]
 8012f82:	e002      	b.n	8012f8a <enq_lock+0x12>
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	3301      	adds	r3, #1
 8012f88:	607b      	str	r3, [r7, #4]
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	2b01      	cmp	r3, #1
 8012f8e:	d806      	bhi.n	8012f9e <enq_lock+0x26>
 8012f90:	4a09      	ldr	r2, [pc, #36]	; (8012fb8 <enq_lock+0x40>)
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	011b      	lsls	r3, r3, #4
 8012f96:	4413      	add	r3, r2
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d1f2      	bne.n	8012f84 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	2b02      	cmp	r3, #2
 8012fa2:	bf14      	ite	ne
 8012fa4:	2301      	movne	r3, #1
 8012fa6:	2300      	moveq	r3, #0
 8012fa8:	b2db      	uxtb	r3, r3
}
 8012faa:	4618      	mov	r0, r3
 8012fac:	370c      	adds	r7, #12
 8012fae:	46bd      	mov	sp, r7
 8012fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fb4:	4770      	bx	lr
 8012fb6:	bf00      	nop
 8012fb8:	24000a10 	.word	0x24000a10

08012fbc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012fbc:	b480      	push	{r7}
 8012fbe:	b085      	sub	sp, #20
 8012fc0:	af00      	add	r7, sp, #0
 8012fc2:	6078      	str	r0, [r7, #4]
 8012fc4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8012fc6:	2300      	movs	r3, #0
 8012fc8:	60fb      	str	r3, [r7, #12]
 8012fca:	e01f      	b.n	801300c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8012fcc:	4a41      	ldr	r2, [pc, #260]	; (80130d4 <inc_lock+0x118>)
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	011b      	lsls	r3, r3, #4
 8012fd2:	4413      	add	r3, r2
 8012fd4:	681a      	ldr	r2, [r3, #0]
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	681b      	ldr	r3, [r3, #0]
 8012fda:	429a      	cmp	r2, r3
 8012fdc:	d113      	bne.n	8013006 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8012fde:	4a3d      	ldr	r2, [pc, #244]	; (80130d4 <inc_lock+0x118>)
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	011b      	lsls	r3, r3, #4
 8012fe4:	4413      	add	r3, r2
 8012fe6:	3304      	adds	r3, #4
 8012fe8:	681a      	ldr	r2, [r3, #0]
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8012fee:	429a      	cmp	r2, r3
 8012ff0:	d109      	bne.n	8013006 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8012ff2:	4a38      	ldr	r2, [pc, #224]	; (80130d4 <inc_lock+0x118>)
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	011b      	lsls	r3, r3, #4
 8012ff8:	4413      	add	r3, r2
 8012ffa:	3308      	adds	r3, #8
 8012ffc:	681a      	ldr	r2, [r3, #0]
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8013002:	429a      	cmp	r2, r3
 8013004:	d006      	beq.n	8013014 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	3301      	adds	r3, #1
 801300a:	60fb      	str	r3, [r7, #12]
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	2b01      	cmp	r3, #1
 8013010:	d9dc      	bls.n	8012fcc <inc_lock+0x10>
 8013012:	e000      	b.n	8013016 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8013014:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	2b02      	cmp	r3, #2
 801301a:	d132      	bne.n	8013082 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801301c:	2300      	movs	r3, #0
 801301e:	60fb      	str	r3, [r7, #12]
 8013020:	e002      	b.n	8013028 <inc_lock+0x6c>
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	3301      	adds	r3, #1
 8013026:	60fb      	str	r3, [r7, #12]
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	2b01      	cmp	r3, #1
 801302c:	d806      	bhi.n	801303c <inc_lock+0x80>
 801302e:	4a29      	ldr	r2, [pc, #164]	; (80130d4 <inc_lock+0x118>)
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	011b      	lsls	r3, r3, #4
 8013034:	4413      	add	r3, r2
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	2b00      	cmp	r3, #0
 801303a:	d1f2      	bne.n	8013022 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	2b02      	cmp	r3, #2
 8013040:	d101      	bne.n	8013046 <inc_lock+0x8a>
 8013042:	2300      	movs	r3, #0
 8013044:	e040      	b.n	80130c8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	681a      	ldr	r2, [r3, #0]
 801304a:	4922      	ldr	r1, [pc, #136]	; (80130d4 <inc_lock+0x118>)
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	011b      	lsls	r3, r3, #4
 8013050:	440b      	add	r3, r1
 8013052:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	689a      	ldr	r2, [r3, #8]
 8013058:	491e      	ldr	r1, [pc, #120]	; (80130d4 <inc_lock+0x118>)
 801305a:	68fb      	ldr	r3, [r7, #12]
 801305c:	011b      	lsls	r3, r3, #4
 801305e:	440b      	add	r3, r1
 8013060:	3304      	adds	r3, #4
 8013062:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	695a      	ldr	r2, [r3, #20]
 8013068:	491a      	ldr	r1, [pc, #104]	; (80130d4 <inc_lock+0x118>)
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	011b      	lsls	r3, r3, #4
 801306e:	440b      	add	r3, r1
 8013070:	3308      	adds	r3, #8
 8013072:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8013074:	4a17      	ldr	r2, [pc, #92]	; (80130d4 <inc_lock+0x118>)
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	011b      	lsls	r3, r3, #4
 801307a:	4413      	add	r3, r2
 801307c:	330c      	adds	r3, #12
 801307e:	2200      	movs	r2, #0
 8013080:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8013082:	683b      	ldr	r3, [r7, #0]
 8013084:	2b00      	cmp	r3, #0
 8013086:	d009      	beq.n	801309c <inc_lock+0xe0>
 8013088:	4a12      	ldr	r2, [pc, #72]	; (80130d4 <inc_lock+0x118>)
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	011b      	lsls	r3, r3, #4
 801308e:	4413      	add	r3, r2
 8013090:	330c      	adds	r3, #12
 8013092:	881b      	ldrh	r3, [r3, #0]
 8013094:	2b00      	cmp	r3, #0
 8013096:	d001      	beq.n	801309c <inc_lock+0xe0>
 8013098:	2300      	movs	r3, #0
 801309a:	e015      	b.n	80130c8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801309c:	683b      	ldr	r3, [r7, #0]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d108      	bne.n	80130b4 <inc_lock+0xf8>
 80130a2:	4a0c      	ldr	r2, [pc, #48]	; (80130d4 <inc_lock+0x118>)
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	011b      	lsls	r3, r3, #4
 80130a8:	4413      	add	r3, r2
 80130aa:	330c      	adds	r3, #12
 80130ac:	881b      	ldrh	r3, [r3, #0]
 80130ae:	3301      	adds	r3, #1
 80130b0:	b29a      	uxth	r2, r3
 80130b2:	e001      	b.n	80130b8 <inc_lock+0xfc>
 80130b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80130b8:	4906      	ldr	r1, [pc, #24]	; (80130d4 <inc_lock+0x118>)
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	011b      	lsls	r3, r3, #4
 80130be:	440b      	add	r3, r1
 80130c0:	330c      	adds	r3, #12
 80130c2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	3301      	adds	r3, #1
}
 80130c8:	4618      	mov	r0, r3
 80130ca:	3714      	adds	r7, #20
 80130cc:	46bd      	mov	sp, r7
 80130ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130d2:	4770      	bx	lr
 80130d4:	24000a10 	.word	0x24000a10

080130d8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80130d8:	b480      	push	{r7}
 80130da:	b085      	sub	sp, #20
 80130dc:	af00      	add	r7, sp, #0
 80130de:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	3b01      	subs	r3, #1
 80130e4:	607b      	str	r3, [r7, #4]
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	2b01      	cmp	r3, #1
 80130ea:	d825      	bhi.n	8013138 <dec_lock+0x60>
		n = Files[i].ctr;
 80130ec:	4a17      	ldr	r2, [pc, #92]	; (801314c <dec_lock+0x74>)
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	011b      	lsls	r3, r3, #4
 80130f2:	4413      	add	r3, r2
 80130f4:	330c      	adds	r3, #12
 80130f6:	881b      	ldrh	r3, [r3, #0]
 80130f8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80130fa:	89fb      	ldrh	r3, [r7, #14]
 80130fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013100:	d101      	bne.n	8013106 <dec_lock+0x2e>
 8013102:	2300      	movs	r3, #0
 8013104:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8013106:	89fb      	ldrh	r3, [r7, #14]
 8013108:	2b00      	cmp	r3, #0
 801310a:	d002      	beq.n	8013112 <dec_lock+0x3a>
 801310c:	89fb      	ldrh	r3, [r7, #14]
 801310e:	3b01      	subs	r3, #1
 8013110:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8013112:	4a0e      	ldr	r2, [pc, #56]	; (801314c <dec_lock+0x74>)
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	011b      	lsls	r3, r3, #4
 8013118:	4413      	add	r3, r2
 801311a:	330c      	adds	r3, #12
 801311c:	89fa      	ldrh	r2, [r7, #14]
 801311e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8013120:	89fb      	ldrh	r3, [r7, #14]
 8013122:	2b00      	cmp	r3, #0
 8013124:	d105      	bne.n	8013132 <dec_lock+0x5a>
 8013126:	4a09      	ldr	r2, [pc, #36]	; (801314c <dec_lock+0x74>)
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	011b      	lsls	r3, r3, #4
 801312c:	4413      	add	r3, r2
 801312e:	2200      	movs	r2, #0
 8013130:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8013132:	2300      	movs	r3, #0
 8013134:	737b      	strb	r3, [r7, #13]
 8013136:	e001      	b.n	801313c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8013138:	2302      	movs	r3, #2
 801313a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801313c:	7b7b      	ldrb	r3, [r7, #13]
}
 801313e:	4618      	mov	r0, r3
 8013140:	3714      	adds	r7, #20
 8013142:	46bd      	mov	sp, r7
 8013144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013148:	4770      	bx	lr
 801314a:	bf00      	nop
 801314c:	24000a10 	.word	0x24000a10

08013150 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8013150:	b480      	push	{r7}
 8013152:	b085      	sub	sp, #20
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8013158:	2300      	movs	r3, #0
 801315a:	60fb      	str	r3, [r7, #12]
 801315c:	e010      	b.n	8013180 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801315e:	4a0d      	ldr	r2, [pc, #52]	; (8013194 <clear_lock+0x44>)
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	011b      	lsls	r3, r3, #4
 8013164:	4413      	add	r3, r2
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	687a      	ldr	r2, [r7, #4]
 801316a:	429a      	cmp	r2, r3
 801316c:	d105      	bne.n	801317a <clear_lock+0x2a>
 801316e:	4a09      	ldr	r2, [pc, #36]	; (8013194 <clear_lock+0x44>)
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	011b      	lsls	r3, r3, #4
 8013174:	4413      	add	r3, r2
 8013176:	2200      	movs	r2, #0
 8013178:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	3301      	adds	r3, #1
 801317e:	60fb      	str	r3, [r7, #12]
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	2b01      	cmp	r3, #1
 8013184:	d9eb      	bls.n	801315e <clear_lock+0xe>
	}
}
 8013186:	bf00      	nop
 8013188:	3714      	adds	r7, #20
 801318a:	46bd      	mov	sp, r7
 801318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013190:	4770      	bx	lr
 8013192:	bf00      	nop
 8013194:	24000a10 	.word	0x24000a10

08013198 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8013198:	b580      	push	{r7, lr}
 801319a:	b086      	sub	sp, #24
 801319c:	af00      	add	r7, sp, #0
 801319e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80131a0:	2300      	movs	r3, #0
 80131a2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	78db      	ldrb	r3, [r3, #3]
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d034      	beq.n	8013216 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131b0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	7858      	ldrb	r0, [r3, #1]
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80131bc:	2301      	movs	r3, #1
 80131be:	697a      	ldr	r2, [r7, #20]
 80131c0:	f7ff fd40 	bl	8012c44 <disk_write>
 80131c4:	4603      	mov	r3, r0
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d002      	beq.n	80131d0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80131ca:	2301      	movs	r3, #1
 80131cc:	73fb      	strb	r3, [r7, #15]
 80131ce:	e022      	b.n	8013216 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	2200      	movs	r2, #0
 80131d4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	6a1b      	ldr	r3, [r3, #32]
 80131da:	697a      	ldr	r2, [r7, #20]
 80131dc:	1ad2      	subs	r2, r2, r3
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	699b      	ldr	r3, [r3, #24]
 80131e2:	429a      	cmp	r2, r3
 80131e4:	d217      	bcs.n	8013216 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	789b      	ldrb	r3, [r3, #2]
 80131ea:	613b      	str	r3, [r7, #16]
 80131ec:	e010      	b.n	8013210 <sync_window+0x78>
					wsect += fs->fsize;
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	699b      	ldr	r3, [r3, #24]
 80131f2:	697a      	ldr	r2, [r7, #20]
 80131f4:	4413      	add	r3, r2
 80131f6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	7858      	ldrb	r0, [r3, #1]
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013202:	2301      	movs	r3, #1
 8013204:	697a      	ldr	r2, [r7, #20]
 8013206:	f7ff fd1d 	bl	8012c44 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801320a:	693b      	ldr	r3, [r7, #16]
 801320c:	3b01      	subs	r3, #1
 801320e:	613b      	str	r3, [r7, #16]
 8013210:	693b      	ldr	r3, [r7, #16]
 8013212:	2b01      	cmp	r3, #1
 8013214:	d8eb      	bhi.n	80131ee <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8013216:	7bfb      	ldrb	r3, [r7, #15]
}
 8013218:	4618      	mov	r0, r3
 801321a:	3718      	adds	r7, #24
 801321c:	46bd      	mov	sp, r7
 801321e:	bd80      	pop	{r7, pc}

08013220 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8013220:	b580      	push	{r7, lr}
 8013222:	b084      	sub	sp, #16
 8013224:	af00      	add	r7, sp, #0
 8013226:	6078      	str	r0, [r7, #4]
 8013228:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801322a:	2300      	movs	r3, #0
 801322c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013232:	683a      	ldr	r2, [r7, #0]
 8013234:	429a      	cmp	r2, r3
 8013236:	d01b      	beq.n	8013270 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8013238:	6878      	ldr	r0, [r7, #4]
 801323a:	f7ff ffad 	bl	8013198 <sync_window>
 801323e:	4603      	mov	r3, r0
 8013240:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8013242:	7bfb      	ldrb	r3, [r7, #15]
 8013244:	2b00      	cmp	r3, #0
 8013246:	d113      	bne.n	8013270 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	7858      	ldrb	r0, [r3, #1]
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013252:	2301      	movs	r3, #1
 8013254:	683a      	ldr	r2, [r7, #0]
 8013256:	f7ff fcd5 	bl	8012c04 <disk_read>
 801325a:	4603      	mov	r3, r0
 801325c:	2b00      	cmp	r3, #0
 801325e:	d004      	beq.n	801326a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8013260:	f04f 33ff 	mov.w	r3, #4294967295
 8013264:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8013266:	2301      	movs	r3, #1
 8013268:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	683a      	ldr	r2, [r7, #0]
 801326e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8013270:	7bfb      	ldrb	r3, [r7, #15]
}
 8013272:	4618      	mov	r0, r3
 8013274:	3710      	adds	r7, #16
 8013276:	46bd      	mov	sp, r7
 8013278:	bd80      	pop	{r7, pc}
	...

0801327c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801327c:	b580      	push	{r7, lr}
 801327e:	b084      	sub	sp, #16
 8013280:	af00      	add	r7, sp, #0
 8013282:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8013284:	6878      	ldr	r0, [r7, #4]
 8013286:	f7ff ff87 	bl	8013198 <sync_window>
 801328a:	4603      	mov	r3, r0
 801328c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801328e:	7bfb      	ldrb	r3, [r7, #15]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d158      	bne.n	8013346 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	781b      	ldrb	r3, [r3, #0]
 8013298:	2b03      	cmp	r3, #3
 801329a:	d148      	bne.n	801332e <sync_fs+0xb2>
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	791b      	ldrb	r3, [r3, #4]
 80132a0:	2b01      	cmp	r3, #1
 80132a2:	d144      	bne.n	801332e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	3330      	adds	r3, #48	; 0x30
 80132a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80132ac:	2100      	movs	r1, #0
 80132ae:	4618      	mov	r0, r3
 80132b0:	f7ff fda9 	bl	8012e06 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	3330      	adds	r3, #48	; 0x30
 80132b8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80132bc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80132c0:	4618      	mov	r0, r3
 80132c2:	f7ff fd38 	bl	8012d36 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	3330      	adds	r3, #48	; 0x30
 80132ca:	4921      	ldr	r1, [pc, #132]	; (8013350 <sync_fs+0xd4>)
 80132cc:	4618      	mov	r0, r3
 80132ce:	f7ff fd4d 	bl	8012d6c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	3330      	adds	r3, #48	; 0x30
 80132d6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80132da:	491e      	ldr	r1, [pc, #120]	; (8013354 <sync_fs+0xd8>)
 80132dc:	4618      	mov	r0, r3
 80132de:	f7ff fd45 	bl	8012d6c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	3330      	adds	r3, #48	; 0x30
 80132e6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	691b      	ldr	r3, [r3, #16]
 80132ee:	4619      	mov	r1, r3
 80132f0:	4610      	mov	r0, r2
 80132f2:	f7ff fd3b 	bl	8012d6c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	3330      	adds	r3, #48	; 0x30
 80132fa:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	68db      	ldr	r3, [r3, #12]
 8013302:	4619      	mov	r1, r3
 8013304:	4610      	mov	r0, r2
 8013306:	f7ff fd31 	bl	8012d6c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	69db      	ldr	r3, [r3, #28]
 801330e:	1c5a      	adds	r2, r3, #1
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	7858      	ldrb	r0, [r3, #1]
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013322:	2301      	movs	r3, #1
 8013324:	f7ff fc8e 	bl	8012c44 <disk_write>
			fs->fsi_flag = 0;
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	2200      	movs	r2, #0
 801332c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	785b      	ldrb	r3, [r3, #1]
 8013332:	2200      	movs	r2, #0
 8013334:	2100      	movs	r1, #0
 8013336:	4618      	mov	r0, r3
 8013338:	f7ff fca4 	bl	8012c84 <disk_ioctl>
 801333c:	4603      	mov	r3, r0
 801333e:	2b00      	cmp	r3, #0
 8013340:	d001      	beq.n	8013346 <sync_fs+0xca>
 8013342:	2301      	movs	r3, #1
 8013344:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8013346:	7bfb      	ldrb	r3, [r7, #15]
}
 8013348:	4618      	mov	r0, r3
 801334a:	3710      	adds	r7, #16
 801334c:	46bd      	mov	sp, r7
 801334e:	bd80      	pop	{r7, pc}
 8013350:	41615252 	.word	0x41615252
 8013354:	61417272 	.word	0x61417272

08013358 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8013358:	b480      	push	{r7}
 801335a:	b083      	sub	sp, #12
 801335c:	af00      	add	r7, sp, #0
 801335e:	6078      	str	r0, [r7, #4]
 8013360:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8013362:	683b      	ldr	r3, [r7, #0]
 8013364:	3b02      	subs	r3, #2
 8013366:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	695b      	ldr	r3, [r3, #20]
 801336c:	3b02      	subs	r3, #2
 801336e:	683a      	ldr	r2, [r7, #0]
 8013370:	429a      	cmp	r2, r3
 8013372:	d301      	bcc.n	8013378 <clust2sect+0x20>
 8013374:	2300      	movs	r3, #0
 8013376:	e008      	b.n	801338a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	895b      	ldrh	r3, [r3, #10]
 801337c:	461a      	mov	r2, r3
 801337e:	683b      	ldr	r3, [r7, #0]
 8013380:	fb03 f202 	mul.w	r2, r3, r2
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013388:	4413      	add	r3, r2
}
 801338a:	4618      	mov	r0, r3
 801338c:	370c      	adds	r7, #12
 801338e:	46bd      	mov	sp, r7
 8013390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013394:	4770      	bx	lr

08013396 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8013396:	b580      	push	{r7, lr}
 8013398:	b086      	sub	sp, #24
 801339a:	af00      	add	r7, sp, #0
 801339c:	6078      	str	r0, [r7, #4]
 801339e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	681b      	ldr	r3, [r3, #0]
 80133a4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80133a6:	683b      	ldr	r3, [r7, #0]
 80133a8:	2b01      	cmp	r3, #1
 80133aa:	d904      	bls.n	80133b6 <get_fat+0x20>
 80133ac:	693b      	ldr	r3, [r7, #16]
 80133ae:	695b      	ldr	r3, [r3, #20]
 80133b0:	683a      	ldr	r2, [r7, #0]
 80133b2:	429a      	cmp	r2, r3
 80133b4:	d302      	bcc.n	80133bc <get_fat+0x26>
		val = 1;	/* Internal error */
 80133b6:	2301      	movs	r3, #1
 80133b8:	617b      	str	r3, [r7, #20]
 80133ba:	e08c      	b.n	80134d6 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80133bc:	f04f 33ff 	mov.w	r3, #4294967295
 80133c0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80133c2:	693b      	ldr	r3, [r7, #16]
 80133c4:	781b      	ldrb	r3, [r3, #0]
 80133c6:	2b02      	cmp	r3, #2
 80133c8:	d045      	beq.n	8013456 <get_fat+0xc0>
 80133ca:	2b03      	cmp	r3, #3
 80133cc:	d05d      	beq.n	801348a <get_fat+0xf4>
 80133ce:	2b01      	cmp	r3, #1
 80133d0:	d177      	bne.n	80134c2 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80133d2:	683b      	ldr	r3, [r7, #0]
 80133d4:	60fb      	str	r3, [r7, #12]
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	085b      	lsrs	r3, r3, #1
 80133da:	68fa      	ldr	r2, [r7, #12]
 80133dc:	4413      	add	r3, r2
 80133de:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80133e0:	693b      	ldr	r3, [r7, #16]
 80133e2:	6a1a      	ldr	r2, [r3, #32]
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	0a5b      	lsrs	r3, r3, #9
 80133e8:	4413      	add	r3, r2
 80133ea:	4619      	mov	r1, r3
 80133ec:	6938      	ldr	r0, [r7, #16]
 80133ee:	f7ff ff17 	bl	8013220 <move_window>
 80133f2:	4603      	mov	r3, r0
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d167      	bne.n	80134c8 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	1c5a      	adds	r2, r3, #1
 80133fc:	60fa      	str	r2, [r7, #12]
 80133fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013402:	693a      	ldr	r2, [r7, #16]
 8013404:	4413      	add	r3, r2
 8013406:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801340a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801340c:	693b      	ldr	r3, [r7, #16]
 801340e:	6a1a      	ldr	r2, [r3, #32]
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	0a5b      	lsrs	r3, r3, #9
 8013414:	4413      	add	r3, r2
 8013416:	4619      	mov	r1, r3
 8013418:	6938      	ldr	r0, [r7, #16]
 801341a:	f7ff ff01 	bl	8013220 <move_window>
 801341e:	4603      	mov	r3, r0
 8013420:	2b00      	cmp	r3, #0
 8013422:	d153      	bne.n	80134cc <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801342a:	693a      	ldr	r2, [r7, #16]
 801342c:	4413      	add	r3, r2
 801342e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013432:	021b      	lsls	r3, r3, #8
 8013434:	461a      	mov	r2, r3
 8013436:	68bb      	ldr	r3, [r7, #8]
 8013438:	4313      	orrs	r3, r2
 801343a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801343c:	683b      	ldr	r3, [r7, #0]
 801343e:	f003 0301 	and.w	r3, r3, #1
 8013442:	2b00      	cmp	r3, #0
 8013444:	d002      	beq.n	801344c <get_fat+0xb6>
 8013446:	68bb      	ldr	r3, [r7, #8]
 8013448:	091b      	lsrs	r3, r3, #4
 801344a:	e002      	b.n	8013452 <get_fat+0xbc>
 801344c:	68bb      	ldr	r3, [r7, #8]
 801344e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013452:	617b      	str	r3, [r7, #20]
			break;
 8013454:	e03f      	b.n	80134d6 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013456:	693b      	ldr	r3, [r7, #16]
 8013458:	6a1a      	ldr	r2, [r3, #32]
 801345a:	683b      	ldr	r3, [r7, #0]
 801345c:	0a1b      	lsrs	r3, r3, #8
 801345e:	4413      	add	r3, r2
 8013460:	4619      	mov	r1, r3
 8013462:	6938      	ldr	r0, [r7, #16]
 8013464:	f7ff fedc 	bl	8013220 <move_window>
 8013468:	4603      	mov	r3, r0
 801346a:	2b00      	cmp	r3, #0
 801346c:	d130      	bne.n	80134d0 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801346e:	693b      	ldr	r3, [r7, #16]
 8013470:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013474:	683b      	ldr	r3, [r7, #0]
 8013476:	005b      	lsls	r3, r3, #1
 8013478:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801347c:	4413      	add	r3, r2
 801347e:	4618      	mov	r0, r3
 8013480:	f7ff fc1e 	bl	8012cc0 <ld_word>
 8013484:	4603      	mov	r3, r0
 8013486:	617b      	str	r3, [r7, #20]
			break;
 8013488:	e025      	b.n	80134d6 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801348a:	693b      	ldr	r3, [r7, #16]
 801348c:	6a1a      	ldr	r2, [r3, #32]
 801348e:	683b      	ldr	r3, [r7, #0]
 8013490:	09db      	lsrs	r3, r3, #7
 8013492:	4413      	add	r3, r2
 8013494:	4619      	mov	r1, r3
 8013496:	6938      	ldr	r0, [r7, #16]
 8013498:	f7ff fec2 	bl	8013220 <move_window>
 801349c:	4603      	mov	r3, r0
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d118      	bne.n	80134d4 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80134a2:	693b      	ldr	r3, [r7, #16]
 80134a4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80134a8:	683b      	ldr	r3, [r7, #0]
 80134aa:	009b      	lsls	r3, r3, #2
 80134ac:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80134b0:	4413      	add	r3, r2
 80134b2:	4618      	mov	r0, r3
 80134b4:	f7ff fc1c 	bl	8012cf0 <ld_dword>
 80134b8:	4603      	mov	r3, r0
 80134ba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80134be:	617b      	str	r3, [r7, #20]
			break;
 80134c0:	e009      	b.n	80134d6 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80134c2:	2301      	movs	r3, #1
 80134c4:	617b      	str	r3, [r7, #20]
 80134c6:	e006      	b.n	80134d6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80134c8:	bf00      	nop
 80134ca:	e004      	b.n	80134d6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80134cc:	bf00      	nop
 80134ce:	e002      	b.n	80134d6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80134d0:	bf00      	nop
 80134d2:	e000      	b.n	80134d6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80134d4:	bf00      	nop
		}
	}

	return val;
 80134d6:	697b      	ldr	r3, [r7, #20]
}
 80134d8:	4618      	mov	r0, r3
 80134da:	3718      	adds	r7, #24
 80134dc:	46bd      	mov	sp, r7
 80134de:	bd80      	pop	{r7, pc}

080134e0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80134e0:	b590      	push	{r4, r7, lr}
 80134e2:	b089      	sub	sp, #36	; 0x24
 80134e4:	af00      	add	r7, sp, #0
 80134e6:	60f8      	str	r0, [r7, #12]
 80134e8:	60b9      	str	r1, [r7, #8]
 80134ea:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80134ec:	2302      	movs	r3, #2
 80134ee:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80134f0:	68bb      	ldr	r3, [r7, #8]
 80134f2:	2b01      	cmp	r3, #1
 80134f4:	f240 80d6 	bls.w	80136a4 <put_fat+0x1c4>
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	695b      	ldr	r3, [r3, #20]
 80134fc:	68ba      	ldr	r2, [r7, #8]
 80134fe:	429a      	cmp	r2, r3
 8013500:	f080 80d0 	bcs.w	80136a4 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	781b      	ldrb	r3, [r3, #0]
 8013508:	2b02      	cmp	r3, #2
 801350a:	d073      	beq.n	80135f4 <put_fat+0x114>
 801350c:	2b03      	cmp	r3, #3
 801350e:	f000 8091 	beq.w	8013634 <put_fat+0x154>
 8013512:	2b01      	cmp	r3, #1
 8013514:	f040 80c6 	bne.w	80136a4 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8013518:	68bb      	ldr	r3, [r7, #8]
 801351a:	61bb      	str	r3, [r7, #24]
 801351c:	69bb      	ldr	r3, [r7, #24]
 801351e:	085b      	lsrs	r3, r3, #1
 8013520:	69ba      	ldr	r2, [r7, #24]
 8013522:	4413      	add	r3, r2
 8013524:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	6a1a      	ldr	r2, [r3, #32]
 801352a:	69bb      	ldr	r3, [r7, #24]
 801352c:	0a5b      	lsrs	r3, r3, #9
 801352e:	4413      	add	r3, r2
 8013530:	4619      	mov	r1, r3
 8013532:	68f8      	ldr	r0, [r7, #12]
 8013534:	f7ff fe74 	bl	8013220 <move_window>
 8013538:	4603      	mov	r3, r0
 801353a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801353c:	7ffb      	ldrb	r3, [r7, #31]
 801353e:	2b00      	cmp	r3, #0
 8013540:	f040 80a9 	bne.w	8013696 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801354a:	69bb      	ldr	r3, [r7, #24]
 801354c:	1c59      	adds	r1, r3, #1
 801354e:	61b9      	str	r1, [r7, #24]
 8013550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013554:	4413      	add	r3, r2
 8013556:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8013558:	68bb      	ldr	r3, [r7, #8]
 801355a:	f003 0301 	and.w	r3, r3, #1
 801355e:	2b00      	cmp	r3, #0
 8013560:	d00d      	beq.n	801357e <put_fat+0x9e>
 8013562:	697b      	ldr	r3, [r7, #20]
 8013564:	781b      	ldrb	r3, [r3, #0]
 8013566:	b25b      	sxtb	r3, r3
 8013568:	f003 030f 	and.w	r3, r3, #15
 801356c:	b25a      	sxtb	r2, r3
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	b2db      	uxtb	r3, r3
 8013572:	011b      	lsls	r3, r3, #4
 8013574:	b25b      	sxtb	r3, r3
 8013576:	4313      	orrs	r3, r2
 8013578:	b25b      	sxtb	r3, r3
 801357a:	b2db      	uxtb	r3, r3
 801357c:	e001      	b.n	8013582 <put_fat+0xa2>
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	b2db      	uxtb	r3, r3
 8013582:	697a      	ldr	r2, [r7, #20]
 8013584:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	2201      	movs	r2, #1
 801358a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	6a1a      	ldr	r2, [r3, #32]
 8013590:	69bb      	ldr	r3, [r7, #24]
 8013592:	0a5b      	lsrs	r3, r3, #9
 8013594:	4413      	add	r3, r2
 8013596:	4619      	mov	r1, r3
 8013598:	68f8      	ldr	r0, [r7, #12]
 801359a:	f7ff fe41 	bl	8013220 <move_window>
 801359e:	4603      	mov	r3, r0
 80135a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80135a2:	7ffb      	ldrb	r3, [r7, #31]
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d178      	bne.n	801369a <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80135ae:	69bb      	ldr	r3, [r7, #24]
 80135b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80135b4:	4413      	add	r3, r2
 80135b6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80135b8:	68bb      	ldr	r3, [r7, #8]
 80135ba:	f003 0301 	and.w	r3, r3, #1
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d003      	beq.n	80135ca <put_fat+0xea>
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	091b      	lsrs	r3, r3, #4
 80135c6:	b2db      	uxtb	r3, r3
 80135c8:	e00e      	b.n	80135e8 <put_fat+0x108>
 80135ca:	697b      	ldr	r3, [r7, #20]
 80135cc:	781b      	ldrb	r3, [r3, #0]
 80135ce:	b25b      	sxtb	r3, r3
 80135d0:	f023 030f 	bic.w	r3, r3, #15
 80135d4:	b25a      	sxtb	r2, r3
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	0a1b      	lsrs	r3, r3, #8
 80135da:	b25b      	sxtb	r3, r3
 80135dc:	f003 030f 	and.w	r3, r3, #15
 80135e0:	b25b      	sxtb	r3, r3
 80135e2:	4313      	orrs	r3, r2
 80135e4:	b25b      	sxtb	r3, r3
 80135e6:	b2db      	uxtb	r3, r3
 80135e8:	697a      	ldr	r2, [r7, #20]
 80135ea:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80135ec:	68fb      	ldr	r3, [r7, #12]
 80135ee:	2201      	movs	r2, #1
 80135f0:	70da      	strb	r2, [r3, #3]
			break;
 80135f2:	e057      	b.n	80136a4 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	6a1a      	ldr	r2, [r3, #32]
 80135f8:	68bb      	ldr	r3, [r7, #8]
 80135fa:	0a1b      	lsrs	r3, r3, #8
 80135fc:	4413      	add	r3, r2
 80135fe:	4619      	mov	r1, r3
 8013600:	68f8      	ldr	r0, [r7, #12]
 8013602:	f7ff fe0d 	bl	8013220 <move_window>
 8013606:	4603      	mov	r3, r0
 8013608:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801360a:	7ffb      	ldrb	r3, [r7, #31]
 801360c:	2b00      	cmp	r3, #0
 801360e:	d146      	bne.n	801369e <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013616:	68bb      	ldr	r3, [r7, #8]
 8013618:	005b      	lsls	r3, r3, #1
 801361a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801361e:	4413      	add	r3, r2
 8013620:	687a      	ldr	r2, [r7, #4]
 8013622:	b292      	uxth	r2, r2
 8013624:	4611      	mov	r1, r2
 8013626:	4618      	mov	r0, r3
 8013628:	f7ff fb85 	bl	8012d36 <st_word>
			fs->wflag = 1;
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	2201      	movs	r2, #1
 8013630:	70da      	strb	r2, [r3, #3]
			break;
 8013632:	e037      	b.n	80136a4 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	6a1a      	ldr	r2, [r3, #32]
 8013638:	68bb      	ldr	r3, [r7, #8]
 801363a:	09db      	lsrs	r3, r3, #7
 801363c:	4413      	add	r3, r2
 801363e:	4619      	mov	r1, r3
 8013640:	68f8      	ldr	r0, [r7, #12]
 8013642:	f7ff fded 	bl	8013220 <move_window>
 8013646:	4603      	mov	r3, r0
 8013648:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801364a:	7ffb      	ldrb	r3, [r7, #31]
 801364c:	2b00      	cmp	r3, #0
 801364e:	d128      	bne.n	80136a2 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801365c:	68bb      	ldr	r3, [r7, #8]
 801365e:	009b      	lsls	r3, r3, #2
 8013660:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013664:	4413      	add	r3, r2
 8013666:	4618      	mov	r0, r3
 8013668:	f7ff fb42 	bl	8012cf0 <ld_dword>
 801366c:	4603      	mov	r3, r0
 801366e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8013672:	4323      	orrs	r3, r4
 8013674:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801367c:	68bb      	ldr	r3, [r7, #8]
 801367e:	009b      	lsls	r3, r3, #2
 8013680:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013684:	4413      	add	r3, r2
 8013686:	6879      	ldr	r1, [r7, #4]
 8013688:	4618      	mov	r0, r3
 801368a:	f7ff fb6f 	bl	8012d6c <st_dword>
			fs->wflag = 1;
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	2201      	movs	r2, #1
 8013692:	70da      	strb	r2, [r3, #3]
			break;
 8013694:	e006      	b.n	80136a4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8013696:	bf00      	nop
 8013698:	e004      	b.n	80136a4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801369a:	bf00      	nop
 801369c:	e002      	b.n	80136a4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801369e:	bf00      	nop
 80136a0:	e000      	b.n	80136a4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80136a2:	bf00      	nop
		}
	}
	return res;
 80136a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80136a6:	4618      	mov	r0, r3
 80136a8:	3724      	adds	r7, #36	; 0x24
 80136aa:	46bd      	mov	sp, r7
 80136ac:	bd90      	pop	{r4, r7, pc}

080136ae <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80136ae:	b580      	push	{r7, lr}
 80136b0:	b088      	sub	sp, #32
 80136b2:	af00      	add	r7, sp, #0
 80136b4:	60f8      	str	r0, [r7, #12]
 80136b6:	60b9      	str	r1, [r7, #8]
 80136b8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80136ba:	2300      	movs	r3, #0
 80136bc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80136be:	68fb      	ldr	r3, [r7, #12]
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80136c4:	68bb      	ldr	r3, [r7, #8]
 80136c6:	2b01      	cmp	r3, #1
 80136c8:	d904      	bls.n	80136d4 <remove_chain+0x26>
 80136ca:	69bb      	ldr	r3, [r7, #24]
 80136cc:	695b      	ldr	r3, [r3, #20]
 80136ce:	68ba      	ldr	r2, [r7, #8]
 80136d0:	429a      	cmp	r2, r3
 80136d2:	d301      	bcc.n	80136d8 <remove_chain+0x2a>
 80136d4:	2302      	movs	r3, #2
 80136d6:	e04b      	b.n	8013770 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d00c      	beq.n	80136f8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80136de:	f04f 32ff 	mov.w	r2, #4294967295
 80136e2:	6879      	ldr	r1, [r7, #4]
 80136e4:	69b8      	ldr	r0, [r7, #24]
 80136e6:	f7ff fefb 	bl	80134e0 <put_fat>
 80136ea:	4603      	mov	r3, r0
 80136ec:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80136ee:	7ffb      	ldrb	r3, [r7, #31]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d001      	beq.n	80136f8 <remove_chain+0x4a>
 80136f4:	7ffb      	ldrb	r3, [r7, #31]
 80136f6:	e03b      	b.n	8013770 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80136f8:	68b9      	ldr	r1, [r7, #8]
 80136fa:	68f8      	ldr	r0, [r7, #12]
 80136fc:	f7ff fe4b 	bl	8013396 <get_fat>
 8013700:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8013702:	697b      	ldr	r3, [r7, #20]
 8013704:	2b00      	cmp	r3, #0
 8013706:	d031      	beq.n	801376c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8013708:	697b      	ldr	r3, [r7, #20]
 801370a:	2b01      	cmp	r3, #1
 801370c:	d101      	bne.n	8013712 <remove_chain+0x64>
 801370e:	2302      	movs	r3, #2
 8013710:	e02e      	b.n	8013770 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8013712:	697b      	ldr	r3, [r7, #20]
 8013714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013718:	d101      	bne.n	801371e <remove_chain+0x70>
 801371a:	2301      	movs	r3, #1
 801371c:	e028      	b.n	8013770 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801371e:	2200      	movs	r2, #0
 8013720:	68b9      	ldr	r1, [r7, #8]
 8013722:	69b8      	ldr	r0, [r7, #24]
 8013724:	f7ff fedc 	bl	80134e0 <put_fat>
 8013728:	4603      	mov	r3, r0
 801372a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801372c:	7ffb      	ldrb	r3, [r7, #31]
 801372e:	2b00      	cmp	r3, #0
 8013730:	d001      	beq.n	8013736 <remove_chain+0x88>
 8013732:	7ffb      	ldrb	r3, [r7, #31]
 8013734:	e01c      	b.n	8013770 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8013736:	69bb      	ldr	r3, [r7, #24]
 8013738:	691a      	ldr	r2, [r3, #16]
 801373a:	69bb      	ldr	r3, [r7, #24]
 801373c:	695b      	ldr	r3, [r3, #20]
 801373e:	3b02      	subs	r3, #2
 8013740:	429a      	cmp	r2, r3
 8013742:	d20b      	bcs.n	801375c <remove_chain+0xae>
			fs->free_clst++;
 8013744:	69bb      	ldr	r3, [r7, #24]
 8013746:	691b      	ldr	r3, [r3, #16]
 8013748:	1c5a      	adds	r2, r3, #1
 801374a:	69bb      	ldr	r3, [r7, #24]
 801374c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 801374e:	69bb      	ldr	r3, [r7, #24]
 8013750:	791b      	ldrb	r3, [r3, #4]
 8013752:	f043 0301 	orr.w	r3, r3, #1
 8013756:	b2da      	uxtb	r2, r3
 8013758:	69bb      	ldr	r3, [r7, #24]
 801375a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801375c:	697b      	ldr	r3, [r7, #20]
 801375e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8013760:	69bb      	ldr	r3, [r7, #24]
 8013762:	695b      	ldr	r3, [r3, #20]
 8013764:	68ba      	ldr	r2, [r7, #8]
 8013766:	429a      	cmp	r2, r3
 8013768:	d3c6      	bcc.n	80136f8 <remove_chain+0x4a>
 801376a:	e000      	b.n	801376e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801376c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801376e:	2300      	movs	r3, #0
}
 8013770:	4618      	mov	r0, r3
 8013772:	3720      	adds	r7, #32
 8013774:	46bd      	mov	sp, r7
 8013776:	bd80      	pop	{r7, pc}

08013778 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8013778:	b580      	push	{r7, lr}
 801377a:	b088      	sub	sp, #32
 801377c:	af00      	add	r7, sp, #0
 801377e:	6078      	str	r0, [r7, #4]
 8013780:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8013788:	683b      	ldr	r3, [r7, #0]
 801378a:	2b00      	cmp	r3, #0
 801378c:	d10d      	bne.n	80137aa <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801378e:	693b      	ldr	r3, [r7, #16]
 8013790:	68db      	ldr	r3, [r3, #12]
 8013792:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8013794:	69bb      	ldr	r3, [r7, #24]
 8013796:	2b00      	cmp	r3, #0
 8013798:	d004      	beq.n	80137a4 <create_chain+0x2c>
 801379a:	693b      	ldr	r3, [r7, #16]
 801379c:	695b      	ldr	r3, [r3, #20]
 801379e:	69ba      	ldr	r2, [r7, #24]
 80137a0:	429a      	cmp	r2, r3
 80137a2:	d31b      	bcc.n	80137dc <create_chain+0x64>
 80137a4:	2301      	movs	r3, #1
 80137a6:	61bb      	str	r3, [r7, #24]
 80137a8:	e018      	b.n	80137dc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80137aa:	6839      	ldr	r1, [r7, #0]
 80137ac:	6878      	ldr	r0, [r7, #4]
 80137ae:	f7ff fdf2 	bl	8013396 <get_fat>
 80137b2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	2b01      	cmp	r3, #1
 80137b8:	d801      	bhi.n	80137be <create_chain+0x46>
 80137ba:	2301      	movs	r3, #1
 80137bc:	e070      	b.n	80138a0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137c4:	d101      	bne.n	80137ca <create_chain+0x52>
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	e06a      	b.n	80138a0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80137ca:	693b      	ldr	r3, [r7, #16]
 80137cc:	695b      	ldr	r3, [r3, #20]
 80137ce:	68fa      	ldr	r2, [r7, #12]
 80137d0:	429a      	cmp	r2, r3
 80137d2:	d201      	bcs.n	80137d8 <create_chain+0x60>
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	e063      	b.n	80138a0 <create_chain+0x128>
		scl = clst;
 80137d8:	683b      	ldr	r3, [r7, #0]
 80137da:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80137dc:	69bb      	ldr	r3, [r7, #24]
 80137de:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80137e0:	69fb      	ldr	r3, [r7, #28]
 80137e2:	3301      	adds	r3, #1
 80137e4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80137e6:	693b      	ldr	r3, [r7, #16]
 80137e8:	695b      	ldr	r3, [r3, #20]
 80137ea:	69fa      	ldr	r2, [r7, #28]
 80137ec:	429a      	cmp	r2, r3
 80137ee:	d307      	bcc.n	8013800 <create_chain+0x88>
				ncl = 2;
 80137f0:	2302      	movs	r3, #2
 80137f2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80137f4:	69fa      	ldr	r2, [r7, #28]
 80137f6:	69bb      	ldr	r3, [r7, #24]
 80137f8:	429a      	cmp	r2, r3
 80137fa:	d901      	bls.n	8013800 <create_chain+0x88>
 80137fc:	2300      	movs	r3, #0
 80137fe:	e04f      	b.n	80138a0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8013800:	69f9      	ldr	r1, [r7, #28]
 8013802:	6878      	ldr	r0, [r7, #4]
 8013804:	f7ff fdc7 	bl	8013396 <get_fat>
 8013808:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	2b00      	cmp	r3, #0
 801380e:	d00e      	beq.n	801382e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	2b01      	cmp	r3, #1
 8013814:	d003      	beq.n	801381e <create_chain+0xa6>
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	f1b3 3fff 	cmp.w	r3, #4294967295
 801381c:	d101      	bne.n	8013822 <create_chain+0xaa>
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	e03e      	b.n	80138a0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8013822:	69fa      	ldr	r2, [r7, #28]
 8013824:	69bb      	ldr	r3, [r7, #24]
 8013826:	429a      	cmp	r2, r3
 8013828:	d1da      	bne.n	80137e0 <create_chain+0x68>
 801382a:	2300      	movs	r3, #0
 801382c:	e038      	b.n	80138a0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801382e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8013830:	f04f 32ff 	mov.w	r2, #4294967295
 8013834:	69f9      	ldr	r1, [r7, #28]
 8013836:	6938      	ldr	r0, [r7, #16]
 8013838:	f7ff fe52 	bl	80134e0 <put_fat>
 801383c:	4603      	mov	r3, r0
 801383e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8013840:	7dfb      	ldrb	r3, [r7, #23]
 8013842:	2b00      	cmp	r3, #0
 8013844:	d109      	bne.n	801385a <create_chain+0xe2>
 8013846:	683b      	ldr	r3, [r7, #0]
 8013848:	2b00      	cmp	r3, #0
 801384a:	d006      	beq.n	801385a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801384c:	69fa      	ldr	r2, [r7, #28]
 801384e:	6839      	ldr	r1, [r7, #0]
 8013850:	6938      	ldr	r0, [r7, #16]
 8013852:	f7ff fe45 	bl	80134e0 <put_fat>
 8013856:	4603      	mov	r3, r0
 8013858:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801385a:	7dfb      	ldrb	r3, [r7, #23]
 801385c:	2b00      	cmp	r3, #0
 801385e:	d116      	bne.n	801388e <create_chain+0x116>
		fs->last_clst = ncl;
 8013860:	693b      	ldr	r3, [r7, #16]
 8013862:	69fa      	ldr	r2, [r7, #28]
 8013864:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8013866:	693b      	ldr	r3, [r7, #16]
 8013868:	691a      	ldr	r2, [r3, #16]
 801386a:	693b      	ldr	r3, [r7, #16]
 801386c:	695b      	ldr	r3, [r3, #20]
 801386e:	3b02      	subs	r3, #2
 8013870:	429a      	cmp	r2, r3
 8013872:	d804      	bhi.n	801387e <create_chain+0x106>
 8013874:	693b      	ldr	r3, [r7, #16]
 8013876:	691b      	ldr	r3, [r3, #16]
 8013878:	1e5a      	subs	r2, r3, #1
 801387a:	693b      	ldr	r3, [r7, #16]
 801387c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 801387e:	693b      	ldr	r3, [r7, #16]
 8013880:	791b      	ldrb	r3, [r3, #4]
 8013882:	f043 0301 	orr.w	r3, r3, #1
 8013886:	b2da      	uxtb	r2, r3
 8013888:	693b      	ldr	r3, [r7, #16]
 801388a:	711a      	strb	r2, [r3, #4]
 801388c:	e007      	b.n	801389e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801388e:	7dfb      	ldrb	r3, [r7, #23]
 8013890:	2b01      	cmp	r3, #1
 8013892:	d102      	bne.n	801389a <create_chain+0x122>
 8013894:	f04f 33ff 	mov.w	r3, #4294967295
 8013898:	e000      	b.n	801389c <create_chain+0x124>
 801389a:	2301      	movs	r3, #1
 801389c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801389e:	69fb      	ldr	r3, [r7, #28]
}
 80138a0:	4618      	mov	r0, r3
 80138a2:	3720      	adds	r7, #32
 80138a4:	46bd      	mov	sp, r7
 80138a6:	bd80      	pop	{r7, pc}

080138a8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80138a8:	b480      	push	{r7}
 80138aa:	b087      	sub	sp, #28
 80138ac:	af00      	add	r7, sp, #0
 80138ae:	6078      	str	r0, [r7, #4]
 80138b0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	681b      	ldr	r3, [r3, #0]
 80138b6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138bc:	3304      	adds	r3, #4
 80138be:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80138c0:	683b      	ldr	r3, [r7, #0]
 80138c2:	0a5b      	lsrs	r3, r3, #9
 80138c4:	68fa      	ldr	r2, [r7, #12]
 80138c6:	8952      	ldrh	r2, [r2, #10]
 80138c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80138cc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80138ce:	693b      	ldr	r3, [r7, #16]
 80138d0:	1d1a      	adds	r2, r3, #4
 80138d2:	613a      	str	r2, [r7, #16]
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80138d8:	68bb      	ldr	r3, [r7, #8]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d101      	bne.n	80138e2 <clmt_clust+0x3a>
 80138de:	2300      	movs	r3, #0
 80138e0:	e010      	b.n	8013904 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80138e2:	697a      	ldr	r2, [r7, #20]
 80138e4:	68bb      	ldr	r3, [r7, #8]
 80138e6:	429a      	cmp	r2, r3
 80138e8:	d307      	bcc.n	80138fa <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80138ea:	697a      	ldr	r2, [r7, #20]
 80138ec:	68bb      	ldr	r3, [r7, #8]
 80138ee:	1ad3      	subs	r3, r2, r3
 80138f0:	617b      	str	r3, [r7, #20]
 80138f2:	693b      	ldr	r3, [r7, #16]
 80138f4:	3304      	adds	r3, #4
 80138f6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80138f8:	e7e9      	b.n	80138ce <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80138fa:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80138fc:	693b      	ldr	r3, [r7, #16]
 80138fe:	681a      	ldr	r2, [r3, #0]
 8013900:	697b      	ldr	r3, [r7, #20]
 8013902:	4413      	add	r3, r2
}
 8013904:	4618      	mov	r0, r3
 8013906:	371c      	adds	r7, #28
 8013908:	46bd      	mov	sp, r7
 801390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801390e:	4770      	bx	lr

08013910 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8013910:	b580      	push	{r7, lr}
 8013912:	b086      	sub	sp, #24
 8013914:	af00      	add	r7, sp, #0
 8013916:	6078      	str	r0, [r7, #4]
 8013918:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8013920:	683b      	ldr	r3, [r7, #0]
 8013922:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013926:	d204      	bcs.n	8013932 <dir_sdi+0x22>
 8013928:	683b      	ldr	r3, [r7, #0]
 801392a:	f003 031f 	and.w	r3, r3, #31
 801392e:	2b00      	cmp	r3, #0
 8013930:	d001      	beq.n	8013936 <dir_sdi+0x26>
		return FR_INT_ERR;
 8013932:	2302      	movs	r3, #2
 8013934:	e063      	b.n	80139fe <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	683a      	ldr	r2, [r7, #0]
 801393a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	689b      	ldr	r3, [r3, #8]
 8013940:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8013942:	697b      	ldr	r3, [r7, #20]
 8013944:	2b00      	cmp	r3, #0
 8013946:	d106      	bne.n	8013956 <dir_sdi+0x46>
 8013948:	693b      	ldr	r3, [r7, #16]
 801394a:	781b      	ldrb	r3, [r3, #0]
 801394c:	2b02      	cmp	r3, #2
 801394e:	d902      	bls.n	8013956 <dir_sdi+0x46>
		clst = fs->dirbase;
 8013950:	693b      	ldr	r3, [r7, #16]
 8013952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013954:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8013956:	697b      	ldr	r3, [r7, #20]
 8013958:	2b00      	cmp	r3, #0
 801395a:	d10c      	bne.n	8013976 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801395c:	683b      	ldr	r3, [r7, #0]
 801395e:	095b      	lsrs	r3, r3, #5
 8013960:	693a      	ldr	r2, [r7, #16]
 8013962:	8912      	ldrh	r2, [r2, #8]
 8013964:	4293      	cmp	r3, r2
 8013966:	d301      	bcc.n	801396c <dir_sdi+0x5c>
 8013968:	2302      	movs	r3, #2
 801396a:	e048      	b.n	80139fe <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 801396c:	693b      	ldr	r3, [r7, #16]
 801396e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	61da      	str	r2, [r3, #28]
 8013974:	e029      	b.n	80139ca <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8013976:	693b      	ldr	r3, [r7, #16]
 8013978:	895b      	ldrh	r3, [r3, #10]
 801397a:	025b      	lsls	r3, r3, #9
 801397c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801397e:	e019      	b.n	80139b4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	6979      	ldr	r1, [r7, #20]
 8013984:	4618      	mov	r0, r3
 8013986:	f7ff fd06 	bl	8013396 <get_fat>
 801398a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801398c:	697b      	ldr	r3, [r7, #20]
 801398e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013992:	d101      	bne.n	8013998 <dir_sdi+0x88>
 8013994:	2301      	movs	r3, #1
 8013996:	e032      	b.n	80139fe <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8013998:	697b      	ldr	r3, [r7, #20]
 801399a:	2b01      	cmp	r3, #1
 801399c:	d904      	bls.n	80139a8 <dir_sdi+0x98>
 801399e:	693b      	ldr	r3, [r7, #16]
 80139a0:	695b      	ldr	r3, [r3, #20]
 80139a2:	697a      	ldr	r2, [r7, #20]
 80139a4:	429a      	cmp	r2, r3
 80139a6:	d301      	bcc.n	80139ac <dir_sdi+0x9c>
 80139a8:	2302      	movs	r3, #2
 80139aa:	e028      	b.n	80139fe <dir_sdi+0xee>
			ofs -= csz;
 80139ac:	683a      	ldr	r2, [r7, #0]
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	1ad3      	subs	r3, r2, r3
 80139b2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80139b4:	683a      	ldr	r2, [r7, #0]
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	429a      	cmp	r2, r3
 80139ba:	d2e1      	bcs.n	8013980 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80139bc:	6979      	ldr	r1, [r7, #20]
 80139be:	6938      	ldr	r0, [r7, #16]
 80139c0:	f7ff fcca 	bl	8013358 <clust2sect>
 80139c4:	4602      	mov	r2, r0
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	697a      	ldr	r2, [r7, #20]
 80139ce:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	69db      	ldr	r3, [r3, #28]
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d101      	bne.n	80139dc <dir_sdi+0xcc>
 80139d8:	2302      	movs	r3, #2
 80139da:	e010      	b.n	80139fe <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	69da      	ldr	r2, [r3, #28]
 80139e0:	683b      	ldr	r3, [r7, #0]
 80139e2:	0a5b      	lsrs	r3, r3, #9
 80139e4:	441a      	add	r2, r3
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80139ea:	693b      	ldr	r3, [r7, #16]
 80139ec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80139f0:	683b      	ldr	r3, [r7, #0]
 80139f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80139f6:	441a      	add	r2, r3
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80139fc:	2300      	movs	r3, #0
}
 80139fe:	4618      	mov	r0, r3
 8013a00:	3718      	adds	r7, #24
 8013a02:	46bd      	mov	sp, r7
 8013a04:	bd80      	pop	{r7, pc}

08013a06 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8013a06:	b580      	push	{r7, lr}
 8013a08:	b086      	sub	sp, #24
 8013a0a:	af00      	add	r7, sp, #0
 8013a0c:	6078      	str	r0, [r7, #4]
 8013a0e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	695b      	ldr	r3, [r3, #20]
 8013a1a:	3320      	adds	r3, #32
 8013a1c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	69db      	ldr	r3, [r3, #28]
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d003      	beq.n	8013a2e <dir_next+0x28>
 8013a26:	68bb      	ldr	r3, [r7, #8]
 8013a28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013a2c:	d301      	bcc.n	8013a32 <dir_next+0x2c>
 8013a2e:	2304      	movs	r3, #4
 8013a30:	e0aa      	b.n	8013b88 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8013a32:	68bb      	ldr	r3, [r7, #8]
 8013a34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	f040 8098 	bne.w	8013b6e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	69db      	ldr	r3, [r3, #28]
 8013a42:	1c5a      	adds	r2, r3, #1
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	699b      	ldr	r3, [r3, #24]
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d10b      	bne.n	8013a68 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8013a50:	68bb      	ldr	r3, [r7, #8]
 8013a52:	095b      	lsrs	r3, r3, #5
 8013a54:	68fa      	ldr	r2, [r7, #12]
 8013a56:	8912      	ldrh	r2, [r2, #8]
 8013a58:	4293      	cmp	r3, r2
 8013a5a:	f0c0 8088 	bcc.w	8013b6e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	2200      	movs	r2, #0
 8013a62:	61da      	str	r2, [r3, #28]
 8013a64:	2304      	movs	r3, #4
 8013a66:	e08f      	b.n	8013b88 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8013a68:	68bb      	ldr	r3, [r7, #8]
 8013a6a:	0a5b      	lsrs	r3, r3, #9
 8013a6c:	68fa      	ldr	r2, [r7, #12]
 8013a6e:	8952      	ldrh	r2, [r2, #10]
 8013a70:	3a01      	subs	r2, #1
 8013a72:	4013      	ands	r3, r2
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d17a      	bne.n	8013b6e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8013a78:	687a      	ldr	r2, [r7, #4]
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	699b      	ldr	r3, [r3, #24]
 8013a7e:	4619      	mov	r1, r3
 8013a80:	4610      	mov	r0, r2
 8013a82:	f7ff fc88 	bl	8013396 <get_fat>
 8013a86:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8013a88:	697b      	ldr	r3, [r7, #20]
 8013a8a:	2b01      	cmp	r3, #1
 8013a8c:	d801      	bhi.n	8013a92 <dir_next+0x8c>
 8013a8e:	2302      	movs	r3, #2
 8013a90:	e07a      	b.n	8013b88 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8013a92:	697b      	ldr	r3, [r7, #20]
 8013a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a98:	d101      	bne.n	8013a9e <dir_next+0x98>
 8013a9a:	2301      	movs	r3, #1
 8013a9c:	e074      	b.n	8013b88 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	695b      	ldr	r3, [r3, #20]
 8013aa2:	697a      	ldr	r2, [r7, #20]
 8013aa4:	429a      	cmp	r2, r3
 8013aa6:	d358      	bcc.n	8013b5a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8013aa8:	683b      	ldr	r3, [r7, #0]
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d104      	bne.n	8013ab8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	2200      	movs	r2, #0
 8013ab2:	61da      	str	r2, [r3, #28]
 8013ab4:	2304      	movs	r3, #4
 8013ab6:	e067      	b.n	8013b88 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8013ab8:	687a      	ldr	r2, [r7, #4]
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	699b      	ldr	r3, [r3, #24]
 8013abe:	4619      	mov	r1, r3
 8013ac0:	4610      	mov	r0, r2
 8013ac2:	f7ff fe59 	bl	8013778 <create_chain>
 8013ac6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8013ac8:	697b      	ldr	r3, [r7, #20]
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d101      	bne.n	8013ad2 <dir_next+0xcc>
 8013ace:	2307      	movs	r3, #7
 8013ad0:	e05a      	b.n	8013b88 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8013ad2:	697b      	ldr	r3, [r7, #20]
 8013ad4:	2b01      	cmp	r3, #1
 8013ad6:	d101      	bne.n	8013adc <dir_next+0xd6>
 8013ad8:	2302      	movs	r3, #2
 8013ada:	e055      	b.n	8013b88 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013adc:	697b      	ldr	r3, [r7, #20]
 8013ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ae2:	d101      	bne.n	8013ae8 <dir_next+0xe2>
 8013ae4:	2301      	movs	r3, #1
 8013ae6:	e04f      	b.n	8013b88 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8013ae8:	68f8      	ldr	r0, [r7, #12]
 8013aea:	f7ff fb55 	bl	8013198 <sync_window>
 8013aee:	4603      	mov	r3, r0
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d001      	beq.n	8013af8 <dir_next+0xf2>
 8013af4:	2301      	movs	r3, #1
 8013af6:	e047      	b.n	8013b88 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8013af8:	68fb      	ldr	r3, [r7, #12]
 8013afa:	3330      	adds	r3, #48	; 0x30
 8013afc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013b00:	2100      	movs	r1, #0
 8013b02:	4618      	mov	r0, r3
 8013b04:	f7ff f97f 	bl	8012e06 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013b08:	2300      	movs	r3, #0
 8013b0a:	613b      	str	r3, [r7, #16]
 8013b0c:	6979      	ldr	r1, [r7, #20]
 8013b0e:	68f8      	ldr	r0, [r7, #12]
 8013b10:	f7ff fc22 	bl	8013358 <clust2sect>
 8013b14:	4602      	mov	r2, r0
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	62da      	str	r2, [r3, #44]	; 0x2c
 8013b1a:	e012      	b.n	8013b42 <dir_next+0x13c>
						fs->wflag = 1;
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	2201      	movs	r2, #1
 8013b20:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8013b22:	68f8      	ldr	r0, [r7, #12]
 8013b24:	f7ff fb38 	bl	8013198 <sync_window>
 8013b28:	4603      	mov	r3, r0
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d001      	beq.n	8013b32 <dir_next+0x12c>
 8013b2e:	2301      	movs	r3, #1
 8013b30:	e02a      	b.n	8013b88 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013b32:	693b      	ldr	r3, [r7, #16]
 8013b34:	3301      	adds	r3, #1
 8013b36:	613b      	str	r3, [r7, #16]
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b3c:	1c5a      	adds	r2, r3, #1
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	62da      	str	r2, [r3, #44]	; 0x2c
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	895b      	ldrh	r3, [r3, #10]
 8013b46:	461a      	mov	r2, r3
 8013b48:	693b      	ldr	r3, [r7, #16]
 8013b4a:	4293      	cmp	r3, r2
 8013b4c:	d3e6      	bcc.n	8013b1c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b52:	693b      	ldr	r3, [r7, #16]
 8013b54:	1ad2      	subs	r2, r2, r3
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	697a      	ldr	r2, [r7, #20]
 8013b5e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8013b60:	6979      	ldr	r1, [r7, #20]
 8013b62:	68f8      	ldr	r0, [r7, #12]
 8013b64:	f7ff fbf8 	bl	8013358 <clust2sect>
 8013b68:	4602      	mov	r2, r0
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	68ba      	ldr	r2, [r7, #8]
 8013b72:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013b7a:	68bb      	ldr	r3, [r7, #8]
 8013b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013b80:	441a      	add	r2, r3
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013b86:	2300      	movs	r3, #0
}
 8013b88:	4618      	mov	r0, r3
 8013b8a:	3718      	adds	r7, #24
 8013b8c:	46bd      	mov	sp, r7
 8013b8e:	bd80      	pop	{r7, pc}

08013b90 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8013b90:	b580      	push	{r7, lr}
 8013b92:	b086      	sub	sp, #24
 8013b94:	af00      	add	r7, sp, #0
 8013b96:	6078      	str	r0, [r7, #4]
 8013b98:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8013ba0:	2100      	movs	r1, #0
 8013ba2:	6878      	ldr	r0, [r7, #4]
 8013ba4:	f7ff feb4 	bl	8013910 <dir_sdi>
 8013ba8:	4603      	mov	r3, r0
 8013baa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013bac:	7dfb      	ldrb	r3, [r7, #23]
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d12b      	bne.n	8013c0a <dir_alloc+0x7a>
		n = 0;
 8013bb2:	2300      	movs	r3, #0
 8013bb4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	69db      	ldr	r3, [r3, #28]
 8013bba:	4619      	mov	r1, r3
 8013bbc:	68f8      	ldr	r0, [r7, #12]
 8013bbe:	f7ff fb2f 	bl	8013220 <move_window>
 8013bc2:	4603      	mov	r3, r0
 8013bc4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013bc6:	7dfb      	ldrb	r3, [r7, #23]
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d11d      	bne.n	8013c08 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	6a1b      	ldr	r3, [r3, #32]
 8013bd0:	781b      	ldrb	r3, [r3, #0]
 8013bd2:	2be5      	cmp	r3, #229	; 0xe5
 8013bd4:	d004      	beq.n	8013be0 <dir_alloc+0x50>
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	6a1b      	ldr	r3, [r3, #32]
 8013bda:	781b      	ldrb	r3, [r3, #0]
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d107      	bne.n	8013bf0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8013be0:	693b      	ldr	r3, [r7, #16]
 8013be2:	3301      	adds	r3, #1
 8013be4:	613b      	str	r3, [r7, #16]
 8013be6:	693a      	ldr	r2, [r7, #16]
 8013be8:	683b      	ldr	r3, [r7, #0]
 8013bea:	429a      	cmp	r2, r3
 8013bec:	d102      	bne.n	8013bf4 <dir_alloc+0x64>
 8013bee:	e00c      	b.n	8013c0a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8013bf0:	2300      	movs	r3, #0
 8013bf2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8013bf4:	2101      	movs	r1, #1
 8013bf6:	6878      	ldr	r0, [r7, #4]
 8013bf8:	f7ff ff05 	bl	8013a06 <dir_next>
 8013bfc:	4603      	mov	r3, r0
 8013bfe:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8013c00:	7dfb      	ldrb	r3, [r7, #23]
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d0d7      	beq.n	8013bb6 <dir_alloc+0x26>
 8013c06:	e000      	b.n	8013c0a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8013c08:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8013c0a:	7dfb      	ldrb	r3, [r7, #23]
 8013c0c:	2b04      	cmp	r3, #4
 8013c0e:	d101      	bne.n	8013c14 <dir_alloc+0x84>
 8013c10:	2307      	movs	r3, #7
 8013c12:	75fb      	strb	r3, [r7, #23]
	return res;
 8013c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c16:	4618      	mov	r0, r3
 8013c18:	3718      	adds	r7, #24
 8013c1a:	46bd      	mov	sp, r7
 8013c1c:	bd80      	pop	{r7, pc}

08013c1e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8013c1e:	b580      	push	{r7, lr}
 8013c20:	b084      	sub	sp, #16
 8013c22:	af00      	add	r7, sp, #0
 8013c24:	6078      	str	r0, [r7, #4]
 8013c26:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8013c28:	683b      	ldr	r3, [r7, #0]
 8013c2a:	331a      	adds	r3, #26
 8013c2c:	4618      	mov	r0, r3
 8013c2e:	f7ff f847 	bl	8012cc0 <ld_word>
 8013c32:	4603      	mov	r3, r0
 8013c34:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	781b      	ldrb	r3, [r3, #0]
 8013c3a:	2b03      	cmp	r3, #3
 8013c3c:	d109      	bne.n	8013c52 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8013c3e:	683b      	ldr	r3, [r7, #0]
 8013c40:	3314      	adds	r3, #20
 8013c42:	4618      	mov	r0, r3
 8013c44:	f7ff f83c 	bl	8012cc0 <ld_word>
 8013c48:	4603      	mov	r3, r0
 8013c4a:	041b      	lsls	r3, r3, #16
 8013c4c:	68fa      	ldr	r2, [r7, #12]
 8013c4e:	4313      	orrs	r3, r2
 8013c50:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8013c52:	68fb      	ldr	r3, [r7, #12]
}
 8013c54:	4618      	mov	r0, r3
 8013c56:	3710      	adds	r7, #16
 8013c58:	46bd      	mov	sp, r7
 8013c5a:	bd80      	pop	{r7, pc}

08013c5c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8013c5c:	b580      	push	{r7, lr}
 8013c5e:	b084      	sub	sp, #16
 8013c60:	af00      	add	r7, sp, #0
 8013c62:	60f8      	str	r0, [r7, #12]
 8013c64:	60b9      	str	r1, [r7, #8]
 8013c66:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8013c68:	68bb      	ldr	r3, [r7, #8]
 8013c6a:	331a      	adds	r3, #26
 8013c6c:	687a      	ldr	r2, [r7, #4]
 8013c6e:	b292      	uxth	r2, r2
 8013c70:	4611      	mov	r1, r2
 8013c72:	4618      	mov	r0, r3
 8013c74:	f7ff f85f 	bl	8012d36 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	781b      	ldrb	r3, [r3, #0]
 8013c7c:	2b03      	cmp	r3, #3
 8013c7e:	d109      	bne.n	8013c94 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8013c80:	68bb      	ldr	r3, [r7, #8]
 8013c82:	f103 0214 	add.w	r2, r3, #20
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	0c1b      	lsrs	r3, r3, #16
 8013c8a:	b29b      	uxth	r3, r3
 8013c8c:	4619      	mov	r1, r3
 8013c8e:	4610      	mov	r0, r2
 8013c90:	f7ff f851 	bl	8012d36 <st_word>
	}
}
 8013c94:	bf00      	nop
 8013c96:	3710      	adds	r7, #16
 8013c98:	46bd      	mov	sp, r7
 8013c9a:	bd80      	pop	{r7, pc}

08013c9c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8013c9c:	b580      	push	{r7, lr}
 8013c9e:	b086      	sub	sp, #24
 8013ca0:	af00      	add	r7, sp, #0
 8013ca2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8013caa:	2100      	movs	r1, #0
 8013cac:	6878      	ldr	r0, [r7, #4]
 8013cae:	f7ff fe2f 	bl	8013910 <dir_sdi>
 8013cb2:	4603      	mov	r3, r0
 8013cb4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8013cb6:	7dfb      	ldrb	r3, [r7, #23]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d001      	beq.n	8013cc0 <dir_find+0x24>
 8013cbc:	7dfb      	ldrb	r3, [r7, #23]
 8013cbe:	e03e      	b.n	8013d3e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	69db      	ldr	r3, [r3, #28]
 8013cc4:	4619      	mov	r1, r3
 8013cc6:	6938      	ldr	r0, [r7, #16]
 8013cc8:	f7ff faaa 	bl	8013220 <move_window>
 8013ccc:	4603      	mov	r3, r0
 8013cce:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013cd0:	7dfb      	ldrb	r3, [r7, #23]
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d12f      	bne.n	8013d36 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	6a1b      	ldr	r3, [r3, #32]
 8013cda:	781b      	ldrb	r3, [r3, #0]
 8013cdc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8013cde:	7bfb      	ldrb	r3, [r7, #15]
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d102      	bne.n	8013cea <dir_find+0x4e>
 8013ce4:	2304      	movs	r3, #4
 8013ce6:	75fb      	strb	r3, [r7, #23]
 8013ce8:	e028      	b.n	8013d3c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	6a1b      	ldr	r3, [r3, #32]
 8013cee:	330b      	adds	r3, #11
 8013cf0:	781b      	ldrb	r3, [r3, #0]
 8013cf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013cf6:	b2da      	uxtb	r2, r3
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	6a1b      	ldr	r3, [r3, #32]
 8013d00:	330b      	adds	r3, #11
 8013d02:	781b      	ldrb	r3, [r3, #0]
 8013d04:	f003 0308 	and.w	r3, r3, #8
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d10a      	bne.n	8013d22 <dir_find+0x86>
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	6a18      	ldr	r0, [r3, #32]
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	3324      	adds	r3, #36	; 0x24
 8013d14:	220b      	movs	r2, #11
 8013d16:	4619      	mov	r1, r3
 8013d18:	f7ff f88f 	bl	8012e3a <mem_cmp>
 8013d1c:	4603      	mov	r3, r0
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d00b      	beq.n	8013d3a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8013d22:	2100      	movs	r1, #0
 8013d24:	6878      	ldr	r0, [r7, #4]
 8013d26:	f7ff fe6e 	bl	8013a06 <dir_next>
 8013d2a:	4603      	mov	r3, r0
 8013d2c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8013d2e:	7dfb      	ldrb	r3, [r7, #23]
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d0c5      	beq.n	8013cc0 <dir_find+0x24>
 8013d34:	e002      	b.n	8013d3c <dir_find+0xa0>
		if (res != FR_OK) break;
 8013d36:	bf00      	nop
 8013d38:	e000      	b.n	8013d3c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8013d3a:	bf00      	nop

	return res;
 8013d3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d3e:	4618      	mov	r0, r3
 8013d40:	3718      	adds	r7, #24
 8013d42:	46bd      	mov	sp, r7
 8013d44:	bd80      	pop	{r7, pc}

08013d46 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8013d46:	b580      	push	{r7, lr}
 8013d48:	b084      	sub	sp, #16
 8013d4a:	af00      	add	r7, sp, #0
 8013d4c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8013d54:	2101      	movs	r1, #1
 8013d56:	6878      	ldr	r0, [r7, #4]
 8013d58:	f7ff ff1a 	bl	8013b90 <dir_alloc>
 8013d5c:	4603      	mov	r3, r0
 8013d5e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8013d60:	7bfb      	ldrb	r3, [r7, #15]
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d11c      	bne.n	8013da0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	69db      	ldr	r3, [r3, #28]
 8013d6a:	4619      	mov	r1, r3
 8013d6c:	68b8      	ldr	r0, [r7, #8]
 8013d6e:	f7ff fa57 	bl	8013220 <move_window>
 8013d72:	4603      	mov	r3, r0
 8013d74:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013d76:	7bfb      	ldrb	r3, [r7, #15]
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d111      	bne.n	8013da0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	6a1b      	ldr	r3, [r3, #32]
 8013d80:	2220      	movs	r2, #32
 8013d82:	2100      	movs	r1, #0
 8013d84:	4618      	mov	r0, r3
 8013d86:	f7ff f83e 	bl	8012e06 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	6a18      	ldr	r0, [r3, #32]
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	3324      	adds	r3, #36	; 0x24
 8013d92:	220b      	movs	r2, #11
 8013d94:	4619      	mov	r1, r3
 8013d96:	f7ff f815 	bl	8012dc4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8013d9a:	68bb      	ldr	r3, [r7, #8]
 8013d9c:	2201      	movs	r2, #1
 8013d9e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8013da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8013da2:	4618      	mov	r0, r3
 8013da4:	3710      	adds	r7, #16
 8013da6:	46bd      	mov	sp, r7
 8013da8:	bd80      	pop	{r7, pc}
	...

08013dac <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8013dac:	b580      	push	{r7, lr}
 8013dae:	b088      	sub	sp, #32
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	6078      	str	r0, [r7, #4]
 8013db4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8013db6:	683b      	ldr	r3, [r7, #0]
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	60fb      	str	r3, [r7, #12]
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	3324      	adds	r3, #36	; 0x24
 8013dc0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8013dc2:	220b      	movs	r2, #11
 8013dc4:	2120      	movs	r1, #32
 8013dc6:	68b8      	ldr	r0, [r7, #8]
 8013dc8:	f7ff f81d 	bl	8012e06 <mem_set>
	si = i = 0; ni = 8;
 8013dcc:	2300      	movs	r3, #0
 8013dce:	613b      	str	r3, [r7, #16]
 8013dd0:	693b      	ldr	r3, [r7, #16]
 8013dd2:	617b      	str	r3, [r7, #20]
 8013dd4:	2308      	movs	r3, #8
 8013dd6:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8013dd8:	697b      	ldr	r3, [r7, #20]
 8013dda:	1c5a      	adds	r2, r3, #1
 8013ddc:	617a      	str	r2, [r7, #20]
 8013dde:	68fa      	ldr	r2, [r7, #12]
 8013de0:	4413      	add	r3, r2
 8013de2:	781b      	ldrb	r3, [r3, #0]
 8013de4:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8013de6:	7ffb      	ldrb	r3, [r7, #31]
 8013de8:	2b20      	cmp	r3, #32
 8013dea:	d94e      	bls.n	8013e8a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8013dec:	7ffb      	ldrb	r3, [r7, #31]
 8013dee:	2b2f      	cmp	r3, #47	; 0x2f
 8013df0:	d006      	beq.n	8013e00 <create_name+0x54>
 8013df2:	7ffb      	ldrb	r3, [r7, #31]
 8013df4:	2b5c      	cmp	r3, #92	; 0x5c
 8013df6:	d110      	bne.n	8013e1a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8013df8:	e002      	b.n	8013e00 <create_name+0x54>
 8013dfa:	697b      	ldr	r3, [r7, #20]
 8013dfc:	3301      	adds	r3, #1
 8013dfe:	617b      	str	r3, [r7, #20]
 8013e00:	68fa      	ldr	r2, [r7, #12]
 8013e02:	697b      	ldr	r3, [r7, #20]
 8013e04:	4413      	add	r3, r2
 8013e06:	781b      	ldrb	r3, [r3, #0]
 8013e08:	2b2f      	cmp	r3, #47	; 0x2f
 8013e0a:	d0f6      	beq.n	8013dfa <create_name+0x4e>
 8013e0c:	68fa      	ldr	r2, [r7, #12]
 8013e0e:	697b      	ldr	r3, [r7, #20]
 8013e10:	4413      	add	r3, r2
 8013e12:	781b      	ldrb	r3, [r3, #0]
 8013e14:	2b5c      	cmp	r3, #92	; 0x5c
 8013e16:	d0f0      	beq.n	8013dfa <create_name+0x4e>
			break;
 8013e18:	e038      	b.n	8013e8c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8013e1a:	7ffb      	ldrb	r3, [r7, #31]
 8013e1c:	2b2e      	cmp	r3, #46	; 0x2e
 8013e1e:	d003      	beq.n	8013e28 <create_name+0x7c>
 8013e20:	693a      	ldr	r2, [r7, #16]
 8013e22:	69bb      	ldr	r3, [r7, #24]
 8013e24:	429a      	cmp	r2, r3
 8013e26:	d30c      	bcc.n	8013e42 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8013e28:	69bb      	ldr	r3, [r7, #24]
 8013e2a:	2b0b      	cmp	r3, #11
 8013e2c:	d002      	beq.n	8013e34 <create_name+0x88>
 8013e2e:	7ffb      	ldrb	r3, [r7, #31]
 8013e30:	2b2e      	cmp	r3, #46	; 0x2e
 8013e32:	d001      	beq.n	8013e38 <create_name+0x8c>
 8013e34:	2306      	movs	r3, #6
 8013e36:	e044      	b.n	8013ec2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8013e38:	2308      	movs	r3, #8
 8013e3a:	613b      	str	r3, [r7, #16]
 8013e3c:	230b      	movs	r3, #11
 8013e3e:	61bb      	str	r3, [r7, #24]
			continue;
 8013e40:	e022      	b.n	8013e88 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8013e42:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	da04      	bge.n	8013e54 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8013e4a:	7ffb      	ldrb	r3, [r7, #31]
 8013e4c:	3b80      	subs	r3, #128	; 0x80
 8013e4e:	4a1f      	ldr	r2, [pc, #124]	; (8013ecc <create_name+0x120>)
 8013e50:	5cd3      	ldrb	r3, [r2, r3]
 8013e52:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8013e54:	7ffb      	ldrb	r3, [r7, #31]
 8013e56:	4619      	mov	r1, r3
 8013e58:	481d      	ldr	r0, [pc, #116]	; (8013ed0 <create_name+0x124>)
 8013e5a:	f7ff f815 	bl	8012e88 <chk_chr>
 8013e5e:	4603      	mov	r3, r0
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d001      	beq.n	8013e68 <create_name+0xbc>
 8013e64:	2306      	movs	r3, #6
 8013e66:	e02c      	b.n	8013ec2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8013e68:	7ffb      	ldrb	r3, [r7, #31]
 8013e6a:	2b60      	cmp	r3, #96	; 0x60
 8013e6c:	d905      	bls.n	8013e7a <create_name+0xce>
 8013e6e:	7ffb      	ldrb	r3, [r7, #31]
 8013e70:	2b7a      	cmp	r3, #122	; 0x7a
 8013e72:	d802      	bhi.n	8013e7a <create_name+0xce>
 8013e74:	7ffb      	ldrb	r3, [r7, #31]
 8013e76:	3b20      	subs	r3, #32
 8013e78:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8013e7a:	693b      	ldr	r3, [r7, #16]
 8013e7c:	1c5a      	adds	r2, r3, #1
 8013e7e:	613a      	str	r2, [r7, #16]
 8013e80:	68ba      	ldr	r2, [r7, #8]
 8013e82:	4413      	add	r3, r2
 8013e84:	7ffa      	ldrb	r2, [r7, #31]
 8013e86:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8013e88:	e7a6      	b.n	8013dd8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8013e8a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8013e8c:	68fa      	ldr	r2, [r7, #12]
 8013e8e:	697b      	ldr	r3, [r7, #20]
 8013e90:	441a      	add	r2, r3
 8013e92:	683b      	ldr	r3, [r7, #0]
 8013e94:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8013e96:	693b      	ldr	r3, [r7, #16]
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d101      	bne.n	8013ea0 <create_name+0xf4>
 8013e9c:	2306      	movs	r3, #6
 8013e9e:	e010      	b.n	8013ec2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8013ea0:	68bb      	ldr	r3, [r7, #8]
 8013ea2:	781b      	ldrb	r3, [r3, #0]
 8013ea4:	2be5      	cmp	r3, #229	; 0xe5
 8013ea6:	d102      	bne.n	8013eae <create_name+0x102>
 8013ea8:	68bb      	ldr	r3, [r7, #8]
 8013eaa:	2205      	movs	r2, #5
 8013eac:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8013eae:	7ffb      	ldrb	r3, [r7, #31]
 8013eb0:	2b20      	cmp	r3, #32
 8013eb2:	d801      	bhi.n	8013eb8 <create_name+0x10c>
 8013eb4:	2204      	movs	r2, #4
 8013eb6:	e000      	b.n	8013eba <create_name+0x10e>
 8013eb8:	2200      	movs	r2, #0
 8013eba:	68bb      	ldr	r3, [r7, #8]
 8013ebc:	330b      	adds	r3, #11
 8013ebe:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8013ec0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8013ec2:	4618      	mov	r0, r3
 8013ec4:	3720      	adds	r7, #32
 8013ec6:	46bd      	mov	sp, r7
 8013ec8:	bd80      	pop	{r7, pc}
 8013eca:	bf00      	nop
 8013ecc:	080170f4 	.word	0x080170f4
 8013ed0:	08017018 	.word	0x08017018

08013ed4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8013ed4:	b580      	push	{r7, lr}
 8013ed6:	b086      	sub	sp, #24
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	6078      	str	r0, [r7, #4]
 8013edc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8013ee2:	693b      	ldr	r3, [r7, #16]
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8013ee8:	e002      	b.n	8013ef0 <follow_path+0x1c>
 8013eea:	683b      	ldr	r3, [r7, #0]
 8013eec:	3301      	adds	r3, #1
 8013eee:	603b      	str	r3, [r7, #0]
 8013ef0:	683b      	ldr	r3, [r7, #0]
 8013ef2:	781b      	ldrb	r3, [r3, #0]
 8013ef4:	2b2f      	cmp	r3, #47	; 0x2f
 8013ef6:	d0f8      	beq.n	8013eea <follow_path+0x16>
 8013ef8:	683b      	ldr	r3, [r7, #0]
 8013efa:	781b      	ldrb	r3, [r3, #0]
 8013efc:	2b5c      	cmp	r3, #92	; 0x5c
 8013efe:	d0f4      	beq.n	8013eea <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8013f00:	693b      	ldr	r3, [r7, #16]
 8013f02:	2200      	movs	r2, #0
 8013f04:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8013f06:	683b      	ldr	r3, [r7, #0]
 8013f08:	781b      	ldrb	r3, [r3, #0]
 8013f0a:	2b1f      	cmp	r3, #31
 8013f0c:	d80a      	bhi.n	8013f24 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	2280      	movs	r2, #128	; 0x80
 8013f12:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8013f16:	2100      	movs	r1, #0
 8013f18:	6878      	ldr	r0, [r7, #4]
 8013f1a:	f7ff fcf9 	bl	8013910 <dir_sdi>
 8013f1e:	4603      	mov	r3, r0
 8013f20:	75fb      	strb	r3, [r7, #23]
 8013f22:	e043      	b.n	8013fac <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013f24:	463b      	mov	r3, r7
 8013f26:	4619      	mov	r1, r3
 8013f28:	6878      	ldr	r0, [r7, #4]
 8013f2a:	f7ff ff3f 	bl	8013dac <create_name>
 8013f2e:	4603      	mov	r3, r0
 8013f30:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013f32:	7dfb      	ldrb	r3, [r7, #23]
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d134      	bne.n	8013fa2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8013f38:	6878      	ldr	r0, [r7, #4]
 8013f3a:	f7ff feaf 	bl	8013c9c <dir_find>
 8013f3e:	4603      	mov	r3, r0
 8013f40:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013f48:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8013f4a:	7dfb      	ldrb	r3, [r7, #23]
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d00a      	beq.n	8013f66 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8013f50:	7dfb      	ldrb	r3, [r7, #23]
 8013f52:	2b04      	cmp	r3, #4
 8013f54:	d127      	bne.n	8013fa6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8013f56:	7afb      	ldrb	r3, [r7, #11]
 8013f58:	f003 0304 	and.w	r3, r3, #4
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d122      	bne.n	8013fa6 <follow_path+0xd2>
 8013f60:	2305      	movs	r3, #5
 8013f62:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8013f64:	e01f      	b.n	8013fa6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013f66:	7afb      	ldrb	r3, [r7, #11]
 8013f68:	f003 0304 	and.w	r3, r3, #4
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d11c      	bne.n	8013faa <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8013f70:	693b      	ldr	r3, [r7, #16]
 8013f72:	799b      	ldrb	r3, [r3, #6]
 8013f74:	f003 0310 	and.w	r3, r3, #16
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d102      	bne.n	8013f82 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8013f7c:	2305      	movs	r3, #5
 8013f7e:	75fb      	strb	r3, [r7, #23]
 8013f80:	e014      	b.n	8013fac <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	695b      	ldr	r3, [r3, #20]
 8013f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013f90:	4413      	add	r3, r2
 8013f92:	4619      	mov	r1, r3
 8013f94:	68f8      	ldr	r0, [r7, #12]
 8013f96:	f7ff fe42 	bl	8013c1e <ld_clust>
 8013f9a:	4602      	mov	r2, r0
 8013f9c:	693b      	ldr	r3, [r7, #16]
 8013f9e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013fa0:	e7c0      	b.n	8013f24 <follow_path+0x50>
			if (res != FR_OK) break;
 8013fa2:	bf00      	nop
 8013fa4:	e002      	b.n	8013fac <follow_path+0xd8>
				break;
 8013fa6:	bf00      	nop
 8013fa8:	e000      	b.n	8013fac <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013faa:	bf00      	nop
			}
		}
	}

	return res;
 8013fac:	7dfb      	ldrb	r3, [r7, #23]
}
 8013fae:	4618      	mov	r0, r3
 8013fb0:	3718      	adds	r7, #24
 8013fb2:	46bd      	mov	sp, r7
 8013fb4:	bd80      	pop	{r7, pc}

08013fb6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8013fb6:	b480      	push	{r7}
 8013fb8:	b087      	sub	sp, #28
 8013fba:	af00      	add	r7, sp, #0
 8013fbc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8013fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8013fc2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d031      	beq.n	8014030 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	681b      	ldr	r3, [r3, #0]
 8013fd0:	617b      	str	r3, [r7, #20]
 8013fd2:	e002      	b.n	8013fda <get_ldnumber+0x24>
 8013fd4:	697b      	ldr	r3, [r7, #20]
 8013fd6:	3301      	adds	r3, #1
 8013fd8:	617b      	str	r3, [r7, #20]
 8013fda:	697b      	ldr	r3, [r7, #20]
 8013fdc:	781b      	ldrb	r3, [r3, #0]
 8013fde:	2b20      	cmp	r3, #32
 8013fe0:	d903      	bls.n	8013fea <get_ldnumber+0x34>
 8013fe2:	697b      	ldr	r3, [r7, #20]
 8013fe4:	781b      	ldrb	r3, [r3, #0]
 8013fe6:	2b3a      	cmp	r3, #58	; 0x3a
 8013fe8:	d1f4      	bne.n	8013fd4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8013fea:	697b      	ldr	r3, [r7, #20]
 8013fec:	781b      	ldrb	r3, [r3, #0]
 8013fee:	2b3a      	cmp	r3, #58	; 0x3a
 8013ff0:	d11c      	bne.n	801402c <get_ldnumber+0x76>
			tp = *path;
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	1c5a      	adds	r2, r3, #1
 8013ffc:	60fa      	str	r2, [r7, #12]
 8013ffe:	781b      	ldrb	r3, [r3, #0]
 8014000:	3b30      	subs	r3, #48	; 0x30
 8014002:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8014004:	68bb      	ldr	r3, [r7, #8]
 8014006:	2b09      	cmp	r3, #9
 8014008:	d80e      	bhi.n	8014028 <get_ldnumber+0x72>
 801400a:	68fa      	ldr	r2, [r7, #12]
 801400c:	697b      	ldr	r3, [r7, #20]
 801400e:	429a      	cmp	r2, r3
 8014010:	d10a      	bne.n	8014028 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8014012:	68bb      	ldr	r3, [r7, #8]
 8014014:	2b00      	cmp	r3, #0
 8014016:	d107      	bne.n	8014028 <get_ldnumber+0x72>
					vol = (int)i;
 8014018:	68bb      	ldr	r3, [r7, #8]
 801401a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801401c:	697b      	ldr	r3, [r7, #20]
 801401e:	3301      	adds	r3, #1
 8014020:	617b      	str	r3, [r7, #20]
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	697a      	ldr	r2, [r7, #20]
 8014026:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8014028:	693b      	ldr	r3, [r7, #16]
 801402a:	e002      	b.n	8014032 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801402c:	2300      	movs	r3, #0
 801402e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8014030:	693b      	ldr	r3, [r7, #16]
}
 8014032:	4618      	mov	r0, r3
 8014034:	371c      	adds	r7, #28
 8014036:	46bd      	mov	sp, r7
 8014038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801403c:	4770      	bx	lr
	...

08014040 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8014040:	b580      	push	{r7, lr}
 8014042:	b082      	sub	sp, #8
 8014044:	af00      	add	r7, sp, #0
 8014046:	6078      	str	r0, [r7, #4]
 8014048:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	2200      	movs	r2, #0
 801404e:	70da      	strb	r2, [r3, #3]
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	f04f 32ff 	mov.w	r2, #4294967295
 8014056:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8014058:	6839      	ldr	r1, [r7, #0]
 801405a:	6878      	ldr	r0, [r7, #4]
 801405c:	f7ff f8e0 	bl	8013220 <move_window>
 8014060:	4603      	mov	r3, r0
 8014062:	2b00      	cmp	r3, #0
 8014064:	d001      	beq.n	801406a <check_fs+0x2a>
 8014066:	2304      	movs	r3, #4
 8014068:	e038      	b.n	80140dc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	3330      	adds	r3, #48	; 0x30
 801406e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014072:	4618      	mov	r0, r3
 8014074:	f7fe fe24 	bl	8012cc0 <ld_word>
 8014078:	4603      	mov	r3, r0
 801407a:	461a      	mov	r2, r3
 801407c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8014080:	429a      	cmp	r2, r3
 8014082:	d001      	beq.n	8014088 <check_fs+0x48>
 8014084:	2303      	movs	r3, #3
 8014086:	e029      	b.n	80140dc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801408e:	2be9      	cmp	r3, #233	; 0xe9
 8014090:	d009      	beq.n	80140a6 <check_fs+0x66>
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014098:	2beb      	cmp	r3, #235	; 0xeb
 801409a:	d11e      	bne.n	80140da <check_fs+0x9a>
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80140a2:	2b90      	cmp	r3, #144	; 0x90
 80140a4:	d119      	bne.n	80140da <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	3330      	adds	r3, #48	; 0x30
 80140aa:	3336      	adds	r3, #54	; 0x36
 80140ac:	4618      	mov	r0, r3
 80140ae:	f7fe fe1f 	bl	8012cf0 <ld_dword>
 80140b2:	4603      	mov	r3, r0
 80140b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80140b8:	4a0a      	ldr	r2, [pc, #40]	; (80140e4 <check_fs+0xa4>)
 80140ba:	4293      	cmp	r3, r2
 80140bc:	d101      	bne.n	80140c2 <check_fs+0x82>
 80140be:	2300      	movs	r3, #0
 80140c0:	e00c      	b.n	80140dc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	3330      	adds	r3, #48	; 0x30
 80140c6:	3352      	adds	r3, #82	; 0x52
 80140c8:	4618      	mov	r0, r3
 80140ca:	f7fe fe11 	bl	8012cf0 <ld_dword>
 80140ce:	4602      	mov	r2, r0
 80140d0:	4b05      	ldr	r3, [pc, #20]	; (80140e8 <check_fs+0xa8>)
 80140d2:	429a      	cmp	r2, r3
 80140d4:	d101      	bne.n	80140da <check_fs+0x9a>
 80140d6:	2300      	movs	r3, #0
 80140d8:	e000      	b.n	80140dc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80140da:	2302      	movs	r3, #2
}
 80140dc:	4618      	mov	r0, r3
 80140de:	3708      	adds	r7, #8
 80140e0:	46bd      	mov	sp, r7
 80140e2:	bd80      	pop	{r7, pc}
 80140e4:	00544146 	.word	0x00544146
 80140e8:	33544146 	.word	0x33544146

080140ec <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80140ec:	b580      	push	{r7, lr}
 80140ee:	b096      	sub	sp, #88	; 0x58
 80140f0:	af00      	add	r7, sp, #0
 80140f2:	60f8      	str	r0, [r7, #12]
 80140f4:	60b9      	str	r1, [r7, #8]
 80140f6:	4613      	mov	r3, r2
 80140f8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80140fa:	68bb      	ldr	r3, [r7, #8]
 80140fc:	2200      	movs	r2, #0
 80140fe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8014100:	68f8      	ldr	r0, [r7, #12]
 8014102:	f7ff ff58 	bl	8013fb6 <get_ldnumber>
 8014106:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8014108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801410a:	2b00      	cmp	r3, #0
 801410c:	da01      	bge.n	8014112 <find_volume+0x26>
 801410e:	230b      	movs	r3, #11
 8014110:	e22e      	b.n	8014570 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8014112:	4aa8      	ldr	r2, [pc, #672]	; (80143b4 <find_volume+0x2c8>)
 8014114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801411a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801411c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801411e:	2b00      	cmp	r3, #0
 8014120:	d101      	bne.n	8014126 <find_volume+0x3a>
 8014122:	230c      	movs	r3, #12
 8014124:	e224      	b.n	8014570 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8014126:	68bb      	ldr	r3, [r7, #8]
 8014128:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801412a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801412c:	79fb      	ldrb	r3, [r7, #7]
 801412e:	f023 0301 	bic.w	r3, r3, #1
 8014132:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8014134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014136:	781b      	ldrb	r3, [r3, #0]
 8014138:	2b00      	cmp	r3, #0
 801413a:	d01a      	beq.n	8014172 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801413c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801413e:	785b      	ldrb	r3, [r3, #1]
 8014140:	4618      	mov	r0, r3
 8014142:	f7fe fd1f 	bl	8012b84 <disk_status>
 8014146:	4603      	mov	r3, r0
 8014148:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801414c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014150:	f003 0301 	and.w	r3, r3, #1
 8014154:	2b00      	cmp	r3, #0
 8014156:	d10c      	bne.n	8014172 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8014158:	79fb      	ldrb	r3, [r7, #7]
 801415a:	2b00      	cmp	r3, #0
 801415c:	d007      	beq.n	801416e <find_volume+0x82>
 801415e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014162:	f003 0304 	and.w	r3, r3, #4
 8014166:	2b00      	cmp	r3, #0
 8014168:	d001      	beq.n	801416e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801416a:	230a      	movs	r3, #10
 801416c:	e200      	b.n	8014570 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 801416e:	2300      	movs	r3, #0
 8014170:	e1fe      	b.n	8014570 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8014172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014174:	2200      	movs	r2, #0
 8014176:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8014178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801417a:	b2da      	uxtb	r2, r3
 801417c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801417e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8014180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014182:	785b      	ldrb	r3, [r3, #1]
 8014184:	4618      	mov	r0, r3
 8014186:	f7fe fd17 	bl	8012bb8 <disk_initialize>
 801418a:	4603      	mov	r3, r0
 801418c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8014190:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014194:	f003 0301 	and.w	r3, r3, #1
 8014198:	2b00      	cmp	r3, #0
 801419a:	d001      	beq.n	80141a0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801419c:	2303      	movs	r3, #3
 801419e:	e1e7      	b.n	8014570 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80141a0:	79fb      	ldrb	r3, [r7, #7]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d007      	beq.n	80141b6 <find_volume+0xca>
 80141a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80141aa:	f003 0304 	and.w	r3, r3, #4
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d001      	beq.n	80141b6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80141b2:	230a      	movs	r3, #10
 80141b4:	e1dc      	b.n	8014570 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80141b6:	2300      	movs	r3, #0
 80141b8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80141ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80141bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80141be:	f7ff ff3f 	bl	8014040 <check_fs>
 80141c2:	4603      	mov	r3, r0
 80141c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80141c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80141cc:	2b02      	cmp	r3, #2
 80141ce:	d14b      	bne.n	8014268 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80141d0:	2300      	movs	r3, #0
 80141d2:	643b      	str	r3, [r7, #64]	; 0x40
 80141d4:	e01f      	b.n	8014216 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80141d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80141dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80141de:	011b      	lsls	r3, r3, #4
 80141e0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80141e4:	4413      	add	r3, r2
 80141e6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80141e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141ea:	3304      	adds	r3, #4
 80141ec:	781b      	ldrb	r3, [r3, #0]
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d006      	beq.n	8014200 <find_volume+0x114>
 80141f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141f4:	3308      	adds	r3, #8
 80141f6:	4618      	mov	r0, r3
 80141f8:	f7fe fd7a 	bl	8012cf0 <ld_dword>
 80141fc:	4602      	mov	r2, r0
 80141fe:	e000      	b.n	8014202 <find_volume+0x116>
 8014200:	2200      	movs	r2, #0
 8014202:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014204:	009b      	lsls	r3, r3, #2
 8014206:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801420a:	440b      	add	r3, r1
 801420c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014210:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014212:	3301      	adds	r3, #1
 8014214:	643b      	str	r3, [r7, #64]	; 0x40
 8014216:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014218:	2b03      	cmp	r3, #3
 801421a:	d9dc      	bls.n	80141d6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801421c:	2300      	movs	r3, #0
 801421e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8014220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014222:	2b00      	cmp	r3, #0
 8014224:	d002      	beq.n	801422c <find_volume+0x140>
 8014226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014228:	3b01      	subs	r3, #1
 801422a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801422c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801422e:	009b      	lsls	r3, r3, #2
 8014230:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8014234:	4413      	add	r3, r2
 8014236:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801423a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801423c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801423e:	2b00      	cmp	r3, #0
 8014240:	d005      	beq.n	801424e <find_volume+0x162>
 8014242:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014244:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014246:	f7ff fefb 	bl	8014040 <check_fs>
 801424a:	4603      	mov	r3, r0
 801424c:	e000      	b.n	8014250 <find_volume+0x164>
 801424e:	2303      	movs	r3, #3
 8014250:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8014254:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014258:	2b01      	cmp	r3, #1
 801425a:	d905      	bls.n	8014268 <find_volume+0x17c>
 801425c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801425e:	3301      	adds	r3, #1
 8014260:	643b      	str	r3, [r7, #64]	; 0x40
 8014262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014264:	2b03      	cmp	r3, #3
 8014266:	d9e1      	bls.n	801422c <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8014268:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801426c:	2b04      	cmp	r3, #4
 801426e:	d101      	bne.n	8014274 <find_volume+0x188>
 8014270:	2301      	movs	r3, #1
 8014272:	e17d      	b.n	8014570 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8014274:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014278:	2b01      	cmp	r3, #1
 801427a:	d901      	bls.n	8014280 <find_volume+0x194>
 801427c:	230d      	movs	r3, #13
 801427e:	e177      	b.n	8014570 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8014280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014282:	3330      	adds	r3, #48	; 0x30
 8014284:	330b      	adds	r3, #11
 8014286:	4618      	mov	r0, r3
 8014288:	f7fe fd1a 	bl	8012cc0 <ld_word>
 801428c:	4603      	mov	r3, r0
 801428e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014292:	d001      	beq.n	8014298 <find_volume+0x1ac>
 8014294:	230d      	movs	r3, #13
 8014296:	e16b      	b.n	8014570 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8014298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801429a:	3330      	adds	r3, #48	; 0x30
 801429c:	3316      	adds	r3, #22
 801429e:	4618      	mov	r0, r3
 80142a0:	f7fe fd0e 	bl	8012cc0 <ld_word>
 80142a4:	4603      	mov	r3, r0
 80142a6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80142a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d106      	bne.n	80142bc <find_volume+0x1d0>
 80142ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142b0:	3330      	adds	r3, #48	; 0x30
 80142b2:	3324      	adds	r3, #36	; 0x24
 80142b4:	4618      	mov	r0, r3
 80142b6:	f7fe fd1b 	bl	8012cf0 <ld_dword>
 80142ba:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80142bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80142c0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80142c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142c4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80142c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142ca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80142cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142ce:	789b      	ldrb	r3, [r3, #2]
 80142d0:	2b01      	cmp	r3, #1
 80142d2:	d005      	beq.n	80142e0 <find_volume+0x1f4>
 80142d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142d6:	789b      	ldrb	r3, [r3, #2]
 80142d8:	2b02      	cmp	r3, #2
 80142da:	d001      	beq.n	80142e0 <find_volume+0x1f4>
 80142dc:	230d      	movs	r3, #13
 80142de:	e147      	b.n	8014570 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80142e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142e2:	789b      	ldrb	r3, [r3, #2]
 80142e4:	461a      	mov	r2, r3
 80142e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142e8:	fb02 f303 	mul.w	r3, r2, r3
 80142ec:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80142ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80142f4:	b29a      	uxth	r2, r3
 80142f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142f8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80142fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142fc:	895b      	ldrh	r3, [r3, #10]
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d008      	beq.n	8014314 <find_volume+0x228>
 8014302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014304:	895b      	ldrh	r3, [r3, #10]
 8014306:	461a      	mov	r2, r3
 8014308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801430a:	895b      	ldrh	r3, [r3, #10]
 801430c:	3b01      	subs	r3, #1
 801430e:	4013      	ands	r3, r2
 8014310:	2b00      	cmp	r3, #0
 8014312:	d001      	beq.n	8014318 <find_volume+0x22c>
 8014314:	230d      	movs	r3, #13
 8014316:	e12b      	b.n	8014570 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8014318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801431a:	3330      	adds	r3, #48	; 0x30
 801431c:	3311      	adds	r3, #17
 801431e:	4618      	mov	r0, r3
 8014320:	f7fe fcce 	bl	8012cc0 <ld_word>
 8014324:	4603      	mov	r3, r0
 8014326:	461a      	mov	r2, r3
 8014328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801432a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801432c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801432e:	891b      	ldrh	r3, [r3, #8]
 8014330:	f003 030f 	and.w	r3, r3, #15
 8014334:	b29b      	uxth	r3, r3
 8014336:	2b00      	cmp	r3, #0
 8014338:	d001      	beq.n	801433e <find_volume+0x252>
 801433a:	230d      	movs	r3, #13
 801433c:	e118      	b.n	8014570 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801433e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014340:	3330      	adds	r3, #48	; 0x30
 8014342:	3313      	adds	r3, #19
 8014344:	4618      	mov	r0, r3
 8014346:	f7fe fcbb 	bl	8012cc0 <ld_word>
 801434a:	4603      	mov	r3, r0
 801434c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801434e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014350:	2b00      	cmp	r3, #0
 8014352:	d106      	bne.n	8014362 <find_volume+0x276>
 8014354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014356:	3330      	adds	r3, #48	; 0x30
 8014358:	3320      	adds	r3, #32
 801435a:	4618      	mov	r0, r3
 801435c:	f7fe fcc8 	bl	8012cf0 <ld_dword>
 8014360:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8014362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014364:	3330      	adds	r3, #48	; 0x30
 8014366:	330e      	adds	r3, #14
 8014368:	4618      	mov	r0, r3
 801436a:	f7fe fca9 	bl	8012cc0 <ld_word>
 801436e:	4603      	mov	r3, r0
 8014370:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8014372:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014374:	2b00      	cmp	r3, #0
 8014376:	d101      	bne.n	801437c <find_volume+0x290>
 8014378:	230d      	movs	r3, #13
 801437a:	e0f9      	b.n	8014570 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801437c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801437e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014380:	4413      	add	r3, r2
 8014382:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014384:	8912      	ldrh	r2, [r2, #8]
 8014386:	0912      	lsrs	r2, r2, #4
 8014388:	b292      	uxth	r2, r2
 801438a:	4413      	add	r3, r2
 801438c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801438e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014392:	429a      	cmp	r2, r3
 8014394:	d201      	bcs.n	801439a <find_volume+0x2ae>
 8014396:	230d      	movs	r3, #13
 8014398:	e0ea      	b.n	8014570 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801439a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801439c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801439e:	1ad3      	subs	r3, r2, r3
 80143a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80143a2:	8952      	ldrh	r2, [r2, #10]
 80143a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80143a8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80143aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d103      	bne.n	80143b8 <find_volume+0x2cc>
 80143b0:	230d      	movs	r3, #13
 80143b2:	e0dd      	b.n	8014570 <find_volume+0x484>
 80143b4:	24000a08 	.word	0x24000a08
		fmt = FS_FAT32;
 80143b8:	2303      	movs	r3, #3
 80143ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80143be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143c0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80143c4:	4293      	cmp	r3, r2
 80143c6:	d802      	bhi.n	80143ce <find_volume+0x2e2>
 80143c8:	2302      	movs	r3, #2
 80143ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80143ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143d0:	f640 72f5 	movw	r2, #4085	; 0xff5
 80143d4:	4293      	cmp	r3, r2
 80143d6:	d802      	bhi.n	80143de <find_volume+0x2f2>
 80143d8:	2301      	movs	r3, #1
 80143da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80143de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143e0:	1c9a      	adds	r2, r3, #2
 80143e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143e4:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80143e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80143ea:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80143ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80143ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80143f0:	441a      	add	r2, r3
 80143f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143f4:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80143f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80143f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143fa:	441a      	add	r2, r3
 80143fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143fe:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8014400:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014404:	2b03      	cmp	r3, #3
 8014406:	d11e      	bne.n	8014446 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8014408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801440a:	3330      	adds	r3, #48	; 0x30
 801440c:	332a      	adds	r3, #42	; 0x2a
 801440e:	4618      	mov	r0, r3
 8014410:	f7fe fc56 	bl	8012cc0 <ld_word>
 8014414:	4603      	mov	r3, r0
 8014416:	2b00      	cmp	r3, #0
 8014418:	d001      	beq.n	801441e <find_volume+0x332>
 801441a:	230d      	movs	r3, #13
 801441c:	e0a8      	b.n	8014570 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801441e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014420:	891b      	ldrh	r3, [r3, #8]
 8014422:	2b00      	cmp	r3, #0
 8014424:	d001      	beq.n	801442a <find_volume+0x33e>
 8014426:	230d      	movs	r3, #13
 8014428:	e0a2      	b.n	8014570 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801442a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801442c:	3330      	adds	r3, #48	; 0x30
 801442e:	332c      	adds	r3, #44	; 0x2c
 8014430:	4618      	mov	r0, r3
 8014432:	f7fe fc5d 	bl	8012cf0 <ld_dword>
 8014436:	4602      	mov	r2, r0
 8014438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801443a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801443c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801443e:	695b      	ldr	r3, [r3, #20]
 8014440:	009b      	lsls	r3, r3, #2
 8014442:	647b      	str	r3, [r7, #68]	; 0x44
 8014444:	e01f      	b.n	8014486 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8014446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014448:	891b      	ldrh	r3, [r3, #8]
 801444a:	2b00      	cmp	r3, #0
 801444c:	d101      	bne.n	8014452 <find_volume+0x366>
 801444e:	230d      	movs	r3, #13
 8014450:	e08e      	b.n	8014570 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8014452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014454:	6a1a      	ldr	r2, [r3, #32]
 8014456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014458:	441a      	add	r2, r3
 801445a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801445c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801445e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014462:	2b02      	cmp	r3, #2
 8014464:	d103      	bne.n	801446e <find_volume+0x382>
 8014466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014468:	695b      	ldr	r3, [r3, #20]
 801446a:	005b      	lsls	r3, r3, #1
 801446c:	e00a      	b.n	8014484 <find_volume+0x398>
 801446e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014470:	695a      	ldr	r2, [r3, #20]
 8014472:	4613      	mov	r3, r2
 8014474:	005b      	lsls	r3, r3, #1
 8014476:	4413      	add	r3, r2
 8014478:	085a      	lsrs	r2, r3, #1
 801447a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801447c:	695b      	ldr	r3, [r3, #20]
 801447e:	f003 0301 	and.w	r3, r3, #1
 8014482:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8014484:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8014486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014488:	699a      	ldr	r2, [r3, #24]
 801448a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801448c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8014490:	0a5b      	lsrs	r3, r3, #9
 8014492:	429a      	cmp	r2, r3
 8014494:	d201      	bcs.n	801449a <find_volume+0x3ae>
 8014496:	230d      	movs	r3, #13
 8014498:	e06a      	b.n	8014570 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801449a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801449c:	f04f 32ff 	mov.w	r2, #4294967295
 80144a0:	611a      	str	r2, [r3, #16]
 80144a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144a4:	691a      	ldr	r2, [r3, #16]
 80144a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144a8:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80144aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144ac:	2280      	movs	r2, #128	; 0x80
 80144ae:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80144b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80144b4:	2b03      	cmp	r3, #3
 80144b6:	d149      	bne.n	801454c <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80144b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144ba:	3330      	adds	r3, #48	; 0x30
 80144bc:	3330      	adds	r3, #48	; 0x30
 80144be:	4618      	mov	r0, r3
 80144c0:	f7fe fbfe 	bl	8012cc0 <ld_word>
 80144c4:	4603      	mov	r3, r0
 80144c6:	2b01      	cmp	r3, #1
 80144c8:	d140      	bne.n	801454c <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 80144ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80144cc:	3301      	adds	r3, #1
 80144ce:	4619      	mov	r1, r3
 80144d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80144d2:	f7fe fea5 	bl	8013220 <move_window>
 80144d6:	4603      	mov	r3, r0
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d137      	bne.n	801454c <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 80144dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144de:	2200      	movs	r2, #0
 80144e0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80144e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144e4:	3330      	adds	r3, #48	; 0x30
 80144e6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80144ea:	4618      	mov	r0, r3
 80144ec:	f7fe fbe8 	bl	8012cc0 <ld_word>
 80144f0:	4603      	mov	r3, r0
 80144f2:	461a      	mov	r2, r3
 80144f4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80144f8:	429a      	cmp	r2, r3
 80144fa:	d127      	bne.n	801454c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80144fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144fe:	3330      	adds	r3, #48	; 0x30
 8014500:	4618      	mov	r0, r3
 8014502:	f7fe fbf5 	bl	8012cf0 <ld_dword>
 8014506:	4602      	mov	r2, r0
 8014508:	4b1b      	ldr	r3, [pc, #108]	; (8014578 <find_volume+0x48c>)
 801450a:	429a      	cmp	r2, r3
 801450c:	d11e      	bne.n	801454c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801450e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014510:	3330      	adds	r3, #48	; 0x30
 8014512:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8014516:	4618      	mov	r0, r3
 8014518:	f7fe fbea 	bl	8012cf0 <ld_dword>
 801451c:	4602      	mov	r2, r0
 801451e:	4b17      	ldr	r3, [pc, #92]	; (801457c <find_volume+0x490>)
 8014520:	429a      	cmp	r2, r3
 8014522:	d113      	bne.n	801454c <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8014524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014526:	3330      	adds	r3, #48	; 0x30
 8014528:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801452c:	4618      	mov	r0, r3
 801452e:	f7fe fbdf 	bl	8012cf0 <ld_dword>
 8014532:	4602      	mov	r2, r0
 8014534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014536:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8014538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801453a:	3330      	adds	r3, #48	; 0x30
 801453c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8014540:	4618      	mov	r0, r3
 8014542:	f7fe fbd5 	bl	8012cf0 <ld_dword>
 8014546:	4602      	mov	r2, r0
 8014548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801454a:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801454c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801454e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8014552:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8014554:	4b0a      	ldr	r3, [pc, #40]	; (8014580 <find_volume+0x494>)
 8014556:	881b      	ldrh	r3, [r3, #0]
 8014558:	3301      	adds	r3, #1
 801455a:	b29a      	uxth	r2, r3
 801455c:	4b08      	ldr	r3, [pc, #32]	; (8014580 <find_volume+0x494>)
 801455e:	801a      	strh	r2, [r3, #0]
 8014560:	4b07      	ldr	r3, [pc, #28]	; (8014580 <find_volume+0x494>)
 8014562:	881a      	ldrh	r2, [r3, #0]
 8014564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014566:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8014568:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801456a:	f7fe fdf1 	bl	8013150 <clear_lock>
#endif
	return FR_OK;
 801456e:	2300      	movs	r3, #0
}
 8014570:	4618      	mov	r0, r3
 8014572:	3758      	adds	r7, #88	; 0x58
 8014574:	46bd      	mov	sp, r7
 8014576:	bd80      	pop	{r7, pc}
 8014578:	41615252 	.word	0x41615252
 801457c:	61417272 	.word	0x61417272
 8014580:	24000a0c 	.word	0x24000a0c

08014584 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8014584:	b580      	push	{r7, lr}
 8014586:	b084      	sub	sp, #16
 8014588:	af00      	add	r7, sp, #0
 801458a:	6078      	str	r0, [r7, #4]
 801458c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801458e:	2309      	movs	r3, #9
 8014590:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	2b00      	cmp	r3, #0
 8014596:	d01c      	beq.n	80145d2 <validate+0x4e>
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	681b      	ldr	r3, [r3, #0]
 801459c:	2b00      	cmp	r3, #0
 801459e:	d018      	beq.n	80145d2 <validate+0x4e>
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	781b      	ldrb	r3, [r3, #0]
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d013      	beq.n	80145d2 <validate+0x4e>
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	889a      	ldrh	r2, [r3, #4]
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	681b      	ldr	r3, [r3, #0]
 80145b2:	88db      	ldrh	r3, [r3, #6]
 80145b4:	429a      	cmp	r2, r3
 80145b6:	d10c      	bne.n	80145d2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	681b      	ldr	r3, [r3, #0]
 80145bc:	785b      	ldrb	r3, [r3, #1]
 80145be:	4618      	mov	r0, r3
 80145c0:	f7fe fae0 	bl	8012b84 <disk_status>
 80145c4:	4603      	mov	r3, r0
 80145c6:	f003 0301 	and.w	r3, r3, #1
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d101      	bne.n	80145d2 <validate+0x4e>
			res = FR_OK;
 80145ce:	2300      	movs	r3, #0
 80145d0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80145d2:	7bfb      	ldrb	r3, [r7, #15]
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d102      	bne.n	80145de <validate+0x5a>
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	681b      	ldr	r3, [r3, #0]
 80145dc:	e000      	b.n	80145e0 <validate+0x5c>
 80145de:	2300      	movs	r3, #0
 80145e0:	683a      	ldr	r2, [r7, #0]
 80145e2:	6013      	str	r3, [r2, #0]
	return res;
 80145e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80145e6:	4618      	mov	r0, r3
 80145e8:	3710      	adds	r7, #16
 80145ea:	46bd      	mov	sp, r7
 80145ec:	bd80      	pop	{r7, pc}
	...

080145f0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80145f0:	b580      	push	{r7, lr}
 80145f2:	b088      	sub	sp, #32
 80145f4:	af00      	add	r7, sp, #0
 80145f6:	60f8      	str	r0, [r7, #12]
 80145f8:	60b9      	str	r1, [r7, #8]
 80145fa:	4613      	mov	r3, r2
 80145fc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80145fe:	68bb      	ldr	r3, [r7, #8]
 8014600:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8014602:	f107 0310 	add.w	r3, r7, #16
 8014606:	4618      	mov	r0, r3
 8014608:	f7ff fcd5 	bl	8013fb6 <get_ldnumber>
 801460c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801460e:	69fb      	ldr	r3, [r7, #28]
 8014610:	2b00      	cmp	r3, #0
 8014612:	da01      	bge.n	8014618 <f_mount+0x28>
 8014614:	230b      	movs	r3, #11
 8014616:	e02b      	b.n	8014670 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8014618:	4a17      	ldr	r2, [pc, #92]	; (8014678 <f_mount+0x88>)
 801461a:	69fb      	ldr	r3, [r7, #28]
 801461c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014620:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8014622:	69bb      	ldr	r3, [r7, #24]
 8014624:	2b00      	cmp	r3, #0
 8014626:	d005      	beq.n	8014634 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8014628:	69b8      	ldr	r0, [r7, #24]
 801462a:	f7fe fd91 	bl	8013150 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801462e:	69bb      	ldr	r3, [r7, #24]
 8014630:	2200      	movs	r2, #0
 8014632:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8014634:	68fb      	ldr	r3, [r7, #12]
 8014636:	2b00      	cmp	r3, #0
 8014638:	d002      	beq.n	8014640 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	2200      	movs	r2, #0
 801463e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8014640:	68fa      	ldr	r2, [r7, #12]
 8014642:	490d      	ldr	r1, [pc, #52]	; (8014678 <f_mount+0x88>)
 8014644:	69fb      	ldr	r3, [r7, #28]
 8014646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801464a:	68fb      	ldr	r3, [r7, #12]
 801464c:	2b00      	cmp	r3, #0
 801464e:	d002      	beq.n	8014656 <f_mount+0x66>
 8014650:	79fb      	ldrb	r3, [r7, #7]
 8014652:	2b01      	cmp	r3, #1
 8014654:	d001      	beq.n	801465a <f_mount+0x6a>
 8014656:	2300      	movs	r3, #0
 8014658:	e00a      	b.n	8014670 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801465a:	f107 010c 	add.w	r1, r7, #12
 801465e:	f107 0308 	add.w	r3, r7, #8
 8014662:	2200      	movs	r2, #0
 8014664:	4618      	mov	r0, r3
 8014666:	f7ff fd41 	bl	80140ec <find_volume>
 801466a:	4603      	mov	r3, r0
 801466c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801466e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014670:	4618      	mov	r0, r3
 8014672:	3720      	adds	r7, #32
 8014674:	46bd      	mov	sp, r7
 8014676:	bd80      	pop	{r7, pc}
 8014678:	24000a08 	.word	0x24000a08

0801467c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801467c:	b580      	push	{r7, lr}
 801467e:	b098      	sub	sp, #96	; 0x60
 8014680:	af00      	add	r7, sp, #0
 8014682:	60f8      	str	r0, [r7, #12]
 8014684:	60b9      	str	r1, [r7, #8]
 8014686:	4613      	mov	r3, r2
 8014688:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801468a:	68fb      	ldr	r3, [r7, #12]
 801468c:	2b00      	cmp	r3, #0
 801468e:	d101      	bne.n	8014694 <f_open+0x18>
 8014690:	2309      	movs	r3, #9
 8014692:	e1ad      	b.n	80149f0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8014694:	79fb      	ldrb	r3, [r7, #7]
 8014696:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801469a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801469c:	79fa      	ldrb	r2, [r7, #7]
 801469e:	f107 0110 	add.w	r1, r7, #16
 80146a2:	f107 0308 	add.w	r3, r7, #8
 80146a6:	4618      	mov	r0, r3
 80146a8:	f7ff fd20 	bl	80140ec <find_volume>
 80146ac:	4603      	mov	r3, r0
 80146ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80146b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	f040 8191 	bne.w	80149de <f_open+0x362>
		dj.obj.fs = fs;
 80146bc:	693b      	ldr	r3, [r7, #16]
 80146be:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80146c0:	68ba      	ldr	r2, [r7, #8]
 80146c2:	f107 0314 	add.w	r3, r7, #20
 80146c6:	4611      	mov	r1, r2
 80146c8:	4618      	mov	r0, r3
 80146ca:	f7ff fc03 	bl	8013ed4 <follow_path>
 80146ce:	4603      	mov	r3, r0
 80146d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80146d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80146d8:	2b00      	cmp	r3, #0
 80146da:	d11a      	bne.n	8014712 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80146dc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80146e0:	b25b      	sxtb	r3, r3
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	da03      	bge.n	80146ee <f_open+0x72>
				res = FR_INVALID_NAME;
 80146e6:	2306      	movs	r3, #6
 80146e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80146ec:	e011      	b.n	8014712 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80146ee:	79fb      	ldrb	r3, [r7, #7]
 80146f0:	f023 0301 	bic.w	r3, r3, #1
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	bf14      	ite	ne
 80146f8:	2301      	movne	r3, #1
 80146fa:	2300      	moveq	r3, #0
 80146fc:	b2db      	uxtb	r3, r3
 80146fe:	461a      	mov	r2, r3
 8014700:	f107 0314 	add.w	r3, r7, #20
 8014704:	4611      	mov	r1, r2
 8014706:	4618      	mov	r0, r3
 8014708:	f7fe fbda 	bl	8012ec0 <chk_lock>
 801470c:	4603      	mov	r3, r0
 801470e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8014712:	79fb      	ldrb	r3, [r7, #7]
 8014714:	f003 031c 	and.w	r3, r3, #28
 8014718:	2b00      	cmp	r3, #0
 801471a:	d07f      	beq.n	801481c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 801471c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014720:	2b00      	cmp	r3, #0
 8014722:	d017      	beq.n	8014754 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8014724:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014728:	2b04      	cmp	r3, #4
 801472a:	d10e      	bne.n	801474a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801472c:	f7fe fc24 	bl	8012f78 <enq_lock>
 8014730:	4603      	mov	r3, r0
 8014732:	2b00      	cmp	r3, #0
 8014734:	d006      	beq.n	8014744 <f_open+0xc8>
 8014736:	f107 0314 	add.w	r3, r7, #20
 801473a:	4618      	mov	r0, r3
 801473c:	f7ff fb03 	bl	8013d46 <dir_register>
 8014740:	4603      	mov	r3, r0
 8014742:	e000      	b.n	8014746 <f_open+0xca>
 8014744:	2312      	movs	r3, #18
 8014746:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801474a:	79fb      	ldrb	r3, [r7, #7]
 801474c:	f043 0308 	orr.w	r3, r3, #8
 8014750:	71fb      	strb	r3, [r7, #7]
 8014752:	e010      	b.n	8014776 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8014754:	7ebb      	ldrb	r3, [r7, #26]
 8014756:	f003 0311 	and.w	r3, r3, #17
 801475a:	2b00      	cmp	r3, #0
 801475c:	d003      	beq.n	8014766 <f_open+0xea>
					res = FR_DENIED;
 801475e:	2307      	movs	r3, #7
 8014760:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014764:	e007      	b.n	8014776 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8014766:	79fb      	ldrb	r3, [r7, #7]
 8014768:	f003 0304 	and.w	r3, r3, #4
 801476c:	2b00      	cmp	r3, #0
 801476e:	d002      	beq.n	8014776 <f_open+0xfa>
 8014770:	2308      	movs	r3, #8
 8014772:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8014776:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801477a:	2b00      	cmp	r3, #0
 801477c:	d168      	bne.n	8014850 <f_open+0x1d4>
 801477e:	79fb      	ldrb	r3, [r7, #7]
 8014780:	f003 0308 	and.w	r3, r3, #8
 8014784:	2b00      	cmp	r3, #0
 8014786:	d063      	beq.n	8014850 <f_open+0x1d4>
				dw = GET_FATTIME();
 8014788:	f7fb f8fe 	bl	800f988 <get_fattime>
 801478c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801478e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014790:	330e      	adds	r3, #14
 8014792:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014794:	4618      	mov	r0, r3
 8014796:	f7fe fae9 	bl	8012d6c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801479a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801479c:	3316      	adds	r3, #22
 801479e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80147a0:	4618      	mov	r0, r3
 80147a2:	f7fe fae3 	bl	8012d6c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80147a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147a8:	330b      	adds	r3, #11
 80147aa:	2220      	movs	r2, #32
 80147ac:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80147ae:	693b      	ldr	r3, [r7, #16]
 80147b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80147b2:	4611      	mov	r1, r2
 80147b4:	4618      	mov	r0, r3
 80147b6:	f7ff fa32 	bl	8013c1e <ld_clust>
 80147ba:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80147bc:	693b      	ldr	r3, [r7, #16]
 80147be:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80147c0:	2200      	movs	r2, #0
 80147c2:	4618      	mov	r0, r3
 80147c4:	f7ff fa4a 	bl	8013c5c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80147c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147ca:	331c      	adds	r3, #28
 80147cc:	2100      	movs	r1, #0
 80147ce:	4618      	mov	r0, r3
 80147d0:	f7fe facc 	bl	8012d6c <st_dword>
					fs->wflag = 1;
 80147d4:	693b      	ldr	r3, [r7, #16]
 80147d6:	2201      	movs	r2, #1
 80147d8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80147da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d037      	beq.n	8014850 <f_open+0x1d4>
						dw = fs->winsect;
 80147e0:	693b      	ldr	r3, [r7, #16]
 80147e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147e4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80147e6:	f107 0314 	add.w	r3, r7, #20
 80147ea:	2200      	movs	r2, #0
 80147ec:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80147ee:	4618      	mov	r0, r3
 80147f0:	f7fe ff5d 	bl	80136ae <remove_chain>
 80147f4:	4603      	mov	r3, r0
 80147f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80147fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d126      	bne.n	8014850 <f_open+0x1d4>
							res = move_window(fs, dw);
 8014802:	693b      	ldr	r3, [r7, #16]
 8014804:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014806:	4618      	mov	r0, r3
 8014808:	f7fe fd0a 	bl	8013220 <move_window>
 801480c:	4603      	mov	r3, r0
 801480e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8014812:	693b      	ldr	r3, [r7, #16]
 8014814:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014816:	3a01      	subs	r2, #1
 8014818:	60da      	str	r2, [r3, #12]
 801481a:	e019      	b.n	8014850 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801481c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014820:	2b00      	cmp	r3, #0
 8014822:	d115      	bne.n	8014850 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8014824:	7ebb      	ldrb	r3, [r7, #26]
 8014826:	f003 0310 	and.w	r3, r3, #16
 801482a:	2b00      	cmp	r3, #0
 801482c:	d003      	beq.n	8014836 <f_open+0x1ba>
					res = FR_NO_FILE;
 801482e:	2304      	movs	r3, #4
 8014830:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014834:	e00c      	b.n	8014850 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8014836:	79fb      	ldrb	r3, [r7, #7]
 8014838:	f003 0302 	and.w	r3, r3, #2
 801483c:	2b00      	cmp	r3, #0
 801483e:	d007      	beq.n	8014850 <f_open+0x1d4>
 8014840:	7ebb      	ldrb	r3, [r7, #26]
 8014842:	f003 0301 	and.w	r3, r3, #1
 8014846:	2b00      	cmp	r3, #0
 8014848:	d002      	beq.n	8014850 <f_open+0x1d4>
						res = FR_DENIED;
 801484a:	2307      	movs	r3, #7
 801484c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8014850:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014854:	2b00      	cmp	r3, #0
 8014856:	d128      	bne.n	80148aa <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8014858:	79fb      	ldrb	r3, [r7, #7]
 801485a:	f003 0308 	and.w	r3, r3, #8
 801485e:	2b00      	cmp	r3, #0
 8014860:	d003      	beq.n	801486a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8014862:	79fb      	ldrb	r3, [r7, #7]
 8014864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014868:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801486a:	693b      	ldr	r3, [r7, #16]
 801486c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8014872:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014878:	79fb      	ldrb	r3, [r7, #7]
 801487a:	f023 0301 	bic.w	r3, r3, #1
 801487e:	2b00      	cmp	r3, #0
 8014880:	bf14      	ite	ne
 8014882:	2301      	movne	r3, #1
 8014884:	2300      	moveq	r3, #0
 8014886:	b2db      	uxtb	r3, r3
 8014888:	461a      	mov	r2, r3
 801488a:	f107 0314 	add.w	r3, r7, #20
 801488e:	4611      	mov	r1, r2
 8014890:	4618      	mov	r0, r3
 8014892:	f7fe fb93 	bl	8012fbc <inc_lock>
 8014896:	4602      	mov	r2, r0
 8014898:	68fb      	ldr	r3, [r7, #12]
 801489a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	691b      	ldr	r3, [r3, #16]
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d102      	bne.n	80148aa <f_open+0x22e>
 80148a4:	2302      	movs	r3, #2
 80148a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80148aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	f040 8095 	bne.w	80149de <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80148b4:	693b      	ldr	r3, [r7, #16]
 80148b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80148b8:	4611      	mov	r1, r2
 80148ba:	4618      	mov	r0, r3
 80148bc:	f7ff f9af 	bl	8013c1e <ld_clust>
 80148c0:	4602      	mov	r2, r0
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80148c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80148c8:	331c      	adds	r3, #28
 80148ca:	4618      	mov	r0, r3
 80148cc:	f7fe fa10 	bl	8012cf0 <ld_dword>
 80148d0:	4602      	mov	r2, r0
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	2200      	movs	r2, #0
 80148da:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80148dc:	693a      	ldr	r2, [r7, #16]
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80148e2:	693b      	ldr	r3, [r7, #16]
 80148e4:	88da      	ldrh	r2, [r3, #6]
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	79fa      	ldrb	r2, [r7, #7]
 80148ee:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	2200      	movs	r2, #0
 80148f4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	2200      	movs	r2, #0
 80148fa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	2200      	movs	r2, #0
 8014900:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8014902:	68fb      	ldr	r3, [r7, #12]
 8014904:	3330      	adds	r3, #48	; 0x30
 8014906:	f44f 7200 	mov.w	r2, #512	; 0x200
 801490a:	2100      	movs	r1, #0
 801490c:	4618      	mov	r0, r3
 801490e:	f7fe fa7a 	bl	8012e06 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8014912:	79fb      	ldrb	r3, [r7, #7]
 8014914:	f003 0320 	and.w	r3, r3, #32
 8014918:	2b00      	cmp	r3, #0
 801491a:	d060      	beq.n	80149de <f_open+0x362>
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	68db      	ldr	r3, [r3, #12]
 8014920:	2b00      	cmp	r3, #0
 8014922:	d05c      	beq.n	80149de <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	68da      	ldr	r2, [r3, #12]
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801492c:	693b      	ldr	r3, [r7, #16]
 801492e:	895b      	ldrh	r3, [r3, #10]
 8014930:	025b      	lsls	r3, r3, #9
 8014932:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8014934:	68fb      	ldr	r3, [r7, #12]
 8014936:	689b      	ldr	r3, [r3, #8]
 8014938:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	68db      	ldr	r3, [r3, #12]
 801493e:	657b      	str	r3, [r7, #84]	; 0x54
 8014940:	e016      	b.n	8014970 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014946:	4618      	mov	r0, r3
 8014948:	f7fe fd25 	bl	8013396 <get_fat>
 801494c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801494e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014950:	2b01      	cmp	r3, #1
 8014952:	d802      	bhi.n	801495a <f_open+0x2de>
 8014954:	2302      	movs	r3, #2
 8014956:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801495a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801495c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014960:	d102      	bne.n	8014968 <f_open+0x2ec>
 8014962:	2301      	movs	r3, #1
 8014964:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014968:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801496a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801496c:	1ad3      	subs	r3, r2, r3
 801496e:	657b      	str	r3, [r7, #84]	; 0x54
 8014970:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014974:	2b00      	cmp	r3, #0
 8014976:	d103      	bne.n	8014980 <f_open+0x304>
 8014978:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801497a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801497c:	429a      	cmp	r2, r3
 801497e:	d8e0      	bhi.n	8014942 <f_open+0x2c6>
				}
				fp->clust = clst;
 8014980:	68fb      	ldr	r3, [r7, #12]
 8014982:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014984:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8014986:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801498a:	2b00      	cmp	r3, #0
 801498c:	d127      	bne.n	80149de <f_open+0x362>
 801498e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014994:	2b00      	cmp	r3, #0
 8014996:	d022      	beq.n	80149de <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8014998:	693b      	ldr	r3, [r7, #16]
 801499a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801499c:	4618      	mov	r0, r3
 801499e:	f7fe fcdb 	bl	8013358 <clust2sect>
 80149a2:	6478      	str	r0, [r7, #68]	; 0x44
 80149a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d103      	bne.n	80149b2 <f_open+0x336>
						res = FR_INT_ERR;
 80149aa:	2302      	movs	r3, #2
 80149ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80149b0:	e015      	b.n	80149de <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80149b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80149b4:	0a5a      	lsrs	r2, r3, #9
 80149b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80149b8:	441a      	add	r2, r3
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80149be:	693b      	ldr	r3, [r7, #16]
 80149c0:	7858      	ldrb	r0, [r3, #1]
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	6a1a      	ldr	r2, [r3, #32]
 80149cc:	2301      	movs	r3, #1
 80149ce:	f7fe f919 	bl	8012c04 <disk_read>
 80149d2:	4603      	mov	r3, r0
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d002      	beq.n	80149de <f_open+0x362>
 80149d8:	2301      	movs	r3, #1
 80149da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80149de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d002      	beq.n	80149ec <f_open+0x370>
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	2200      	movs	r2, #0
 80149ea:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80149ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80149f0:	4618      	mov	r0, r3
 80149f2:	3760      	adds	r7, #96	; 0x60
 80149f4:	46bd      	mov	sp, r7
 80149f6:	bd80      	pop	{r7, pc}

080149f8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80149f8:	b580      	push	{r7, lr}
 80149fa:	b08e      	sub	sp, #56	; 0x38
 80149fc:	af00      	add	r7, sp, #0
 80149fe:	60f8      	str	r0, [r7, #12]
 8014a00:	60b9      	str	r1, [r7, #8]
 8014a02:	607a      	str	r2, [r7, #4]
 8014a04:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8014a06:	68bb      	ldr	r3, [r7, #8]
 8014a08:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8014a0a:	683b      	ldr	r3, [r7, #0]
 8014a0c:	2200      	movs	r2, #0
 8014a0e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8014a10:	68fb      	ldr	r3, [r7, #12]
 8014a12:	f107 0214 	add.w	r2, r7, #20
 8014a16:	4611      	mov	r1, r2
 8014a18:	4618      	mov	r0, r3
 8014a1a:	f7ff fdb3 	bl	8014584 <validate>
 8014a1e:	4603      	mov	r3, r0
 8014a20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014a24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d107      	bne.n	8014a3c <f_read+0x44>
 8014a2c:	68fb      	ldr	r3, [r7, #12]
 8014a2e:	7d5b      	ldrb	r3, [r3, #21]
 8014a30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014a34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d002      	beq.n	8014a42 <f_read+0x4a>
 8014a3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014a40:	e115      	b.n	8014c6e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	7d1b      	ldrb	r3, [r3, #20]
 8014a46:	f003 0301 	and.w	r3, r3, #1
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d101      	bne.n	8014a52 <f_read+0x5a>
 8014a4e:	2307      	movs	r3, #7
 8014a50:	e10d      	b.n	8014c6e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8014a52:	68fb      	ldr	r3, [r7, #12]
 8014a54:	68da      	ldr	r2, [r3, #12]
 8014a56:	68fb      	ldr	r3, [r7, #12]
 8014a58:	699b      	ldr	r3, [r3, #24]
 8014a5a:	1ad3      	subs	r3, r2, r3
 8014a5c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8014a5e:	687a      	ldr	r2, [r7, #4]
 8014a60:	6a3b      	ldr	r3, [r7, #32]
 8014a62:	429a      	cmp	r2, r3
 8014a64:	f240 80fe 	bls.w	8014c64 <f_read+0x26c>
 8014a68:	6a3b      	ldr	r3, [r7, #32]
 8014a6a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8014a6c:	e0fa      	b.n	8014c64 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	699b      	ldr	r3, [r3, #24]
 8014a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	f040 80c6 	bne.w	8014c08 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	699b      	ldr	r3, [r3, #24]
 8014a80:	0a5b      	lsrs	r3, r3, #9
 8014a82:	697a      	ldr	r2, [r7, #20]
 8014a84:	8952      	ldrh	r2, [r2, #10]
 8014a86:	3a01      	subs	r2, #1
 8014a88:	4013      	ands	r3, r2
 8014a8a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8014a8c:	69fb      	ldr	r3, [r7, #28]
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d12f      	bne.n	8014af2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8014a92:	68fb      	ldr	r3, [r7, #12]
 8014a94:	699b      	ldr	r3, [r3, #24]
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d103      	bne.n	8014aa2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8014a9a:	68fb      	ldr	r3, [r7, #12]
 8014a9c:	689b      	ldr	r3, [r3, #8]
 8014a9e:	633b      	str	r3, [r7, #48]	; 0x30
 8014aa0:	e013      	b.n	8014aca <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014aa2:	68fb      	ldr	r3, [r7, #12]
 8014aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d007      	beq.n	8014aba <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	699b      	ldr	r3, [r3, #24]
 8014aae:	4619      	mov	r1, r3
 8014ab0:	68f8      	ldr	r0, [r7, #12]
 8014ab2:	f7fe fef9 	bl	80138a8 <clmt_clust>
 8014ab6:	6338      	str	r0, [r7, #48]	; 0x30
 8014ab8:	e007      	b.n	8014aca <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8014aba:	68fa      	ldr	r2, [r7, #12]
 8014abc:	68fb      	ldr	r3, [r7, #12]
 8014abe:	69db      	ldr	r3, [r3, #28]
 8014ac0:	4619      	mov	r1, r3
 8014ac2:	4610      	mov	r0, r2
 8014ac4:	f7fe fc67 	bl	8013396 <get_fat>
 8014ac8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8014aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014acc:	2b01      	cmp	r3, #1
 8014ace:	d804      	bhi.n	8014ada <f_read+0xe2>
 8014ad0:	68fb      	ldr	r3, [r7, #12]
 8014ad2:	2202      	movs	r2, #2
 8014ad4:	755a      	strb	r2, [r3, #21]
 8014ad6:	2302      	movs	r3, #2
 8014ad8:	e0c9      	b.n	8014c6e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ae0:	d104      	bne.n	8014aec <f_read+0xf4>
 8014ae2:	68fb      	ldr	r3, [r7, #12]
 8014ae4:	2201      	movs	r2, #1
 8014ae6:	755a      	strb	r2, [r3, #21]
 8014ae8:	2301      	movs	r3, #1
 8014aea:	e0c0      	b.n	8014c6e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014af0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014af2:	697a      	ldr	r2, [r7, #20]
 8014af4:	68fb      	ldr	r3, [r7, #12]
 8014af6:	69db      	ldr	r3, [r3, #28]
 8014af8:	4619      	mov	r1, r3
 8014afa:	4610      	mov	r0, r2
 8014afc:	f7fe fc2c 	bl	8013358 <clust2sect>
 8014b00:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014b02:	69bb      	ldr	r3, [r7, #24]
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d104      	bne.n	8014b12 <f_read+0x11a>
 8014b08:	68fb      	ldr	r3, [r7, #12]
 8014b0a:	2202      	movs	r2, #2
 8014b0c:	755a      	strb	r2, [r3, #21]
 8014b0e:	2302      	movs	r3, #2
 8014b10:	e0ad      	b.n	8014c6e <f_read+0x276>
			sect += csect;
 8014b12:	69ba      	ldr	r2, [r7, #24]
 8014b14:	69fb      	ldr	r3, [r7, #28]
 8014b16:	4413      	add	r3, r2
 8014b18:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	0a5b      	lsrs	r3, r3, #9
 8014b1e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8014b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d039      	beq.n	8014b9a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014b26:	69fa      	ldr	r2, [r7, #28]
 8014b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b2a:	4413      	add	r3, r2
 8014b2c:	697a      	ldr	r2, [r7, #20]
 8014b2e:	8952      	ldrh	r2, [r2, #10]
 8014b30:	4293      	cmp	r3, r2
 8014b32:	d905      	bls.n	8014b40 <f_read+0x148>
					cc = fs->csize - csect;
 8014b34:	697b      	ldr	r3, [r7, #20]
 8014b36:	895b      	ldrh	r3, [r3, #10]
 8014b38:	461a      	mov	r2, r3
 8014b3a:	69fb      	ldr	r3, [r7, #28]
 8014b3c:	1ad3      	subs	r3, r2, r3
 8014b3e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014b40:	697b      	ldr	r3, [r7, #20]
 8014b42:	7858      	ldrb	r0, [r3, #1]
 8014b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b46:	69ba      	ldr	r2, [r7, #24]
 8014b48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014b4a:	f7fe f85b 	bl	8012c04 <disk_read>
 8014b4e:	4603      	mov	r3, r0
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d004      	beq.n	8014b5e <f_read+0x166>
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	2201      	movs	r2, #1
 8014b58:	755a      	strb	r2, [r3, #21]
 8014b5a:	2301      	movs	r3, #1
 8014b5c:	e087      	b.n	8014c6e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	7d1b      	ldrb	r3, [r3, #20]
 8014b62:	b25b      	sxtb	r3, r3
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	da14      	bge.n	8014b92 <f_read+0x19a>
 8014b68:	68fb      	ldr	r3, [r7, #12]
 8014b6a:	6a1a      	ldr	r2, [r3, #32]
 8014b6c:	69bb      	ldr	r3, [r7, #24]
 8014b6e:	1ad3      	subs	r3, r2, r3
 8014b70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014b72:	429a      	cmp	r2, r3
 8014b74:	d90d      	bls.n	8014b92 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	6a1a      	ldr	r2, [r3, #32]
 8014b7a:	69bb      	ldr	r3, [r7, #24]
 8014b7c:	1ad3      	subs	r3, r2, r3
 8014b7e:	025b      	lsls	r3, r3, #9
 8014b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014b82:	18d0      	adds	r0, r2, r3
 8014b84:	68fb      	ldr	r3, [r7, #12]
 8014b86:	3330      	adds	r3, #48	; 0x30
 8014b88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014b8c:	4619      	mov	r1, r3
 8014b8e:	f7fe f919 	bl	8012dc4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8014b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b94:	025b      	lsls	r3, r3, #9
 8014b96:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8014b98:	e050      	b.n	8014c3c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	6a1b      	ldr	r3, [r3, #32]
 8014b9e:	69ba      	ldr	r2, [r7, #24]
 8014ba0:	429a      	cmp	r2, r3
 8014ba2:	d02e      	beq.n	8014c02 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8014ba4:	68fb      	ldr	r3, [r7, #12]
 8014ba6:	7d1b      	ldrb	r3, [r3, #20]
 8014ba8:	b25b      	sxtb	r3, r3
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	da18      	bge.n	8014be0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014bae:	697b      	ldr	r3, [r7, #20]
 8014bb0:	7858      	ldrb	r0, [r3, #1]
 8014bb2:	68fb      	ldr	r3, [r7, #12]
 8014bb4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	6a1a      	ldr	r2, [r3, #32]
 8014bbc:	2301      	movs	r3, #1
 8014bbe:	f7fe f841 	bl	8012c44 <disk_write>
 8014bc2:	4603      	mov	r3, r0
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	d004      	beq.n	8014bd2 <f_read+0x1da>
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	2201      	movs	r2, #1
 8014bcc:	755a      	strb	r2, [r3, #21]
 8014bce:	2301      	movs	r3, #1
 8014bd0:	e04d      	b.n	8014c6e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	7d1b      	ldrb	r3, [r3, #20]
 8014bd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014bda:	b2da      	uxtb	r2, r3
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8014be0:	697b      	ldr	r3, [r7, #20]
 8014be2:	7858      	ldrb	r0, [r3, #1]
 8014be4:	68fb      	ldr	r3, [r7, #12]
 8014be6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014bea:	2301      	movs	r3, #1
 8014bec:	69ba      	ldr	r2, [r7, #24]
 8014bee:	f7fe f809 	bl	8012c04 <disk_read>
 8014bf2:	4603      	mov	r3, r0
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d004      	beq.n	8014c02 <f_read+0x20a>
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	2201      	movs	r2, #1
 8014bfc:	755a      	strb	r2, [r3, #21]
 8014bfe:	2301      	movs	r3, #1
 8014c00:	e035      	b.n	8014c6e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8014c02:	68fb      	ldr	r3, [r7, #12]
 8014c04:	69ba      	ldr	r2, [r7, #24]
 8014c06:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014c08:	68fb      	ldr	r3, [r7, #12]
 8014c0a:	699b      	ldr	r3, [r3, #24]
 8014c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014c10:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8014c14:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8014c16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	429a      	cmp	r2, r3
 8014c1c:	d901      	bls.n	8014c22 <f_read+0x22a>
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014c28:	68fb      	ldr	r3, [r7, #12]
 8014c2a:	699b      	ldr	r3, [r3, #24]
 8014c2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014c30:	4413      	add	r3, r2
 8014c32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014c34:	4619      	mov	r1, r3
 8014c36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014c38:	f7fe f8c4 	bl	8012dc4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8014c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c40:	4413      	add	r3, r2
 8014c42:	627b      	str	r3, [r7, #36]	; 0x24
 8014c44:	68fb      	ldr	r3, [r7, #12]
 8014c46:	699a      	ldr	r2, [r3, #24]
 8014c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c4a:	441a      	add	r2, r3
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	619a      	str	r2, [r3, #24]
 8014c50:	683b      	ldr	r3, [r7, #0]
 8014c52:	681a      	ldr	r2, [r3, #0]
 8014c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c56:	441a      	add	r2, r3
 8014c58:	683b      	ldr	r3, [r7, #0]
 8014c5a:	601a      	str	r2, [r3, #0]
 8014c5c:	687a      	ldr	r2, [r7, #4]
 8014c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c60:	1ad3      	subs	r3, r2, r3
 8014c62:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	f47f af01 	bne.w	8014a6e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8014c6c:	2300      	movs	r3, #0
}
 8014c6e:	4618      	mov	r0, r3
 8014c70:	3738      	adds	r7, #56	; 0x38
 8014c72:	46bd      	mov	sp, r7
 8014c74:	bd80      	pop	{r7, pc}

08014c76 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8014c76:	b580      	push	{r7, lr}
 8014c78:	b08c      	sub	sp, #48	; 0x30
 8014c7a:	af00      	add	r7, sp, #0
 8014c7c:	60f8      	str	r0, [r7, #12]
 8014c7e:	60b9      	str	r1, [r7, #8]
 8014c80:	607a      	str	r2, [r7, #4]
 8014c82:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8014c84:	68bb      	ldr	r3, [r7, #8]
 8014c86:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8014c88:	683b      	ldr	r3, [r7, #0]
 8014c8a:	2200      	movs	r2, #0
 8014c8c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	f107 0210 	add.w	r2, r7, #16
 8014c94:	4611      	mov	r1, r2
 8014c96:	4618      	mov	r0, r3
 8014c98:	f7ff fc74 	bl	8014584 <validate>
 8014c9c:	4603      	mov	r3, r0
 8014c9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014ca2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d107      	bne.n	8014cba <f_write+0x44>
 8014caa:	68fb      	ldr	r3, [r7, #12]
 8014cac:	7d5b      	ldrb	r3, [r3, #21]
 8014cae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8014cb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d002      	beq.n	8014cc0 <f_write+0x4a>
 8014cba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014cbe:	e14b      	b.n	8014f58 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	7d1b      	ldrb	r3, [r3, #20]
 8014cc4:	f003 0302 	and.w	r3, r3, #2
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d101      	bne.n	8014cd0 <f_write+0x5a>
 8014ccc:	2307      	movs	r3, #7
 8014cce:	e143      	b.n	8014f58 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	699a      	ldr	r2, [r3, #24]
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	441a      	add	r2, r3
 8014cd8:	68fb      	ldr	r3, [r7, #12]
 8014cda:	699b      	ldr	r3, [r3, #24]
 8014cdc:	429a      	cmp	r2, r3
 8014cde:	f080 812d 	bcs.w	8014f3c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8014ce2:	68fb      	ldr	r3, [r7, #12]
 8014ce4:	699b      	ldr	r3, [r3, #24]
 8014ce6:	43db      	mvns	r3, r3
 8014ce8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8014cea:	e127      	b.n	8014f3c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	699b      	ldr	r3, [r3, #24]
 8014cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	f040 80e3 	bne.w	8014ec0 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	699b      	ldr	r3, [r3, #24]
 8014cfe:	0a5b      	lsrs	r3, r3, #9
 8014d00:	693a      	ldr	r2, [r7, #16]
 8014d02:	8952      	ldrh	r2, [r2, #10]
 8014d04:	3a01      	subs	r2, #1
 8014d06:	4013      	ands	r3, r2
 8014d08:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8014d0a:	69bb      	ldr	r3, [r7, #24]
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d143      	bne.n	8014d98 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8014d10:	68fb      	ldr	r3, [r7, #12]
 8014d12:	699b      	ldr	r3, [r3, #24]
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d10c      	bne.n	8014d32 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8014d18:	68fb      	ldr	r3, [r7, #12]
 8014d1a:	689b      	ldr	r3, [r3, #8]
 8014d1c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8014d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d11a      	bne.n	8014d5a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8014d24:	68fb      	ldr	r3, [r7, #12]
 8014d26:	2100      	movs	r1, #0
 8014d28:	4618      	mov	r0, r3
 8014d2a:	f7fe fd25 	bl	8013778 <create_chain>
 8014d2e:	62b8      	str	r0, [r7, #40]	; 0x28
 8014d30:	e013      	b.n	8014d5a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d007      	beq.n	8014d4a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014d3a:	68fb      	ldr	r3, [r7, #12]
 8014d3c:	699b      	ldr	r3, [r3, #24]
 8014d3e:	4619      	mov	r1, r3
 8014d40:	68f8      	ldr	r0, [r7, #12]
 8014d42:	f7fe fdb1 	bl	80138a8 <clmt_clust>
 8014d46:	62b8      	str	r0, [r7, #40]	; 0x28
 8014d48:	e007      	b.n	8014d5a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8014d4a:	68fa      	ldr	r2, [r7, #12]
 8014d4c:	68fb      	ldr	r3, [r7, #12]
 8014d4e:	69db      	ldr	r3, [r3, #28]
 8014d50:	4619      	mov	r1, r3
 8014d52:	4610      	mov	r0, r2
 8014d54:	f7fe fd10 	bl	8013778 <create_chain>
 8014d58:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	f000 80f2 	beq.w	8014f46 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d64:	2b01      	cmp	r3, #1
 8014d66:	d104      	bne.n	8014d72 <f_write+0xfc>
 8014d68:	68fb      	ldr	r3, [r7, #12]
 8014d6a:	2202      	movs	r2, #2
 8014d6c:	755a      	strb	r2, [r3, #21]
 8014d6e:	2302      	movs	r3, #2
 8014d70:	e0f2      	b.n	8014f58 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d78:	d104      	bne.n	8014d84 <f_write+0x10e>
 8014d7a:	68fb      	ldr	r3, [r7, #12]
 8014d7c:	2201      	movs	r2, #1
 8014d7e:	755a      	strb	r2, [r3, #21]
 8014d80:	2301      	movs	r3, #1
 8014d82:	e0e9      	b.n	8014f58 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014d88:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	689b      	ldr	r3, [r3, #8]
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d102      	bne.n	8014d98 <f_write+0x122>
 8014d92:	68fb      	ldr	r3, [r7, #12]
 8014d94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014d96:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8014d98:	68fb      	ldr	r3, [r7, #12]
 8014d9a:	7d1b      	ldrb	r3, [r3, #20]
 8014d9c:	b25b      	sxtb	r3, r3
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	da18      	bge.n	8014dd4 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014da2:	693b      	ldr	r3, [r7, #16]
 8014da4:	7858      	ldrb	r0, [r3, #1]
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014dac:	68fb      	ldr	r3, [r7, #12]
 8014dae:	6a1a      	ldr	r2, [r3, #32]
 8014db0:	2301      	movs	r3, #1
 8014db2:	f7fd ff47 	bl	8012c44 <disk_write>
 8014db6:	4603      	mov	r3, r0
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d004      	beq.n	8014dc6 <f_write+0x150>
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	2201      	movs	r2, #1
 8014dc0:	755a      	strb	r2, [r3, #21]
 8014dc2:	2301      	movs	r3, #1
 8014dc4:	e0c8      	b.n	8014f58 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014dc6:	68fb      	ldr	r3, [r7, #12]
 8014dc8:	7d1b      	ldrb	r3, [r3, #20]
 8014dca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014dce:	b2da      	uxtb	r2, r3
 8014dd0:	68fb      	ldr	r3, [r7, #12]
 8014dd2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014dd4:	693a      	ldr	r2, [r7, #16]
 8014dd6:	68fb      	ldr	r3, [r7, #12]
 8014dd8:	69db      	ldr	r3, [r3, #28]
 8014dda:	4619      	mov	r1, r3
 8014ddc:	4610      	mov	r0, r2
 8014dde:	f7fe fabb 	bl	8013358 <clust2sect>
 8014de2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014de4:	697b      	ldr	r3, [r7, #20]
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d104      	bne.n	8014df4 <f_write+0x17e>
 8014dea:	68fb      	ldr	r3, [r7, #12]
 8014dec:	2202      	movs	r2, #2
 8014dee:	755a      	strb	r2, [r3, #21]
 8014df0:	2302      	movs	r3, #2
 8014df2:	e0b1      	b.n	8014f58 <f_write+0x2e2>
			sect += csect;
 8014df4:	697a      	ldr	r2, [r7, #20]
 8014df6:	69bb      	ldr	r3, [r7, #24]
 8014df8:	4413      	add	r3, r2
 8014dfa:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	0a5b      	lsrs	r3, r3, #9
 8014e00:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8014e02:	6a3b      	ldr	r3, [r7, #32]
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d03c      	beq.n	8014e82 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014e08:	69ba      	ldr	r2, [r7, #24]
 8014e0a:	6a3b      	ldr	r3, [r7, #32]
 8014e0c:	4413      	add	r3, r2
 8014e0e:	693a      	ldr	r2, [r7, #16]
 8014e10:	8952      	ldrh	r2, [r2, #10]
 8014e12:	4293      	cmp	r3, r2
 8014e14:	d905      	bls.n	8014e22 <f_write+0x1ac>
					cc = fs->csize - csect;
 8014e16:	693b      	ldr	r3, [r7, #16]
 8014e18:	895b      	ldrh	r3, [r3, #10]
 8014e1a:	461a      	mov	r2, r3
 8014e1c:	69bb      	ldr	r3, [r7, #24]
 8014e1e:	1ad3      	subs	r3, r2, r3
 8014e20:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014e22:	693b      	ldr	r3, [r7, #16]
 8014e24:	7858      	ldrb	r0, [r3, #1]
 8014e26:	6a3b      	ldr	r3, [r7, #32]
 8014e28:	697a      	ldr	r2, [r7, #20]
 8014e2a:	69f9      	ldr	r1, [r7, #28]
 8014e2c:	f7fd ff0a 	bl	8012c44 <disk_write>
 8014e30:	4603      	mov	r3, r0
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d004      	beq.n	8014e40 <f_write+0x1ca>
 8014e36:	68fb      	ldr	r3, [r7, #12]
 8014e38:	2201      	movs	r2, #1
 8014e3a:	755a      	strb	r2, [r3, #21]
 8014e3c:	2301      	movs	r3, #1
 8014e3e:	e08b      	b.n	8014f58 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8014e40:	68fb      	ldr	r3, [r7, #12]
 8014e42:	6a1a      	ldr	r2, [r3, #32]
 8014e44:	697b      	ldr	r3, [r7, #20]
 8014e46:	1ad3      	subs	r3, r2, r3
 8014e48:	6a3a      	ldr	r2, [r7, #32]
 8014e4a:	429a      	cmp	r2, r3
 8014e4c:	d915      	bls.n	8014e7a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8014e4e:	68fb      	ldr	r3, [r7, #12]
 8014e50:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8014e54:	68fb      	ldr	r3, [r7, #12]
 8014e56:	6a1a      	ldr	r2, [r3, #32]
 8014e58:	697b      	ldr	r3, [r7, #20]
 8014e5a:	1ad3      	subs	r3, r2, r3
 8014e5c:	025b      	lsls	r3, r3, #9
 8014e5e:	69fa      	ldr	r2, [r7, #28]
 8014e60:	4413      	add	r3, r2
 8014e62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014e66:	4619      	mov	r1, r3
 8014e68:	f7fd ffac 	bl	8012dc4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014e6c:	68fb      	ldr	r3, [r7, #12]
 8014e6e:	7d1b      	ldrb	r3, [r3, #20]
 8014e70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014e74:	b2da      	uxtb	r2, r3
 8014e76:	68fb      	ldr	r3, [r7, #12]
 8014e78:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8014e7a:	6a3b      	ldr	r3, [r7, #32]
 8014e7c:	025b      	lsls	r3, r3, #9
 8014e7e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8014e80:	e03f      	b.n	8014f02 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014e82:	68fb      	ldr	r3, [r7, #12]
 8014e84:	6a1b      	ldr	r3, [r3, #32]
 8014e86:	697a      	ldr	r2, [r7, #20]
 8014e88:	429a      	cmp	r2, r3
 8014e8a:	d016      	beq.n	8014eba <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8014e8c:	68fb      	ldr	r3, [r7, #12]
 8014e8e:	699a      	ldr	r2, [r3, #24]
 8014e90:	68fb      	ldr	r3, [r7, #12]
 8014e92:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014e94:	429a      	cmp	r2, r3
 8014e96:	d210      	bcs.n	8014eba <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8014e98:	693b      	ldr	r3, [r7, #16]
 8014e9a:	7858      	ldrb	r0, [r3, #1]
 8014e9c:	68fb      	ldr	r3, [r7, #12]
 8014e9e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014ea2:	2301      	movs	r3, #1
 8014ea4:	697a      	ldr	r2, [r7, #20]
 8014ea6:	f7fd fead 	bl	8012c04 <disk_read>
 8014eaa:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	d004      	beq.n	8014eba <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	2201      	movs	r2, #1
 8014eb4:	755a      	strb	r2, [r3, #21]
 8014eb6:	2301      	movs	r3, #1
 8014eb8:	e04e      	b.n	8014f58 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8014eba:	68fb      	ldr	r3, [r7, #12]
 8014ebc:	697a      	ldr	r2, [r7, #20]
 8014ebe:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014ec0:	68fb      	ldr	r3, [r7, #12]
 8014ec2:	699b      	ldr	r3, [r3, #24]
 8014ec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014ec8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8014ecc:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8014ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	429a      	cmp	r2, r3
 8014ed4:	d901      	bls.n	8014eda <f_write+0x264>
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8014eda:	68fb      	ldr	r3, [r7, #12]
 8014edc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014ee0:	68fb      	ldr	r3, [r7, #12]
 8014ee2:	699b      	ldr	r3, [r3, #24]
 8014ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014ee8:	4413      	add	r3, r2
 8014eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014eec:	69f9      	ldr	r1, [r7, #28]
 8014eee:	4618      	mov	r0, r3
 8014ef0:	f7fd ff68 	bl	8012dc4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8014ef4:	68fb      	ldr	r3, [r7, #12]
 8014ef6:	7d1b      	ldrb	r3, [r3, #20]
 8014ef8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014efc:	b2da      	uxtb	r2, r3
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8014f02:	69fa      	ldr	r2, [r7, #28]
 8014f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f06:	4413      	add	r3, r2
 8014f08:	61fb      	str	r3, [r7, #28]
 8014f0a:	68fb      	ldr	r3, [r7, #12]
 8014f0c:	699a      	ldr	r2, [r3, #24]
 8014f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f10:	441a      	add	r2, r3
 8014f12:	68fb      	ldr	r3, [r7, #12]
 8014f14:	619a      	str	r2, [r3, #24]
 8014f16:	68fb      	ldr	r3, [r7, #12]
 8014f18:	68da      	ldr	r2, [r3, #12]
 8014f1a:	68fb      	ldr	r3, [r7, #12]
 8014f1c:	699b      	ldr	r3, [r3, #24]
 8014f1e:	429a      	cmp	r2, r3
 8014f20:	bf38      	it	cc
 8014f22:	461a      	movcc	r2, r3
 8014f24:	68fb      	ldr	r3, [r7, #12]
 8014f26:	60da      	str	r2, [r3, #12]
 8014f28:	683b      	ldr	r3, [r7, #0]
 8014f2a:	681a      	ldr	r2, [r3, #0]
 8014f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f2e:	441a      	add	r2, r3
 8014f30:	683b      	ldr	r3, [r7, #0]
 8014f32:	601a      	str	r2, [r3, #0]
 8014f34:	687a      	ldr	r2, [r7, #4]
 8014f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f38:	1ad3      	subs	r3, r2, r3
 8014f3a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	f47f aed4 	bne.w	8014cec <f_write+0x76>
 8014f44:	e000      	b.n	8014f48 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014f46:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8014f48:	68fb      	ldr	r3, [r7, #12]
 8014f4a:	7d1b      	ldrb	r3, [r3, #20]
 8014f4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014f50:	b2da      	uxtb	r2, r3
 8014f52:	68fb      	ldr	r3, [r7, #12]
 8014f54:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8014f56:	2300      	movs	r3, #0
}
 8014f58:	4618      	mov	r0, r3
 8014f5a:	3730      	adds	r7, #48	; 0x30
 8014f5c:	46bd      	mov	sp, r7
 8014f5e:	bd80      	pop	{r7, pc}

08014f60 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8014f60:	b580      	push	{r7, lr}
 8014f62:	b086      	sub	sp, #24
 8014f64:	af00      	add	r7, sp, #0
 8014f66:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	f107 0208 	add.w	r2, r7, #8
 8014f6e:	4611      	mov	r1, r2
 8014f70:	4618      	mov	r0, r3
 8014f72:	f7ff fb07 	bl	8014584 <validate>
 8014f76:	4603      	mov	r3, r0
 8014f78:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014f7a:	7dfb      	ldrb	r3, [r7, #23]
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d168      	bne.n	8015052 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	7d1b      	ldrb	r3, [r3, #20]
 8014f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d062      	beq.n	8015052 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	7d1b      	ldrb	r3, [r3, #20]
 8014f90:	b25b      	sxtb	r3, r3
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	da15      	bge.n	8014fc2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8014f96:	68bb      	ldr	r3, [r7, #8]
 8014f98:	7858      	ldrb	r0, [r3, #1]
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	6a1a      	ldr	r2, [r3, #32]
 8014fa4:	2301      	movs	r3, #1
 8014fa6:	f7fd fe4d 	bl	8012c44 <disk_write>
 8014faa:	4603      	mov	r3, r0
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d001      	beq.n	8014fb4 <f_sync+0x54>
 8014fb0:	2301      	movs	r3, #1
 8014fb2:	e04f      	b.n	8015054 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	7d1b      	ldrb	r3, [r3, #20]
 8014fb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014fbc:	b2da      	uxtb	r2, r3
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8014fc2:	f7fa fce1 	bl	800f988 <get_fattime>
 8014fc6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8014fc8:	68ba      	ldr	r2, [r7, #8]
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fce:	4619      	mov	r1, r3
 8014fd0:	4610      	mov	r0, r2
 8014fd2:	f7fe f925 	bl	8013220 <move_window>
 8014fd6:	4603      	mov	r3, r0
 8014fd8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8014fda:	7dfb      	ldrb	r3, [r7, #23]
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d138      	bne.n	8015052 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014fe4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	330b      	adds	r3, #11
 8014fea:	781a      	ldrb	r2, [r3, #0]
 8014fec:	68fb      	ldr	r3, [r7, #12]
 8014fee:	330b      	adds	r3, #11
 8014ff0:	f042 0220 	orr.w	r2, r2, #32
 8014ff4:	b2d2      	uxtb	r2, r2
 8014ff6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	6818      	ldr	r0, [r3, #0]
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	689b      	ldr	r3, [r3, #8]
 8015000:	461a      	mov	r2, r3
 8015002:	68f9      	ldr	r1, [r7, #12]
 8015004:	f7fe fe2a 	bl	8013c5c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	f103 021c 	add.w	r2, r3, #28
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	68db      	ldr	r3, [r3, #12]
 8015012:	4619      	mov	r1, r3
 8015014:	4610      	mov	r0, r2
 8015016:	f7fd fea9 	bl	8012d6c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801501a:	68fb      	ldr	r3, [r7, #12]
 801501c:	3316      	adds	r3, #22
 801501e:	6939      	ldr	r1, [r7, #16]
 8015020:	4618      	mov	r0, r3
 8015022:	f7fd fea3 	bl	8012d6c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8015026:	68fb      	ldr	r3, [r7, #12]
 8015028:	3312      	adds	r3, #18
 801502a:	2100      	movs	r1, #0
 801502c:	4618      	mov	r0, r3
 801502e:	f7fd fe82 	bl	8012d36 <st_word>
					fs->wflag = 1;
 8015032:	68bb      	ldr	r3, [r7, #8]
 8015034:	2201      	movs	r2, #1
 8015036:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8015038:	68bb      	ldr	r3, [r7, #8]
 801503a:	4618      	mov	r0, r3
 801503c:	f7fe f91e 	bl	801327c <sync_fs>
 8015040:	4603      	mov	r3, r0
 8015042:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	7d1b      	ldrb	r3, [r3, #20]
 8015048:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801504c:	b2da      	uxtb	r2, r3
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8015052:	7dfb      	ldrb	r3, [r7, #23]
}
 8015054:	4618      	mov	r0, r3
 8015056:	3718      	adds	r7, #24
 8015058:	46bd      	mov	sp, r7
 801505a:	bd80      	pop	{r7, pc}

0801505c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801505c:	b580      	push	{r7, lr}
 801505e:	b084      	sub	sp, #16
 8015060:	af00      	add	r7, sp, #0
 8015062:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8015064:	6878      	ldr	r0, [r7, #4]
 8015066:	f7ff ff7b 	bl	8014f60 <f_sync>
 801506a:	4603      	mov	r3, r0
 801506c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801506e:	7bfb      	ldrb	r3, [r7, #15]
 8015070:	2b00      	cmp	r3, #0
 8015072:	d118      	bne.n	80150a6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	f107 0208 	add.w	r2, r7, #8
 801507a:	4611      	mov	r1, r2
 801507c:	4618      	mov	r0, r3
 801507e:	f7ff fa81 	bl	8014584 <validate>
 8015082:	4603      	mov	r3, r0
 8015084:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8015086:	7bfb      	ldrb	r3, [r7, #15]
 8015088:	2b00      	cmp	r3, #0
 801508a:	d10c      	bne.n	80150a6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	691b      	ldr	r3, [r3, #16]
 8015090:	4618      	mov	r0, r3
 8015092:	f7fe f821 	bl	80130d8 <dec_lock>
 8015096:	4603      	mov	r3, r0
 8015098:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801509a:	7bfb      	ldrb	r3, [r7, #15]
 801509c:	2b00      	cmp	r3, #0
 801509e:	d102      	bne.n	80150a6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	2200      	movs	r2, #0
 80150a4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80150a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80150a8:	4618      	mov	r0, r3
 80150aa:	3710      	adds	r7, #16
 80150ac:	46bd      	mov	sp, r7
 80150ae:	bd80      	pop	{r7, pc}

080150b0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80150b0:	b480      	push	{r7}
 80150b2:	b087      	sub	sp, #28
 80150b4:	af00      	add	r7, sp, #0
 80150b6:	60f8      	str	r0, [r7, #12]
 80150b8:	60b9      	str	r1, [r7, #8]
 80150ba:	4613      	mov	r3, r2
 80150bc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80150be:	2301      	movs	r3, #1
 80150c0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80150c2:	2300      	movs	r3, #0
 80150c4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80150c6:	4b1f      	ldr	r3, [pc, #124]	; (8015144 <FATFS_LinkDriverEx+0x94>)
 80150c8:	7a5b      	ldrb	r3, [r3, #9]
 80150ca:	b2db      	uxtb	r3, r3
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d131      	bne.n	8015134 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80150d0:	4b1c      	ldr	r3, [pc, #112]	; (8015144 <FATFS_LinkDriverEx+0x94>)
 80150d2:	7a5b      	ldrb	r3, [r3, #9]
 80150d4:	b2db      	uxtb	r3, r3
 80150d6:	461a      	mov	r2, r3
 80150d8:	4b1a      	ldr	r3, [pc, #104]	; (8015144 <FATFS_LinkDriverEx+0x94>)
 80150da:	2100      	movs	r1, #0
 80150dc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80150de:	4b19      	ldr	r3, [pc, #100]	; (8015144 <FATFS_LinkDriverEx+0x94>)
 80150e0:	7a5b      	ldrb	r3, [r3, #9]
 80150e2:	b2db      	uxtb	r3, r3
 80150e4:	4a17      	ldr	r2, [pc, #92]	; (8015144 <FATFS_LinkDriverEx+0x94>)
 80150e6:	009b      	lsls	r3, r3, #2
 80150e8:	4413      	add	r3, r2
 80150ea:	68fa      	ldr	r2, [r7, #12]
 80150ec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80150ee:	4b15      	ldr	r3, [pc, #84]	; (8015144 <FATFS_LinkDriverEx+0x94>)
 80150f0:	7a5b      	ldrb	r3, [r3, #9]
 80150f2:	b2db      	uxtb	r3, r3
 80150f4:	461a      	mov	r2, r3
 80150f6:	4b13      	ldr	r3, [pc, #76]	; (8015144 <FATFS_LinkDriverEx+0x94>)
 80150f8:	4413      	add	r3, r2
 80150fa:	79fa      	ldrb	r2, [r7, #7]
 80150fc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80150fe:	4b11      	ldr	r3, [pc, #68]	; (8015144 <FATFS_LinkDriverEx+0x94>)
 8015100:	7a5b      	ldrb	r3, [r3, #9]
 8015102:	b2db      	uxtb	r3, r3
 8015104:	1c5a      	adds	r2, r3, #1
 8015106:	b2d1      	uxtb	r1, r2
 8015108:	4a0e      	ldr	r2, [pc, #56]	; (8015144 <FATFS_LinkDriverEx+0x94>)
 801510a:	7251      	strb	r1, [r2, #9]
 801510c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801510e:	7dbb      	ldrb	r3, [r7, #22]
 8015110:	3330      	adds	r3, #48	; 0x30
 8015112:	b2da      	uxtb	r2, r3
 8015114:	68bb      	ldr	r3, [r7, #8]
 8015116:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8015118:	68bb      	ldr	r3, [r7, #8]
 801511a:	3301      	adds	r3, #1
 801511c:	223a      	movs	r2, #58	; 0x3a
 801511e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8015120:	68bb      	ldr	r3, [r7, #8]
 8015122:	3302      	adds	r3, #2
 8015124:	222f      	movs	r2, #47	; 0x2f
 8015126:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8015128:	68bb      	ldr	r3, [r7, #8]
 801512a:	3303      	adds	r3, #3
 801512c:	2200      	movs	r2, #0
 801512e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8015130:	2300      	movs	r3, #0
 8015132:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8015134:	7dfb      	ldrb	r3, [r7, #23]
}
 8015136:	4618      	mov	r0, r3
 8015138:	371c      	adds	r7, #28
 801513a:	46bd      	mov	sp, r7
 801513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015140:	4770      	bx	lr
 8015142:	bf00      	nop
 8015144:	24000a30 	.word	0x24000a30

08015148 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8015148:	b580      	push	{r7, lr}
 801514a:	b082      	sub	sp, #8
 801514c:	af00      	add	r7, sp, #0
 801514e:	6078      	str	r0, [r7, #4]
 8015150:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8015152:	2200      	movs	r2, #0
 8015154:	6839      	ldr	r1, [r7, #0]
 8015156:	6878      	ldr	r0, [r7, #4]
 8015158:	f7ff ffaa 	bl	80150b0 <FATFS_LinkDriverEx>
 801515c:	4603      	mov	r3, r0
}
 801515e:	4618      	mov	r0, r3
 8015160:	3708      	adds	r7, #8
 8015162:	46bd      	mov	sp, r7
 8015164:	bd80      	pop	{r7, pc}
	...

08015168 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8015168:	b580      	push	{r7, lr}
 801516a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801516c:	2200      	movs	r2, #0
 801516e:	4913      	ldr	r1, [pc, #76]	; (80151bc <MX_USB_DEVICE_Init+0x54>)
 8015170:	4813      	ldr	r0, [pc, #76]	; (80151c0 <MX_USB_DEVICE_Init+0x58>)
 8015172:	f7fc fc20 	bl	80119b6 <USBD_Init>
 8015176:	4603      	mov	r3, r0
 8015178:	2b00      	cmp	r3, #0
 801517a:	d001      	beq.n	8015180 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801517c:	f7ec fa3c 	bl	80015f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8015180:	4910      	ldr	r1, [pc, #64]	; (80151c4 <MX_USB_DEVICE_Init+0x5c>)
 8015182:	480f      	ldr	r0, [pc, #60]	; (80151c0 <MX_USB_DEVICE_Init+0x58>)
 8015184:	f7fc fc4d 	bl	8011a22 <USBD_RegisterClass>
 8015188:	4603      	mov	r3, r0
 801518a:	2b00      	cmp	r3, #0
 801518c:	d001      	beq.n	8015192 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801518e:	f7ec fa33 	bl	80015f8 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8015192:	490d      	ldr	r1, [pc, #52]	; (80151c8 <MX_USB_DEVICE_Init+0x60>)
 8015194:	480a      	ldr	r0, [pc, #40]	; (80151c0 <MX_USB_DEVICE_Init+0x58>)
 8015196:	f7fa fff7 	bl	8010188 <USBD_MSC_RegisterStorage>
 801519a:	4603      	mov	r3, r0
 801519c:	2b00      	cmp	r3, #0
 801519e:	d001      	beq.n	80151a4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80151a0:	f7ec fa2a 	bl	80015f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80151a4:	4806      	ldr	r0, [pc, #24]	; (80151c0 <MX_USB_DEVICE_Init+0x58>)
 80151a6:	f7fc fc5d 	bl	8011a64 <USBD_Start>
 80151aa:	4603      	mov	r3, r0
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d001      	beq.n	80151b4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80151b0:	f7ec fa22 	bl	80015f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80151b4:	f7f1 fed4 	bl	8006f60 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80151b8:	bf00      	nop
 80151ba:	bd80      	pop	{r7, pc}
 80151bc:	240000fc 	.word	0x240000fc
 80151c0:	24001a54 	.word	0x24001a54
 80151c4:	24000014 	.word	0x24000014
 80151c8:	2400014c 	.word	0x2400014c

080151cc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80151cc:	b480      	push	{r7}
 80151ce:	b083      	sub	sp, #12
 80151d0:	af00      	add	r7, sp, #0
 80151d2:	4603      	mov	r3, r0
 80151d4:	6039      	str	r1, [r7, #0]
 80151d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80151d8:	683b      	ldr	r3, [r7, #0]
 80151da:	2212      	movs	r2, #18
 80151dc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80151de:	4b03      	ldr	r3, [pc, #12]	; (80151ec <USBD_FS_DeviceDescriptor+0x20>)
}
 80151e0:	4618      	mov	r0, r3
 80151e2:	370c      	adds	r7, #12
 80151e4:	46bd      	mov	sp, r7
 80151e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ea:	4770      	bx	lr
 80151ec:	24000118 	.word	0x24000118

080151f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80151f0:	b480      	push	{r7}
 80151f2:	b083      	sub	sp, #12
 80151f4:	af00      	add	r7, sp, #0
 80151f6:	4603      	mov	r3, r0
 80151f8:	6039      	str	r1, [r7, #0]
 80151fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80151fc:	683b      	ldr	r3, [r7, #0]
 80151fe:	2204      	movs	r2, #4
 8015200:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015202:	4b03      	ldr	r3, [pc, #12]	; (8015210 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8015204:	4618      	mov	r0, r3
 8015206:	370c      	adds	r7, #12
 8015208:	46bd      	mov	sp, r7
 801520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801520e:	4770      	bx	lr
 8015210:	2400012c 	.word	0x2400012c

08015214 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015214:	b580      	push	{r7, lr}
 8015216:	b082      	sub	sp, #8
 8015218:	af00      	add	r7, sp, #0
 801521a:	4603      	mov	r3, r0
 801521c:	6039      	str	r1, [r7, #0]
 801521e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015220:	79fb      	ldrb	r3, [r7, #7]
 8015222:	2b00      	cmp	r3, #0
 8015224:	d105      	bne.n	8015232 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015226:	683a      	ldr	r2, [r7, #0]
 8015228:	4907      	ldr	r1, [pc, #28]	; (8015248 <USBD_FS_ProductStrDescriptor+0x34>)
 801522a:	4808      	ldr	r0, [pc, #32]	; (801524c <USBD_FS_ProductStrDescriptor+0x38>)
 801522c:	f7fd fbe7 	bl	80129fe <USBD_GetString>
 8015230:	e004      	b.n	801523c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015232:	683a      	ldr	r2, [r7, #0]
 8015234:	4904      	ldr	r1, [pc, #16]	; (8015248 <USBD_FS_ProductStrDescriptor+0x34>)
 8015236:	4805      	ldr	r0, [pc, #20]	; (801524c <USBD_FS_ProductStrDescriptor+0x38>)
 8015238:	f7fd fbe1 	bl	80129fe <USBD_GetString>
  }
  return USBD_StrDesc;
 801523c:	4b02      	ldr	r3, [pc, #8]	; (8015248 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801523e:	4618      	mov	r0, r3
 8015240:	3708      	adds	r7, #8
 8015242:	46bd      	mov	sp, r7
 8015244:	bd80      	pop	{r7, pc}
 8015246:	bf00      	nop
 8015248:	24001d24 	.word	0x24001d24
 801524c:	0801705c 	.word	0x0801705c

08015250 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015250:	b580      	push	{r7, lr}
 8015252:	b082      	sub	sp, #8
 8015254:	af00      	add	r7, sp, #0
 8015256:	4603      	mov	r3, r0
 8015258:	6039      	str	r1, [r7, #0]
 801525a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801525c:	683a      	ldr	r2, [r7, #0]
 801525e:	4904      	ldr	r1, [pc, #16]	; (8015270 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015260:	4804      	ldr	r0, [pc, #16]	; (8015274 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8015262:	f7fd fbcc 	bl	80129fe <USBD_GetString>
  return USBD_StrDesc;
 8015266:	4b02      	ldr	r3, [pc, #8]	; (8015270 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015268:	4618      	mov	r0, r3
 801526a:	3708      	adds	r7, #8
 801526c:	46bd      	mov	sp, r7
 801526e:	bd80      	pop	{r7, pc}
 8015270:	24001d24 	.word	0x24001d24
 8015274:	08017070 	.word	0x08017070

08015278 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015278:	b580      	push	{r7, lr}
 801527a:	b082      	sub	sp, #8
 801527c:	af00      	add	r7, sp, #0
 801527e:	4603      	mov	r3, r0
 8015280:	6039      	str	r1, [r7, #0]
 8015282:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015284:	683b      	ldr	r3, [r7, #0]
 8015286:	221a      	movs	r2, #26
 8015288:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801528a:	f000 f843 	bl	8015314 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801528e:	4b02      	ldr	r3, [pc, #8]	; (8015298 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015290:	4618      	mov	r0, r3
 8015292:	3708      	adds	r7, #8
 8015294:	46bd      	mov	sp, r7
 8015296:	bd80      	pop	{r7, pc}
 8015298:	24000130 	.word	0x24000130

0801529c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801529c:	b580      	push	{r7, lr}
 801529e:	b082      	sub	sp, #8
 80152a0:	af00      	add	r7, sp, #0
 80152a2:	4603      	mov	r3, r0
 80152a4:	6039      	str	r1, [r7, #0]
 80152a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80152a8:	79fb      	ldrb	r3, [r7, #7]
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d105      	bne.n	80152ba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80152ae:	683a      	ldr	r2, [r7, #0]
 80152b0:	4907      	ldr	r1, [pc, #28]	; (80152d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80152b2:	4808      	ldr	r0, [pc, #32]	; (80152d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80152b4:	f7fd fba3 	bl	80129fe <USBD_GetString>
 80152b8:	e004      	b.n	80152c4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80152ba:	683a      	ldr	r2, [r7, #0]
 80152bc:	4904      	ldr	r1, [pc, #16]	; (80152d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80152be:	4805      	ldr	r0, [pc, #20]	; (80152d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80152c0:	f7fd fb9d 	bl	80129fe <USBD_GetString>
  }
  return USBD_StrDesc;
 80152c4:	4b02      	ldr	r3, [pc, #8]	; (80152d0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80152c6:	4618      	mov	r0, r3
 80152c8:	3708      	adds	r7, #8
 80152ca:	46bd      	mov	sp, r7
 80152cc:	bd80      	pop	{r7, pc}
 80152ce:	bf00      	nop
 80152d0:	24001d24 	.word	0x24001d24
 80152d4:	08017084 	.word	0x08017084

080152d8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80152d8:	b580      	push	{r7, lr}
 80152da:	b082      	sub	sp, #8
 80152dc:	af00      	add	r7, sp, #0
 80152de:	4603      	mov	r3, r0
 80152e0:	6039      	str	r1, [r7, #0]
 80152e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80152e4:	79fb      	ldrb	r3, [r7, #7]
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d105      	bne.n	80152f6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80152ea:	683a      	ldr	r2, [r7, #0]
 80152ec:	4907      	ldr	r1, [pc, #28]	; (801530c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80152ee:	4808      	ldr	r0, [pc, #32]	; (8015310 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80152f0:	f7fd fb85 	bl	80129fe <USBD_GetString>
 80152f4:	e004      	b.n	8015300 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80152f6:	683a      	ldr	r2, [r7, #0]
 80152f8:	4904      	ldr	r1, [pc, #16]	; (801530c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80152fa:	4805      	ldr	r0, [pc, #20]	; (8015310 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80152fc:	f7fd fb7f 	bl	80129fe <USBD_GetString>
  }
  return USBD_StrDesc;
 8015300:	4b02      	ldr	r3, [pc, #8]	; (801530c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8015302:	4618      	mov	r0, r3
 8015304:	3708      	adds	r7, #8
 8015306:	46bd      	mov	sp, r7
 8015308:	bd80      	pop	{r7, pc}
 801530a:	bf00      	nop
 801530c:	24001d24 	.word	0x24001d24
 8015310:	08017090 	.word	0x08017090

08015314 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015314:	b580      	push	{r7, lr}
 8015316:	b084      	sub	sp, #16
 8015318:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801531a:	4b0f      	ldr	r3, [pc, #60]	; (8015358 <Get_SerialNum+0x44>)
 801531c:	681b      	ldr	r3, [r3, #0]
 801531e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015320:	4b0e      	ldr	r3, [pc, #56]	; (801535c <Get_SerialNum+0x48>)
 8015322:	681b      	ldr	r3, [r3, #0]
 8015324:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015326:	4b0e      	ldr	r3, [pc, #56]	; (8015360 <Get_SerialNum+0x4c>)
 8015328:	681b      	ldr	r3, [r3, #0]
 801532a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801532c:	68fa      	ldr	r2, [r7, #12]
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	4413      	add	r3, r2
 8015332:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	2b00      	cmp	r3, #0
 8015338:	d009      	beq.n	801534e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801533a:	2208      	movs	r2, #8
 801533c:	4909      	ldr	r1, [pc, #36]	; (8015364 <Get_SerialNum+0x50>)
 801533e:	68f8      	ldr	r0, [r7, #12]
 8015340:	f000 f814 	bl	801536c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015344:	2204      	movs	r2, #4
 8015346:	4908      	ldr	r1, [pc, #32]	; (8015368 <Get_SerialNum+0x54>)
 8015348:	68b8      	ldr	r0, [r7, #8]
 801534a:	f000 f80f 	bl	801536c <IntToUnicode>
  }
}
 801534e:	bf00      	nop
 8015350:	3710      	adds	r7, #16
 8015352:	46bd      	mov	sp, r7
 8015354:	bd80      	pop	{r7, pc}
 8015356:	bf00      	nop
 8015358:	1ff1e800 	.word	0x1ff1e800
 801535c:	1ff1e804 	.word	0x1ff1e804
 8015360:	1ff1e808 	.word	0x1ff1e808
 8015364:	24000132 	.word	0x24000132
 8015368:	24000142 	.word	0x24000142

0801536c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801536c:	b480      	push	{r7}
 801536e:	b087      	sub	sp, #28
 8015370:	af00      	add	r7, sp, #0
 8015372:	60f8      	str	r0, [r7, #12]
 8015374:	60b9      	str	r1, [r7, #8]
 8015376:	4613      	mov	r3, r2
 8015378:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801537a:	2300      	movs	r3, #0
 801537c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801537e:	2300      	movs	r3, #0
 8015380:	75fb      	strb	r3, [r7, #23]
 8015382:	e027      	b.n	80153d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	0f1b      	lsrs	r3, r3, #28
 8015388:	2b09      	cmp	r3, #9
 801538a:	d80b      	bhi.n	80153a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801538c:	68fb      	ldr	r3, [r7, #12]
 801538e:	0f1b      	lsrs	r3, r3, #28
 8015390:	b2da      	uxtb	r2, r3
 8015392:	7dfb      	ldrb	r3, [r7, #23]
 8015394:	005b      	lsls	r3, r3, #1
 8015396:	4619      	mov	r1, r3
 8015398:	68bb      	ldr	r3, [r7, #8]
 801539a:	440b      	add	r3, r1
 801539c:	3230      	adds	r2, #48	; 0x30
 801539e:	b2d2      	uxtb	r2, r2
 80153a0:	701a      	strb	r2, [r3, #0]
 80153a2:	e00a      	b.n	80153ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	0f1b      	lsrs	r3, r3, #28
 80153a8:	b2da      	uxtb	r2, r3
 80153aa:	7dfb      	ldrb	r3, [r7, #23]
 80153ac:	005b      	lsls	r3, r3, #1
 80153ae:	4619      	mov	r1, r3
 80153b0:	68bb      	ldr	r3, [r7, #8]
 80153b2:	440b      	add	r3, r1
 80153b4:	3237      	adds	r2, #55	; 0x37
 80153b6:	b2d2      	uxtb	r2, r2
 80153b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80153ba:	68fb      	ldr	r3, [r7, #12]
 80153bc:	011b      	lsls	r3, r3, #4
 80153be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80153c0:	7dfb      	ldrb	r3, [r7, #23]
 80153c2:	005b      	lsls	r3, r3, #1
 80153c4:	3301      	adds	r3, #1
 80153c6:	68ba      	ldr	r2, [r7, #8]
 80153c8:	4413      	add	r3, r2
 80153ca:	2200      	movs	r2, #0
 80153cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80153ce:	7dfb      	ldrb	r3, [r7, #23]
 80153d0:	3301      	adds	r3, #1
 80153d2:	75fb      	strb	r3, [r7, #23]
 80153d4:	7dfa      	ldrb	r2, [r7, #23]
 80153d6:	79fb      	ldrb	r3, [r7, #7]
 80153d8:	429a      	cmp	r2, r3
 80153da:	d3d3      	bcc.n	8015384 <IntToUnicode+0x18>
  }
}
 80153dc:	bf00      	nop
 80153de:	371c      	adds	r7, #28
 80153e0:	46bd      	mov	sp, r7
 80153e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153e6:	4770      	bx	lr

080153e8 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 80153e8:	b480      	push	{r7}
 80153ea:	b083      	sub	sp, #12
 80153ec:	af00      	add	r7, sp, #0
 80153ee:	4603      	mov	r3, r0
 80153f0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 80153f2:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80153f4:	4618      	mov	r0, r3
 80153f6:	370c      	adds	r7, #12
 80153f8:	46bd      	mov	sp, r7
 80153fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153fe:	4770      	bx	lr

08015400 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8015400:	b580      	push	{r7, lr}
 8015402:	b08e      	sub	sp, #56	; 0x38
 8015404:	af00      	add	r7, sp, #0
 8015406:	4603      	mov	r3, r0
 8015408:	60b9      	str	r1, [r7, #8]
 801540a:	607a      	str	r2, [r7, #4]
 801540c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 801540e:	23ff      	movs	r3, #255	; 0xff
 8015410:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  HAL_SD_GetCardInfo(&hsd1, &info);
 8015414:	f107 0310 	add.w	r3, r7, #16
 8015418:	4619      	mov	r1, r3
 801541a:	480a      	ldr	r0, [pc, #40]	; (8015444 <STORAGE_GetCapacity_FS+0x44>)
 801541c:	f7f6 f838 	bl	800b490 <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 8015420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015422:	1e5a      	subs	r2, r3, #1
 8015424:	68bb      	ldr	r3, [r7, #8]
 8015426:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 8015428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801542a:	b29a      	uxth	r2, r3
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 8015430:	2300      	movs	r3, #0
 8015432:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  return ret;
 8015436:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 801543a:	4618      	mov	r0, r3
 801543c:	3738      	adds	r7, #56	; 0x38
 801543e:	46bd      	mov	sp, r7
 8015440:	bd80      	pop	{r7, pc}
 8015442:	bf00      	nop
 8015444:	24001294 	.word	0x24001294

08015448 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8015448:	b480      	push	{r7}
 801544a:	b083      	sub	sp, #12
 801544c:	af00      	add	r7, sp, #0
 801544e:	4603      	mov	r3, r0
 8015450:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8015452:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8015454:	4618      	mov	r0, r3
 8015456:	370c      	adds	r7, #12
 8015458:	46bd      	mov	sp, r7
 801545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801545e:	4770      	bx	lr

08015460 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8015460:	b480      	push	{r7}
 8015462:	b083      	sub	sp, #12
 8015464:	af00      	add	r7, sp, #0
 8015466:	4603      	mov	r3, r0
 8015468:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 801546a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801546c:	4618      	mov	r0, r3
 801546e:	370c      	adds	r7, #12
 8015470:	46bd      	mov	sp, r7
 8015472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015476:	4770      	bx	lr

08015478 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8015478:	b580      	push	{r7, lr}
 801547a:	b088      	sub	sp, #32
 801547c:	af02      	add	r7, sp, #8
 801547e:	60b9      	str	r1, [r7, #8]
 8015480:	607a      	str	r2, [r7, #4]
 8015482:	461a      	mov	r2, r3
 8015484:	4603      	mov	r3, r0
 8015486:	73fb      	strb	r3, [r7, #15]
 8015488:	4613      	mov	r3, r2
 801548a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	int8_t ret = -1;
 801548c:	23ff      	movs	r3, #255	; 0xff
 801548e:	75fb      	strb	r3, [r7, #23]

	HAL_SD_ReadBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8015490:	89ba      	ldrh	r2, [r7, #12]
 8015492:	f04f 33ff 	mov.w	r3, #4294967295
 8015496:	9300      	str	r3, [sp, #0]
 8015498:	4613      	mov	r3, r2
 801549a:	687a      	ldr	r2, [r7, #4]
 801549c:	68b9      	ldr	r1, [r7, #8]
 801549e:	4809      	ldr	r0, [pc, #36]	; (80154c4 <STORAGE_Read_FS+0x4c>)
 80154a0:	f7f4 ff68 	bl	800a374 <HAL_SD_ReadBlocks>

	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 80154a4:	bf00      	nop
 80154a6:	4807      	ldr	r0, [pc, #28]	; (80154c4 <STORAGE_Read_FS+0x4c>)
 80154a8:	f7f6 f8c8 	bl	800b63c <HAL_SD_GetCardState>
 80154ac:	4603      	mov	r3, r0
 80154ae:	2b04      	cmp	r3, #4
 80154b0:	d1f9      	bne.n	80154a6 <STORAGE_Read_FS+0x2e>
	ret = 0;
 80154b2:	2300      	movs	r3, #0
 80154b4:	75fb      	strb	r3, [r7, #23]
	return ret;
 80154b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 80154ba:	4618      	mov	r0, r3
 80154bc:	3718      	adds	r7, #24
 80154be:	46bd      	mov	sp, r7
 80154c0:	bd80      	pop	{r7, pc}
 80154c2:	bf00      	nop
 80154c4:	24001294 	.word	0x24001294

080154c8 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80154c8:	b580      	push	{r7, lr}
 80154ca:	b088      	sub	sp, #32
 80154cc:	af02      	add	r7, sp, #8
 80154ce:	60b9      	str	r1, [r7, #8]
 80154d0:	607a      	str	r2, [r7, #4]
 80154d2:	461a      	mov	r2, r3
 80154d4:	4603      	mov	r3, r0
 80154d6:	73fb      	strb	r3, [r7, #15]
 80154d8:	4613      	mov	r3, r2
 80154da:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	int8_t ret = -1;
 80154dc:	23ff      	movs	r3, #255	; 0xff
 80154de:	75fb      	strb	r3, [r7, #23]

	HAL_SD_WriteBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 80154e0:	89ba      	ldrh	r2, [r7, #12]
 80154e2:	f04f 33ff 	mov.w	r3, #4294967295
 80154e6:	9300      	str	r3, [sp, #0]
 80154e8:	4613      	mov	r3, r2
 80154ea:	687a      	ldr	r2, [r7, #4]
 80154ec:	68b9      	ldr	r1, [r7, #8]
 80154ee:	4809      	ldr	r0, [pc, #36]	; (8015514 <STORAGE_Write_FS+0x4c>)
 80154f0:	f7f5 f8ca 	bl	800a688 <HAL_SD_WriteBlocks>


	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 80154f4:	bf00      	nop
 80154f6:	4807      	ldr	r0, [pc, #28]	; (8015514 <STORAGE_Write_FS+0x4c>)
 80154f8:	f7f6 f8a0 	bl	800b63c <HAL_SD_GetCardState>
 80154fc:	4603      	mov	r3, r0
 80154fe:	2b04      	cmp	r3, #4
 8015500:	d1f9      	bne.n	80154f6 <STORAGE_Write_FS+0x2e>
	ret = 0;
 8015502:	2300      	movs	r3, #0
 8015504:	75fb      	strb	r3, [r7, #23]
	return ret;
 8015506:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 801550a:	4618      	mov	r0, r3
 801550c:	3718      	adds	r7, #24
 801550e:	46bd      	mov	sp, r7
 8015510:	bd80      	pop	{r7, pc}
 8015512:	bf00      	nop
 8015514:	24001294 	.word	0x24001294

08015518 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8015518:	b480      	push	{r7}
 801551a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 801551c:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801551e:	4618      	mov	r0, r3
 8015520:	46bd      	mov	sp, r7
 8015522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015526:	4770      	bx	lr

08015528 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015528:	b580      	push	{r7, lr}
 801552a:	b08a      	sub	sp, #40	; 0x28
 801552c:	af00      	add	r7, sp, #0
 801552e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015530:	f107 0314 	add.w	r3, r7, #20
 8015534:	2200      	movs	r2, #0
 8015536:	601a      	str	r2, [r3, #0]
 8015538:	605a      	str	r2, [r3, #4]
 801553a:	609a      	str	r2, [r3, #8]
 801553c:	60da      	str	r2, [r3, #12]
 801553e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	681b      	ldr	r3, [r3, #0]
 8015544:	4a1e      	ldr	r2, [pc, #120]	; (80155c0 <HAL_PCD_MspInit+0x98>)
 8015546:	4293      	cmp	r3, r2
 8015548:	d136      	bne.n	80155b8 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801554a:	4b1e      	ldr	r3, [pc, #120]	; (80155c4 <HAL_PCD_MspInit+0x9c>)
 801554c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8015550:	4a1c      	ldr	r2, [pc, #112]	; (80155c4 <HAL_PCD_MspInit+0x9c>)
 8015552:	f043 0301 	orr.w	r3, r3, #1
 8015556:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801555a:	4b1a      	ldr	r3, [pc, #104]	; (80155c4 <HAL_PCD_MspInit+0x9c>)
 801555c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8015560:	f003 0301 	and.w	r3, r3, #1
 8015564:	613b      	str	r3, [r7, #16]
 8015566:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8015568:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801556c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801556e:	2302      	movs	r3, #2
 8015570:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015572:	2300      	movs	r3, #0
 8015574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015576:	2300      	movs	r3, #0
 8015578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801557a:	230a      	movs	r3, #10
 801557c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801557e:	f107 0314 	add.w	r3, r7, #20
 8015582:	4619      	mov	r1, r3
 8015584:	4810      	ldr	r0, [pc, #64]	; (80155c8 <HAL_PCD_MspInit+0xa0>)
 8015586:	f7f0 f85f 	bl	8005648 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801558a:	4b0e      	ldr	r3, [pc, #56]	; (80155c4 <HAL_PCD_MspInit+0x9c>)
 801558c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8015590:	4a0c      	ldr	r2, [pc, #48]	; (80155c4 <HAL_PCD_MspInit+0x9c>)
 8015592:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8015596:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801559a:	4b0a      	ldr	r3, [pc, #40]	; (80155c4 <HAL_PCD_MspInit+0x9c>)
 801559c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80155a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80155a4:	60fb      	str	r3, [r7, #12]
 80155a6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80155a8:	2200      	movs	r2, #0
 80155aa:	2100      	movs	r1, #0
 80155ac:	2065      	movs	r0, #101	; 0x65
 80155ae:	f7ec fe02 	bl	80021b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80155b2:	2065      	movs	r0, #101	; 0x65
 80155b4:	f7ec fe19 	bl	80021ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80155b8:	bf00      	nop
 80155ba:	3728      	adds	r7, #40	; 0x28
 80155bc:	46bd      	mov	sp, r7
 80155be:	bd80      	pop	{r7, pc}
 80155c0:	40080000 	.word	0x40080000
 80155c4:	58024400 	.word	0x58024400
 80155c8:	58020000 	.word	0x58020000

080155cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80155cc:	b580      	push	{r7, lr}
 80155ce:	b082      	sub	sp, #8
 80155d0:	af00      	add	r7, sp, #0
 80155d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80155e0:	4619      	mov	r1, r3
 80155e2:	4610      	mov	r0, r2
 80155e4:	f7fc fa89 	bl	8011afa <USBD_LL_SetupStage>
}
 80155e8:	bf00      	nop
 80155ea:	3708      	adds	r7, #8
 80155ec:	46bd      	mov	sp, r7
 80155ee:	bd80      	pop	{r7, pc}

080155f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80155f0:	b580      	push	{r7, lr}
 80155f2:	b082      	sub	sp, #8
 80155f4:	af00      	add	r7, sp, #0
 80155f6:	6078      	str	r0, [r7, #4]
 80155f8:	460b      	mov	r3, r1
 80155fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015602:	78fa      	ldrb	r2, [r7, #3]
 8015604:	6879      	ldr	r1, [r7, #4]
 8015606:	4613      	mov	r3, r2
 8015608:	00db      	lsls	r3, r3, #3
 801560a:	1a9b      	subs	r3, r3, r2
 801560c:	009b      	lsls	r3, r3, #2
 801560e:	440b      	add	r3, r1
 8015610:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8015614:	681a      	ldr	r2, [r3, #0]
 8015616:	78fb      	ldrb	r3, [r7, #3]
 8015618:	4619      	mov	r1, r3
 801561a:	f7fc fac1 	bl	8011ba0 <USBD_LL_DataOutStage>
}
 801561e:	bf00      	nop
 8015620:	3708      	adds	r7, #8
 8015622:	46bd      	mov	sp, r7
 8015624:	bd80      	pop	{r7, pc}

08015626 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015626:	b580      	push	{r7, lr}
 8015628:	b082      	sub	sp, #8
 801562a:	af00      	add	r7, sp, #0
 801562c:	6078      	str	r0, [r7, #4]
 801562e:	460b      	mov	r3, r1
 8015630:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015638:	78fa      	ldrb	r2, [r7, #3]
 801563a:	6879      	ldr	r1, [r7, #4]
 801563c:	4613      	mov	r3, r2
 801563e:	00db      	lsls	r3, r3, #3
 8015640:	1a9b      	subs	r3, r3, r2
 8015642:	009b      	lsls	r3, r3, #2
 8015644:	440b      	add	r3, r1
 8015646:	3348      	adds	r3, #72	; 0x48
 8015648:	681a      	ldr	r2, [r3, #0]
 801564a:	78fb      	ldrb	r3, [r7, #3]
 801564c:	4619      	mov	r1, r3
 801564e:	f7fc fb0a 	bl	8011c66 <USBD_LL_DataInStage>
}
 8015652:	bf00      	nop
 8015654:	3708      	adds	r7, #8
 8015656:	46bd      	mov	sp, r7
 8015658:	bd80      	pop	{r7, pc}

0801565a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801565a:	b580      	push	{r7, lr}
 801565c:	b082      	sub	sp, #8
 801565e:	af00      	add	r7, sp, #0
 8015660:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015668:	4618      	mov	r0, r3
 801566a:	f7fc fc0e 	bl	8011e8a <USBD_LL_SOF>
}
 801566e:	bf00      	nop
 8015670:	3708      	adds	r7, #8
 8015672:	46bd      	mov	sp, r7
 8015674:	bd80      	pop	{r7, pc}

08015676 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015676:	b580      	push	{r7, lr}
 8015678:	b084      	sub	sp, #16
 801567a:	af00      	add	r7, sp, #0
 801567c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801567e:	2301      	movs	r3, #1
 8015680:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	68db      	ldr	r3, [r3, #12]
 8015686:	2b00      	cmp	r3, #0
 8015688:	d102      	bne.n	8015690 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801568a:	2300      	movs	r3, #0
 801568c:	73fb      	strb	r3, [r7, #15]
 801568e:	e008      	b.n	80156a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	68db      	ldr	r3, [r3, #12]
 8015694:	2b02      	cmp	r3, #2
 8015696:	d102      	bne.n	801569e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015698:	2301      	movs	r3, #1
 801569a:	73fb      	strb	r3, [r7, #15]
 801569c:	e001      	b.n	80156a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801569e:	f7eb ffab 	bl	80015f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80156a8:	7bfa      	ldrb	r2, [r7, #15]
 80156aa:	4611      	mov	r1, r2
 80156ac:	4618      	mov	r0, r3
 80156ae:	f7fc fbb1 	bl	8011e14 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80156b8:	4618      	mov	r0, r3
 80156ba:	f7fc fb6a 	bl	8011d92 <USBD_LL_Reset>
}
 80156be:	bf00      	nop
 80156c0:	3710      	adds	r7, #16
 80156c2:	46bd      	mov	sp, r7
 80156c4:	bd80      	pop	{r7, pc}
	...

080156c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80156c8:	b580      	push	{r7, lr}
 80156ca:	b082      	sub	sp, #8
 80156cc:	af00      	add	r7, sp, #0
 80156ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80156d6:	4618      	mov	r0, r3
 80156d8:	f7fc fbac 	bl	8011e34 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	681b      	ldr	r3, [r3, #0]
 80156e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	687a      	ldr	r2, [r7, #4]
 80156e8:	6812      	ldr	r2, [r2, #0]
 80156ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80156ee:	f043 0301 	orr.w	r3, r3, #1
 80156f2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	6a1b      	ldr	r3, [r3, #32]
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d005      	beq.n	8015708 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80156fc:	4b04      	ldr	r3, [pc, #16]	; (8015710 <HAL_PCD_SuspendCallback+0x48>)
 80156fe:	691b      	ldr	r3, [r3, #16]
 8015700:	4a03      	ldr	r2, [pc, #12]	; (8015710 <HAL_PCD_SuspendCallback+0x48>)
 8015702:	f043 0306 	orr.w	r3, r3, #6
 8015706:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015708:	bf00      	nop
 801570a:	3708      	adds	r7, #8
 801570c:	46bd      	mov	sp, r7
 801570e:	bd80      	pop	{r7, pc}
 8015710:	e000ed00 	.word	0xe000ed00

08015714 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015714:	b580      	push	{r7, lr}
 8015716:	b082      	sub	sp, #8
 8015718:	af00      	add	r7, sp, #0
 801571a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015722:	4618      	mov	r0, r3
 8015724:	f7fc fb9b 	bl	8011e5e <USBD_LL_Resume>
}
 8015728:	bf00      	nop
 801572a:	3708      	adds	r7, #8
 801572c:	46bd      	mov	sp, r7
 801572e:	bd80      	pop	{r7, pc}

08015730 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015730:	b580      	push	{r7, lr}
 8015732:	b082      	sub	sp, #8
 8015734:	af00      	add	r7, sp, #0
 8015736:	6078      	str	r0, [r7, #4]
 8015738:	460b      	mov	r3, r1
 801573a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015742:	78fa      	ldrb	r2, [r7, #3]
 8015744:	4611      	mov	r1, r2
 8015746:	4618      	mov	r0, r3
 8015748:	f7fc fbc6 	bl	8011ed8 <USBD_LL_IsoOUTIncomplete>
}
 801574c:	bf00      	nop
 801574e:	3708      	adds	r7, #8
 8015750:	46bd      	mov	sp, r7
 8015752:	bd80      	pop	{r7, pc}

08015754 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015754:	b580      	push	{r7, lr}
 8015756:	b082      	sub	sp, #8
 8015758:	af00      	add	r7, sp, #0
 801575a:	6078      	str	r0, [r7, #4]
 801575c:	460b      	mov	r3, r1
 801575e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015766:	78fa      	ldrb	r2, [r7, #3]
 8015768:	4611      	mov	r1, r2
 801576a:	4618      	mov	r0, r3
 801576c:	f7fc fba7 	bl	8011ebe <USBD_LL_IsoINIncomplete>
}
 8015770:	bf00      	nop
 8015772:	3708      	adds	r7, #8
 8015774:	46bd      	mov	sp, r7
 8015776:	bd80      	pop	{r7, pc}

08015778 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015778:	b580      	push	{r7, lr}
 801577a:	b082      	sub	sp, #8
 801577c:	af00      	add	r7, sp, #0
 801577e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015786:	4618      	mov	r0, r3
 8015788:	f7fc fbb3 	bl	8011ef2 <USBD_LL_DevConnected>
}
 801578c:	bf00      	nop
 801578e:	3708      	adds	r7, #8
 8015790:	46bd      	mov	sp, r7
 8015792:	bd80      	pop	{r7, pc}

08015794 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015794:	b580      	push	{r7, lr}
 8015796:	b082      	sub	sp, #8
 8015798:	af00      	add	r7, sp, #0
 801579a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80157a2:	4618      	mov	r0, r3
 80157a4:	f7fc fbb0 	bl	8011f08 <USBD_LL_DevDisconnected>
}
 80157a8:	bf00      	nop
 80157aa:	3708      	adds	r7, #8
 80157ac:	46bd      	mov	sp, r7
 80157ae:	bd80      	pop	{r7, pc}

080157b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80157b0:	b580      	push	{r7, lr}
 80157b2:	b082      	sub	sp, #8
 80157b4:	af00      	add	r7, sp, #0
 80157b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	781b      	ldrb	r3, [r3, #0]
 80157bc:	2b00      	cmp	r3, #0
 80157be:	d13e      	bne.n	801583e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80157c0:	4a21      	ldr	r2, [pc, #132]	; (8015848 <USBD_LL_Init+0x98>)
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	4a1f      	ldr	r2, [pc, #124]	; (8015848 <USBD_LL_Init+0x98>)
 80157cc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80157d0:	4b1d      	ldr	r3, [pc, #116]	; (8015848 <USBD_LL_Init+0x98>)
 80157d2:	4a1e      	ldr	r2, [pc, #120]	; (801584c <USBD_LL_Init+0x9c>)
 80157d4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80157d6:	4b1c      	ldr	r3, [pc, #112]	; (8015848 <USBD_LL_Init+0x98>)
 80157d8:	2209      	movs	r2, #9
 80157da:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80157dc:	4b1a      	ldr	r3, [pc, #104]	; (8015848 <USBD_LL_Init+0x98>)
 80157de:	2202      	movs	r2, #2
 80157e0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80157e2:	4b19      	ldr	r3, [pc, #100]	; (8015848 <USBD_LL_Init+0x98>)
 80157e4:	2200      	movs	r2, #0
 80157e6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80157e8:	4b17      	ldr	r3, [pc, #92]	; (8015848 <USBD_LL_Init+0x98>)
 80157ea:	2202      	movs	r2, #2
 80157ec:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80157ee:	4b16      	ldr	r3, [pc, #88]	; (8015848 <USBD_LL_Init+0x98>)
 80157f0:	2200      	movs	r2, #0
 80157f2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80157f4:	4b14      	ldr	r3, [pc, #80]	; (8015848 <USBD_LL_Init+0x98>)
 80157f6:	2200      	movs	r2, #0
 80157f8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80157fa:	4b13      	ldr	r3, [pc, #76]	; (8015848 <USBD_LL_Init+0x98>)
 80157fc:	2200      	movs	r2, #0
 80157fe:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8015800:	4b11      	ldr	r3, [pc, #68]	; (8015848 <USBD_LL_Init+0x98>)
 8015802:	2200      	movs	r2, #0
 8015804:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8015806:	4b10      	ldr	r3, [pc, #64]	; (8015848 <USBD_LL_Init+0x98>)
 8015808:	2200      	movs	r2, #0
 801580a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801580c:	4b0e      	ldr	r3, [pc, #56]	; (8015848 <USBD_LL_Init+0x98>)
 801580e:	2200      	movs	r2, #0
 8015810:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8015812:	480d      	ldr	r0, [pc, #52]	; (8015848 <USBD_LL_Init+0x98>)
 8015814:	f7f0 f952 	bl	8005abc <HAL_PCD_Init>
 8015818:	4603      	mov	r3, r0
 801581a:	2b00      	cmp	r3, #0
 801581c:	d001      	beq.n	8015822 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801581e:	f7eb feeb 	bl	80015f8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8015822:	2180      	movs	r1, #128	; 0x80
 8015824:	4808      	ldr	r0, [pc, #32]	; (8015848 <USBD_LL_Init+0x98>)
 8015826:	f7f1 fb10 	bl	8006e4a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801582a:	2240      	movs	r2, #64	; 0x40
 801582c:	2100      	movs	r1, #0
 801582e:	4806      	ldr	r0, [pc, #24]	; (8015848 <USBD_LL_Init+0x98>)
 8015830:	f7f1 fac4 	bl	8006dbc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015834:	2280      	movs	r2, #128	; 0x80
 8015836:	2101      	movs	r1, #1
 8015838:	4803      	ldr	r0, [pc, #12]	; (8015848 <USBD_LL_Init+0x98>)
 801583a:	f7f1 fabf 	bl	8006dbc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801583e:	2300      	movs	r3, #0
}
 8015840:	4618      	mov	r0, r3
 8015842:	3708      	adds	r7, #8
 8015844:	46bd      	mov	sp, r7
 8015846:	bd80      	pop	{r7, pc}
 8015848:	24001f24 	.word	0x24001f24
 801584c:	40080000 	.word	0x40080000

08015850 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015850:	b580      	push	{r7, lr}
 8015852:	b084      	sub	sp, #16
 8015854:	af00      	add	r7, sp, #0
 8015856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015858:	2300      	movs	r3, #0
 801585a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801585c:	2300      	movs	r3, #0
 801585e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015866:	4618      	mov	r0, r3
 8015868:	f7f0 fa4c 	bl	8005d04 <HAL_PCD_Start>
 801586c:	4603      	mov	r3, r0
 801586e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015870:	7bfb      	ldrb	r3, [r7, #15]
 8015872:	4618      	mov	r0, r3
 8015874:	f000 f94a 	bl	8015b0c <USBD_Get_USB_Status>
 8015878:	4603      	mov	r3, r0
 801587a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801587c:	7bbb      	ldrb	r3, [r7, #14]
}
 801587e:	4618      	mov	r0, r3
 8015880:	3710      	adds	r7, #16
 8015882:	46bd      	mov	sp, r7
 8015884:	bd80      	pop	{r7, pc}

08015886 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015886:	b580      	push	{r7, lr}
 8015888:	b084      	sub	sp, #16
 801588a:	af00      	add	r7, sp, #0
 801588c:	6078      	str	r0, [r7, #4]
 801588e:	4608      	mov	r0, r1
 8015890:	4611      	mov	r1, r2
 8015892:	461a      	mov	r2, r3
 8015894:	4603      	mov	r3, r0
 8015896:	70fb      	strb	r3, [r7, #3]
 8015898:	460b      	mov	r3, r1
 801589a:	70bb      	strb	r3, [r7, #2]
 801589c:	4613      	mov	r3, r2
 801589e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80158a0:	2300      	movs	r3, #0
 80158a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80158a4:	2300      	movs	r3, #0
 80158a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80158ae:	78bb      	ldrb	r3, [r7, #2]
 80158b0:	883a      	ldrh	r2, [r7, #0]
 80158b2:	78f9      	ldrb	r1, [r7, #3]
 80158b4:	f7f0 fe5d 	bl	8006572 <HAL_PCD_EP_Open>
 80158b8:	4603      	mov	r3, r0
 80158ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80158bc:	7bfb      	ldrb	r3, [r7, #15]
 80158be:	4618      	mov	r0, r3
 80158c0:	f000 f924 	bl	8015b0c <USBD_Get_USB_Status>
 80158c4:	4603      	mov	r3, r0
 80158c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80158c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80158ca:	4618      	mov	r0, r3
 80158cc:	3710      	adds	r7, #16
 80158ce:	46bd      	mov	sp, r7
 80158d0:	bd80      	pop	{r7, pc}

080158d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80158d2:	b580      	push	{r7, lr}
 80158d4:	b084      	sub	sp, #16
 80158d6:	af00      	add	r7, sp, #0
 80158d8:	6078      	str	r0, [r7, #4]
 80158da:	460b      	mov	r3, r1
 80158dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80158de:	2300      	movs	r3, #0
 80158e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80158e2:	2300      	movs	r3, #0
 80158e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80158ec:	78fa      	ldrb	r2, [r7, #3]
 80158ee:	4611      	mov	r1, r2
 80158f0:	4618      	mov	r0, r3
 80158f2:	f7f0 fea6 	bl	8006642 <HAL_PCD_EP_Close>
 80158f6:	4603      	mov	r3, r0
 80158f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80158fa:	7bfb      	ldrb	r3, [r7, #15]
 80158fc:	4618      	mov	r0, r3
 80158fe:	f000 f905 	bl	8015b0c <USBD_Get_USB_Status>
 8015902:	4603      	mov	r3, r0
 8015904:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015906:	7bbb      	ldrb	r3, [r7, #14]
}
 8015908:	4618      	mov	r0, r3
 801590a:	3710      	adds	r7, #16
 801590c:	46bd      	mov	sp, r7
 801590e:	bd80      	pop	{r7, pc}

08015910 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015910:	b580      	push	{r7, lr}
 8015912:	b084      	sub	sp, #16
 8015914:	af00      	add	r7, sp, #0
 8015916:	6078      	str	r0, [r7, #4]
 8015918:	460b      	mov	r3, r1
 801591a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801591c:	2300      	movs	r3, #0
 801591e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015920:	2300      	movs	r3, #0
 8015922:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801592a:	78fa      	ldrb	r2, [r7, #3]
 801592c:	4611      	mov	r1, r2
 801592e:	4618      	mov	r0, r3
 8015930:	f7f1 f838 	bl	80069a4 <HAL_PCD_EP_Flush>
 8015934:	4603      	mov	r3, r0
 8015936:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015938:	7bfb      	ldrb	r3, [r7, #15]
 801593a:	4618      	mov	r0, r3
 801593c:	f000 f8e6 	bl	8015b0c <USBD_Get_USB_Status>
 8015940:	4603      	mov	r3, r0
 8015942:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015944:	7bbb      	ldrb	r3, [r7, #14]
}
 8015946:	4618      	mov	r0, r3
 8015948:	3710      	adds	r7, #16
 801594a:	46bd      	mov	sp, r7
 801594c:	bd80      	pop	{r7, pc}

0801594e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801594e:	b580      	push	{r7, lr}
 8015950:	b084      	sub	sp, #16
 8015952:	af00      	add	r7, sp, #0
 8015954:	6078      	str	r0, [r7, #4]
 8015956:	460b      	mov	r3, r1
 8015958:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801595a:	2300      	movs	r3, #0
 801595c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801595e:	2300      	movs	r3, #0
 8015960:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015968:	78fa      	ldrb	r2, [r7, #3]
 801596a:	4611      	mov	r1, r2
 801596c:	4618      	mov	r0, r3
 801596e:	f7f0 ff5f 	bl	8006830 <HAL_PCD_EP_SetStall>
 8015972:	4603      	mov	r3, r0
 8015974:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015976:	7bfb      	ldrb	r3, [r7, #15]
 8015978:	4618      	mov	r0, r3
 801597a:	f000 f8c7 	bl	8015b0c <USBD_Get_USB_Status>
 801597e:	4603      	mov	r3, r0
 8015980:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015982:	7bbb      	ldrb	r3, [r7, #14]
}
 8015984:	4618      	mov	r0, r3
 8015986:	3710      	adds	r7, #16
 8015988:	46bd      	mov	sp, r7
 801598a:	bd80      	pop	{r7, pc}

0801598c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801598c:	b580      	push	{r7, lr}
 801598e:	b084      	sub	sp, #16
 8015990:	af00      	add	r7, sp, #0
 8015992:	6078      	str	r0, [r7, #4]
 8015994:	460b      	mov	r3, r1
 8015996:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015998:	2300      	movs	r3, #0
 801599a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801599c:	2300      	movs	r3, #0
 801599e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80159a6:	78fa      	ldrb	r2, [r7, #3]
 80159a8:	4611      	mov	r1, r2
 80159aa:	4618      	mov	r0, r3
 80159ac:	f7f0 ffa4 	bl	80068f8 <HAL_PCD_EP_ClrStall>
 80159b0:	4603      	mov	r3, r0
 80159b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80159b4:	7bfb      	ldrb	r3, [r7, #15]
 80159b6:	4618      	mov	r0, r3
 80159b8:	f000 f8a8 	bl	8015b0c <USBD_Get_USB_Status>
 80159bc:	4603      	mov	r3, r0
 80159be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80159c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80159c2:	4618      	mov	r0, r3
 80159c4:	3710      	adds	r7, #16
 80159c6:	46bd      	mov	sp, r7
 80159c8:	bd80      	pop	{r7, pc}

080159ca <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80159ca:	b480      	push	{r7}
 80159cc:	b085      	sub	sp, #20
 80159ce:	af00      	add	r7, sp, #0
 80159d0:	6078      	str	r0, [r7, #4]
 80159d2:	460b      	mov	r3, r1
 80159d4:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80159dc:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80159de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	da0b      	bge.n	80159fe <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80159e6:	78fb      	ldrb	r3, [r7, #3]
 80159e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80159ec:	68f9      	ldr	r1, [r7, #12]
 80159ee:	4613      	mov	r3, r2
 80159f0:	00db      	lsls	r3, r3, #3
 80159f2:	1a9b      	subs	r3, r3, r2
 80159f4:	009b      	lsls	r3, r3, #2
 80159f6:	440b      	add	r3, r1
 80159f8:	333e      	adds	r3, #62	; 0x3e
 80159fa:	781b      	ldrb	r3, [r3, #0]
 80159fc:	e00b      	b.n	8015a16 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80159fe:	78fb      	ldrb	r3, [r7, #3]
 8015a00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015a04:	68f9      	ldr	r1, [r7, #12]
 8015a06:	4613      	mov	r3, r2
 8015a08:	00db      	lsls	r3, r3, #3
 8015a0a:	1a9b      	subs	r3, r3, r2
 8015a0c:	009b      	lsls	r3, r3, #2
 8015a0e:	440b      	add	r3, r1
 8015a10:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015a14:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015a16:	4618      	mov	r0, r3
 8015a18:	3714      	adds	r7, #20
 8015a1a:	46bd      	mov	sp, r7
 8015a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a20:	4770      	bx	lr

08015a22 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015a22:	b580      	push	{r7, lr}
 8015a24:	b084      	sub	sp, #16
 8015a26:	af00      	add	r7, sp, #0
 8015a28:	6078      	str	r0, [r7, #4]
 8015a2a:	460b      	mov	r3, r1
 8015a2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a2e:	2300      	movs	r3, #0
 8015a30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a32:	2300      	movs	r3, #0
 8015a34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015a3c:	78fa      	ldrb	r2, [r7, #3]
 8015a3e:	4611      	mov	r1, r2
 8015a40:	4618      	mov	r0, r3
 8015a42:	f7f0 fd71 	bl	8006528 <HAL_PCD_SetAddress>
 8015a46:	4603      	mov	r3, r0
 8015a48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a4a:	7bfb      	ldrb	r3, [r7, #15]
 8015a4c:	4618      	mov	r0, r3
 8015a4e:	f000 f85d 	bl	8015b0c <USBD_Get_USB_Status>
 8015a52:	4603      	mov	r3, r0
 8015a54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015a56:	7bbb      	ldrb	r3, [r7, #14]
}
 8015a58:	4618      	mov	r0, r3
 8015a5a:	3710      	adds	r7, #16
 8015a5c:	46bd      	mov	sp, r7
 8015a5e:	bd80      	pop	{r7, pc}

08015a60 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015a60:	b580      	push	{r7, lr}
 8015a62:	b086      	sub	sp, #24
 8015a64:	af00      	add	r7, sp, #0
 8015a66:	60f8      	str	r0, [r7, #12]
 8015a68:	607a      	str	r2, [r7, #4]
 8015a6a:	603b      	str	r3, [r7, #0]
 8015a6c:	460b      	mov	r3, r1
 8015a6e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a70:	2300      	movs	r3, #0
 8015a72:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a74:	2300      	movs	r3, #0
 8015a76:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015a78:	68fb      	ldr	r3, [r7, #12]
 8015a7a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015a7e:	7af9      	ldrb	r1, [r7, #11]
 8015a80:	683b      	ldr	r3, [r7, #0]
 8015a82:	687a      	ldr	r2, [r7, #4]
 8015a84:	f7f0 fe8a 	bl	800679c <HAL_PCD_EP_Transmit>
 8015a88:	4603      	mov	r3, r0
 8015a8a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a8c:	7dfb      	ldrb	r3, [r7, #23]
 8015a8e:	4618      	mov	r0, r3
 8015a90:	f000 f83c 	bl	8015b0c <USBD_Get_USB_Status>
 8015a94:	4603      	mov	r3, r0
 8015a96:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015a98:	7dbb      	ldrb	r3, [r7, #22]
}
 8015a9a:	4618      	mov	r0, r3
 8015a9c:	3718      	adds	r7, #24
 8015a9e:	46bd      	mov	sp, r7
 8015aa0:	bd80      	pop	{r7, pc}

08015aa2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015aa2:	b580      	push	{r7, lr}
 8015aa4:	b086      	sub	sp, #24
 8015aa6:	af00      	add	r7, sp, #0
 8015aa8:	60f8      	str	r0, [r7, #12]
 8015aaa:	607a      	str	r2, [r7, #4]
 8015aac:	603b      	str	r3, [r7, #0]
 8015aae:	460b      	mov	r3, r1
 8015ab0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015ab2:	2300      	movs	r3, #0
 8015ab4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ab6:	2300      	movs	r3, #0
 8015ab8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015aba:	68fb      	ldr	r3, [r7, #12]
 8015abc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015ac0:	7af9      	ldrb	r1, [r7, #11]
 8015ac2:	683b      	ldr	r3, [r7, #0]
 8015ac4:	687a      	ldr	r2, [r7, #4]
 8015ac6:	f7f0 fe06 	bl	80066d6 <HAL_PCD_EP_Receive>
 8015aca:	4603      	mov	r3, r0
 8015acc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015ace:	7dfb      	ldrb	r3, [r7, #23]
 8015ad0:	4618      	mov	r0, r3
 8015ad2:	f000 f81b 	bl	8015b0c <USBD_Get_USB_Status>
 8015ad6:	4603      	mov	r3, r0
 8015ad8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015ada:	7dbb      	ldrb	r3, [r7, #22]
}
 8015adc:	4618      	mov	r0, r3
 8015ade:	3718      	adds	r7, #24
 8015ae0:	46bd      	mov	sp, r7
 8015ae2:	bd80      	pop	{r7, pc}

08015ae4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015ae4:	b580      	push	{r7, lr}
 8015ae6:	b082      	sub	sp, #8
 8015ae8:	af00      	add	r7, sp, #0
 8015aea:	6078      	str	r0, [r7, #4]
 8015aec:	460b      	mov	r3, r1
 8015aee:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015af6:	78fa      	ldrb	r2, [r7, #3]
 8015af8:	4611      	mov	r1, r2
 8015afa:	4618      	mov	r0, r3
 8015afc:	f7f0 fe36 	bl	800676c <HAL_PCD_EP_GetRxCount>
 8015b00:	4603      	mov	r3, r0
}
 8015b02:	4618      	mov	r0, r3
 8015b04:	3708      	adds	r7, #8
 8015b06:	46bd      	mov	sp, r7
 8015b08:	bd80      	pop	{r7, pc}
	...

08015b0c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015b0c:	b480      	push	{r7}
 8015b0e:	b085      	sub	sp, #20
 8015b10:	af00      	add	r7, sp, #0
 8015b12:	4603      	mov	r3, r0
 8015b14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b16:	2300      	movs	r3, #0
 8015b18:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015b1a:	79fb      	ldrb	r3, [r7, #7]
 8015b1c:	2b03      	cmp	r3, #3
 8015b1e:	d817      	bhi.n	8015b50 <USBD_Get_USB_Status+0x44>
 8015b20:	a201      	add	r2, pc, #4	; (adr r2, 8015b28 <USBD_Get_USB_Status+0x1c>)
 8015b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b26:	bf00      	nop
 8015b28:	08015b39 	.word	0x08015b39
 8015b2c:	08015b3f 	.word	0x08015b3f
 8015b30:	08015b45 	.word	0x08015b45
 8015b34:	08015b4b 	.word	0x08015b4b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015b38:	2300      	movs	r3, #0
 8015b3a:	73fb      	strb	r3, [r7, #15]
    break;
 8015b3c:	e00b      	b.n	8015b56 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015b3e:	2303      	movs	r3, #3
 8015b40:	73fb      	strb	r3, [r7, #15]
    break;
 8015b42:	e008      	b.n	8015b56 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015b44:	2301      	movs	r3, #1
 8015b46:	73fb      	strb	r3, [r7, #15]
    break;
 8015b48:	e005      	b.n	8015b56 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015b4a:	2303      	movs	r3, #3
 8015b4c:	73fb      	strb	r3, [r7, #15]
    break;
 8015b4e:	e002      	b.n	8015b56 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015b50:	2303      	movs	r3, #3
 8015b52:	73fb      	strb	r3, [r7, #15]
    break;
 8015b54:	bf00      	nop
  }
  return usb_status;
 8015b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b58:	4618      	mov	r0, r3
 8015b5a:	3714      	adds	r7, #20
 8015b5c:	46bd      	mov	sp, r7
 8015b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b62:	4770      	bx	lr

08015b64 <__errno>:
 8015b64:	4b01      	ldr	r3, [pc, #4]	; (8015b6c <__errno+0x8>)
 8015b66:	6818      	ldr	r0, [r3, #0]
 8015b68:	4770      	bx	lr
 8015b6a:	bf00      	nop
 8015b6c:	2400016c 	.word	0x2400016c

08015b70 <__libc_init_array>:
 8015b70:	b570      	push	{r4, r5, r6, lr}
 8015b72:	4e0d      	ldr	r6, [pc, #52]	; (8015ba8 <__libc_init_array+0x38>)
 8015b74:	4c0d      	ldr	r4, [pc, #52]	; (8015bac <__libc_init_array+0x3c>)
 8015b76:	1ba4      	subs	r4, r4, r6
 8015b78:	10a4      	asrs	r4, r4, #2
 8015b7a:	2500      	movs	r5, #0
 8015b7c:	42a5      	cmp	r5, r4
 8015b7e:	d109      	bne.n	8015b94 <__libc_init_array+0x24>
 8015b80:	4e0b      	ldr	r6, [pc, #44]	; (8015bb0 <__libc_init_array+0x40>)
 8015b82:	4c0c      	ldr	r4, [pc, #48]	; (8015bb4 <__libc_init_array+0x44>)
 8015b84:	f001 f952 	bl	8016e2c <_init>
 8015b88:	1ba4      	subs	r4, r4, r6
 8015b8a:	10a4      	asrs	r4, r4, #2
 8015b8c:	2500      	movs	r5, #0
 8015b8e:	42a5      	cmp	r5, r4
 8015b90:	d105      	bne.n	8015b9e <__libc_init_array+0x2e>
 8015b92:	bd70      	pop	{r4, r5, r6, pc}
 8015b94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015b98:	4798      	blx	r3
 8015b9a:	3501      	adds	r5, #1
 8015b9c:	e7ee      	b.n	8015b7c <__libc_init_array+0xc>
 8015b9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015ba2:	4798      	blx	r3
 8015ba4:	3501      	adds	r5, #1
 8015ba6:	e7f2      	b.n	8015b8e <__libc_init_array+0x1e>
 8015ba8:	08017238 	.word	0x08017238
 8015bac:	08017238 	.word	0x08017238
 8015bb0:	08017238 	.word	0x08017238
 8015bb4:	0801723c 	.word	0x0801723c

08015bb8 <malloc>:
 8015bb8:	4b02      	ldr	r3, [pc, #8]	; (8015bc4 <malloc+0xc>)
 8015bba:	4601      	mov	r1, r0
 8015bbc:	6818      	ldr	r0, [r3, #0]
 8015bbe:	f000 b86d 	b.w	8015c9c <_malloc_r>
 8015bc2:	bf00      	nop
 8015bc4:	2400016c 	.word	0x2400016c

08015bc8 <free>:
 8015bc8:	4b02      	ldr	r3, [pc, #8]	; (8015bd4 <free+0xc>)
 8015bca:	4601      	mov	r1, r0
 8015bcc:	6818      	ldr	r0, [r3, #0]
 8015bce:	f000 b817 	b.w	8015c00 <_free_r>
 8015bd2:	bf00      	nop
 8015bd4:	2400016c 	.word	0x2400016c

08015bd8 <memcpy>:
 8015bd8:	b510      	push	{r4, lr}
 8015bda:	1e43      	subs	r3, r0, #1
 8015bdc:	440a      	add	r2, r1
 8015bde:	4291      	cmp	r1, r2
 8015be0:	d100      	bne.n	8015be4 <memcpy+0xc>
 8015be2:	bd10      	pop	{r4, pc}
 8015be4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015be8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015bec:	e7f7      	b.n	8015bde <memcpy+0x6>

08015bee <memset>:
 8015bee:	4402      	add	r2, r0
 8015bf0:	4603      	mov	r3, r0
 8015bf2:	4293      	cmp	r3, r2
 8015bf4:	d100      	bne.n	8015bf8 <memset+0xa>
 8015bf6:	4770      	bx	lr
 8015bf8:	f803 1b01 	strb.w	r1, [r3], #1
 8015bfc:	e7f9      	b.n	8015bf2 <memset+0x4>
	...

08015c00 <_free_r>:
 8015c00:	b538      	push	{r3, r4, r5, lr}
 8015c02:	4605      	mov	r5, r0
 8015c04:	2900      	cmp	r1, #0
 8015c06:	d045      	beq.n	8015c94 <_free_r+0x94>
 8015c08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015c0c:	1f0c      	subs	r4, r1, #4
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	bfb8      	it	lt
 8015c12:	18e4      	addlt	r4, r4, r3
 8015c14:	f000 fbfa 	bl	801640c <__malloc_lock>
 8015c18:	4a1f      	ldr	r2, [pc, #124]	; (8015c98 <_free_r+0x98>)
 8015c1a:	6813      	ldr	r3, [r2, #0]
 8015c1c:	4610      	mov	r0, r2
 8015c1e:	b933      	cbnz	r3, 8015c2e <_free_r+0x2e>
 8015c20:	6063      	str	r3, [r4, #4]
 8015c22:	6014      	str	r4, [r2, #0]
 8015c24:	4628      	mov	r0, r5
 8015c26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015c2a:	f000 bbf0 	b.w	801640e <__malloc_unlock>
 8015c2e:	42a3      	cmp	r3, r4
 8015c30:	d90c      	bls.n	8015c4c <_free_r+0x4c>
 8015c32:	6821      	ldr	r1, [r4, #0]
 8015c34:	1862      	adds	r2, r4, r1
 8015c36:	4293      	cmp	r3, r2
 8015c38:	bf04      	itt	eq
 8015c3a:	681a      	ldreq	r2, [r3, #0]
 8015c3c:	685b      	ldreq	r3, [r3, #4]
 8015c3e:	6063      	str	r3, [r4, #4]
 8015c40:	bf04      	itt	eq
 8015c42:	1852      	addeq	r2, r2, r1
 8015c44:	6022      	streq	r2, [r4, #0]
 8015c46:	6004      	str	r4, [r0, #0]
 8015c48:	e7ec      	b.n	8015c24 <_free_r+0x24>
 8015c4a:	4613      	mov	r3, r2
 8015c4c:	685a      	ldr	r2, [r3, #4]
 8015c4e:	b10a      	cbz	r2, 8015c54 <_free_r+0x54>
 8015c50:	42a2      	cmp	r2, r4
 8015c52:	d9fa      	bls.n	8015c4a <_free_r+0x4a>
 8015c54:	6819      	ldr	r1, [r3, #0]
 8015c56:	1858      	adds	r0, r3, r1
 8015c58:	42a0      	cmp	r0, r4
 8015c5a:	d10b      	bne.n	8015c74 <_free_r+0x74>
 8015c5c:	6820      	ldr	r0, [r4, #0]
 8015c5e:	4401      	add	r1, r0
 8015c60:	1858      	adds	r0, r3, r1
 8015c62:	4282      	cmp	r2, r0
 8015c64:	6019      	str	r1, [r3, #0]
 8015c66:	d1dd      	bne.n	8015c24 <_free_r+0x24>
 8015c68:	6810      	ldr	r0, [r2, #0]
 8015c6a:	6852      	ldr	r2, [r2, #4]
 8015c6c:	605a      	str	r2, [r3, #4]
 8015c6e:	4401      	add	r1, r0
 8015c70:	6019      	str	r1, [r3, #0]
 8015c72:	e7d7      	b.n	8015c24 <_free_r+0x24>
 8015c74:	d902      	bls.n	8015c7c <_free_r+0x7c>
 8015c76:	230c      	movs	r3, #12
 8015c78:	602b      	str	r3, [r5, #0]
 8015c7a:	e7d3      	b.n	8015c24 <_free_r+0x24>
 8015c7c:	6820      	ldr	r0, [r4, #0]
 8015c7e:	1821      	adds	r1, r4, r0
 8015c80:	428a      	cmp	r2, r1
 8015c82:	bf04      	itt	eq
 8015c84:	6811      	ldreq	r1, [r2, #0]
 8015c86:	6852      	ldreq	r2, [r2, #4]
 8015c88:	6062      	str	r2, [r4, #4]
 8015c8a:	bf04      	itt	eq
 8015c8c:	1809      	addeq	r1, r1, r0
 8015c8e:	6021      	streq	r1, [r4, #0]
 8015c90:	605c      	str	r4, [r3, #4]
 8015c92:	e7c7      	b.n	8015c24 <_free_r+0x24>
 8015c94:	bd38      	pop	{r3, r4, r5, pc}
 8015c96:	bf00      	nop
 8015c98:	24000a3c 	.word	0x24000a3c

08015c9c <_malloc_r>:
 8015c9c:	b570      	push	{r4, r5, r6, lr}
 8015c9e:	1ccd      	adds	r5, r1, #3
 8015ca0:	f025 0503 	bic.w	r5, r5, #3
 8015ca4:	3508      	adds	r5, #8
 8015ca6:	2d0c      	cmp	r5, #12
 8015ca8:	bf38      	it	cc
 8015caa:	250c      	movcc	r5, #12
 8015cac:	2d00      	cmp	r5, #0
 8015cae:	4606      	mov	r6, r0
 8015cb0:	db01      	blt.n	8015cb6 <_malloc_r+0x1a>
 8015cb2:	42a9      	cmp	r1, r5
 8015cb4:	d903      	bls.n	8015cbe <_malloc_r+0x22>
 8015cb6:	230c      	movs	r3, #12
 8015cb8:	6033      	str	r3, [r6, #0]
 8015cba:	2000      	movs	r0, #0
 8015cbc:	bd70      	pop	{r4, r5, r6, pc}
 8015cbe:	f000 fba5 	bl	801640c <__malloc_lock>
 8015cc2:	4a21      	ldr	r2, [pc, #132]	; (8015d48 <_malloc_r+0xac>)
 8015cc4:	6814      	ldr	r4, [r2, #0]
 8015cc6:	4621      	mov	r1, r4
 8015cc8:	b991      	cbnz	r1, 8015cf0 <_malloc_r+0x54>
 8015cca:	4c20      	ldr	r4, [pc, #128]	; (8015d4c <_malloc_r+0xb0>)
 8015ccc:	6823      	ldr	r3, [r4, #0]
 8015cce:	b91b      	cbnz	r3, 8015cd8 <_malloc_r+0x3c>
 8015cd0:	4630      	mov	r0, r6
 8015cd2:	f000 f8b9 	bl	8015e48 <_sbrk_r>
 8015cd6:	6020      	str	r0, [r4, #0]
 8015cd8:	4629      	mov	r1, r5
 8015cda:	4630      	mov	r0, r6
 8015cdc:	f000 f8b4 	bl	8015e48 <_sbrk_r>
 8015ce0:	1c43      	adds	r3, r0, #1
 8015ce2:	d124      	bne.n	8015d2e <_malloc_r+0x92>
 8015ce4:	230c      	movs	r3, #12
 8015ce6:	6033      	str	r3, [r6, #0]
 8015ce8:	4630      	mov	r0, r6
 8015cea:	f000 fb90 	bl	801640e <__malloc_unlock>
 8015cee:	e7e4      	b.n	8015cba <_malloc_r+0x1e>
 8015cf0:	680b      	ldr	r3, [r1, #0]
 8015cf2:	1b5b      	subs	r3, r3, r5
 8015cf4:	d418      	bmi.n	8015d28 <_malloc_r+0x8c>
 8015cf6:	2b0b      	cmp	r3, #11
 8015cf8:	d90f      	bls.n	8015d1a <_malloc_r+0x7e>
 8015cfa:	600b      	str	r3, [r1, #0]
 8015cfc:	50cd      	str	r5, [r1, r3]
 8015cfe:	18cc      	adds	r4, r1, r3
 8015d00:	4630      	mov	r0, r6
 8015d02:	f000 fb84 	bl	801640e <__malloc_unlock>
 8015d06:	f104 000b 	add.w	r0, r4, #11
 8015d0a:	1d23      	adds	r3, r4, #4
 8015d0c:	f020 0007 	bic.w	r0, r0, #7
 8015d10:	1ac3      	subs	r3, r0, r3
 8015d12:	d0d3      	beq.n	8015cbc <_malloc_r+0x20>
 8015d14:	425a      	negs	r2, r3
 8015d16:	50e2      	str	r2, [r4, r3]
 8015d18:	e7d0      	b.n	8015cbc <_malloc_r+0x20>
 8015d1a:	428c      	cmp	r4, r1
 8015d1c:	684b      	ldr	r3, [r1, #4]
 8015d1e:	bf16      	itet	ne
 8015d20:	6063      	strne	r3, [r4, #4]
 8015d22:	6013      	streq	r3, [r2, #0]
 8015d24:	460c      	movne	r4, r1
 8015d26:	e7eb      	b.n	8015d00 <_malloc_r+0x64>
 8015d28:	460c      	mov	r4, r1
 8015d2a:	6849      	ldr	r1, [r1, #4]
 8015d2c:	e7cc      	b.n	8015cc8 <_malloc_r+0x2c>
 8015d2e:	1cc4      	adds	r4, r0, #3
 8015d30:	f024 0403 	bic.w	r4, r4, #3
 8015d34:	42a0      	cmp	r0, r4
 8015d36:	d005      	beq.n	8015d44 <_malloc_r+0xa8>
 8015d38:	1a21      	subs	r1, r4, r0
 8015d3a:	4630      	mov	r0, r6
 8015d3c:	f000 f884 	bl	8015e48 <_sbrk_r>
 8015d40:	3001      	adds	r0, #1
 8015d42:	d0cf      	beq.n	8015ce4 <_malloc_r+0x48>
 8015d44:	6025      	str	r5, [r4, #0]
 8015d46:	e7db      	b.n	8015d00 <_malloc_r+0x64>
 8015d48:	24000a3c 	.word	0x24000a3c
 8015d4c:	24000a40 	.word	0x24000a40

08015d50 <iprintf>:
 8015d50:	b40f      	push	{r0, r1, r2, r3}
 8015d52:	4b0a      	ldr	r3, [pc, #40]	; (8015d7c <iprintf+0x2c>)
 8015d54:	b513      	push	{r0, r1, r4, lr}
 8015d56:	681c      	ldr	r4, [r3, #0]
 8015d58:	b124      	cbz	r4, 8015d64 <iprintf+0x14>
 8015d5a:	69a3      	ldr	r3, [r4, #24]
 8015d5c:	b913      	cbnz	r3, 8015d64 <iprintf+0x14>
 8015d5e:	4620      	mov	r0, r4
 8015d60:	f000 fa66 	bl	8016230 <__sinit>
 8015d64:	ab05      	add	r3, sp, #20
 8015d66:	9a04      	ldr	r2, [sp, #16]
 8015d68:	68a1      	ldr	r1, [r4, #8]
 8015d6a:	9301      	str	r3, [sp, #4]
 8015d6c:	4620      	mov	r0, r4
 8015d6e:	f000 fccb 	bl	8016708 <_vfiprintf_r>
 8015d72:	b002      	add	sp, #8
 8015d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015d78:	b004      	add	sp, #16
 8015d7a:	4770      	bx	lr
 8015d7c:	2400016c 	.word	0x2400016c

08015d80 <_puts_r>:
 8015d80:	b570      	push	{r4, r5, r6, lr}
 8015d82:	460e      	mov	r6, r1
 8015d84:	4605      	mov	r5, r0
 8015d86:	b118      	cbz	r0, 8015d90 <_puts_r+0x10>
 8015d88:	6983      	ldr	r3, [r0, #24]
 8015d8a:	b90b      	cbnz	r3, 8015d90 <_puts_r+0x10>
 8015d8c:	f000 fa50 	bl	8016230 <__sinit>
 8015d90:	69ab      	ldr	r3, [r5, #24]
 8015d92:	68ac      	ldr	r4, [r5, #8]
 8015d94:	b913      	cbnz	r3, 8015d9c <_puts_r+0x1c>
 8015d96:	4628      	mov	r0, r5
 8015d98:	f000 fa4a 	bl	8016230 <__sinit>
 8015d9c:	4b23      	ldr	r3, [pc, #140]	; (8015e2c <_puts_r+0xac>)
 8015d9e:	429c      	cmp	r4, r3
 8015da0:	d117      	bne.n	8015dd2 <_puts_r+0x52>
 8015da2:	686c      	ldr	r4, [r5, #4]
 8015da4:	89a3      	ldrh	r3, [r4, #12]
 8015da6:	071b      	lsls	r3, r3, #28
 8015da8:	d51d      	bpl.n	8015de6 <_puts_r+0x66>
 8015daa:	6923      	ldr	r3, [r4, #16]
 8015dac:	b1db      	cbz	r3, 8015de6 <_puts_r+0x66>
 8015dae:	3e01      	subs	r6, #1
 8015db0:	68a3      	ldr	r3, [r4, #8]
 8015db2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015db6:	3b01      	subs	r3, #1
 8015db8:	60a3      	str	r3, [r4, #8]
 8015dba:	b9e9      	cbnz	r1, 8015df8 <_puts_r+0x78>
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	da2e      	bge.n	8015e1e <_puts_r+0x9e>
 8015dc0:	4622      	mov	r2, r4
 8015dc2:	210a      	movs	r1, #10
 8015dc4:	4628      	mov	r0, r5
 8015dc6:	f000 f883 	bl	8015ed0 <__swbuf_r>
 8015dca:	3001      	adds	r0, #1
 8015dcc:	d011      	beq.n	8015df2 <_puts_r+0x72>
 8015dce:	200a      	movs	r0, #10
 8015dd0:	e011      	b.n	8015df6 <_puts_r+0x76>
 8015dd2:	4b17      	ldr	r3, [pc, #92]	; (8015e30 <_puts_r+0xb0>)
 8015dd4:	429c      	cmp	r4, r3
 8015dd6:	d101      	bne.n	8015ddc <_puts_r+0x5c>
 8015dd8:	68ac      	ldr	r4, [r5, #8]
 8015dda:	e7e3      	b.n	8015da4 <_puts_r+0x24>
 8015ddc:	4b15      	ldr	r3, [pc, #84]	; (8015e34 <_puts_r+0xb4>)
 8015dde:	429c      	cmp	r4, r3
 8015de0:	bf08      	it	eq
 8015de2:	68ec      	ldreq	r4, [r5, #12]
 8015de4:	e7de      	b.n	8015da4 <_puts_r+0x24>
 8015de6:	4621      	mov	r1, r4
 8015de8:	4628      	mov	r0, r5
 8015dea:	f000 f8c3 	bl	8015f74 <__swsetup_r>
 8015dee:	2800      	cmp	r0, #0
 8015df0:	d0dd      	beq.n	8015dae <_puts_r+0x2e>
 8015df2:	f04f 30ff 	mov.w	r0, #4294967295
 8015df6:	bd70      	pop	{r4, r5, r6, pc}
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	da04      	bge.n	8015e06 <_puts_r+0x86>
 8015dfc:	69a2      	ldr	r2, [r4, #24]
 8015dfe:	429a      	cmp	r2, r3
 8015e00:	dc06      	bgt.n	8015e10 <_puts_r+0x90>
 8015e02:	290a      	cmp	r1, #10
 8015e04:	d004      	beq.n	8015e10 <_puts_r+0x90>
 8015e06:	6823      	ldr	r3, [r4, #0]
 8015e08:	1c5a      	adds	r2, r3, #1
 8015e0a:	6022      	str	r2, [r4, #0]
 8015e0c:	7019      	strb	r1, [r3, #0]
 8015e0e:	e7cf      	b.n	8015db0 <_puts_r+0x30>
 8015e10:	4622      	mov	r2, r4
 8015e12:	4628      	mov	r0, r5
 8015e14:	f000 f85c 	bl	8015ed0 <__swbuf_r>
 8015e18:	3001      	adds	r0, #1
 8015e1a:	d1c9      	bne.n	8015db0 <_puts_r+0x30>
 8015e1c:	e7e9      	b.n	8015df2 <_puts_r+0x72>
 8015e1e:	6823      	ldr	r3, [r4, #0]
 8015e20:	200a      	movs	r0, #10
 8015e22:	1c5a      	adds	r2, r3, #1
 8015e24:	6022      	str	r2, [r4, #0]
 8015e26:	7018      	strb	r0, [r3, #0]
 8015e28:	e7e5      	b.n	8015df6 <_puts_r+0x76>
 8015e2a:	bf00      	nop
 8015e2c:	080171bc 	.word	0x080171bc
 8015e30:	080171dc 	.word	0x080171dc
 8015e34:	0801719c 	.word	0x0801719c

08015e38 <puts>:
 8015e38:	4b02      	ldr	r3, [pc, #8]	; (8015e44 <puts+0xc>)
 8015e3a:	4601      	mov	r1, r0
 8015e3c:	6818      	ldr	r0, [r3, #0]
 8015e3e:	f7ff bf9f 	b.w	8015d80 <_puts_r>
 8015e42:	bf00      	nop
 8015e44:	2400016c 	.word	0x2400016c

08015e48 <_sbrk_r>:
 8015e48:	b538      	push	{r3, r4, r5, lr}
 8015e4a:	4c06      	ldr	r4, [pc, #24]	; (8015e64 <_sbrk_r+0x1c>)
 8015e4c:	2300      	movs	r3, #0
 8015e4e:	4605      	mov	r5, r0
 8015e50:	4608      	mov	r0, r1
 8015e52:	6023      	str	r3, [r4, #0]
 8015e54:	f7eb ff28 	bl	8001ca8 <_sbrk>
 8015e58:	1c43      	adds	r3, r0, #1
 8015e5a:	d102      	bne.n	8015e62 <_sbrk_r+0x1a>
 8015e5c:	6823      	ldr	r3, [r4, #0]
 8015e5e:	b103      	cbz	r3, 8015e62 <_sbrk_r+0x1a>
 8015e60:	602b      	str	r3, [r5, #0]
 8015e62:	bd38      	pop	{r3, r4, r5, pc}
 8015e64:	2400232c 	.word	0x2400232c

08015e68 <sniprintf>:
 8015e68:	b40c      	push	{r2, r3}
 8015e6a:	b530      	push	{r4, r5, lr}
 8015e6c:	4b17      	ldr	r3, [pc, #92]	; (8015ecc <sniprintf+0x64>)
 8015e6e:	1e0c      	subs	r4, r1, #0
 8015e70:	b09d      	sub	sp, #116	; 0x74
 8015e72:	681d      	ldr	r5, [r3, #0]
 8015e74:	da08      	bge.n	8015e88 <sniprintf+0x20>
 8015e76:	238b      	movs	r3, #139	; 0x8b
 8015e78:	602b      	str	r3, [r5, #0]
 8015e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8015e7e:	b01d      	add	sp, #116	; 0x74
 8015e80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015e84:	b002      	add	sp, #8
 8015e86:	4770      	bx	lr
 8015e88:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015e8c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015e90:	bf14      	ite	ne
 8015e92:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015e96:	4623      	moveq	r3, r4
 8015e98:	9304      	str	r3, [sp, #16]
 8015e9a:	9307      	str	r3, [sp, #28]
 8015e9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015ea0:	9002      	str	r0, [sp, #8]
 8015ea2:	9006      	str	r0, [sp, #24]
 8015ea4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015ea8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015eaa:	ab21      	add	r3, sp, #132	; 0x84
 8015eac:	a902      	add	r1, sp, #8
 8015eae:	4628      	mov	r0, r5
 8015eb0:	9301      	str	r3, [sp, #4]
 8015eb2:	f000 fb07 	bl	80164c4 <_svfiprintf_r>
 8015eb6:	1c43      	adds	r3, r0, #1
 8015eb8:	bfbc      	itt	lt
 8015eba:	238b      	movlt	r3, #139	; 0x8b
 8015ebc:	602b      	strlt	r3, [r5, #0]
 8015ebe:	2c00      	cmp	r4, #0
 8015ec0:	d0dd      	beq.n	8015e7e <sniprintf+0x16>
 8015ec2:	9b02      	ldr	r3, [sp, #8]
 8015ec4:	2200      	movs	r2, #0
 8015ec6:	701a      	strb	r2, [r3, #0]
 8015ec8:	e7d9      	b.n	8015e7e <sniprintf+0x16>
 8015eca:	bf00      	nop
 8015ecc:	2400016c 	.word	0x2400016c

08015ed0 <__swbuf_r>:
 8015ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ed2:	460e      	mov	r6, r1
 8015ed4:	4614      	mov	r4, r2
 8015ed6:	4605      	mov	r5, r0
 8015ed8:	b118      	cbz	r0, 8015ee2 <__swbuf_r+0x12>
 8015eda:	6983      	ldr	r3, [r0, #24]
 8015edc:	b90b      	cbnz	r3, 8015ee2 <__swbuf_r+0x12>
 8015ede:	f000 f9a7 	bl	8016230 <__sinit>
 8015ee2:	4b21      	ldr	r3, [pc, #132]	; (8015f68 <__swbuf_r+0x98>)
 8015ee4:	429c      	cmp	r4, r3
 8015ee6:	d12a      	bne.n	8015f3e <__swbuf_r+0x6e>
 8015ee8:	686c      	ldr	r4, [r5, #4]
 8015eea:	69a3      	ldr	r3, [r4, #24]
 8015eec:	60a3      	str	r3, [r4, #8]
 8015eee:	89a3      	ldrh	r3, [r4, #12]
 8015ef0:	071a      	lsls	r2, r3, #28
 8015ef2:	d52e      	bpl.n	8015f52 <__swbuf_r+0x82>
 8015ef4:	6923      	ldr	r3, [r4, #16]
 8015ef6:	b363      	cbz	r3, 8015f52 <__swbuf_r+0x82>
 8015ef8:	6923      	ldr	r3, [r4, #16]
 8015efa:	6820      	ldr	r0, [r4, #0]
 8015efc:	1ac0      	subs	r0, r0, r3
 8015efe:	6963      	ldr	r3, [r4, #20]
 8015f00:	b2f6      	uxtb	r6, r6
 8015f02:	4283      	cmp	r3, r0
 8015f04:	4637      	mov	r7, r6
 8015f06:	dc04      	bgt.n	8015f12 <__swbuf_r+0x42>
 8015f08:	4621      	mov	r1, r4
 8015f0a:	4628      	mov	r0, r5
 8015f0c:	f000 f926 	bl	801615c <_fflush_r>
 8015f10:	bb28      	cbnz	r0, 8015f5e <__swbuf_r+0x8e>
 8015f12:	68a3      	ldr	r3, [r4, #8]
 8015f14:	3b01      	subs	r3, #1
 8015f16:	60a3      	str	r3, [r4, #8]
 8015f18:	6823      	ldr	r3, [r4, #0]
 8015f1a:	1c5a      	adds	r2, r3, #1
 8015f1c:	6022      	str	r2, [r4, #0]
 8015f1e:	701e      	strb	r6, [r3, #0]
 8015f20:	6963      	ldr	r3, [r4, #20]
 8015f22:	3001      	adds	r0, #1
 8015f24:	4283      	cmp	r3, r0
 8015f26:	d004      	beq.n	8015f32 <__swbuf_r+0x62>
 8015f28:	89a3      	ldrh	r3, [r4, #12]
 8015f2a:	07db      	lsls	r3, r3, #31
 8015f2c:	d519      	bpl.n	8015f62 <__swbuf_r+0x92>
 8015f2e:	2e0a      	cmp	r6, #10
 8015f30:	d117      	bne.n	8015f62 <__swbuf_r+0x92>
 8015f32:	4621      	mov	r1, r4
 8015f34:	4628      	mov	r0, r5
 8015f36:	f000 f911 	bl	801615c <_fflush_r>
 8015f3a:	b190      	cbz	r0, 8015f62 <__swbuf_r+0x92>
 8015f3c:	e00f      	b.n	8015f5e <__swbuf_r+0x8e>
 8015f3e:	4b0b      	ldr	r3, [pc, #44]	; (8015f6c <__swbuf_r+0x9c>)
 8015f40:	429c      	cmp	r4, r3
 8015f42:	d101      	bne.n	8015f48 <__swbuf_r+0x78>
 8015f44:	68ac      	ldr	r4, [r5, #8]
 8015f46:	e7d0      	b.n	8015eea <__swbuf_r+0x1a>
 8015f48:	4b09      	ldr	r3, [pc, #36]	; (8015f70 <__swbuf_r+0xa0>)
 8015f4a:	429c      	cmp	r4, r3
 8015f4c:	bf08      	it	eq
 8015f4e:	68ec      	ldreq	r4, [r5, #12]
 8015f50:	e7cb      	b.n	8015eea <__swbuf_r+0x1a>
 8015f52:	4621      	mov	r1, r4
 8015f54:	4628      	mov	r0, r5
 8015f56:	f000 f80d 	bl	8015f74 <__swsetup_r>
 8015f5a:	2800      	cmp	r0, #0
 8015f5c:	d0cc      	beq.n	8015ef8 <__swbuf_r+0x28>
 8015f5e:	f04f 37ff 	mov.w	r7, #4294967295
 8015f62:	4638      	mov	r0, r7
 8015f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015f66:	bf00      	nop
 8015f68:	080171bc 	.word	0x080171bc
 8015f6c:	080171dc 	.word	0x080171dc
 8015f70:	0801719c 	.word	0x0801719c

08015f74 <__swsetup_r>:
 8015f74:	4b32      	ldr	r3, [pc, #200]	; (8016040 <__swsetup_r+0xcc>)
 8015f76:	b570      	push	{r4, r5, r6, lr}
 8015f78:	681d      	ldr	r5, [r3, #0]
 8015f7a:	4606      	mov	r6, r0
 8015f7c:	460c      	mov	r4, r1
 8015f7e:	b125      	cbz	r5, 8015f8a <__swsetup_r+0x16>
 8015f80:	69ab      	ldr	r3, [r5, #24]
 8015f82:	b913      	cbnz	r3, 8015f8a <__swsetup_r+0x16>
 8015f84:	4628      	mov	r0, r5
 8015f86:	f000 f953 	bl	8016230 <__sinit>
 8015f8a:	4b2e      	ldr	r3, [pc, #184]	; (8016044 <__swsetup_r+0xd0>)
 8015f8c:	429c      	cmp	r4, r3
 8015f8e:	d10f      	bne.n	8015fb0 <__swsetup_r+0x3c>
 8015f90:	686c      	ldr	r4, [r5, #4]
 8015f92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015f96:	b29a      	uxth	r2, r3
 8015f98:	0715      	lsls	r5, r2, #28
 8015f9a:	d42c      	bmi.n	8015ff6 <__swsetup_r+0x82>
 8015f9c:	06d0      	lsls	r0, r2, #27
 8015f9e:	d411      	bmi.n	8015fc4 <__swsetup_r+0x50>
 8015fa0:	2209      	movs	r2, #9
 8015fa2:	6032      	str	r2, [r6, #0]
 8015fa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015fa8:	81a3      	strh	r3, [r4, #12]
 8015faa:	f04f 30ff 	mov.w	r0, #4294967295
 8015fae:	e03e      	b.n	801602e <__swsetup_r+0xba>
 8015fb0:	4b25      	ldr	r3, [pc, #148]	; (8016048 <__swsetup_r+0xd4>)
 8015fb2:	429c      	cmp	r4, r3
 8015fb4:	d101      	bne.n	8015fba <__swsetup_r+0x46>
 8015fb6:	68ac      	ldr	r4, [r5, #8]
 8015fb8:	e7eb      	b.n	8015f92 <__swsetup_r+0x1e>
 8015fba:	4b24      	ldr	r3, [pc, #144]	; (801604c <__swsetup_r+0xd8>)
 8015fbc:	429c      	cmp	r4, r3
 8015fbe:	bf08      	it	eq
 8015fc0:	68ec      	ldreq	r4, [r5, #12]
 8015fc2:	e7e6      	b.n	8015f92 <__swsetup_r+0x1e>
 8015fc4:	0751      	lsls	r1, r2, #29
 8015fc6:	d512      	bpl.n	8015fee <__swsetup_r+0x7a>
 8015fc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015fca:	b141      	cbz	r1, 8015fde <__swsetup_r+0x6a>
 8015fcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015fd0:	4299      	cmp	r1, r3
 8015fd2:	d002      	beq.n	8015fda <__swsetup_r+0x66>
 8015fd4:	4630      	mov	r0, r6
 8015fd6:	f7ff fe13 	bl	8015c00 <_free_r>
 8015fda:	2300      	movs	r3, #0
 8015fdc:	6363      	str	r3, [r4, #52]	; 0x34
 8015fde:	89a3      	ldrh	r3, [r4, #12]
 8015fe0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015fe4:	81a3      	strh	r3, [r4, #12]
 8015fe6:	2300      	movs	r3, #0
 8015fe8:	6063      	str	r3, [r4, #4]
 8015fea:	6923      	ldr	r3, [r4, #16]
 8015fec:	6023      	str	r3, [r4, #0]
 8015fee:	89a3      	ldrh	r3, [r4, #12]
 8015ff0:	f043 0308 	orr.w	r3, r3, #8
 8015ff4:	81a3      	strh	r3, [r4, #12]
 8015ff6:	6923      	ldr	r3, [r4, #16]
 8015ff8:	b94b      	cbnz	r3, 801600e <__swsetup_r+0x9a>
 8015ffa:	89a3      	ldrh	r3, [r4, #12]
 8015ffc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016004:	d003      	beq.n	801600e <__swsetup_r+0x9a>
 8016006:	4621      	mov	r1, r4
 8016008:	4630      	mov	r0, r6
 801600a:	f000 f9bf 	bl	801638c <__smakebuf_r>
 801600e:	89a2      	ldrh	r2, [r4, #12]
 8016010:	f012 0301 	ands.w	r3, r2, #1
 8016014:	d00c      	beq.n	8016030 <__swsetup_r+0xbc>
 8016016:	2300      	movs	r3, #0
 8016018:	60a3      	str	r3, [r4, #8]
 801601a:	6963      	ldr	r3, [r4, #20]
 801601c:	425b      	negs	r3, r3
 801601e:	61a3      	str	r3, [r4, #24]
 8016020:	6923      	ldr	r3, [r4, #16]
 8016022:	b953      	cbnz	r3, 801603a <__swsetup_r+0xc6>
 8016024:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016028:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801602c:	d1ba      	bne.n	8015fa4 <__swsetup_r+0x30>
 801602e:	bd70      	pop	{r4, r5, r6, pc}
 8016030:	0792      	lsls	r2, r2, #30
 8016032:	bf58      	it	pl
 8016034:	6963      	ldrpl	r3, [r4, #20]
 8016036:	60a3      	str	r3, [r4, #8]
 8016038:	e7f2      	b.n	8016020 <__swsetup_r+0xac>
 801603a:	2000      	movs	r0, #0
 801603c:	e7f7      	b.n	801602e <__swsetup_r+0xba>
 801603e:	bf00      	nop
 8016040:	2400016c 	.word	0x2400016c
 8016044:	080171bc 	.word	0x080171bc
 8016048:	080171dc 	.word	0x080171dc
 801604c:	0801719c 	.word	0x0801719c

08016050 <__sflush_r>:
 8016050:	898a      	ldrh	r2, [r1, #12]
 8016052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016056:	4605      	mov	r5, r0
 8016058:	0710      	lsls	r0, r2, #28
 801605a:	460c      	mov	r4, r1
 801605c:	d458      	bmi.n	8016110 <__sflush_r+0xc0>
 801605e:	684b      	ldr	r3, [r1, #4]
 8016060:	2b00      	cmp	r3, #0
 8016062:	dc05      	bgt.n	8016070 <__sflush_r+0x20>
 8016064:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016066:	2b00      	cmp	r3, #0
 8016068:	dc02      	bgt.n	8016070 <__sflush_r+0x20>
 801606a:	2000      	movs	r0, #0
 801606c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016070:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016072:	2e00      	cmp	r6, #0
 8016074:	d0f9      	beq.n	801606a <__sflush_r+0x1a>
 8016076:	2300      	movs	r3, #0
 8016078:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801607c:	682f      	ldr	r7, [r5, #0]
 801607e:	6a21      	ldr	r1, [r4, #32]
 8016080:	602b      	str	r3, [r5, #0]
 8016082:	d032      	beq.n	80160ea <__sflush_r+0x9a>
 8016084:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016086:	89a3      	ldrh	r3, [r4, #12]
 8016088:	075a      	lsls	r2, r3, #29
 801608a:	d505      	bpl.n	8016098 <__sflush_r+0x48>
 801608c:	6863      	ldr	r3, [r4, #4]
 801608e:	1ac0      	subs	r0, r0, r3
 8016090:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016092:	b10b      	cbz	r3, 8016098 <__sflush_r+0x48>
 8016094:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016096:	1ac0      	subs	r0, r0, r3
 8016098:	2300      	movs	r3, #0
 801609a:	4602      	mov	r2, r0
 801609c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801609e:	6a21      	ldr	r1, [r4, #32]
 80160a0:	4628      	mov	r0, r5
 80160a2:	47b0      	blx	r6
 80160a4:	1c43      	adds	r3, r0, #1
 80160a6:	89a3      	ldrh	r3, [r4, #12]
 80160a8:	d106      	bne.n	80160b8 <__sflush_r+0x68>
 80160aa:	6829      	ldr	r1, [r5, #0]
 80160ac:	291d      	cmp	r1, #29
 80160ae:	d848      	bhi.n	8016142 <__sflush_r+0xf2>
 80160b0:	4a29      	ldr	r2, [pc, #164]	; (8016158 <__sflush_r+0x108>)
 80160b2:	40ca      	lsrs	r2, r1
 80160b4:	07d6      	lsls	r6, r2, #31
 80160b6:	d544      	bpl.n	8016142 <__sflush_r+0xf2>
 80160b8:	2200      	movs	r2, #0
 80160ba:	6062      	str	r2, [r4, #4]
 80160bc:	04d9      	lsls	r1, r3, #19
 80160be:	6922      	ldr	r2, [r4, #16]
 80160c0:	6022      	str	r2, [r4, #0]
 80160c2:	d504      	bpl.n	80160ce <__sflush_r+0x7e>
 80160c4:	1c42      	adds	r2, r0, #1
 80160c6:	d101      	bne.n	80160cc <__sflush_r+0x7c>
 80160c8:	682b      	ldr	r3, [r5, #0]
 80160ca:	b903      	cbnz	r3, 80160ce <__sflush_r+0x7e>
 80160cc:	6560      	str	r0, [r4, #84]	; 0x54
 80160ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80160d0:	602f      	str	r7, [r5, #0]
 80160d2:	2900      	cmp	r1, #0
 80160d4:	d0c9      	beq.n	801606a <__sflush_r+0x1a>
 80160d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80160da:	4299      	cmp	r1, r3
 80160dc:	d002      	beq.n	80160e4 <__sflush_r+0x94>
 80160de:	4628      	mov	r0, r5
 80160e0:	f7ff fd8e 	bl	8015c00 <_free_r>
 80160e4:	2000      	movs	r0, #0
 80160e6:	6360      	str	r0, [r4, #52]	; 0x34
 80160e8:	e7c0      	b.n	801606c <__sflush_r+0x1c>
 80160ea:	2301      	movs	r3, #1
 80160ec:	4628      	mov	r0, r5
 80160ee:	47b0      	blx	r6
 80160f0:	1c41      	adds	r1, r0, #1
 80160f2:	d1c8      	bne.n	8016086 <__sflush_r+0x36>
 80160f4:	682b      	ldr	r3, [r5, #0]
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d0c5      	beq.n	8016086 <__sflush_r+0x36>
 80160fa:	2b1d      	cmp	r3, #29
 80160fc:	d001      	beq.n	8016102 <__sflush_r+0xb2>
 80160fe:	2b16      	cmp	r3, #22
 8016100:	d101      	bne.n	8016106 <__sflush_r+0xb6>
 8016102:	602f      	str	r7, [r5, #0]
 8016104:	e7b1      	b.n	801606a <__sflush_r+0x1a>
 8016106:	89a3      	ldrh	r3, [r4, #12]
 8016108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801610c:	81a3      	strh	r3, [r4, #12]
 801610e:	e7ad      	b.n	801606c <__sflush_r+0x1c>
 8016110:	690f      	ldr	r7, [r1, #16]
 8016112:	2f00      	cmp	r7, #0
 8016114:	d0a9      	beq.n	801606a <__sflush_r+0x1a>
 8016116:	0793      	lsls	r3, r2, #30
 8016118:	680e      	ldr	r6, [r1, #0]
 801611a:	bf08      	it	eq
 801611c:	694b      	ldreq	r3, [r1, #20]
 801611e:	600f      	str	r7, [r1, #0]
 8016120:	bf18      	it	ne
 8016122:	2300      	movne	r3, #0
 8016124:	eba6 0807 	sub.w	r8, r6, r7
 8016128:	608b      	str	r3, [r1, #8]
 801612a:	f1b8 0f00 	cmp.w	r8, #0
 801612e:	dd9c      	ble.n	801606a <__sflush_r+0x1a>
 8016130:	4643      	mov	r3, r8
 8016132:	463a      	mov	r2, r7
 8016134:	6a21      	ldr	r1, [r4, #32]
 8016136:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016138:	4628      	mov	r0, r5
 801613a:	47b0      	blx	r6
 801613c:	2800      	cmp	r0, #0
 801613e:	dc06      	bgt.n	801614e <__sflush_r+0xfe>
 8016140:	89a3      	ldrh	r3, [r4, #12]
 8016142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016146:	81a3      	strh	r3, [r4, #12]
 8016148:	f04f 30ff 	mov.w	r0, #4294967295
 801614c:	e78e      	b.n	801606c <__sflush_r+0x1c>
 801614e:	4407      	add	r7, r0
 8016150:	eba8 0800 	sub.w	r8, r8, r0
 8016154:	e7e9      	b.n	801612a <__sflush_r+0xda>
 8016156:	bf00      	nop
 8016158:	20400001 	.word	0x20400001

0801615c <_fflush_r>:
 801615c:	b538      	push	{r3, r4, r5, lr}
 801615e:	690b      	ldr	r3, [r1, #16]
 8016160:	4605      	mov	r5, r0
 8016162:	460c      	mov	r4, r1
 8016164:	b1db      	cbz	r3, 801619e <_fflush_r+0x42>
 8016166:	b118      	cbz	r0, 8016170 <_fflush_r+0x14>
 8016168:	6983      	ldr	r3, [r0, #24]
 801616a:	b90b      	cbnz	r3, 8016170 <_fflush_r+0x14>
 801616c:	f000 f860 	bl	8016230 <__sinit>
 8016170:	4b0c      	ldr	r3, [pc, #48]	; (80161a4 <_fflush_r+0x48>)
 8016172:	429c      	cmp	r4, r3
 8016174:	d109      	bne.n	801618a <_fflush_r+0x2e>
 8016176:	686c      	ldr	r4, [r5, #4]
 8016178:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801617c:	b17b      	cbz	r3, 801619e <_fflush_r+0x42>
 801617e:	4621      	mov	r1, r4
 8016180:	4628      	mov	r0, r5
 8016182:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016186:	f7ff bf63 	b.w	8016050 <__sflush_r>
 801618a:	4b07      	ldr	r3, [pc, #28]	; (80161a8 <_fflush_r+0x4c>)
 801618c:	429c      	cmp	r4, r3
 801618e:	d101      	bne.n	8016194 <_fflush_r+0x38>
 8016190:	68ac      	ldr	r4, [r5, #8]
 8016192:	e7f1      	b.n	8016178 <_fflush_r+0x1c>
 8016194:	4b05      	ldr	r3, [pc, #20]	; (80161ac <_fflush_r+0x50>)
 8016196:	429c      	cmp	r4, r3
 8016198:	bf08      	it	eq
 801619a:	68ec      	ldreq	r4, [r5, #12]
 801619c:	e7ec      	b.n	8016178 <_fflush_r+0x1c>
 801619e:	2000      	movs	r0, #0
 80161a0:	bd38      	pop	{r3, r4, r5, pc}
 80161a2:	bf00      	nop
 80161a4:	080171bc 	.word	0x080171bc
 80161a8:	080171dc 	.word	0x080171dc
 80161ac:	0801719c 	.word	0x0801719c

080161b0 <std>:
 80161b0:	2300      	movs	r3, #0
 80161b2:	b510      	push	{r4, lr}
 80161b4:	4604      	mov	r4, r0
 80161b6:	e9c0 3300 	strd	r3, r3, [r0]
 80161ba:	6083      	str	r3, [r0, #8]
 80161bc:	8181      	strh	r1, [r0, #12]
 80161be:	6643      	str	r3, [r0, #100]	; 0x64
 80161c0:	81c2      	strh	r2, [r0, #14]
 80161c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80161c6:	6183      	str	r3, [r0, #24]
 80161c8:	4619      	mov	r1, r3
 80161ca:	2208      	movs	r2, #8
 80161cc:	305c      	adds	r0, #92	; 0x5c
 80161ce:	f7ff fd0e 	bl	8015bee <memset>
 80161d2:	4b05      	ldr	r3, [pc, #20]	; (80161e8 <std+0x38>)
 80161d4:	6263      	str	r3, [r4, #36]	; 0x24
 80161d6:	4b05      	ldr	r3, [pc, #20]	; (80161ec <std+0x3c>)
 80161d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80161da:	4b05      	ldr	r3, [pc, #20]	; (80161f0 <std+0x40>)
 80161dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80161de:	4b05      	ldr	r3, [pc, #20]	; (80161f4 <std+0x44>)
 80161e0:	6224      	str	r4, [r4, #32]
 80161e2:	6323      	str	r3, [r4, #48]	; 0x30
 80161e4:	bd10      	pop	{r4, pc}
 80161e6:	bf00      	nop
 80161e8:	08016c45 	.word	0x08016c45
 80161ec:	08016c67 	.word	0x08016c67
 80161f0:	08016c9f 	.word	0x08016c9f
 80161f4:	08016cc3 	.word	0x08016cc3

080161f8 <_cleanup_r>:
 80161f8:	4901      	ldr	r1, [pc, #4]	; (8016200 <_cleanup_r+0x8>)
 80161fa:	f000 b885 	b.w	8016308 <_fwalk_reent>
 80161fe:	bf00      	nop
 8016200:	0801615d 	.word	0x0801615d

08016204 <__sfmoreglue>:
 8016204:	b570      	push	{r4, r5, r6, lr}
 8016206:	1e4a      	subs	r2, r1, #1
 8016208:	2568      	movs	r5, #104	; 0x68
 801620a:	4355      	muls	r5, r2
 801620c:	460e      	mov	r6, r1
 801620e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016212:	f7ff fd43 	bl	8015c9c <_malloc_r>
 8016216:	4604      	mov	r4, r0
 8016218:	b140      	cbz	r0, 801622c <__sfmoreglue+0x28>
 801621a:	2100      	movs	r1, #0
 801621c:	e9c0 1600 	strd	r1, r6, [r0]
 8016220:	300c      	adds	r0, #12
 8016222:	60a0      	str	r0, [r4, #8]
 8016224:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016228:	f7ff fce1 	bl	8015bee <memset>
 801622c:	4620      	mov	r0, r4
 801622e:	bd70      	pop	{r4, r5, r6, pc}

08016230 <__sinit>:
 8016230:	6983      	ldr	r3, [r0, #24]
 8016232:	b510      	push	{r4, lr}
 8016234:	4604      	mov	r4, r0
 8016236:	bb33      	cbnz	r3, 8016286 <__sinit+0x56>
 8016238:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801623c:	6503      	str	r3, [r0, #80]	; 0x50
 801623e:	4b12      	ldr	r3, [pc, #72]	; (8016288 <__sinit+0x58>)
 8016240:	4a12      	ldr	r2, [pc, #72]	; (801628c <__sinit+0x5c>)
 8016242:	681b      	ldr	r3, [r3, #0]
 8016244:	6282      	str	r2, [r0, #40]	; 0x28
 8016246:	4298      	cmp	r0, r3
 8016248:	bf04      	itt	eq
 801624a:	2301      	moveq	r3, #1
 801624c:	6183      	streq	r3, [r0, #24]
 801624e:	f000 f81f 	bl	8016290 <__sfp>
 8016252:	6060      	str	r0, [r4, #4]
 8016254:	4620      	mov	r0, r4
 8016256:	f000 f81b 	bl	8016290 <__sfp>
 801625a:	60a0      	str	r0, [r4, #8]
 801625c:	4620      	mov	r0, r4
 801625e:	f000 f817 	bl	8016290 <__sfp>
 8016262:	2200      	movs	r2, #0
 8016264:	60e0      	str	r0, [r4, #12]
 8016266:	2104      	movs	r1, #4
 8016268:	6860      	ldr	r0, [r4, #4]
 801626a:	f7ff ffa1 	bl	80161b0 <std>
 801626e:	2201      	movs	r2, #1
 8016270:	2109      	movs	r1, #9
 8016272:	68a0      	ldr	r0, [r4, #8]
 8016274:	f7ff ff9c 	bl	80161b0 <std>
 8016278:	2202      	movs	r2, #2
 801627a:	2112      	movs	r1, #18
 801627c:	68e0      	ldr	r0, [r4, #12]
 801627e:	f7ff ff97 	bl	80161b0 <std>
 8016282:	2301      	movs	r3, #1
 8016284:	61a3      	str	r3, [r4, #24]
 8016286:	bd10      	pop	{r4, pc}
 8016288:	08017198 	.word	0x08017198
 801628c:	080161f9 	.word	0x080161f9

08016290 <__sfp>:
 8016290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016292:	4b1b      	ldr	r3, [pc, #108]	; (8016300 <__sfp+0x70>)
 8016294:	681e      	ldr	r6, [r3, #0]
 8016296:	69b3      	ldr	r3, [r6, #24]
 8016298:	4607      	mov	r7, r0
 801629a:	b913      	cbnz	r3, 80162a2 <__sfp+0x12>
 801629c:	4630      	mov	r0, r6
 801629e:	f7ff ffc7 	bl	8016230 <__sinit>
 80162a2:	3648      	adds	r6, #72	; 0x48
 80162a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80162a8:	3b01      	subs	r3, #1
 80162aa:	d503      	bpl.n	80162b4 <__sfp+0x24>
 80162ac:	6833      	ldr	r3, [r6, #0]
 80162ae:	b133      	cbz	r3, 80162be <__sfp+0x2e>
 80162b0:	6836      	ldr	r6, [r6, #0]
 80162b2:	e7f7      	b.n	80162a4 <__sfp+0x14>
 80162b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80162b8:	b16d      	cbz	r5, 80162d6 <__sfp+0x46>
 80162ba:	3468      	adds	r4, #104	; 0x68
 80162bc:	e7f4      	b.n	80162a8 <__sfp+0x18>
 80162be:	2104      	movs	r1, #4
 80162c0:	4638      	mov	r0, r7
 80162c2:	f7ff ff9f 	bl	8016204 <__sfmoreglue>
 80162c6:	6030      	str	r0, [r6, #0]
 80162c8:	2800      	cmp	r0, #0
 80162ca:	d1f1      	bne.n	80162b0 <__sfp+0x20>
 80162cc:	230c      	movs	r3, #12
 80162ce:	603b      	str	r3, [r7, #0]
 80162d0:	4604      	mov	r4, r0
 80162d2:	4620      	mov	r0, r4
 80162d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80162d6:	4b0b      	ldr	r3, [pc, #44]	; (8016304 <__sfp+0x74>)
 80162d8:	6665      	str	r5, [r4, #100]	; 0x64
 80162da:	e9c4 5500 	strd	r5, r5, [r4]
 80162de:	60a5      	str	r5, [r4, #8]
 80162e0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80162e4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80162e8:	2208      	movs	r2, #8
 80162ea:	4629      	mov	r1, r5
 80162ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80162f0:	f7ff fc7d 	bl	8015bee <memset>
 80162f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80162f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80162fc:	e7e9      	b.n	80162d2 <__sfp+0x42>
 80162fe:	bf00      	nop
 8016300:	08017198 	.word	0x08017198
 8016304:	ffff0001 	.word	0xffff0001

08016308 <_fwalk_reent>:
 8016308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801630c:	4680      	mov	r8, r0
 801630e:	4689      	mov	r9, r1
 8016310:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016314:	2600      	movs	r6, #0
 8016316:	b914      	cbnz	r4, 801631e <_fwalk_reent+0x16>
 8016318:	4630      	mov	r0, r6
 801631a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801631e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8016322:	3f01      	subs	r7, #1
 8016324:	d501      	bpl.n	801632a <_fwalk_reent+0x22>
 8016326:	6824      	ldr	r4, [r4, #0]
 8016328:	e7f5      	b.n	8016316 <_fwalk_reent+0xe>
 801632a:	89ab      	ldrh	r3, [r5, #12]
 801632c:	2b01      	cmp	r3, #1
 801632e:	d907      	bls.n	8016340 <_fwalk_reent+0x38>
 8016330:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016334:	3301      	adds	r3, #1
 8016336:	d003      	beq.n	8016340 <_fwalk_reent+0x38>
 8016338:	4629      	mov	r1, r5
 801633a:	4640      	mov	r0, r8
 801633c:	47c8      	blx	r9
 801633e:	4306      	orrs	r6, r0
 8016340:	3568      	adds	r5, #104	; 0x68
 8016342:	e7ee      	b.n	8016322 <_fwalk_reent+0x1a>

08016344 <__swhatbuf_r>:
 8016344:	b570      	push	{r4, r5, r6, lr}
 8016346:	460e      	mov	r6, r1
 8016348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801634c:	2900      	cmp	r1, #0
 801634e:	b096      	sub	sp, #88	; 0x58
 8016350:	4614      	mov	r4, r2
 8016352:	461d      	mov	r5, r3
 8016354:	da07      	bge.n	8016366 <__swhatbuf_r+0x22>
 8016356:	2300      	movs	r3, #0
 8016358:	602b      	str	r3, [r5, #0]
 801635a:	89b3      	ldrh	r3, [r6, #12]
 801635c:	061a      	lsls	r2, r3, #24
 801635e:	d410      	bmi.n	8016382 <__swhatbuf_r+0x3e>
 8016360:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016364:	e00e      	b.n	8016384 <__swhatbuf_r+0x40>
 8016366:	466a      	mov	r2, sp
 8016368:	f000 fcd2 	bl	8016d10 <_fstat_r>
 801636c:	2800      	cmp	r0, #0
 801636e:	dbf2      	blt.n	8016356 <__swhatbuf_r+0x12>
 8016370:	9a01      	ldr	r2, [sp, #4]
 8016372:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016376:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801637a:	425a      	negs	r2, r3
 801637c:	415a      	adcs	r2, r3
 801637e:	602a      	str	r2, [r5, #0]
 8016380:	e7ee      	b.n	8016360 <__swhatbuf_r+0x1c>
 8016382:	2340      	movs	r3, #64	; 0x40
 8016384:	2000      	movs	r0, #0
 8016386:	6023      	str	r3, [r4, #0]
 8016388:	b016      	add	sp, #88	; 0x58
 801638a:	bd70      	pop	{r4, r5, r6, pc}

0801638c <__smakebuf_r>:
 801638c:	898b      	ldrh	r3, [r1, #12]
 801638e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016390:	079d      	lsls	r5, r3, #30
 8016392:	4606      	mov	r6, r0
 8016394:	460c      	mov	r4, r1
 8016396:	d507      	bpl.n	80163a8 <__smakebuf_r+0x1c>
 8016398:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801639c:	6023      	str	r3, [r4, #0]
 801639e:	6123      	str	r3, [r4, #16]
 80163a0:	2301      	movs	r3, #1
 80163a2:	6163      	str	r3, [r4, #20]
 80163a4:	b002      	add	sp, #8
 80163a6:	bd70      	pop	{r4, r5, r6, pc}
 80163a8:	ab01      	add	r3, sp, #4
 80163aa:	466a      	mov	r2, sp
 80163ac:	f7ff ffca 	bl	8016344 <__swhatbuf_r>
 80163b0:	9900      	ldr	r1, [sp, #0]
 80163b2:	4605      	mov	r5, r0
 80163b4:	4630      	mov	r0, r6
 80163b6:	f7ff fc71 	bl	8015c9c <_malloc_r>
 80163ba:	b948      	cbnz	r0, 80163d0 <__smakebuf_r+0x44>
 80163bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80163c0:	059a      	lsls	r2, r3, #22
 80163c2:	d4ef      	bmi.n	80163a4 <__smakebuf_r+0x18>
 80163c4:	f023 0303 	bic.w	r3, r3, #3
 80163c8:	f043 0302 	orr.w	r3, r3, #2
 80163cc:	81a3      	strh	r3, [r4, #12]
 80163ce:	e7e3      	b.n	8016398 <__smakebuf_r+0xc>
 80163d0:	4b0d      	ldr	r3, [pc, #52]	; (8016408 <__smakebuf_r+0x7c>)
 80163d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80163d4:	89a3      	ldrh	r3, [r4, #12]
 80163d6:	6020      	str	r0, [r4, #0]
 80163d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80163dc:	81a3      	strh	r3, [r4, #12]
 80163de:	9b00      	ldr	r3, [sp, #0]
 80163e0:	6163      	str	r3, [r4, #20]
 80163e2:	9b01      	ldr	r3, [sp, #4]
 80163e4:	6120      	str	r0, [r4, #16]
 80163e6:	b15b      	cbz	r3, 8016400 <__smakebuf_r+0x74>
 80163e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80163ec:	4630      	mov	r0, r6
 80163ee:	f000 fca1 	bl	8016d34 <_isatty_r>
 80163f2:	b128      	cbz	r0, 8016400 <__smakebuf_r+0x74>
 80163f4:	89a3      	ldrh	r3, [r4, #12]
 80163f6:	f023 0303 	bic.w	r3, r3, #3
 80163fa:	f043 0301 	orr.w	r3, r3, #1
 80163fe:	81a3      	strh	r3, [r4, #12]
 8016400:	89a3      	ldrh	r3, [r4, #12]
 8016402:	431d      	orrs	r5, r3
 8016404:	81a5      	strh	r5, [r4, #12]
 8016406:	e7cd      	b.n	80163a4 <__smakebuf_r+0x18>
 8016408:	080161f9 	.word	0x080161f9

0801640c <__malloc_lock>:
 801640c:	4770      	bx	lr

0801640e <__malloc_unlock>:
 801640e:	4770      	bx	lr

08016410 <__ssputs_r>:
 8016410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016414:	688e      	ldr	r6, [r1, #8]
 8016416:	429e      	cmp	r6, r3
 8016418:	4682      	mov	sl, r0
 801641a:	460c      	mov	r4, r1
 801641c:	4690      	mov	r8, r2
 801641e:	4699      	mov	r9, r3
 8016420:	d837      	bhi.n	8016492 <__ssputs_r+0x82>
 8016422:	898a      	ldrh	r2, [r1, #12]
 8016424:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016428:	d031      	beq.n	801648e <__ssputs_r+0x7e>
 801642a:	6825      	ldr	r5, [r4, #0]
 801642c:	6909      	ldr	r1, [r1, #16]
 801642e:	1a6f      	subs	r7, r5, r1
 8016430:	6965      	ldr	r5, [r4, #20]
 8016432:	2302      	movs	r3, #2
 8016434:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016438:	fb95 f5f3 	sdiv	r5, r5, r3
 801643c:	f109 0301 	add.w	r3, r9, #1
 8016440:	443b      	add	r3, r7
 8016442:	429d      	cmp	r5, r3
 8016444:	bf38      	it	cc
 8016446:	461d      	movcc	r5, r3
 8016448:	0553      	lsls	r3, r2, #21
 801644a:	d530      	bpl.n	80164ae <__ssputs_r+0x9e>
 801644c:	4629      	mov	r1, r5
 801644e:	f7ff fc25 	bl	8015c9c <_malloc_r>
 8016452:	4606      	mov	r6, r0
 8016454:	b950      	cbnz	r0, 801646c <__ssputs_r+0x5c>
 8016456:	230c      	movs	r3, #12
 8016458:	f8ca 3000 	str.w	r3, [sl]
 801645c:	89a3      	ldrh	r3, [r4, #12]
 801645e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016462:	81a3      	strh	r3, [r4, #12]
 8016464:	f04f 30ff 	mov.w	r0, #4294967295
 8016468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801646c:	463a      	mov	r2, r7
 801646e:	6921      	ldr	r1, [r4, #16]
 8016470:	f7ff fbb2 	bl	8015bd8 <memcpy>
 8016474:	89a3      	ldrh	r3, [r4, #12]
 8016476:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801647a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801647e:	81a3      	strh	r3, [r4, #12]
 8016480:	6126      	str	r6, [r4, #16]
 8016482:	6165      	str	r5, [r4, #20]
 8016484:	443e      	add	r6, r7
 8016486:	1bed      	subs	r5, r5, r7
 8016488:	6026      	str	r6, [r4, #0]
 801648a:	60a5      	str	r5, [r4, #8]
 801648c:	464e      	mov	r6, r9
 801648e:	454e      	cmp	r6, r9
 8016490:	d900      	bls.n	8016494 <__ssputs_r+0x84>
 8016492:	464e      	mov	r6, r9
 8016494:	4632      	mov	r2, r6
 8016496:	4641      	mov	r1, r8
 8016498:	6820      	ldr	r0, [r4, #0]
 801649a:	f000 fc6d 	bl	8016d78 <memmove>
 801649e:	68a3      	ldr	r3, [r4, #8]
 80164a0:	1b9b      	subs	r3, r3, r6
 80164a2:	60a3      	str	r3, [r4, #8]
 80164a4:	6823      	ldr	r3, [r4, #0]
 80164a6:	441e      	add	r6, r3
 80164a8:	6026      	str	r6, [r4, #0]
 80164aa:	2000      	movs	r0, #0
 80164ac:	e7dc      	b.n	8016468 <__ssputs_r+0x58>
 80164ae:	462a      	mov	r2, r5
 80164b0:	f000 fc7b 	bl	8016daa <_realloc_r>
 80164b4:	4606      	mov	r6, r0
 80164b6:	2800      	cmp	r0, #0
 80164b8:	d1e2      	bne.n	8016480 <__ssputs_r+0x70>
 80164ba:	6921      	ldr	r1, [r4, #16]
 80164bc:	4650      	mov	r0, sl
 80164be:	f7ff fb9f 	bl	8015c00 <_free_r>
 80164c2:	e7c8      	b.n	8016456 <__ssputs_r+0x46>

080164c4 <_svfiprintf_r>:
 80164c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164c8:	461d      	mov	r5, r3
 80164ca:	898b      	ldrh	r3, [r1, #12]
 80164cc:	061f      	lsls	r7, r3, #24
 80164ce:	b09d      	sub	sp, #116	; 0x74
 80164d0:	4680      	mov	r8, r0
 80164d2:	460c      	mov	r4, r1
 80164d4:	4616      	mov	r6, r2
 80164d6:	d50f      	bpl.n	80164f8 <_svfiprintf_r+0x34>
 80164d8:	690b      	ldr	r3, [r1, #16]
 80164da:	b96b      	cbnz	r3, 80164f8 <_svfiprintf_r+0x34>
 80164dc:	2140      	movs	r1, #64	; 0x40
 80164de:	f7ff fbdd 	bl	8015c9c <_malloc_r>
 80164e2:	6020      	str	r0, [r4, #0]
 80164e4:	6120      	str	r0, [r4, #16]
 80164e6:	b928      	cbnz	r0, 80164f4 <_svfiprintf_r+0x30>
 80164e8:	230c      	movs	r3, #12
 80164ea:	f8c8 3000 	str.w	r3, [r8]
 80164ee:	f04f 30ff 	mov.w	r0, #4294967295
 80164f2:	e0c8      	b.n	8016686 <_svfiprintf_r+0x1c2>
 80164f4:	2340      	movs	r3, #64	; 0x40
 80164f6:	6163      	str	r3, [r4, #20]
 80164f8:	2300      	movs	r3, #0
 80164fa:	9309      	str	r3, [sp, #36]	; 0x24
 80164fc:	2320      	movs	r3, #32
 80164fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016502:	2330      	movs	r3, #48	; 0x30
 8016504:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016508:	9503      	str	r5, [sp, #12]
 801650a:	f04f 0b01 	mov.w	fp, #1
 801650e:	4637      	mov	r7, r6
 8016510:	463d      	mov	r5, r7
 8016512:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016516:	b10b      	cbz	r3, 801651c <_svfiprintf_r+0x58>
 8016518:	2b25      	cmp	r3, #37	; 0x25
 801651a:	d13e      	bne.n	801659a <_svfiprintf_r+0xd6>
 801651c:	ebb7 0a06 	subs.w	sl, r7, r6
 8016520:	d00b      	beq.n	801653a <_svfiprintf_r+0x76>
 8016522:	4653      	mov	r3, sl
 8016524:	4632      	mov	r2, r6
 8016526:	4621      	mov	r1, r4
 8016528:	4640      	mov	r0, r8
 801652a:	f7ff ff71 	bl	8016410 <__ssputs_r>
 801652e:	3001      	adds	r0, #1
 8016530:	f000 80a4 	beq.w	801667c <_svfiprintf_r+0x1b8>
 8016534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016536:	4453      	add	r3, sl
 8016538:	9309      	str	r3, [sp, #36]	; 0x24
 801653a:	783b      	ldrb	r3, [r7, #0]
 801653c:	2b00      	cmp	r3, #0
 801653e:	f000 809d 	beq.w	801667c <_svfiprintf_r+0x1b8>
 8016542:	2300      	movs	r3, #0
 8016544:	f04f 32ff 	mov.w	r2, #4294967295
 8016548:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801654c:	9304      	str	r3, [sp, #16]
 801654e:	9307      	str	r3, [sp, #28]
 8016550:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016554:	931a      	str	r3, [sp, #104]	; 0x68
 8016556:	462f      	mov	r7, r5
 8016558:	2205      	movs	r2, #5
 801655a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801655e:	4850      	ldr	r0, [pc, #320]	; (80166a0 <_svfiprintf_r+0x1dc>)
 8016560:	f7e9 fec6 	bl	80002f0 <memchr>
 8016564:	9b04      	ldr	r3, [sp, #16]
 8016566:	b9d0      	cbnz	r0, 801659e <_svfiprintf_r+0xda>
 8016568:	06d9      	lsls	r1, r3, #27
 801656a:	bf44      	itt	mi
 801656c:	2220      	movmi	r2, #32
 801656e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016572:	071a      	lsls	r2, r3, #28
 8016574:	bf44      	itt	mi
 8016576:	222b      	movmi	r2, #43	; 0x2b
 8016578:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801657c:	782a      	ldrb	r2, [r5, #0]
 801657e:	2a2a      	cmp	r2, #42	; 0x2a
 8016580:	d015      	beq.n	80165ae <_svfiprintf_r+0xea>
 8016582:	9a07      	ldr	r2, [sp, #28]
 8016584:	462f      	mov	r7, r5
 8016586:	2000      	movs	r0, #0
 8016588:	250a      	movs	r5, #10
 801658a:	4639      	mov	r1, r7
 801658c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016590:	3b30      	subs	r3, #48	; 0x30
 8016592:	2b09      	cmp	r3, #9
 8016594:	d94d      	bls.n	8016632 <_svfiprintf_r+0x16e>
 8016596:	b1b8      	cbz	r0, 80165c8 <_svfiprintf_r+0x104>
 8016598:	e00f      	b.n	80165ba <_svfiprintf_r+0xf6>
 801659a:	462f      	mov	r7, r5
 801659c:	e7b8      	b.n	8016510 <_svfiprintf_r+0x4c>
 801659e:	4a40      	ldr	r2, [pc, #256]	; (80166a0 <_svfiprintf_r+0x1dc>)
 80165a0:	1a80      	subs	r0, r0, r2
 80165a2:	fa0b f000 	lsl.w	r0, fp, r0
 80165a6:	4318      	orrs	r0, r3
 80165a8:	9004      	str	r0, [sp, #16]
 80165aa:	463d      	mov	r5, r7
 80165ac:	e7d3      	b.n	8016556 <_svfiprintf_r+0x92>
 80165ae:	9a03      	ldr	r2, [sp, #12]
 80165b0:	1d11      	adds	r1, r2, #4
 80165b2:	6812      	ldr	r2, [r2, #0]
 80165b4:	9103      	str	r1, [sp, #12]
 80165b6:	2a00      	cmp	r2, #0
 80165b8:	db01      	blt.n	80165be <_svfiprintf_r+0xfa>
 80165ba:	9207      	str	r2, [sp, #28]
 80165bc:	e004      	b.n	80165c8 <_svfiprintf_r+0x104>
 80165be:	4252      	negs	r2, r2
 80165c0:	f043 0302 	orr.w	r3, r3, #2
 80165c4:	9207      	str	r2, [sp, #28]
 80165c6:	9304      	str	r3, [sp, #16]
 80165c8:	783b      	ldrb	r3, [r7, #0]
 80165ca:	2b2e      	cmp	r3, #46	; 0x2e
 80165cc:	d10c      	bne.n	80165e8 <_svfiprintf_r+0x124>
 80165ce:	787b      	ldrb	r3, [r7, #1]
 80165d0:	2b2a      	cmp	r3, #42	; 0x2a
 80165d2:	d133      	bne.n	801663c <_svfiprintf_r+0x178>
 80165d4:	9b03      	ldr	r3, [sp, #12]
 80165d6:	1d1a      	adds	r2, r3, #4
 80165d8:	681b      	ldr	r3, [r3, #0]
 80165da:	9203      	str	r2, [sp, #12]
 80165dc:	2b00      	cmp	r3, #0
 80165de:	bfb8      	it	lt
 80165e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80165e4:	3702      	adds	r7, #2
 80165e6:	9305      	str	r3, [sp, #20]
 80165e8:	4d2e      	ldr	r5, [pc, #184]	; (80166a4 <_svfiprintf_r+0x1e0>)
 80165ea:	7839      	ldrb	r1, [r7, #0]
 80165ec:	2203      	movs	r2, #3
 80165ee:	4628      	mov	r0, r5
 80165f0:	f7e9 fe7e 	bl	80002f0 <memchr>
 80165f4:	b138      	cbz	r0, 8016606 <_svfiprintf_r+0x142>
 80165f6:	2340      	movs	r3, #64	; 0x40
 80165f8:	1b40      	subs	r0, r0, r5
 80165fa:	fa03 f000 	lsl.w	r0, r3, r0
 80165fe:	9b04      	ldr	r3, [sp, #16]
 8016600:	4303      	orrs	r3, r0
 8016602:	3701      	adds	r7, #1
 8016604:	9304      	str	r3, [sp, #16]
 8016606:	7839      	ldrb	r1, [r7, #0]
 8016608:	4827      	ldr	r0, [pc, #156]	; (80166a8 <_svfiprintf_r+0x1e4>)
 801660a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801660e:	2206      	movs	r2, #6
 8016610:	1c7e      	adds	r6, r7, #1
 8016612:	f7e9 fe6d 	bl	80002f0 <memchr>
 8016616:	2800      	cmp	r0, #0
 8016618:	d038      	beq.n	801668c <_svfiprintf_r+0x1c8>
 801661a:	4b24      	ldr	r3, [pc, #144]	; (80166ac <_svfiprintf_r+0x1e8>)
 801661c:	bb13      	cbnz	r3, 8016664 <_svfiprintf_r+0x1a0>
 801661e:	9b03      	ldr	r3, [sp, #12]
 8016620:	3307      	adds	r3, #7
 8016622:	f023 0307 	bic.w	r3, r3, #7
 8016626:	3308      	adds	r3, #8
 8016628:	9303      	str	r3, [sp, #12]
 801662a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801662c:	444b      	add	r3, r9
 801662e:	9309      	str	r3, [sp, #36]	; 0x24
 8016630:	e76d      	b.n	801650e <_svfiprintf_r+0x4a>
 8016632:	fb05 3202 	mla	r2, r5, r2, r3
 8016636:	2001      	movs	r0, #1
 8016638:	460f      	mov	r7, r1
 801663a:	e7a6      	b.n	801658a <_svfiprintf_r+0xc6>
 801663c:	2300      	movs	r3, #0
 801663e:	3701      	adds	r7, #1
 8016640:	9305      	str	r3, [sp, #20]
 8016642:	4619      	mov	r1, r3
 8016644:	250a      	movs	r5, #10
 8016646:	4638      	mov	r0, r7
 8016648:	f810 2b01 	ldrb.w	r2, [r0], #1
 801664c:	3a30      	subs	r2, #48	; 0x30
 801664e:	2a09      	cmp	r2, #9
 8016650:	d903      	bls.n	801665a <_svfiprintf_r+0x196>
 8016652:	2b00      	cmp	r3, #0
 8016654:	d0c8      	beq.n	80165e8 <_svfiprintf_r+0x124>
 8016656:	9105      	str	r1, [sp, #20]
 8016658:	e7c6      	b.n	80165e8 <_svfiprintf_r+0x124>
 801665a:	fb05 2101 	mla	r1, r5, r1, r2
 801665e:	2301      	movs	r3, #1
 8016660:	4607      	mov	r7, r0
 8016662:	e7f0      	b.n	8016646 <_svfiprintf_r+0x182>
 8016664:	ab03      	add	r3, sp, #12
 8016666:	9300      	str	r3, [sp, #0]
 8016668:	4622      	mov	r2, r4
 801666a:	4b11      	ldr	r3, [pc, #68]	; (80166b0 <_svfiprintf_r+0x1ec>)
 801666c:	a904      	add	r1, sp, #16
 801666e:	4640      	mov	r0, r8
 8016670:	f3af 8000 	nop.w
 8016674:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016678:	4681      	mov	r9, r0
 801667a:	d1d6      	bne.n	801662a <_svfiprintf_r+0x166>
 801667c:	89a3      	ldrh	r3, [r4, #12]
 801667e:	065b      	lsls	r3, r3, #25
 8016680:	f53f af35 	bmi.w	80164ee <_svfiprintf_r+0x2a>
 8016684:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016686:	b01d      	add	sp, #116	; 0x74
 8016688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801668c:	ab03      	add	r3, sp, #12
 801668e:	9300      	str	r3, [sp, #0]
 8016690:	4622      	mov	r2, r4
 8016692:	4b07      	ldr	r3, [pc, #28]	; (80166b0 <_svfiprintf_r+0x1ec>)
 8016694:	a904      	add	r1, sp, #16
 8016696:	4640      	mov	r0, r8
 8016698:	f000 f9c2 	bl	8016a20 <_printf_i>
 801669c:	e7ea      	b.n	8016674 <_svfiprintf_r+0x1b0>
 801669e:	bf00      	nop
 80166a0:	080171fc 	.word	0x080171fc
 80166a4:	08017202 	.word	0x08017202
 80166a8:	08017206 	.word	0x08017206
 80166ac:	00000000 	.word	0x00000000
 80166b0:	08016411 	.word	0x08016411

080166b4 <__sfputc_r>:
 80166b4:	6893      	ldr	r3, [r2, #8]
 80166b6:	3b01      	subs	r3, #1
 80166b8:	2b00      	cmp	r3, #0
 80166ba:	b410      	push	{r4}
 80166bc:	6093      	str	r3, [r2, #8]
 80166be:	da08      	bge.n	80166d2 <__sfputc_r+0x1e>
 80166c0:	6994      	ldr	r4, [r2, #24]
 80166c2:	42a3      	cmp	r3, r4
 80166c4:	db01      	blt.n	80166ca <__sfputc_r+0x16>
 80166c6:	290a      	cmp	r1, #10
 80166c8:	d103      	bne.n	80166d2 <__sfputc_r+0x1e>
 80166ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80166ce:	f7ff bbff 	b.w	8015ed0 <__swbuf_r>
 80166d2:	6813      	ldr	r3, [r2, #0]
 80166d4:	1c58      	adds	r0, r3, #1
 80166d6:	6010      	str	r0, [r2, #0]
 80166d8:	7019      	strb	r1, [r3, #0]
 80166da:	4608      	mov	r0, r1
 80166dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80166e0:	4770      	bx	lr

080166e2 <__sfputs_r>:
 80166e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166e4:	4606      	mov	r6, r0
 80166e6:	460f      	mov	r7, r1
 80166e8:	4614      	mov	r4, r2
 80166ea:	18d5      	adds	r5, r2, r3
 80166ec:	42ac      	cmp	r4, r5
 80166ee:	d101      	bne.n	80166f4 <__sfputs_r+0x12>
 80166f0:	2000      	movs	r0, #0
 80166f2:	e007      	b.n	8016704 <__sfputs_r+0x22>
 80166f4:	463a      	mov	r2, r7
 80166f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80166fa:	4630      	mov	r0, r6
 80166fc:	f7ff ffda 	bl	80166b4 <__sfputc_r>
 8016700:	1c43      	adds	r3, r0, #1
 8016702:	d1f3      	bne.n	80166ec <__sfputs_r+0xa>
 8016704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016708 <_vfiprintf_r>:
 8016708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801670c:	460c      	mov	r4, r1
 801670e:	b09d      	sub	sp, #116	; 0x74
 8016710:	4617      	mov	r7, r2
 8016712:	461d      	mov	r5, r3
 8016714:	4606      	mov	r6, r0
 8016716:	b118      	cbz	r0, 8016720 <_vfiprintf_r+0x18>
 8016718:	6983      	ldr	r3, [r0, #24]
 801671a:	b90b      	cbnz	r3, 8016720 <_vfiprintf_r+0x18>
 801671c:	f7ff fd88 	bl	8016230 <__sinit>
 8016720:	4b7c      	ldr	r3, [pc, #496]	; (8016914 <_vfiprintf_r+0x20c>)
 8016722:	429c      	cmp	r4, r3
 8016724:	d158      	bne.n	80167d8 <_vfiprintf_r+0xd0>
 8016726:	6874      	ldr	r4, [r6, #4]
 8016728:	89a3      	ldrh	r3, [r4, #12]
 801672a:	0718      	lsls	r0, r3, #28
 801672c:	d55e      	bpl.n	80167ec <_vfiprintf_r+0xe4>
 801672e:	6923      	ldr	r3, [r4, #16]
 8016730:	2b00      	cmp	r3, #0
 8016732:	d05b      	beq.n	80167ec <_vfiprintf_r+0xe4>
 8016734:	2300      	movs	r3, #0
 8016736:	9309      	str	r3, [sp, #36]	; 0x24
 8016738:	2320      	movs	r3, #32
 801673a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801673e:	2330      	movs	r3, #48	; 0x30
 8016740:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016744:	9503      	str	r5, [sp, #12]
 8016746:	f04f 0b01 	mov.w	fp, #1
 801674a:	46b8      	mov	r8, r7
 801674c:	4645      	mov	r5, r8
 801674e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016752:	b10b      	cbz	r3, 8016758 <_vfiprintf_r+0x50>
 8016754:	2b25      	cmp	r3, #37	; 0x25
 8016756:	d154      	bne.n	8016802 <_vfiprintf_r+0xfa>
 8016758:	ebb8 0a07 	subs.w	sl, r8, r7
 801675c:	d00b      	beq.n	8016776 <_vfiprintf_r+0x6e>
 801675e:	4653      	mov	r3, sl
 8016760:	463a      	mov	r2, r7
 8016762:	4621      	mov	r1, r4
 8016764:	4630      	mov	r0, r6
 8016766:	f7ff ffbc 	bl	80166e2 <__sfputs_r>
 801676a:	3001      	adds	r0, #1
 801676c:	f000 80c2 	beq.w	80168f4 <_vfiprintf_r+0x1ec>
 8016770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016772:	4453      	add	r3, sl
 8016774:	9309      	str	r3, [sp, #36]	; 0x24
 8016776:	f898 3000 	ldrb.w	r3, [r8]
 801677a:	2b00      	cmp	r3, #0
 801677c:	f000 80ba 	beq.w	80168f4 <_vfiprintf_r+0x1ec>
 8016780:	2300      	movs	r3, #0
 8016782:	f04f 32ff 	mov.w	r2, #4294967295
 8016786:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801678a:	9304      	str	r3, [sp, #16]
 801678c:	9307      	str	r3, [sp, #28]
 801678e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016792:	931a      	str	r3, [sp, #104]	; 0x68
 8016794:	46a8      	mov	r8, r5
 8016796:	2205      	movs	r2, #5
 8016798:	f818 1b01 	ldrb.w	r1, [r8], #1
 801679c:	485e      	ldr	r0, [pc, #376]	; (8016918 <_vfiprintf_r+0x210>)
 801679e:	f7e9 fda7 	bl	80002f0 <memchr>
 80167a2:	9b04      	ldr	r3, [sp, #16]
 80167a4:	bb78      	cbnz	r0, 8016806 <_vfiprintf_r+0xfe>
 80167a6:	06d9      	lsls	r1, r3, #27
 80167a8:	bf44      	itt	mi
 80167aa:	2220      	movmi	r2, #32
 80167ac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80167b0:	071a      	lsls	r2, r3, #28
 80167b2:	bf44      	itt	mi
 80167b4:	222b      	movmi	r2, #43	; 0x2b
 80167b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80167ba:	782a      	ldrb	r2, [r5, #0]
 80167bc:	2a2a      	cmp	r2, #42	; 0x2a
 80167be:	d02a      	beq.n	8016816 <_vfiprintf_r+0x10e>
 80167c0:	9a07      	ldr	r2, [sp, #28]
 80167c2:	46a8      	mov	r8, r5
 80167c4:	2000      	movs	r0, #0
 80167c6:	250a      	movs	r5, #10
 80167c8:	4641      	mov	r1, r8
 80167ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80167ce:	3b30      	subs	r3, #48	; 0x30
 80167d0:	2b09      	cmp	r3, #9
 80167d2:	d969      	bls.n	80168a8 <_vfiprintf_r+0x1a0>
 80167d4:	b360      	cbz	r0, 8016830 <_vfiprintf_r+0x128>
 80167d6:	e024      	b.n	8016822 <_vfiprintf_r+0x11a>
 80167d8:	4b50      	ldr	r3, [pc, #320]	; (801691c <_vfiprintf_r+0x214>)
 80167da:	429c      	cmp	r4, r3
 80167dc:	d101      	bne.n	80167e2 <_vfiprintf_r+0xda>
 80167de:	68b4      	ldr	r4, [r6, #8]
 80167e0:	e7a2      	b.n	8016728 <_vfiprintf_r+0x20>
 80167e2:	4b4f      	ldr	r3, [pc, #316]	; (8016920 <_vfiprintf_r+0x218>)
 80167e4:	429c      	cmp	r4, r3
 80167e6:	bf08      	it	eq
 80167e8:	68f4      	ldreq	r4, [r6, #12]
 80167ea:	e79d      	b.n	8016728 <_vfiprintf_r+0x20>
 80167ec:	4621      	mov	r1, r4
 80167ee:	4630      	mov	r0, r6
 80167f0:	f7ff fbc0 	bl	8015f74 <__swsetup_r>
 80167f4:	2800      	cmp	r0, #0
 80167f6:	d09d      	beq.n	8016734 <_vfiprintf_r+0x2c>
 80167f8:	f04f 30ff 	mov.w	r0, #4294967295
 80167fc:	b01d      	add	sp, #116	; 0x74
 80167fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016802:	46a8      	mov	r8, r5
 8016804:	e7a2      	b.n	801674c <_vfiprintf_r+0x44>
 8016806:	4a44      	ldr	r2, [pc, #272]	; (8016918 <_vfiprintf_r+0x210>)
 8016808:	1a80      	subs	r0, r0, r2
 801680a:	fa0b f000 	lsl.w	r0, fp, r0
 801680e:	4318      	orrs	r0, r3
 8016810:	9004      	str	r0, [sp, #16]
 8016812:	4645      	mov	r5, r8
 8016814:	e7be      	b.n	8016794 <_vfiprintf_r+0x8c>
 8016816:	9a03      	ldr	r2, [sp, #12]
 8016818:	1d11      	adds	r1, r2, #4
 801681a:	6812      	ldr	r2, [r2, #0]
 801681c:	9103      	str	r1, [sp, #12]
 801681e:	2a00      	cmp	r2, #0
 8016820:	db01      	blt.n	8016826 <_vfiprintf_r+0x11e>
 8016822:	9207      	str	r2, [sp, #28]
 8016824:	e004      	b.n	8016830 <_vfiprintf_r+0x128>
 8016826:	4252      	negs	r2, r2
 8016828:	f043 0302 	orr.w	r3, r3, #2
 801682c:	9207      	str	r2, [sp, #28]
 801682e:	9304      	str	r3, [sp, #16]
 8016830:	f898 3000 	ldrb.w	r3, [r8]
 8016834:	2b2e      	cmp	r3, #46	; 0x2e
 8016836:	d10e      	bne.n	8016856 <_vfiprintf_r+0x14e>
 8016838:	f898 3001 	ldrb.w	r3, [r8, #1]
 801683c:	2b2a      	cmp	r3, #42	; 0x2a
 801683e:	d138      	bne.n	80168b2 <_vfiprintf_r+0x1aa>
 8016840:	9b03      	ldr	r3, [sp, #12]
 8016842:	1d1a      	adds	r2, r3, #4
 8016844:	681b      	ldr	r3, [r3, #0]
 8016846:	9203      	str	r2, [sp, #12]
 8016848:	2b00      	cmp	r3, #0
 801684a:	bfb8      	it	lt
 801684c:	f04f 33ff 	movlt.w	r3, #4294967295
 8016850:	f108 0802 	add.w	r8, r8, #2
 8016854:	9305      	str	r3, [sp, #20]
 8016856:	4d33      	ldr	r5, [pc, #204]	; (8016924 <_vfiprintf_r+0x21c>)
 8016858:	f898 1000 	ldrb.w	r1, [r8]
 801685c:	2203      	movs	r2, #3
 801685e:	4628      	mov	r0, r5
 8016860:	f7e9 fd46 	bl	80002f0 <memchr>
 8016864:	b140      	cbz	r0, 8016878 <_vfiprintf_r+0x170>
 8016866:	2340      	movs	r3, #64	; 0x40
 8016868:	1b40      	subs	r0, r0, r5
 801686a:	fa03 f000 	lsl.w	r0, r3, r0
 801686e:	9b04      	ldr	r3, [sp, #16]
 8016870:	4303      	orrs	r3, r0
 8016872:	f108 0801 	add.w	r8, r8, #1
 8016876:	9304      	str	r3, [sp, #16]
 8016878:	f898 1000 	ldrb.w	r1, [r8]
 801687c:	482a      	ldr	r0, [pc, #168]	; (8016928 <_vfiprintf_r+0x220>)
 801687e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016882:	2206      	movs	r2, #6
 8016884:	f108 0701 	add.w	r7, r8, #1
 8016888:	f7e9 fd32 	bl	80002f0 <memchr>
 801688c:	2800      	cmp	r0, #0
 801688e:	d037      	beq.n	8016900 <_vfiprintf_r+0x1f8>
 8016890:	4b26      	ldr	r3, [pc, #152]	; (801692c <_vfiprintf_r+0x224>)
 8016892:	bb1b      	cbnz	r3, 80168dc <_vfiprintf_r+0x1d4>
 8016894:	9b03      	ldr	r3, [sp, #12]
 8016896:	3307      	adds	r3, #7
 8016898:	f023 0307 	bic.w	r3, r3, #7
 801689c:	3308      	adds	r3, #8
 801689e:	9303      	str	r3, [sp, #12]
 80168a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80168a2:	444b      	add	r3, r9
 80168a4:	9309      	str	r3, [sp, #36]	; 0x24
 80168a6:	e750      	b.n	801674a <_vfiprintf_r+0x42>
 80168a8:	fb05 3202 	mla	r2, r5, r2, r3
 80168ac:	2001      	movs	r0, #1
 80168ae:	4688      	mov	r8, r1
 80168b0:	e78a      	b.n	80167c8 <_vfiprintf_r+0xc0>
 80168b2:	2300      	movs	r3, #0
 80168b4:	f108 0801 	add.w	r8, r8, #1
 80168b8:	9305      	str	r3, [sp, #20]
 80168ba:	4619      	mov	r1, r3
 80168bc:	250a      	movs	r5, #10
 80168be:	4640      	mov	r0, r8
 80168c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80168c4:	3a30      	subs	r2, #48	; 0x30
 80168c6:	2a09      	cmp	r2, #9
 80168c8:	d903      	bls.n	80168d2 <_vfiprintf_r+0x1ca>
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d0c3      	beq.n	8016856 <_vfiprintf_r+0x14e>
 80168ce:	9105      	str	r1, [sp, #20]
 80168d0:	e7c1      	b.n	8016856 <_vfiprintf_r+0x14e>
 80168d2:	fb05 2101 	mla	r1, r5, r1, r2
 80168d6:	2301      	movs	r3, #1
 80168d8:	4680      	mov	r8, r0
 80168da:	e7f0      	b.n	80168be <_vfiprintf_r+0x1b6>
 80168dc:	ab03      	add	r3, sp, #12
 80168de:	9300      	str	r3, [sp, #0]
 80168e0:	4622      	mov	r2, r4
 80168e2:	4b13      	ldr	r3, [pc, #76]	; (8016930 <_vfiprintf_r+0x228>)
 80168e4:	a904      	add	r1, sp, #16
 80168e6:	4630      	mov	r0, r6
 80168e8:	f3af 8000 	nop.w
 80168ec:	f1b0 3fff 	cmp.w	r0, #4294967295
 80168f0:	4681      	mov	r9, r0
 80168f2:	d1d5      	bne.n	80168a0 <_vfiprintf_r+0x198>
 80168f4:	89a3      	ldrh	r3, [r4, #12]
 80168f6:	065b      	lsls	r3, r3, #25
 80168f8:	f53f af7e 	bmi.w	80167f8 <_vfiprintf_r+0xf0>
 80168fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80168fe:	e77d      	b.n	80167fc <_vfiprintf_r+0xf4>
 8016900:	ab03      	add	r3, sp, #12
 8016902:	9300      	str	r3, [sp, #0]
 8016904:	4622      	mov	r2, r4
 8016906:	4b0a      	ldr	r3, [pc, #40]	; (8016930 <_vfiprintf_r+0x228>)
 8016908:	a904      	add	r1, sp, #16
 801690a:	4630      	mov	r0, r6
 801690c:	f000 f888 	bl	8016a20 <_printf_i>
 8016910:	e7ec      	b.n	80168ec <_vfiprintf_r+0x1e4>
 8016912:	bf00      	nop
 8016914:	080171bc 	.word	0x080171bc
 8016918:	080171fc 	.word	0x080171fc
 801691c:	080171dc 	.word	0x080171dc
 8016920:	0801719c 	.word	0x0801719c
 8016924:	08017202 	.word	0x08017202
 8016928:	08017206 	.word	0x08017206
 801692c:	00000000 	.word	0x00000000
 8016930:	080166e3 	.word	0x080166e3

08016934 <_printf_common>:
 8016934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016938:	4691      	mov	r9, r2
 801693a:	461f      	mov	r7, r3
 801693c:	688a      	ldr	r2, [r1, #8]
 801693e:	690b      	ldr	r3, [r1, #16]
 8016940:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016944:	4293      	cmp	r3, r2
 8016946:	bfb8      	it	lt
 8016948:	4613      	movlt	r3, r2
 801694a:	f8c9 3000 	str.w	r3, [r9]
 801694e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016952:	4606      	mov	r6, r0
 8016954:	460c      	mov	r4, r1
 8016956:	b112      	cbz	r2, 801695e <_printf_common+0x2a>
 8016958:	3301      	adds	r3, #1
 801695a:	f8c9 3000 	str.w	r3, [r9]
 801695e:	6823      	ldr	r3, [r4, #0]
 8016960:	0699      	lsls	r1, r3, #26
 8016962:	bf42      	ittt	mi
 8016964:	f8d9 3000 	ldrmi.w	r3, [r9]
 8016968:	3302      	addmi	r3, #2
 801696a:	f8c9 3000 	strmi.w	r3, [r9]
 801696e:	6825      	ldr	r5, [r4, #0]
 8016970:	f015 0506 	ands.w	r5, r5, #6
 8016974:	d107      	bne.n	8016986 <_printf_common+0x52>
 8016976:	f104 0a19 	add.w	sl, r4, #25
 801697a:	68e3      	ldr	r3, [r4, #12]
 801697c:	f8d9 2000 	ldr.w	r2, [r9]
 8016980:	1a9b      	subs	r3, r3, r2
 8016982:	42ab      	cmp	r3, r5
 8016984:	dc28      	bgt.n	80169d8 <_printf_common+0xa4>
 8016986:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801698a:	6822      	ldr	r2, [r4, #0]
 801698c:	3300      	adds	r3, #0
 801698e:	bf18      	it	ne
 8016990:	2301      	movne	r3, #1
 8016992:	0692      	lsls	r2, r2, #26
 8016994:	d42d      	bmi.n	80169f2 <_printf_common+0xbe>
 8016996:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801699a:	4639      	mov	r1, r7
 801699c:	4630      	mov	r0, r6
 801699e:	47c0      	blx	r8
 80169a0:	3001      	adds	r0, #1
 80169a2:	d020      	beq.n	80169e6 <_printf_common+0xb2>
 80169a4:	6823      	ldr	r3, [r4, #0]
 80169a6:	68e5      	ldr	r5, [r4, #12]
 80169a8:	f8d9 2000 	ldr.w	r2, [r9]
 80169ac:	f003 0306 	and.w	r3, r3, #6
 80169b0:	2b04      	cmp	r3, #4
 80169b2:	bf08      	it	eq
 80169b4:	1aad      	subeq	r5, r5, r2
 80169b6:	68a3      	ldr	r3, [r4, #8]
 80169b8:	6922      	ldr	r2, [r4, #16]
 80169ba:	bf0c      	ite	eq
 80169bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80169c0:	2500      	movne	r5, #0
 80169c2:	4293      	cmp	r3, r2
 80169c4:	bfc4      	itt	gt
 80169c6:	1a9b      	subgt	r3, r3, r2
 80169c8:	18ed      	addgt	r5, r5, r3
 80169ca:	f04f 0900 	mov.w	r9, #0
 80169ce:	341a      	adds	r4, #26
 80169d0:	454d      	cmp	r5, r9
 80169d2:	d11a      	bne.n	8016a0a <_printf_common+0xd6>
 80169d4:	2000      	movs	r0, #0
 80169d6:	e008      	b.n	80169ea <_printf_common+0xb6>
 80169d8:	2301      	movs	r3, #1
 80169da:	4652      	mov	r2, sl
 80169dc:	4639      	mov	r1, r7
 80169de:	4630      	mov	r0, r6
 80169e0:	47c0      	blx	r8
 80169e2:	3001      	adds	r0, #1
 80169e4:	d103      	bne.n	80169ee <_printf_common+0xba>
 80169e6:	f04f 30ff 	mov.w	r0, #4294967295
 80169ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80169ee:	3501      	adds	r5, #1
 80169f0:	e7c3      	b.n	801697a <_printf_common+0x46>
 80169f2:	18e1      	adds	r1, r4, r3
 80169f4:	1c5a      	adds	r2, r3, #1
 80169f6:	2030      	movs	r0, #48	; 0x30
 80169f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80169fc:	4422      	add	r2, r4
 80169fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016a02:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016a06:	3302      	adds	r3, #2
 8016a08:	e7c5      	b.n	8016996 <_printf_common+0x62>
 8016a0a:	2301      	movs	r3, #1
 8016a0c:	4622      	mov	r2, r4
 8016a0e:	4639      	mov	r1, r7
 8016a10:	4630      	mov	r0, r6
 8016a12:	47c0      	blx	r8
 8016a14:	3001      	adds	r0, #1
 8016a16:	d0e6      	beq.n	80169e6 <_printf_common+0xb2>
 8016a18:	f109 0901 	add.w	r9, r9, #1
 8016a1c:	e7d8      	b.n	80169d0 <_printf_common+0x9c>
	...

08016a20 <_printf_i>:
 8016a20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016a24:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8016a28:	460c      	mov	r4, r1
 8016a2a:	7e09      	ldrb	r1, [r1, #24]
 8016a2c:	b085      	sub	sp, #20
 8016a2e:	296e      	cmp	r1, #110	; 0x6e
 8016a30:	4617      	mov	r7, r2
 8016a32:	4606      	mov	r6, r0
 8016a34:	4698      	mov	r8, r3
 8016a36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016a38:	f000 80b3 	beq.w	8016ba2 <_printf_i+0x182>
 8016a3c:	d822      	bhi.n	8016a84 <_printf_i+0x64>
 8016a3e:	2963      	cmp	r1, #99	; 0x63
 8016a40:	d036      	beq.n	8016ab0 <_printf_i+0x90>
 8016a42:	d80a      	bhi.n	8016a5a <_printf_i+0x3a>
 8016a44:	2900      	cmp	r1, #0
 8016a46:	f000 80b9 	beq.w	8016bbc <_printf_i+0x19c>
 8016a4a:	2958      	cmp	r1, #88	; 0x58
 8016a4c:	f000 8083 	beq.w	8016b56 <_printf_i+0x136>
 8016a50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016a54:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8016a58:	e032      	b.n	8016ac0 <_printf_i+0xa0>
 8016a5a:	2964      	cmp	r1, #100	; 0x64
 8016a5c:	d001      	beq.n	8016a62 <_printf_i+0x42>
 8016a5e:	2969      	cmp	r1, #105	; 0x69
 8016a60:	d1f6      	bne.n	8016a50 <_printf_i+0x30>
 8016a62:	6820      	ldr	r0, [r4, #0]
 8016a64:	6813      	ldr	r3, [r2, #0]
 8016a66:	0605      	lsls	r5, r0, #24
 8016a68:	f103 0104 	add.w	r1, r3, #4
 8016a6c:	d52a      	bpl.n	8016ac4 <_printf_i+0xa4>
 8016a6e:	681b      	ldr	r3, [r3, #0]
 8016a70:	6011      	str	r1, [r2, #0]
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	da03      	bge.n	8016a7e <_printf_i+0x5e>
 8016a76:	222d      	movs	r2, #45	; 0x2d
 8016a78:	425b      	negs	r3, r3
 8016a7a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8016a7e:	486f      	ldr	r0, [pc, #444]	; (8016c3c <_printf_i+0x21c>)
 8016a80:	220a      	movs	r2, #10
 8016a82:	e039      	b.n	8016af8 <_printf_i+0xd8>
 8016a84:	2973      	cmp	r1, #115	; 0x73
 8016a86:	f000 809d 	beq.w	8016bc4 <_printf_i+0x1a4>
 8016a8a:	d808      	bhi.n	8016a9e <_printf_i+0x7e>
 8016a8c:	296f      	cmp	r1, #111	; 0x6f
 8016a8e:	d020      	beq.n	8016ad2 <_printf_i+0xb2>
 8016a90:	2970      	cmp	r1, #112	; 0x70
 8016a92:	d1dd      	bne.n	8016a50 <_printf_i+0x30>
 8016a94:	6823      	ldr	r3, [r4, #0]
 8016a96:	f043 0320 	orr.w	r3, r3, #32
 8016a9a:	6023      	str	r3, [r4, #0]
 8016a9c:	e003      	b.n	8016aa6 <_printf_i+0x86>
 8016a9e:	2975      	cmp	r1, #117	; 0x75
 8016aa0:	d017      	beq.n	8016ad2 <_printf_i+0xb2>
 8016aa2:	2978      	cmp	r1, #120	; 0x78
 8016aa4:	d1d4      	bne.n	8016a50 <_printf_i+0x30>
 8016aa6:	2378      	movs	r3, #120	; 0x78
 8016aa8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016aac:	4864      	ldr	r0, [pc, #400]	; (8016c40 <_printf_i+0x220>)
 8016aae:	e055      	b.n	8016b5c <_printf_i+0x13c>
 8016ab0:	6813      	ldr	r3, [r2, #0]
 8016ab2:	1d19      	adds	r1, r3, #4
 8016ab4:	681b      	ldr	r3, [r3, #0]
 8016ab6:	6011      	str	r1, [r2, #0]
 8016ab8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016abc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016ac0:	2301      	movs	r3, #1
 8016ac2:	e08c      	b.n	8016bde <_printf_i+0x1be>
 8016ac4:	681b      	ldr	r3, [r3, #0]
 8016ac6:	6011      	str	r1, [r2, #0]
 8016ac8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016acc:	bf18      	it	ne
 8016ace:	b21b      	sxthne	r3, r3
 8016ad0:	e7cf      	b.n	8016a72 <_printf_i+0x52>
 8016ad2:	6813      	ldr	r3, [r2, #0]
 8016ad4:	6825      	ldr	r5, [r4, #0]
 8016ad6:	1d18      	adds	r0, r3, #4
 8016ad8:	6010      	str	r0, [r2, #0]
 8016ada:	0628      	lsls	r0, r5, #24
 8016adc:	d501      	bpl.n	8016ae2 <_printf_i+0xc2>
 8016ade:	681b      	ldr	r3, [r3, #0]
 8016ae0:	e002      	b.n	8016ae8 <_printf_i+0xc8>
 8016ae2:	0668      	lsls	r0, r5, #25
 8016ae4:	d5fb      	bpl.n	8016ade <_printf_i+0xbe>
 8016ae6:	881b      	ldrh	r3, [r3, #0]
 8016ae8:	4854      	ldr	r0, [pc, #336]	; (8016c3c <_printf_i+0x21c>)
 8016aea:	296f      	cmp	r1, #111	; 0x6f
 8016aec:	bf14      	ite	ne
 8016aee:	220a      	movne	r2, #10
 8016af0:	2208      	moveq	r2, #8
 8016af2:	2100      	movs	r1, #0
 8016af4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016af8:	6865      	ldr	r5, [r4, #4]
 8016afa:	60a5      	str	r5, [r4, #8]
 8016afc:	2d00      	cmp	r5, #0
 8016afe:	f2c0 8095 	blt.w	8016c2c <_printf_i+0x20c>
 8016b02:	6821      	ldr	r1, [r4, #0]
 8016b04:	f021 0104 	bic.w	r1, r1, #4
 8016b08:	6021      	str	r1, [r4, #0]
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d13d      	bne.n	8016b8a <_printf_i+0x16a>
 8016b0e:	2d00      	cmp	r5, #0
 8016b10:	f040 808e 	bne.w	8016c30 <_printf_i+0x210>
 8016b14:	4665      	mov	r5, ip
 8016b16:	2a08      	cmp	r2, #8
 8016b18:	d10b      	bne.n	8016b32 <_printf_i+0x112>
 8016b1a:	6823      	ldr	r3, [r4, #0]
 8016b1c:	07db      	lsls	r3, r3, #31
 8016b1e:	d508      	bpl.n	8016b32 <_printf_i+0x112>
 8016b20:	6923      	ldr	r3, [r4, #16]
 8016b22:	6862      	ldr	r2, [r4, #4]
 8016b24:	429a      	cmp	r2, r3
 8016b26:	bfde      	ittt	le
 8016b28:	2330      	movle	r3, #48	; 0x30
 8016b2a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016b2e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016b32:	ebac 0305 	sub.w	r3, ip, r5
 8016b36:	6123      	str	r3, [r4, #16]
 8016b38:	f8cd 8000 	str.w	r8, [sp]
 8016b3c:	463b      	mov	r3, r7
 8016b3e:	aa03      	add	r2, sp, #12
 8016b40:	4621      	mov	r1, r4
 8016b42:	4630      	mov	r0, r6
 8016b44:	f7ff fef6 	bl	8016934 <_printf_common>
 8016b48:	3001      	adds	r0, #1
 8016b4a:	d14d      	bne.n	8016be8 <_printf_i+0x1c8>
 8016b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8016b50:	b005      	add	sp, #20
 8016b52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016b56:	4839      	ldr	r0, [pc, #228]	; (8016c3c <_printf_i+0x21c>)
 8016b58:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8016b5c:	6813      	ldr	r3, [r2, #0]
 8016b5e:	6821      	ldr	r1, [r4, #0]
 8016b60:	1d1d      	adds	r5, r3, #4
 8016b62:	681b      	ldr	r3, [r3, #0]
 8016b64:	6015      	str	r5, [r2, #0]
 8016b66:	060a      	lsls	r2, r1, #24
 8016b68:	d50b      	bpl.n	8016b82 <_printf_i+0x162>
 8016b6a:	07ca      	lsls	r2, r1, #31
 8016b6c:	bf44      	itt	mi
 8016b6e:	f041 0120 	orrmi.w	r1, r1, #32
 8016b72:	6021      	strmi	r1, [r4, #0]
 8016b74:	b91b      	cbnz	r3, 8016b7e <_printf_i+0x15e>
 8016b76:	6822      	ldr	r2, [r4, #0]
 8016b78:	f022 0220 	bic.w	r2, r2, #32
 8016b7c:	6022      	str	r2, [r4, #0]
 8016b7e:	2210      	movs	r2, #16
 8016b80:	e7b7      	b.n	8016af2 <_printf_i+0xd2>
 8016b82:	064d      	lsls	r5, r1, #25
 8016b84:	bf48      	it	mi
 8016b86:	b29b      	uxthmi	r3, r3
 8016b88:	e7ef      	b.n	8016b6a <_printf_i+0x14a>
 8016b8a:	4665      	mov	r5, ip
 8016b8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8016b90:	fb02 3311 	mls	r3, r2, r1, r3
 8016b94:	5cc3      	ldrb	r3, [r0, r3]
 8016b96:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8016b9a:	460b      	mov	r3, r1
 8016b9c:	2900      	cmp	r1, #0
 8016b9e:	d1f5      	bne.n	8016b8c <_printf_i+0x16c>
 8016ba0:	e7b9      	b.n	8016b16 <_printf_i+0xf6>
 8016ba2:	6813      	ldr	r3, [r2, #0]
 8016ba4:	6825      	ldr	r5, [r4, #0]
 8016ba6:	6961      	ldr	r1, [r4, #20]
 8016ba8:	1d18      	adds	r0, r3, #4
 8016baa:	6010      	str	r0, [r2, #0]
 8016bac:	0628      	lsls	r0, r5, #24
 8016bae:	681b      	ldr	r3, [r3, #0]
 8016bb0:	d501      	bpl.n	8016bb6 <_printf_i+0x196>
 8016bb2:	6019      	str	r1, [r3, #0]
 8016bb4:	e002      	b.n	8016bbc <_printf_i+0x19c>
 8016bb6:	066a      	lsls	r2, r5, #25
 8016bb8:	d5fb      	bpl.n	8016bb2 <_printf_i+0x192>
 8016bba:	8019      	strh	r1, [r3, #0]
 8016bbc:	2300      	movs	r3, #0
 8016bbe:	6123      	str	r3, [r4, #16]
 8016bc0:	4665      	mov	r5, ip
 8016bc2:	e7b9      	b.n	8016b38 <_printf_i+0x118>
 8016bc4:	6813      	ldr	r3, [r2, #0]
 8016bc6:	1d19      	adds	r1, r3, #4
 8016bc8:	6011      	str	r1, [r2, #0]
 8016bca:	681d      	ldr	r5, [r3, #0]
 8016bcc:	6862      	ldr	r2, [r4, #4]
 8016bce:	2100      	movs	r1, #0
 8016bd0:	4628      	mov	r0, r5
 8016bd2:	f7e9 fb8d 	bl	80002f0 <memchr>
 8016bd6:	b108      	cbz	r0, 8016bdc <_printf_i+0x1bc>
 8016bd8:	1b40      	subs	r0, r0, r5
 8016bda:	6060      	str	r0, [r4, #4]
 8016bdc:	6863      	ldr	r3, [r4, #4]
 8016bde:	6123      	str	r3, [r4, #16]
 8016be0:	2300      	movs	r3, #0
 8016be2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016be6:	e7a7      	b.n	8016b38 <_printf_i+0x118>
 8016be8:	6923      	ldr	r3, [r4, #16]
 8016bea:	462a      	mov	r2, r5
 8016bec:	4639      	mov	r1, r7
 8016bee:	4630      	mov	r0, r6
 8016bf0:	47c0      	blx	r8
 8016bf2:	3001      	adds	r0, #1
 8016bf4:	d0aa      	beq.n	8016b4c <_printf_i+0x12c>
 8016bf6:	6823      	ldr	r3, [r4, #0]
 8016bf8:	079b      	lsls	r3, r3, #30
 8016bfa:	d413      	bmi.n	8016c24 <_printf_i+0x204>
 8016bfc:	68e0      	ldr	r0, [r4, #12]
 8016bfe:	9b03      	ldr	r3, [sp, #12]
 8016c00:	4298      	cmp	r0, r3
 8016c02:	bfb8      	it	lt
 8016c04:	4618      	movlt	r0, r3
 8016c06:	e7a3      	b.n	8016b50 <_printf_i+0x130>
 8016c08:	2301      	movs	r3, #1
 8016c0a:	464a      	mov	r2, r9
 8016c0c:	4639      	mov	r1, r7
 8016c0e:	4630      	mov	r0, r6
 8016c10:	47c0      	blx	r8
 8016c12:	3001      	adds	r0, #1
 8016c14:	d09a      	beq.n	8016b4c <_printf_i+0x12c>
 8016c16:	3501      	adds	r5, #1
 8016c18:	68e3      	ldr	r3, [r4, #12]
 8016c1a:	9a03      	ldr	r2, [sp, #12]
 8016c1c:	1a9b      	subs	r3, r3, r2
 8016c1e:	42ab      	cmp	r3, r5
 8016c20:	dcf2      	bgt.n	8016c08 <_printf_i+0x1e8>
 8016c22:	e7eb      	b.n	8016bfc <_printf_i+0x1dc>
 8016c24:	2500      	movs	r5, #0
 8016c26:	f104 0919 	add.w	r9, r4, #25
 8016c2a:	e7f5      	b.n	8016c18 <_printf_i+0x1f8>
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d1ac      	bne.n	8016b8a <_printf_i+0x16a>
 8016c30:	7803      	ldrb	r3, [r0, #0]
 8016c32:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016c36:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016c3a:	e76c      	b.n	8016b16 <_printf_i+0xf6>
 8016c3c:	0801720d 	.word	0x0801720d
 8016c40:	0801721e 	.word	0x0801721e

08016c44 <__sread>:
 8016c44:	b510      	push	{r4, lr}
 8016c46:	460c      	mov	r4, r1
 8016c48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c4c:	f000 f8d4 	bl	8016df8 <_read_r>
 8016c50:	2800      	cmp	r0, #0
 8016c52:	bfab      	itete	ge
 8016c54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016c56:	89a3      	ldrhlt	r3, [r4, #12]
 8016c58:	181b      	addge	r3, r3, r0
 8016c5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016c5e:	bfac      	ite	ge
 8016c60:	6563      	strge	r3, [r4, #84]	; 0x54
 8016c62:	81a3      	strhlt	r3, [r4, #12]
 8016c64:	bd10      	pop	{r4, pc}

08016c66 <__swrite>:
 8016c66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c6a:	461f      	mov	r7, r3
 8016c6c:	898b      	ldrh	r3, [r1, #12]
 8016c6e:	05db      	lsls	r3, r3, #23
 8016c70:	4605      	mov	r5, r0
 8016c72:	460c      	mov	r4, r1
 8016c74:	4616      	mov	r6, r2
 8016c76:	d505      	bpl.n	8016c84 <__swrite+0x1e>
 8016c78:	2302      	movs	r3, #2
 8016c7a:	2200      	movs	r2, #0
 8016c7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c80:	f000 f868 	bl	8016d54 <_lseek_r>
 8016c84:	89a3      	ldrh	r3, [r4, #12]
 8016c86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016c8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016c8e:	81a3      	strh	r3, [r4, #12]
 8016c90:	4632      	mov	r2, r6
 8016c92:	463b      	mov	r3, r7
 8016c94:	4628      	mov	r0, r5
 8016c96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016c9a:	f000 b817 	b.w	8016ccc <_write_r>

08016c9e <__sseek>:
 8016c9e:	b510      	push	{r4, lr}
 8016ca0:	460c      	mov	r4, r1
 8016ca2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ca6:	f000 f855 	bl	8016d54 <_lseek_r>
 8016caa:	1c43      	adds	r3, r0, #1
 8016cac:	89a3      	ldrh	r3, [r4, #12]
 8016cae:	bf15      	itete	ne
 8016cb0:	6560      	strne	r0, [r4, #84]	; 0x54
 8016cb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016cb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016cba:	81a3      	strheq	r3, [r4, #12]
 8016cbc:	bf18      	it	ne
 8016cbe:	81a3      	strhne	r3, [r4, #12]
 8016cc0:	bd10      	pop	{r4, pc}

08016cc2 <__sclose>:
 8016cc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016cc6:	f000 b813 	b.w	8016cf0 <_close_r>
	...

08016ccc <_write_r>:
 8016ccc:	b538      	push	{r3, r4, r5, lr}
 8016cce:	4c07      	ldr	r4, [pc, #28]	; (8016cec <_write_r+0x20>)
 8016cd0:	4605      	mov	r5, r0
 8016cd2:	4608      	mov	r0, r1
 8016cd4:	4611      	mov	r1, r2
 8016cd6:	2200      	movs	r2, #0
 8016cd8:	6022      	str	r2, [r4, #0]
 8016cda:	461a      	mov	r2, r3
 8016cdc:	f7ea fcbd 	bl	800165a <_write>
 8016ce0:	1c43      	adds	r3, r0, #1
 8016ce2:	d102      	bne.n	8016cea <_write_r+0x1e>
 8016ce4:	6823      	ldr	r3, [r4, #0]
 8016ce6:	b103      	cbz	r3, 8016cea <_write_r+0x1e>
 8016ce8:	602b      	str	r3, [r5, #0]
 8016cea:	bd38      	pop	{r3, r4, r5, pc}
 8016cec:	2400232c 	.word	0x2400232c

08016cf0 <_close_r>:
 8016cf0:	b538      	push	{r3, r4, r5, lr}
 8016cf2:	4c06      	ldr	r4, [pc, #24]	; (8016d0c <_close_r+0x1c>)
 8016cf4:	2300      	movs	r3, #0
 8016cf6:	4605      	mov	r5, r0
 8016cf8:	4608      	mov	r0, r1
 8016cfa:	6023      	str	r3, [r4, #0]
 8016cfc:	f7ea ff9f 	bl	8001c3e <_close>
 8016d00:	1c43      	adds	r3, r0, #1
 8016d02:	d102      	bne.n	8016d0a <_close_r+0x1a>
 8016d04:	6823      	ldr	r3, [r4, #0]
 8016d06:	b103      	cbz	r3, 8016d0a <_close_r+0x1a>
 8016d08:	602b      	str	r3, [r5, #0]
 8016d0a:	bd38      	pop	{r3, r4, r5, pc}
 8016d0c:	2400232c 	.word	0x2400232c

08016d10 <_fstat_r>:
 8016d10:	b538      	push	{r3, r4, r5, lr}
 8016d12:	4c07      	ldr	r4, [pc, #28]	; (8016d30 <_fstat_r+0x20>)
 8016d14:	2300      	movs	r3, #0
 8016d16:	4605      	mov	r5, r0
 8016d18:	4608      	mov	r0, r1
 8016d1a:	4611      	mov	r1, r2
 8016d1c:	6023      	str	r3, [r4, #0]
 8016d1e:	f7ea ff9a 	bl	8001c56 <_fstat>
 8016d22:	1c43      	adds	r3, r0, #1
 8016d24:	d102      	bne.n	8016d2c <_fstat_r+0x1c>
 8016d26:	6823      	ldr	r3, [r4, #0]
 8016d28:	b103      	cbz	r3, 8016d2c <_fstat_r+0x1c>
 8016d2a:	602b      	str	r3, [r5, #0]
 8016d2c:	bd38      	pop	{r3, r4, r5, pc}
 8016d2e:	bf00      	nop
 8016d30:	2400232c 	.word	0x2400232c

08016d34 <_isatty_r>:
 8016d34:	b538      	push	{r3, r4, r5, lr}
 8016d36:	4c06      	ldr	r4, [pc, #24]	; (8016d50 <_isatty_r+0x1c>)
 8016d38:	2300      	movs	r3, #0
 8016d3a:	4605      	mov	r5, r0
 8016d3c:	4608      	mov	r0, r1
 8016d3e:	6023      	str	r3, [r4, #0]
 8016d40:	f7ea ff99 	bl	8001c76 <_isatty>
 8016d44:	1c43      	adds	r3, r0, #1
 8016d46:	d102      	bne.n	8016d4e <_isatty_r+0x1a>
 8016d48:	6823      	ldr	r3, [r4, #0]
 8016d4a:	b103      	cbz	r3, 8016d4e <_isatty_r+0x1a>
 8016d4c:	602b      	str	r3, [r5, #0]
 8016d4e:	bd38      	pop	{r3, r4, r5, pc}
 8016d50:	2400232c 	.word	0x2400232c

08016d54 <_lseek_r>:
 8016d54:	b538      	push	{r3, r4, r5, lr}
 8016d56:	4c07      	ldr	r4, [pc, #28]	; (8016d74 <_lseek_r+0x20>)
 8016d58:	4605      	mov	r5, r0
 8016d5a:	4608      	mov	r0, r1
 8016d5c:	4611      	mov	r1, r2
 8016d5e:	2200      	movs	r2, #0
 8016d60:	6022      	str	r2, [r4, #0]
 8016d62:	461a      	mov	r2, r3
 8016d64:	f7ea ff92 	bl	8001c8c <_lseek>
 8016d68:	1c43      	adds	r3, r0, #1
 8016d6a:	d102      	bne.n	8016d72 <_lseek_r+0x1e>
 8016d6c:	6823      	ldr	r3, [r4, #0]
 8016d6e:	b103      	cbz	r3, 8016d72 <_lseek_r+0x1e>
 8016d70:	602b      	str	r3, [r5, #0]
 8016d72:	bd38      	pop	{r3, r4, r5, pc}
 8016d74:	2400232c 	.word	0x2400232c

08016d78 <memmove>:
 8016d78:	4288      	cmp	r0, r1
 8016d7a:	b510      	push	{r4, lr}
 8016d7c:	eb01 0302 	add.w	r3, r1, r2
 8016d80:	d807      	bhi.n	8016d92 <memmove+0x1a>
 8016d82:	1e42      	subs	r2, r0, #1
 8016d84:	4299      	cmp	r1, r3
 8016d86:	d00a      	beq.n	8016d9e <memmove+0x26>
 8016d88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016d8c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8016d90:	e7f8      	b.n	8016d84 <memmove+0xc>
 8016d92:	4283      	cmp	r3, r0
 8016d94:	d9f5      	bls.n	8016d82 <memmove+0xa>
 8016d96:	1881      	adds	r1, r0, r2
 8016d98:	1ad2      	subs	r2, r2, r3
 8016d9a:	42d3      	cmn	r3, r2
 8016d9c:	d100      	bne.n	8016da0 <memmove+0x28>
 8016d9e:	bd10      	pop	{r4, pc}
 8016da0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016da4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8016da8:	e7f7      	b.n	8016d9a <memmove+0x22>

08016daa <_realloc_r>:
 8016daa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016dac:	4607      	mov	r7, r0
 8016dae:	4614      	mov	r4, r2
 8016db0:	460e      	mov	r6, r1
 8016db2:	b921      	cbnz	r1, 8016dbe <_realloc_r+0x14>
 8016db4:	4611      	mov	r1, r2
 8016db6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016dba:	f7fe bf6f 	b.w	8015c9c <_malloc_r>
 8016dbe:	b922      	cbnz	r2, 8016dca <_realloc_r+0x20>
 8016dc0:	f7fe ff1e 	bl	8015c00 <_free_r>
 8016dc4:	4625      	mov	r5, r4
 8016dc6:	4628      	mov	r0, r5
 8016dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016dca:	f000 f827 	bl	8016e1c <_malloc_usable_size_r>
 8016dce:	42a0      	cmp	r0, r4
 8016dd0:	d20f      	bcs.n	8016df2 <_realloc_r+0x48>
 8016dd2:	4621      	mov	r1, r4
 8016dd4:	4638      	mov	r0, r7
 8016dd6:	f7fe ff61 	bl	8015c9c <_malloc_r>
 8016dda:	4605      	mov	r5, r0
 8016ddc:	2800      	cmp	r0, #0
 8016dde:	d0f2      	beq.n	8016dc6 <_realloc_r+0x1c>
 8016de0:	4631      	mov	r1, r6
 8016de2:	4622      	mov	r2, r4
 8016de4:	f7fe fef8 	bl	8015bd8 <memcpy>
 8016de8:	4631      	mov	r1, r6
 8016dea:	4638      	mov	r0, r7
 8016dec:	f7fe ff08 	bl	8015c00 <_free_r>
 8016df0:	e7e9      	b.n	8016dc6 <_realloc_r+0x1c>
 8016df2:	4635      	mov	r5, r6
 8016df4:	e7e7      	b.n	8016dc6 <_realloc_r+0x1c>
	...

08016df8 <_read_r>:
 8016df8:	b538      	push	{r3, r4, r5, lr}
 8016dfa:	4c07      	ldr	r4, [pc, #28]	; (8016e18 <_read_r+0x20>)
 8016dfc:	4605      	mov	r5, r0
 8016dfe:	4608      	mov	r0, r1
 8016e00:	4611      	mov	r1, r2
 8016e02:	2200      	movs	r2, #0
 8016e04:	6022      	str	r2, [r4, #0]
 8016e06:	461a      	mov	r2, r3
 8016e08:	f7ea fefc 	bl	8001c04 <_read>
 8016e0c:	1c43      	adds	r3, r0, #1
 8016e0e:	d102      	bne.n	8016e16 <_read_r+0x1e>
 8016e10:	6823      	ldr	r3, [r4, #0]
 8016e12:	b103      	cbz	r3, 8016e16 <_read_r+0x1e>
 8016e14:	602b      	str	r3, [r5, #0]
 8016e16:	bd38      	pop	{r3, r4, r5, pc}
 8016e18:	2400232c 	.word	0x2400232c

08016e1c <_malloc_usable_size_r>:
 8016e1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016e20:	1f18      	subs	r0, r3, #4
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	bfbc      	itt	lt
 8016e26:	580b      	ldrlt	r3, [r1, r0]
 8016e28:	18c0      	addlt	r0, r0, r3
 8016e2a:	4770      	bx	lr

08016e2c <_init>:
 8016e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e2e:	bf00      	nop
 8016e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016e32:	bc08      	pop	{r3}
 8016e34:	469e      	mov	lr, r3
 8016e36:	4770      	bx	lr

08016e38 <_fini>:
 8016e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e3a:	bf00      	nop
 8016e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016e3e:	bc08      	pop	{r3}
 8016e40:	469e      	mov	lr, r3
 8016e42:	4770      	bx	lr

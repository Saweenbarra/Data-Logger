
Data-Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fab8  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  0800fd50  0800fd50  0001fd50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fea8  0800fea8  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800fea8  0800fea8  0001fea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800feb0  0800feb0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800feb0  0800feb0  0001feb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800feb4  0800feb4  0001feb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  24000000  0800feb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021a4  240001e8  080100a0  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400238c  080100a0  0002238c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034d7f  00000000  00000000  00020216  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005866  00000000  00000000  00054f95  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b88  00000000  00000000  0005a800  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001960  00000000  00000000  0005c388  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000088ad  00000000  00000000  0005dce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c41f  00000000  00000000  00066595  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0016d960  00000000  00000000  000829b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001f0314  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007658  00000000  00000000  001f0390  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240001e8 	.word	0x240001e8
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800fd38 	.word	0x0800fd38

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240001ec 	.word	0x240001ec
 80002d4:	0800fd38 	.word	0x0800fd38

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b590      	push	{r4, r7, lr}
 80005da:	b087      	sub	sp, #28
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f000 ff51 	bl	8001484 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f847 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 fb09 	bl	8000bfc <MX_GPIO_Init>
  MX_DMA_Init();
 80005ea:	f000 fae7 	bl	8000bbc <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 80005ee:	f000 f9d5 	bl	800099c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80005f2:	f00c ff8f 	bl	800d514 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 80005f6:	f00e fd93 	bl	800f120 <MX_USB_DEVICE_Init>
  MX_FDCAN1_Init();
 80005fa:	f000 f907 	bl	800080c <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80005fe:	f000 f969 	bl	80008d4 <MX_FDCAN2_Init>
  MX_UART8_Init();
 8000602:	f000 fa43 	bl	8000a8c <MX_UART8_Init>
  MX_USART3_UART_Init();
 8000606:	f000 fa8d 	bl	8000b24 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 800060a:	f000 f9e9 	bl	80009e0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_SET);
 800060e:	2201      	movs	r2, #1
 8000610:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000614:	4812      	ldr	r0, [pc, #72]	; (8000660 <main+0x88>)
 8000616:	f003 ff0d 	bl	8004434 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPS_INT_GPIO_Port, GPS_INT_Pin, GPIO_PIN_SET);
 800061a:	2201      	movs	r2, #1
 800061c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000620:	480f      	ldr	r0, [pc, #60]	; (8000660 <main+0x88>)
 8000622:	f003 ff07 	bl	8004434 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000626:	2201      	movs	r2, #1
 8000628:	2101      	movs	r1, #1
 800062a:	480e      	ldr	r0, [pc, #56]	; (8000664 <main+0x8c>)
 800062c:	f003 ff02 	bl	8004434 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000630:	2064      	movs	r0, #100	; 0x64
 8000632:	f000 ffb9 	bl	80015a8 <HAL_Delay>

  HAL_UART_Receive_DMA(&huart3, (uint8_t *)rxBuf, BUFFLENGTH);
 8000636:	2246      	movs	r2, #70	; 0x46
 8000638:	490b      	ldr	r1, [pc, #44]	; (8000668 <main+0x90>)
 800063a:	480c      	ldr	r0, [pc, #48]	; (800066c <main+0x94>)
 800063c:	f009 fccc 	bl	8009fd8 <HAL_UART_Receive_DMA>

  uint16_t measRate = 100;
 8000640:	2364      	movs	r3, #100	; 0x64
 8000642:	82fb      	strh	r3, [r7, #22]
  uint16_t navRate = 1;
 8000644:	2301      	movs	r3, #1
 8000646:	82bb      	strh	r3, [r7, #20]
  uint16_t timeRef = 0;
 8000648:	2300      	movs	r3, #0
 800064a:	827b      	strh	r3, [r7, #18]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t buffer[] = "Hello, World!\r\n";
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <main+0x98>)
 800064e:	463c      	mov	r4, r7
 8000650:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000652:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	  HAL_Delay(1000);
 8000656:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800065a:	f000 ffa5 	bl	80015a8 <HAL_Delay>
  {
 800065e:	e7f5      	b.n	800064c <main+0x74>
 8000660:	58020c00 	.word	0x58020c00
 8000664:	58020400 	.word	0x58020400
 8000668:	240003a8 	.word	0x240003a8
 800066c:	2400029c 	.word	0x2400029c
 8000670:	0800fd50 	.word	0x0800fd50

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b0cc      	sub	sp, #304	; 0x130
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800067e:	224c      	movs	r2, #76	; 0x4c
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f00f fa95 	bl	800fbb2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800068c:	2220      	movs	r2, #32
 800068e:	2100      	movs	r1, #0
 8000690:	4618      	mov	r0, r3
 8000692:	f00f fa8e 	bl	800fbb2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000696:	f107 0308 	add.w	r3, r7, #8
 800069a:	4618      	mov	r0, r3
 800069c:	23bc      	movs	r3, #188	; 0xbc
 800069e:	461a      	mov	r2, r3
 80006a0:	2100      	movs	r1, #0
 80006a2:	f00f fa86 	bl	800fbb2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006a6:	2002      	movs	r0, #2
 80006a8:	f005 f8d4 	bl	8005854 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	4b53      	ldr	r3, [pc, #332]	; (8000800 <SystemClock_Config+0x18c>)
 80006b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006b6:	4a52      	ldr	r2, [pc, #328]	; (8000800 <SystemClock_Config+0x18c>)
 80006b8:	f023 0301 	bic.w	r3, r3, #1
 80006bc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006be:	4b50      	ldr	r3, [pc, #320]	; (8000800 <SystemClock_Config+0x18c>)
 80006c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006c2:	f003 0201 	and.w	r2, r3, #1
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	4b4e      	ldr	r3, [pc, #312]	; (8000804 <SystemClock_Config+0x190>)
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006d2:	4a4c      	ldr	r2, [pc, #304]	; (8000804 <SystemClock_Config+0x190>)
 80006d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d8:	6193      	str	r3, [r2, #24]
 80006da:	4b4a      	ldr	r3, [pc, #296]	; (8000804 <SystemClock_Config+0x190>)
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006ea:	bf00      	nop
 80006ec:	4b45      	ldr	r3, [pc, #276]	; (8000804 <SystemClock_Config+0x190>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006f8:	d1f8      	bne.n	80006ec <SystemClock_Config+0x78>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80006fa:	2303      	movs	r3, #3
 80006fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000700:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000704:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000708:	2301      	movs	r3, #1
 800070a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800070e:	2340      	movs	r3, #64	; 0x40
 8000710:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000714:	2302      	movs	r3, #2
 8000716:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800071a:	2302      	movs	r3, #2
 800071c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000720:	2305      	movs	r3, #5
 8000722:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 48;
 8000726:	2330      	movs	r3, #48	; 0x30
 8000728:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800072c:	2302      	movs	r3, #2
 800072e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000732:	2305      	movs	r3, #5
 8000734:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000738:	2302      	movs	r3, #2
 800073a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800073e:	2308      	movs	r3, #8
 8000740:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000744:	2300      	movs	r3, #0
 8000746:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000750:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000754:	4618      	mov	r0, r3
 8000756:	f005 f8c7 	bl	80058e8 <HAL_RCC_OscConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000760:	f000 fb4a 	bl	8000df8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000764:	233f      	movs	r3, #63	; 0x3f
 8000766:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800076a:	2300      	movs	r3, #0
 800076c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000794:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f005 fcb4 	bl	8006108 <HAL_RCC_ClockConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0x136>
  {
    Error_Handler();
 80007a6:	f000 fb27 	bl	8000df8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_FDCAN
 80007aa:	f107 0308 	add.w	r3, r7, #8
 80007ae:	4a16      	ldr	r2, [pc, #88]	; (8000808 <SystemClock_Config+0x194>)
 80007b0:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_SPI1
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80007b2:	f107 0308 	add.w	r3, r7, #8
 80007b6:	2200      	movs	r2, #0
 80007b8:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80007ba:	f107 0308 	add.w	r3, r7, #8
 80007be:	2200      	movs	r2, #0
 80007c0:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80007c2:	f107 0308 	add.w	r3, r7, #8
 80007c6:	2200      	movs	r2, #0
 80007c8:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80007ca:	f107 0308 	add.w	r3, r7, #8
 80007ce:	2200      	movs	r2, #0
 80007d0:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80007d2:	f107 0308 	add.w	r3, r7, #8
 80007d6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80007da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007de:	f107 0308 	add.w	r3, r7, #8
 80007e2:	4618      	mov	r0, r3
 80007e4:	f006 f814 	bl	8006810 <HAL_RCCEx_PeriphCLKConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0x17e>
  {
    Error_Handler();
 80007ee:	f000 fb03 	bl	8000df8 <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 80007f2:	f005 f869 	bl	80058c8 <HAL_PWREx_EnableUSBVoltageDetector>
}
 80007f6:	bf00      	nop
 80007f8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	58000400 	.word	0x58000400
 8000804:	58024800 	.word	0x58024800
 8000808:	00059002 	.word	0x00059002

0800080c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000810:	4b2e      	ldr	r3, [pc, #184]	; (80008cc <MX_FDCAN1_Init+0xc0>)
 8000812:	4a2f      	ldr	r2, [pc, #188]	; (80008d0 <MX_FDCAN1_Init+0xc4>)
 8000814:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000816:	4b2d      	ldr	r3, [pc, #180]	; (80008cc <MX_FDCAN1_Init+0xc0>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800081c:	4b2b      	ldr	r3, [pc, #172]	; (80008cc <MX_FDCAN1_Init+0xc0>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000822:	4b2a      	ldr	r3, [pc, #168]	; (80008cc <MX_FDCAN1_Init+0xc0>)
 8000824:	2200      	movs	r2, #0
 8000826:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000828:	4b28      	ldr	r3, [pc, #160]	; (80008cc <MX_FDCAN1_Init+0xc0>)
 800082a:	2200      	movs	r2, #0
 800082c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800082e:	4b27      	ldr	r3, [pc, #156]	; (80008cc <MX_FDCAN1_Init+0xc0>)
 8000830:	2200      	movs	r2, #0
 8000832:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000834:	4b25      	ldr	r3, [pc, #148]	; (80008cc <MX_FDCAN1_Init+0xc0>)
 8000836:	2201      	movs	r2, #1
 8000838:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800083a:	4b24      	ldr	r3, [pc, #144]	; (80008cc <MX_FDCAN1_Init+0xc0>)
 800083c:	2201      	movs	r2, #1
 800083e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000840:	4b22      	ldr	r3, [pc, #136]	; (80008cc <MX_FDCAN1_Init+0xc0>)
 8000842:	2202      	movs	r2, #2
 8000844:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000846:	4b21      	ldr	r3, [pc, #132]	; (80008cc <MX_FDCAN1_Init+0xc0>)
 8000848:	2202      	movs	r2, #2
 800084a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800084c:	4b1f      	ldr	r3, [pc, #124]	; (80008cc <MX_FDCAN1_Init+0xc0>)
 800084e:	2201      	movs	r2, #1
 8000850:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000852:	4b1e      	ldr	r3, [pc, #120]	; (80008cc <MX_FDCAN1_Init+0xc0>)
 8000854:	2201      	movs	r2, #1
 8000856:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000858:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <MX_FDCAN1_Init+0xc0>)
 800085a:	2201      	movs	r2, #1
 800085c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800085e:	4b1b      	ldr	r3, [pc, #108]	; (80008cc <MX_FDCAN1_Init+0xc0>)
 8000860:	2201      	movs	r2, #1
 8000862:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000864:	4b19      	ldr	r3, [pc, #100]	; (80008cc <MX_FDCAN1_Init+0xc0>)
 8000866:	2200      	movs	r2, #0
 8000868:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800086a:	4b18      	ldr	r3, [pc, #96]	; (80008cc <MX_FDCAN1_Init+0xc0>)
 800086c:	2200      	movs	r2, #0
 800086e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000870:	4b16      	ldr	r3, [pc, #88]	; (80008cc <MX_FDCAN1_Init+0xc0>)
 8000872:	2200      	movs	r2, #0
 8000874:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <MX_FDCAN1_Init+0xc0>)
 8000878:	2200      	movs	r2, #0
 800087a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800087c:	4b13      	ldr	r3, [pc, #76]	; (80008cc <MX_FDCAN1_Init+0xc0>)
 800087e:	2204      	movs	r2, #4
 8000880:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000882:	4b12      	ldr	r3, [pc, #72]	; (80008cc <MX_FDCAN1_Init+0xc0>)
 8000884:	2200      	movs	r2, #0
 8000886:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000888:	4b10      	ldr	r3, [pc, #64]	; (80008cc <MX_FDCAN1_Init+0xc0>)
 800088a:	2204      	movs	r2, #4
 800088c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800088e:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <MX_FDCAN1_Init+0xc0>)
 8000890:	2200      	movs	r2, #0
 8000892:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000894:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <MX_FDCAN1_Init+0xc0>)
 8000896:	2204      	movs	r2, #4
 8000898:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800089a:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <MX_FDCAN1_Init+0xc0>)
 800089c:	2200      	movs	r2, #0
 800089e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80008a0:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <MX_FDCAN1_Init+0xc0>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <MX_FDCAN1_Init+0xc0>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80008ac:	4b07      	ldr	r3, [pc, #28]	; (80008cc <MX_FDCAN1_Init+0xc0>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <MX_FDCAN1_Init+0xc0>)
 80008b4:	2204      	movs	r2, #4
 80008b6:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80008b8:	4804      	ldr	r0, [pc, #16]	; (80008cc <MX_FDCAN1_Init+0xc0>)
 80008ba:	f003 f88b 	bl	80039d4 <HAL_FDCAN_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80008c4:	f000 fa98 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	240003f0 	.word	0x240003f0
 80008d0:	4000a000 	.word	0x4000a000

080008d4 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80008d8:	4b2e      	ldr	r3, [pc, #184]	; (8000994 <MX_FDCAN2_Init+0xc0>)
 80008da:	4a2f      	ldr	r2, [pc, #188]	; (8000998 <MX_FDCAN2_Init+0xc4>)
 80008dc:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80008de:	4b2d      	ldr	r3, [pc, #180]	; (8000994 <MX_FDCAN2_Init+0xc0>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80008e4:	4b2b      	ldr	r3, [pc, #172]	; (8000994 <MX_FDCAN2_Init+0xc0>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80008ea:	4b2a      	ldr	r3, [pc, #168]	; (8000994 <MX_FDCAN2_Init+0xc0>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80008f0:	4b28      	ldr	r3, [pc, #160]	; (8000994 <MX_FDCAN2_Init+0xc0>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80008f6:	4b27      	ldr	r3, [pc, #156]	; (8000994 <MX_FDCAN2_Init+0xc0>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 80008fc:	4b25      	ldr	r3, [pc, #148]	; (8000994 <MX_FDCAN2_Init+0xc0>)
 80008fe:	2201      	movs	r2, #1
 8000900:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000902:	4b24      	ldr	r3, [pc, #144]	; (8000994 <MX_FDCAN2_Init+0xc0>)
 8000904:	2201      	movs	r2, #1
 8000906:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000908:	4b22      	ldr	r3, [pc, #136]	; (8000994 <MX_FDCAN2_Init+0xc0>)
 800090a:	2202      	movs	r2, #2
 800090c:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 800090e:	4b21      	ldr	r3, [pc, #132]	; (8000994 <MX_FDCAN2_Init+0xc0>)
 8000910:	2202      	movs	r2, #2
 8000912:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000914:	4b1f      	ldr	r3, [pc, #124]	; (8000994 <MX_FDCAN2_Init+0xc0>)
 8000916:	2201      	movs	r2, #1
 8000918:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800091a:	4b1e      	ldr	r3, [pc, #120]	; (8000994 <MX_FDCAN2_Init+0xc0>)
 800091c:	2201      	movs	r2, #1
 800091e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000920:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <MX_FDCAN2_Init+0xc0>)
 8000922:	2201      	movs	r2, #1
 8000924:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000926:	4b1b      	ldr	r3, [pc, #108]	; (8000994 <MX_FDCAN2_Init+0xc0>)
 8000928:	2201      	movs	r2, #1
 800092a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 800092c:	4b19      	ldr	r3, [pc, #100]	; (8000994 <MX_FDCAN2_Init+0xc0>)
 800092e:	2200      	movs	r2, #0
 8000930:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000932:	4b18      	ldr	r3, [pc, #96]	; (8000994 <MX_FDCAN2_Init+0xc0>)
 8000934:	2200      	movs	r2, #0
 8000936:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000938:	4b16      	ldr	r3, [pc, #88]	; (8000994 <MX_FDCAN2_Init+0xc0>)
 800093a:	2200      	movs	r2, #0
 800093c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 800093e:	4b15      	ldr	r3, [pc, #84]	; (8000994 <MX_FDCAN2_Init+0xc0>)
 8000940:	2200      	movs	r2, #0
 8000942:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000944:	4b13      	ldr	r3, [pc, #76]	; (8000994 <MX_FDCAN2_Init+0xc0>)
 8000946:	2204      	movs	r2, #4
 8000948:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 800094a:	4b12      	ldr	r3, [pc, #72]	; (8000994 <MX_FDCAN2_Init+0xc0>)
 800094c:	2200      	movs	r2, #0
 800094e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000950:	4b10      	ldr	r3, [pc, #64]	; (8000994 <MX_FDCAN2_Init+0xc0>)
 8000952:	2204      	movs	r2, #4
 8000954:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000956:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <MX_FDCAN2_Init+0xc0>)
 8000958:	2200      	movs	r2, #0
 800095a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800095c:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <MX_FDCAN2_Init+0xc0>)
 800095e:	2204      	movs	r2, #4
 8000960:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000962:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <MX_FDCAN2_Init+0xc0>)
 8000964:	2200      	movs	r2, #0
 8000966:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000968:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <MX_FDCAN2_Init+0xc0>)
 800096a:	2200      	movs	r2, #0
 800096c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <MX_FDCAN2_Init+0xc0>)
 8000970:	2200      	movs	r2, #0
 8000972:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000974:	4b07      	ldr	r3, [pc, #28]	; (8000994 <MX_FDCAN2_Init+0xc0>)
 8000976:	2200      	movs	r2, #0
 8000978:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800097a:	4b06      	ldr	r3, [pc, #24]	; (8000994 <MX_FDCAN2_Init+0xc0>)
 800097c:	2204      	movs	r2, #4
 800097e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000980:	4804      	ldr	r0, [pc, #16]	; (8000994 <MX_FDCAN2_Init+0xc0>)
 8000982:	f003 f827 	bl	80039d4 <HAL_FDCAN_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 800098c:	f000 fa34 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}
 8000994:	240005a4 	.word	0x240005a4
 8000998:	4000a400 	.word	0x4000a400

0800099c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80009a0:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <MX_SDMMC1_SD_Init+0x3c>)
 80009a2:	4a0e      	ldr	r2, [pc, #56]	; (80009dc <MX_SDMMC1_SD_Init+0x40>)
 80009a4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80009a6:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <MX_SDMMC1_SD_Init+0x3c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80009ac:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <MX_SDMMC1_SD_Init+0x3c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <MX_SDMMC1_SD_Init+0x3c>)
 80009b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009b8:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80009ba:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <MX_SDMMC1_SD_Init+0x3c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <MX_SDMMC1_SD_Init+0x3c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 80009c6:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <MX_SDMMC1_SD_Init+0x3c>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	24000328 	.word	0x24000328
 80009dc:	52007000 	.word	0x52007000

080009e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009e4:	4b27      	ldr	r3, [pc, #156]	; (8000a84 <MX_SPI1_Init+0xa4>)
 80009e6:	4a28      	ldr	r2, [pc, #160]	; (8000a88 <MX_SPI1_Init+0xa8>)
 80009e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009ea:	4b26      	ldr	r3, [pc, #152]	; (8000a84 <MX_SPI1_Init+0xa4>)
 80009ec:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80009f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009f2:	4b24      	ldr	r3, [pc, #144]	; (8000a84 <MX_SPI1_Init+0xa4>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009f8:	4b22      	ldr	r3, [pc, #136]	; (8000a84 <MX_SPI1_Init+0xa4>)
 80009fa:	2207      	movs	r2, #7
 80009fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009fe:	4b21      	ldr	r3, [pc, #132]	; (8000a84 <MX_SPI1_Init+0xa4>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a04:	4b1f      	ldr	r3, [pc, #124]	; (8000a84 <MX_SPI1_Init+0xa4>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a0a:	4b1e      	ldr	r3, [pc, #120]	; (8000a84 <MX_SPI1_Init+0xa4>)
 8000a0c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000a10:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a12:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <MX_SPI1_Init+0xa4>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a18:	4b1a      	ldr	r3, [pc, #104]	; (8000a84 <MX_SPI1_Init+0xa4>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a1e:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <MX_SPI1_Init+0xa4>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a24:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <MX_SPI1_Init+0xa4>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000a2a:	4b16      	ldr	r3, [pc, #88]	; (8000a84 <MX_SPI1_Init+0xa4>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a30:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <MX_SPI1_Init+0xa4>)
 8000a32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a36:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <MX_SPI1_Init+0xa4>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a3e:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <MX_SPI1_Init+0xa4>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <MX_SPI1_Init+0xa4>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <MX_SPI1_Init+0xa4>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <MX_SPI1_Init+0xa4>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <MX_SPI1_Init+0xa4>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a5c:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <MX_SPI1_Init+0xa4>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <MX_SPI1_Init+0xa4>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <MX_SPI1_Init+0xa4>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a6e:	4805      	ldr	r0, [pc, #20]	; (8000a84 <MX_SPI1_Init+0xa4>)
 8000a70:	f009 f94e 	bl	8009d10 <HAL_SPI_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000a7a:	f000 f9bd 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	2400051c 	.word	0x2400051c
 8000a88:	40013000 	.word	0x40013000

08000a8c <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000a90:	4b22      	ldr	r3, [pc, #136]	; (8000b1c <MX_UART8_Init+0x90>)
 8000a92:	4a23      	ldr	r2, [pc, #140]	; (8000b20 <MX_UART8_Init+0x94>)
 8000a94:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000a96:	4b21      	ldr	r3, [pc, #132]	; (8000b1c <MX_UART8_Init+0x90>)
 8000a98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a9c:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9e:	4b1f      	ldr	r3, [pc, #124]	; (8000b1c <MX_UART8_Init+0x90>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000aa4:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <MX_UART8_Init+0x90>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <MX_UART8_Init+0x90>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000ab0:	4b1a      	ldr	r3, [pc, #104]	; (8000b1c <MX_UART8_Init+0x90>)
 8000ab2:	220c      	movs	r2, #12
 8000ab4:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab6:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <MX_UART8_Init+0x90>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000abc:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <MX_UART8_Init+0x90>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ac2:	4b16      	ldr	r3, [pc, #88]	; (8000b1c <MX_UART8_Init+0x90>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ac8:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <MX_UART8_Init+0x90>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ace:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <MX_UART8_Init+0x90>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000ad4:	4811      	ldr	r0, [pc, #68]	; (8000b1c <MX_UART8_Init+0x90>)
 8000ad6:	f009 fa2e 	bl	8009f36 <HAL_UART_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8000ae0:	f000 f98a 	bl	8000df8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	480d      	ldr	r0, [pc, #52]	; (8000b1c <MX_UART8_Init+0x90>)
 8000ae8:	f00a fb28 	bl	800b13c <HAL_UARTEx_SetTxFifoThreshold>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8000af2:	f000 f981 	bl	8000df8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000af6:	2100      	movs	r1, #0
 8000af8:	4808      	ldr	r0, [pc, #32]	; (8000b1c <MX_UART8_Init+0x90>)
 8000afa:	f00a fb5d 	bl	800b1b8 <HAL_UARTEx_SetRxFifoThreshold>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8000b04:	f000 f978 	bl	8000df8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000b08:	4804      	ldr	r0, [pc, #16]	; (8000b1c <MX_UART8_Init+0x90>)
 8000b0a:	f00a fade 	bl	800b0ca <HAL_UARTEx_DisableFifoMode>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8000b14:	f000 f970 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	24000490 	.word	0x24000490
 8000b20:	40007c00 	.word	0x40007c00

08000b24 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b28:	4b22      	ldr	r3, [pc, #136]	; (8000bb4 <MX_USART3_UART_Init+0x90>)
 8000b2a:	4a23      	ldr	r2, [pc, #140]	; (8000bb8 <MX_USART3_UART_Init+0x94>)
 8000b2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000b2e:	4b21      	ldr	r3, [pc, #132]	; (8000bb4 <MX_USART3_UART_Init+0x90>)
 8000b30:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000b34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b36:	4b1f      	ldr	r3, [pc, #124]	; (8000bb4 <MX_USART3_UART_Init+0x90>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b3c:	4b1d      	ldr	r3, [pc, #116]	; (8000bb4 <MX_USART3_UART_Init+0x90>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b42:	4b1c      	ldr	r3, [pc, #112]	; (8000bb4 <MX_USART3_UART_Init+0x90>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b48:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <MX_USART3_UART_Init+0x90>)
 8000b4a:	220c      	movs	r2, #12
 8000b4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4e:	4b19      	ldr	r3, [pc, #100]	; (8000bb4 <MX_USART3_UART_Init+0x90>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b54:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <MX_USART3_UART_Init+0x90>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b5a:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <MX_USART3_UART_Init+0x90>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b60:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <MX_USART3_UART_Init+0x90>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b66:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <MX_USART3_UART_Init+0x90>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b6c:	4811      	ldr	r0, [pc, #68]	; (8000bb4 <MX_USART3_UART_Init+0x90>)
 8000b6e:	f009 f9e2 	bl	8009f36 <HAL_UART_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b78:	f000 f93e 	bl	8000df8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	480d      	ldr	r0, [pc, #52]	; (8000bb4 <MX_USART3_UART_Init+0x90>)
 8000b80:	f00a fadc 	bl	800b13c <HAL_UARTEx_SetTxFifoThreshold>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b8a:	f000 f935 	bl	8000df8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b8e:	2100      	movs	r1, #0
 8000b90:	4808      	ldr	r0, [pc, #32]	; (8000bb4 <MX_USART3_UART_Init+0x90>)
 8000b92:	f00a fb11 	bl	800b1b8 <HAL_UARTEx_SetRxFifoThreshold>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b9c:	f000 f92c 	bl	8000df8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ba0:	4804      	ldr	r0, [pc, #16]	; (8000bb4 <MX_USART3_UART_Init+0x90>)
 8000ba2:	f00a fa92 	bl	800b0ca <HAL_UARTEx_DisableFifoMode>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000bac:	f000 f924 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	2400029c 	.word	0x2400029c
 8000bb8:	40004800 	.word	0x40004800

08000bbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <MX_DMA_Init+0x3c>)
 8000bc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bc8:	4a0b      	ldr	r2, [pc, #44]	; (8000bf8 <MX_DMA_Init+0x3c>)
 8000bca:	f043 0301 	orr.w	r3, r3, #1
 8000bce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <MX_DMA_Init+0x3c>)
 8000bd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bd8:	f003 0301 	and.w	r3, r3, #1
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2100      	movs	r1, #0
 8000be4:	200b      	movs	r0, #11
 8000be6:	f000 fde8 	bl	80017ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000bea:	200b      	movs	r0, #11
 8000bec:	f000 fdff 	bl	80017ee <HAL_NVIC_EnableIRQ>

}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	58024400 	.word	0x58024400

08000bfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08c      	sub	sp, #48	; 0x30
 8000c00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c02:	f107 031c 	add.w	r3, r7, #28
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]
 8000c10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c12:	4b69      	ldr	r3, [pc, #420]	; (8000db8 <MX_GPIO_Init+0x1bc>)
 8000c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c18:	4a67      	ldr	r2, [pc, #412]	; (8000db8 <MX_GPIO_Init+0x1bc>)
 8000c1a:	f043 0310 	orr.w	r3, r3, #16
 8000c1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c22:	4b65      	ldr	r3, [pc, #404]	; (8000db8 <MX_GPIO_Init+0x1bc>)
 8000c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c28:	f003 0310 	and.w	r3, r3, #16
 8000c2c:	61bb      	str	r3, [r7, #24]
 8000c2e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c30:	4b61      	ldr	r3, [pc, #388]	; (8000db8 <MX_GPIO_Init+0x1bc>)
 8000c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c36:	4a60      	ldr	r2, [pc, #384]	; (8000db8 <MX_GPIO_Init+0x1bc>)
 8000c38:	f043 0304 	orr.w	r3, r3, #4
 8000c3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c40:	4b5d      	ldr	r3, [pc, #372]	; (8000db8 <MX_GPIO_Init+0x1bc>)
 8000c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c46:	f003 0304 	and.w	r3, r3, #4
 8000c4a:	617b      	str	r3, [r7, #20]
 8000c4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c4e:	4b5a      	ldr	r3, [pc, #360]	; (8000db8 <MX_GPIO_Init+0x1bc>)
 8000c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c54:	4a58      	ldr	r2, [pc, #352]	; (8000db8 <MX_GPIO_Init+0x1bc>)
 8000c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c5e:	4b56      	ldr	r3, [pc, #344]	; (8000db8 <MX_GPIO_Init+0x1bc>)
 8000c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6c:	4b52      	ldr	r3, [pc, #328]	; (8000db8 <MX_GPIO_Init+0x1bc>)
 8000c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c72:	4a51      	ldr	r2, [pc, #324]	; (8000db8 <MX_GPIO_Init+0x1bc>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c7c:	4b4e      	ldr	r3, [pc, #312]	; (8000db8 <MX_GPIO_Init+0x1bc>)
 8000c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8a:	4b4b      	ldr	r3, [pc, #300]	; (8000db8 <MX_GPIO_Init+0x1bc>)
 8000c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c90:	4a49      	ldr	r2, [pc, #292]	; (8000db8 <MX_GPIO_Init+0x1bc>)
 8000c92:	f043 0302 	orr.w	r3, r3, #2
 8000c96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c9a:	4b47      	ldr	r3, [pc, #284]	; (8000db8 <MX_GPIO_Init+0x1bc>)
 8000c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca0:	f003 0302 	and.w	r3, r3, #2
 8000ca4:	60bb      	str	r3, [r7, #8]
 8000ca6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca8:	4b43      	ldr	r3, [pc, #268]	; (8000db8 <MX_GPIO_Init+0x1bc>)
 8000caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cae:	4a42      	ldr	r2, [pc, #264]	; (8000db8 <MX_GPIO_Init+0x1bc>)
 8000cb0:	f043 0308 	orr.w	r3, r3, #8
 8000cb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb8:	4b3f      	ldr	r3, [pc, #252]	; (8000db8 <MX_GPIO_Init+0x1bc>)
 8000cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbe:	f003 0308 	and.w	r3, r3, #8
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_485_TX_EN_Pin|RS_485_RX_EN_Pin, GPIO_PIN_RESET);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	210c      	movs	r1, #12
 8000cca:	483c      	ldr	r0, [pc, #240]	; (8000dbc <MX_GPIO_Init+0x1c0>)
 8000ccc:	f003 fbb2 	bl	8004434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TELE_CE_Pin|TELE_CS_Pin, GPIO_PIN_RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2103      	movs	r1, #3
 8000cd4:	483a      	ldr	r0, [pc, #232]	; (8000dc0 <MX_GPIO_Init+0x1c4>)
 8000cd6:	f003 fbad 	bl	8004434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2101      	movs	r1, #1
 8000cde:	4839      	ldr	r0, [pc, #228]	; (8000dc4 <MX_GPIO_Init+0x1c8>)
 8000ce0:	f003 fba8 	bl	8004434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPS_RST_Pin|GPS_INT_Pin, GPIO_PIN_RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000cea:	4837      	ldr	r0, [pc, #220]	; (8000dc8 <MX_GPIO_Init+0x1cc>)
 8000cec:	f003 fba2 	bl	8004434 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS_485_TX_EN_Pin RS_485_RX_EN_Pin */
  GPIO_InitStruct.Pin = RS_485_TX_EN_Pin|RS_485_RX_EN_Pin;
 8000cf0:	230c      	movs	r3, #12
 8000cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d00:	f107 031c 	add.w	r3, r7, #28
 8000d04:	4619      	mov	r1, r3
 8000d06:	482d      	ldr	r0, [pc, #180]	; (8000dbc <MX_GPIO_Init+0x1c0>)
 8000d08:	f003 f9cc 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TELE_CE_Pin TELE_CS_Pin */
  GPIO_InitStruct.Pin = TELE_CE_Pin|TELE_CS_Pin;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d10:	2301      	movs	r3, #1
 8000d12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1c:	f107 031c 	add.w	r3, r7, #28
 8000d20:	4619      	mov	r1, r3
 8000d22:	4827      	ldr	r0, [pc, #156]	; (8000dc0 <MX_GPIO_Init+0x1c4>)
 8000d24:	f003 f9be 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TELE_IRQ_Pin */
  GPIO_InitStruct.Pin = TELE_IRQ_Pin;
 8000d28:	2304      	movs	r3, #4
 8000d2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d2c:	4b27      	ldr	r3, [pc, #156]	; (8000dcc <MX_GPIO_Init+0x1d0>)
 8000d2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TELE_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000d34:	f107 031c 	add.w	r3, r7, #28
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4821      	ldr	r0, [pc, #132]	; (8000dc0 <MX_GPIO_Init+0x1c4>)
 8000d3c:	f003 f9b2 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000d40:	2301      	movs	r3, #1
 8000d42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d44:	2301      	movs	r3, #1
 8000d46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d50:	f107 031c 	add.w	r3, r7, #28
 8000d54:	4619      	mov	r1, r3
 8000d56:	481b      	ldr	r0, [pc, #108]	; (8000dc4 <MX_GPIO_Init+0x1c8>)
 8000d58:	f003 f9a4 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_INT_Pin */
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 8000d5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d62:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <MX_GPIO_Init+0x1d0>)
 8000d64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 8000d6a:	f107 031c 	add.w	r3, r7, #28
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4812      	ldr	r0, [pc, #72]	; (8000dbc <MX_GPIO_Init+0x1c0>)
 8000d72:	f003 f997 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPS_RST_Pin GPS_INT_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin|GPS_INT_Pin;
 8000d76:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d84:	2300      	movs	r3, #0
 8000d86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d88:	f107 031c 	add.w	r3, r7, #28
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	480e      	ldr	r0, [pc, #56]	; (8000dc8 <MX_GPIO_Init+0x1cc>)
 8000d90:	f003 f988 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DET_Pin */
  GPIO_InitStruct.Pin = CARD_DET_Pin;
 8000d94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DET_GPIO_Port, &GPIO_InitStruct);
 8000da2:	f107 031c 	add.w	r3, r7, #28
 8000da6:	4619      	mov	r1, r3
 8000da8:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <MX_GPIO_Init+0x1c4>)
 8000daa:	f003 f97b 	bl	80040a4 <HAL_GPIO_Init>

}
 8000dae:	bf00      	nop
 8000db0:	3730      	adds	r7, #48	; 0x30
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	58024400 	.word	0x58024400
 8000dbc:	58021000 	.word	0x58021000
 8000dc0:	58020000 	.word	0x58020000
 8000dc4:	58020400 	.word	0x58020400
 8000dc8:	58020c00 	.word	0x58020c00
 8000dcc:	11110000 	.word	0x11110000

08000dd0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000dd8:	2101      	movs	r1, #1
 8000dda:	4805      	ldr	r0, [pc, #20]	; (8000df0 <HAL_UART_RxCpltCallback+0x20>)
 8000ddc:	f003 fb43 	bl	8004466 <HAL_GPIO_TogglePin>
  CDC_Transmit_FS(rxBuf, sizeof(rxBuf));
 8000de0:	2146      	movs	r1, #70	; 0x46
 8000de2:	4804      	ldr	r0, [pc, #16]	; (8000df4 <HAL_UART_RxCpltCallback+0x24>)
 8000de4:	f00e fa5c 	bl	800f2a0 <CDC_Transmit_FS>
  /*
  for(int i=0; i<BUFFLENGTH; i++){
	  printf("%c", rxBuf[i]);
  }
	*/
}
 8000de8:	bf00      	nop
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	58020400 	.word	0x58020400
 8000df4:	240003a8 	.word	0x240003a8

08000df8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dfc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dfe:	e7fe      	b.n	8000dfe <Error_Handler+0x6>

08000e00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e06:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <HAL_MspInit+0x30>)
 8000e08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e0c:	4a08      	ldr	r2, [pc, #32]	; (8000e30 <HAL_MspInit+0x30>)
 8000e0e:	f043 0302 	orr.w	r3, r3, #2
 8000e12:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e16:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_MspInit+0x30>)
 8000e18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e1c:	f003 0302 	and.w	r3, r3, #2
 8000e20:	607b      	str	r3, [r7, #4]
 8000e22:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	58024400 	.word	0x58024400

08000e34 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08c      	sub	sp, #48	; 0x30
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 031c 	add.w	r3, r7, #28
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a3d      	ldr	r2, [pc, #244]	; (8000f48 <HAL_FDCAN_MspInit+0x114>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d138      	bne.n	8000ec8 <HAL_FDCAN_MspInit+0x94>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000e56:	4b3d      	ldr	r3, [pc, #244]	; (8000f4c <HAL_FDCAN_MspInit+0x118>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	4a3b      	ldr	r2, [pc, #236]	; (8000f4c <HAL_FDCAN_MspInit+0x118>)
 8000e5e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000e60:	4b3a      	ldr	r3, [pc, #232]	; (8000f4c <HAL_FDCAN_MspInit+0x118>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d10e      	bne.n	8000e86 <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000e68:	4b39      	ldr	r3, [pc, #228]	; (8000f50 <HAL_FDCAN_MspInit+0x11c>)
 8000e6a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000e6e:	4a38      	ldr	r2, [pc, #224]	; (8000f50 <HAL_FDCAN_MspInit+0x11c>)
 8000e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e74:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000e78:	4b35      	ldr	r3, [pc, #212]	; (8000f50 <HAL_FDCAN_MspInit+0x11c>)
 8000e7a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e82:	61bb      	str	r3, [r7, #24]
 8000e84:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e86:	4b32      	ldr	r3, [pc, #200]	; (8000f50 <HAL_FDCAN_MspInit+0x11c>)
 8000e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e8c:	4a30      	ldr	r2, [pc, #192]	; (8000f50 <HAL_FDCAN_MspInit+0x11c>)
 8000e8e:	f043 0302 	orr.w	r3, r3, #2
 8000e92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e96:	4b2e      	ldr	r3, [pc, #184]	; (8000f50 <HAL_FDCAN_MspInit+0x11c>)
 8000e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9c:	f003 0302 	and.w	r3, r3, #2
 8000ea0:	617b      	str	r3, [r7, #20]
 8000ea2:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ea4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000eb6:	2309      	movs	r3, #9
 8000eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eba:	f107 031c 	add.w	r3, r7, #28
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4824      	ldr	r0, [pc, #144]	; (8000f54 <HAL_FDCAN_MspInit+0x120>)
 8000ec2:	f003 f8ef 	bl	80040a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8000ec6:	e03b      	b.n	8000f40 <HAL_FDCAN_MspInit+0x10c>
  else if(hfdcan->Instance==FDCAN2)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a22      	ldr	r2, [pc, #136]	; (8000f58 <HAL_FDCAN_MspInit+0x124>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d136      	bne.n	8000f40 <HAL_FDCAN_MspInit+0x10c>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000ed2:	4b1e      	ldr	r3, [pc, #120]	; (8000f4c <HAL_FDCAN_MspInit+0x118>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	4a1c      	ldr	r2, [pc, #112]	; (8000f4c <HAL_FDCAN_MspInit+0x118>)
 8000eda:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000edc:	4b1b      	ldr	r3, [pc, #108]	; (8000f4c <HAL_FDCAN_MspInit+0x118>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d10e      	bne.n	8000f02 <HAL_FDCAN_MspInit+0xce>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000ee4:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <HAL_FDCAN_MspInit+0x11c>)
 8000ee6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000eea:	4a19      	ldr	r2, [pc, #100]	; (8000f50 <HAL_FDCAN_MspInit+0x11c>)
 8000eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ef0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000ef4:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <HAL_FDCAN_MspInit+0x11c>)
 8000ef6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f02:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <HAL_FDCAN_MspInit+0x11c>)
 8000f04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f08:	4a11      	ldr	r2, [pc, #68]	; (8000f50 <HAL_FDCAN_MspInit+0x11c>)
 8000f0a:	f043 0302 	orr.w	r3, r3, #2
 8000f0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f12:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <HAL_FDCAN_MspInit+0x11c>)
 8000f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f18:	f003 0302 	and.w	r3, r3, #2
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000f20:	2360      	movs	r3, #96	; 0x60
 8000f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f24:	2302      	movs	r3, #2
 8000f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000f30:	2309      	movs	r3, #9
 8000f32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f34:	f107 031c 	add.w	r3, r7, #28
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4806      	ldr	r0, [pc, #24]	; (8000f54 <HAL_FDCAN_MspInit+0x120>)
 8000f3c:	f003 f8b2 	bl	80040a4 <HAL_GPIO_Init>
}
 8000f40:	bf00      	nop
 8000f42:	3730      	adds	r7, #48	; 0x30
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	4000a000 	.word	0x4000a000
 8000f4c:	24000204 	.word	0x24000204
 8000f50:	58024400 	.word	0x58024400
 8000f54:	58020400 	.word	0x58020400
 8000f58:	4000a400 	.word	0x4000a400

08000f5c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08a      	sub	sp, #40	; 0x28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a2a      	ldr	r2, [pc, #168]	; (8001024 <HAL_SD_MspInit+0xc8>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d14d      	bne.n	800101a <HAL_SD_MspInit+0xbe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000f7e:	4b2a      	ldr	r3, [pc, #168]	; (8001028 <HAL_SD_MspInit+0xcc>)
 8000f80:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f84:	4a28      	ldr	r2, [pc, #160]	; (8001028 <HAL_SD_MspInit+0xcc>)
 8000f86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f8a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000f8e:	4b26      	ldr	r3, [pc, #152]	; (8001028 <HAL_SD_MspInit+0xcc>)
 8000f90:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9c:	4b22      	ldr	r3, [pc, #136]	; (8001028 <HAL_SD_MspInit+0xcc>)
 8000f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa2:	4a21      	ldr	r2, [pc, #132]	; (8001028 <HAL_SD_MspInit+0xcc>)
 8000fa4:	f043 0304 	orr.w	r3, r3, #4
 8000fa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fac:	4b1e      	ldr	r3, [pc, #120]	; (8001028 <HAL_SD_MspInit+0xcc>)
 8000fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb2:	f003 0304 	and.w	r3, r3, #4
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fba:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <HAL_SD_MspInit+0xcc>)
 8000fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc0:	4a19      	ldr	r2, [pc, #100]	; (8001028 <HAL_SD_MspInit+0xcc>)
 8000fc2:	f043 0308 	orr.w	r3, r3, #8
 8000fc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fca:	4b17      	ldr	r3, [pc, #92]	; (8001028 <HAL_SD_MspInit+0xcc>)
 8000fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd0:	f003 0308 	and.w	r3, r3, #8
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000fd8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000fdc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000fea:	230c      	movs	r3, #12
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	480d      	ldr	r0, [pc, #52]	; (800102c <HAL_SD_MspInit+0xd0>)
 8000ff6:	f003 f855 	bl	80040a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ffa:	2304      	movs	r3, #4
 8000ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001006:	2303      	movs	r3, #3
 8001008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800100a:	230c      	movs	r3, #12
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4619      	mov	r1, r3
 8001014:	4806      	ldr	r0, [pc, #24]	; (8001030 <HAL_SD_MspInit+0xd4>)
 8001016:	f003 f845 	bl	80040a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800101a:	bf00      	nop
 800101c:	3728      	adds	r7, #40	; 0x28
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	52007000 	.word	0x52007000
 8001028:	58024400 	.word	0x58024400
 800102c:	58020800 	.word	0x58020800
 8001030:	58020c00 	.word	0x58020c00

08001034 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08a      	sub	sp, #40	; 0x28
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a1a      	ldr	r2, [pc, #104]	; (80010bc <HAL_SPI_MspInit+0x88>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d12d      	bne.n	80010b2 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001056:	4b1a      	ldr	r3, [pc, #104]	; (80010c0 <HAL_SPI_MspInit+0x8c>)
 8001058:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800105c:	4a18      	ldr	r2, [pc, #96]	; (80010c0 <HAL_SPI_MspInit+0x8c>)
 800105e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001062:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001066:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <HAL_SPI_MspInit+0x8c>)
 8001068:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800106c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001070:	613b      	str	r3, [r7, #16]
 8001072:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <HAL_SPI_MspInit+0x8c>)
 8001076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800107a:	4a11      	ldr	r2, [pc, #68]	; (80010c0 <HAL_SPI_MspInit+0x8c>)
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001084:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <HAL_SPI_MspInit+0x8c>)
 8001086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001092:	23e0      	movs	r3, #224	; 0xe0
 8001094:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109e:	2300      	movs	r3, #0
 80010a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010a2:	2305      	movs	r3, #5
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4619      	mov	r1, r3
 80010ac:	4805      	ldr	r0, [pc, #20]	; (80010c4 <HAL_SPI_MspInit+0x90>)
 80010ae:	f002 fff9 	bl	80040a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010b2:	bf00      	nop
 80010b4:	3728      	adds	r7, #40	; 0x28
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40013000 	.word	0x40013000
 80010c0:	58024400 	.word	0x58024400
 80010c4:	58020000 	.word	0x58020000

080010c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08c      	sub	sp, #48	; 0x30
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 031c 	add.w	r3, r7, #28
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a4b      	ldr	r2, [pc, #300]	; (8001214 <HAL_UART_MspInit+0x14c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d12e      	bne.n	8001148 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 80010ea:	4b4b      	ldr	r3, [pc, #300]	; (8001218 <HAL_UART_MspInit+0x150>)
 80010ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010f0:	4a49      	ldr	r2, [pc, #292]	; (8001218 <HAL_UART_MspInit+0x150>)
 80010f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010f6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010fa:	4b47      	ldr	r3, [pc, #284]	; (8001218 <HAL_UART_MspInit+0x150>)
 80010fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001100:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001104:	61bb      	str	r3, [r7, #24]
 8001106:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001108:	4b43      	ldr	r3, [pc, #268]	; (8001218 <HAL_UART_MspInit+0x150>)
 800110a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800110e:	4a42      	ldr	r2, [pc, #264]	; (8001218 <HAL_UART_MspInit+0x150>)
 8001110:	f043 0310 	orr.w	r3, r3, #16
 8001114:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001118:	4b3f      	ldr	r3, [pc, #252]	; (8001218 <HAL_UART_MspInit+0x150>)
 800111a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800111e:	f003 0310 	and.w	r3, r3, #16
 8001122:	617b      	str	r3, [r7, #20]
 8001124:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001126:	2303      	movs	r3, #3
 8001128:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112a:	2302      	movs	r3, #2
 800112c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001132:	2300      	movs	r3, #0
 8001134:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001136:	2308      	movs	r3, #8
 8001138:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800113a:	f107 031c 	add.w	r3, r7, #28
 800113e:	4619      	mov	r1, r3
 8001140:	4836      	ldr	r0, [pc, #216]	; (800121c <HAL_UART_MspInit+0x154>)
 8001142:	f002 ffaf 	bl	80040a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001146:	e061      	b.n	800120c <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a34      	ldr	r2, [pc, #208]	; (8001220 <HAL_UART_MspInit+0x158>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d15c      	bne.n	800120c <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001152:	4b31      	ldr	r3, [pc, #196]	; (8001218 <HAL_UART_MspInit+0x150>)
 8001154:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001158:	4a2f      	ldr	r2, [pc, #188]	; (8001218 <HAL_UART_MspInit+0x150>)
 800115a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800115e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001162:	4b2d      	ldr	r3, [pc, #180]	; (8001218 <HAL_UART_MspInit+0x150>)
 8001164:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001168:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001170:	4b29      	ldr	r3, [pc, #164]	; (8001218 <HAL_UART_MspInit+0x150>)
 8001172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001176:	4a28      	ldr	r2, [pc, #160]	; (8001218 <HAL_UART_MspInit+0x150>)
 8001178:	f043 0308 	orr.w	r3, r3, #8
 800117c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001180:	4b25      	ldr	r3, [pc, #148]	; (8001218 <HAL_UART_MspInit+0x150>)
 8001182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001186:	f003 0308 	and.w	r3, r3, #8
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800118e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001194:	2302      	movs	r3, #2
 8001196:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2300      	movs	r3, #0
 800119e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011a0:	2307      	movs	r3, #7
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011a4:	f107 031c 	add.w	r3, r7, #28
 80011a8:	4619      	mov	r1, r3
 80011aa:	481e      	ldr	r0, [pc, #120]	; (8001224 <HAL_UART_MspInit+0x15c>)
 80011ac:	f002 ff7a 	bl	80040a4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 80011b0:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <HAL_UART_MspInit+0x160>)
 80011b2:	4a1e      	ldr	r2, [pc, #120]	; (800122c <HAL_UART_MspInit+0x164>)
 80011b4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80011b6:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <HAL_UART_MspInit+0x160>)
 80011b8:	222d      	movs	r2, #45	; 0x2d
 80011ba:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011bc:	4b1a      	ldr	r3, [pc, #104]	; (8001228 <HAL_UART_MspInit+0x160>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011c2:	4b19      	ldr	r3, [pc, #100]	; (8001228 <HAL_UART_MspInit+0x160>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011c8:	4b17      	ldr	r3, [pc, #92]	; (8001228 <HAL_UART_MspInit+0x160>)
 80011ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011ce:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011d0:	4b15      	ldr	r3, [pc, #84]	; (8001228 <HAL_UART_MspInit+0x160>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011d6:	4b14      	ldr	r3, [pc, #80]	; (8001228 <HAL_UART_MspInit+0x160>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <HAL_UART_MspInit+0x160>)
 80011de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011e2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011e4:	4b10      	ldr	r3, [pc, #64]	; (8001228 <HAL_UART_MspInit+0x160>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011ea:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <HAL_UART_MspInit+0x160>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80011f0:	480d      	ldr	r0, [pc, #52]	; (8001228 <HAL_UART_MspInit+0x160>)
 80011f2:	f000 fb17 	bl	8001824 <HAL_DMA_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <HAL_UART_MspInit+0x138>
      Error_Handler();
 80011fc:	f7ff fdfc 	bl	8000df8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a09      	ldr	r2, [pc, #36]	; (8001228 <HAL_UART_MspInit+0x160>)
 8001204:	679a      	str	r2, [r3, #120]	; 0x78
 8001206:	4a08      	ldr	r2, [pc, #32]	; (8001228 <HAL_UART_MspInit+0x160>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800120c:	bf00      	nop
 800120e:	3730      	adds	r7, #48	; 0x30
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40007c00 	.word	0x40007c00
 8001218:	58024400 	.word	0x58024400
 800121c:	58021000 	.word	0x58021000
 8001220:	40004800 	.word	0x40004800
 8001224:	58020c00 	.word	0x58020c00
 8001228:	24000224 	.word	0x24000224
 800122c:	40020010 	.word	0x40020010

08001230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001234:	e7fe      	b.n	8001234 <NMI_Handler+0x4>

08001236 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800123a:	e7fe      	b.n	800123a <HardFault_Handler+0x4>

0800123c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <MemManage_Handler+0x4>

08001242 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001246:	e7fe      	b.n	8001246 <BusFault_Handler+0x4>

08001248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800124c:	e7fe      	b.n	800124c <UsageFault_Handler+0x4>

0800124e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800127c:	f000 f974 	bl	8001568 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}

08001284 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001288:	4802      	ldr	r0, [pc, #8]	; (8001294 <DMA1_Stream0_IRQHandler+0x10>)
 800128a:	f001 f891 	bl	80023b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	24000224 	.word	0x24000224

08001298 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800129c:	4802      	ldr	r0, [pc, #8]	; (80012a8 <OTG_FS_IRQHandler+0x10>)
 800129e:	f003 fa54 	bl	800474a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	24001f80 	.word	0x24001f80

080012ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012b4:	4a14      	ldr	r2, [pc, #80]	; (8001308 <_sbrk+0x5c>)
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <_sbrk+0x60>)
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012c0:	4b13      	ldr	r3, [pc, #76]	; (8001310 <_sbrk+0x64>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d102      	bne.n	80012ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012c8:	4b11      	ldr	r3, [pc, #68]	; (8001310 <_sbrk+0x64>)
 80012ca:	4a12      	ldr	r2, [pc, #72]	; (8001314 <_sbrk+0x68>)
 80012cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <_sbrk+0x64>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4413      	add	r3, r2
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d207      	bcs.n	80012ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012dc:	f00e fc24 	bl	800fb28 <__errno>
 80012e0:	4602      	mov	r2, r0
 80012e2:	230c      	movs	r3, #12
 80012e4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ea:	e009      	b.n	8001300 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <_sbrk+0x64>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012f2:	4b07      	ldr	r3, [pc, #28]	; (8001310 <_sbrk+0x64>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	4a05      	ldr	r2, [pc, #20]	; (8001310 <_sbrk+0x64>)
 80012fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012fe:	68fb      	ldr	r3, [r7, #12]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	24080000 	.word	0x24080000
 800130c:	00000400 	.word	0x00000400
 8001310:	24000208 	.word	0x24000208
 8001314:	24002390 	.word	0x24002390

08001318 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800131c:	4b39      	ldr	r3, [pc, #228]	; (8001404 <SystemInit+0xec>)
 800131e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001322:	4a38      	ldr	r2, [pc, #224]	; (8001404 <SystemInit+0xec>)
 8001324:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001328:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800132c:	4b36      	ldr	r3, [pc, #216]	; (8001408 <SystemInit+0xf0>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 030f 	and.w	r3, r3, #15
 8001334:	2b06      	cmp	r3, #6
 8001336:	d807      	bhi.n	8001348 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001338:	4b33      	ldr	r3, [pc, #204]	; (8001408 <SystemInit+0xf0>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f023 030f 	bic.w	r3, r3, #15
 8001340:	4a31      	ldr	r2, [pc, #196]	; (8001408 <SystemInit+0xf0>)
 8001342:	f043 0307 	orr.w	r3, r3, #7
 8001346:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001348:	4b30      	ldr	r3, [pc, #192]	; (800140c <SystemInit+0xf4>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a2f      	ldr	r2, [pc, #188]	; (800140c <SystemInit+0xf4>)
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001354:	4b2d      	ldr	r3, [pc, #180]	; (800140c <SystemInit+0xf4>)
 8001356:	2200      	movs	r2, #0
 8001358:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800135a:	4b2c      	ldr	r3, [pc, #176]	; (800140c <SystemInit+0xf4>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	492b      	ldr	r1, [pc, #172]	; (800140c <SystemInit+0xf4>)
 8001360:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <SystemInit+0xf8>)
 8001362:	4013      	ands	r3, r2
 8001364:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001366:	4b28      	ldr	r3, [pc, #160]	; (8001408 <SystemInit+0xf0>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 030f 	and.w	r3, r3, #15
 800136e:	2b07      	cmp	r3, #7
 8001370:	d907      	bls.n	8001382 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001372:	4b25      	ldr	r3, [pc, #148]	; (8001408 <SystemInit+0xf0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f023 030f 	bic.w	r3, r3, #15
 800137a:	4a23      	ldr	r2, [pc, #140]	; (8001408 <SystemInit+0xf0>)
 800137c:	f043 0307 	orr.w	r3, r3, #7
 8001380:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001382:	4b22      	ldr	r3, [pc, #136]	; (800140c <SystemInit+0xf4>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001388:	4b20      	ldr	r3, [pc, #128]	; (800140c <SystemInit+0xf4>)
 800138a:	2200      	movs	r2, #0
 800138c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800138e:	4b1f      	ldr	r3, [pc, #124]	; (800140c <SystemInit+0xf4>)
 8001390:	2200      	movs	r2, #0
 8001392:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001394:	4b1d      	ldr	r3, [pc, #116]	; (800140c <SystemInit+0xf4>)
 8001396:	4a1f      	ldr	r2, [pc, #124]	; (8001414 <SystemInit+0xfc>)
 8001398:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800139a:	4b1c      	ldr	r3, [pc, #112]	; (800140c <SystemInit+0xf4>)
 800139c:	4a1e      	ldr	r2, [pc, #120]	; (8001418 <SystemInit+0x100>)
 800139e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80013a0:	4b1a      	ldr	r3, [pc, #104]	; (800140c <SystemInit+0xf4>)
 80013a2:	4a1e      	ldr	r2, [pc, #120]	; (800141c <SystemInit+0x104>)
 80013a4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80013a6:	4b19      	ldr	r3, [pc, #100]	; (800140c <SystemInit+0xf4>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80013ac:	4b17      	ldr	r3, [pc, #92]	; (800140c <SystemInit+0xf4>)
 80013ae:	4a1b      	ldr	r2, [pc, #108]	; (800141c <SystemInit+0x104>)
 80013b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80013b2:	4b16      	ldr	r3, [pc, #88]	; (800140c <SystemInit+0xf4>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80013b8:	4b14      	ldr	r3, [pc, #80]	; (800140c <SystemInit+0xf4>)
 80013ba:	4a18      	ldr	r2, [pc, #96]	; (800141c <SystemInit+0x104>)
 80013bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80013be:	4b13      	ldr	r3, [pc, #76]	; (800140c <SystemInit+0xf4>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013c4:	4b11      	ldr	r3, [pc, #68]	; (800140c <SystemInit+0xf4>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a10      	ldr	r2, [pc, #64]	; (800140c <SystemInit+0xf4>)
 80013ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80013d0:	4b0e      	ldr	r3, [pc, #56]	; (800140c <SystemInit+0xf4>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80013d6:	4b12      	ldr	r3, [pc, #72]	; (8001420 <SystemInit+0x108>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	4b12      	ldr	r3, [pc, #72]	; (8001424 <SystemInit+0x10c>)
 80013dc:	4013      	ands	r3, r2
 80013de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013e2:	d202      	bcs.n	80013ea <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80013e4:	4b10      	ldr	r3, [pc, #64]	; (8001428 <SystemInit+0x110>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80013ea:	4b10      	ldr	r3, [pc, #64]	; (800142c <SystemInit+0x114>)
 80013ec:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80013f0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013f2:	4b04      	ldr	r3, [pc, #16]	; (8001404 <SystemInit+0xec>)
 80013f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013f8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000ed00 	.word	0xe000ed00
 8001408:	52002000 	.word	0x52002000
 800140c:	58024400 	.word	0x58024400
 8001410:	eaf6ed7f 	.word	0xeaf6ed7f
 8001414:	02020200 	.word	0x02020200
 8001418:	01ff0000 	.word	0x01ff0000
 800141c:	01010280 	.word	0x01010280
 8001420:	5c001000 	.word	0x5c001000
 8001424:	ffff0000 	.word	0xffff0000
 8001428:	51008108 	.word	0x51008108
 800142c:	52004000 	.word	0x52004000

08001430 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001430:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001468 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001434:	f7ff ff70 	bl	8001318 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001438:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800143a:	e003      	b.n	8001444 <LoopCopyDataInit>

0800143c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800143c:	4b0b      	ldr	r3, [pc, #44]	; (800146c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800143e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001440:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001442:	3104      	adds	r1, #4

08001444 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001444:	480a      	ldr	r0, [pc, #40]	; (8001470 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001448:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800144a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800144c:	d3f6      	bcc.n	800143c <CopyDataInit>
  ldr  r2, =_sbss
 800144e:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001450:	e002      	b.n	8001458 <LoopFillZerobss>

08001452 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001452:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001454:	f842 3b04 	str.w	r3, [r2], #4

08001458 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001458:	4b08      	ldr	r3, [pc, #32]	; (800147c <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800145a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800145c:	d3f9      	bcc.n	8001452 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800145e:	f00e fb69 	bl	800fb34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001462:	f7ff f8b9 	bl	80005d8 <main>
  bx  lr    
 8001466:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001468:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 800146c:	0800feb8 	.word	0x0800feb8
  ldr  r0, =_sdata
 8001470:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001474:	240001e8 	.word	0x240001e8
  ldr  r2, =_sbss
 8001478:	240001e8 	.word	0x240001e8
  ldr  r3, = _ebss
 800147c:	2400238c 	.word	0x2400238c

08001480 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001480:	e7fe      	b.n	8001480 <ADC3_IRQHandler>
	...

08001484 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800148a:	2003      	movs	r0, #3
 800148c:	f000 f98a 	bl	80017a4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001490:	f004 fff0 	bl	8006474 <HAL_RCC_GetSysClockFreq>
 8001494:	4601      	mov	r1, r0
 8001496:	4b15      	ldr	r3, [pc, #84]	; (80014ec <HAL_Init+0x68>)
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	0a1b      	lsrs	r3, r3, #8
 800149c:	f003 030f 	and.w	r3, r3, #15
 80014a0:	4a13      	ldr	r2, [pc, #76]	; (80014f0 <HAL_Init+0x6c>)
 80014a2:	5cd3      	ldrb	r3, [r2, r3]
 80014a4:	f003 031f 	and.w	r3, r3, #31
 80014a8:	fa21 f303 	lsr.w	r3, r1, r3
 80014ac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014ae:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <HAL_Init+0x68>)
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	f003 030f 	and.w	r3, r3, #15
 80014b6:	4a0e      	ldr	r2, [pc, #56]	; (80014f0 <HAL_Init+0x6c>)
 80014b8:	5cd3      	ldrb	r3, [r2, r3]
 80014ba:	f003 031f 	and.w	r3, r3, #31
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	fa22 f303 	lsr.w	r3, r2, r3
 80014c4:	4a0b      	ldr	r2, [pc, #44]	; (80014f4 <HAL_Init+0x70>)
 80014c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014c8:	4a0b      	ldr	r2, [pc, #44]	; (80014f8 <HAL_Init+0x74>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014ce:	2000      	movs	r0, #0
 80014d0:	f000 f814 	bl	80014fc <HAL_InitTick>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e002      	b.n	80014e4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014de:	f7ff fc8f 	bl	8000e00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	58024400 	.word	0x58024400
 80014f0:	0800fe04 	.word	0x0800fe04
 80014f4:	24000004 	.word	0x24000004
 80014f8:	24000000 	.word	0x24000000

080014fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001504:	4b15      	ldr	r3, [pc, #84]	; (800155c <HAL_InitTick+0x60>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d101      	bne.n	8001510 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e021      	b.n	8001554 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001510:	4b13      	ldr	r3, [pc, #76]	; (8001560 <HAL_InitTick+0x64>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	4b11      	ldr	r3, [pc, #68]	; (800155c <HAL_InitTick+0x60>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	4619      	mov	r1, r3
 800151a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001522:	fbb2 f3f3 	udiv	r3, r2, r3
 8001526:	4618      	mov	r0, r3
 8001528:	f000 f96f 	bl	800180a <HAL_SYSTICK_Config>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e00e      	b.n	8001554 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b0f      	cmp	r3, #15
 800153a:	d80a      	bhi.n	8001552 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800153c:	2200      	movs	r2, #0
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	f04f 30ff 	mov.w	r0, #4294967295
 8001544:	f000 f939 	bl	80017ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001548:	4a06      	ldr	r2, [pc, #24]	; (8001564 <HAL_InitTick+0x68>)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800154e:	2300      	movs	r3, #0
 8001550:	e000      	b.n	8001554 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
}
 8001554:	4618      	mov	r0, r3
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	2400000c 	.word	0x2400000c
 8001560:	24000000 	.word	0x24000000
 8001564:	24000008 	.word	0x24000008

08001568 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <HAL_IncTick+0x20>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	461a      	mov	r2, r3
 8001572:	4b06      	ldr	r3, [pc, #24]	; (800158c <HAL_IncTick+0x24>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4413      	add	r3, r2
 8001578:	4a04      	ldr	r2, [pc, #16]	; (800158c <HAL_IncTick+0x24>)
 800157a:	6013      	str	r3, [r2, #0]
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	2400000c 	.word	0x2400000c
 800158c:	24000644 	.word	0x24000644

08001590 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  return uwTick;
 8001594:	4b03      	ldr	r3, [pc, #12]	; (80015a4 <HAL_GetTick+0x14>)
 8001596:	681b      	ldr	r3, [r3, #0]
}
 8001598:	4618      	mov	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	24000644 	.word	0x24000644

080015a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015b0:	f7ff ffee 	bl	8001590 <HAL_GetTick>
 80015b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015c0:	d005      	beq.n	80015ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <HAL_Delay+0x40>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	461a      	mov	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	4413      	add	r3, r2
 80015cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015ce:	bf00      	nop
 80015d0:	f7ff ffde 	bl	8001590 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d8f7      	bhi.n	80015d0 <HAL_Delay+0x28>
  {
  }
}
 80015e0:	bf00      	nop
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	2400000c 	.word	0x2400000c

080015ec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80015f0:	4b03      	ldr	r3, [pc, #12]	; (8001600 <HAL_GetREVID+0x14>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	0c1b      	lsrs	r3, r3, #16
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	5c001000 	.word	0x5c001000

08001604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001614:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <__NVIC_SetPriorityGrouping+0x40>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001620:	4013      	ands	r3, r2
 8001622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <__NVIC_SetPriorityGrouping+0x44>)
 800162e:	4313      	orrs	r3, r2
 8001630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001632:	4a04      	ldr	r2, [pc, #16]	; (8001644 <__NVIC_SetPriorityGrouping+0x40>)
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	60d3      	str	r3, [r2, #12]
}
 8001638:	bf00      	nop
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000ed00 	.word	0xe000ed00
 8001648:	05fa0000 	.word	0x05fa0000

0800164c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001650:	4b04      	ldr	r3, [pc, #16]	; (8001664 <__NVIC_GetPriorityGrouping+0x18>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	0a1b      	lsrs	r3, r3, #8
 8001656:	f003 0307 	and.w	r3, r3, #7
}
 800165a:	4618      	mov	r0, r3
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001672:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001676:	2b00      	cmp	r3, #0
 8001678:	db0b      	blt.n	8001692 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800167a:	88fb      	ldrh	r3, [r7, #6]
 800167c:	f003 021f 	and.w	r2, r3, #31
 8001680:	4907      	ldr	r1, [pc, #28]	; (80016a0 <__NVIC_EnableIRQ+0x38>)
 8001682:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001686:	095b      	lsrs	r3, r3, #5
 8001688:	2001      	movs	r0, #1
 800168a:	fa00 f202 	lsl.w	r2, r0, r2
 800168e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	e000e100 	.word	0xe000e100

080016a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	6039      	str	r1, [r7, #0]
 80016ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	db0a      	blt.n	80016ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	490c      	ldr	r1, [pc, #48]	; (80016f0 <__NVIC_SetPriority+0x4c>)
 80016be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016c2:	0112      	lsls	r2, r2, #4
 80016c4:	b2d2      	uxtb	r2, r2
 80016c6:	440b      	add	r3, r1
 80016c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016cc:	e00a      	b.n	80016e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	4908      	ldr	r1, [pc, #32]	; (80016f4 <__NVIC_SetPriority+0x50>)
 80016d4:	88fb      	ldrh	r3, [r7, #6]
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	3b04      	subs	r3, #4
 80016dc:	0112      	lsls	r2, r2, #4
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	440b      	add	r3, r1
 80016e2:	761a      	strb	r2, [r3, #24]
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	e000e100 	.word	0xe000e100
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b089      	sub	sp, #36	; 0x24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	f1c3 0307 	rsb	r3, r3, #7
 8001712:	2b04      	cmp	r3, #4
 8001714:	bf28      	it	cs
 8001716:	2304      	movcs	r3, #4
 8001718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3304      	adds	r3, #4
 800171e:	2b06      	cmp	r3, #6
 8001720:	d902      	bls.n	8001728 <NVIC_EncodePriority+0x30>
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	3b03      	subs	r3, #3
 8001726:	e000      	b.n	800172a <NVIC_EncodePriority+0x32>
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800172c:	f04f 32ff 	mov.w	r2, #4294967295
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43da      	mvns	r2, r3
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	401a      	ands	r2, r3
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001740:	f04f 31ff 	mov.w	r1, #4294967295
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	fa01 f303 	lsl.w	r3, r1, r3
 800174a:	43d9      	mvns	r1, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001750:	4313      	orrs	r3, r2
         );
}
 8001752:	4618      	mov	r0, r3
 8001754:	3724      	adds	r7, #36	; 0x24
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
	...

08001760 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3b01      	subs	r3, #1
 800176c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001770:	d301      	bcc.n	8001776 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001772:	2301      	movs	r3, #1
 8001774:	e00f      	b.n	8001796 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <SysTick_Config+0x40>)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3b01      	subs	r3, #1
 800177c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800177e:	210f      	movs	r1, #15
 8001780:	f04f 30ff 	mov.w	r0, #4294967295
 8001784:	f7ff ff8e 	bl	80016a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <SysTick_Config+0x40>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800178e:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <SysTick_Config+0x40>)
 8001790:	2207      	movs	r2, #7
 8001792:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	e000e010 	.word	0xe000e010

080017a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff ff29 	bl	8001604 <__NVIC_SetPriorityGrouping>
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b086      	sub	sp, #24
 80017be:	af00      	add	r7, sp, #0
 80017c0:	4603      	mov	r3, r0
 80017c2:	60b9      	str	r1, [r7, #8]
 80017c4:	607a      	str	r2, [r7, #4]
 80017c6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017c8:	f7ff ff40 	bl	800164c <__NVIC_GetPriorityGrouping>
 80017cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	68b9      	ldr	r1, [r7, #8]
 80017d2:	6978      	ldr	r0, [r7, #20]
 80017d4:	f7ff ff90 	bl	80016f8 <NVIC_EncodePriority>
 80017d8:	4602      	mov	r2, r0
 80017da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017de:	4611      	mov	r1, r2
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ff5f 	bl	80016a4 <__NVIC_SetPriority>
}
 80017e6:	bf00      	nop
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b082      	sub	sp, #8
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	4603      	mov	r3, r0
 80017f6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ff33 	bl	8001668 <__NVIC_EnableIRQ>
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b082      	sub	sp, #8
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7ff ffa4 	bl	8001760 <SysTick_Config>
 8001818:	4603      	mov	r3, r0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
	...

08001824 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800182c:	f7ff feb0 	bl	8001590 <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e316      	b.n	8001e6a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a66      	ldr	r2, [pc, #408]	; (80019dc <HAL_DMA_Init+0x1b8>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d04a      	beq.n	80018dc <HAL_DMA_Init+0xb8>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a65      	ldr	r2, [pc, #404]	; (80019e0 <HAL_DMA_Init+0x1bc>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d045      	beq.n	80018dc <HAL_DMA_Init+0xb8>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a63      	ldr	r2, [pc, #396]	; (80019e4 <HAL_DMA_Init+0x1c0>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d040      	beq.n	80018dc <HAL_DMA_Init+0xb8>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a62      	ldr	r2, [pc, #392]	; (80019e8 <HAL_DMA_Init+0x1c4>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d03b      	beq.n	80018dc <HAL_DMA_Init+0xb8>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a60      	ldr	r2, [pc, #384]	; (80019ec <HAL_DMA_Init+0x1c8>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d036      	beq.n	80018dc <HAL_DMA_Init+0xb8>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a5f      	ldr	r2, [pc, #380]	; (80019f0 <HAL_DMA_Init+0x1cc>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d031      	beq.n	80018dc <HAL_DMA_Init+0xb8>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a5d      	ldr	r2, [pc, #372]	; (80019f4 <HAL_DMA_Init+0x1d0>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d02c      	beq.n	80018dc <HAL_DMA_Init+0xb8>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a5c      	ldr	r2, [pc, #368]	; (80019f8 <HAL_DMA_Init+0x1d4>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d027      	beq.n	80018dc <HAL_DMA_Init+0xb8>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a5a      	ldr	r2, [pc, #360]	; (80019fc <HAL_DMA_Init+0x1d8>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d022      	beq.n	80018dc <HAL_DMA_Init+0xb8>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a59      	ldr	r2, [pc, #356]	; (8001a00 <HAL_DMA_Init+0x1dc>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d01d      	beq.n	80018dc <HAL_DMA_Init+0xb8>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a57      	ldr	r2, [pc, #348]	; (8001a04 <HAL_DMA_Init+0x1e0>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d018      	beq.n	80018dc <HAL_DMA_Init+0xb8>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a56      	ldr	r2, [pc, #344]	; (8001a08 <HAL_DMA_Init+0x1e4>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d013      	beq.n	80018dc <HAL_DMA_Init+0xb8>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a54      	ldr	r2, [pc, #336]	; (8001a0c <HAL_DMA_Init+0x1e8>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d00e      	beq.n	80018dc <HAL_DMA_Init+0xb8>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a53      	ldr	r2, [pc, #332]	; (8001a10 <HAL_DMA_Init+0x1ec>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d009      	beq.n	80018dc <HAL_DMA_Init+0xb8>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a51      	ldr	r2, [pc, #324]	; (8001a14 <HAL_DMA_Init+0x1f0>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d004      	beq.n	80018dc <HAL_DMA_Init+0xb8>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a50      	ldr	r2, [pc, #320]	; (8001a18 <HAL_DMA_Init+0x1f4>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d101      	bne.n	80018e0 <HAL_DMA_Init+0xbc>
 80018dc:	2301      	movs	r3, #1
 80018de:	e000      	b.n	80018e2 <HAL_DMA_Init+0xbe>
 80018e0:	2300      	movs	r3, #0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f000 813b 	beq.w	8001b5e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2202      	movs	r2, #2
 80018f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a37      	ldr	r2, [pc, #220]	; (80019dc <HAL_DMA_Init+0x1b8>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d04a      	beq.n	8001998 <HAL_DMA_Init+0x174>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a36      	ldr	r2, [pc, #216]	; (80019e0 <HAL_DMA_Init+0x1bc>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d045      	beq.n	8001998 <HAL_DMA_Init+0x174>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a34      	ldr	r2, [pc, #208]	; (80019e4 <HAL_DMA_Init+0x1c0>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d040      	beq.n	8001998 <HAL_DMA_Init+0x174>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a33      	ldr	r2, [pc, #204]	; (80019e8 <HAL_DMA_Init+0x1c4>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d03b      	beq.n	8001998 <HAL_DMA_Init+0x174>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a31      	ldr	r2, [pc, #196]	; (80019ec <HAL_DMA_Init+0x1c8>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d036      	beq.n	8001998 <HAL_DMA_Init+0x174>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a30      	ldr	r2, [pc, #192]	; (80019f0 <HAL_DMA_Init+0x1cc>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d031      	beq.n	8001998 <HAL_DMA_Init+0x174>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a2e      	ldr	r2, [pc, #184]	; (80019f4 <HAL_DMA_Init+0x1d0>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d02c      	beq.n	8001998 <HAL_DMA_Init+0x174>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a2d      	ldr	r2, [pc, #180]	; (80019f8 <HAL_DMA_Init+0x1d4>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d027      	beq.n	8001998 <HAL_DMA_Init+0x174>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a2b      	ldr	r2, [pc, #172]	; (80019fc <HAL_DMA_Init+0x1d8>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d022      	beq.n	8001998 <HAL_DMA_Init+0x174>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a2a      	ldr	r2, [pc, #168]	; (8001a00 <HAL_DMA_Init+0x1dc>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d01d      	beq.n	8001998 <HAL_DMA_Init+0x174>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a28      	ldr	r2, [pc, #160]	; (8001a04 <HAL_DMA_Init+0x1e0>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d018      	beq.n	8001998 <HAL_DMA_Init+0x174>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a27      	ldr	r2, [pc, #156]	; (8001a08 <HAL_DMA_Init+0x1e4>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d013      	beq.n	8001998 <HAL_DMA_Init+0x174>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a25      	ldr	r2, [pc, #148]	; (8001a0c <HAL_DMA_Init+0x1e8>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d00e      	beq.n	8001998 <HAL_DMA_Init+0x174>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a24      	ldr	r2, [pc, #144]	; (8001a10 <HAL_DMA_Init+0x1ec>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d009      	beq.n	8001998 <HAL_DMA_Init+0x174>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a22      	ldr	r2, [pc, #136]	; (8001a14 <HAL_DMA_Init+0x1f0>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d004      	beq.n	8001998 <HAL_DMA_Init+0x174>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a21      	ldr	r2, [pc, #132]	; (8001a18 <HAL_DMA_Init+0x1f4>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d108      	bne.n	80019aa <HAL_DMA_Init+0x186>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f022 0201 	bic.w	r2, r2, #1
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	e007      	b.n	80019ba <HAL_DMA_Init+0x196>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 0201 	bic.w	r2, r2, #1
 80019b8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80019ba:	e02f      	b.n	8001a1c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019bc:	f7ff fde8 	bl	8001590 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b05      	cmp	r3, #5
 80019c8:	d928      	bls.n	8001a1c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2220      	movs	r2, #32
 80019ce:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2203      	movs	r2, #3
 80019d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e246      	b.n	8001e6a <HAL_DMA_Init+0x646>
 80019dc:	40020010 	.word	0x40020010
 80019e0:	40020028 	.word	0x40020028
 80019e4:	40020040 	.word	0x40020040
 80019e8:	40020058 	.word	0x40020058
 80019ec:	40020070 	.word	0x40020070
 80019f0:	40020088 	.word	0x40020088
 80019f4:	400200a0 	.word	0x400200a0
 80019f8:	400200b8 	.word	0x400200b8
 80019fc:	40020410 	.word	0x40020410
 8001a00:	40020428 	.word	0x40020428
 8001a04:	40020440 	.word	0x40020440
 8001a08:	40020458 	.word	0x40020458
 8001a0c:	40020470 	.word	0x40020470
 8001a10:	40020488 	.word	0x40020488
 8001a14:	400204a0 	.word	0x400204a0
 8001a18:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1c8      	bne.n	80019bc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	4b83      	ldr	r3, [pc, #524]	; (8001c44 <HAL_DMA_Init+0x420>)
 8001a36:	4013      	ands	r3, r2
 8001a38:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001a42:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a4e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a5a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
 8001a60:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6c:	2b04      	cmp	r3, #4
 8001a6e:	d107      	bne.n	8001a80 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001a80:	4b71      	ldr	r3, [pc, #452]	; (8001c48 <HAL_DMA_Init+0x424>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	4b71      	ldr	r3, [pc, #452]	; (8001c4c <HAL_DMA_Init+0x428>)
 8001a86:	4013      	ands	r3, r2
 8001a88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a8c:	d328      	bcc.n	8001ae0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b28      	cmp	r3, #40	; 0x28
 8001a94:	d903      	bls.n	8001a9e <HAL_DMA_Init+0x27a>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b2e      	cmp	r3, #46	; 0x2e
 8001a9c:	d917      	bls.n	8001ace <HAL_DMA_Init+0x2aa>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b3e      	cmp	r3, #62	; 0x3e
 8001aa4:	d903      	bls.n	8001aae <HAL_DMA_Init+0x28a>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b42      	cmp	r3, #66	; 0x42
 8001aac:	d90f      	bls.n	8001ace <HAL_DMA_Init+0x2aa>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b46      	cmp	r3, #70	; 0x46
 8001ab4:	d903      	bls.n	8001abe <HAL_DMA_Init+0x29a>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b48      	cmp	r3, #72	; 0x48
 8001abc:	d907      	bls.n	8001ace <HAL_DMA_Init+0x2aa>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b4e      	cmp	r3, #78	; 0x4e
 8001ac4:	d905      	bls.n	8001ad2 <HAL_DMA_Init+0x2ae>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b52      	cmp	r3, #82	; 0x52
 8001acc:	d801      	bhi.n	8001ad2 <HAL_DMA_Init+0x2ae>
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e000      	b.n	8001ad4 <HAL_DMA_Init+0x2b0>
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d003      	beq.n	8001ae0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ade:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	f023 0307 	bic.w	r3, r3, #7
 8001af6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afc:	697a      	ldr	r2, [r7, #20]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	d117      	bne.n	8001b3a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d00e      	beq.n	8001b3a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f001 fdcf 	bl	80036c0 <DMA_CheckFifoParam>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d008      	beq.n	8001b3a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2240      	movs	r2, #64	; 0x40
 8001b2c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e197      	b.n	8001e6a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f001 fd0a 	bl	800355c <DMA_CalcBaseAndBitshift>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b50:	f003 031f 	and.w	r3, r3, #31
 8001b54:	223f      	movs	r2, #63	; 0x3f
 8001b56:	409a      	lsls	r2, r3
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	e0cd      	b.n	8001cfa <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a3b      	ldr	r2, [pc, #236]	; (8001c50 <HAL_DMA_Init+0x42c>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d022      	beq.n	8001bae <HAL_DMA_Init+0x38a>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a39      	ldr	r2, [pc, #228]	; (8001c54 <HAL_DMA_Init+0x430>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d01d      	beq.n	8001bae <HAL_DMA_Init+0x38a>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a38      	ldr	r2, [pc, #224]	; (8001c58 <HAL_DMA_Init+0x434>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d018      	beq.n	8001bae <HAL_DMA_Init+0x38a>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a36      	ldr	r2, [pc, #216]	; (8001c5c <HAL_DMA_Init+0x438>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d013      	beq.n	8001bae <HAL_DMA_Init+0x38a>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a35      	ldr	r2, [pc, #212]	; (8001c60 <HAL_DMA_Init+0x43c>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d00e      	beq.n	8001bae <HAL_DMA_Init+0x38a>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a33      	ldr	r2, [pc, #204]	; (8001c64 <HAL_DMA_Init+0x440>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d009      	beq.n	8001bae <HAL_DMA_Init+0x38a>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a32      	ldr	r2, [pc, #200]	; (8001c68 <HAL_DMA_Init+0x444>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d004      	beq.n	8001bae <HAL_DMA_Init+0x38a>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a30      	ldr	r2, [pc, #192]	; (8001c6c <HAL_DMA_Init+0x448>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d101      	bne.n	8001bb2 <HAL_DMA_Init+0x38e>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e000      	b.n	8001bb4 <HAL_DMA_Init+0x390>
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 8097 	beq.w	8001ce8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a24      	ldr	r2, [pc, #144]	; (8001c50 <HAL_DMA_Init+0x42c>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d021      	beq.n	8001c08 <HAL_DMA_Init+0x3e4>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a22      	ldr	r2, [pc, #136]	; (8001c54 <HAL_DMA_Init+0x430>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d01c      	beq.n	8001c08 <HAL_DMA_Init+0x3e4>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a21      	ldr	r2, [pc, #132]	; (8001c58 <HAL_DMA_Init+0x434>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d017      	beq.n	8001c08 <HAL_DMA_Init+0x3e4>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a1f      	ldr	r2, [pc, #124]	; (8001c5c <HAL_DMA_Init+0x438>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d012      	beq.n	8001c08 <HAL_DMA_Init+0x3e4>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a1e      	ldr	r2, [pc, #120]	; (8001c60 <HAL_DMA_Init+0x43c>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d00d      	beq.n	8001c08 <HAL_DMA_Init+0x3e4>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a1c      	ldr	r2, [pc, #112]	; (8001c64 <HAL_DMA_Init+0x440>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d008      	beq.n	8001c08 <HAL_DMA_Init+0x3e4>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a1b      	ldr	r2, [pc, #108]	; (8001c68 <HAL_DMA_Init+0x444>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d003      	beq.n	8001c08 <HAL_DMA_Init+0x3e4>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a19      	ldr	r2, [pc, #100]	; (8001c6c <HAL_DMA_Init+0x448>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2202      	movs	r2, #2
 8001c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <HAL_DMA_Init+0x44c>)
 8001c26:	4013      	ands	r3, r2
 8001c28:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	2b40      	cmp	r3, #64	; 0x40
 8001c30:	d020      	beq.n	8001c74 <HAL_DMA_Init+0x450>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	2b80      	cmp	r3, #128	; 0x80
 8001c38:	d102      	bne.n	8001c40 <HAL_DMA_Init+0x41c>
 8001c3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c3e:	e01a      	b.n	8001c76 <HAL_DMA_Init+0x452>
 8001c40:	2300      	movs	r3, #0
 8001c42:	e018      	b.n	8001c76 <HAL_DMA_Init+0x452>
 8001c44:	fe10803f 	.word	0xfe10803f
 8001c48:	5c001000 	.word	0x5c001000
 8001c4c:	ffff0000 	.word	0xffff0000
 8001c50:	58025408 	.word	0x58025408
 8001c54:	5802541c 	.word	0x5802541c
 8001c58:	58025430 	.word	0x58025430
 8001c5c:	58025444 	.word	0x58025444
 8001c60:	58025458 	.word	0x58025458
 8001c64:	5802546c 	.word	0x5802546c
 8001c68:	58025480 	.word	0x58025480
 8001c6c:	58025494 	.word	0x58025494
 8001c70:	fffe000f 	.word	0xfffe000f
 8001c74:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	68d2      	ldr	r2, [r2, #12]
 8001c7a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001c84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001c8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001c94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001c9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001ca4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ca6:	697a      	ldr	r2, [r7, #20]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	4b6e      	ldr	r3, [pc, #440]	; (8001e74 <HAL_DMA_Init+0x650>)
 8001cbc:	4413      	add	r3, r2
 8001cbe:	4a6e      	ldr	r2, [pc, #440]	; (8001e78 <HAL_DMA_Init+0x654>)
 8001cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc4:	091b      	lsrs	r3, r3, #4
 8001cc6:	009a      	lsls	r2, r3, #2
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f001 fc45 	bl	800355c <DMA_CalcBaseAndBitshift>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cda:	f003 031f 	and.w	r3, r3, #31
 8001cde:	2201      	movs	r2, #1
 8001ce0:	409a      	lsls	r2, r3
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	e008      	b.n	8001cfa <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2240      	movs	r2, #64	; 0x40
 8001cec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e0b7      	b.n	8001e6a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a5f      	ldr	r2, [pc, #380]	; (8001e7c <HAL_DMA_Init+0x658>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d072      	beq.n	8001dea <HAL_DMA_Init+0x5c6>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a5d      	ldr	r2, [pc, #372]	; (8001e80 <HAL_DMA_Init+0x65c>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d06d      	beq.n	8001dea <HAL_DMA_Init+0x5c6>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a5c      	ldr	r2, [pc, #368]	; (8001e84 <HAL_DMA_Init+0x660>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d068      	beq.n	8001dea <HAL_DMA_Init+0x5c6>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a5a      	ldr	r2, [pc, #360]	; (8001e88 <HAL_DMA_Init+0x664>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d063      	beq.n	8001dea <HAL_DMA_Init+0x5c6>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a59      	ldr	r2, [pc, #356]	; (8001e8c <HAL_DMA_Init+0x668>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d05e      	beq.n	8001dea <HAL_DMA_Init+0x5c6>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a57      	ldr	r2, [pc, #348]	; (8001e90 <HAL_DMA_Init+0x66c>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d059      	beq.n	8001dea <HAL_DMA_Init+0x5c6>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a56      	ldr	r2, [pc, #344]	; (8001e94 <HAL_DMA_Init+0x670>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d054      	beq.n	8001dea <HAL_DMA_Init+0x5c6>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a54      	ldr	r2, [pc, #336]	; (8001e98 <HAL_DMA_Init+0x674>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d04f      	beq.n	8001dea <HAL_DMA_Init+0x5c6>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a53      	ldr	r2, [pc, #332]	; (8001e9c <HAL_DMA_Init+0x678>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d04a      	beq.n	8001dea <HAL_DMA_Init+0x5c6>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a51      	ldr	r2, [pc, #324]	; (8001ea0 <HAL_DMA_Init+0x67c>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d045      	beq.n	8001dea <HAL_DMA_Init+0x5c6>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a50      	ldr	r2, [pc, #320]	; (8001ea4 <HAL_DMA_Init+0x680>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d040      	beq.n	8001dea <HAL_DMA_Init+0x5c6>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a4e      	ldr	r2, [pc, #312]	; (8001ea8 <HAL_DMA_Init+0x684>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d03b      	beq.n	8001dea <HAL_DMA_Init+0x5c6>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a4d      	ldr	r2, [pc, #308]	; (8001eac <HAL_DMA_Init+0x688>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d036      	beq.n	8001dea <HAL_DMA_Init+0x5c6>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a4b      	ldr	r2, [pc, #300]	; (8001eb0 <HAL_DMA_Init+0x68c>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d031      	beq.n	8001dea <HAL_DMA_Init+0x5c6>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a4a      	ldr	r2, [pc, #296]	; (8001eb4 <HAL_DMA_Init+0x690>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d02c      	beq.n	8001dea <HAL_DMA_Init+0x5c6>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a48      	ldr	r2, [pc, #288]	; (8001eb8 <HAL_DMA_Init+0x694>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d027      	beq.n	8001dea <HAL_DMA_Init+0x5c6>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a47      	ldr	r2, [pc, #284]	; (8001ebc <HAL_DMA_Init+0x698>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d022      	beq.n	8001dea <HAL_DMA_Init+0x5c6>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a45      	ldr	r2, [pc, #276]	; (8001ec0 <HAL_DMA_Init+0x69c>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d01d      	beq.n	8001dea <HAL_DMA_Init+0x5c6>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a44      	ldr	r2, [pc, #272]	; (8001ec4 <HAL_DMA_Init+0x6a0>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d018      	beq.n	8001dea <HAL_DMA_Init+0x5c6>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a42      	ldr	r2, [pc, #264]	; (8001ec8 <HAL_DMA_Init+0x6a4>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d013      	beq.n	8001dea <HAL_DMA_Init+0x5c6>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a41      	ldr	r2, [pc, #260]	; (8001ecc <HAL_DMA_Init+0x6a8>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d00e      	beq.n	8001dea <HAL_DMA_Init+0x5c6>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a3f      	ldr	r2, [pc, #252]	; (8001ed0 <HAL_DMA_Init+0x6ac>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d009      	beq.n	8001dea <HAL_DMA_Init+0x5c6>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a3e      	ldr	r2, [pc, #248]	; (8001ed4 <HAL_DMA_Init+0x6b0>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d004      	beq.n	8001dea <HAL_DMA_Init+0x5c6>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a3c      	ldr	r2, [pc, #240]	; (8001ed8 <HAL_DMA_Init+0x6b4>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d101      	bne.n	8001dee <HAL_DMA_Init+0x5ca>
 8001dea:	2301      	movs	r3, #1
 8001dec:	e000      	b.n	8001df0 <HAL_DMA_Init+0x5cc>
 8001dee:	2300      	movs	r3, #0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d032      	beq.n	8001e5a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f001 fcdf 	bl	80037b8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	2b80      	cmp	r3, #128	; 0x80
 8001e00:	d102      	bne.n	8001e08 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e10:	b2d2      	uxtb	r2, r2
 8001e12:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001e1c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d010      	beq.n	8001e48 <HAL_DMA_Init+0x624>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b08      	cmp	r3, #8
 8001e2c:	d80c      	bhi.n	8001e48 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f001 fd5c 	bl	80038ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	e008      	b.n	8001e5a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	a7fdabf8 	.word	0xa7fdabf8
 8001e78:	cccccccd 	.word	0xcccccccd
 8001e7c:	40020010 	.word	0x40020010
 8001e80:	40020028 	.word	0x40020028
 8001e84:	40020040 	.word	0x40020040
 8001e88:	40020058 	.word	0x40020058
 8001e8c:	40020070 	.word	0x40020070
 8001e90:	40020088 	.word	0x40020088
 8001e94:	400200a0 	.word	0x400200a0
 8001e98:	400200b8 	.word	0x400200b8
 8001e9c:	40020410 	.word	0x40020410
 8001ea0:	40020428 	.word	0x40020428
 8001ea4:	40020440 	.word	0x40020440
 8001ea8:	40020458 	.word	0x40020458
 8001eac:	40020470 	.word	0x40020470
 8001eb0:	40020488 	.word	0x40020488
 8001eb4:	400204a0 	.word	0x400204a0
 8001eb8:	400204b8 	.word	0x400204b8
 8001ebc:	58025408 	.word	0x58025408
 8001ec0:	5802541c 	.word	0x5802541c
 8001ec4:	58025430 	.word	0x58025430
 8001ec8:	58025444 	.word	0x58025444
 8001ecc:	58025458 	.word	0x58025458
 8001ed0:	5802546c 	.word	0x5802546c
 8001ed4:	58025480 	.word	0x58025480
 8001ed8:	58025494 	.word	0x58025494

08001edc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
 8001ee8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001eea:	2300      	movs	r3, #0
 8001eec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e226      	b.n	8002346 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d101      	bne.n	8001f06 <HAL_DMA_Start_IT+0x2a>
 8001f02:	2302      	movs	r3, #2
 8001f04:	e21f      	b.n	8002346 <HAL_DMA_Start_IT+0x46a>
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	f040 820a 	bne.w	8002330 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2202      	movs	r2, #2
 8001f20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a68      	ldr	r2, [pc, #416]	; (80020d0 <HAL_DMA_Start_IT+0x1f4>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d04a      	beq.n	8001fca <HAL_DMA_Start_IT+0xee>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a66      	ldr	r2, [pc, #408]	; (80020d4 <HAL_DMA_Start_IT+0x1f8>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d045      	beq.n	8001fca <HAL_DMA_Start_IT+0xee>
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a65      	ldr	r2, [pc, #404]	; (80020d8 <HAL_DMA_Start_IT+0x1fc>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d040      	beq.n	8001fca <HAL_DMA_Start_IT+0xee>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a63      	ldr	r2, [pc, #396]	; (80020dc <HAL_DMA_Start_IT+0x200>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d03b      	beq.n	8001fca <HAL_DMA_Start_IT+0xee>
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a62      	ldr	r2, [pc, #392]	; (80020e0 <HAL_DMA_Start_IT+0x204>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d036      	beq.n	8001fca <HAL_DMA_Start_IT+0xee>
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a60      	ldr	r2, [pc, #384]	; (80020e4 <HAL_DMA_Start_IT+0x208>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d031      	beq.n	8001fca <HAL_DMA_Start_IT+0xee>
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a5f      	ldr	r2, [pc, #380]	; (80020e8 <HAL_DMA_Start_IT+0x20c>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d02c      	beq.n	8001fca <HAL_DMA_Start_IT+0xee>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a5d      	ldr	r2, [pc, #372]	; (80020ec <HAL_DMA_Start_IT+0x210>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d027      	beq.n	8001fca <HAL_DMA_Start_IT+0xee>
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a5c      	ldr	r2, [pc, #368]	; (80020f0 <HAL_DMA_Start_IT+0x214>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d022      	beq.n	8001fca <HAL_DMA_Start_IT+0xee>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a5a      	ldr	r2, [pc, #360]	; (80020f4 <HAL_DMA_Start_IT+0x218>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d01d      	beq.n	8001fca <HAL_DMA_Start_IT+0xee>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a59      	ldr	r2, [pc, #356]	; (80020f8 <HAL_DMA_Start_IT+0x21c>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d018      	beq.n	8001fca <HAL_DMA_Start_IT+0xee>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a57      	ldr	r2, [pc, #348]	; (80020fc <HAL_DMA_Start_IT+0x220>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d013      	beq.n	8001fca <HAL_DMA_Start_IT+0xee>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a56      	ldr	r2, [pc, #344]	; (8002100 <HAL_DMA_Start_IT+0x224>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d00e      	beq.n	8001fca <HAL_DMA_Start_IT+0xee>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a54      	ldr	r2, [pc, #336]	; (8002104 <HAL_DMA_Start_IT+0x228>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d009      	beq.n	8001fca <HAL_DMA_Start_IT+0xee>
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a53      	ldr	r2, [pc, #332]	; (8002108 <HAL_DMA_Start_IT+0x22c>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d004      	beq.n	8001fca <HAL_DMA_Start_IT+0xee>
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a51      	ldr	r2, [pc, #324]	; (800210c <HAL_DMA_Start_IT+0x230>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d108      	bne.n	8001fdc <HAL_DMA_Start_IT+0x100>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0201 	bic.w	r2, r2, #1
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	e007      	b.n	8001fec <HAL_DMA_Start_IT+0x110>
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 0201 	bic.w	r2, r2, #1
 8001fea:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	68b9      	ldr	r1, [r7, #8]
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f001 f906 	bl	8003204 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a34      	ldr	r2, [pc, #208]	; (80020d0 <HAL_DMA_Start_IT+0x1f4>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d04a      	beq.n	8002098 <HAL_DMA_Start_IT+0x1bc>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a33      	ldr	r2, [pc, #204]	; (80020d4 <HAL_DMA_Start_IT+0x1f8>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d045      	beq.n	8002098 <HAL_DMA_Start_IT+0x1bc>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a31      	ldr	r2, [pc, #196]	; (80020d8 <HAL_DMA_Start_IT+0x1fc>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d040      	beq.n	8002098 <HAL_DMA_Start_IT+0x1bc>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a30      	ldr	r2, [pc, #192]	; (80020dc <HAL_DMA_Start_IT+0x200>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d03b      	beq.n	8002098 <HAL_DMA_Start_IT+0x1bc>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a2e      	ldr	r2, [pc, #184]	; (80020e0 <HAL_DMA_Start_IT+0x204>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d036      	beq.n	8002098 <HAL_DMA_Start_IT+0x1bc>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a2d      	ldr	r2, [pc, #180]	; (80020e4 <HAL_DMA_Start_IT+0x208>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d031      	beq.n	8002098 <HAL_DMA_Start_IT+0x1bc>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a2b      	ldr	r2, [pc, #172]	; (80020e8 <HAL_DMA_Start_IT+0x20c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d02c      	beq.n	8002098 <HAL_DMA_Start_IT+0x1bc>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a2a      	ldr	r2, [pc, #168]	; (80020ec <HAL_DMA_Start_IT+0x210>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d027      	beq.n	8002098 <HAL_DMA_Start_IT+0x1bc>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a28      	ldr	r2, [pc, #160]	; (80020f0 <HAL_DMA_Start_IT+0x214>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d022      	beq.n	8002098 <HAL_DMA_Start_IT+0x1bc>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a27      	ldr	r2, [pc, #156]	; (80020f4 <HAL_DMA_Start_IT+0x218>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d01d      	beq.n	8002098 <HAL_DMA_Start_IT+0x1bc>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a25      	ldr	r2, [pc, #148]	; (80020f8 <HAL_DMA_Start_IT+0x21c>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d018      	beq.n	8002098 <HAL_DMA_Start_IT+0x1bc>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a24      	ldr	r2, [pc, #144]	; (80020fc <HAL_DMA_Start_IT+0x220>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d013      	beq.n	8002098 <HAL_DMA_Start_IT+0x1bc>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a22      	ldr	r2, [pc, #136]	; (8002100 <HAL_DMA_Start_IT+0x224>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d00e      	beq.n	8002098 <HAL_DMA_Start_IT+0x1bc>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a21      	ldr	r2, [pc, #132]	; (8002104 <HAL_DMA_Start_IT+0x228>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d009      	beq.n	8002098 <HAL_DMA_Start_IT+0x1bc>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a1f      	ldr	r2, [pc, #124]	; (8002108 <HAL_DMA_Start_IT+0x22c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d004      	beq.n	8002098 <HAL_DMA_Start_IT+0x1bc>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a1e      	ldr	r2, [pc, #120]	; (800210c <HAL_DMA_Start_IT+0x230>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d101      	bne.n	800209c <HAL_DMA_Start_IT+0x1c0>
 8002098:	2301      	movs	r3, #1
 800209a:	e000      	b.n	800209e <HAL_DMA_Start_IT+0x1c2>
 800209c:	2300      	movs	r3, #0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d036      	beq.n	8002110 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f023 021e 	bic.w	r2, r3, #30
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f042 0216 	orr.w	r2, r2, #22
 80020b4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d03e      	beq.n	800213c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f042 0208 	orr.w	r2, r2, #8
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	e035      	b.n	800213c <HAL_DMA_Start_IT+0x260>
 80020d0:	40020010 	.word	0x40020010
 80020d4:	40020028 	.word	0x40020028
 80020d8:	40020040 	.word	0x40020040
 80020dc:	40020058 	.word	0x40020058
 80020e0:	40020070 	.word	0x40020070
 80020e4:	40020088 	.word	0x40020088
 80020e8:	400200a0 	.word	0x400200a0
 80020ec:	400200b8 	.word	0x400200b8
 80020f0:	40020410 	.word	0x40020410
 80020f4:	40020428 	.word	0x40020428
 80020f8:	40020440 	.word	0x40020440
 80020fc:	40020458 	.word	0x40020458
 8002100:	40020470 	.word	0x40020470
 8002104:	40020488 	.word	0x40020488
 8002108:	400204a0 	.word	0x400204a0
 800210c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f023 020e 	bic.w	r2, r3, #14
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f042 020a 	orr.w	r2, r2, #10
 8002122:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002128:	2b00      	cmp	r3, #0
 800212a:	d007      	beq.n	800213c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f042 0204 	orr.w	r2, r2, #4
 800213a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a83      	ldr	r2, [pc, #524]	; (8002350 <HAL_DMA_Start_IT+0x474>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d072      	beq.n	800222c <HAL_DMA_Start_IT+0x350>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a82      	ldr	r2, [pc, #520]	; (8002354 <HAL_DMA_Start_IT+0x478>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d06d      	beq.n	800222c <HAL_DMA_Start_IT+0x350>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a80      	ldr	r2, [pc, #512]	; (8002358 <HAL_DMA_Start_IT+0x47c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d068      	beq.n	800222c <HAL_DMA_Start_IT+0x350>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a7f      	ldr	r2, [pc, #508]	; (800235c <HAL_DMA_Start_IT+0x480>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d063      	beq.n	800222c <HAL_DMA_Start_IT+0x350>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a7d      	ldr	r2, [pc, #500]	; (8002360 <HAL_DMA_Start_IT+0x484>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d05e      	beq.n	800222c <HAL_DMA_Start_IT+0x350>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a7c      	ldr	r2, [pc, #496]	; (8002364 <HAL_DMA_Start_IT+0x488>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d059      	beq.n	800222c <HAL_DMA_Start_IT+0x350>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a7a      	ldr	r2, [pc, #488]	; (8002368 <HAL_DMA_Start_IT+0x48c>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d054      	beq.n	800222c <HAL_DMA_Start_IT+0x350>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a79      	ldr	r2, [pc, #484]	; (800236c <HAL_DMA_Start_IT+0x490>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d04f      	beq.n	800222c <HAL_DMA_Start_IT+0x350>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a77      	ldr	r2, [pc, #476]	; (8002370 <HAL_DMA_Start_IT+0x494>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d04a      	beq.n	800222c <HAL_DMA_Start_IT+0x350>
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a76      	ldr	r2, [pc, #472]	; (8002374 <HAL_DMA_Start_IT+0x498>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d045      	beq.n	800222c <HAL_DMA_Start_IT+0x350>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a74      	ldr	r2, [pc, #464]	; (8002378 <HAL_DMA_Start_IT+0x49c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d040      	beq.n	800222c <HAL_DMA_Start_IT+0x350>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a73      	ldr	r2, [pc, #460]	; (800237c <HAL_DMA_Start_IT+0x4a0>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d03b      	beq.n	800222c <HAL_DMA_Start_IT+0x350>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a71      	ldr	r2, [pc, #452]	; (8002380 <HAL_DMA_Start_IT+0x4a4>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d036      	beq.n	800222c <HAL_DMA_Start_IT+0x350>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a70      	ldr	r2, [pc, #448]	; (8002384 <HAL_DMA_Start_IT+0x4a8>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d031      	beq.n	800222c <HAL_DMA_Start_IT+0x350>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a6e      	ldr	r2, [pc, #440]	; (8002388 <HAL_DMA_Start_IT+0x4ac>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d02c      	beq.n	800222c <HAL_DMA_Start_IT+0x350>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a6d      	ldr	r2, [pc, #436]	; (800238c <HAL_DMA_Start_IT+0x4b0>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d027      	beq.n	800222c <HAL_DMA_Start_IT+0x350>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a6b      	ldr	r2, [pc, #428]	; (8002390 <HAL_DMA_Start_IT+0x4b4>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d022      	beq.n	800222c <HAL_DMA_Start_IT+0x350>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a6a      	ldr	r2, [pc, #424]	; (8002394 <HAL_DMA_Start_IT+0x4b8>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d01d      	beq.n	800222c <HAL_DMA_Start_IT+0x350>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a68      	ldr	r2, [pc, #416]	; (8002398 <HAL_DMA_Start_IT+0x4bc>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d018      	beq.n	800222c <HAL_DMA_Start_IT+0x350>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a67      	ldr	r2, [pc, #412]	; (800239c <HAL_DMA_Start_IT+0x4c0>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d013      	beq.n	800222c <HAL_DMA_Start_IT+0x350>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a65      	ldr	r2, [pc, #404]	; (80023a0 <HAL_DMA_Start_IT+0x4c4>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d00e      	beq.n	800222c <HAL_DMA_Start_IT+0x350>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a64      	ldr	r2, [pc, #400]	; (80023a4 <HAL_DMA_Start_IT+0x4c8>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d009      	beq.n	800222c <HAL_DMA_Start_IT+0x350>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a62      	ldr	r2, [pc, #392]	; (80023a8 <HAL_DMA_Start_IT+0x4cc>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d004      	beq.n	800222c <HAL_DMA_Start_IT+0x350>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a61      	ldr	r2, [pc, #388]	; (80023ac <HAL_DMA_Start_IT+0x4d0>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d101      	bne.n	8002230 <HAL_DMA_Start_IT+0x354>
 800222c:	2301      	movs	r3, #1
 800222e:	e000      	b.n	8002232 <HAL_DMA_Start_IT+0x356>
 8002230:	2300      	movs	r3, #0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d01a      	beq.n	800226c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d007      	beq.n	8002254 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800224e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002252:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002258:	2b00      	cmp	r3, #0
 800225a:	d007      	beq.n	800226c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002266:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800226a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a37      	ldr	r2, [pc, #220]	; (8002350 <HAL_DMA_Start_IT+0x474>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d04a      	beq.n	800230c <HAL_DMA_Start_IT+0x430>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a36      	ldr	r2, [pc, #216]	; (8002354 <HAL_DMA_Start_IT+0x478>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d045      	beq.n	800230c <HAL_DMA_Start_IT+0x430>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a34      	ldr	r2, [pc, #208]	; (8002358 <HAL_DMA_Start_IT+0x47c>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d040      	beq.n	800230c <HAL_DMA_Start_IT+0x430>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a33      	ldr	r2, [pc, #204]	; (800235c <HAL_DMA_Start_IT+0x480>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d03b      	beq.n	800230c <HAL_DMA_Start_IT+0x430>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a31      	ldr	r2, [pc, #196]	; (8002360 <HAL_DMA_Start_IT+0x484>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d036      	beq.n	800230c <HAL_DMA_Start_IT+0x430>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a30      	ldr	r2, [pc, #192]	; (8002364 <HAL_DMA_Start_IT+0x488>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d031      	beq.n	800230c <HAL_DMA_Start_IT+0x430>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a2e      	ldr	r2, [pc, #184]	; (8002368 <HAL_DMA_Start_IT+0x48c>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d02c      	beq.n	800230c <HAL_DMA_Start_IT+0x430>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a2d      	ldr	r2, [pc, #180]	; (800236c <HAL_DMA_Start_IT+0x490>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d027      	beq.n	800230c <HAL_DMA_Start_IT+0x430>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a2b      	ldr	r2, [pc, #172]	; (8002370 <HAL_DMA_Start_IT+0x494>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d022      	beq.n	800230c <HAL_DMA_Start_IT+0x430>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a2a      	ldr	r2, [pc, #168]	; (8002374 <HAL_DMA_Start_IT+0x498>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d01d      	beq.n	800230c <HAL_DMA_Start_IT+0x430>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a28      	ldr	r2, [pc, #160]	; (8002378 <HAL_DMA_Start_IT+0x49c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d018      	beq.n	800230c <HAL_DMA_Start_IT+0x430>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a27      	ldr	r2, [pc, #156]	; (800237c <HAL_DMA_Start_IT+0x4a0>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d013      	beq.n	800230c <HAL_DMA_Start_IT+0x430>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a25      	ldr	r2, [pc, #148]	; (8002380 <HAL_DMA_Start_IT+0x4a4>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d00e      	beq.n	800230c <HAL_DMA_Start_IT+0x430>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a24      	ldr	r2, [pc, #144]	; (8002384 <HAL_DMA_Start_IT+0x4a8>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d009      	beq.n	800230c <HAL_DMA_Start_IT+0x430>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a22      	ldr	r2, [pc, #136]	; (8002388 <HAL_DMA_Start_IT+0x4ac>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d004      	beq.n	800230c <HAL_DMA_Start_IT+0x430>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a21      	ldr	r2, [pc, #132]	; (800238c <HAL_DMA_Start_IT+0x4b0>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d108      	bne.n	800231e <HAL_DMA_Start_IT+0x442>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f042 0201 	orr.w	r2, r2, #1
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	e012      	b.n	8002344 <HAL_DMA_Start_IT+0x468>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f042 0201 	orr.w	r2, r2, #1
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	e009      	b.n	8002344 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800233e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002344:	7dfb      	ldrb	r3, [r7, #23]
}
 8002346:	4618      	mov	r0, r3
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40020010 	.word	0x40020010
 8002354:	40020028 	.word	0x40020028
 8002358:	40020040 	.word	0x40020040
 800235c:	40020058 	.word	0x40020058
 8002360:	40020070 	.word	0x40020070
 8002364:	40020088 	.word	0x40020088
 8002368:	400200a0 	.word	0x400200a0
 800236c:	400200b8 	.word	0x400200b8
 8002370:	40020410 	.word	0x40020410
 8002374:	40020428 	.word	0x40020428
 8002378:	40020440 	.word	0x40020440
 800237c:	40020458 	.word	0x40020458
 8002380:	40020470 	.word	0x40020470
 8002384:	40020488 	.word	0x40020488
 8002388:	400204a0 	.word	0x400204a0
 800238c:	400204b8 	.word	0x400204b8
 8002390:	58025408 	.word	0x58025408
 8002394:	5802541c 	.word	0x5802541c
 8002398:	58025430 	.word	0x58025430
 800239c:	58025444 	.word	0x58025444
 80023a0:	58025458 	.word	0x58025458
 80023a4:	5802546c 	.word	0x5802546c
 80023a8:	58025480 	.word	0x58025480
 80023ac:	58025494 	.word	0x58025494

080023b0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08a      	sub	sp, #40	; 0x28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80023b8:	2300      	movs	r3, #0
 80023ba:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80023bc:	4b67      	ldr	r3, [pc, #412]	; (800255c <HAL_DMA_IRQHandler+0x1ac>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a67      	ldr	r2, [pc, #412]	; (8002560 <HAL_DMA_IRQHandler+0x1b0>)
 80023c2:	fba2 2303 	umull	r2, r3, r2, r3
 80023c6:	0a9b      	lsrs	r3, r3, #10
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ce:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80023d6:	6a3b      	ldr	r3, [r7, #32]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a5f      	ldr	r2, [pc, #380]	; (8002564 <HAL_DMA_IRQHandler+0x1b4>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d04a      	beq.n	8002482 <HAL_DMA_IRQHandler+0xd2>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a5d      	ldr	r2, [pc, #372]	; (8002568 <HAL_DMA_IRQHandler+0x1b8>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d045      	beq.n	8002482 <HAL_DMA_IRQHandler+0xd2>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a5c      	ldr	r2, [pc, #368]	; (800256c <HAL_DMA_IRQHandler+0x1bc>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d040      	beq.n	8002482 <HAL_DMA_IRQHandler+0xd2>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a5a      	ldr	r2, [pc, #360]	; (8002570 <HAL_DMA_IRQHandler+0x1c0>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d03b      	beq.n	8002482 <HAL_DMA_IRQHandler+0xd2>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a59      	ldr	r2, [pc, #356]	; (8002574 <HAL_DMA_IRQHandler+0x1c4>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d036      	beq.n	8002482 <HAL_DMA_IRQHandler+0xd2>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a57      	ldr	r2, [pc, #348]	; (8002578 <HAL_DMA_IRQHandler+0x1c8>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d031      	beq.n	8002482 <HAL_DMA_IRQHandler+0xd2>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a56      	ldr	r2, [pc, #344]	; (800257c <HAL_DMA_IRQHandler+0x1cc>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d02c      	beq.n	8002482 <HAL_DMA_IRQHandler+0xd2>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a54      	ldr	r2, [pc, #336]	; (8002580 <HAL_DMA_IRQHandler+0x1d0>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d027      	beq.n	8002482 <HAL_DMA_IRQHandler+0xd2>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a53      	ldr	r2, [pc, #332]	; (8002584 <HAL_DMA_IRQHandler+0x1d4>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d022      	beq.n	8002482 <HAL_DMA_IRQHandler+0xd2>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a51      	ldr	r2, [pc, #324]	; (8002588 <HAL_DMA_IRQHandler+0x1d8>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d01d      	beq.n	8002482 <HAL_DMA_IRQHandler+0xd2>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a50      	ldr	r2, [pc, #320]	; (800258c <HAL_DMA_IRQHandler+0x1dc>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d018      	beq.n	8002482 <HAL_DMA_IRQHandler+0xd2>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a4e      	ldr	r2, [pc, #312]	; (8002590 <HAL_DMA_IRQHandler+0x1e0>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d013      	beq.n	8002482 <HAL_DMA_IRQHandler+0xd2>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a4d      	ldr	r2, [pc, #308]	; (8002594 <HAL_DMA_IRQHandler+0x1e4>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d00e      	beq.n	8002482 <HAL_DMA_IRQHandler+0xd2>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a4b      	ldr	r2, [pc, #300]	; (8002598 <HAL_DMA_IRQHandler+0x1e8>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d009      	beq.n	8002482 <HAL_DMA_IRQHandler+0xd2>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a4a      	ldr	r2, [pc, #296]	; (800259c <HAL_DMA_IRQHandler+0x1ec>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d004      	beq.n	8002482 <HAL_DMA_IRQHandler+0xd2>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a48      	ldr	r2, [pc, #288]	; (80025a0 <HAL_DMA_IRQHandler+0x1f0>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d101      	bne.n	8002486 <HAL_DMA_IRQHandler+0xd6>
 8002482:	2301      	movs	r3, #1
 8002484:	e000      	b.n	8002488 <HAL_DMA_IRQHandler+0xd8>
 8002486:	2300      	movs	r3, #0
 8002488:	2b00      	cmp	r3, #0
 800248a:	f000 842b 	beq.w	8002ce4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002492:	f003 031f 	and.w	r3, r3, #31
 8002496:	2208      	movs	r2, #8
 8002498:	409a      	lsls	r2, r3
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	4013      	ands	r3, r2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 80a2 	beq.w	80025e8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a2e      	ldr	r2, [pc, #184]	; (8002564 <HAL_DMA_IRQHandler+0x1b4>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d04a      	beq.n	8002544 <HAL_DMA_IRQHandler+0x194>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a2d      	ldr	r2, [pc, #180]	; (8002568 <HAL_DMA_IRQHandler+0x1b8>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d045      	beq.n	8002544 <HAL_DMA_IRQHandler+0x194>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a2b      	ldr	r2, [pc, #172]	; (800256c <HAL_DMA_IRQHandler+0x1bc>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d040      	beq.n	8002544 <HAL_DMA_IRQHandler+0x194>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a2a      	ldr	r2, [pc, #168]	; (8002570 <HAL_DMA_IRQHandler+0x1c0>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d03b      	beq.n	8002544 <HAL_DMA_IRQHandler+0x194>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a28      	ldr	r2, [pc, #160]	; (8002574 <HAL_DMA_IRQHandler+0x1c4>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d036      	beq.n	8002544 <HAL_DMA_IRQHandler+0x194>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a27      	ldr	r2, [pc, #156]	; (8002578 <HAL_DMA_IRQHandler+0x1c8>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d031      	beq.n	8002544 <HAL_DMA_IRQHandler+0x194>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a25      	ldr	r2, [pc, #148]	; (800257c <HAL_DMA_IRQHandler+0x1cc>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d02c      	beq.n	8002544 <HAL_DMA_IRQHandler+0x194>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a24      	ldr	r2, [pc, #144]	; (8002580 <HAL_DMA_IRQHandler+0x1d0>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d027      	beq.n	8002544 <HAL_DMA_IRQHandler+0x194>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a22      	ldr	r2, [pc, #136]	; (8002584 <HAL_DMA_IRQHandler+0x1d4>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d022      	beq.n	8002544 <HAL_DMA_IRQHandler+0x194>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a21      	ldr	r2, [pc, #132]	; (8002588 <HAL_DMA_IRQHandler+0x1d8>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d01d      	beq.n	8002544 <HAL_DMA_IRQHandler+0x194>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a1f      	ldr	r2, [pc, #124]	; (800258c <HAL_DMA_IRQHandler+0x1dc>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d018      	beq.n	8002544 <HAL_DMA_IRQHandler+0x194>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a1e      	ldr	r2, [pc, #120]	; (8002590 <HAL_DMA_IRQHandler+0x1e0>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d013      	beq.n	8002544 <HAL_DMA_IRQHandler+0x194>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a1c      	ldr	r2, [pc, #112]	; (8002594 <HAL_DMA_IRQHandler+0x1e4>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d00e      	beq.n	8002544 <HAL_DMA_IRQHandler+0x194>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a1b      	ldr	r2, [pc, #108]	; (8002598 <HAL_DMA_IRQHandler+0x1e8>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d009      	beq.n	8002544 <HAL_DMA_IRQHandler+0x194>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a19      	ldr	r2, [pc, #100]	; (800259c <HAL_DMA_IRQHandler+0x1ec>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d004      	beq.n	8002544 <HAL_DMA_IRQHandler+0x194>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a18      	ldr	r2, [pc, #96]	; (80025a0 <HAL_DMA_IRQHandler+0x1f0>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d12f      	bne.n	80025a4 <HAL_DMA_IRQHandler+0x1f4>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	bf14      	ite	ne
 8002552:	2301      	movne	r3, #1
 8002554:	2300      	moveq	r3, #0
 8002556:	b2db      	uxtb	r3, r3
 8002558:	e02e      	b.n	80025b8 <HAL_DMA_IRQHandler+0x208>
 800255a:	bf00      	nop
 800255c:	24000000 	.word	0x24000000
 8002560:	1b4e81b5 	.word	0x1b4e81b5
 8002564:	40020010 	.word	0x40020010
 8002568:	40020028 	.word	0x40020028
 800256c:	40020040 	.word	0x40020040
 8002570:	40020058 	.word	0x40020058
 8002574:	40020070 	.word	0x40020070
 8002578:	40020088 	.word	0x40020088
 800257c:	400200a0 	.word	0x400200a0
 8002580:	400200b8 	.word	0x400200b8
 8002584:	40020410 	.word	0x40020410
 8002588:	40020428 	.word	0x40020428
 800258c:	40020440 	.word	0x40020440
 8002590:	40020458 	.word	0x40020458
 8002594:	40020470 	.word	0x40020470
 8002598:	40020488 	.word	0x40020488
 800259c:	400204a0 	.word	0x400204a0
 80025a0:	400204b8 	.word	0x400204b8
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0308 	and.w	r3, r3, #8
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	bf14      	ite	ne
 80025b2:	2301      	movne	r3, #1
 80025b4:	2300      	moveq	r3, #0
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d015      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 0204 	bic.w	r2, r2, #4
 80025ca:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d0:	f003 031f 	and.w	r3, r3, #31
 80025d4:	2208      	movs	r2, #8
 80025d6:	409a      	lsls	r2, r3
 80025d8:	6a3b      	ldr	r3, [r7, #32]
 80025da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e0:	f043 0201 	orr.w	r2, r3, #1
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ec:	f003 031f 	and.w	r3, r3, #31
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	fa22 f303 	lsr.w	r3, r2, r3
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d06e      	beq.n	80026dc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a69      	ldr	r2, [pc, #420]	; (80027a8 <HAL_DMA_IRQHandler+0x3f8>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d04a      	beq.n	800269e <HAL_DMA_IRQHandler+0x2ee>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a67      	ldr	r2, [pc, #412]	; (80027ac <HAL_DMA_IRQHandler+0x3fc>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d045      	beq.n	800269e <HAL_DMA_IRQHandler+0x2ee>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a66      	ldr	r2, [pc, #408]	; (80027b0 <HAL_DMA_IRQHandler+0x400>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d040      	beq.n	800269e <HAL_DMA_IRQHandler+0x2ee>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a64      	ldr	r2, [pc, #400]	; (80027b4 <HAL_DMA_IRQHandler+0x404>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d03b      	beq.n	800269e <HAL_DMA_IRQHandler+0x2ee>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a63      	ldr	r2, [pc, #396]	; (80027b8 <HAL_DMA_IRQHandler+0x408>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d036      	beq.n	800269e <HAL_DMA_IRQHandler+0x2ee>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a61      	ldr	r2, [pc, #388]	; (80027bc <HAL_DMA_IRQHandler+0x40c>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d031      	beq.n	800269e <HAL_DMA_IRQHandler+0x2ee>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a60      	ldr	r2, [pc, #384]	; (80027c0 <HAL_DMA_IRQHandler+0x410>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d02c      	beq.n	800269e <HAL_DMA_IRQHandler+0x2ee>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a5e      	ldr	r2, [pc, #376]	; (80027c4 <HAL_DMA_IRQHandler+0x414>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d027      	beq.n	800269e <HAL_DMA_IRQHandler+0x2ee>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a5d      	ldr	r2, [pc, #372]	; (80027c8 <HAL_DMA_IRQHandler+0x418>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d022      	beq.n	800269e <HAL_DMA_IRQHandler+0x2ee>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a5b      	ldr	r2, [pc, #364]	; (80027cc <HAL_DMA_IRQHandler+0x41c>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d01d      	beq.n	800269e <HAL_DMA_IRQHandler+0x2ee>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a5a      	ldr	r2, [pc, #360]	; (80027d0 <HAL_DMA_IRQHandler+0x420>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d018      	beq.n	800269e <HAL_DMA_IRQHandler+0x2ee>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a58      	ldr	r2, [pc, #352]	; (80027d4 <HAL_DMA_IRQHandler+0x424>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d013      	beq.n	800269e <HAL_DMA_IRQHandler+0x2ee>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a57      	ldr	r2, [pc, #348]	; (80027d8 <HAL_DMA_IRQHandler+0x428>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d00e      	beq.n	800269e <HAL_DMA_IRQHandler+0x2ee>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a55      	ldr	r2, [pc, #340]	; (80027dc <HAL_DMA_IRQHandler+0x42c>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d009      	beq.n	800269e <HAL_DMA_IRQHandler+0x2ee>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a54      	ldr	r2, [pc, #336]	; (80027e0 <HAL_DMA_IRQHandler+0x430>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d004      	beq.n	800269e <HAL_DMA_IRQHandler+0x2ee>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a52      	ldr	r2, [pc, #328]	; (80027e4 <HAL_DMA_IRQHandler+0x434>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d10a      	bne.n	80026b4 <HAL_DMA_IRQHandler+0x304>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	bf14      	ite	ne
 80026ac:	2301      	movne	r3, #1
 80026ae:	2300      	moveq	r3, #0
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	e003      	b.n	80026bc <HAL_DMA_IRQHandler+0x30c>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2300      	movs	r3, #0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00d      	beq.n	80026dc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c4:	f003 031f 	and.w	r3, r3, #31
 80026c8:	2201      	movs	r2, #1
 80026ca:	409a      	lsls	r2, r3
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d4:	f043 0202 	orr.w	r2, r3, #2
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e0:	f003 031f 	and.w	r3, r3, #31
 80026e4:	2204      	movs	r2, #4
 80026e6:	409a      	lsls	r2, r3
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	4013      	ands	r3, r2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f000 808f 	beq.w	8002810 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a2c      	ldr	r2, [pc, #176]	; (80027a8 <HAL_DMA_IRQHandler+0x3f8>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d04a      	beq.n	8002792 <HAL_DMA_IRQHandler+0x3e2>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a2a      	ldr	r2, [pc, #168]	; (80027ac <HAL_DMA_IRQHandler+0x3fc>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d045      	beq.n	8002792 <HAL_DMA_IRQHandler+0x3e2>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a29      	ldr	r2, [pc, #164]	; (80027b0 <HAL_DMA_IRQHandler+0x400>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d040      	beq.n	8002792 <HAL_DMA_IRQHandler+0x3e2>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a27      	ldr	r2, [pc, #156]	; (80027b4 <HAL_DMA_IRQHandler+0x404>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d03b      	beq.n	8002792 <HAL_DMA_IRQHandler+0x3e2>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a26      	ldr	r2, [pc, #152]	; (80027b8 <HAL_DMA_IRQHandler+0x408>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d036      	beq.n	8002792 <HAL_DMA_IRQHandler+0x3e2>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a24      	ldr	r2, [pc, #144]	; (80027bc <HAL_DMA_IRQHandler+0x40c>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d031      	beq.n	8002792 <HAL_DMA_IRQHandler+0x3e2>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a23      	ldr	r2, [pc, #140]	; (80027c0 <HAL_DMA_IRQHandler+0x410>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d02c      	beq.n	8002792 <HAL_DMA_IRQHandler+0x3e2>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a21      	ldr	r2, [pc, #132]	; (80027c4 <HAL_DMA_IRQHandler+0x414>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d027      	beq.n	8002792 <HAL_DMA_IRQHandler+0x3e2>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a20      	ldr	r2, [pc, #128]	; (80027c8 <HAL_DMA_IRQHandler+0x418>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d022      	beq.n	8002792 <HAL_DMA_IRQHandler+0x3e2>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a1e      	ldr	r2, [pc, #120]	; (80027cc <HAL_DMA_IRQHandler+0x41c>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d01d      	beq.n	8002792 <HAL_DMA_IRQHandler+0x3e2>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a1d      	ldr	r2, [pc, #116]	; (80027d0 <HAL_DMA_IRQHandler+0x420>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d018      	beq.n	8002792 <HAL_DMA_IRQHandler+0x3e2>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a1b      	ldr	r2, [pc, #108]	; (80027d4 <HAL_DMA_IRQHandler+0x424>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d013      	beq.n	8002792 <HAL_DMA_IRQHandler+0x3e2>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a1a      	ldr	r2, [pc, #104]	; (80027d8 <HAL_DMA_IRQHandler+0x428>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d00e      	beq.n	8002792 <HAL_DMA_IRQHandler+0x3e2>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a18      	ldr	r2, [pc, #96]	; (80027dc <HAL_DMA_IRQHandler+0x42c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d009      	beq.n	8002792 <HAL_DMA_IRQHandler+0x3e2>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a17      	ldr	r2, [pc, #92]	; (80027e0 <HAL_DMA_IRQHandler+0x430>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d004      	beq.n	8002792 <HAL_DMA_IRQHandler+0x3e2>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a15      	ldr	r2, [pc, #84]	; (80027e4 <HAL_DMA_IRQHandler+0x434>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d12a      	bne.n	80027e8 <HAL_DMA_IRQHandler+0x438>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	bf14      	ite	ne
 80027a0:	2301      	movne	r3, #1
 80027a2:	2300      	moveq	r3, #0
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	e023      	b.n	80027f0 <HAL_DMA_IRQHandler+0x440>
 80027a8:	40020010 	.word	0x40020010
 80027ac:	40020028 	.word	0x40020028
 80027b0:	40020040 	.word	0x40020040
 80027b4:	40020058 	.word	0x40020058
 80027b8:	40020070 	.word	0x40020070
 80027bc:	40020088 	.word	0x40020088
 80027c0:	400200a0 	.word	0x400200a0
 80027c4:	400200b8 	.word	0x400200b8
 80027c8:	40020410 	.word	0x40020410
 80027cc:	40020428 	.word	0x40020428
 80027d0:	40020440 	.word	0x40020440
 80027d4:	40020458 	.word	0x40020458
 80027d8:	40020470 	.word	0x40020470
 80027dc:	40020488 	.word	0x40020488
 80027e0:	400204a0 	.word	0x400204a0
 80027e4:	400204b8 	.word	0x400204b8
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2300      	movs	r3, #0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00d      	beq.n	8002810 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f8:	f003 031f 	and.w	r3, r3, #31
 80027fc:	2204      	movs	r2, #4
 80027fe:	409a      	lsls	r2, r3
 8002800:	6a3b      	ldr	r3, [r7, #32]
 8002802:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002808:	f043 0204 	orr.w	r2, r3, #4
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002814:	f003 031f 	and.w	r3, r3, #31
 8002818:	2210      	movs	r2, #16
 800281a:	409a      	lsls	r2, r3
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	4013      	ands	r3, r2
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 80a6 	beq.w	8002972 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a85      	ldr	r2, [pc, #532]	; (8002a40 <HAL_DMA_IRQHandler+0x690>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d04a      	beq.n	80028c6 <HAL_DMA_IRQHandler+0x516>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a83      	ldr	r2, [pc, #524]	; (8002a44 <HAL_DMA_IRQHandler+0x694>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d045      	beq.n	80028c6 <HAL_DMA_IRQHandler+0x516>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a82      	ldr	r2, [pc, #520]	; (8002a48 <HAL_DMA_IRQHandler+0x698>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d040      	beq.n	80028c6 <HAL_DMA_IRQHandler+0x516>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a80      	ldr	r2, [pc, #512]	; (8002a4c <HAL_DMA_IRQHandler+0x69c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d03b      	beq.n	80028c6 <HAL_DMA_IRQHandler+0x516>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a7f      	ldr	r2, [pc, #508]	; (8002a50 <HAL_DMA_IRQHandler+0x6a0>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d036      	beq.n	80028c6 <HAL_DMA_IRQHandler+0x516>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a7d      	ldr	r2, [pc, #500]	; (8002a54 <HAL_DMA_IRQHandler+0x6a4>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d031      	beq.n	80028c6 <HAL_DMA_IRQHandler+0x516>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a7c      	ldr	r2, [pc, #496]	; (8002a58 <HAL_DMA_IRQHandler+0x6a8>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d02c      	beq.n	80028c6 <HAL_DMA_IRQHandler+0x516>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a7a      	ldr	r2, [pc, #488]	; (8002a5c <HAL_DMA_IRQHandler+0x6ac>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d027      	beq.n	80028c6 <HAL_DMA_IRQHandler+0x516>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a79      	ldr	r2, [pc, #484]	; (8002a60 <HAL_DMA_IRQHandler+0x6b0>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d022      	beq.n	80028c6 <HAL_DMA_IRQHandler+0x516>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a77      	ldr	r2, [pc, #476]	; (8002a64 <HAL_DMA_IRQHandler+0x6b4>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d01d      	beq.n	80028c6 <HAL_DMA_IRQHandler+0x516>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a76      	ldr	r2, [pc, #472]	; (8002a68 <HAL_DMA_IRQHandler+0x6b8>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d018      	beq.n	80028c6 <HAL_DMA_IRQHandler+0x516>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a74      	ldr	r2, [pc, #464]	; (8002a6c <HAL_DMA_IRQHandler+0x6bc>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d013      	beq.n	80028c6 <HAL_DMA_IRQHandler+0x516>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a73      	ldr	r2, [pc, #460]	; (8002a70 <HAL_DMA_IRQHandler+0x6c0>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d00e      	beq.n	80028c6 <HAL_DMA_IRQHandler+0x516>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a71      	ldr	r2, [pc, #452]	; (8002a74 <HAL_DMA_IRQHandler+0x6c4>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d009      	beq.n	80028c6 <HAL_DMA_IRQHandler+0x516>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a70      	ldr	r2, [pc, #448]	; (8002a78 <HAL_DMA_IRQHandler+0x6c8>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d004      	beq.n	80028c6 <HAL_DMA_IRQHandler+0x516>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a6e      	ldr	r2, [pc, #440]	; (8002a7c <HAL_DMA_IRQHandler+0x6cc>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d10a      	bne.n	80028dc <HAL_DMA_IRQHandler+0x52c>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0308 	and.w	r3, r3, #8
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	bf14      	ite	ne
 80028d4:	2301      	movne	r3, #1
 80028d6:	2300      	moveq	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	e009      	b.n	80028f0 <HAL_DMA_IRQHandler+0x540>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0304 	and.w	r3, r3, #4
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	bf14      	ite	ne
 80028ea:	2301      	movne	r3, #1
 80028ec:	2300      	moveq	r3, #0
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d03e      	beq.n	8002972 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f8:	f003 031f 	and.w	r3, r3, #31
 80028fc:	2210      	movs	r2, #16
 80028fe:	409a      	lsls	r2, r3
 8002900:	6a3b      	ldr	r3, [r7, #32]
 8002902:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d018      	beq.n	8002944 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d108      	bne.n	8002932 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	2b00      	cmp	r3, #0
 8002926:	d024      	beq.n	8002972 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	4798      	blx	r3
 8002930:	e01f      	b.n	8002972 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002936:	2b00      	cmp	r3, #0
 8002938:	d01b      	beq.n	8002972 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	4798      	blx	r3
 8002942:	e016      	b.n	8002972 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294e:	2b00      	cmp	r3, #0
 8002950:	d107      	bne.n	8002962 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 0208 	bic.w	r2, r2, #8
 8002960:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002976:	f003 031f 	and.w	r3, r3, #31
 800297a:	2220      	movs	r2, #32
 800297c:	409a      	lsls	r2, r3
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	4013      	ands	r3, r2
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 8110 	beq.w	8002ba8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a2c      	ldr	r2, [pc, #176]	; (8002a40 <HAL_DMA_IRQHandler+0x690>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d04a      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x678>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a2b      	ldr	r2, [pc, #172]	; (8002a44 <HAL_DMA_IRQHandler+0x694>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d045      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x678>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a29      	ldr	r2, [pc, #164]	; (8002a48 <HAL_DMA_IRQHandler+0x698>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d040      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x678>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a28      	ldr	r2, [pc, #160]	; (8002a4c <HAL_DMA_IRQHandler+0x69c>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d03b      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x678>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a26      	ldr	r2, [pc, #152]	; (8002a50 <HAL_DMA_IRQHandler+0x6a0>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d036      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x678>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a25      	ldr	r2, [pc, #148]	; (8002a54 <HAL_DMA_IRQHandler+0x6a4>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d031      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x678>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a23      	ldr	r2, [pc, #140]	; (8002a58 <HAL_DMA_IRQHandler+0x6a8>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d02c      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x678>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a22      	ldr	r2, [pc, #136]	; (8002a5c <HAL_DMA_IRQHandler+0x6ac>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d027      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x678>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a20      	ldr	r2, [pc, #128]	; (8002a60 <HAL_DMA_IRQHandler+0x6b0>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d022      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x678>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a1f      	ldr	r2, [pc, #124]	; (8002a64 <HAL_DMA_IRQHandler+0x6b4>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d01d      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x678>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a1d      	ldr	r2, [pc, #116]	; (8002a68 <HAL_DMA_IRQHandler+0x6b8>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d018      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x678>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a1c      	ldr	r2, [pc, #112]	; (8002a6c <HAL_DMA_IRQHandler+0x6bc>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d013      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x678>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a1a      	ldr	r2, [pc, #104]	; (8002a70 <HAL_DMA_IRQHandler+0x6c0>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d00e      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x678>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a19      	ldr	r2, [pc, #100]	; (8002a74 <HAL_DMA_IRQHandler+0x6c4>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d009      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x678>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a17      	ldr	r2, [pc, #92]	; (8002a78 <HAL_DMA_IRQHandler+0x6c8>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d004      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x678>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a16      	ldr	r2, [pc, #88]	; (8002a7c <HAL_DMA_IRQHandler+0x6cc>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d12b      	bne.n	8002a80 <HAL_DMA_IRQHandler+0x6d0>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0310 	and.w	r3, r3, #16
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	bf14      	ite	ne
 8002a36:	2301      	movne	r3, #1
 8002a38:	2300      	moveq	r3, #0
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	e02a      	b.n	8002a94 <HAL_DMA_IRQHandler+0x6e4>
 8002a3e:	bf00      	nop
 8002a40:	40020010 	.word	0x40020010
 8002a44:	40020028 	.word	0x40020028
 8002a48:	40020040 	.word	0x40020040
 8002a4c:	40020058 	.word	0x40020058
 8002a50:	40020070 	.word	0x40020070
 8002a54:	40020088 	.word	0x40020088
 8002a58:	400200a0 	.word	0x400200a0
 8002a5c:	400200b8 	.word	0x400200b8
 8002a60:	40020410 	.word	0x40020410
 8002a64:	40020428 	.word	0x40020428
 8002a68:	40020440 	.word	0x40020440
 8002a6c:	40020458 	.word	0x40020458
 8002a70:	40020470 	.word	0x40020470
 8002a74:	40020488 	.word	0x40020488
 8002a78:	400204a0 	.word	0x400204a0
 8002a7c:	400204b8 	.word	0x400204b8
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	bf14      	ite	ne
 8002a8e:	2301      	movne	r3, #1
 8002a90:	2300      	moveq	r3, #0
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 8087 	beq.w	8002ba8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9e:	f003 031f 	and.w	r3, r3, #31
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	409a      	lsls	r2, r3
 8002aa6:	6a3b      	ldr	r3, [r7, #32]
 8002aa8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d139      	bne.n	8002b2a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 0216 	bic.w	r2, r2, #22
 8002ac4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	695a      	ldr	r2, [r3, #20]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ad4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d103      	bne.n	8002ae6 <HAL_DMA_IRQHandler+0x736>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d007      	beq.n	8002af6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0208 	bic.w	r2, r2, #8
 8002af4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afa:	f003 031f 	and.w	r3, r3, #31
 8002afe:	223f      	movs	r2, #63	; 0x3f
 8002b00:	409a      	lsls	r2, r3
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f000 834a 	beq.w	80031b4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	4798      	blx	r3
          }
          return;
 8002b28:	e344      	b.n	80031b4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d018      	beq.n	8002b6a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d108      	bne.n	8002b58 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d02c      	beq.n	8002ba8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	4798      	blx	r3
 8002b56:	e027      	b.n	8002ba8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d023      	beq.n	8002ba8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	4798      	blx	r3
 8002b68:	e01e      	b.n	8002ba8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10f      	bne.n	8002b98 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 0210 	bic.w	r2, r2, #16
 8002b86:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d003      	beq.n	8002ba8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 8306 	beq.w	80031be <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 8088 	beq.w	8002cd0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2204      	movs	r2, #4
 8002bc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a7a      	ldr	r2, [pc, #488]	; (8002db8 <HAL_DMA_IRQHandler+0xa08>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d04a      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x8b8>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a79      	ldr	r2, [pc, #484]	; (8002dbc <HAL_DMA_IRQHandler+0xa0c>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d045      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x8b8>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a77      	ldr	r2, [pc, #476]	; (8002dc0 <HAL_DMA_IRQHandler+0xa10>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d040      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x8b8>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a76      	ldr	r2, [pc, #472]	; (8002dc4 <HAL_DMA_IRQHandler+0xa14>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d03b      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x8b8>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a74      	ldr	r2, [pc, #464]	; (8002dc8 <HAL_DMA_IRQHandler+0xa18>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d036      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x8b8>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a73      	ldr	r2, [pc, #460]	; (8002dcc <HAL_DMA_IRQHandler+0xa1c>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d031      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x8b8>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a71      	ldr	r2, [pc, #452]	; (8002dd0 <HAL_DMA_IRQHandler+0xa20>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d02c      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x8b8>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a70      	ldr	r2, [pc, #448]	; (8002dd4 <HAL_DMA_IRQHandler+0xa24>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d027      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x8b8>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a6e      	ldr	r2, [pc, #440]	; (8002dd8 <HAL_DMA_IRQHandler+0xa28>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d022      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x8b8>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a6d      	ldr	r2, [pc, #436]	; (8002ddc <HAL_DMA_IRQHandler+0xa2c>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d01d      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x8b8>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a6b      	ldr	r2, [pc, #428]	; (8002de0 <HAL_DMA_IRQHandler+0xa30>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d018      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x8b8>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a6a      	ldr	r2, [pc, #424]	; (8002de4 <HAL_DMA_IRQHandler+0xa34>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d013      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x8b8>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a68      	ldr	r2, [pc, #416]	; (8002de8 <HAL_DMA_IRQHandler+0xa38>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d00e      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x8b8>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a67      	ldr	r2, [pc, #412]	; (8002dec <HAL_DMA_IRQHandler+0xa3c>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d009      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x8b8>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a65      	ldr	r2, [pc, #404]	; (8002df0 <HAL_DMA_IRQHandler+0xa40>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d004      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x8b8>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a64      	ldr	r2, [pc, #400]	; (8002df4 <HAL_DMA_IRQHandler+0xa44>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d108      	bne.n	8002c7a <HAL_DMA_IRQHandler+0x8ca>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 0201 	bic.w	r2, r2, #1
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	e007      	b.n	8002c8a <HAL_DMA_IRQHandler+0x8da>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 0201 	bic.w	r2, r2, #1
 8002c88:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d307      	bcc.n	8002ca6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1f2      	bne.n	8002c8a <HAL_DMA_IRQHandler+0x8da>
 8002ca4:	e000      	b.n	8002ca8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002ca6:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d004      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2203      	movs	r2, #3
 8002cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002cc6:	e003      	b.n	8002cd0 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 8272 	beq.w	80031be <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	4798      	blx	r3
 8002ce2:	e26c      	b.n	80031be <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a43      	ldr	r2, [pc, #268]	; (8002df8 <HAL_DMA_IRQHandler+0xa48>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d022      	beq.n	8002d34 <HAL_DMA_IRQHandler+0x984>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a42      	ldr	r2, [pc, #264]	; (8002dfc <HAL_DMA_IRQHandler+0xa4c>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d01d      	beq.n	8002d34 <HAL_DMA_IRQHandler+0x984>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a40      	ldr	r2, [pc, #256]	; (8002e00 <HAL_DMA_IRQHandler+0xa50>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d018      	beq.n	8002d34 <HAL_DMA_IRQHandler+0x984>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a3f      	ldr	r2, [pc, #252]	; (8002e04 <HAL_DMA_IRQHandler+0xa54>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d013      	beq.n	8002d34 <HAL_DMA_IRQHandler+0x984>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a3d      	ldr	r2, [pc, #244]	; (8002e08 <HAL_DMA_IRQHandler+0xa58>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d00e      	beq.n	8002d34 <HAL_DMA_IRQHandler+0x984>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a3c      	ldr	r2, [pc, #240]	; (8002e0c <HAL_DMA_IRQHandler+0xa5c>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d009      	beq.n	8002d34 <HAL_DMA_IRQHandler+0x984>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a3a      	ldr	r2, [pc, #232]	; (8002e10 <HAL_DMA_IRQHandler+0xa60>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d004      	beq.n	8002d34 <HAL_DMA_IRQHandler+0x984>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a39      	ldr	r2, [pc, #228]	; (8002e14 <HAL_DMA_IRQHandler+0xa64>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d101      	bne.n	8002d38 <HAL_DMA_IRQHandler+0x988>
 8002d34:	2301      	movs	r3, #1
 8002d36:	e000      	b.n	8002d3a <HAL_DMA_IRQHandler+0x98a>
 8002d38:	2300      	movs	r3, #0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 823f 	beq.w	80031be <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4c:	f003 031f 	and.w	r3, r3, #31
 8002d50:	2204      	movs	r2, #4
 8002d52:	409a      	lsls	r2, r3
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	4013      	ands	r3, r2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 80cd 	beq.w	8002ef8 <HAL_DMA_IRQHandler+0xb48>
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 80c7 	beq.w	8002ef8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d6e:	f003 031f 	and.w	r3, r3, #31
 8002d72:	2204      	movs	r2, #4
 8002d74:	409a      	lsls	r2, r3
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d049      	beq.n	8002e18 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d109      	bne.n	8002da2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f000 8210 	beq.w	80031b8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002da0:	e20a      	b.n	80031b8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f000 8206 	beq.w	80031b8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002db4:	e200      	b.n	80031b8 <HAL_DMA_IRQHandler+0xe08>
 8002db6:	bf00      	nop
 8002db8:	40020010 	.word	0x40020010
 8002dbc:	40020028 	.word	0x40020028
 8002dc0:	40020040 	.word	0x40020040
 8002dc4:	40020058 	.word	0x40020058
 8002dc8:	40020070 	.word	0x40020070
 8002dcc:	40020088 	.word	0x40020088
 8002dd0:	400200a0 	.word	0x400200a0
 8002dd4:	400200b8 	.word	0x400200b8
 8002dd8:	40020410 	.word	0x40020410
 8002ddc:	40020428 	.word	0x40020428
 8002de0:	40020440 	.word	0x40020440
 8002de4:	40020458 	.word	0x40020458
 8002de8:	40020470 	.word	0x40020470
 8002dec:	40020488 	.word	0x40020488
 8002df0:	400204a0 	.word	0x400204a0
 8002df4:	400204b8 	.word	0x400204b8
 8002df8:	58025408 	.word	0x58025408
 8002dfc:	5802541c 	.word	0x5802541c
 8002e00:	58025430 	.word	0x58025430
 8002e04:	58025444 	.word	0x58025444
 8002e08:	58025458 	.word	0x58025458
 8002e0c:	5802546c 	.word	0x5802546c
 8002e10:	58025480 	.word	0x58025480
 8002e14:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	f003 0320 	and.w	r3, r3, #32
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d160      	bne.n	8002ee4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a8c      	ldr	r2, [pc, #560]	; (8003058 <HAL_DMA_IRQHandler+0xca8>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d04a      	beq.n	8002ec2 <HAL_DMA_IRQHandler+0xb12>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a8a      	ldr	r2, [pc, #552]	; (800305c <HAL_DMA_IRQHandler+0xcac>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d045      	beq.n	8002ec2 <HAL_DMA_IRQHandler+0xb12>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a89      	ldr	r2, [pc, #548]	; (8003060 <HAL_DMA_IRQHandler+0xcb0>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d040      	beq.n	8002ec2 <HAL_DMA_IRQHandler+0xb12>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a87      	ldr	r2, [pc, #540]	; (8003064 <HAL_DMA_IRQHandler+0xcb4>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d03b      	beq.n	8002ec2 <HAL_DMA_IRQHandler+0xb12>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a86      	ldr	r2, [pc, #536]	; (8003068 <HAL_DMA_IRQHandler+0xcb8>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d036      	beq.n	8002ec2 <HAL_DMA_IRQHandler+0xb12>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a84      	ldr	r2, [pc, #528]	; (800306c <HAL_DMA_IRQHandler+0xcbc>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d031      	beq.n	8002ec2 <HAL_DMA_IRQHandler+0xb12>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a83      	ldr	r2, [pc, #524]	; (8003070 <HAL_DMA_IRQHandler+0xcc0>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d02c      	beq.n	8002ec2 <HAL_DMA_IRQHandler+0xb12>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a81      	ldr	r2, [pc, #516]	; (8003074 <HAL_DMA_IRQHandler+0xcc4>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d027      	beq.n	8002ec2 <HAL_DMA_IRQHandler+0xb12>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a80      	ldr	r2, [pc, #512]	; (8003078 <HAL_DMA_IRQHandler+0xcc8>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d022      	beq.n	8002ec2 <HAL_DMA_IRQHandler+0xb12>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a7e      	ldr	r2, [pc, #504]	; (800307c <HAL_DMA_IRQHandler+0xccc>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d01d      	beq.n	8002ec2 <HAL_DMA_IRQHandler+0xb12>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a7d      	ldr	r2, [pc, #500]	; (8003080 <HAL_DMA_IRQHandler+0xcd0>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d018      	beq.n	8002ec2 <HAL_DMA_IRQHandler+0xb12>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a7b      	ldr	r2, [pc, #492]	; (8003084 <HAL_DMA_IRQHandler+0xcd4>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d013      	beq.n	8002ec2 <HAL_DMA_IRQHandler+0xb12>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a7a      	ldr	r2, [pc, #488]	; (8003088 <HAL_DMA_IRQHandler+0xcd8>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d00e      	beq.n	8002ec2 <HAL_DMA_IRQHandler+0xb12>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a78      	ldr	r2, [pc, #480]	; (800308c <HAL_DMA_IRQHandler+0xcdc>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d009      	beq.n	8002ec2 <HAL_DMA_IRQHandler+0xb12>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a77      	ldr	r2, [pc, #476]	; (8003090 <HAL_DMA_IRQHandler+0xce0>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d004      	beq.n	8002ec2 <HAL_DMA_IRQHandler+0xb12>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a75      	ldr	r2, [pc, #468]	; (8003094 <HAL_DMA_IRQHandler+0xce4>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d108      	bne.n	8002ed4 <HAL_DMA_IRQHandler+0xb24>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0208 	bic.w	r2, r2, #8
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	e007      	b.n	8002ee4 <HAL_DMA_IRQHandler+0xb34>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 0204 	bic.w	r2, r2, #4
 8002ee2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 8165 	beq.w	80031b8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ef6:	e15f      	b.n	80031b8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efc:	f003 031f 	and.w	r3, r3, #31
 8002f00:	2202      	movs	r2, #2
 8002f02:	409a      	lsls	r2, r3
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	4013      	ands	r3, r2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 80c5 	beq.w	8003098 <HAL_DMA_IRQHandler+0xce8>
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 80bf 	beq.w	8003098 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1e:	f003 031f 	and.w	r3, r3, #31
 8002f22:	2202      	movs	r2, #2
 8002f24:	409a      	lsls	r2, r3
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d018      	beq.n	8002f66 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d109      	bne.n	8002f52 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f000 813a 	beq.w	80031bc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f50:	e134      	b.n	80031bc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 8130 	beq.w	80031bc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f64:	e12a      	b.n	80031bc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	f003 0320 	and.w	r3, r3, #32
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d168      	bne.n	8003042 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a38      	ldr	r2, [pc, #224]	; (8003058 <HAL_DMA_IRQHandler+0xca8>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d04a      	beq.n	8003010 <HAL_DMA_IRQHandler+0xc60>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a37      	ldr	r2, [pc, #220]	; (800305c <HAL_DMA_IRQHandler+0xcac>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d045      	beq.n	8003010 <HAL_DMA_IRQHandler+0xc60>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a35      	ldr	r2, [pc, #212]	; (8003060 <HAL_DMA_IRQHandler+0xcb0>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d040      	beq.n	8003010 <HAL_DMA_IRQHandler+0xc60>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a34      	ldr	r2, [pc, #208]	; (8003064 <HAL_DMA_IRQHandler+0xcb4>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d03b      	beq.n	8003010 <HAL_DMA_IRQHandler+0xc60>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a32      	ldr	r2, [pc, #200]	; (8003068 <HAL_DMA_IRQHandler+0xcb8>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d036      	beq.n	8003010 <HAL_DMA_IRQHandler+0xc60>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a31      	ldr	r2, [pc, #196]	; (800306c <HAL_DMA_IRQHandler+0xcbc>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d031      	beq.n	8003010 <HAL_DMA_IRQHandler+0xc60>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a2f      	ldr	r2, [pc, #188]	; (8003070 <HAL_DMA_IRQHandler+0xcc0>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d02c      	beq.n	8003010 <HAL_DMA_IRQHandler+0xc60>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a2e      	ldr	r2, [pc, #184]	; (8003074 <HAL_DMA_IRQHandler+0xcc4>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d027      	beq.n	8003010 <HAL_DMA_IRQHandler+0xc60>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a2c      	ldr	r2, [pc, #176]	; (8003078 <HAL_DMA_IRQHandler+0xcc8>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d022      	beq.n	8003010 <HAL_DMA_IRQHandler+0xc60>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a2b      	ldr	r2, [pc, #172]	; (800307c <HAL_DMA_IRQHandler+0xccc>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d01d      	beq.n	8003010 <HAL_DMA_IRQHandler+0xc60>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a29      	ldr	r2, [pc, #164]	; (8003080 <HAL_DMA_IRQHandler+0xcd0>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d018      	beq.n	8003010 <HAL_DMA_IRQHandler+0xc60>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a28      	ldr	r2, [pc, #160]	; (8003084 <HAL_DMA_IRQHandler+0xcd4>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d013      	beq.n	8003010 <HAL_DMA_IRQHandler+0xc60>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a26      	ldr	r2, [pc, #152]	; (8003088 <HAL_DMA_IRQHandler+0xcd8>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d00e      	beq.n	8003010 <HAL_DMA_IRQHandler+0xc60>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a25      	ldr	r2, [pc, #148]	; (800308c <HAL_DMA_IRQHandler+0xcdc>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d009      	beq.n	8003010 <HAL_DMA_IRQHandler+0xc60>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a23      	ldr	r2, [pc, #140]	; (8003090 <HAL_DMA_IRQHandler+0xce0>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d004      	beq.n	8003010 <HAL_DMA_IRQHandler+0xc60>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a22      	ldr	r2, [pc, #136]	; (8003094 <HAL_DMA_IRQHandler+0xce4>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d108      	bne.n	8003022 <HAL_DMA_IRQHandler+0xc72>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0214 	bic.w	r2, r2, #20
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	e007      	b.n	8003032 <HAL_DMA_IRQHandler+0xc82>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 020a 	bic.w	r2, r2, #10
 8003030:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003046:	2b00      	cmp	r3, #0
 8003048:	f000 80b8 	beq.w	80031bc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003054:	e0b2      	b.n	80031bc <HAL_DMA_IRQHandler+0xe0c>
 8003056:	bf00      	nop
 8003058:	40020010 	.word	0x40020010
 800305c:	40020028 	.word	0x40020028
 8003060:	40020040 	.word	0x40020040
 8003064:	40020058 	.word	0x40020058
 8003068:	40020070 	.word	0x40020070
 800306c:	40020088 	.word	0x40020088
 8003070:	400200a0 	.word	0x400200a0
 8003074:	400200b8 	.word	0x400200b8
 8003078:	40020410 	.word	0x40020410
 800307c:	40020428 	.word	0x40020428
 8003080:	40020440 	.word	0x40020440
 8003084:	40020458 	.word	0x40020458
 8003088:	40020470 	.word	0x40020470
 800308c:	40020488 	.word	0x40020488
 8003090:	400204a0 	.word	0x400204a0
 8003094:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800309c:	f003 031f 	and.w	r3, r3, #31
 80030a0:	2208      	movs	r2, #8
 80030a2:	409a      	lsls	r2, r3
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	4013      	ands	r3, r2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f000 8088 	beq.w	80031be <HAL_DMA_IRQHandler+0xe0e>
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	f003 0308 	and.w	r3, r3, #8
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 8082 	beq.w	80031be <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a41      	ldr	r2, [pc, #260]	; (80031c4 <HAL_DMA_IRQHandler+0xe14>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d04a      	beq.n	800315a <HAL_DMA_IRQHandler+0xdaa>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a3f      	ldr	r2, [pc, #252]	; (80031c8 <HAL_DMA_IRQHandler+0xe18>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d045      	beq.n	800315a <HAL_DMA_IRQHandler+0xdaa>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a3e      	ldr	r2, [pc, #248]	; (80031cc <HAL_DMA_IRQHandler+0xe1c>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d040      	beq.n	800315a <HAL_DMA_IRQHandler+0xdaa>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a3c      	ldr	r2, [pc, #240]	; (80031d0 <HAL_DMA_IRQHandler+0xe20>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d03b      	beq.n	800315a <HAL_DMA_IRQHandler+0xdaa>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a3b      	ldr	r2, [pc, #236]	; (80031d4 <HAL_DMA_IRQHandler+0xe24>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d036      	beq.n	800315a <HAL_DMA_IRQHandler+0xdaa>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a39      	ldr	r2, [pc, #228]	; (80031d8 <HAL_DMA_IRQHandler+0xe28>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d031      	beq.n	800315a <HAL_DMA_IRQHandler+0xdaa>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a38      	ldr	r2, [pc, #224]	; (80031dc <HAL_DMA_IRQHandler+0xe2c>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d02c      	beq.n	800315a <HAL_DMA_IRQHandler+0xdaa>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a36      	ldr	r2, [pc, #216]	; (80031e0 <HAL_DMA_IRQHandler+0xe30>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d027      	beq.n	800315a <HAL_DMA_IRQHandler+0xdaa>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a35      	ldr	r2, [pc, #212]	; (80031e4 <HAL_DMA_IRQHandler+0xe34>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d022      	beq.n	800315a <HAL_DMA_IRQHandler+0xdaa>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a33      	ldr	r2, [pc, #204]	; (80031e8 <HAL_DMA_IRQHandler+0xe38>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d01d      	beq.n	800315a <HAL_DMA_IRQHandler+0xdaa>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a32      	ldr	r2, [pc, #200]	; (80031ec <HAL_DMA_IRQHandler+0xe3c>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d018      	beq.n	800315a <HAL_DMA_IRQHandler+0xdaa>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a30      	ldr	r2, [pc, #192]	; (80031f0 <HAL_DMA_IRQHandler+0xe40>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d013      	beq.n	800315a <HAL_DMA_IRQHandler+0xdaa>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a2f      	ldr	r2, [pc, #188]	; (80031f4 <HAL_DMA_IRQHandler+0xe44>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d00e      	beq.n	800315a <HAL_DMA_IRQHandler+0xdaa>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a2d      	ldr	r2, [pc, #180]	; (80031f8 <HAL_DMA_IRQHandler+0xe48>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d009      	beq.n	800315a <HAL_DMA_IRQHandler+0xdaa>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a2c      	ldr	r2, [pc, #176]	; (80031fc <HAL_DMA_IRQHandler+0xe4c>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d004      	beq.n	800315a <HAL_DMA_IRQHandler+0xdaa>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a2a      	ldr	r2, [pc, #168]	; (8003200 <HAL_DMA_IRQHandler+0xe50>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d108      	bne.n	800316c <HAL_DMA_IRQHandler+0xdbc>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 021c 	bic.w	r2, r2, #28
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	e007      	b.n	800317c <HAL_DMA_IRQHandler+0xdcc>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 020e 	bic.w	r2, r2, #14
 800317a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003180:	f003 031f 	and.w	r3, r3, #31
 8003184:	2201      	movs	r2, #1
 8003186:	409a      	lsls	r2, r3
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d009      	beq.n	80031be <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	4798      	blx	r3
 80031b2:	e004      	b.n	80031be <HAL_DMA_IRQHandler+0xe0e>
          return;
 80031b4:	bf00      	nop
 80031b6:	e002      	b.n	80031be <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80031b8:	bf00      	nop
 80031ba:	e000      	b.n	80031be <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80031bc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80031be:	3728      	adds	r7, #40	; 0x28
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40020010 	.word	0x40020010
 80031c8:	40020028 	.word	0x40020028
 80031cc:	40020040 	.word	0x40020040
 80031d0:	40020058 	.word	0x40020058
 80031d4:	40020070 	.word	0x40020070
 80031d8:	40020088 	.word	0x40020088
 80031dc:	400200a0 	.word	0x400200a0
 80031e0:	400200b8 	.word	0x400200b8
 80031e4:	40020410 	.word	0x40020410
 80031e8:	40020428 	.word	0x40020428
 80031ec:	40020440 	.word	0x40020440
 80031f0:	40020458 	.word	0x40020458
 80031f4:	40020470 	.word	0x40020470
 80031f8:	40020488 	.word	0x40020488
 80031fc:	400204a0 	.word	0x400204a0
 8003200:	400204b8 	.word	0x400204b8

08003204 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003204:	b480      	push	{r7}
 8003206:	b087      	sub	sp, #28
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
 8003210:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003216:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a84      	ldr	r2, [pc, #528]	; (8003434 <DMA_SetConfig+0x230>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d072      	beq.n	800330e <DMA_SetConfig+0x10a>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a82      	ldr	r2, [pc, #520]	; (8003438 <DMA_SetConfig+0x234>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d06d      	beq.n	800330e <DMA_SetConfig+0x10a>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a81      	ldr	r2, [pc, #516]	; (800343c <DMA_SetConfig+0x238>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d068      	beq.n	800330e <DMA_SetConfig+0x10a>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a7f      	ldr	r2, [pc, #508]	; (8003440 <DMA_SetConfig+0x23c>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d063      	beq.n	800330e <DMA_SetConfig+0x10a>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a7e      	ldr	r2, [pc, #504]	; (8003444 <DMA_SetConfig+0x240>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d05e      	beq.n	800330e <DMA_SetConfig+0x10a>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a7c      	ldr	r2, [pc, #496]	; (8003448 <DMA_SetConfig+0x244>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d059      	beq.n	800330e <DMA_SetConfig+0x10a>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a7b      	ldr	r2, [pc, #492]	; (800344c <DMA_SetConfig+0x248>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d054      	beq.n	800330e <DMA_SetConfig+0x10a>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a79      	ldr	r2, [pc, #484]	; (8003450 <DMA_SetConfig+0x24c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d04f      	beq.n	800330e <DMA_SetConfig+0x10a>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a78      	ldr	r2, [pc, #480]	; (8003454 <DMA_SetConfig+0x250>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d04a      	beq.n	800330e <DMA_SetConfig+0x10a>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a76      	ldr	r2, [pc, #472]	; (8003458 <DMA_SetConfig+0x254>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d045      	beq.n	800330e <DMA_SetConfig+0x10a>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a75      	ldr	r2, [pc, #468]	; (800345c <DMA_SetConfig+0x258>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d040      	beq.n	800330e <DMA_SetConfig+0x10a>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a73      	ldr	r2, [pc, #460]	; (8003460 <DMA_SetConfig+0x25c>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d03b      	beq.n	800330e <DMA_SetConfig+0x10a>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a72      	ldr	r2, [pc, #456]	; (8003464 <DMA_SetConfig+0x260>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d036      	beq.n	800330e <DMA_SetConfig+0x10a>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a70      	ldr	r2, [pc, #448]	; (8003468 <DMA_SetConfig+0x264>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d031      	beq.n	800330e <DMA_SetConfig+0x10a>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a6f      	ldr	r2, [pc, #444]	; (800346c <DMA_SetConfig+0x268>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d02c      	beq.n	800330e <DMA_SetConfig+0x10a>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a6d      	ldr	r2, [pc, #436]	; (8003470 <DMA_SetConfig+0x26c>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d027      	beq.n	800330e <DMA_SetConfig+0x10a>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a6c      	ldr	r2, [pc, #432]	; (8003474 <DMA_SetConfig+0x270>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d022      	beq.n	800330e <DMA_SetConfig+0x10a>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a6a      	ldr	r2, [pc, #424]	; (8003478 <DMA_SetConfig+0x274>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d01d      	beq.n	800330e <DMA_SetConfig+0x10a>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a69      	ldr	r2, [pc, #420]	; (800347c <DMA_SetConfig+0x278>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d018      	beq.n	800330e <DMA_SetConfig+0x10a>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a67      	ldr	r2, [pc, #412]	; (8003480 <DMA_SetConfig+0x27c>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d013      	beq.n	800330e <DMA_SetConfig+0x10a>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a66      	ldr	r2, [pc, #408]	; (8003484 <DMA_SetConfig+0x280>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d00e      	beq.n	800330e <DMA_SetConfig+0x10a>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a64      	ldr	r2, [pc, #400]	; (8003488 <DMA_SetConfig+0x284>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d009      	beq.n	800330e <DMA_SetConfig+0x10a>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a63      	ldr	r2, [pc, #396]	; (800348c <DMA_SetConfig+0x288>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d004      	beq.n	800330e <DMA_SetConfig+0x10a>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a61      	ldr	r2, [pc, #388]	; (8003490 <DMA_SetConfig+0x28c>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d101      	bne.n	8003312 <DMA_SetConfig+0x10e>
 800330e:	2301      	movs	r3, #1
 8003310:	e000      	b.n	8003314 <DMA_SetConfig+0x110>
 8003312:	2300      	movs	r3, #0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00d      	beq.n	8003334 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003320:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003326:	2b00      	cmp	r3, #0
 8003328:	d004      	beq.n	8003334 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003332:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a3e      	ldr	r2, [pc, #248]	; (8003434 <DMA_SetConfig+0x230>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d04a      	beq.n	80033d4 <DMA_SetConfig+0x1d0>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a3d      	ldr	r2, [pc, #244]	; (8003438 <DMA_SetConfig+0x234>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d045      	beq.n	80033d4 <DMA_SetConfig+0x1d0>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a3b      	ldr	r2, [pc, #236]	; (800343c <DMA_SetConfig+0x238>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d040      	beq.n	80033d4 <DMA_SetConfig+0x1d0>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a3a      	ldr	r2, [pc, #232]	; (8003440 <DMA_SetConfig+0x23c>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d03b      	beq.n	80033d4 <DMA_SetConfig+0x1d0>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a38      	ldr	r2, [pc, #224]	; (8003444 <DMA_SetConfig+0x240>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d036      	beq.n	80033d4 <DMA_SetConfig+0x1d0>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a37      	ldr	r2, [pc, #220]	; (8003448 <DMA_SetConfig+0x244>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d031      	beq.n	80033d4 <DMA_SetConfig+0x1d0>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a35      	ldr	r2, [pc, #212]	; (800344c <DMA_SetConfig+0x248>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d02c      	beq.n	80033d4 <DMA_SetConfig+0x1d0>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a34      	ldr	r2, [pc, #208]	; (8003450 <DMA_SetConfig+0x24c>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d027      	beq.n	80033d4 <DMA_SetConfig+0x1d0>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a32      	ldr	r2, [pc, #200]	; (8003454 <DMA_SetConfig+0x250>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d022      	beq.n	80033d4 <DMA_SetConfig+0x1d0>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a31      	ldr	r2, [pc, #196]	; (8003458 <DMA_SetConfig+0x254>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d01d      	beq.n	80033d4 <DMA_SetConfig+0x1d0>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a2f      	ldr	r2, [pc, #188]	; (800345c <DMA_SetConfig+0x258>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d018      	beq.n	80033d4 <DMA_SetConfig+0x1d0>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a2e      	ldr	r2, [pc, #184]	; (8003460 <DMA_SetConfig+0x25c>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d013      	beq.n	80033d4 <DMA_SetConfig+0x1d0>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a2c      	ldr	r2, [pc, #176]	; (8003464 <DMA_SetConfig+0x260>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d00e      	beq.n	80033d4 <DMA_SetConfig+0x1d0>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a2b      	ldr	r2, [pc, #172]	; (8003468 <DMA_SetConfig+0x264>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d009      	beq.n	80033d4 <DMA_SetConfig+0x1d0>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a29      	ldr	r2, [pc, #164]	; (800346c <DMA_SetConfig+0x268>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d004      	beq.n	80033d4 <DMA_SetConfig+0x1d0>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a28      	ldr	r2, [pc, #160]	; (8003470 <DMA_SetConfig+0x26c>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d101      	bne.n	80033d8 <DMA_SetConfig+0x1d4>
 80033d4:	2301      	movs	r3, #1
 80033d6:	e000      	b.n	80033da <DMA_SetConfig+0x1d6>
 80033d8:	2300      	movs	r3, #0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d05a      	beq.n	8003494 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e2:	f003 031f 	and.w	r3, r3, #31
 80033e6:	223f      	movs	r2, #63	; 0x3f
 80033e8:	409a      	lsls	r2, r3
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80033fc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	2b40      	cmp	r3, #64	; 0x40
 800340c:	d108      	bne.n	8003420 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800341e:	e087      	b.n	8003530 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	60da      	str	r2, [r3, #12]
}
 8003430:	e07e      	b.n	8003530 <DMA_SetConfig+0x32c>
 8003432:	bf00      	nop
 8003434:	40020010 	.word	0x40020010
 8003438:	40020028 	.word	0x40020028
 800343c:	40020040 	.word	0x40020040
 8003440:	40020058 	.word	0x40020058
 8003444:	40020070 	.word	0x40020070
 8003448:	40020088 	.word	0x40020088
 800344c:	400200a0 	.word	0x400200a0
 8003450:	400200b8 	.word	0x400200b8
 8003454:	40020410 	.word	0x40020410
 8003458:	40020428 	.word	0x40020428
 800345c:	40020440 	.word	0x40020440
 8003460:	40020458 	.word	0x40020458
 8003464:	40020470 	.word	0x40020470
 8003468:	40020488 	.word	0x40020488
 800346c:	400204a0 	.word	0x400204a0
 8003470:	400204b8 	.word	0x400204b8
 8003474:	58025408 	.word	0x58025408
 8003478:	5802541c 	.word	0x5802541c
 800347c:	58025430 	.word	0x58025430
 8003480:	58025444 	.word	0x58025444
 8003484:	58025458 	.word	0x58025458
 8003488:	5802546c 	.word	0x5802546c
 800348c:	58025480 	.word	0x58025480
 8003490:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a28      	ldr	r2, [pc, #160]	; (800353c <DMA_SetConfig+0x338>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d022      	beq.n	80034e4 <DMA_SetConfig+0x2e0>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a27      	ldr	r2, [pc, #156]	; (8003540 <DMA_SetConfig+0x33c>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d01d      	beq.n	80034e4 <DMA_SetConfig+0x2e0>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a25      	ldr	r2, [pc, #148]	; (8003544 <DMA_SetConfig+0x340>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d018      	beq.n	80034e4 <DMA_SetConfig+0x2e0>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a24      	ldr	r2, [pc, #144]	; (8003548 <DMA_SetConfig+0x344>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d013      	beq.n	80034e4 <DMA_SetConfig+0x2e0>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a22      	ldr	r2, [pc, #136]	; (800354c <DMA_SetConfig+0x348>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d00e      	beq.n	80034e4 <DMA_SetConfig+0x2e0>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a21      	ldr	r2, [pc, #132]	; (8003550 <DMA_SetConfig+0x34c>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d009      	beq.n	80034e4 <DMA_SetConfig+0x2e0>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a1f      	ldr	r2, [pc, #124]	; (8003554 <DMA_SetConfig+0x350>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d004      	beq.n	80034e4 <DMA_SetConfig+0x2e0>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a1e      	ldr	r2, [pc, #120]	; (8003558 <DMA_SetConfig+0x354>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d101      	bne.n	80034e8 <DMA_SetConfig+0x2e4>
 80034e4:	2301      	movs	r3, #1
 80034e6:	e000      	b.n	80034ea <DMA_SetConfig+0x2e6>
 80034e8:	2300      	movs	r3, #0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d020      	beq.n	8003530 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f2:	f003 031f 	and.w	r3, r3, #31
 80034f6:	2201      	movs	r2, #1
 80034f8:	409a      	lsls	r2, r3
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	2b40      	cmp	r3, #64	; 0x40
 800350c:	d108      	bne.n	8003520 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	60da      	str	r2, [r3, #12]
}
 800351e:	e007      	b.n	8003530 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68ba      	ldr	r2, [r7, #8]
 8003526:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	60da      	str	r2, [r3, #12]
}
 8003530:	bf00      	nop
 8003532:	371c      	adds	r7, #28
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	58025408 	.word	0x58025408
 8003540:	5802541c 	.word	0x5802541c
 8003544:	58025430 	.word	0x58025430
 8003548:	58025444 	.word	0x58025444
 800354c:	58025458 	.word	0x58025458
 8003550:	5802546c 	.word	0x5802546c
 8003554:	58025480 	.word	0x58025480
 8003558:	58025494 	.word	0x58025494

0800355c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a42      	ldr	r2, [pc, #264]	; (8003674 <DMA_CalcBaseAndBitshift+0x118>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d04a      	beq.n	8003604 <DMA_CalcBaseAndBitshift+0xa8>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a41      	ldr	r2, [pc, #260]	; (8003678 <DMA_CalcBaseAndBitshift+0x11c>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d045      	beq.n	8003604 <DMA_CalcBaseAndBitshift+0xa8>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a3f      	ldr	r2, [pc, #252]	; (800367c <DMA_CalcBaseAndBitshift+0x120>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d040      	beq.n	8003604 <DMA_CalcBaseAndBitshift+0xa8>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a3e      	ldr	r2, [pc, #248]	; (8003680 <DMA_CalcBaseAndBitshift+0x124>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d03b      	beq.n	8003604 <DMA_CalcBaseAndBitshift+0xa8>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a3c      	ldr	r2, [pc, #240]	; (8003684 <DMA_CalcBaseAndBitshift+0x128>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d036      	beq.n	8003604 <DMA_CalcBaseAndBitshift+0xa8>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a3b      	ldr	r2, [pc, #236]	; (8003688 <DMA_CalcBaseAndBitshift+0x12c>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d031      	beq.n	8003604 <DMA_CalcBaseAndBitshift+0xa8>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a39      	ldr	r2, [pc, #228]	; (800368c <DMA_CalcBaseAndBitshift+0x130>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d02c      	beq.n	8003604 <DMA_CalcBaseAndBitshift+0xa8>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a38      	ldr	r2, [pc, #224]	; (8003690 <DMA_CalcBaseAndBitshift+0x134>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d027      	beq.n	8003604 <DMA_CalcBaseAndBitshift+0xa8>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a36      	ldr	r2, [pc, #216]	; (8003694 <DMA_CalcBaseAndBitshift+0x138>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d022      	beq.n	8003604 <DMA_CalcBaseAndBitshift+0xa8>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a35      	ldr	r2, [pc, #212]	; (8003698 <DMA_CalcBaseAndBitshift+0x13c>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d01d      	beq.n	8003604 <DMA_CalcBaseAndBitshift+0xa8>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a33      	ldr	r2, [pc, #204]	; (800369c <DMA_CalcBaseAndBitshift+0x140>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d018      	beq.n	8003604 <DMA_CalcBaseAndBitshift+0xa8>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a32      	ldr	r2, [pc, #200]	; (80036a0 <DMA_CalcBaseAndBitshift+0x144>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d013      	beq.n	8003604 <DMA_CalcBaseAndBitshift+0xa8>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a30      	ldr	r2, [pc, #192]	; (80036a4 <DMA_CalcBaseAndBitshift+0x148>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d00e      	beq.n	8003604 <DMA_CalcBaseAndBitshift+0xa8>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a2f      	ldr	r2, [pc, #188]	; (80036a8 <DMA_CalcBaseAndBitshift+0x14c>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d009      	beq.n	8003604 <DMA_CalcBaseAndBitshift+0xa8>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a2d      	ldr	r2, [pc, #180]	; (80036ac <DMA_CalcBaseAndBitshift+0x150>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d004      	beq.n	8003604 <DMA_CalcBaseAndBitshift+0xa8>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a2c      	ldr	r2, [pc, #176]	; (80036b0 <DMA_CalcBaseAndBitshift+0x154>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d101      	bne.n	8003608 <DMA_CalcBaseAndBitshift+0xac>
 8003604:	2301      	movs	r3, #1
 8003606:	e000      	b.n	800360a <DMA_CalcBaseAndBitshift+0xae>
 8003608:	2300      	movs	r3, #0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d024      	beq.n	8003658 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	b2db      	uxtb	r3, r3
 8003614:	3b10      	subs	r3, #16
 8003616:	4a27      	ldr	r2, [pc, #156]	; (80036b4 <DMA_CalcBaseAndBitshift+0x158>)
 8003618:	fba2 2303 	umull	r2, r3, r2, r3
 800361c:	091b      	lsrs	r3, r3, #4
 800361e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	4a24      	ldr	r2, [pc, #144]	; (80036b8 <DMA_CalcBaseAndBitshift+0x15c>)
 8003628:	5cd3      	ldrb	r3, [r2, r3]
 800362a:	461a      	mov	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2b03      	cmp	r3, #3
 8003634:	d908      	bls.n	8003648 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	461a      	mov	r2, r3
 800363c:	4b1f      	ldr	r3, [pc, #124]	; (80036bc <DMA_CalcBaseAndBitshift+0x160>)
 800363e:	4013      	ands	r3, r2
 8003640:	1d1a      	adds	r2, r3, #4
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	659a      	str	r2, [r3, #88]	; 0x58
 8003646:	e00d      	b.n	8003664 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	461a      	mov	r2, r3
 800364e:	4b1b      	ldr	r3, [pc, #108]	; (80036bc <DMA_CalcBaseAndBitshift+0x160>)
 8003650:	4013      	ands	r3, r2
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	6593      	str	r3, [r2, #88]	; 0x58
 8003656:	e005      	b.n	8003664 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003668:	4618      	mov	r0, r3
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	40020010 	.word	0x40020010
 8003678:	40020028 	.word	0x40020028
 800367c:	40020040 	.word	0x40020040
 8003680:	40020058 	.word	0x40020058
 8003684:	40020070 	.word	0x40020070
 8003688:	40020088 	.word	0x40020088
 800368c:	400200a0 	.word	0x400200a0
 8003690:	400200b8 	.word	0x400200b8
 8003694:	40020410 	.word	0x40020410
 8003698:	40020428 	.word	0x40020428
 800369c:	40020440 	.word	0x40020440
 80036a0:	40020458 	.word	0x40020458
 80036a4:	40020470 	.word	0x40020470
 80036a8:	40020488 	.word	0x40020488
 80036ac:	400204a0 	.word	0x400204a0
 80036b0:	400204b8 	.word	0x400204b8
 80036b4:	aaaaaaab 	.word	0xaaaaaaab
 80036b8:	0800fe14 	.word	0x0800fe14
 80036bc:	fffffc00 	.word	0xfffffc00

080036c0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036c8:	2300      	movs	r3, #0
 80036ca:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d120      	bne.n	8003716 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d8:	2b03      	cmp	r3, #3
 80036da:	d858      	bhi.n	800378e <DMA_CheckFifoParam+0xce>
 80036dc:	a201      	add	r2, pc, #4	; (adr r2, 80036e4 <DMA_CheckFifoParam+0x24>)
 80036de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e2:	bf00      	nop
 80036e4:	080036f5 	.word	0x080036f5
 80036e8:	08003707 	.word	0x08003707
 80036ec:	080036f5 	.word	0x080036f5
 80036f0:	0800378f 	.word	0x0800378f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d048      	beq.n	8003792 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003704:	e045      	b.n	8003792 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800370e:	d142      	bne.n	8003796 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003714:	e03f      	b.n	8003796 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800371e:	d123      	bne.n	8003768 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003724:	2b03      	cmp	r3, #3
 8003726:	d838      	bhi.n	800379a <DMA_CheckFifoParam+0xda>
 8003728:	a201      	add	r2, pc, #4	; (adr r2, 8003730 <DMA_CheckFifoParam+0x70>)
 800372a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372e:	bf00      	nop
 8003730:	08003741 	.word	0x08003741
 8003734:	08003747 	.word	0x08003747
 8003738:	08003741 	.word	0x08003741
 800373c:	08003759 	.word	0x08003759
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	73fb      	strb	r3, [r7, #15]
        break;
 8003744:	e030      	b.n	80037a8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d025      	beq.n	800379e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003756:	e022      	b.n	800379e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003760:	d11f      	bne.n	80037a2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003766:	e01c      	b.n	80037a2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376c:	2b02      	cmp	r3, #2
 800376e:	d902      	bls.n	8003776 <DMA_CheckFifoParam+0xb6>
 8003770:	2b03      	cmp	r3, #3
 8003772:	d003      	beq.n	800377c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003774:	e018      	b.n	80037a8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	73fb      	strb	r3, [r7, #15]
        break;
 800377a:	e015      	b.n	80037a8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003780:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00e      	beq.n	80037a6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	73fb      	strb	r3, [r7, #15]
    break;
 800378c:	e00b      	b.n	80037a6 <DMA_CheckFifoParam+0xe6>
        break;
 800378e:	bf00      	nop
 8003790:	e00a      	b.n	80037a8 <DMA_CheckFifoParam+0xe8>
        break;
 8003792:	bf00      	nop
 8003794:	e008      	b.n	80037a8 <DMA_CheckFifoParam+0xe8>
        break;
 8003796:	bf00      	nop
 8003798:	e006      	b.n	80037a8 <DMA_CheckFifoParam+0xe8>
        break;
 800379a:	bf00      	nop
 800379c:	e004      	b.n	80037a8 <DMA_CheckFifoParam+0xe8>
        break;
 800379e:	bf00      	nop
 80037a0:	e002      	b.n	80037a8 <DMA_CheckFifoParam+0xe8>
        break;
 80037a2:	bf00      	nop
 80037a4:	e000      	b.n	80037a8 <DMA_CheckFifoParam+0xe8>
    break;
 80037a6:	bf00      	nop
    }
  }

  return status;
 80037a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop

080037b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a38      	ldr	r2, [pc, #224]	; (80038ac <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d022      	beq.n	8003816 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a36      	ldr	r2, [pc, #216]	; (80038b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d01d      	beq.n	8003816 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a35      	ldr	r2, [pc, #212]	; (80038b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d018      	beq.n	8003816 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a33      	ldr	r2, [pc, #204]	; (80038b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d013      	beq.n	8003816 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a32      	ldr	r2, [pc, #200]	; (80038bc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d00e      	beq.n	8003816 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a30      	ldr	r2, [pc, #192]	; (80038c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d009      	beq.n	8003816 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a2f      	ldr	r2, [pc, #188]	; (80038c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d004      	beq.n	8003816 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a2d      	ldr	r2, [pc, #180]	; (80038c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d101      	bne.n	800381a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003816:	2301      	movs	r3, #1
 8003818:	e000      	b.n	800381c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800381a:	2300      	movs	r3, #0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d01a      	beq.n	8003856 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	b2db      	uxtb	r3, r3
 8003826:	3b08      	subs	r3, #8
 8003828:	4a28      	ldr	r2, [pc, #160]	; (80038cc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800382a:	fba2 2303 	umull	r2, r3, r2, r3
 800382e:	091b      	lsrs	r3, r3, #4
 8003830:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	4b26      	ldr	r3, [pc, #152]	; (80038d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003836:	4413      	add	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	461a      	mov	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a24      	ldr	r2, [pc, #144]	; (80038d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003844:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f003 031f 	and.w	r3, r3, #31
 800384c:	2201      	movs	r2, #1
 800384e:	409a      	lsls	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003854:	e024      	b.n	80038a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	b2db      	uxtb	r3, r3
 800385c:	3b10      	subs	r3, #16
 800385e:	4a1e      	ldr	r2, [pc, #120]	; (80038d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003860:	fba2 2303 	umull	r2, r3, r2, r3
 8003864:	091b      	lsrs	r3, r3, #4
 8003866:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	4a1c      	ldr	r2, [pc, #112]	; (80038dc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d806      	bhi.n	800387e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	4a1b      	ldr	r2, [pc, #108]	; (80038e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d902      	bls.n	800387e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	3308      	adds	r3, #8
 800387c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	4b18      	ldr	r3, [pc, #96]	; (80038e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003882:	4413      	add	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	461a      	mov	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a16      	ldr	r2, [pc, #88]	; (80038e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003890:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f003 031f 	and.w	r3, r3, #31
 8003898:	2201      	movs	r2, #1
 800389a:	409a      	lsls	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	669a      	str	r2, [r3, #104]	; 0x68
}
 80038a0:	bf00      	nop
 80038a2:	3714      	adds	r7, #20
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	58025408 	.word	0x58025408
 80038b0:	5802541c 	.word	0x5802541c
 80038b4:	58025430 	.word	0x58025430
 80038b8:	58025444 	.word	0x58025444
 80038bc:	58025458 	.word	0x58025458
 80038c0:	5802546c 	.word	0x5802546c
 80038c4:	58025480 	.word	0x58025480
 80038c8:	58025494 	.word	0x58025494
 80038cc:	cccccccd 	.word	0xcccccccd
 80038d0:	16009600 	.word	0x16009600
 80038d4:	58025880 	.word	0x58025880
 80038d8:	aaaaaaab 	.word	0xaaaaaaab
 80038dc:	400204b8 	.word	0x400204b8
 80038e0:	4002040f 	.word	0x4002040f
 80038e4:	10008200 	.word	0x10008200
 80038e8:	40020880 	.word	0x40020880

080038ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d04a      	beq.n	8003998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2b08      	cmp	r3, #8
 8003906:	d847      	bhi.n	8003998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a25      	ldr	r2, [pc, #148]	; (80039a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d022      	beq.n	8003958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a24      	ldr	r2, [pc, #144]	; (80039a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d01d      	beq.n	8003958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a22      	ldr	r2, [pc, #136]	; (80039ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d018      	beq.n	8003958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a21      	ldr	r2, [pc, #132]	; (80039b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d013      	beq.n	8003958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a1f      	ldr	r2, [pc, #124]	; (80039b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d00e      	beq.n	8003958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a1e      	ldr	r2, [pc, #120]	; (80039b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d009      	beq.n	8003958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a1c      	ldr	r2, [pc, #112]	; (80039bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d004      	beq.n	8003958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a1b      	ldr	r2, [pc, #108]	; (80039c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d101      	bne.n	800395c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003958:	2301      	movs	r3, #1
 800395a:	e000      	b.n	800395e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800395c:	2300      	movs	r3, #0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00a      	beq.n	8003978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	4b17      	ldr	r3, [pc, #92]	; (80039c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003966:	4413      	add	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	461a      	mov	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a15      	ldr	r2, [pc, #84]	; (80039c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003974:	671a      	str	r2, [r3, #112]	; 0x70
 8003976:	e009      	b.n	800398c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	4b14      	ldr	r3, [pc, #80]	; (80039cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800397c:	4413      	add	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	461a      	mov	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a11      	ldr	r2, [pc, #68]	; (80039d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800398a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	3b01      	subs	r3, #1
 8003990:	2201      	movs	r2, #1
 8003992:	409a      	lsls	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003998:	bf00      	nop
 800399a:	3714      	adds	r7, #20
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr
 80039a4:	58025408 	.word	0x58025408
 80039a8:	5802541c 	.word	0x5802541c
 80039ac:	58025430 	.word	0x58025430
 80039b0:	58025444 	.word	0x58025444
 80039b4:	58025458 	.word	0x58025458
 80039b8:	5802546c 	.word	0x5802546c
 80039bc:	58025480 	.word	0x58025480
 80039c0:	58025494 	.word	0x58025494
 80039c4:	1600963f 	.word	0x1600963f
 80039c8:	58025940 	.word	0x58025940
 80039cc:	1000823f 	.word	0x1000823f
 80039d0:	40020940 	.word	0x40020940

080039d4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b098      	sub	sp, #96	; 0x60
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80039dc:	4a84      	ldr	r2, [pc, #528]	; (8003bf0 <HAL_FDCAN_Init+0x21c>)
 80039de:	f107 030c 	add.w	r3, r7, #12
 80039e2:	4611      	mov	r1, r2
 80039e4:	224c      	movs	r2, #76	; 0x4c
 80039e6:	4618      	mov	r0, r3
 80039e8:	f00c f8d8 	bl	800fb9c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e1ca      	b.n	8003d8c <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a7e      	ldr	r2, [pc, #504]	; (8003bf4 <HAL_FDCAN_Init+0x220>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d106      	bne.n	8003a0e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003a08:	461a      	mov	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d106      	bne.n	8003a28 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7fd fa06 	bl	8000e34 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	699a      	ldr	r2, [r3, #24]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0210 	bic.w	r2, r2, #16
 8003a36:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a38:	f7fd fdaa 	bl	8001590 <HAL_GetTick>
 8003a3c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003a3e:	e014      	b.n	8003a6a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003a40:	f7fd fda6 	bl	8001590 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b0a      	cmp	r3, #10
 8003a4c:	d90d      	bls.n	8003a6a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a54:	f043 0201 	orr.w	r2, r3, #1
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2203      	movs	r2, #3
 8003a62:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e190      	b.n	8003d8c <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	f003 0308 	and.w	r3, r3, #8
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d0e3      	beq.n	8003a40 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699a      	ldr	r2, [r3, #24]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 0201 	orr.w	r2, r2, #1
 8003a86:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a88:	f7fd fd82 	bl	8001590 <HAL_GetTick>
 8003a8c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003a8e:	e014      	b.n	8003aba <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003a90:	f7fd fd7e 	bl	8001590 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b0a      	cmp	r3, #10
 8003a9c:	d90d      	bls.n	8003aba <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003aa4:	f043 0201 	orr.w	r2, r3, #1
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2203      	movs	r2, #3
 8003ab2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e168      	b.n	8003d8c <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0e3      	beq.n	8003a90 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	699a      	ldr	r2, [r3, #24]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f042 0202 	orr.w	r2, r2, #2
 8003ad6:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	7c1b      	ldrb	r3, [r3, #16]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d108      	bne.n	8003af2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	699a      	ldr	r2, [r3, #24]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aee:	619a      	str	r2, [r3, #24]
 8003af0:	e007      	b.n	8003b02 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	699a      	ldr	r2, [r3, #24]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b00:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	7c5b      	ldrb	r3, [r3, #17]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d108      	bne.n	8003b1c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	699a      	ldr	r2, [r3, #24]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b18:	619a      	str	r2, [r3, #24]
 8003b1a:	e007      	b.n	8003b2c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	699a      	ldr	r2, [r3, #24]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b2a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	7c9b      	ldrb	r3, [r3, #18]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d108      	bne.n	8003b46 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	699a      	ldr	r2, [r3, #24]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b42:	619a      	str	r2, [r3, #24]
 8003b44:	e007      	b.n	8003b56 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	699a      	ldr	r2, [r3, #24]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b54:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	699a      	ldr	r2, [r3, #24]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003b7a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	691a      	ldr	r2, [r3, #16]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 0210 	bic.w	r2, r2, #16
 8003b8a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d108      	bne.n	8003ba6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	699a      	ldr	r2, [r3, #24]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f042 0204 	orr.w	r2, r2, #4
 8003ba2:	619a      	str	r2, [r3, #24]
 8003ba4:	e030      	b.n	8003c08 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d02c      	beq.n	8003c08 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d020      	beq.n	8003bf8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	699a      	ldr	r2, [r3, #24]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003bc4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	691a      	ldr	r2, [r3, #16]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f042 0210 	orr.w	r2, r2, #16
 8003bd4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	2b03      	cmp	r3, #3
 8003bdc:	d114      	bne.n	8003c08 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	699a      	ldr	r2, [r3, #24]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f042 0220 	orr.w	r2, r2, #32
 8003bec:	619a      	str	r2, [r3, #24]
 8003bee:	e00b      	b.n	8003c08 <HAL_FDCAN_Init+0x234>
 8003bf0:	0800fd60 	.word	0x0800fd60
 8003bf4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	699a      	ldr	r2, [r3, #24]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 0220 	orr.w	r2, r2, #32
 8003c06:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	69db      	ldr	r3, [r3, #28]
 8003c14:	3b01      	subs	r3, #1
 8003c16:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003c18:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003c20:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003c30:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003c32:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c3c:	d115      	bne.n	8003c6a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c42:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003c4c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c52:	3b01      	subs	r3, #1
 8003c54:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003c56:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003c66:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003c68:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00a      	beq.n	8003c88 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c90:	4413      	add	r3, r2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d012      	beq.n	8003cbc <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003c9e:	f023 0107 	bic.w	r1, r3, #7
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003cac:	4413      	add	r3, r2
 8003cae:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d012      	beq.n	8003cea <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003ccc:	f023 0107 	bic.w	r1, r3, #7
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003cda:	4413      	add	r3, r2
 8003cdc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d013      	beq.n	8003d1a <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003cfa:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003d08:	4413      	add	r3, r2
 8003d0a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003d0e:	011a      	lsls	r2, r3, #4
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	430a      	orrs	r2, r1
 8003d16:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d013      	beq.n	8003d4a <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003d2a:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003d38:	4413      	add	r3, r2
 8003d3a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003d3e:	021a      	lsls	r2, r3, #8
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	430a      	orrs	r2, r1
 8003d46:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a11      	ldr	r2, [pc, #68]	; (8003d94 <HAL_FDCAN_Init+0x3c0>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d107      	bne.n	8003d64 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	689a      	ldr	r2, [r3, #8]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f022 0203 	bic.w	r2, r2, #3
 8003d62:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 f80b 	bl	8003d98 <FDCAN_CalcultateRamBlockAddresses>
 8003d82:	4603      	mov	r3, r0
 8003d84:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8003d88:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3760      	adds	r7, #96	; 0x60
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	4000a000 	.word	0x4000a000

08003d98 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003dae:	4ba7      	ldr	r3, [pc, #668]	; (800404c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003db0:	4013      	ands	r3, r2
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	0091      	lsls	r1, r2, #2
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	6812      	ldr	r2, [r2, #0]
 8003dba:	430b      	orrs	r3, r1
 8003dbc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dc8:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd0:	041a      	lsls	r2, r3, #16
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	4413      	add	r3, r2
 8003de4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003dee:	4b97      	ldr	r3, [pc, #604]	; (800404c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003df0:	4013      	ands	r3, r2
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	0091      	lsls	r1, r2, #2
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	6812      	ldr	r2, [r2, #0]
 8003dfa:	430b      	orrs	r3, r1
 8003dfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e08:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e10:	041a      	lsls	r2, r3, #16
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	68ba      	ldr	r2, [r7, #8]
 8003e24:	4413      	add	r3, r2
 8003e26:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003e30:	4b86      	ldr	r3, [pc, #536]	; (800404c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003e32:	4013      	ands	r3, r2
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	0091      	lsls	r1, r2, #2
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	6812      	ldr	r2, [r2, #0]
 8003e3c:	430b      	orrs	r3, r1
 8003e3e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e4a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	041a      	lsls	r2, r3, #16
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003e66:	fb02 f303 	mul.w	r3, r2, r3
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003e78:	4b74      	ldr	r3, [pc, #464]	; (800404c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	0091      	lsls	r1, r2, #2
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	6812      	ldr	r2, [r2, #0]
 8003e84:	430b      	orrs	r3, r1
 8003e86:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e92:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e9a:	041a      	lsls	r2, r3, #16
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003eae:	fb02 f303 	mul.w	r3, r2, r3
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003ec0:	4b62      	ldr	r3, [pc, #392]	; (800404c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	0091      	lsls	r1, r2, #2
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	6812      	ldr	r2, [r2, #0]
 8003ecc:	430b      	orrs	r3, r1
 8003ece:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003eda:	fb02 f303 	mul.w	r3, r2, r3
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003eec:	4b57      	ldr	r3, [pc, #348]	; (800404c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003eee:	4013      	ands	r3, r2
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	0091      	lsls	r1, r2, #2
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6812      	ldr	r2, [r2, #0]
 8003ef8:	430b      	orrs	r3, r1
 8003efa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f06:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0e:	041a      	lsls	r2, r3, #16
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	430a      	orrs	r2, r1
 8003f16:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	4413      	add	r3, r2
 8003f24:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003f2e:	4b47      	ldr	r3, [pc, #284]	; (800404c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003f30:	4013      	ands	r3, r2
 8003f32:	68ba      	ldr	r2, [r7, #8]
 8003f34:	0091      	lsls	r1, r2, #2
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	6812      	ldr	r2, [r2, #0]
 8003f3a:	430b      	orrs	r3, r1
 8003f3c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003f48:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f50:	041a      	lsls	r2, r3, #16
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003f64:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f6c:	061a      	lsls	r2, r3, #24
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	430a      	orrs	r2, r1
 8003f74:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f7c:	4b34      	ldr	r3, [pc, #208]	; (8004050 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8003f7e:	4413      	add	r3, r2
 8003f80:	009a      	lsls	r2, r3, #2
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	441a      	add	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	441a      	add	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fae:	6879      	ldr	r1, [r7, #4]
 8003fb0:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8003fb2:	fb01 f303 	mul.w	r3, r1, r3
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	441a      	add	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fc6:	6879      	ldr	r1, [r7, #4]
 8003fc8:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8003fca:	fb01 f303 	mul.w	r3, r1, r3
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	441a      	add	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fde:	6879      	ldr	r1, [r7, #4]
 8003fe0:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8003fe2:	fb01 f303 	mul.w	r3, r1, r3
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	441a      	add	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	441a      	add	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800400e:	6879      	ldr	r1, [r7, #4]
 8004010:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004012:	fb01 f303 	mul.w	r3, r1, r3
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	441a      	add	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800402a:	6879      	ldr	r1, [r7, #4]
 800402c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800402e:	fb01 f303 	mul.w	r3, r1, r3
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	441a      	add	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004042:	4a04      	ldr	r2, [pc, #16]	; (8004054 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d915      	bls.n	8004074 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004048:	e006      	b.n	8004058 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800404a:	bf00      	nop
 800404c:	ffff0003 	.word	0xffff0003
 8004050:	10002b00 	.word	0x10002b00
 8004054:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800405e:	f043 0220 	orr.w	r2, r3, #32
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2203      	movs	r2, #3
 800406c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e010      	b.n	8004096 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004078:	60fb      	str	r3, [r7, #12]
 800407a:	e005      	b.n	8004088 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	3304      	adds	r3, #4
 8004086:	60fb      	str	r3, [r7, #12]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	429a      	cmp	r2, r3
 8004092:	d3f3      	bcc.n	800407c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop

080040a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b089      	sub	sp, #36	; 0x24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80040ae:	2300      	movs	r3, #0
 80040b0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80040b2:	4b89      	ldr	r3, [pc, #548]	; (80042d8 <HAL_GPIO_Init+0x234>)
 80040b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80040b6:	e194      	b.n	80043e2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	2101      	movs	r1, #1
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	fa01 f303 	lsl.w	r3, r1, r3
 80040c4:	4013      	ands	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 8186 	beq.w	80043dc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d00b      	beq.n	80040f0 <HAL_GPIO_Init+0x4c>
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d007      	beq.n	80040f0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80040e4:	2b11      	cmp	r3, #17
 80040e6:	d003      	beq.n	80040f0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	2b12      	cmp	r3, #18
 80040ee:	d130      	bne.n	8004152 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	2203      	movs	r2, #3
 80040fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004100:	43db      	mvns	r3, r3
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	4013      	ands	r3, r2
 8004106:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	68da      	ldr	r2, [r3, #12]
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	fa02 f303 	lsl.w	r3, r2, r3
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	4313      	orrs	r3, r2
 8004118:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004126:	2201      	movs	r2, #1
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	fa02 f303 	lsl.w	r3, r2, r3
 800412e:	43db      	mvns	r3, r3
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	4013      	ands	r3, r2
 8004134:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	091b      	lsrs	r3, r3, #4
 800413c:	f003 0201 	and.w	r2, r3, #1
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	fa02 f303 	lsl.w	r3, r2, r3
 8004146:	69ba      	ldr	r2, [r7, #24]
 8004148:	4313      	orrs	r3, r2
 800414a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	2203      	movs	r2, #3
 800415e:	fa02 f303 	lsl.w	r3, r2, r3
 8004162:	43db      	mvns	r3, r3
 8004164:	69ba      	ldr	r2, [r7, #24]
 8004166:	4013      	ands	r3, r2
 8004168:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	689a      	ldr	r2, [r3, #8]
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	fa02 f303 	lsl.w	r3, r2, r3
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	4313      	orrs	r3, r2
 800417a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	69ba      	ldr	r2, [r7, #24]
 8004180:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	2b02      	cmp	r3, #2
 8004188:	d003      	beq.n	8004192 <HAL_GPIO_Init+0xee>
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	2b12      	cmp	r3, #18
 8004190:	d123      	bne.n	80041da <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	08da      	lsrs	r2, r3, #3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	3208      	adds	r2, #8
 800419a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800419e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	f003 0307 	and.w	r3, r3, #7
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	220f      	movs	r2, #15
 80041aa:	fa02 f303 	lsl.w	r3, r2, r3
 80041ae:	43db      	mvns	r3, r3
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	4013      	ands	r3, r2
 80041b4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	691a      	ldr	r2, [r3, #16]
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	f003 0307 	and.w	r3, r3, #7
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	fa02 f303 	lsl.w	r3, r2, r3
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	08da      	lsrs	r2, r3, #3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	3208      	adds	r2, #8
 80041d4:	69b9      	ldr	r1, [r7, #24]
 80041d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	2203      	movs	r2, #3
 80041e6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ea:	43db      	mvns	r3, r3
 80041ec:	69ba      	ldr	r2, [r7, #24]
 80041ee:	4013      	ands	r3, r2
 80041f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f003 0203 	and.w	r2, r3, #3
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	005b      	lsls	r3, r3, #1
 80041fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	4313      	orrs	r3, r2
 8004206:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	69ba      	ldr	r2, [r7, #24]
 800420c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004216:	2b00      	cmp	r3, #0
 8004218:	f000 80e0 	beq.w	80043dc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800421c:	4b2f      	ldr	r3, [pc, #188]	; (80042dc <HAL_GPIO_Init+0x238>)
 800421e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004222:	4a2e      	ldr	r2, [pc, #184]	; (80042dc <HAL_GPIO_Init+0x238>)
 8004224:	f043 0302 	orr.w	r3, r3, #2
 8004228:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800422c:	4b2b      	ldr	r3, [pc, #172]	; (80042dc <HAL_GPIO_Init+0x238>)
 800422e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	60fb      	str	r3, [r7, #12]
 8004238:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800423a:	4a29      	ldr	r2, [pc, #164]	; (80042e0 <HAL_GPIO_Init+0x23c>)
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	089b      	lsrs	r3, r3, #2
 8004240:	3302      	adds	r3, #2
 8004242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004246:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	f003 0303 	and.w	r3, r3, #3
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	220f      	movs	r2, #15
 8004252:	fa02 f303 	lsl.w	r3, r2, r3
 8004256:	43db      	mvns	r3, r3
 8004258:	69ba      	ldr	r2, [r7, #24]
 800425a:	4013      	ands	r3, r2
 800425c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a20      	ldr	r2, [pc, #128]	; (80042e4 <HAL_GPIO_Init+0x240>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d052      	beq.n	800430c <HAL_GPIO_Init+0x268>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a1f      	ldr	r2, [pc, #124]	; (80042e8 <HAL_GPIO_Init+0x244>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d031      	beq.n	80042d2 <HAL_GPIO_Init+0x22e>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a1e      	ldr	r2, [pc, #120]	; (80042ec <HAL_GPIO_Init+0x248>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d02b      	beq.n	80042ce <HAL_GPIO_Init+0x22a>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a1d      	ldr	r2, [pc, #116]	; (80042f0 <HAL_GPIO_Init+0x24c>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d025      	beq.n	80042ca <HAL_GPIO_Init+0x226>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a1c      	ldr	r2, [pc, #112]	; (80042f4 <HAL_GPIO_Init+0x250>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d01f      	beq.n	80042c6 <HAL_GPIO_Init+0x222>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a1b      	ldr	r2, [pc, #108]	; (80042f8 <HAL_GPIO_Init+0x254>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d019      	beq.n	80042c2 <HAL_GPIO_Init+0x21e>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a1a      	ldr	r2, [pc, #104]	; (80042fc <HAL_GPIO_Init+0x258>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d013      	beq.n	80042be <HAL_GPIO_Init+0x21a>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a19      	ldr	r2, [pc, #100]	; (8004300 <HAL_GPIO_Init+0x25c>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d00d      	beq.n	80042ba <HAL_GPIO_Init+0x216>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a18      	ldr	r2, [pc, #96]	; (8004304 <HAL_GPIO_Init+0x260>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d007      	beq.n	80042b6 <HAL_GPIO_Init+0x212>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a17      	ldr	r2, [pc, #92]	; (8004308 <HAL_GPIO_Init+0x264>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d101      	bne.n	80042b2 <HAL_GPIO_Init+0x20e>
 80042ae:	2309      	movs	r3, #9
 80042b0:	e02d      	b.n	800430e <HAL_GPIO_Init+0x26a>
 80042b2:	230a      	movs	r3, #10
 80042b4:	e02b      	b.n	800430e <HAL_GPIO_Init+0x26a>
 80042b6:	2308      	movs	r3, #8
 80042b8:	e029      	b.n	800430e <HAL_GPIO_Init+0x26a>
 80042ba:	2307      	movs	r3, #7
 80042bc:	e027      	b.n	800430e <HAL_GPIO_Init+0x26a>
 80042be:	2306      	movs	r3, #6
 80042c0:	e025      	b.n	800430e <HAL_GPIO_Init+0x26a>
 80042c2:	2305      	movs	r3, #5
 80042c4:	e023      	b.n	800430e <HAL_GPIO_Init+0x26a>
 80042c6:	2304      	movs	r3, #4
 80042c8:	e021      	b.n	800430e <HAL_GPIO_Init+0x26a>
 80042ca:	2303      	movs	r3, #3
 80042cc:	e01f      	b.n	800430e <HAL_GPIO_Init+0x26a>
 80042ce:	2302      	movs	r3, #2
 80042d0:	e01d      	b.n	800430e <HAL_GPIO_Init+0x26a>
 80042d2:	2301      	movs	r3, #1
 80042d4:	e01b      	b.n	800430e <HAL_GPIO_Init+0x26a>
 80042d6:	bf00      	nop
 80042d8:	58000080 	.word	0x58000080
 80042dc:	58024400 	.word	0x58024400
 80042e0:	58000400 	.word	0x58000400
 80042e4:	58020000 	.word	0x58020000
 80042e8:	58020400 	.word	0x58020400
 80042ec:	58020800 	.word	0x58020800
 80042f0:	58020c00 	.word	0x58020c00
 80042f4:	58021000 	.word	0x58021000
 80042f8:	58021400 	.word	0x58021400
 80042fc:	58021800 	.word	0x58021800
 8004300:	58021c00 	.word	0x58021c00
 8004304:	58022000 	.word	0x58022000
 8004308:	58022400 	.word	0x58022400
 800430c:	2300      	movs	r3, #0
 800430e:	69fa      	ldr	r2, [r7, #28]
 8004310:	f002 0203 	and.w	r2, r2, #3
 8004314:	0092      	lsls	r2, r2, #2
 8004316:	4093      	lsls	r3, r2
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	4313      	orrs	r3, r2
 800431c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800431e:	4938      	ldr	r1, [pc, #224]	; (8004400 <HAL_GPIO_Init+0x35c>)
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	089b      	lsrs	r3, r3, #2
 8004324:	3302      	adds	r3, #2
 8004326:	69ba      	ldr	r2, [r7, #24]
 8004328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	43db      	mvns	r3, r3
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	4013      	ands	r3, r2
 800433a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d003      	beq.n	8004350 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	4313      	orrs	r3, r2
 800434e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	43db      	mvns	r3, r3
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	4013      	ands	r3, r2
 8004364:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d003      	beq.n	800437a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004372:	69ba      	ldr	r2, [r7, #24]
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	4313      	orrs	r3, r2
 8004378:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	43db      	mvns	r3, r3
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	4013      	ands	r3, r2
 8004390:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80043a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80043ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	43db      	mvns	r3, r3
 80043ba:	69ba      	ldr	r2, [r7, #24]
 80043bc:	4013      	ands	r3, r2
 80043be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d003      	beq.n	80043d4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80043d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	3301      	adds	r3, #1
 80043e0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	fa22 f303 	lsr.w	r3, r2, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f47f ae63 	bne.w	80040b8 <HAL_GPIO_Init+0x14>
  }
}
 80043f2:	bf00      	nop
 80043f4:	3724      	adds	r7, #36	; 0x24
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	58000400 	.word	0x58000400

08004404 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	460b      	mov	r3, r1
 800440e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	691a      	ldr	r2, [r3, #16]
 8004414:	887b      	ldrh	r3, [r7, #2]
 8004416:	4013      	ands	r3, r2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d002      	beq.n	8004422 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800441c:	2301      	movs	r3, #1
 800441e:	73fb      	strb	r3, [r7, #15]
 8004420:	e001      	b.n	8004426 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004422:	2300      	movs	r3, #0
 8004424:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004426:	7bfb      	ldrb	r3, [r7, #15]
}
 8004428:	4618      	mov	r0, r3
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	460b      	mov	r3, r1
 800443e:	807b      	strh	r3, [r7, #2]
 8004440:	4613      	mov	r3, r2
 8004442:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004444:	787b      	ldrb	r3, [r7, #1]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d003      	beq.n	8004452 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800444a:	887a      	ldrh	r2, [r7, #2]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004450:	e003      	b.n	800445a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004452:	887b      	ldrh	r3, [r7, #2]
 8004454:	041a      	lsls	r2, r3, #16
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	619a      	str	r2, [r3, #24]
}
 800445a:	bf00      	nop
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004466:	b480      	push	{r7}
 8004468:	b083      	sub	sp, #12
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
 800446e:	460b      	mov	r3, r1
 8004470:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	695a      	ldr	r2, [r3, #20]
 8004476:	887b      	ldrh	r3, [r7, #2]
 8004478:	401a      	ands	r2, r3
 800447a:	887b      	ldrh	r3, [r7, #2]
 800447c:	429a      	cmp	r2, r3
 800447e:	d104      	bne.n	800448a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004480:	887b      	ldrh	r3, [r7, #2]
 8004482:	041a      	lsls	r2, r3, #16
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004488:	e002      	b.n	8004490 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800448a:	887a      	ldrh	r2, [r7, #2]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	619a      	str	r2, [r3, #24]
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800449c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800449e:	b08f      	sub	sp, #60	; 0x3c
 80044a0:	af0a      	add	r7, sp, #40	; 0x28
 80044a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e116      	b.n	80046dc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d106      	bne.n	80044ce <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f00b f82f 	bl	800f52c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2203      	movs	r2, #3
 80044d2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d102      	bne.n	80044e8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f007 fe0a 	bl	800c106 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	603b      	str	r3, [r7, #0]
 80044f8:	687e      	ldr	r6, [r7, #4]
 80044fa:	466d      	mov	r5, sp
 80044fc:	f106 0410 	add.w	r4, r6, #16
 8004500:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004502:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004504:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004506:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004508:	e894 0003 	ldmia.w	r4, {r0, r1}
 800450c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004510:	1d33      	adds	r3, r6, #4
 8004512:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004514:	6838      	ldr	r0, [r7, #0]
 8004516:	f007 fce1 	bl	800bedc <USB_CoreInit>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d005      	beq.n	800452c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2202      	movs	r2, #2
 8004524:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e0d7      	b.n	80046dc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2100      	movs	r1, #0
 8004532:	4618      	mov	r0, r3
 8004534:	f007 fdf8 	bl	800c128 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004538:	2300      	movs	r3, #0
 800453a:	73fb      	strb	r3, [r7, #15]
 800453c:	e04a      	b.n	80045d4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800453e:	7bfa      	ldrb	r2, [r7, #15]
 8004540:	6879      	ldr	r1, [r7, #4]
 8004542:	4613      	mov	r3, r2
 8004544:	00db      	lsls	r3, r3, #3
 8004546:	1a9b      	subs	r3, r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	440b      	add	r3, r1
 800454c:	333d      	adds	r3, #61	; 0x3d
 800454e:	2201      	movs	r2, #1
 8004550:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004552:	7bfa      	ldrb	r2, [r7, #15]
 8004554:	6879      	ldr	r1, [r7, #4]
 8004556:	4613      	mov	r3, r2
 8004558:	00db      	lsls	r3, r3, #3
 800455a:	1a9b      	subs	r3, r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	440b      	add	r3, r1
 8004560:	333c      	adds	r3, #60	; 0x3c
 8004562:	7bfa      	ldrb	r2, [r7, #15]
 8004564:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004566:	7bfa      	ldrb	r2, [r7, #15]
 8004568:	7bfb      	ldrb	r3, [r7, #15]
 800456a:	b298      	uxth	r0, r3
 800456c:	6879      	ldr	r1, [r7, #4]
 800456e:	4613      	mov	r3, r2
 8004570:	00db      	lsls	r3, r3, #3
 8004572:	1a9b      	subs	r3, r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	440b      	add	r3, r1
 8004578:	3342      	adds	r3, #66	; 0x42
 800457a:	4602      	mov	r2, r0
 800457c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800457e:	7bfa      	ldrb	r2, [r7, #15]
 8004580:	6879      	ldr	r1, [r7, #4]
 8004582:	4613      	mov	r3, r2
 8004584:	00db      	lsls	r3, r3, #3
 8004586:	1a9b      	subs	r3, r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	440b      	add	r3, r1
 800458c:	333f      	adds	r3, #63	; 0x3f
 800458e:	2200      	movs	r2, #0
 8004590:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004592:	7bfa      	ldrb	r2, [r7, #15]
 8004594:	6879      	ldr	r1, [r7, #4]
 8004596:	4613      	mov	r3, r2
 8004598:	00db      	lsls	r3, r3, #3
 800459a:	1a9b      	subs	r3, r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	440b      	add	r3, r1
 80045a0:	3344      	adds	r3, #68	; 0x44
 80045a2:	2200      	movs	r2, #0
 80045a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80045a6:	7bfa      	ldrb	r2, [r7, #15]
 80045a8:	6879      	ldr	r1, [r7, #4]
 80045aa:	4613      	mov	r3, r2
 80045ac:	00db      	lsls	r3, r3, #3
 80045ae:	1a9b      	subs	r3, r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	440b      	add	r3, r1
 80045b4:	3348      	adds	r3, #72	; 0x48
 80045b6:	2200      	movs	r2, #0
 80045b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80045ba:	7bfa      	ldrb	r2, [r7, #15]
 80045bc:	6879      	ldr	r1, [r7, #4]
 80045be:	4613      	mov	r3, r2
 80045c0:	00db      	lsls	r3, r3, #3
 80045c2:	1a9b      	subs	r3, r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	440b      	add	r3, r1
 80045c8:	3350      	adds	r3, #80	; 0x50
 80045ca:	2200      	movs	r2, #0
 80045cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045ce:	7bfb      	ldrb	r3, [r7, #15]
 80045d0:	3301      	adds	r3, #1
 80045d2:	73fb      	strb	r3, [r7, #15]
 80045d4:	7bfa      	ldrb	r2, [r7, #15]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d3af      	bcc.n	800453e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045de:	2300      	movs	r3, #0
 80045e0:	73fb      	strb	r3, [r7, #15]
 80045e2:	e044      	b.n	800466e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80045e4:	7bfa      	ldrb	r2, [r7, #15]
 80045e6:	6879      	ldr	r1, [r7, #4]
 80045e8:	4613      	mov	r3, r2
 80045ea:	00db      	lsls	r3, r3, #3
 80045ec:	1a9b      	subs	r3, r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	440b      	add	r3, r1
 80045f2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80045f6:	2200      	movs	r2, #0
 80045f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80045fa:	7bfa      	ldrb	r2, [r7, #15]
 80045fc:	6879      	ldr	r1, [r7, #4]
 80045fe:	4613      	mov	r3, r2
 8004600:	00db      	lsls	r3, r3, #3
 8004602:	1a9b      	subs	r3, r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	440b      	add	r3, r1
 8004608:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800460c:	7bfa      	ldrb	r2, [r7, #15]
 800460e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004610:	7bfa      	ldrb	r2, [r7, #15]
 8004612:	6879      	ldr	r1, [r7, #4]
 8004614:	4613      	mov	r3, r2
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	1a9b      	subs	r3, r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	440b      	add	r3, r1
 800461e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004622:	2200      	movs	r2, #0
 8004624:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004626:	7bfa      	ldrb	r2, [r7, #15]
 8004628:	6879      	ldr	r1, [r7, #4]
 800462a:	4613      	mov	r3, r2
 800462c:	00db      	lsls	r3, r3, #3
 800462e:	1a9b      	subs	r3, r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	440b      	add	r3, r1
 8004634:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004638:	2200      	movs	r2, #0
 800463a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800463c:	7bfa      	ldrb	r2, [r7, #15]
 800463e:	6879      	ldr	r1, [r7, #4]
 8004640:	4613      	mov	r3, r2
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	1a9b      	subs	r3, r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	440b      	add	r3, r1
 800464a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800464e:	2200      	movs	r2, #0
 8004650:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004652:	7bfa      	ldrb	r2, [r7, #15]
 8004654:	6879      	ldr	r1, [r7, #4]
 8004656:	4613      	mov	r3, r2
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	1a9b      	subs	r3, r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	440b      	add	r3, r1
 8004660:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004664:	2200      	movs	r2, #0
 8004666:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004668:	7bfb      	ldrb	r3, [r7, #15]
 800466a:	3301      	adds	r3, #1
 800466c:	73fb      	strb	r3, [r7, #15]
 800466e:	7bfa      	ldrb	r2, [r7, #15]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	429a      	cmp	r2, r3
 8004676:	d3b5      	bcc.n	80045e4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	603b      	str	r3, [r7, #0]
 800467e:	687e      	ldr	r6, [r7, #4]
 8004680:	466d      	mov	r5, sp
 8004682:	f106 0410 	add.w	r4, r6, #16
 8004686:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004688:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800468a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800468c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800468e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004692:	e885 0003 	stmia.w	r5, {r0, r1}
 8004696:	1d33      	adds	r3, r6, #4
 8004698:	cb0e      	ldmia	r3, {r1, r2, r3}
 800469a:	6838      	ldr	r0, [r7, #0]
 800469c:	f007 fd6e 	bl	800c17c <USB_DevInit>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d005      	beq.n	80046b2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2202      	movs	r2, #2
 80046aa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e014      	b.n	80046dc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d102      	bne.n	80046d0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f001 f892 	bl	80057f4 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f008 fdad 	bl	800d234 <USB_DevDisconnect>

  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3714      	adds	r7, #20
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080046e4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d101      	bne.n	8004700 <HAL_PCD_Start+0x1c>
 80046fc:	2302      	movs	r3, #2
 80046fe:	e020      	b.n	8004742 <HAL_PCD_Start+0x5e>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470c:	2b01      	cmp	r3, #1
 800470e:	d109      	bne.n	8004724 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004714:	2b01      	cmp	r3, #1
 8004716:	d005      	beq.n	8004724 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4618      	mov	r0, r3
 800472a:	f008 fd6b 	bl	800d204 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4618      	mov	r0, r3
 8004734:	f007 fcd6 	bl	800c0e4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800474a:	b590      	push	{r4, r7, lr}
 800474c:	b08d      	sub	sp, #52	; 0x34
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004758:	6a3b      	ldr	r3, [r7, #32]
 800475a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4618      	mov	r0, r3
 8004762:	f008 fe12 	bl	800d38a <USB_GetMode>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	f040 83ca 	bne.w	8004f02 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4618      	mov	r0, r3
 8004774:	f008 fd76 	bl	800d264 <USB_ReadInterrupts>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	f000 83c0 	beq.w	8004f00 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4618      	mov	r0, r3
 8004786:	f008 fd6d 	bl	800d264 <USB_ReadInterrupts>
 800478a:	4603      	mov	r3, r0
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b02      	cmp	r3, #2
 8004792:	d107      	bne.n	80047a4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	695a      	ldr	r2, [r3, #20]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f002 0202 	and.w	r2, r2, #2
 80047a2:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f008 fd5b 	bl	800d264 <USB_ReadInterrupts>
 80047ae:	4603      	mov	r3, r0
 80047b0:	f003 0310 	and.w	r3, r3, #16
 80047b4:	2b10      	cmp	r3, #16
 80047b6:	d161      	bne.n	800487c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	699a      	ldr	r2, [r3, #24]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f022 0210 	bic.w	r2, r2, #16
 80047c6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80047c8:	6a3b      	ldr	r3, [r7, #32]
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	f003 020f 	and.w	r2, r3, #15
 80047d4:	4613      	mov	r3, r2
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	1a9b      	subs	r3, r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	4413      	add	r3, r2
 80047e4:	3304      	adds	r3, #4
 80047e6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	0c5b      	lsrs	r3, r3, #17
 80047ec:	f003 030f 	and.w	r3, r3, #15
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d124      	bne.n	800483e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80047fa:	4013      	ands	r3, r2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d035      	beq.n	800486c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	091b      	lsrs	r3, r3, #4
 8004808:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800480a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800480e:	b29b      	uxth	r3, r3
 8004810:	461a      	mov	r2, r3
 8004812:	6a38      	ldr	r0, [r7, #32]
 8004814:	f008 fbd3 	bl	800cfbe <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	68da      	ldr	r2, [r3, #12]
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	091b      	lsrs	r3, r3, #4
 8004820:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004824:	441a      	add	r2, r3
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	699a      	ldr	r2, [r3, #24]
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	091b      	lsrs	r3, r3, #4
 8004832:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004836:	441a      	add	r2, r3
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	619a      	str	r2, [r3, #24]
 800483c:	e016      	b.n	800486c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	0c5b      	lsrs	r3, r3, #17
 8004842:	f003 030f 	and.w	r3, r3, #15
 8004846:	2b06      	cmp	r3, #6
 8004848:	d110      	bne.n	800486c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004850:	2208      	movs	r2, #8
 8004852:	4619      	mov	r1, r3
 8004854:	6a38      	ldr	r0, [r7, #32]
 8004856:	f008 fbb2 	bl	800cfbe <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	699a      	ldr	r2, [r3, #24]
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	091b      	lsrs	r3, r3, #4
 8004862:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004866:	441a      	add	r2, r3
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	699a      	ldr	r2, [r3, #24]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f042 0210 	orr.w	r2, r2, #16
 800487a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4618      	mov	r0, r3
 8004882:	f008 fcef 	bl	800d264 <USB_ReadInterrupts>
 8004886:	4603      	mov	r3, r0
 8004888:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800488c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004890:	d16e      	bne.n	8004970 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004892:	2300      	movs	r3, #0
 8004894:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4618      	mov	r0, r3
 800489c:	f008 fcf5 	bl	800d28a <USB_ReadDevAllOutEpInterrupt>
 80048a0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80048a2:	e062      	b.n	800496a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80048a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d057      	beq.n	800495e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048b4:	b2d2      	uxtb	r2, r2
 80048b6:	4611      	mov	r1, r2
 80048b8:	4618      	mov	r0, r3
 80048ba:	f008 fd1a 	bl	800d2f2 <USB_ReadDevOutEPInterrupt>
 80048be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00c      	beq.n	80048e4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	015a      	lsls	r2, r3, #5
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	4413      	add	r3, r2
 80048d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d6:	461a      	mov	r2, r3
 80048d8:	2301      	movs	r3, #1
 80048da:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80048dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 fdde 	bl	80054a0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	f003 0308 	and.w	r3, r3, #8
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00c      	beq.n	8004908 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	015a      	lsls	r2, r3, #5
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	4413      	add	r3, r2
 80048f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048fa:	461a      	mov	r2, r3
 80048fc:	2308      	movs	r3, #8
 80048fe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004900:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 fed8 	bl	80056b8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	f003 0310 	and.w	r3, r3, #16
 800490e:	2b00      	cmp	r3, #0
 8004910:	d008      	beq.n	8004924 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004914:	015a      	lsls	r2, r3, #5
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	4413      	add	r3, r2
 800491a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800491e:	461a      	mov	r2, r3
 8004920:	2310      	movs	r3, #16
 8004922:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	f003 0320 	and.w	r3, r3, #32
 800492a:	2b00      	cmp	r3, #0
 800492c:	d008      	beq.n	8004940 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004930:	015a      	lsls	r2, r3, #5
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	4413      	add	r3, r2
 8004936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800493a:	461a      	mov	r2, r3
 800493c:	2320      	movs	r3, #32
 800493e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d009      	beq.n	800495e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	015a      	lsls	r2, r3, #5
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	4413      	add	r3, r2
 8004952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004956:	461a      	mov	r2, r3
 8004958:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800495c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	3301      	adds	r3, #1
 8004962:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004966:	085b      	lsrs	r3, r3, #1
 8004968:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800496a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496c:	2b00      	cmp	r3, #0
 800496e:	d199      	bne.n	80048a4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4618      	mov	r0, r3
 8004976:	f008 fc75 	bl	800d264 <USB_ReadInterrupts>
 800497a:	4603      	mov	r3, r0
 800497c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004980:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004984:	f040 80c0 	bne.w	8004b08 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4618      	mov	r0, r3
 800498e:	f008 fc96 	bl	800d2be <USB_ReadDevAllInEpInterrupt>
 8004992:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004994:	2300      	movs	r3, #0
 8004996:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004998:	e0b2      	b.n	8004b00 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800499a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f000 80a7 	beq.w	8004af4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ac:	b2d2      	uxtb	r2, r2
 80049ae:	4611      	mov	r1, r2
 80049b0:	4618      	mov	r0, r3
 80049b2:	f008 fcbc 	bl	800d32e <USB_ReadDevInEPInterrupt>
 80049b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d057      	beq.n	8004a72 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	f003 030f 	and.w	r3, r3, #15
 80049c8:	2201      	movs	r2, #1
 80049ca:	fa02 f303 	lsl.w	r3, r2, r3
 80049ce:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	43db      	mvns	r3, r3
 80049dc:	69f9      	ldr	r1, [r7, #28]
 80049de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049e2:	4013      	ands	r3, r2
 80049e4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	015a      	lsls	r2, r3, #5
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	4413      	add	r3, r2
 80049ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f2:	461a      	mov	r2, r3
 80049f4:	2301      	movs	r3, #1
 80049f6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d132      	bne.n	8004a66 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004a00:	6879      	ldr	r1, [r7, #4]
 8004a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a04:	4613      	mov	r3, r2
 8004a06:	00db      	lsls	r3, r3, #3
 8004a08:	1a9b      	subs	r3, r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	440b      	add	r3, r1
 8004a0e:	3348      	adds	r3, #72	; 0x48
 8004a10:	6819      	ldr	r1, [r3, #0]
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a16:	4613      	mov	r3, r2
 8004a18:	00db      	lsls	r3, r3, #3
 8004a1a:	1a9b      	subs	r3, r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	4403      	add	r3, r0
 8004a20:	3344      	adds	r3, #68	; 0x44
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4419      	add	r1, r3
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	00db      	lsls	r3, r3, #3
 8004a2e:	1a9b      	subs	r3, r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4403      	add	r3, r0
 8004a34:	3348      	adds	r3, #72	; 0x48
 8004a36:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d113      	bne.n	8004a66 <HAL_PCD_IRQHandler+0x31c>
 8004a3e:	6879      	ldr	r1, [r7, #4]
 8004a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a42:	4613      	mov	r3, r2
 8004a44:	00db      	lsls	r3, r3, #3
 8004a46:	1a9b      	subs	r3, r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	440b      	add	r3, r1
 8004a4c:	3350      	adds	r3, #80	; 0x50
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d108      	bne.n	8004a66 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6818      	ldr	r0, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004a5e:	461a      	mov	r2, r3
 8004a60:	2101      	movs	r1, #1
 8004a62:	f008 fcc5 	bl	800d3f0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f00a fddc 	bl	800f62a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	f003 0308 	and.w	r3, r3, #8
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d008      	beq.n	8004a8e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7e:	015a      	lsls	r2, r3, #5
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	4413      	add	r3, r2
 8004a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a88:	461a      	mov	r2, r3
 8004a8a:	2308      	movs	r3, #8
 8004a8c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	f003 0310 	and.w	r3, r3, #16
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d008      	beq.n	8004aaa <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	015a      	lsls	r2, r3, #5
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	2310      	movs	r3, #16
 8004aa8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d008      	beq.n	8004ac6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	2340      	movs	r3, #64	; 0x40
 8004ac4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	f003 0302 	and.w	r3, r3, #2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d008      	beq.n	8004ae2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad2:	015a      	lsls	r2, r3, #5
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004adc:	461a      	mov	r2, r3
 8004ade:	2302      	movs	r3, #2
 8004ae0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004aec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 fc48 	bl	8005384 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af6:	3301      	adds	r3, #1
 8004af8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afc:	085b      	lsrs	r3, r3, #1
 8004afe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f47f af49 	bne.w	800499a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f008 fba9 	bl	800d264 <USB_ReadInterrupts>
 8004b12:	4603      	mov	r3, r0
 8004b14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b1c:	d122      	bne.n	8004b64 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	69fa      	ldr	r2, [r7, #28]
 8004b28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b2c:	f023 0301 	bic.w	r3, r3, #1
 8004b30:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d108      	bne.n	8004b4e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004b44:	2100      	movs	r1, #0
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 fe78 	bl	800583c <HAL_PCDEx_LPM_Callback>
 8004b4c:	e002      	b.n	8004b54 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f00a fde2 	bl	800f718 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	695a      	ldr	r2, [r3, #20]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004b62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f008 fb7b 	bl	800d264 <USB_ReadInterrupts>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b78:	d112      	bne.n	8004ba0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d102      	bne.n	8004b90 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f00a fd9e 	bl	800f6cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	695a      	ldr	r2, [r3, #20]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004b9e:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f008 fb5d 	bl	800d264 <USB_ReadInterrupts>
 8004baa:	4603      	mov	r3, r0
 8004bac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bb4:	d121      	bne.n	8004bfa <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	695a      	ldr	r2, [r3, #20]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004bc4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d111      	bne.n	8004bf4 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bde:	089b      	lsrs	r3, r3, #2
 8004be0:	f003 020f 	and.w	r2, r3, #15
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004bea:	2101      	movs	r1, #1
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 fe25 	bl	800583c <HAL_PCDEx_LPM_Callback>
 8004bf2:	e002      	b.n	8004bfa <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f00a fd69 	bl	800f6cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f008 fb30 	bl	800d264 <USB_ReadInterrupts>
 8004c04:	4603      	mov	r3, r0
 8004c06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c0e:	f040 80c7 	bne.w	8004da0 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	69fa      	ldr	r2, [r7, #28]
 8004c1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c20:	f023 0301 	bic.w	r3, r3, #1
 8004c24:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2110      	movs	r1, #16
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f007 fc03 	bl	800c438 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c32:	2300      	movs	r3, #0
 8004c34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c36:	e056      	b.n	8004ce6 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3a:	015a      	lsls	r2, r3, #5
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	4413      	add	r3, r2
 8004c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c44:	461a      	mov	r2, r3
 8004c46:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c4a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c4e:	015a      	lsls	r2, r3, #5
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	4413      	add	r3, r2
 8004c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c5c:	0151      	lsls	r1, r2, #5
 8004c5e:	69fa      	ldr	r2, [r7, #28]
 8004c60:	440a      	add	r2, r1
 8004c62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c6a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c6e:	015a      	lsls	r2, r3, #5
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	4413      	add	r3, r2
 8004c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c7c:	0151      	lsls	r1, r2, #5
 8004c7e:	69fa      	ldr	r2, [r7, #28]
 8004c80:	440a      	add	r2, r1
 8004c82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c8a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c8e:	015a      	lsls	r2, r3, #5
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	4413      	add	r3, r2
 8004c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c98:	461a      	mov	r2, r3
 8004c9a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c9e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca2:	015a      	lsls	r2, r3, #5
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cb0:	0151      	lsls	r1, r2, #5
 8004cb2:	69fa      	ldr	r2, [r7, #28]
 8004cb4:	440a      	add	r2, r1
 8004cb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004cbe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc2:	015a      	lsls	r2, r3, #5
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cd0:	0151      	lsls	r1, r2, #5
 8004cd2:	69fa      	ldr	r2, [r7, #28]
 8004cd4:	440a      	add	r2, r1
 8004cd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cda:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004cde:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d3a3      	bcc.n	8004c38 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf6:	69db      	ldr	r3, [r3, #28]
 8004cf8:	69fa      	ldr	r2, [r7, #28]
 8004cfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cfe:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004d02:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d016      	beq.n	8004d3a <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d16:	69fa      	ldr	r2, [r7, #28]
 8004d18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d1c:	f043 030b 	orr.w	r3, r3, #11
 8004d20:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d2c:	69fa      	ldr	r2, [r7, #28]
 8004d2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d32:	f043 030b 	orr.w	r3, r3, #11
 8004d36:	6453      	str	r3, [r2, #68]	; 0x44
 8004d38:	e015      	b.n	8004d66 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d40:	695a      	ldr	r2, [r3, #20]
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d48:	4619      	mov	r1, r3
 8004d4a:	f242 032b 	movw	r3, #8235	; 0x202b
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	69fa      	ldr	r2, [r7, #28]
 8004d5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d60:	f043 030b 	orr.w	r3, r3, #11
 8004d64:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	69fa      	ldr	r2, [r7, #28]
 8004d70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d74:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004d78:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6818      	ldr	r0, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	f008 fb30 	bl	800d3f0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	695a      	ldr	r2, [r3, #20]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004d9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f008 fa5d 	bl	800d264 <USB_ReadInterrupts>
 8004daa:	4603      	mov	r3, r0
 8004dac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004db4:	d124      	bne.n	8004e00 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f008 faf4 	bl	800d3a8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f007 fb98 	bl	800c4fa <USB_GetDevSpeed>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	461a      	mov	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681c      	ldr	r4, [r3, #0]
 8004dd6:	f001 fcbf 	bl	8006758 <HAL_RCC_GetHCLKFreq>
 8004dda:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	461a      	mov	r2, r3
 8004de4:	4620      	mov	r0, r4
 8004de6:	f007 f8db 	bl	800bfa0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f00a fc45 	bl	800f67a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	695a      	ldr	r2, [r3, #20]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004dfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f008 fa2d 	bl	800d264 <USB_ReadInterrupts>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	f003 0308 	and.w	r3, r3, #8
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	d10a      	bne.n	8004e2a <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f00a fc22 	bl	800f65e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	695a      	ldr	r2, [r3, #20]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f002 0208 	and.w	r2, r2, #8
 8004e28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f008 fa18 	bl	800d264 <USB_ReadInterrupts>
 8004e34:	4603      	mov	r3, r0
 8004e36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e3e:	d10f      	bne.n	8004e60 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004e40:	2300      	movs	r3, #0
 8004e42:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	4619      	mov	r1, r3
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f00a fc84 	bl	800f758 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	695a      	ldr	r2, [r3, #20]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004e5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4618      	mov	r0, r3
 8004e66:	f008 f9fd 	bl	800d264 <USB_ReadInterrupts>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e74:	d10f      	bne.n	8004e96 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004e76:	2300      	movs	r3, #0
 8004e78:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	4619      	mov	r1, r3
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f00a fc57 	bl	800f734 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	695a      	ldr	r2, [r3, #20]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004e94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f008 f9e2 	bl	800d264 <USB_ReadInterrupts>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eaa:	d10a      	bne.n	8004ec2 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f00a fc65 	bl	800f77c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	695a      	ldr	r2, [r3, #20]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004ec0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f008 f9cc 	bl	800d264 <USB_ReadInterrupts>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	f003 0304 	and.w	r3, r3, #4
 8004ed2:	2b04      	cmp	r3, #4
 8004ed4:	d115      	bne.n	8004f02 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	f003 0304 	and.w	r3, r3, #4
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d002      	beq.n	8004eee <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f00a fc55 	bl	800f798 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	6859      	ldr	r1, [r3, #4]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	69ba      	ldr	r2, [r7, #24]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	605a      	str	r2, [r3, #4]
 8004efe:	e000      	b.n	8004f02 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8004f00:	bf00      	nop
    }
  }
}
 8004f02:	3734      	adds	r7, #52	; 0x34
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd90      	pop	{r4, r7, pc}

08004f08 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	460b      	mov	r3, r1
 8004f12:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d101      	bne.n	8004f22 <HAL_PCD_SetAddress+0x1a>
 8004f1e:	2302      	movs	r3, #2
 8004f20:	e013      	b.n	8004f4a <HAL_PCD_SetAddress+0x42>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	78fa      	ldrb	r2, [r7, #3]
 8004f2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	78fa      	ldrb	r2, [r7, #3]
 8004f38:	4611      	mov	r1, r2
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f008 f93c 	bl	800d1b8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3708      	adds	r7, #8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b084      	sub	sp, #16
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
 8004f5a:	4608      	mov	r0, r1
 8004f5c:	4611      	mov	r1, r2
 8004f5e:	461a      	mov	r2, r3
 8004f60:	4603      	mov	r3, r0
 8004f62:	70fb      	strb	r3, [r7, #3]
 8004f64:	460b      	mov	r3, r1
 8004f66:	803b      	strh	r3, [r7, #0]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004f70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	da0f      	bge.n	8004f98 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f78:	78fb      	ldrb	r3, [r7, #3]
 8004f7a:	f003 020f 	and.w	r2, r3, #15
 8004f7e:	4613      	mov	r3, r2
 8004f80:	00db      	lsls	r3, r3, #3
 8004f82:	1a9b      	subs	r3, r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	3338      	adds	r3, #56	; 0x38
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	3304      	adds	r3, #4
 8004f8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2201      	movs	r2, #1
 8004f94:	705a      	strb	r2, [r3, #1]
 8004f96:	e00f      	b.n	8004fb8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f98:	78fb      	ldrb	r3, [r7, #3]
 8004f9a:	f003 020f 	and.w	r2, r3, #15
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	00db      	lsls	r3, r3, #3
 8004fa2:	1a9b      	subs	r3, r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	4413      	add	r3, r2
 8004fae:	3304      	adds	r3, #4
 8004fb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004fb8:	78fb      	ldrb	r3, [r7, #3]
 8004fba:	f003 030f 	and.w	r3, r3, #15
 8004fbe:	b2da      	uxtb	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004fc4:	883a      	ldrh	r2, [r7, #0]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	78ba      	ldrb	r2, [r7, #2]
 8004fce:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	785b      	ldrb	r3, [r3, #1]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d004      	beq.n	8004fe2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004fe2:	78bb      	ldrb	r3, [r7, #2]
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d102      	bne.n	8004fee <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d101      	bne.n	8004ffc <HAL_PCD_EP_Open+0xaa>
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	e00e      	b.n	800501a <HAL_PCD_EP_Open+0xc8>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68f9      	ldr	r1, [r7, #12]
 800500a:	4618      	mov	r0, r3
 800500c:	f007 fa9a 	bl	800c544 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8005018:	7afb      	ldrb	r3, [r7, #11]
}
 800501a:	4618      	mov	r0, r3
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005022:	b580      	push	{r7, lr}
 8005024:	b084      	sub	sp, #16
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
 800502a:	460b      	mov	r3, r1
 800502c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800502e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005032:	2b00      	cmp	r3, #0
 8005034:	da0f      	bge.n	8005056 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005036:	78fb      	ldrb	r3, [r7, #3]
 8005038:	f003 020f 	and.w	r2, r3, #15
 800503c:	4613      	mov	r3, r2
 800503e:	00db      	lsls	r3, r3, #3
 8005040:	1a9b      	subs	r3, r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	3338      	adds	r3, #56	; 0x38
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	4413      	add	r3, r2
 800504a:	3304      	adds	r3, #4
 800504c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2201      	movs	r2, #1
 8005052:	705a      	strb	r2, [r3, #1]
 8005054:	e00f      	b.n	8005076 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005056:	78fb      	ldrb	r3, [r7, #3]
 8005058:	f003 020f 	and.w	r2, r3, #15
 800505c:	4613      	mov	r3, r2
 800505e:	00db      	lsls	r3, r3, #3
 8005060:	1a9b      	subs	r3, r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	4413      	add	r3, r2
 800506c:	3304      	adds	r3, #4
 800506e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005076:	78fb      	ldrb	r3, [r7, #3]
 8005078:	f003 030f 	and.w	r3, r3, #15
 800507c:	b2da      	uxtb	r2, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005088:	2b01      	cmp	r3, #1
 800508a:	d101      	bne.n	8005090 <HAL_PCD_EP_Close+0x6e>
 800508c:	2302      	movs	r3, #2
 800508e:	e00e      	b.n	80050ae <HAL_PCD_EP_Close+0x8c>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68f9      	ldr	r1, [r7, #12]
 800509e:	4618      	mov	r0, r3
 80050a0:	f007 fad8 	bl	800c654 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3710      	adds	r7, #16
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b086      	sub	sp, #24
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	60f8      	str	r0, [r7, #12]
 80050be:	607a      	str	r2, [r7, #4]
 80050c0:	603b      	str	r3, [r7, #0]
 80050c2:	460b      	mov	r3, r1
 80050c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050c6:	7afb      	ldrb	r3, [r7, #11]
 80050c8:	f003 020f 	and.w	r2, r3, #15
 80050cc:	4613      	mov	r3, r2
 80050ce:	00db      	lsls	r3, r3, #3
 80050d0:	1a9b      	subs	r3, r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	4413      	add	r3, r2
 80050dc:	3304      	adds	r3, #4
 80050de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	683a      	ldr	r2, [r7, #0]
 80050ea:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	2200      	movs	r2, #0
 80050f0:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	2200      	movs	r2, #0
 80050f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050f8:	7afb      	ldrb	r3, [r7, #11]
 80050fa:	f003 030f 	and.w	r3, r3, #15
 80050fe:	b2da      	uxtb	r2, r3
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d102      	bne.n	8005112 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005112:	7afb      	ldrb	r3, [r7, #11]
 8005114:	f003 030f 	and.w	r3, r3, #15
 8005118:	2b00      	cmp	r3, #0
 800511a:	d109      	bne.n	8005130 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6818      	ldr	r0, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	b2db      	uxtb	r3, r3
 8005126:	461a      	mov	r2, r3
 8005128:	6979      	ldr	r1, [r7, #20]
 800512a:	f007 fdbb 	bl	800cca4 <USB_EP0StartXfer>
 800512e:	e008      	b.n	8005142 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6818      	ldr	r0, [r3, #0]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	b2db      	uxtb	r3, r3
 800513a:	461a      	mov	r2, r3
 800513c:	6979      	ldr	r1, [r7, #20]
 800513e:	f007 fb65 	bl	800c80c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3718      	adds	r7, #24
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	460b      	mov	r3, r1
 8005156:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005158:	78fb      	ldrb	r3, [r7, #3]
 800515a:	f003 020f 	and.w	r2, r3, #15
 800515e:	6879      	ldr	r1, [r7, #4]
 8005160:	4613      	mov	r3, r2
 8005162:	00db      	lsls	r3, r3, #3
 8005164:	1a9b      	subs	r3, r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	440b      	add	r3, r1
 800516a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800516e:	681b      	ldr	r3, [r3, #0]
}
 8005170:	4618      	mov	r0, r3
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	607a      	str	r2, [r7, #4]
 8005186:	603b      	str	r3, [r7, #0]
 8005188:	460b      	mov	r3, r1
 800518a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800518c:	7afb      	ldrb	r3, [r7, #11]
 800518e:	f003 020f 	and.w	r2, r3, #15
 8005192:	4613      	mov	r3, r2
 8005194:	00db      	lsls	r3, r3, #3
 8005196:	1a9b      	subs	r3, r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	3338      	adds	r3, #56	; 0x38
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	4413      	add	r3, r2
 80051a0:	3304      	adds	r3, #4
 80051a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	683a      	ldr	r2, [r7, #0]
 80051ae:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	2200      	movs	r2, #0
 80051b4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	2201      	movs	r2, #1
 80051ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051bc:	7afb      	ldrb	r3, [r7, #11]
 80051be:	f003 030f 	and.w	r3, r3, #15
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d102      	bne.n	80051d6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80051d6:	7afb      	ldrb	r3, [r7, #11]
 80051d8:	f003 030f 	and.w	r3, r3, #15
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d109      	bne.n	80051f4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6818      	ldr	r0, [r3, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	461a      	mov	r2, r3
 80051ec:	6979      	ldr	r1, [r7, #20]
 80051ee:	f007 fd59 	bl	800cca4 <USB_EP0StartXfer>
 80051f2:	e008      	b.n	8005206 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6818      	ldr	r0, [r3, #0]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	461a      	mov	r2, r3
 8005200:	6979      	ldr	r1, [r7, #20]
 8005202:	f007 fb03 	bl	800c80c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3718      	adds	r7, #24
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	460b      	mov	r3, r1
 800521a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800521c:	78fb      	ldrb	r3, [r7, #3]
 800521e:	f003 020f 	and.w	r2, r3, #15
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	429a      	cmp	r2, r3
 8005228:	d901      	bls.n	800522e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e050      	b.n	80052d0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800522e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005232:	2b00      	cmp	r3, #0
 8005234:	da0f      	bge.n	8005256 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005236:	78fb      	ldrb	r3, [r7, #3]
 8005238:	f003 020f 	and.w	r2, r3, #15
 800523c:	4613      	mov	r3, r2
 800523e:	00db      	lsls	r3, r3, #3
 8005240:	1a9b      	subs	r3, r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	3338      	adds	r3, #56	; 0x38
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	4413      	add	r3, r2
 800524a:	3304      	adds	r3, #4
 800524c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2201      	movs	r2, #1
 8005252:	705a      	strb	r2, [r3, #1]
 8005254:	e00d      	b.n	8005272 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005256:	78fa      	ldrb	r2, [r7, #3]
 8005258:	4613      	mov	r3, r2
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	1a9b      	subs	r3, r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	4413      	add	r3, r2
 8005268:	3304      	adds	r3, #4
 800526a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2201      	movs	r2, #1
 8005276:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005278:	78fb      	ldrb	r3, [r7, #3]
 800527a:	f003 030f 	and.w	r3, r3, #15
 800527e:	b2da      	uxtb	r2, r3
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800528a:	2b01      	cmp	r3, #1
 800528c:	d101      	bne.n	8005292 <HAL_PCD_EP_SetStall+0x82>
 800528e:	2302      	movs	r3, #2
 8005290:	e01e      	b.n	80052d0 <HAL_PCD_EP_SetStall+0xc0>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68f9      	ldr	r1, [r7, #12]
 80052a0:	4618      	mov	r0, r3
 80052a2:	f007 feb5 	bl	800d010 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80052a6:	78fb      	ldrb	r3, [r7, #3]
 80052a8:	f003 030f 	and.w	r3, r3, #15
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10a      	bne.n	80052c6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6818      	ldr	r0, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	b2d9      	uxtb	r1, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80052c0:	461a      	mov	r2, r3
 80052c2:	f008 f895 	bl	800d3f0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	460b      	mov	r3, r1
 80052e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80052e4:	78fb      	ldrb	r3, [r7, #3]
 80052e6:	f003 020f 	and.w	r2, r3, #15
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d901      	bls.n	80052f6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e042      	b.n	800537c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80052f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	da0f      	bge.n	800531e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052fe:	78fb      	ldrb	r3, [r7, #3]
 8005300:	f003 020f 	and.w	r2, r3, #15
 8005304:	4613      	mov	r3, r2
 8005306:	00db      	lsls	r3, r3, #3
 8005308:	1a9b      	subs	r3, r3, r2
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	3338      	adds	r3, #56	; 0x38
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	4413      	add	r3, r2
 8005312:	3304      	adds	r3, #4
 8005314:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2201      	movs	r2, #1
 800531a:	705a      	strb	r2, [r3, #1]
 800531c:	e00f      	b.n	800533e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800531e:	78fb      	ldrb	r3, [r7, #3]
 8005320:	f003 020f 	and.w	r2, r3, #15
 8005324:	4613      	mov	r3, r2
 8005326:	00db      	lsls	r3, r3, #3
 8005328:	1a9b      	subs	r3, r3, r2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	4413      	add	r3, r2
 8005334:	3304      	adds	r3, #4
 8005336:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005344:	78fb      	ldrb	r3, [r7, #3]
 8005346:	f003 030f 	and.w	r3, r3, #15
 800534a:	b2da      	uxtb	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005356:	2b01      	cmp	r3, #1
 8005358:	d101      	bne.n	800535e <HAL_PCD_EP_ClrStall+0x86>
 800535a:	2302      	movs	r3, #2
 800535c:	e00e      	b.n	800537c <HAL_PCD_EP_ClrStall+0xa4>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2201      	movs	r2, #1
 8005362:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68f9      	ldr	r1, [r7, #12]
 800536c:	4618      	mov	r0, r3
 800536e:	f007 febd 	bl	800d0ec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	3710      	adds	r7, #16
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b08a      	sub	sp, #40	; 0x28
 8005388:	af02      	add	r7, sp, #8
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	4613      	mov	r3, r2
 800539c:	00db      	lsls	r3, r3, #3
 800539e:	1a9b      	subs	r3, r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	3338      	adds	r3, #56	; 0x38
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	4413      	add	r3, r2
 80053a8:	3304      	adds	r3, #4
 80053aa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	699a      	ldr	r2, [r3, #24]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	695b      	ldr	r3, [r3, #20]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d901      	bls.n	80053bc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e06c      	b.n	8005496 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	695a      	ldr	r2, [r3, #20]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	69fa      	ldr	r2, [r7, #28]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d902      	bls.n	80053d8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	3303      	adds	r3, #3
 80053dc:	089b      	lsrs	r3, r3, #2
 80053de:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80053e0:	e02b      	b.n	800543a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	695a      	ldr	r2, [r3, #20]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	69fa      	ldr	r2, [r7, #28]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d902      	bls.n	80053fe <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	3303      	adds	r3, #3
 8005402:	089b      	lsrs	r3, r3, #2
 8005404:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	68d9      	ldr	r1, [r3, #12]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	b2da      	uxtb	r2, r3
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005416:	b2db      	uxtb	r3, r3
 8005418:	9300      	str	r3, [sp, #0]
 800541a:	4603      	mov	r3, r0
 800541c:	6978      	ldr	r0, [r7, #20]
 800541e:	f007 fd99 	bl	800cf54 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	68da      	ldr	r2, [r3, #12]
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	441a      	add	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	699a      	ldr	r2, [r3, #24]
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	441a      	add	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	015a      	lsls	r2, r3, #5
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	4413      	add	r3, r2
 8005442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	b29b      	uxth	r3, r3
 800544a:	69ba      	ldr	r2, [r7, #24]
 800544c:	429a      	cmp	r2, r3
 800544e:	d809      	bhi.n	8005464 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	699a      	ldr	r2, [r3, #24]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005458:	429a      	cmp	r2, r3
 800545a:	d203      	bcs.n	8005464 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1be      	bne.n	80053e2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	695a      	ldr	r2, [r3, #20]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	429a      	cmp	r2, r3
 800546e:	d811      	bhi.n	8005494 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	f003 030f 	and.w	r3, r3, #15
 8005476:	2201      	movs	r2, #1
 8005478:	fa02 f303 	lsl.w	r3, r2, r3
 800547c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005484:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	43db      	mvns	r3, r3
 800548a:	6939      	ldr	r1, [r7, #16]
 800548c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005490:	4013      	ands	r3, r2
 8005492:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3720      	adds	r7, #32
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
	...

080054a0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	333c      	adds	r3, #60	; 0x3c
 80054b8:	3304      	adds	r3, #4
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	015a      	lsls	r2, r3, #5
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	4413      	add	r3, r2
 80054c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	f040 80a0 	bne.w	8005618 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	f003 0308 	and.w	r3, r3, #8
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d015      	beq.n	800550e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	4a72      	ldr	r2, [pc, #456]	; (80056b0 <PCD_EP_OutXfrComplete_int+0x210>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	f240 80dd 	bls.w	80056a6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f000 80d7 	beq.w	80056a6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	015a      	lsls	r2, r3, #5
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	4413      	add	r3, r2
 8005500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005504:	461a      	mov	r2, r3
 8005506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800550a:	6093      	str	r3, [r2, #8]
 800550c:	e0cb      	b.n	80056a6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	f003 0320 	and.w	r3, r3, #32
 8005514:	2b00      	cmp	r3, #0
 8005516:	d009      	beq.n	800552c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	4413      	add	r3, r2
 8005520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005524:	461a      	mov	r2, r3
 8005526:	2320      	movs	r3, #32
 8005528:	6093      	str	r3, [r2, #8]
 800552a:	e0bc      	b.n	80056a6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005532:	2b00      	cmp	r3, #0
 8005534:	f040 80b7 	bne.w	80056a6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	4a5d      	ldr	r2, [pc, #372]	; (80056b0 <PCD_EP_OutXfrComplete_int+0x210>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d90f      	bls.n	8005560 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00a      	beq.n	8005560 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	015a      	lsls	r2, r3, #5
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	4413      	add	r3, r2
 8005552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005556:	461a      	mov	r2, r3
 8005558:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800555c:	6093      	str	r3, [r2, #8]
 800555e:	e0a2      	b.n	80056a6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005560:	6879      	ldr	r1, [r7, #4]
 8005562:	683a      	ldr	r2, [r7, #0]
 8005564:	4613      	mov	r3, r2
 8005566:	00db      	lsls	r3, r3, #3
 8005568:	1a9b      	subs	r3, r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	440b      	add	r3, r1
 800556e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005572:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	0159      	lsls	r1, r3, #5
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	440b      	add	r3, r1
 800557c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005586:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	4613      	mov	r3, r2
 800558e:	00db      	lsls	r3, r3, #3
 8005590:	1a9b      	subs	r3, r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4403      	add	r3, r0
 8005596:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800559a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800559c:	6879      	ldr	r1, [r7, #4]
 800559e:	683a      	ldr	r2, [r7, #0]
 80055a0:	4613      	mov	r3, r2
 80055a2:	00db      	lsls	r3, r3, #3
 80055a4:	1a9b      	subs	r3, r3, r2
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	440b      	add	r3, r1
 80055aa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80055ae:	6819      	ldr	r1, [r3, #0]
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	683a      	ldr	r2, [r7, #0]
 80055b4:	4613      	mov	r3, r2
 80055b6:	00db      	lsls	r3, r3, #3
 80055b8:	1a9b      	subs	r3, r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4403      	add	r3, r0
 80055be:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4419      	add	r1, r3
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	683a      	ldr	r2, [r7, #0]
 80055ca:	4613      	mov	r3, r2
 80055cc:	00db      	lsls	r3, r3, #3
 80055ce:	1a9b      	subs	r3, r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4403      	add	r3, r0
 80055d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80055d8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d114      	bne.n	800560a <PCD_EP_OutXfrComplete_int+0x16a>
 80055e0:	6879      	ldr	r1, [r7, #4]
 80055e2:	683a      	ldr	r2, [r7, #0]
 80055e4:	4613      	mov	r3, r2
 80055e6:	00db      	lsls	r3, r3, #3
 80055e8:	1a9b      	subs	r3, r3, r2
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	440b      	add	r3, r1
 80055ee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d108      	bne.n	800560a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6818      	ldr	r0, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005602:	461a      	mov	r2, r3
 8005604:	2101      	movs	r1, #1
 8005606:	f007 fef3 	bl	800d3f0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	b2db      	uxtb	r3, r3
 800560e:	4619      	mov	r1, r3
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f009 ffef 	bl	800f5f4 <HAL_PCD_DataOutStageCallback>
 8005616:	e046      	b.n	80056a6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4a26      	ldr	r2, [pc, #152]	; (80056b4 <PCD_EP_OutXfrComplete_int+0x214>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d124      	bne.n	800566a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00a      	beq.n	8005640 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	015a      	lsls	r2, r3, #5
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	4413      	add	r3, r2
 8005632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005636:	461a      	mov	r2, r3
 8005638:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800563c:	6093      	str	r3, [r2, #8]
 800563e:	e032      	b.n	80056a6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	f003 0320 	and.w	r3, r3, #32
 8005646:	2b00      	cmp	r3, #0
 8005648:	d008      	beq.n	800565c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	015a      	lsls	r2, r3, #5
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	4413      	add	r3, r2
 8005652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005656:	461a      	mov	r2, r3
 8005658:	2320      	movs	r3, #32
 800565a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	b2db      	uxtb	r3, r3
 8005660:	4619      	mov	r1, r3
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f009 ffc6 	bl	800f5f4 <HAL_PCD_DataOutStageCallback>
 8005668:	e01d      	b.n	80056a6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d114      	bne.n	800569a <PCD_EP_OutXfrComplete_int+0x1fa>
 8005670:	6879      	ldr	r1, [r7, #4]
 8005672:	683a      	ldr	r2, [r7, #0]
 8005674:	4613      	mov	r3, r2
 8005676:	00db      	lsls	r3, r3, #3
 8005678:	1a9b      	subs	r3, r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	440b      	add	r3, r1
 800567e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d108      	bne.n	800569a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6818      	ldr	r0, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005692:	461a      	mov	r2, r3
 8005694:	2100      	movs	r1, #0
 8005696:	f007 feab 	bl	800d3f0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	b2db      	uxtb	r3, r3
 800569e:	4619      	mov	r1, r3
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f009 ffa7 	bl	800f5f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3718      	adds	r7, #24
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	4f54300a 	.word	0x4f54300a
 80056b4:	4f54310a 	.word	0x4f54310a

080056b8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	333c      	adds	r3, #60	; 0x3c
 80056d0:	3304      	adds	r3, #4
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	015a      	lsls	r2, r3, #5
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	4413      	add	r3, r2
 80056de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	4a15      	ldr	r2, [pc, #84]	; (8005740 <PCD_EP_OutSetupPacket_int+0x88>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d90e      	bls.n	800570c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d009      	beq.n	800570c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	015a      	lsls	r2, r3, #5
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	4413      	add	r3, r2
 8005700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005704:	461a      	mov	r2, r3
 8005706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800570a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f009 ff5f 	bl	800f5d0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	4a0a      	ldr	r2, [pc, #40]	; (8005740 <PCD_EP_OutSetupPacket_int+0x88>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d90c      	bls.n	8005734 <PCD_EP_OutSetupPacket_int+0x7c>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d108      	bne.n	8005734 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6818      	ldr	r0, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800572c:	461a      	mov	r2, r3
 800572e:	2101      	movs	r1, #1
 8005730:	f007 fe5e 	bl	800d3f0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3718      	adds	r7, #24
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	4f54300a 	.word	0x4f54300a

08005744 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	460b      	mov	r3, r1
 800574e:	70fb      	strb	r3, [r7, #3]
 8005750:	4613      	mov	r3, r2
 8005752:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800575c:	78fb      	ldrb	r3, [r7, #3]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d107      	bne.n	8005772 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005762:	883b      	ldrh	r3, [r7, #0]
 8005764:	0419      	lsls	r1, r3, #16
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	430a      	orrs	r2, r1
 800576e:	629a      	str	r2, [r3, #40]	; 0x28
 8005770:	e028      	b.n	80057c4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005778:	0c1b      	lsrs	r3, r3, #16
 800577a:	68ba      	ldr	r2, [r7, #8]
 800577c:	4413      	add	r3, r2
 800577e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005780:	2300      	movs	r3, #0
 8005782:	73fb      	strb	r3, [r7, #15]
 8005784:	e00d      	b.n	80057a2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	7bfb      	ldrb	r3, [r7, #15]
 800578c:	3340      	adds	r3, #64	; 0x40
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4413      	add	r3, r2
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	0c1b      	lsrs	r3, r3, #16
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	4413      	add	r3, r2
 800579a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800579c:	7bfb      	ldrb	r3, [r7, #15]
 800579e:	3301      	adds	r3, #1
 80057a0:	73fb      	strb	r3, [r7, #15]
 80057a2:	7bfa      	ldrb	r2, [r7, #15]
 80057a4:	78fb      	ldrb	r3, [r7, #3]
 80057a6:	3b01      	subs	r3, #1
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d3ec      	bcc.n	8005786 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80057ac:	883b      	ldrh	r3, [r7, #0]
 80057ae:	0418      	lsls	r0, r3, #16
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6819      	ldr	r1, [r3, #0]
 80057b4:	78fb      	ldrb	r3, [r7, #3]
 80057b6:	3b01      	subs	r3, #1
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	4302      	orrs	r2, r0
 80057bc:	3340      	adds	r3, #64	; 0x40
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	440b      	add	r3, r1
 80057c2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3714      	adds	r7, #20
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b083      	sub	sp, #12
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
 80057da:	460b      	mov	r3, r1
 80057dc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	887a      	ldrh	r2, [r7, #2]
 80057e4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2201      	movs	r2, #1
 8005806:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005822:	4b05      	ldr	r3, [pc, #20]	; (8005838 <HAL_PCDEx_ActivateLPM+0x44>)
 8005824:	4313      	orrs	r3, r2
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3714      	adds	r7, #20
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr
 8005838:	10000003 	.word	0x10000003

0800583c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	460b      	mov	r3, r1
 8005846:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800585c:	4b19      	ldr	r3, [pc, #100]	; (80058c4 <HAL_PWREx_ConfigSupply+0x70>)
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	f003 0304 	and.w	r3, r3, #4
 8005864:	2b04      	cmp	r3, #4
 8005866:	d00a      	beq.n	800587e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005868:	4b16      	ldr	r3, [pc, #88]	; (80058c4 <HAL_PWREx_ConfigSupply+0x70>)
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	f003 0307 	and.w	r3, r3, #7
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	429a      	cmp	r2, r3
 8005874:	d001      	beq.n	800587a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e01f      	b.n	80058ba <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800587a:	2300      	movs	r3, #0
 800587c:	e01d      	b.n	80058ba <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800587e:	4b11      	ldr	r3, [pc, #68]	; (80058c4 <HAL_PWREx_ConfigSupply+0x70>)
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	f023 0207 	bic.w	r2, r3, #7
 8005886:	490f      	ldr	r1, [pc, #60]	; (80058c4 <HAL_PWREx_ConfigSupply+0x70>)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4313      	orrs	r3, r2
 800588c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800588e:	f7fb fe7f 	bl	8001590 <HAL_GetTick>
 8005892:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005894:	e009      	b.n	80058aa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005896:	f7fb fe7b 	bl	8001590 <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058a4:	d901      	bls.n	80058aa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e007      	b.n	80058ba <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80058aa:	4b06      	ldr	r3, [pc, #24]	; (80058c4 <HAL_PWREx_ConfigSupply+0x70>)
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058b6:	d1ee      	bne.n	8005896 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3710      	adds	r7, #16
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	58024800 	.word	0x58024800

080058c8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80058c8:	b480      	push	{r7}
 80058ca:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80058cc:	4b05      	ldr	r3, [pc, #20]	; (80058e4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	4a04      	ldr	r2, [pc, #16]	; (80058e4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80058d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058d6:	60d3      	str	r3, [r2, #12]
}
 80058d8:	bf00      	nop
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	58024800 	.word	0x58024800

080058e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b08c      	sub	sp, #48	; 0x30
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d101      	bne.n	80058fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e3ff      	b.n	80060fa <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	f000 8087 	beq.w	8005a16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005908:	4b99      	ldr	r3, [pc, #612]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005910:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005912:	4b97      	ldr	r3, [pc, #604]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005916:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591a:	2b10      	cmp	r3, #16
 800591c:	d007      	beq.n	800592e <HAL_RCC_OscConfig+0x46>
 800591e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005920:	2b18      	cmp	r3, #24
 8005922:	d110      	bne.n	8005946 <HAL_RCC_OscConfig+0x5e>
 8005924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005926:	f003 0303 	and.w	r3, r3, #3
 800592a:	2b02      	cmp	r3, #2
 800592c:	d10b      	bne.n	8005946 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800592e:	4b90      	ldr	r3, [pc, #576]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d06c      	beq.n	8005a14 <HAL_RCC_OscConfig+0x12c>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d168      	bne.n	8005a14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e3d9      	b.n	80060fa <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800594e:	d106      	bne.n	800595e <HAL_RCC_OscConfig+0x76>
 8005950:	4b87      	ldr	r3, [pc, #540]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a86      	ldr	r2, [pc, #536]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005956:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800595a:	6013      	str	r3, [r2, #0]
 800595c:	e02e      	b.n	80059bc <HAL_RCC_OscConfig+0xd4>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10c      	bne.n	8005980 <HAL_RCC_OscConfig+0x98>
 8005966:	4b82      	ldr	r3, [pc, #520]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a81      	ldr	r2, [pc, #516]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 800596c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005970:	6013      	str	r3, [r2, #0]
 8005972:	4b7f      	ldr	r3, [pc, #508]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a7e      	ldr	r2, [pc, #504]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005978:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800597c:	6013      	str	r3, [r2, #0]
 800597e:	e01d      	b.n	80059bc <HAL_RCC_OscConfig+0xd4>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005988:	d10c      	bne.n	80059a4 <HAL_RCC_OscConfig+0xbc>
 800598a:	4b79      	ldr	r3, [pc, #484]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a78      	ldr	r2, [pc, #480]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005990:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005994:	6013      	str	r3, [r2, #0]
 8005996:	4b76      	ldr	r3, [pc, #472]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a75      	ldr	r2, [pc, #468]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 800599c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059a0:	6013      	str	r3, [r2, #0]
 80059a2:	e00b      	b.n	80059bc <HAL_RCC_OscConfig+0xd4>
 80059a4:	4b72      	ldr	r3, [pc, #456]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a71      	ldr	r2, [pc, #452]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 80059aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059ae:	6013      	str	r3, [r2, #0]
 80059b0:	4b6f      	ldr	r3, [pc, #444]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a6e      	ldr	r2, [pc, #440]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 80059b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d013      	beq.n	80059ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c4:	f7fb fde4 	bl	8001590 <HAL_GetTick>
 80059c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80059ca:	e008      	b.n	80059de <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059cc:	f7fb fde0 	bl	8001590 <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	2b64      	cmp	r3, #100	; 0x64
 80059d8:	d901      	bls.n	80059de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e38d      	b.n	80060fa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80059de:	4b64      	ldr	r3, [pc, #400]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d0f0      	beq.n	80059cc <HAL_RCC_OscConfig+0xe4>
 80059ea:	e014      	b.n	8005a16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ec:	f7fb fdd0 	bl	8001590 <HAL_GetTick>
 80059f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80059f2:	e008      	b.n	8005a06 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059f4:	f7fb fdcc 	bl	8001590 <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	2b64      	cmp	r3, #100	; 0x64
 8005a00:	d901      	bls.n	8005a06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e379      	b.n	80060fa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005a06:	4b5a      	ldr	r3, [pc, #360]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1f0      	bne.n	80059f4 <HAL_RCC_OscConfig+0x10c>
 8005a12:	e000      	b.n	8005a16 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0302 	and.w	r3, r3, #2
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f000 80ae 	beq.w	8005b80 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a24:	4b52      	ldr	r3, [pc, #328]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a2c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a2e:	4b50      	ldr	r3, [pc, #320]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a32:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005a34:	6a3b      	ldr	r3, [r7, #32]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d007      	beq.n	8005a4a <HAL_RCC_OscConfig+0x162>
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
 8005a3c:	2b18      	cmp	r3, #24
 8005a3e:	d13a      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x1ce>
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	f003 0303 	and.w	r3, r3, #3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d135      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a4a:	4b49      	ldr	r3, [pc, #292]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0304 	and.w	r3, r3, #4
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d005      	beq.n	8005a62 <HAL_RCC_OscConfig+0x17a>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d101      	bne.n	8005a62 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e34b      	b.n	80060fa <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a62:	f7fb fdc3 	bl	80015ec <HAL_GetREVID>
 8005a66:	4602      	mov	r2, r0
 8005a68:	f241 0303 	movw	r3, #4099	; 0x1003
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d817      	bhi.n	8005aa0 <HAL_RCC_OscConfig+0x1b8>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	2b40      	cmp	r3, #64	; 0x40
 8005a76:	d108      	bne.n	8005a8a <HAL_RCC_OscConfig+0x1a2>
 8005a78:	4b3d      	ldr	r3, [pc, #244]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005a80:	4a3b      	ldr	r2, [pc, #236]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005a82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a86:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a88:	e07a      	b.n	8005b80 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a8a:	4b39      	ldr	r3, [pc, #228]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	031b      	lsls	r3, r3, #12
 8005a98:	4935      	ldr	r1, [pc, #212]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a9e:	e06f      	b.n	8005b80 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aa0:	4b33      	ldr	r3, [pc, #204]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	061b      	lsls	r3, r3, #24
 8005aae:	4930      	ldr	r1, [pc, #192]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ab4:	e064      	b.n	8005b80 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d045      	beq.n	8005b4a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005abe:	4b2c      	ldr	r3, [pc, #176]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f023 0219 	bic.w	r2, r3, #25
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	4929      	ldr	r1, [pc, #164]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005acc:	4313      	orrs	r3, r2
 8005ace:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ad0:	f7fb fd5e 	bl	8001590 <HAL_GetTick>
 8005ad4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ad6:	e008      	b.n	8005aea <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ad8:	f7fb fd5a 	bl	8001590 <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d901      	bls.n	8005aea <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e307      	b.n	80060fa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005aea:	4b21      	ldr	r3, [pc, #132]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0304 	and.w	r3, r3, #4
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d0f0      	beq.n	8005ad8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005af6:	f7fb fd79 	bl	80015ec <HAL_GetREVID>
 8005afa:	4602      	mov	r2, r0
 8005afc:	f241 0303 	movw	r3, #4099	; 0x1003
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d817      	bhi.n	8005b34 <HAL_RCC_OscConfig+0x24c>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	2b40      	cmp	r3, #64	; 0x40
 8005b0a:	d108      	bne.n	8005b1e <HAL_RCC_OscConfig+0x236>
 8005b0c:	4b18      	ldr	r3, [pc, #96]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005b14:	4a16      	ldr	r2, [pc, #88]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005b16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b1a:	6053      	str	r3, [r2, #4]
 8005b1c:	e030      	b.n	8005b80 <HAL_RCC_OscConfig+0x298>
 8005b1e:	4b14      	ldr	r3, [pc, #80]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	031b      	lsls	r3, r3, #12
 8005b2c:	4910      	ldr	r1, [pc, #64]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	604b      	str	r3, [r1, #4]
 8005b32:	e025      	b.n	8005b80 <HAL_RCC_OscConfig+0x298>
 8005b34:	4b0e      	ldr	r3, [pc, #56]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	061b      	lsls	r3, r3, #24
 8005b42:	490b      	ldr	r1, [pc, #44]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	604b      	str	r3, [r1, #4]
 8005b48:	e01a      	b.n	8005b80 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b4a:	4b09      	ldr	r3, [pc, #36]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a08      	ldr	r2, [pc, #32]	; (8005b70 <HAL_RCC_OscConfig+0x288>)
 8005b50:	f023 0301 	bic.w	r3, r3, #1
 8005b54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b56:	f7fb fd1b 	bl	8001590 <HAL_GetTick>
 8005b5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005b5c:	e00a      	b.n	8005b74 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b5e:	f7fb fd17 	bl	8001590 <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d903      	bls.n	8005b74 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e2c4      	b.n	80060fa <HAL_RCC_OscConfig+0x812>
 8005b70:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005b74:	4ba4      	ldr	r3, [pc, #656]	; (8005e08 <HAL_RCC_OscConfig+0x520>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0304 	and.w	r3, r3, #4
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d1ee      	bne.n	8005b5e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0310 	and.w	r3, r3, #16
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f000 80a9 	beq.w	8005ce0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b8e:	4b9e      	ldr	r3, [pc, #632]	; (8005e08 <HAL_RCC_OscConfig+0x520>)
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b96:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005b98:	4b9b      	ldr	r3, [pc, #620]	; (8005e08 <HAL_RCC_OscConfig+0x520>)
 8005b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	2b08      	cmp	r3, #8
 8005ba2:	d007      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x2cc>
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	2b18      	cmp	r3, #24
 8005ba8:	d13a      	bne.n	8005c20 <HAL_RCC_OscConfig+0x338>
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	f003 0303 	and.w	r3, r3, #3
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d135      	bne.n	8005c20 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005bb4:	4b94      	ldr	r3, [pc, #592]	; (8005e08 <HAL_RCC_OscConfig+0x520>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d005      	beq.n	8005bcc <HAL_RCC_OscConfig+0x2e4>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	69db      	ldr	r3, [r3, #28]
 8005bc4:	2b80      	cmp	r3, #128	; 0x80
 8005bc6:	d001      	beq.n	8005bcc <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e296      	b.n	80060fa <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005bcc:	f7fb fd0e 	bl	80015ec <HAL_GetREVID>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	f241 0303 	movw	r3, #4099	; 0x1003
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d817      	bhi.n	8005c0a <HAL_RCC_OscConfig+0x322>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	2b20      	cmp	r3, #32
 8005be0:	d108      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x30c>
 8005be2:	4b89      	ldr	r3, [pc, #548]	; (8005e08 <HAL_RCC_OscConfig+0x520>)
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005bea:	4a87      	ldr	r2, [pc, #540]	; (8005e08 <HAL_RCC_OscConfig+0x520>)
 8005bec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bf0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005bf2:	e075      	b.n	8005ce0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005bf4:	4b84      	ldr	r3, [pc, #528]	; (8005e08 <HAL_RCC_OscConfig+0x520>)
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a1b      	ldr	r3, [r3, #32]
 8005c00:	069b      	lsls	r3, r3, #26
 8005c02:	4981      	ldr	r1, [pc, #516]	; (8005e08 <HAL_RCC_OscConfig+0x520>)
 8005c04:	4313      	orrs	r3, r2
 8005c06:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c08:	e06a      	b.n	8005ce0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c0a:	4b7f      	ldr	r3, [pc, #508]	; (8005e08 <HAL_RCC_OscConfig+0x520>)
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	061b      	lsls	r3, r3, #24
 8005c18:	497b      	ldr	r1, [pc, #492]	; (8005e08 <HAL_RCC_OscConfig+0x520>)
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c1e:	e05f      	b.n	8005ce0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	69db      	ldr	r3, [r3, #28]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d042      	beq.n	8005cae <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005c28:	4b77      	ldr	r3, [pc, #476]	; (8005e08 <HAL_RCC_OscConfig+0x520>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a76      	ldr	r2, [pc, #472]	; (8005e08 <HAL_RCC_OscConfig+0x520>)
 8005c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c34:	f7fb fcac 	bl	8001590 <HAL_GetTick>
 8005c38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c3a:	e008      	b.n	8005c4e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005c3c:	f7fb fca8 	bl	8001590 <HAL_GetTick>
 8005c40:	4602      	mov	r2, r0
 8005c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d901      	bls.n	8005c4e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e255      	b.n	80060fa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c4e:	4b6e      	ldr	r3, [pc, #440]	; (8005e08 <HAL_RCC_OscConfig+0x520>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d0f0      	beq.n	8005c3c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c5a:	f7fb fcc7 	bl	80015ec <HAL_GetREVID>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	f241 0303 	movw	r3, #4099	; 0x1003
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d817      	bhi.n	8005c98 <HAL_RCC_OscConfig+0x3b0>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a1b      	ldr	r3, [r3, #32]
 8005c6c:	2b20      	cmp	r3, #32
 8005c6e:	d108      	bne.n	8005c82 <HAL_RCC_OscConfig+0x39a>
 8005c70:	4b65      	ldr	r3, [pc, #404]	; (8005e08 <HAL_RCC_OscConfig+0x520>)
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005c78:	4a63      	ldr	r2, [pc, #396]	; (8005e08 <HAL_RCC_OscConfig+0x520>)
 8005c7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c7e:	6053      	str	r3, [r2, #4]
 8005c80:	e02e      	b.n	8005ce0 <HAL_RCC_OscConfig+0x3f8>
 8005c82:	4b61      	ldr	r3, [pc, #388]	; (8005e08 <HAL_RCC_OscConfig+0x520>)
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	069b      	lsls	r3, r3, #26
 8005c90:	495d      	ldr	r1, [pc, #372]	; (8005e08 <HAL_RCC_OscConfig+0x520>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	604b      	str	r3, [r1, #4]
 8005c96:	e023      	b.n	8005ce0 <HAL_RCC_OscConfig+0x3f8>
 8005c98:	4b5b      	ldr	r3, [pc, #364]	; (8005e08 <HAL_RCC_OscConfig+0x520>)
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a1b      	ldr	r3, [r3, #32]
 8005ca4:	061b      	lsls	r3, r3, #24
 8005ca6:	4958      	ldr	r1, [pc, #352]	; (8005e08 <HAL_RCC_OscConfig+0x520>)
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	60cb      	str	r3, [r1, #12]
 8005cac:	e018      	b.n	8005ce0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005cae:	4b56      	ldr	r3, [pc, #344]	; (8005e08 <HAL_RCC_OscConfig+0x520>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a55      	ldr	r2, [pc, #340]	; (8005e08 <HAL_RCC_OscConfig+0x520>)
 8005cb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cba:	f7fb fc69 	bl	8001590 <HAL_GetTick>
 8005cbe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005cc0:	e008      	b.n	8005cd4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005cc2:	f7fb fc65 	bl	8001590 <HAL_GetTick>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d901      	bls.n	8005cd4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e212      	b.n	80060fa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005cd4:	4b4c      	ldr	r3, [pc, #304]	; (8005e08 <HAL_RCC_OscConfig+0x520>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1f0      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0308 	and.w	r3, r3, #8
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d036      	beq.n	8005d5a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	695b      	ldr	r3, [r3, #20]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d019      	beq.n	8005d28 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cf4:	4b44      	ldr	r3, [pc, #272]	; (8005e08 <HAL_RCC_OscConfig+0x520>)
 8005cf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cf8:	4a43      	ldr	r2, [pc, #268]	; (8005e08 <HAL_RCC_OscConfig+0x520>)
 8005cfa:	f043 0301 	orr.w	r3, r3, #1
 8005cfe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d00:	f7fb fc46 	bl	8001590 <HAL_GetTick>
 8005d04:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005d06:	e008      	b.n	8005d1a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d08:	f7fb fc42 	bl	8001590 <HAL_GetTick>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d901      	bls.n	8005d1a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e1ef      	b.n	80060fa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005d1a:	4b3b      	ldr	r3, [pc, #236]	; (8005e08 <HAL_RCC_OscConfig+0x520>)
 8005d1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d1e:	f003 0302 	and.w	r3, r3, #2
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d0f0      	beq.n	8005d08 <HAL_RCC_OscConfig+0x420>
 8005d26:	e018      	b.n	8005d5a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d28:	4b37      	ldr	r3, [pc, #220]	; (8005e08 <HAL_RCC_OscConfig+0x520>)
 8005d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d2c:	4a36      	ldr	r2, [pc, #216]	; (8005e08 <HAL_RCC_OscConfig+0x520>)
 8005d2e:	f023 0301 	bic.w	r3, r3, #1
 8005d32:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d34:	f7fb fc2c 	bl	8001590 <HAL_GetTick>
 8005d38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005d3a:	e008      	b.n	8005d4e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d3c:	f7fb fc28 	bl	8001590 <HAL_GetTick>
 8005d40:	4602      	mov	r2, r0
 8005d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d901      	bls.n	8005d4e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e1d5      	b.n	80060fa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005d4e:	4b2e      	ldr	r3, [pc, #184]	; (8005e08 <HAL_RCC_OscConfig+0x520>)
 8005d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d52:	f003 0302 	and.w	r3, r3, #2
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1f0      	bne.n	8005d3c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0320 	and.w	r3, r3, #32
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d036      	beq.n	8005dd4 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d019      	beq.n	8005da2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005d6e:	4b26      	ldr	r3, [pc, #152]	; (8005e08 <HAL_RCC_OscConfig+0x520>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a25      	ldr	r2, [pc, #148]	; (8005e08 <HAL_RCC_OscConfig+0x520>)
 8005d74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d78:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005d7a:	f7fb fc09 	bl	8001590 <HAL_GetTick>
 8005d7e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005d80:	e008      	b.n	8005d94 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005d82:	f7fb fc05 	bl	8001590 <HAL_GetTick>
 8005d86:	4602      	mov	r2, r0
 8005d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d901      	bls.n	8005d94 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e1b2      	b.n	80060fa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005d94:	4b1c      	ldr	r3, [pc, #112]	; (8005e08 <HAL_RCC_OscConfig+0x520>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d0f0      	beq.n	8005d82 <HAL_RCC_OscConfig+0x49a>
 8005da0:	e018      	b.n	8005dd4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005da2:	4b19      	ldr	r3, [pc, #100]	; (8005e08 <HAL_RCC_OscConfig+0x520>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a18      	ldr	r2, [pc, #96]	; (8005e08 <HAL_RCC_OscConfig+0x520>)
 8005da8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005dac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005dae:	f7fb fbef 	bl	8001590 <HAL_GetTick>
 8005db2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005db4:	e008      	b.n	8005dc8 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005db6:	f7fb fbeb 	bl	8001590 <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d901      	bls.n	8005dc8 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	e198      	b.n	80060fa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005dc8:	4b0f      	ldr	r3, [pc, #60]	; (8005e08 <HAL_RCC_OscConfig+0x520>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d1f0      	bne.n	8005db6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 0304 	and.w	r3, r3, #4
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f000 8085 	beq.w	8005eec <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005de2:	4b0a      	ldr	r3, [pc, #40]	; (8005e0c <HAL_RCC_OscConfig+0x524>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a09      	ldr	r2, [pc, #36]	; (8005e0c <HAL_RCC_OscConfig+0x524>)
 8005de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005dee:	f7fb fbcf 	bl	8001590 <HAL_GetTick>
 8005df2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005df4:	e00c      	b.n	8005e10 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005df6:	f7fb fbcb 	bl	8001590 <HAL_GetTick>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	2b64      	cmp	r3, #100	; 0x64
 8005e02:	d905      	bls.n	8005e10 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e178      	b.n	80060fa <HAL_RCC_OscConfig+0x812>
 8005e08:	58024400 	.word	0x58024400
 8005e0c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e10:	4b96      	ldr	r3, [pc, #600]	; (800606c <HAL_RCC_OscConfig+0x784>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d0ec      	beq.n	8005df6 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d106      	bne.n	8005e32 <HAL_RCC_OscConfig+0x54a>
 8005e24:	4b92      	ldr	r3, [pc, #584]	; (8006070 <HAL_RCC_OscConfig+0x788>)
 8005e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e28:	4a91      	ldr	r2, [pc, #580]	; (8006070 <HAL_RCC_OscConfig+0x788>)
 8005e2a:	f043 0301 	orr.w	r3, r3, #1
 8005e2e:	6713      	str	r3, [r2, #112]	; 0x70
 8005e30:	e02d      	b.n	8005e8e <HAL_RCC_OscConfig+0x5a6>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10c      	bne.n	8005e54 <HAL_RCC_OscConfig+0x56c>
 8005e3a:	4b8d      	ldr	r3, [pc, #564]	; (8006070 <HAL_RCC_OscConfig+0x788>)
 8005e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e3e:	4a8c      	ldr	r2, [pc, #560]	; (8006070 <HAL_RCC_OscConfig+0x788>)
 8005e40:	f023 0301 	bic.w	r3, r3, #1
 8005e44:	6713      	str	r3, [r2, #112]	; 0x70
 8005e46:	4b8a      	ldr	r3, [pc, #552]	; (8006070 <HAL_RCC_OscConfig+0x788>)
 8005e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4a:	4a89      	ldr	r2, [pc, #548]	; (8006070 <HAL_RCC_OscConfig+0x788>)
 8005e4c:	f023 0304 	bic.w	r3, r3, #4
 8005e50:	6713      	str	r3, [r2, #112]	; 0x70
 8005e52:	e01c      	b.n	8005e8e <HAL_RCC_OscConfig+0x5a6>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	2b05      	cmp	r3, #5
 8005e5a:	d10c      	bne.n	8005e76 <HAL_RCC_OscConfig+0x58e>
 8005e5c:	4b84      	ldr	r3, [pc, #528]	; (8006070 <HAL_RCC_OscConfig+0x788>)
 8005e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e60:	4a83      	ldr	r2, [pc, #524]	; (8006070 <HAL_RCC_OscConfig+0x788>)
 8005e62:	f043 0304 	orr.w	r3, r3, #4
 8005e66:	6713      	str	r3, [r2, #112]	; 0x70
 8005e68:	4b81      	ldr	r3, [pc, #516]	; (8006070 <HAL_RCC_OscConfig+0x788>)
 8005e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e6c:	4a80      	ldr	r2, [pc, #512]	; (8006070 <HAL_RCC_OscConfig+0x788>)
 8005e6e:	f043 0301 	orr.w	r3, r3, #1
 8005e72:	6713      	str	r3, [r2, #112]	; 0x70
 8005e74:	e00b      	b.n	8005e8e <HAL_RCC_OscConfig+0x5a6>
 8005e76:	4b7e      	ldr	r3, [pc, #504]	; (8006070 <HAL_RCC_OscConfig+0x788>)
 8005e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e7a:	4a7d      	ldr	r2, [pc, #500]	; (8006070 <HAL_RCC_OscConfig+0x788>)
 8005e7c:	f023 0301 	bic.w	r3, r3, #1
 8005e80:	6713      	str	r3, [r2, #112]	; 0x70
 8005e82:	4b7b      	ldr	r3, [pc, #492]	; (8006070 <HAL_RCC_OscConfig+0x788>)
 8005e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e86:	4a7a      	ldr	r2, [pc, #488]	; (8006070 <HAL_RCC_OscConfig+0x788>)
 8005e88:	f023 0304 	bic.w	r3, r3, #4
 8005e8c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d015      	beq.n	8005ec2 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e96:	f7fb fb7b 	bl	8001590 <HAL_GetTick>
 8005e9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e9c:	e00a      	b.n	8005eb4 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e9e:	f7fb fb77 	bl	8001590 <HAL_GetTick>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d901      	bls.n	8005eb4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	e122      	b.n	80060fa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005eb4:	4b6e      	ldr	r3, [pc, #440]	; (8006070 <HAL_RCC_OscConfig+0x788>)
 8005eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb8:	f003 0302 	and.w	r3, r3, #2
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d0ee      	beq.n	8005e9e <HAL_RCC_OscConfig+0x5b6>
 8005ec0:	e014      	b.n	8005eec <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ec2:	f7fb fb65 	bl	8001590 <HAL_GetTick>
 8005ec6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005ec8:	e00a      	b.n	8005ee0 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005eca:	f7fb fb61 	bl	8001590 <HAL_GetTick>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d901      	bls.n	8005ee0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	e10c      	b.n	80060fa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005ee0:	4b63      	ldr	r3, [pc, #396]	; (8006070 <HAL_RCC_OscConfig+0x788>)
 8005ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ee4:	f003 0302 	and.w	r3, r3, #2
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d1ee      	bne.n	8005eca <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f000 8101 	beq.w	80060f8 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005ef6:	4b5e      	ldr	r3, [pc, #376]	; (8006070 <HAL_RCC_OscConfig+0x788>)
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005efe:	2b18      	cmp	r3, #24
 8005f00:	f000 80bc 	beq.w	800607c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	f040 8095 	bne.w	8006038 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f0e:	4b58      	ldr	r3, [pc, #352]	; (8006070 <HAL_RCC_OscConfig+0x788>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a57      	ldr	r2, [pc, #348]	; (8006070 <HAL_RCC_OscConfig+0x788>)
 8005f14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f1a:	f7fb fb39 	bl	8001590 <HAL_GetTick>
 8005f1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f20:	e008      	b.n	8005f34 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f22:	f7fb fb35 	bl	8001590 <HAL_GetTick>
 8005f26:	4602      	mov	r2, r0
 8005f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d901      	bls.n	8005f34 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8005f30:	2303      	movs	r3, #3
 8005f32:	e0e2      	b.n	80060fa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f34:	4b4e      	ldr	r3, [pc, #312]	; (8006070 <HAL_RCC_OscConfig+0x788>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d1f0      	bne.n	8005f22 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f40:	4b4b      	ldr	r3, [pc, #300]	; (8006070 <HAL_RCC_OscConfig+0x788>)
 8005f42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f44:	4b4b      	ldr	r3, [pc, #300]	; (8006074 <HAL_RCC_OscConfig+0x78c>)
 8005f46:	4013      	ands	r3, r2
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005f50:	0112      	lsls	r2, r2, #4
 8005f52:	430a      	orrs	r2, r1
 8005f54:	4946      	ldr	r1, [pc, #280]	; (8006070 <HAL_RCC_OscConfig+0x788>)
 8005f56:	4313      	orrs	r3, r2
 8005f58:	628b      	str	r3, [r1, #40]	; 0x28
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f68:	3b01      	subs	r3, #1
 8005f6a:	025b      	lsls	r3, r3, #9
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	431a      	orrs	r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f74:	3b01      	subs	r3, #1
 8005f76:	041b      	lsls	r3, r3, #16
 8005f78:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005f7c:	431a      	orrs	r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f82:	3b01      	subs	r3, #1
 8005f84:	061b      	lsls	r3, r3, #24
 8005f86:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005f8a:	4939      	ldr	r1, [pc, #228]	; (8006070 <HAL_RCC_OscConfig+0x788>)
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005f90:	4b37      	ldr	r3, [pc, #220]	; (8006070 <HAL_RCC_OscConfig+0x788>)
 8005f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f94:	4a36      	ldr	r2, [pc, #216]	; (8006070 <HAL_RCC_OscConfig+0x788>)
 8005f96:	f023 0301 	bic.w	r3, r3, #1
 8005f9a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005f9c:	4b34      	ldr	r3, [pc, #208]	; (8006070 <HAL_RCC_OscConfig+0x788>)
 8005f9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fa0:	4b35      	ldr	r3, [pc, #212]	; (8006078 <HAL_RCC_OscConfig+0x790>)
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005fa8:	00d2      	lsls	r2, r2, #3
 8005faa:	4931      	ldr	r1, [pc, #196]	; (8006070 <HAL_RCC_OscConfig+0x788>)
 8005fac:	4313      	orrs	r3, r2
 8005fae:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005fb0:	4b2f      	ldr	r3, [pc, #188]	; (8006070 <HAL_RCC_OscConfig+0x788>)
 8005fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb4:	f023 020c 	bic.w	r2, r3, #12
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbc:	492c      	ldr	r1, [pc, #176]	; (8006070 <HAL_RCC_OscConfig+0x788>)
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005fc2:	4b2b      	ldr	r3, [pc, #172]	; (8006070 <HAL_RCC_OscConfig+0x788>)
 8005fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc6:	f023 0202 	bic.w	r2, r3, #2
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fce:	4928      	ldr	r1, [pc, #160]	; (8006070 <HAL_RCC_OscConfig+0x788>)
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005fd4:	4b26      	ldr	r3, [pc, #152]	; (8006070 <HAL_RCC_OscConfig+0x788>)
 8005fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd8:	4a25      	ldr	r2, [pc, #148]	; (8006070 <HAL_RCC_OscConfig+0x788>)
 8005fda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fe0:	4b23      	ldr	r3, [pc, #140]	; (8006070 <HAL_RCC_OscConfig+0x788>)
 8005fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe4:	4a22      	ldr	r2, [pc, #136]	; (8006070 <HAL_RCC_OscConfig+0x788>)
 8005fe6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005fec:	4b20      	ldr	r3, [pc, #128]	; (8006070 <HAL_RCC_OscConfig+0x788>)
 8005fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff0:	4a1f      	ldr	r2, [pc, #124]	; (8006070 <HAL_RCC_OscConfig+0x788>)
 8005ff2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ff6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005ff8:	4b1d      	ldr	r3, [pc, #116]	; (8006070 <HAL_RCC_OscConfig+0x788>)
 8005ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffc:	4a1c      	ldr	r2, [pc, #112]	; (8006070 <HAL_RCC_OscConfig+0x788>)
 8005ffe:	f043 0301 	orr.w	r3, r3, #1
 8006002:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006004:	4b1a      	ldr	r3, [pc, #104]	; (8006070 <HAL_RCC_OscConfig+0x788>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a19      	ldr	r2, [pc, #100]	; (8006070 <HAL_RCC_OscConfig+0x788>)
 800600a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800600e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006010:	f7fb fabe 	bl	8001590 <HAL_GetTick>
 8006014:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006016:	e008      	b.n	800602a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006018:	f7fb faba 	bl	8001590 <HAL_GetTick>
 800601c:	4602      	mov	r2, r0
 800601e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	2b02      	cmp	r3, #2
 8006024:	d901      	bls.n	800602a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	e067      	b.n	80060fa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800602a:	4b11      	ldr	r3, [pc, #68]	; (8006070 <HAL_RCC_OscConfig+0x788>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d0f0      	beq.n	8006018 <HAL_RCC_OscConfig+0x730>
 8006036:	e05f      	b.n	80060f8 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006038:	4b0d      	ldr	r3, [pc, #52]	; (8006070 <HAL_RCC_OscConfig+0x788>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a0c      	ldr	r2, [pc, #48]	; (8006070 <HAL_RCC_OscConfig+0x788>)
 800603e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006044:	f7fb faa4 	bl	8001590 <HAL_GetTick>
 8006048:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800604a:	e008      	b.n	800605e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800604c:	f7fb faa0 	bl	8001590 <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	2b02      	cmp	r3, #2
 8006058:	d901      	bls.n	800605e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e04d      	b.n	80060fa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800605e:	4b04      	ldr	r3, [pc, #16]	; (8006070 <HAL_RCC_OscConfig+0x788>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d1f0      	bne.n	800604c <HAL_RCC_OscConfig+0x764>
 800606a:	e045      	b.n	80060f8 <HAL_RCC_OscConfig+0x810>
 800606c:	58024800 	.word	0x58024800
 8006070:	58024400 	.word	0x58024400
 8006074:	fffffc0c 	.word	0xfffffc0c
 8006078:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800607c:	4b21      	ldr	r3, [pc, #132]	; (8006104 <HAL_RCC_OscConfig+0x81c>)
 800607e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006080:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006082:	4b20      	ldr	r3, [pc, #128]	; (8006104 <HAL_RCC_OscConfig+0x81c>)
 8006084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006086:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608c:	2b01      	cmp	r3, #1
 800608e:	d031      	beq.n	80060f4 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	f003 0203 	and.w	r2, r3, #3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800609a:	429a      	cmp	r2, r3
 800609c:	d12a      	bne.n	80060f4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	091b      	lsrs	r3, r3, #4
 80060a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d122      	bne.n	80060f4 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d11a      	bne.n	80060f4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	0a5b      	lsrs	r3, r3, #9
 80060c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ca:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d111      	bne.n	80060f4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	0c1b      	lsrs	r3, r3, #16
 80060d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060dc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80060de:	429a      	cmp	r2, r3
 80060e0:	d108      	bne.n	80060f4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	0e1b      	lsrs	r3, r3, #24
 80060e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ee:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d001      	beq.n	80060f8 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e000      	b.n	80060fa <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3730      	adds	r7, #48	; 0x30
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	58024400 	.word	0x58024400

08006108 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b086      	sub	sp, #24
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d101      	bne.n	800611c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e19c      	b.n	8006456 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800611c:	4b8a      	ldr	r3, [pc, #552]	; (8006348 <HAL_RCC_ClockConfig+0x240>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 030f 	and.w	r3, r3, #15
 8006124:	683a      	ldr	r2, [r7, #0]
 8006126:	429a      	cmp	r2, r3
 8006128:	d910      	bls.n	800614c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800612a:	4b87      	ldr	r3, [pc, #540]	; (8006348 <HAL_RCC_ClockConfig+0x240>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f023 020f 	bic.w	r2, r3, #15
 8006132:	4985      	ldr	r1, [pc, #532]	; (8006348 <HAL_RCC_ClockConfig+0x240>)
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	4313      	orrs	r3, r2
 8006138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800613a:	4b83      	ldr	r3, [pc, #524]	; (8006348 <HAL_RCC_ClockConfig+0x240>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 030f 	and.w	r3, r3, #15
 8006142:	683a      	ldr	r2, [r7, #0]
 8006144:	429a      	cmp	r2, r3
 8006146:	d001      	beq.n	800614c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e184      	b.n	8006456 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0304 	and.w	r3, r3, #4
 8006154:	2b00      	cmp	r3, #0
 8006156:	d010      	beq.n	800617a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	691a      	ldr	r2, [r3, #16]
 800615c:	4b7b      	ldr	r3, [pc, #492]	; (800634c <HAL_RCC_ClockConfig+0x244>)
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006164:	429a      	cmp	r2, r3
 8006166:	d908      	bls.n	800617a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006168:	4b78      	ldr	r3, [pc, #480]	; (800634c <HAL_RCC_ClockConfig+0x244>)
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	4975      	ldr	r1, [pc, #468]	; (800634c <HAL_RCC_ClockConfig+0x244>)
 8006176:	4313      	orrs	r3, r2
 8006178:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0308 	and.w	r3, r3, #8
 8006182:	2b00      	cmp	r3, #0
 8006184:	d010      	beq.n	80061a8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	695a      	ldr	r2, [r3, #20]
 800618a:	4b70      	ldr	r3, [pc, #448]	; (800634c <HAL_RCC_ClockConfig+0x244>)
 800618c:	69db      	ldr	r3, [r3, #28]
 800618e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006192:	429a      	cmp	r2, r3
 8006194:	d908      	bls.n	80061a8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006196:	4b6d      	ldr	r3, [pc, #436]	; (800634c <HAL_RCC_ClockConfig+0x244>)
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	496a      	ldr	r1, [pc, #424]	; (800634c <HAL_RCC_ClockConfig+0x244>)
 80061a4:	4313      	orrs	r3, r2
 80061a6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 0310 	and.w	r3, r3, #16
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d010      	beq.n	80061d6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	699a      	ldr	r2, [r3, #24]
 80061b8:	4b64      	ldr	r3, [pc, #400]	; (800634c <HAL_RCC_ClockConfig+0x244>)
 80061ba:	69db      	ldr	r3, [r3, #28]
 80061bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d908      	bls.n	80061d6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80061c4:	4b61      	ldr	r3, [pc, #388]	; (800634c <HAL_RCC_ClockConfig+0x244>)
 80061c6:	69db      	ldr	r3, [r3, #28]
 80061c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	699b      	ldr	r3, [r3, #24]
 80061d0:	495e      	ldr	r1, [pc, #376]	; (800634c <HAL_RCC_ClockConfig+0x244>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0320 	and.w	r3, r3, #32
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d010      	beq.n	8006204 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	69da      	ldr	r2, [r3, #28]
 80061e6:	4b59      	ldr	r3, [pc, #356]	; (800634c <HAL_RCC_ClockConfig+0x244>)
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d908      	bls.n	8006204 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80061f2:	4b56      	ldr	r3, [pc, #344]	; (800634c <HAL_RCC_ClockConfig+0x244>)
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	69db      	ldr	r3, [r3, #28]
 80061fe:	4953      	ldr	r1, [pc, #332]	; (800634c <HAL_RCC_ClockConfig+0x244>)
 8006200:	4313      	orrs	r3, r2
 8006202:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 0302 	and.w	r3, r3, #2
 800620c:	2b00      	cmp	r3, #0
 800620e:	d010      	beq.n	8006232 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	68da      	ldr	r2, [r3, #12]
 8006214:	4b4d      	ldr	r3, [pc, #308]	; (800634c <HAL_RCC_ClockConfig+0x244>)
 8006216:	699b      	ldr	r3, [r3, #24]
 8006218:	f003 030f 	and.w	r3, r3, #15
 800621c:	429a      	cmp	r2, r3
 800621e:	d908      	bls.n	8006232 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006220:	4b4a      	ldr	r3, [pc, #296]	; (800634c <HAL_RCC_ClockConfig+0x244>)
 8006222:	699b      	ldr	r3, [r3, #24]
 8006224:	f023 020f 	bic.w	r2, r3, #15
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	4947      	ldr	r1, [pc, #284]	; (800634c <HAL_RCC_ClockConfig+0x244>)
 800622e:	4313      	orrs	r3, r2
 8006230:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 0301 	and.w	r3, r3, #1
 800623a:	2b00      	cmp	r3, #0
 800623c:	d055      	beq.n	80062ea <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800623e:	4b43      	ldr	r3, [pc, #268]	; (800634c <HAL_RCC_ClockConfig+0x244>)
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	4940      	ldr	r1, [pc, #256]	; (800634c <HAL_RCC_ClockConfig+0x244>)
 800624c:	4313      	orrs	r3, r2
 800624e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	2b02      	cmp	r3, #2
 8006256:	d107      	bne.n	8006268 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006258:	4b3c      	ldr	r3, [pc, #240]	; (800634c <HAL_RCC_ClockConfig+0x244>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006260:	2b00      	cmp	r3, #0
 8006262:	d121      	bne.n	80062a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e0f6      	b.n	8006456 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	2b03      	cmp	r3, #3
 800626e:	d107      	bne.n	8006280 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006270:	4b36      	ldr	r3, [pc, #216]	; (800634c <HAL_RCC_ClockConfig+0x244>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006278:	2b00      	cmp	r3, #0
 800627a:	d115      	bne.n	80062a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e0ea      	b.n	8006456 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d107      	bne.n	8006298 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006288:	4b30      	ldr	r3, [pc, #192]	; (800634c <HAL_RCC_ClockConfig+0x244>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006290:	2b00      	cmp	r3, #0
 8006292:	d109      	bne.n	80062a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e0de      	b.n	8006456 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006298:	4b2c      	ldr	r3, [pc, #176]	; (800634c <HAL_RCC_ClockConfig+0x244>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0304 	and.w	r3, r3, #4
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d101      	bne.n	80062a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e0d6      	b.n	8006456 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80062a8:	4b28      	ldr	r3, [pc, #160]	; (800634c <HAL_RCC_ClockConfig+0x244>)
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	f023 0207 	bic.w	r2, r3, #7
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	4925      	ldr	r1, [pc, #148]	; (800634c <HAL_RCC_ClockConfig+0x244>)
 80062b6:	4313      	orrs	r3, r2
 80062b8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062ba:	f7fb f969 	bl	8001590 <HAL_GetTick>
 80062be:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062c0:	e00a      	b.n	80062d8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062c2:	f7fb f965 	bl	8001590 <HAL_GetTick>
 80062c6:	4602      	mov	r2, r0
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d901      	bls.n	80062d8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e0be      	b.n	8006456 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062d8:	4b1c      	ldr	r3, [pc, #112]	; (800634c <HAL_RCC_ClockConfig+0x244>)
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	00db      	lsls	r3, r3, #3
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d1eb      	bne.n	80062c2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0302 	and.w	r3, r3, #2
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d010      	beq.n	8006318 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	68da      	ldr	r2, [r3, #12]
 80062fa:	4b14      	ldr	r3, [pc, #80]	; (800634c <HAL_RCC_ClockConfig+0x244>)
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	f003 030f 	and.w	r3, r3, #15
 8006302:	429a      	cmp	r2, r3
 8006304:	d208      	bcs.n	8006318 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006306:	4b11      	ldr	r3, [pc, #68]	; (800634c <HAL_RCC_ClockConfig+0x244>)
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	f023 020f 	bic.w	r2, r3, #15
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	490e      	ldr	r1, [pc, #56]	; (800634c <HAL_RCC_ClockConfig+0x244>)
 8006314:	4313      	orrs	r3, r2
 8006316:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006318:	4b0b      	ldr	r3, [pc, #44]	; (8006348 <HAL_RCC_ClockConfig+0x240>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 030f 	and.w	r3, r3, #15
 8006320:	683a      	ldr	r2, [r7, #0]
 8006322:	429a      	cmp	r2, r3
 8006324:	d214      	bcs.n	8006350 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006326:	4b08      	ldr	r3, [pc, #32]	; (8006348 <HAL_RCC_ClockConfig+0x240>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f023 020f 	bic.w	r2, r3, #15
 800632e:	4906      	ldr	r1, [pc, #24]	; (8006348 <HAL_RCC_ClockConfig+0x240>)
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	4313      	orrs	r3, r2
 8006334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006336:	4b04      	ldr	r3, [pc, #16]	; (8006348 <HAL_RCC_ClockConfig+0x240>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 030f 	and.w	r3, r3, #15
 800633e:	683a      	ldr	r2, [r7, #0]
 8006340:	429a      	cmp	r2, r3
 8006342:	d005      	beq.n	8006350 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	e086      	b.n	8006456 <HAL_RCC_ClockConfig+0x34e>
 8006348:	52002000 	.word	0x52002000
 800634c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0304 	and.w	r3, r3, #4
 8006358:	2b00      	cmp	r3, #0
 800635a:	d010      	beq.n	800637e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	691a      	ldr	r2, [r3, #16]
 8006360:	4b3f      	ldr	r3, [pc, #252]	; (8006460 <HAL_RCC_ClockConfig+0x358>)
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006368:	429a      	cmp	r2, r3
 800636a:	d208      	bcs.n	800637e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800636c:	4b3c      	ldr	r3, [pc, #240]	; (8006460 <HAL_RCC_ClockConfig+0x358>)
 800636e:	699b      	ldr	r3, [r3, #24]
 8006370:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	4939      	ldr	r1, [pc, #228]	; (8006460 <HAL_RCC_ClockConfig+0x358>)
 800637a:	4313      	orrs	r3, r2
 800637c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0308 	and.w	r3, r3, #8
 8006386:	2b00      	cmp	r3, #0
 8006388:	d010      	beq.n	80063ac <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	695a      	ldr	r2, [r3, #20]
 800638e:	4b34      	ldr	r3, [pc, #208]	; (8006460 <HAL_RCC_ClockConfig+0x358>)
 8006390:	69db      	ldr	r3, [r3, #28]
 8006392:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006396:	429a      	cmp	r2, r3
 8006398:	d208      	bcs.n	80063ac <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800639a:	4b31      	ldr	r3, [pc, #196]	; (8006460 <HAL_RCC_ClockConfig+0x358>)
 800639c:	69db      	ldr	r3, [r3, #28]
 800639e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	492e      	ldr	r1, [pc, #184]	; (8006460 <HAL_RCC_ClockConfig+0x358>)
 80063a8:	4313      	orrs	r3, r2
 80063aa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 0310 	and.w	r3, r3, #16
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d010      	beq.n	80063da <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	699a      	ldr	r2, [r3, #24]
 80063bc:	4b28      	ldr	r3, [pc, #160]	; (8006460 <HAL_RCC_ClockConfig+0x358>)
 80063be:	69db      	ldr	r3, [r3, #28]
 80063c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d208      	bcs.n	80063da <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80063c8:	4b25      	ldr	r3, [pc, #148]	; (8006460 <HAL_RCC_ClockConfig+0x358>)
 80063ca:	69db      	ldr	r3, [r3, #28]
 80063cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	4922      	ldr	r1, [pc, #136]	; (8006460 <HAL_RCC_ClockConfig+0x358>)
 80063d6:	4313      	orrs	r3, r2
 80063d8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 0320 	and.w	r3, r3, #32
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d010      	beq.n	8006408 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	69da      	ldr	r2, [r3, #28]
 80063ea:	4b1d      	ldr	r3, [pc, #116]	; (8006460 <HAL_RCC_ClockConfig+0x358>)
 80063ec:	6a1b      	ldr	r3, [r3, #32]
 80063ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d208      	bcs.n	8006408 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80063f6:	4b1a      	ldr	r3, [pc, #104]	; (8006460 <HAL_RCC_ClockConfig+0x358>)
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	69db      	ldr	r3, [r3, #28]
 8006402:	4917      	ldr	r1, [pc, #92]	; (8006460 <HAL_RCC_ClockConfig+0x358>)
 8006404:	4313      	orrs	r3, r2
 8006406:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006408:	f000 f834 	bl	8006474 <HAL_RCC_GetSysClockFreq>
 800640c:	4601      	mov	r1, r0
 800640e:	4b14      	ldr	r3, [pc, #80]	; (8006460 <HAL_RCC_ClockConfig+0x358>)
 8006410:	699b      	ldr	r3, [r3, #24]
 8006412:	0a1b      	lsrs	r3, r3, #8
 8006414:	f003 030f 	and.w	r3, r3, #15
 8006418:	4a12      	ldr	r2, [pc, #72]	; (8006464 <HAL_RCC_ClockConfig+0x35c>)
 800641a:	5cd3      	ldrb	r3, [r2, r3]
 800641c:	f003 031f 	and.w	r3, r3, #31
 8006420:	fa21 f303 	lsr.w	r3, r1, r3
 8006424:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006426:	4b0e      	ldr	r3, [pc, #56]	; (8006460 <HAL_RCC_ClockConfig+0x358>)
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	f003 030f 	and.w	r3, r3, #15
 800642e:	4a0d      	ldr	r2, [pc, #52]	; (8006464 <HAL_RCC_ClockConfig+0x35c>)
 8006430:	5cd3      	ldrb	r3, [r2, r3]
 8006432:	f003 031f 	and.w	r3, r3, #31
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	fa22 f303 	lsr.w	r3, r2, r3
 800643c:	4a0a      	ldr	r2, [pc, #40]	; (8006468 <HAL_RCC_ClockConfig+0x360>)
 800643e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006440:	4a0a      	ldr	r2, [pc, #40]	; (800646c <HAL_RCC_ClockConfig+0x364>)
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006446:	4b0a      	ldr	r3, [pc, #40]	; (8006470 <HAL_RCC_ClockConfig+0x368>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4618      	mov	r0, r3
 800644c:	f7fb f856 	bl	80014fc <HAL_InitTick>
 8006450:	4603      	mov	r3, r0
 8006452:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006454:	7bfb      	ldrb	r3, [r7, #15]
}
 8006456:	4618      	mov	r0, r3
 8006458:	3718      	adds	r7, #24
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	58024400 	.word	0x58024400
 8006464:	0800fe04 	.word	0x0800fe04
 8006468:	24000004 	.word	0x24000004
 800646c:	24000000 	.word	0x24000000
 8006470:	24000008 	.word	0x24000008

08006474 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006474:	b480      	push	{r7}
 8006476:	b089      	sub	sp, #36	; 0x24
 8006478:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800647a:	4baf      	ldr	r3, [pc, #700]	; (8006738 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006482:	2b18      	cmp	r3, #24
 8006484:	f200 814e 	bhi.w	8006724 <HAL_RCC_GetSysClockFreq+0x2b0>
 8006488:	a201      	add	r2, pc, #4	; (adr r2, 8006490 <HAL_RCC_GetSysClockFreq+0x1c>)
 800648a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648e:	bf00      	nop
 8006490:	080064f5 	.word	0x080064f5
 8006494:	08006725 	.word	0x08006725
 8006498:	08006725 	.word	0x08006725
 800649c:	08006725 	.word	0x08006725
 80064a0:	08006725 	.word	0x08006725
 80064a4:	08006725 	.word	0x08006725
 80064a8:	08006725 	.word	0x08006725
 80064ac:	08006725 	.word	0x08006725
 80064b0:	0800651b 	.word	0x0800651b
 80064b4:	08006725 	.word	0x08006725
 80064b8:	08006725 	.word	0x08006725
 80064bc:	08006725 	.word	0x08006725
 80064c0:	08006725 	.word	0x08006725
 80064c4:	08006725 	.word	0x08006725
 80064c8:	08006725 	.word	0x08006725
 80064cc:	08006725 	.word	0x08006725
 80064d0:	08006521 	.word	0x08006521
 80064d4:	08006725 	.word	0x08006725
 80064d8:	08006725 	.word	0x08006725
 80064dc:	08006725 	.word	0x08006725
 80064e0:	08006725 	.word	0x08006725
 80064e4:	08006725 	.word	0x08006725
 80064e8:	08006725 	.word	0x08006725
 80064ec:	08006725 	.word	0x08006725
 80064f0:	08006527 	.word	0x08006527
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064f4:	4b90      	ldr	r3, [pc, #576]	; (8006738 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 0320 	and.w	r3, r3, #32
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d009      	beq.n	8006514 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006500:	4b8d      	ldr	r3, [pc, #564]	; (8006738 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	08db      	lsrs	r3, r3, #3
 8006506:	f003 0303 	and.w	r3, r3, #3
 800650a:	4a8c      	ldr	r2, [pc, #560]	; (800673c <HAL_RCC_GetSysClockFreq+0x2c8>)
 800650c:	fa22 f303 	lsr.w	r3, r2, r3
 8006510:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006512:	e10a      	b.n	800672a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006514:	4b89      	ldr	r3, [pc, #548]	; (800673c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006516:	61bb      	str	r3, [r7, #24]
    break;
 8006518:	e107      	b.n	800672a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800651a:	4b89      	ldr	r3, [pc, #548]	; (8006740 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800651c:	61bb      	str	r3, [r7, #24]
    break;
 800651e:	e104      	b.n	800672a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006520:	4b88      	ldr	r3, [pc, #544]	; (8006744 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8006522:	61bb      	str	r3, [r7, #24]
    break;
 8006524:	e101      	b.n	800672a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006526:	4b84      	ldr	r3, [pc, #528]	; (8006738 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800652a:	f003 0303 	and.w	r3, r3, #3
 800652e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006530:	4b81      	ldr	r3, [pc, #516]	; (8006738 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006534:	091b      	lsrs	r3, r3, #4
 8006536:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800653a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800653c:	4b7e      	ldr	r3, [pc, #504]	; (8006738 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800653e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006546:	4b7c      	ldr	r3, [pc, #496]	; (8006738 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800654a:	08db      	lsrs	r3, r3, #3
 800654c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	fb02 f303 	mul.w	r3, r2, r3
 8006556:	ee07 3a90 	vmov	s15, r3
 800655a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800655e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	2b00      	cmp	r3, #0
 8006566:	f000 80da 	beq.w	800671e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	2b01      	cmp	r3, #1
 800656e:	d05a      	beq.n	8006626 <HAL_RCC_GetSysClockFreq+0x1b2>
 8006570:	2b01      	cmp	r3, #1
 8006572:	d302      	bcc.n	800657a <HAL_RCC_GetSysClockFreq+0x106>
 8006574:	2b02      	cmp	r3, #2
 8006576:	d078      	beq.n	800666a <HAL_RCC_GetSysClockFreq+0x1f6>
 8006578:	e099      	b.n	80066ae <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800657a:	4b6f      	ldr	r3, [pc, #444]	; (8006738 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 0320 	and.w	r3, r3, #32
 8006582:	2b00      	cmp	r3, #0
 8006584:	d02d      	beq.n	80065e2 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006586:	4b6c      	ldr	r3, [pc, #432]	; (8006738 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	08db      	lsrs	r3, r3, #3
 800658c:	f003 0303 	and.w	r3, r3, #3
 8006590:	4a6a      	ldr	r2, [pc, #424]	; (800673c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006592:	fa22 f303 	lsr.w	r3, r2, r3
 8006596:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	ee07 3a90 	vmov	s15, r3
 800659e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	ee07 3a90 	vmov	s15, r3
 80065a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065b0:	4b61      	ldr	r3, [pc, #388]	; (8006738 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80065b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065b8:	ee07 3a90 	vmov	s15, r3
 80065bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065c0:	ed97 6a02 	vldr	s12, [r7, #8]
 80065c4:	eddf 5a60 	vldr	s11, [pc, #384]	; 8006748 <HAL_RCC_GetSysClockFreq+0x2d4>
 80065c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065dc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80065e0:	e087      	b.n	80066f2 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	ee07 3a90 	vmov	s15, r3
 80065e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ec:	eddf 6a57 	vldr	s13, [pc, #348]	; 800674c <HAL_RCC_GetSysClockFreq+0x2d8>
 80065f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065f4:	4b50      	ldr	r3, [pc, #320]	; (8006738 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80065f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065fc:	ee07 3a90 	vmov	s15, r3
 8006600:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006604:	ed97 6a02 	vldr	s12, [r7, #8]
 8006608:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8006748 <HAL_RCC_GetSysClockFreq+0x2d4>
 800660c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006610:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006614:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006618:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800661c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006620:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006624:	e065      	b.n	80066f2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	ee07 3a90 	vmov	s15, r3
 800662c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006630:	eddf 6a47 	vldr	s13, [pc, #284]	; 8006750 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006634:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006638:	4b3f      	ldr	r3, [pc, #252]	; (8006738 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800663a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800663c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006640:	ee07 3a90 	vmov	s15, r3
 8006644:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006648:	ed97 6a02 	vldr	s12, [r7, #8]
 800664c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006748 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006650:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006654:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006658:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800665c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006664:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006668:	e043      	b.n	80066f2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	ee07 3a90 	vmov	s15, r3
 8006670:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006674:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006754 <HAL_RCC_GetSysClockFreq+0x2e0>
 8006678:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800667c:	4b2e      	ldr	r3, [pc, #184]	; (8006738 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800667e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006684:	ee07 3a90 	vmov	s15, r3
 8006688:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800668c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006690:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006748 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006694:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006698:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800669c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066ac:	e021      	b.n	80066f2 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	ee07 3a90 	vmov	s15, r3
 80066b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066b8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006750 <HAL_RCC_GetSysClockFreq+0x2dc>
 80066bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066c0:	4b1d      	ldr	r3, [pc, #116]	; (8006738 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80066c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066c8:	ee07 3a90 	vmov	s15, r3
 80066cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80066d4:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8006748 <HAL_RCC_GetSysClockFreq+0x2d4>
 80066d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066f0:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80066f2:	4b11      	ldr	r3, [pc, #68]	; (8006738 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80066f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f6:	0a5b      	lsrs	r3, r3, #9
 80066f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066fc:	3301      	adds	r3, #1
 80066fe:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	ee07 3a90 	vmov	s15, r3
 8006706:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800670a:	edd7 6a07 	vldr	s13, [r7, #28]
 800670e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006712:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006716:	ee17 3a90 	vmov	r3, s15
 800671a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800671c:	e005      	b.n	800672a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800671e:	2300      	movs	r3, #0
 8006720:	61bb      	str	r3, [r7, #24]
    break;
 8006722:	e002      	b.n	800672a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8006724:	4b06      	ldr	r3, [pc, #24]	; (8006740 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006726:	61bb      	str	r3, [r7, #24]
    break;
 8006728:	bf00      	nop
  }

  return sysclockfreq;
 800672a:	69bb      	ldr	r3, [r7, #24]
}
 800672c:	4618      	mov	r0, r3
 800672e:	3724      	adds	r7, #36	; 0x24
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr
 8006738:	58024400 	.word	0x58024400
 800673c:	03d09000 	.word	0x03d09000
 8006740:	003d0900 	.word	0x003d0900
 8006744:	017d7840 	.word	0x017d7840
 8006748:	46000000 	.word	0x46000000
 800674c:	4c742400 	.word	0x4c742400
 8006750:	4a742400 	.word	0x4a742400
 8006754:	4bbebc20 	.word	0x4bbebc20

08006758 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800675e:	f7ff fe89 	bl	8006474 <HAL_RCC_GetSysClockFreq>
 8006762:	4601      	mov	r1, r0
 8006764:	4b10      	ldr	r3, [pc, #64]	; (80067a8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	0a1b      	lsrs	r3, r3, #8
 800676a:	f003 030f 	and.w	r3, r3, #15
 800676e:	4a0f      	ldr	r2, [pc, #60]	; (80067ac <HAL_RCC_GetHCLKFreq+0x54>)
 8006770:	5cd3      	ldrb	r3, [r2, r3]
 8006772:	f003 031f 	and.w	r3, r3, #31
 8006776:	fa21 f303 	lsr.w	r3, r1, r3
 800677a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800677c:	4b0a      	ldr	r3, [pc, #40]	; (80067a8 <HAL_RCC_GetHCLKFreq+0x50>)
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	f003 030f 	and.w	r3, r3, #15
 8006784:	4a09      	ldr	r2, [pc, #36]	; (80067ac <HAL_RCC_GetHCLKFreq+0x54>)
 8006786:	5cd3      	ldrb	r3, [r2, r3]
 8006788:	f003 031f 	and.w	r3, r3, #31
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	fa22 f303 	lsr.w	r3, r2, r3
 8006792:	4a07      	ldr	r2, [pc, #28]	; (80067b0 <HAL_RCC_GetHCLKFreq+0x58>)
 8006794:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006796:	4a07      	ldr	r2, [pc, #28]	; (80067b4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800679c:	4b04      	ldr	r3, [pc, #16]	; (80067b0 <HAL_RCC_GetHCLKFreq+0x58>)
 800679e:	681b      	ldr	r3, [r3, #0]
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3708      	adds	r7, #8
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	58024400 	.word	0x58024400
 80067ac:	0800fe04 	.word	0x0800fe04
 80067b0:	24000004 	.word	0x24000004
 80067b4:	24000000 	.word	0x24000000

080067b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80067bc:	f7ff ffcc 	bl	8006758 <HAL_RCC_GetHCLKFreq>
 80067c0:	4601      	mov	r1, r0
 80067c2:	4b06      	ldr	r3, [pc, #24]	; (80067dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80067c4:	69db      	ldr	r3, [r3, #28]
 80067c6:	091b      	lsrs	r3, r3, #4
 80067c8:	f003 0307 	and.w	r3, r3, #7
 80067cc:	4a04      	ldr	r2, [pc, #16]	; (80067e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80067ce:	5cd3      	ldrb	r3, [r2, r3]
 80067d0:	f003 031f 	and.w	r3, r3, #31
 80067d4:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80067d8:	4618      	mov	r0, r3
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	58024400 	.word	0x58024400
 80067e0:	0800fe04 	.word	0x0800fe04

080067e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80067e8:	f7ff ffb6 	bl	8006758 <HAL_RCC_GetHCLKFreq>
 80067ec:	4601      	mov	r1, r0
 80067ee:	4b06      	ldr	r3, [pc, #24]	; (8006808 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067f0:	69db      	ldr	r3, [r3, #28]
 80067f2:	0a1b      	lsrs	r3, r3, #8
 80067f4:	f003 0307 	and.w	r3, r3, #7
 80067f8:	4a04      	ldr	r2, [pc, #16]	; (800680c <HAL_RCC_GetPCLK2Freq+0x28>)
 80067fa:	5cd3      	ldrb	r3, [r2, r3]
 80067fc:	f003 031f 	and.w	r3, r3, #31
 8006800:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006804:	4618      	mov	r0, r3
 8006806:	bd80      	pop	{r7, pc}
 8006808:	58024400 	.word	0x58024400
 800680c:	0800fe04 	.word	0x0800fe04

08006810 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b086      	sub	sp, #24
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006818:	2300      	movs	r3, #0
 800681a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800681c:	2300      	movs	r3, #0
 800681e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006828:	2b00      	cmp	r3, #0
 800682a:	d03d      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006830:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006834:	d013      	beq.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800683a:	d802      	bhi.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800683c:	2b00      	cmp	r3, #0
 800683e:	d007      	beq.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006840:	e01f      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006842:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006846:	d013      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006848:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800684c:	d01c      	beq.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800684e:	e018      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006850:	4baf      	ldr	r3, [pc, #700]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006854:	4aae      	ldr	r2, [pc, #696]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006856:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800685a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800685c:	e015      	b.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	3304      	adds	r3, #4
 8006862:	2102      	movs	r1, #2
 8006864:	4618      	mov	r0, r3
 8006866:	f001 fd33 	bl	80082d0 <RCCEx_PLL2_Config>
 800686a:	4603      	mov	r3, r0
 800686c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800686e:	e00c      	b.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	3324      	adds	r3, #36	; 0x24
 8006874:	2102      	movs	r1, #2
 8006876:	4618      	mov	r0, r3
 8006878:	f001 fddc 	bl	8008434 <RCCEx_PLL3_Config>
 800687c:	4603      	mov	r3, r0
 800687e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006880:	e003      	b.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	75fb      	strb	r3, [r7, #23]
      break;
 8006886:	e000      	b.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006888:	bf00      	nop
    }

    if(ret == HAL_OK)
 800688a:	7dfb      	ldrb	r3, [r7, #23]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d109      	bne.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006890:	4b9f      	ldr	r3, [pc, #636]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006894:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800689c:	499c      	ldr	r1, [pc, #624]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800689e:	4313      	orrs	r3, r2
 80068a0:	650b      	str	r3, [r1, #80]	; 0x50
 80068a2:	e001      	b.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a4:	7dfb      	ldrb	r3, [r7, #23]
 80068a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d03d      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068b8:	2b04      	cmp	r3, #4
 80068ba:	d826      	bhi.n	800690a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80068bc:	a201      	add	r2, pc, #4	; (adr r2, 80068c4 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80068be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c2:	bf00      	nop
 80068c4:	080068d9 	.word	0x080068d9
 80068c8:	080068e7 	.word	0x080068e7
 80068cc:	080068f9 	.word	0x080068f9
 80068d0:	08006911 	.word	0x08006911
 80068d4:	08006911 	.word	0x08006911
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068d8:	4b8d      	ldr	r3, [pc, #564]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80068da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068dc:	4a8c      	ldr	r2, [pc, #560]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80068de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80068e4:	e015      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	3304      	adds	r3, #4
 80068ea:	2100      	movs	r1, #0
 80068ec:	4618      	mov	r0, r3
 80068ee:	f001 fcef 	bl	80082d0 <RCCEx_PLL2_Config>
 80068f2:	4603      	mov	r3, r0
 80068f4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80068f6:	e00c      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	3324      	adds	r3, #36	; 0x24
 80068fc:	2100      	movs	r1, #0
 80068fe:	4618      	mov	r0, r3
 8006900:	f001 fd98 	bl	8008434 <RCCEx_PLL3_Config>
 8006904:	4603      	mov	r3, r0
 8006906:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006908:	e003      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	75fb      	strb	r3, [r7, #23]
      break;
 800690e:	e000      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006910:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006912:	7dfb      	ldrb	r3, [r7, #23]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d109      	bne.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006918:	4b7d      	ldr	r3, [pc, #500]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800691a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800691c:	f023 0207 	bic.w	r2, r3, #7
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006924:	497a      	ldr	r1, [pc, #488]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006926:	4313      	orrs	r3, r2
 8006928:	650b      	str	r3, [r1, #80]	; 0x50
 800692a:	e001      	b.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800692c:	7dfb      	ldrb	r3, [r7, #23]
 800692e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006938:	2b00      	cmp	r3, #0
 800693a:	d03e      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006940:	2b80      	cmp	r3, #128	; 0x80
 8006942:	d01c      	beq.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8006944:	2b80      	cmp	r3, #128	; 0x80
 8006946:	d804      	bhi.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006948:	2b00      	cmp	r3, #0
 800694a:	d008      	beq.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800694c:	2b40      	cmp	r3, #64	; 0x40
 800694e:	d00d      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006950:	e01e      	b.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006952:	2bc0      	cmp	r3, #192	; 0xc0
 8006954:	d01f      	beq.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800695a:	d01e      	beq.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800695c:	e018      	b.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800695e:	4b6c      	ldr	r3, [pc, #432]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006962:	4a6b      	ldr	r2, [pc, #428]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006968:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800696a:	e017      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	3304      	adds	r3, #4
 8006970:	2100      	movs	r1, #0
 8006972:	4618      	mov	r0, r3
 8006974:	f001 fcac 	bl	80082d0 <RCCEx_PLL2_Config>
 8006978:	4603      	mov	r3, r0
 800697a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800697c:	e00e      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	3324      	adds	r3, #36	; 0x24
 8006982:	2100      	movs	r1, #0
 8006984:	4618      	mov	r0, r3
 8006986:	f001 fd55 	bl	8008434 <RCCEx_PLL3_Config>
 800698a:	4603      	mov	r3, r0
 800698c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800698e:	e005      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	75fb      	strb	r3, [r7, #23]
      break;
 8006994:	e002      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006996:	bf00      	nop
 8006998:	e000      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800699a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800699c:	7dfb      	ldrb	r3, [r7, #23]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d109      	bne.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80069a2:	4b5b      	ldr	r3, [pc, #364]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80069a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069a6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ae:	4958      	ldr	r1, [pc, #352]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80069b0:	4313      	orrs	r3, r2
 80069b2:	650b      	str	r3, [r1, #80]	; 0x50
 80069b4:	e001      	b.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069b6:	7dfb      	ldrb	r3, [r7, #23]
 80069b8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d044      	beq.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80069cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069d0:	d01f      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80069d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069d6:	d805      	bhi.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00a      	beq.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80069dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069e0:	d00e      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80069e2:	e01f      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80069e4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80069e8:	d01f      	beq.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80069ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069ee:	d01e      	beq.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80069f0:	e018      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069f2:	4b47      	ldr	r3, [pc, #284]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80069f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f6:	4a46      	ldr	r2, [pc, #280]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80069f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80069fe:	e017      	b.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	3304      	adds	r3, #4
 8006a04:	2100      	movs	r1, #0
 8006a06:	4618      	mov	r0, r3
 8006a08:	f001 fc62 	bl	80082d0 <RCCEx_PLL2_Config>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006a10:	e00e      	b.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	3324      	adds	r3, #36	; 0x24
 8006a16:	2100      	movs	r1, #0
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f001 fd0b 	bl	8008434 <RCCEx_PLL3_Config>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a22:	e005      	b.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	75fb      	strb	r3, [r7, #23]
      break;
 8006a28:	e002      	b.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006a2a:	bf00      	nop
 8006a2c:	e000      	b.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006a2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a30:	7dfb      	ldrb	r3, [r7, #23]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d10a      	bne.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006a36:	4b36      	ldr	r3, [pc, #216]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a3a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006a44:	4932      	ldr	r1, [pc, #200]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006a46:	4313      	orrs	r3, r2
 8006a48:	658b      	str	r3, [r1, #88]	; 0x58
 8006a4a:	e001      	b.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a4c:	7dfb      	ldrb	r3, [r7, #23]
 8006a4e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d044      	beq.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006a62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a66:	d01f      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006a68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a6c:	d805      	bhi.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00a      	beq.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8006a72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a76:	d00e      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006a78:	e01f      	b.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8006a7a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006a7e:	d01f      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006a80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a84:	d01e      	beq.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006a86:	e018      	b.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a88:	4b21      	ldr	r3, [pc, #132]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a8c:	4a20      	ldr	r2, [pc, #128]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006a8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a94:	e017      	b.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	3304      	adds	r3, #4
 8006a9a:	2100      	movs	r1, #0
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f001 fc17 	bl	80082d0 <RCCEx_PLL2_Config>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006aa6:	e00e      	b.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	3324      	adds	r3, #36	; 0x24
 8006aac:	2100      	movs	r1, #0
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f001 fcc0 	bl	8008434 <RCCEx_PLL3_Config>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006ab8:	e005      	b.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	75fb      	strb	r3, [r7, #23]
      break;
 8006abe:	e002      	b.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006ac0:	bf00      	nop
 8006ac2:	e000      	b.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006ac4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ac6:	7dfb      	ldrb	r3, [r7, #23]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d10a      	bne.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006acc:	4b10      	ldr	r3, [pc, #64]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ad0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006ada:	490d      	ldr	r1, [pc, #52]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006adc:	4313      	orrs	r3, r2
 8006ade:	658b      	str	r3, [r1, #88]	; 0x58
 8006ae0:	e001      	b.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ae2:	7dfb      	ldrb	r3, [r7, #23]
 8006ae4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d035      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006af6:	2b10      	cmp	r3, #16
 8006af8:	d00c      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8006afa:	2b10      	cmp	r3, #16
 8006afc:	d802      	bhi.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d01b      	beq.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8006b02:	e017      	b.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006b04:	2b20      	cmp	r3, #32
 8006b06:	d00c      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8006b08:	2b30      	cmp	r3, #48	; 0x30
 8006b0a:	d018      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006b0c:	e012      	b.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006b0e:	bf00      	nop
 8006b10:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b14:	4baf      	ldr	r3, [pc, #700]	; (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b18:	4aae      	ldr	r2, [pc, #696]	; (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006b1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006b20:	e00e      	b.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	3304      	adds	r3, #4
 8006b26:	2102      	movs	r1, #2
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f001 fbd1 	bl	80082d0 <RCCEx_PLL2_Config>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006b32:	e005      	b.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	75fb      	strb	r3, [r7, #23]
      break;
 8006b38:	e002      	b.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006b3a:	bf00      	nop
 8006b3c:	e000      	b.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006b3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b40:	7dfb      	ldrb	r3, [r7, #23]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d109      	bne.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006b46:	4ba3      	ldr	r3, [pc, #652]	; (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b4a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b52:	49a0      	ldr	r1, [pc, #640]	; (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006b54:	4313      	orrs	r3, r2
 8006b56:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006b58:	e001      	b.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b5a:	7dfb      	ldrb	r3, [r7, #23]
 8006b5c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d042      	beq.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b72:	d01f      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8006b74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b78:	d805      	bhi.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00a      	beq.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8006b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b82:	d00e      	beq.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8006b84:	e01f      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8006b86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b8a:	d01f      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006b8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b90:	d01e      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8006b92:	e018      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b94:	4b8f      	ldr	r3, [pc, #572]	; (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b98:	4a8e      	ldr	r2, [pc, #568]	; (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006b9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006ba0:	e017      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	3304      	adds	r3, #4
 8006ba6:	2100      	movs	r1, #0
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f001 fb91 	bl	80082d0 <RCCEx_PLL2_Config>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006bb2:	e00e      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	3324      	adds	r3, #36	; 0x24
 8006bb8:	2100      	movs	r1, #0
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f001 fc3a 	bl	8008434 <RCCEx_PLL3_Config>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006bc4:	e005      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	75fb      	strb	r3, [r7, #23]
      break;
 8006bca:	e002      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006bcc:	bf00      	nop
 8006bce:	e000      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006bd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bd2:	7dfb      	ldrb	r3, [r7, #23]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d109      	bne.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006bd8:	4b7e      	ldr	r3, [pc, #504]	; (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bdc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006be4:	497b      	ldr	r1, [pc, #492]	; (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006be6:	4313      	orrs	r3, r2
 8006be8:	650b      	str	r3, [r1, #80]	; 0x50
 8006bea:	e001      	b.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bec:	7dfb      	ldrb	r3, [r7, #23]
 8006bee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d042      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c04:	d01b      	beq.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006c06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c0a:	d805      	bhi.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d022      	beq.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8006c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c14:	d00a      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006c16:	e01b      	b.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8006c18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c1c:	d01d      	beq.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8006c1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c22:	d01c      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8006c24:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c28:	d01b      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8006c2a:	e011      	b.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	3304      	adds	r3, #4
 8006c30:	2101      	movs	r1, #1
 8006c32:	4618      	mov	r0, r3
 8006c34:	f001 fb4c 	bl	80082d0 <RCCEx_PLL2_Config>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006c3c:	e012      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	3324      	adds	r3, #36	; 0x24
 8006c42:	2101      	movs	r1, #1
 8006c44:	4618      	mov	r0, r3
 8006c46:	f001 fbf5 	bl	8008434 <RCCEx_PLL3_Config>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006c4e:	e009      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	75fb      	strb	r3, [r7, #23]
      break;
 8006c54:	e006      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006c56:	bf00      	nop
 8006c58:	e004      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006c5a:	bf00      	nop
 8006c5c:	e002      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006c5e:	bf00      	nop
 8006c60:	e000      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006c62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c64:	7dfb      	ldrb	r3, [r7, #23]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d109      	bne.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006c6a:	4b5a      	ldr	r3, [pc, #360]	; (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c6e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c76:	4957      	ldr	r1, [pc, #348]	; (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	650b      	str	r3, [r1, #80]	; 0x50
 8006c7c:	e001      	b.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c7e:	7dfb      	ldrb	r3, [r7, #23]
 8006c80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d044      	beq.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006c94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c98:	d01b      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006c9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c9e:	d805      	bhi.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d022      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006ca4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ca8:	d00a      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8006caa:	e01b      	b.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8006cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cb0:	d01d      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006cb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006cb6:	d01c      	beq.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8006cb8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006cbc:	d01b      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006cbe:	e011      	b.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	3304      	adds	r3, #4
 8006cc4:	2101      	movs	r1, #1
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f001 fb02 	bl	80082d0 <RCCEx_PLL2_Config>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006cd0:	e012      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	3324      	adds	r3, #36	; 0x24
 8006cd6:	2101      	movs	r1, #1
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f001 fbab 	bl	8008434 <RCCEx_PLL3_Config>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006ce2:	e009      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	75fb      	strb	r3, [r7, #23]
      break;
 8006ce8:	e006      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006cea:	bf00      	nop
 8006cec:	e004      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006cee:	bf00      	nop
 8006cf0:	e002      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006cf2:	bf00      	nop
 8006cf4:	e000      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006cf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cf8:	7dfb      	ldrb	r3, [r7, #23]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d10a      	bne.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006cfe:	4b35      	ldr	r3, [pc, #212]	; (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d02:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006d0c:	4931      	ldr	r1, [pc, #196]	; (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	658b      	str	r3, [r1, #88]	; 0x58
 8006d12:	e001      	b.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d14:	7dfb      	ldrb	r3, [r7, #23]
 8006d16:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d02d      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d2c:	d005      	beq.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8006d2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d32:	d009      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d013      	beq.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006d38:	e00f      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d3a:	4b26      	ldr	r3, [pc, #152]	; (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3e:	4a25      	ldr	r2, [pc, #148]	; (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006d46:	e00c      	b.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	3304      	adds	r3, #4
 8006d4c:	2101      	movs	r1, #1
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f001 fabe 	bl	80082d0 <RCCEx_PLL2_Config>
 8006d54:	4603      	mov	r3, r0
 8006d56:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006d58:	e003      	b.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	75fb      	strb	r3, [r7, #23]
      break;
 8006d5e:	e000      	b.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8006d60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d62:	7dfb      	ldrb	r3, [r7, #23]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d109      	bne.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006d68:	4b1a      	ldr	r3, [pc, #104]	; (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d6c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d74:	4917      	ldr	r1, [pc, #92]	; (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006d76:	4313      	orrs	r3, r2
 8006d78:	650b      	str	r3, [r1, #80]	; 0x50
 8006d7a:	e001      	b.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d7c:	7dfb      	ldrb	r3, [r7, #23]
 8006d7e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d035      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d90:	2b03      	cmp	r3, #3
 8006d92:	d81b      	bhi.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006d94:	a201      	add	r2, pc, #4	; (adr r2, 8006d9c <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8006d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d9a:	bf00      	nop
 8006d9c:	08006dd9 	.word	0x08006dd9
 8006da0:	08006dad 	.word	0x08006dad
 8006da4:	08006dbb 	.word	0x08006dbb
 8006da8:	08006dd9 	.word	0x08006dd9
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dac:	4b09      	ldr	r3, [pc, #36]	; (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db0:	4a08      	ldr	r2, [pc, #32]	; (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006db2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006db6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006db8:	e00f      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	3304      	adds	r3, #4
 8006dbe:	2102      	movs	r1, #2
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f001 fa85 	bl	80082d0 <RCCEx_PLL2_Config>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006dca:	e006      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	75fb      	strb	r3, [r7, #23]
      break;
 8006dd0:	e003      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8006dd2:	bf00      	nop
 8006dd4:	58024400 	.word	0x58024400
      break;
 8006dd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006dda:	7dfb      	ldrb	r3, [r7, #23]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d109      	bne.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006de0:	4bba      	ldr	r3, [pc, #744]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006de4:	f023 0203 	bic.w	r2, r3, #3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dec:	49b7      	ldr	r1, [pc, #732]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006dee:	4313      	orrs	r3, r2
 8006df0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006df2:	e001      	b.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006df4:	7dfb      	ldrb	r3, [r7, #23]
 8006df6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f000 8086 	beq.w	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e06:	4bb2      	ldr	r3, [pc, #712]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4ab1      	ldr	r2, [pc, #708]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e12:	f7fa fbbd 	bl	8001590 <HAL_GetTick>
 8006e16:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e18:	e009      	b.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e1a:	f7fa fbb9 	bl	8001590 <HAL_GetTick>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	1ad3      	subs	r3, r2, r3
 8006e24:	2b64      	cmp	r3, #100	; 0x64
 8006e26:	d902      	bls.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8006e28:	2303      	movs	r3, #3
 8006e2a:	75fb      	strb	r3, [r7, #23]
        break;
 8006e2c:	e005      	b.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e2e:	4ba8      	ldr	r3, [pc, #672]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d0ef      	beq.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8006e3a:	7dfb      	ldrb	r3, [r7, #23]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d166      	bne.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006e40:	4ba2      	ldr	r3, [pc, #648]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006e42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e4a:	4053      	eors	r3, r2
 8006e4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d013      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e54:	4b9d      	ldr	r3, [pc, #628]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e5c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006e5e:	4b9b      	ldr	r3, [pc, #620]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e62:	4a9a      	ldr	r2, [pc, #616]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e68:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006e6a:	4b98      	ldr	r3, [pc, #608]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e6e:	4a97      	ldr	r2, [pc, #604]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006e70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e74:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006e76:	4a95      	ldr	r2, [pc, #596]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e86:	d115      	bne.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e88:	f7fa fb82 	bl	8001590 <HAL_GetTick>
 8006e8c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e8e:	e00b      	b.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e90:	f7fa fb7e 	bl	8001590 <HAL_GetTick>
 8006e94:	4602      	mov	r2, r0
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	1ad3      	subs	r3, r2, r3
 8006e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d902      	bls.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	75fb      	strb	r3, [r7, #23]
            break;
 8006ea6:	e005      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ea8:	4b88      	ldr	r3, [pc, #544]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eac:	f003 0302 	and.w	r3, r3, #2
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d0ed      	beq.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8006eb4:	7dfb      	ldrb	r3, [r7, #23]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d126      	bne.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ec0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ec4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ec8:	d10d      	bne.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8006eca:	4b80      	ldr	r3, [pc, #512]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ed8:	0919      	lsrs	r1, r3, #4
 8006eda:	4b7e      	ldr	r3, [pc, #504]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8006edc:	400b      	ands	r3, r1
 8006ede:	497b      	ldr	r1, [pc, #492]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	610b      	str	r3, [r1, #16]
 8006ee4:	e005      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8006ee6:	4b79      	ldr	r3, [pc, #484]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	4a78      	ldr	r2, [pc, #480]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006eec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006ef0:	6113      	str	r3, [r2, #16]
 8006ef2:	4b76      	ldr	r3, [pc, #472]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006ef4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f00:	4972      	ldr	r1, [pc, #456]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006f02:	4313      	orrs	r3, r2
 8006f04:	670b      	str	r3, [r1, #112]	; 0x70
 8006f06:	e004      	b.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006f08:	7dfb      	ldrb	r3, [r7, #23]
 8006f0a:	75bb      	strb	r3, [r7, #22]
 8006f0c:	e001      	b.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f0e:	7dfb      	ldrb	r3, [r7, #23]
 8006f10:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 0301 	and.w	r3, r3, #1
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d07d      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f22:	2b28      	cmp	r3, #40	; 0x28
 8006f24:	d866      	bhi.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8006f26:	a201      	add	r2, pc, #4	; (adr r2, 8006f2c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f2c:	08006ffb 	.word	0x08006ffb
 8006f30:	08006ff5 	.word	0x08006ff5
 8006f34:	08006ff5 	.word	0x08006ff5
 8006f38:	08006ff5 	.word	0x08006ff5
 8006f3c:	08006ff5 	.word	0x08006ff5
 8006f40:	08006ff5 	.word	0x08006ff5
 8006f44:	08006ff5 	.word	0x08006ff5
 8006f48:	08006ff5 	.word	0x08006ff5
 8006f4c:	08006fd1 	.word	0x08006fd1
 8006f50:	08006ff5 	.word	0x08006ff5
 8006f54:	08006ff5 	.word	0x08006ff5
 8006f58:	08006ff5 	.word	0x08006ff5
 8006f5c:	08006ff5 	.word	0x08006ff5
 8006f60:	08006ff5 	.word	0x08006ff5
 8006f64:	08006ff5 	.word	0x08006ff5
 8006f68:	08006ff5 	.word	0x08006ff5
 8006f6c:	08006fe3 	.word	0x08006fe3
 8006f70:	08006ff5 	.word	0x08006ff5
 8006f74:	08006ff5 	.word	0x08006ff5
 8006f78:	08006ff5 	.word	0x08006ff5
 8006f7c:	08006ff5 	.word	0x08006ff5
 8006f80:	08006ff5 	.word	0x08006ff5
 8006f84:	08006ff5 	.word	0x08006ff5
 8006f88:	08006ff5 	.word	0x08006ff5
 8006f8c:	08006ffb 	.word	0x08006ffb
 8006f90:	08006ff5 	.word	0x08006ff5
 8006f94:	08006ff5 	.word	0x08006ff5
 8006f98:	08006ff5 	.word	0x08006ff5
 8006f9c:	08006ff5 	.word	0x08006ff5
 8006fa0:	08006ff5 	.word	0x08006ff5
 8006fa4:	08006ff5 	.word	0x08006ff5
 8006fa8:	08006ff5 	.word	0x08006ff5
 8006fac:	08006ffb 	.word	0x08006ffb
 8006fb0:	08006ff5 	.word	0x08006ff5
 8006fb4:	08006ff5 	.word	0x08006ff5
 8006fb8:	08006ff5 	.word	0x08006ff5
 8006fbc:	08006ff5 	.word	0x08006ff5
 8006fc0:	08006ff5 	.word	0x08006ff5
 8006fc4:	08006ff5 	.word	0x08006ff5
 8006fc8:	08006ff5 	.word	0x08006ff5
 8006fcc:	08006ffb 	.word	0x08006ffb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	3304      	adds	r3, #4
 8006fd4:	2101      	movs	r1, #1
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f001 f97a 	bl	80082d0 <RCCEx_PLL2_Config>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006fe0:	e00c      	b.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	3324      	adds	r3, #36	; 0x24
 8006fe6:	2101      	movs	r1, #1
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f001 fa23 	bl	8008434 <RCCEx_PLL3_Config>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006ff2:	e003      	b.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	75fb      	strb	r3, [r7, #23]
      break;
 8006ff8:	e000      	b.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8006ffa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ffc:	7dfb      	ldrb	r3, [r7, #23]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d109      	bne.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007002:	4b32      	ldr	r3, [pc, #200]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007006:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800700e:	492f      	ldr	r1, [pc, #188]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007010:	4313      	orrs	r3, r2
 8007012:	654b      	str	r3, [r1, #84]	; 0x54
 8007014:	e001      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007016:	7dfb      	ldrb	r3, [r7, #23]
 8007018:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 0302 	and.w	r3, r3, #2
 8007022:	2b00      	cmp	r3, #0
 8007024:	d037      	beq.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800702a:	2b05      	cmp	r3, #5
 800702c:	d820      	bhi.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800702e:	a201      	add	r2, pc, #4	; (adr r2, 8007034 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007034:	08007077 	.word	0x08007077
 8007038:	0800704d 	.word	0x0800704d
 800703c:	0800705f 	.word	0x0800705f
 8007040:	08007077 	.word	0x08007077
 8007044:	08007077 	.word	0x08007077
 8007048:	08007077 	.word	0x08007077
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	3304      	adds	r3, #4
 8007050:	2101      	movs	r1, #1
 8007052:	4618      	mov	r0, r3
 8007054:	f001 f93c 	bl	80082d0 <RCCEx_PLL2_Config>
 8007058:	4603      	mov	r3, r0
 800705a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800705c:	e00c      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	3324      	adds	r3, #36	; 0x24
 8007062:	2101      	movs	r1, #1
 8007064:	4618      	mov	r0, r3
 8007066:	f001 f9e5 	bl	8008434 <RCCEx_PLL3_Config>
 800706a:	4603      	mov	r3, r0
 800706c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800706e:	e003      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	75fb      	strb	r3, [r7, #23]
      break;
 8007074:	e000      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8007076:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007078:	7dfb      	ldrb	r3, [r7, #23]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d109      	bne.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800707e:	4b13      	ldr	r3, [pc, #76]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007082:	f023 0207 	bic.w	r2, r3, #7
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800708a:	4910      	ldr	r1, [pc, #64]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800708c:	4313      	orrs	r3, r2
 800708e:	654b      	str	r3, [r1, #84]	; 0x54
 8007090:	e001      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007092:	7dfb      	ldrb	r3, [r7, #23]
 8007094:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 0304 	and.w	r3, r3, #4
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d040      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070a8:	2b05      	cmp	r3, #5
 80070aa:	d827      	bhi.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80070ac:	a201      	add	r2, pc, #4	; (adr r2, 80070b4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80070ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b2:	bf00      	nop
 80070b4:	08007103 	.word	0x08007103
 80070b8:	080070d9 	.word	0x080070d9
 80070bc:	080070eb 	.word	0x080070eb
 80070c0:	08007103 	.word	0x08007103
 80070c4:	08007103 	.word	0x08007103
 80070c8:	08007103 	.word	0x08007103
 80070cc:	58024400 	.word	0x58024400
 80070d0:	58024800 	.word	0x58024800
 80070d4:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	3304      	adds	r3, #4
 80070dc:	2101      	movs	r1, #1
 80070de:	4618      	mov	r0, r3
 80070e0:	f001 f8f6 	bl	80082d0 <RCCEx_PLL2_Config>
 80070e4:	4603      	mov	r3, r0
 80070e6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80070e8:	e00c      	b.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	3324      	adds	r3, #36	; 0x24
 80070ee:	2101      	movs	r1, #1
 80070f0:	4618      	mov	r0, r3
 80070f2:	f001 f99f 	bl	8008434 <RCCEx_PLL3_Config>
 80070f6:	4603      	mov	r3, r0
 80070f8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80070fa:	e003      	b.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	75fb      	strb	r3, [r7, #23]
      break;
 8007100:	e000      	b.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8007102:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007104:	7dfb      	ldrb	r3, [r7, #23]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d10a      	bne.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800710a:	4bb2      	ldr	r3, [pc, #712]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800710c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800710e:	f023 0207 	bic.w	r2, r3, #7
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007118:	49ae      	ldr	r1, [pc, #696]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800711a:	4313      	orrs	r3, r2
 800711c:	658b      	str	r3, [r1, #88]	; 0x58
 800711e:	e001      	b.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007120:	7dfb      	ldrb	r3, [r7, #23]
 8007122:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 0320 	and.w	r3, r3, #32
 800712c:	2b00      	cmp	r3, #0
 800712e:	d044      	beq.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007136:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800713a:	d01b      	beq.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800713c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007140:	d805      	bhi.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8007142:	2b00      	cmp	r3, #0
 8007144:	d022      	beq.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8007146:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800714a:	d00a      	beq.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800714c:	e01b      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800714e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007152:	d01d      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8007154:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007158:	d01c      	beq.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800715a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800715e:	d01b      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8007160:	e011      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	3304      	adds	r3, #4
 8007166:	2100      	movs	r1, #0
 8007168:	4618      	mov	r0, r3
 800716a:	f001 f8b1 	bl	80082d0 <RCCEx_PLL2_Config>
 800716e:	4603      	mov	r3, r0
 8007170:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007172:	e012      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	3324      	adds	r3, #36	; 0x24
 8007178:	2102      	movs	r1, #2
 800717a:	4618      	mov	r0, r3
 800717c:	f001 f95a 	bl	8008434 <RCCEx_PLL3_Config>
 8007180:	4603      	mov	r3, r0
 8007182:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007184:	e009      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	75fb      	strb	r3, [r7, #23]
      break;
 800718a:	e006      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800718c:	bf00      	nop
 800718e:	e004      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007190:	bf00      	nop
 8007192:	e002      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007194:	bf00      	nop
 8007196:	e000      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007198:	bf00      	nop
    }

    if(ret == HAL_OK)
 800719a:	7dfb      	ldrb	r3, [r7, #23]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d10a      	bne.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80071a0:	4b8c      	ldr	r3, [pc, #560]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80071a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071a4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071ae:	4989      	ldr	r1, [pc, #548]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80071b0:	4313      	orrs	r3, r2
 80071b2:	654b      	str	r3, [r1, #84]	; 0x54
 80071b4:	e001      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071b6:	7dfb      	ldrb	r3, [r7, #23]
 80071b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d044      	beq.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071d0:	d01b      	beq.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80071d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071d6:	d805      	bhi.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d022      	beq.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80071dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071e0:	d00a      	beq.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80071e2:	e01b      	b.n	800721c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80071e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071e8:	d01d      	beq.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80071ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80071ee:	d01c      	beq.n	800722a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80071f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071f4:	d01b      	beq.n	800722e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80071f6:	e011      	b.n	800721c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	3304      	adds	r3, #4
 80071fc:	2100      	movs	r1, #0
 80071fe:	4618      	mov	r0, r3
 8007200:	f001 f866 	bl	80082d0 <RCCEx_PLL2_Config>
 8007204:	4603      	mov	r3, r0
 8007206:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007208:	e012      	b.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	3324      	adds	r3, #36	; 0x24
 800720e:	2102      	movs	r1, #2
 8007210:	4618      	mov	r0, r3
 8007212:	f001 f90f 	bl	8008434 <RCCEx_PLL3_Config>
 8007216:	4603      	mov	r3, r0
 8007218:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800721a:	e009      	b.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	75fb      	strb	r3, [r7, #23]
      break;
 8007220:	e006      	b.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007222:	bf00      	nop
 8007224:	e004      	b.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007226:	bf00      	nop
 8007228:	e002      	b.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800722a:	bf00      	nop
 800722c:	e000      	b.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800722e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007230:	7dfb      	ldrb	r3, [r7, #23]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d10a      	bne.n	800724c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007236:	4b67      	ldr	r3, [pc, #412]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800723a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007244:	4963      	ldr	r1, [pc, #396]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007246:	4313      	orrs	r3, r2
 8007248:	658b      	str	r3, [r1, #88]	; 0x58
 800724a:	e001      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800724c:	7dfb      	ldrb	r3, [r7, #23]
 800724e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007258:	2b00      	cmp	r3, #0
 800725a:	d044      	beq.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007262:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007266:	d01b      	beq.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8007268:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800726c:	d805      	bhi.n	800727a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800726e:	2b00      	cmp	r3, #0
 8007270:	d022      	beq.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007272:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007276:	d00a      	beq.n	800728e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007278:	e01b      	b.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800727a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800727e:	d01d      	beq.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007280:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007284:	d01c      	beq.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8007286:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800728a:	d01b      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800728c:	e011      	b.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	3304      	adds	r3, #4
 8007292:	2100      	movs	r1, #0
 8007294:	4618      	mov	r0, r3
 8007296:	f001 f81b 	bl	80082d0 <RCCEx_PLL2_Config>
 800729a:	4603      	mov	r3, r0
 800729c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800729e:	e012      	b.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	3324      	adds	r3, #36	; 0x24
 80072a4:	2102      	movs	r1, #2
 80072a6:	4618      	mov	r0, r3
 80072a8:	f001 f8c4 	bl	8008434 <RCCEx_PLL3_Config>
 80072ac:	4603      	mov	r3, r0
 80072ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80072b0:	e009      	b.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	75fb      	strb	r3, [r7, #23]
      break;
 80072b6:	e006      	b.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80072b8:	bf00      	nop
 80072ba:	e004      	b.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80072bc:	bf00      	nop
 80072be:	e002      	b.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80072c0:	bf00      	nop
 80072c2:	e000      	b.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80072c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072c6:	7dfb      	ldrb	r3, [r7, #23]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d10a      	bne.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80072cc:	4b41      	ldr	r3, [pc, #260]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80072ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072d0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80072da:	493e      	ldr	r1, [pc, #248]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80072dc:	4313      	orrs	r3, r2
 80072de:	658b      	str	r3, [r1, #88]	; 0x58
 80072e0:	e001      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072e2:	7dfb      	ldrb	r3, [r7, #23]
 80072e4:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 0308 	and.w	r3, r3, #8
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d01a      	beq.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072fc:	d10a      	bne.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	3324      	adds	r3, #36	; 0x24
 8007302:	2102      	movs	r1, #2
 8007304:	4618      	mov	r0, r3
 8007306:	f001 f895 	bl	8008434 <RCCEx_PLL3_Config>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d001      	beq.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007314:	4b2f      	ldr	r3, [pc, #188]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007318:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007322:	492c      	ldr	r1, [pc, #176]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007324:	4313      	orrs	r3, r2
 8007326:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0310 	and.w	r3, r3, #16
 8007330:	2b00      	cmp	r3, #0
 8007332:	d01a      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800733a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800733e:	d10a      	bne.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	3324      	adds	r3, #36	; 0x24
 8007344:	2102      	movs	r1, #2
 8007346:	4618      	mov	r0, r3
 8007348:	f001 f874 	bl	8008434 <RCCEx_PLL3_Config>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d001      	beq.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007356:	4b1f      	ldr	r3, [pc, #124]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800735a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007364:	491b      	ldr	r1, [pc, #108]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007366:	4313      	orrs	r3, r2
 8007368:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007372:	2b00      	cmp	r3, #0
 8007374:	d032      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800737c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007380:	d00d      	beq.n	800739e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8007382:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007386:	d016      	beq.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8007388:	2b00      	cmp	r3, #0
 800738a:	d111      	bne.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	3304      	adds	r3, #4
 8007390:	2100      	movs	r1, #0
 8007392:	4618      	mov	r0, r3
 8007394:	f000 ff9c 	bl	80082d0 <RCCEx_PLL2_Config>
 8007398:	4603      	mov	r3, r0
 800739a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800739c:	e00c      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	3324      	adds	r3, #36	; 0x24
 80073a2:	2102      	movs	r1, #2
 80073a4:	4618      	mov	r0, r3
 80073a6:	f001 f845 	bl	8008434 <RCCEx_PLL3_Config>
 80073aa:	4603      	mov	r3, r0
 80073ac:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80073ae:	e003      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	75fb      	strb	r3, [r7, #23]
      break;
 80073b4:	e000      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80073b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073b8:	7dfb      	ldrb	r3, [r7, #23]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d10c      	bne.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80073be:	4b05      	ldr	r3, [pc, #20]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80073c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80073cc:	4901      	ldr	r1, [pc, #4]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80073ce:	4313      	orrs	r3, r2
 80073d0:	658b      	str	r3, [r1, #88]	; 0x58
 80073d2:	e003      	b.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80073d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073d8:	7dfb      	ldrb	r3, [r7, #23]
 80073da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d02f      	beq.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073f2:	d00c      	beq.n	800740e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80073f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80073f8:	d015      	beq.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80073fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073fe:	d10f      	bne.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007400:	4b79      	ldr	r3, [pc, #484]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007404:	4a78      	ldr	r2, [pc, #480]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007406:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800740a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800740c:	e00c      	b.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	3324      	adds	r3, #36	; 0x24
 8007412:	2101      	movs	r1, #1
 8007414:	4618      	mov	r0, r3
 8007416:	f001 f80d 	bl	8008434 <RCCEx_PLL3_Config>
 800741a:	4603      	mov	r3, r0
 800741c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800741e:	e003      	b.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	75fb      	strb	r3, [r7, #23]
      break;
 8007424:	e000      	b.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8007426:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007428:	7dfb      	ldrb	r3, [r7, #23]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d10a      	bne.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800742e:	4b6e      	ldr	r3, [pc, #440]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007432:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800743c:	496a      	ldr	r1, [pc, #424]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800743e:	4313      	orrs	r3, r2
 8007440:	654b      	str	r3, [r1, #84]	; 0x54
 8007442:	e001      	b.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007444:	7dfb      	ldrb	r3, [r7, #23]
 8007446:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007450:	2b00      	cmp	r3, #0
 8007452:	d029      	beq.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007458:	2b00      	cmp	r3, #0
 800745a:	d003      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800745c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007460:	d007      	beq.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8007462:	e00f      	b.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007464:	4b60      	ldr	r3, [pc, #384]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007468:	4a5f      	ldr	r2, [pc, #380]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800746a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800746e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007470:	e00b      	b.n	800748a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	3304      	adds	r3, #4
 8007476:	2102      	movs	r1, #2
 8007478:	4618      	mov	r0, r3
 800747a:	f000 ff29 	bl	80082d0 <RCCEx_PLL2_Config>
 800747e:	4603      	mov	r3, r0
 8007480:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007482:	e002      	b.n	800748a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	75fb      	strb	r3, [r7, #23]
      break;
 8007488:	bf00      	nop
    }

    if(ret == HAL_OK)
 800748a:	7dfb      	ldrb	r3, [r7, #23]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d109      	bne.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007490:	4b55      	ldr	r3, [pc, #340]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007494:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800749c:	4952      	ldr	r1, [pc, #328]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800749e:	4313      	orrs	r3, r2
 80074a0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80074a2:	e001      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074a4:	7dfb      	ldrb	r3, [r7, #23]
 80074a6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00a      	beq.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	3324      	adds	r3, #36	; 0x24
 80074b8:	2102      	movs	r1, #2
 80074ba:	4618      	mov	r0, r3
 80074bc:	f000 ffba 	bl	8008434 <RCCEx_PLL3_Config>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d001      	beq.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d02f      	beq.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074de:	d00c      	beq.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80074e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074e4:	d802      	bhi.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d011      	beq.n	800750e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80074ea:	e00d      	b.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80074ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074f0:	d00f      	beq.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80074f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074f6:	d00e      	beq.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80074f8:	e006      	b.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074fa:	4b3b      	ldr	r3, [pc, #236]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80074fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074fe:	4a3a      	ldr	r2, [pc, #232]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007504:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007506:	e007      	b.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	75fb      	strb	r3, [r7, #23]
      break;
 800750c:	e004      	b.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800750e:	bf00      	nop
 8007510:	e002      	b.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007512:	bf00      	nop
 8007514:	e000      	b.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007516:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007518:	7dfb      	ldrb	r3, [r7, #23]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d109      	bne.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800751e:	4b32      	ldr	r3, [pc, #200]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007522:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800752a:	492f      	ldr	r1, [pc, #188]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800752c:	4313      	orrs	r3, r2
 800752e:	654b      	str	r3, [r1, #84]	; 0x54
 8007530:	e001      	b.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007532:	7dfb      	ldrb	r3, [r7, #23]
 8007534:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800753e:	2b00      	cmp	r3, #0
 8007540:	d008      	beq.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007542:	4b29      	ldr	r3, [pc, #164]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007546:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800754e:	4926      	ldr	r1, [pc, #152]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007550:	4313      	orrs	r3, r2
 8007552:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800755c:	2b00      	cmp	r3, #0
 800755e:	d009      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007560:	4b21      	ldr	r3, [pc, #132]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007562:	691b      	ldr	r3, [r3, #16]
 8007564:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800756e:	491e      	ldr	r1, [pc, #120]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007570:	4313      	orrs	r3, r2
 8007572:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800757c:	2b00      	cmp	r3, #0
 800757e:	d008      	beq.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007580:	4b19      	ldr	r3, [pc, #100]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007584:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800758c:	4916      	ldr	r1, [pc, #88]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800758e:	4313      	orrs	r3, r2
 8007590:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800759a:	2b00      	cmp	r3, #0
 800759c:	d00d      	beq.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800759e:	4b12      	ldr	r3, [pc, #72]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	4a11      	ldr	r2, [pc, #68]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80075a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80075a8:	6113      	str	r3, [r2, #16]
 80075aa:	4b0f      	ldr	r3, [pc, #60]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80075ac:	691a      	ldr	r2, [r3, #16]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80075b4:	490c      	ldr	r1, [pc, #48]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80075b6:	4313      	orrs	r3, r2
 80075b8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	da08      	bge.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80075c2:	4b09      	ldr	r3, [pc, #36]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80075c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ce:	4906      	ldr	r1, [pc, #24]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80075d0:	4313      	orrs	r3, r2
 80075d2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80075d4:	7dbb      	ldrb	r3, [r7, #22]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d101      	bne.n	80075de <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 80075da:	2300      	movs	r3, #0
 80075dc:	e000      	b.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3718      	adds	r7, #24
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	58024400 	.word	0x58024400

080075ec <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b090      	sub	sp, #64	; 0x40
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075fa:	d150      	bne.n	800769e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80075fc:	4ba1      	ldr	r3, [pc, #644]	; (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80075fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007600:	f003 0307 	and.w	r3, r3, #7
 8007604:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007608:	2b04      	cmp	r3, #4
 800760a:	d844      	bhi.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 800760c:	a201      	add	r2, pc, #4	; (adr r2, 8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800760e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007612:	bf00      	nop
 8007614:	08007629 	.word	0x08007629
 8007618:	08007639 	.word	0x08007639
 800761c:	08007649 	.word	0x08007649
 8007620:	08007691 	.word	0x08007691
 8007624:	08007659 	.word	0x08007659
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800762c:	4618      	mov	r0, r3
 800762e:	f000 fd03 	bl	8008038 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007634:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007636:	e241      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007638:	f107 0318 	add.w	r3, r7, #24
 800763c:	4618      	mov	r0, r3
 800763e:	f000 fa63 	bl	8007b08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007646:	e239      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007648:	f107 030c 	add.w	r3, r7, #12
 800764c:	4618      	mov	r0, r3
 800764e:	f000 fba7 	bl	8007da0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007656:	e231      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007658:	4b8a      	ldr	r3, [pc, #552]	; (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800765a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800765c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007660:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007664:	2b00      	cmp	r3, #0
 8007666:	d102      	bne.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007668:	4b87      	ldr	r3, [pc, #540]	; (8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800766a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800766c:	e226      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800766e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007670:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007674:	d102      	bne.n	800767c <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8007676:	4b85      	ldr	r3, [pc, #532]	; (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007678:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800767a:	e21f      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800767c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800767e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007682:	d102      	bne.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8007684:	4b82      	ldr	r3, [pc, #520]	; (8007890 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007686:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007688:	e218      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800768a:	2300      	movs	r3, #0
 800768c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800768e:	e215      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007690:	4b80      	ldr	r3, [pc, #512]	; (8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007692:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007694:	e212      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007696:	2300      	movs	r3, #0
 8007698:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800769a:	bf00      	nop
 800769c:	e20e      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076a4:	d14f      	bne.n	8007746 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80076a6:	4b77      	ldr	r3, [pc, #476]	; (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80076a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076aa:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80076ae:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80076b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b2:	2b80      	cmp	r3, #128	; 0x80
 80076b4:	d01c      	beq.n	80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80076b6:	2b80      	cmp	r3, #128	; 0x80
 80076b8:	d804      	bhi.n	80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d008      	beq.n	80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 80076be:	2b40      	cmp	r3, #64	; 0x40
 80076c0:	d00e      	beq.n	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80076c2:	e03c      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 80076c4:	2bc0      	cmp	r3, #192	; 0xc0
 80076c6:	d037      	beq.n	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80076c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076cc:	d018      	beq.n	8007700 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 80076ce:	e036      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076d4:	4618      	mov	r0, r3
 80076d6:	f000 fcaf 	bl	8008038 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80076da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076de:	e1ed      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076e0:	f107 0318 	add.w	r3, r7, #24
 80076e4:	4618      	mov	r0, r3
 80076e6:	f000 fa0f 	bl	8007b08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076ee:	e1e5      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076f0:	f107 030c 	add.w	r3, r7, #12
 80076f4:	4618      	mov	r0, r3
 80076f6:	f000 fb53 	bl	8007da0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076fe:	e1dd      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007700:	4b60      	ldr	r3, [pc, #384]	; (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007704:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007708:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800770a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800770c:	2b00      	cmp	r3, #0
 800770e:	d102      	bne.n	8007716 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007710:	4b5d      	ldr	r3, [pc, #372]	; (8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007712:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007714:	e1d2      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007718:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800771c:	d102      	bne.n	8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800771e:	4b5b      	ldr	r3, [pc, #364]	; (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007720:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007722:	e1cb      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007726:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800772a:	d102      	bne.n	8007732 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 800772c:	4b58      	ldr	r3, [pc, #352]	; (8007890 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800772e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007730:	e1c4      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007732:	2300      	movs	r3, #0
 8007734:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007736:	e1c1      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007738:	4b56      	ldr	r3, [pc, #344]	; (8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800773a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800773c:	e1be      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800773e:	2300      	movs	r3, #0
 8007740:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007742:	bf00      	nop
 8007744:	e1ba      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800774c:	d153      	bne.n	80077f6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800774e:	4b4d      	ldr	r3, [pc, #308]	; (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007752:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007756:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800775e:	d01f      	beq.n	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8007760:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007764:	d805      	bhi.n	8007772 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8007766:	2b00      	cmp	r3, #0
 8007768:	d00a      	beq.n	8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800776a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800776e:	d00f      	beq.n	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8007770:	e03d      	b.n	80077ee <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8007772:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007776:	d037      	beq.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8007778:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800777c:	d018      	beq.n	80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800777e:	e036      	b.n	80077ee <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007784:	4618      	mov	r0, r3
 8007786:	f000 fc57 	bl	8008038 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800778a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800778e:	e195      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007790:	f107 0318 	add.w	r3, r7, #24
 8007794:	4618      	mov	r0, r3
 8007796:	f000 f9b7 	bl	8007b08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800779e:	e18d      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077a0:	f107 030c 	add.w	r3, r7, #12
 80077a4:	4618      	mov	r0, r3
 80077a6:	f000 fafb 	bl	8007da0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077ae:	e185      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80077b0:	4b34      	ldr	r3, [pc, #208]	; (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80077b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80077b8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80077ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d102      	bne.n	80077c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80077c0:	4b31      	ldr	r3, [pc, #196]	; (8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80077c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80077c4:	e17a      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80077c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077cc:	d102      	bne.n	80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 80077ce:	4b2f      	ldr	r3, [pc, #188]	; (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80077d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077d2:	e173      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80077d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077da:	d102      	bne.n	80077e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 80077dc:	4b2c      	ldr	r3, [pc, #176]	; (8007890 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80077de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077e0:	e16c      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80077e2:	2300      	movs	r3, #0
 80077e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077e6:	e169      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80077e8:	4b2a      	ldr	r3, [pc, #168]	; (8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80077ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077ec:	e166      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80077ee:	2300      	movs	r3, #0
 80077f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077f2:	bf00      	nop
 80077f4:	e162      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077fc:	d15d      	bne.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80077fe:	4b21      	ldr	r3, [pc, #132]	; (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007802:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007806:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800780e:	d01f      	beq.n	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007810:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007814:	d805      	bhi.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00a      	beq.n	8007830 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800781a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800781e:	d00f      	beq.n	8007840 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8007820:	e047      	b.n	80078b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8007822:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007826:	d041      	beq.n	80078ac <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8007828:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800782c:	d018      	beq.n	8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800782e:	e040      	b.n	80078b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007834:	4618      	mov	r0, r3
 8007836:	f000 fbff 	bl	8008038 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800783a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800783c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800783e:	e13d      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007840:	f107 0318 	add.w	r3, r7, #24
 8007844:	4618      	mov	r0, r3
 8007846:	f000 f95f 	bl	8007b08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800784e:	e135      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007850:	f107 030c 	add.w	r3, r7, #12
 8007854:	4618      	mov	r0, r3
 8007856:	f000 faa3 	bl	8007da0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800785e:	e12d      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007860:	4b08      	ldr	r3, [pc, #32]	; (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007864:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007868:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800786a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800786c:	2b00      	cmp	r3, #0
 800786e:	d102      	bne.n	8007876 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007870:	4b05      	ldr	r3, [pc, #20]	; (8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007872:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007874:	e122      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007878:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800787c:	d10c      	bne.n	8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800787e:	4b03      	ldr	r3, [pc, #12]	; (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007880:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007882:	e11b      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007884:	58024400 	.word	0x58024400
 8007888:	03d09000 	.word	0x03d09000
 800788c:	003d0900 	.word	0x003d0900
 8007890:	017d7840 	.word	0x017d7840
 8007894:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800789a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800789e:	d102      	bne.n	80078a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 80078a0:	4b89      	ldr	r3, [pc, #548]	; (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80078a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078a4:	e10a      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80078a6:	2300      	movs	r3, #0
 80078a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078aa:	e107      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80078ac:	4b87      	ldr	r3, [pc, #540]	; (8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 80078ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078b0:	e104      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80078b2:	2300      	movs	r3, #0
 80078b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078b6:	bf00      	nop
 80078b8:	e100      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078c0:	d153      	bne.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80078c2:	4b83      	ldr	r3, [pc, #524]	; (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80078c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078c6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80078ca:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80078cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078d2:	d01f      	beq.n	8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80078d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078d8:	d805      	bhi.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00a      	beq.n	80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 80078de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078e2:	d00f      	beq.n	8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80078e4:	e03d      	b.n	8007962 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 80078e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80078ea:	d037      	beq.n	800795c <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80078ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078f0:	d018      	beq.n	8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80078f2:	e036      	b.n	8007962 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078f8:	4618      	mov	r0, r3
 80078fa:	f000 fb9d 	bl	8008038 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80078fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007900:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007902:	e0db      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007904:	f107 0318 	add.w	r3, r7, #24
 8007908:	4618      	mov	r0, r3
 800790a:	f000 f8fd 	bl	8007b08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007912:	e0d3      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007914:	f107 030c 	add.w	r3, r7, #12
 8007918:	4618      	mov	r0, r3
 800791a:	f000 fa41 	bl	8007da0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007922:	e0cb      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007924:	4b6a      	ldr	r3, [pc, #424]	; (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007928:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800792c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800792e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007930:	2b00      	cmp	r3, #0
 8007932:	d102      	bne.n	800793a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007934:	4b67      	ldr	r3, [pc, #412]	; (8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007936:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007938:	e0c0      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800793a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800793c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007940:	d102      	bne.n	8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8007942:	4b65      	ldr	r3, [pc, #404]	; (8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007944:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007946:	e0b9      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800794a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800794e:	d102      	bne.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8007950:	4b5d      	ldr	r3, [pc, #372]	; (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007952:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007954:	e0b2      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007956:	2300      	movs	r3, #0
 8007958:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800795a:	e0af      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800795c:	4b5b      	ldr	r3, [pc, #364]	; (8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800795e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007960:	e0ac      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007962:	2300      	movs	r3, #0
 8007964:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007966:	bf00      	nop
 8007968:	e0a8      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007970:	d13d      	bne.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007972:	4b57      	ldr	r3, [pc, #348]	; (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007976:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800797a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800797c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800797e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007982:	d00c      	beq.n	800799e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007984:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007988:	d011      	beq.n	80079ae <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800798a:	2b00      	cmp	r3, #0
 800798c:	d12b      	bne.n	80079e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800798e:	f107 0318 	add.w	r3, r7, #24
 8007992:	4618      	mov	r0, r3
 8007994:	f000 f8b8 	bl	8007b08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800799c:	e08e      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800799e:	f107 030c 	add.w	r3, r7, #12
 80079a2:	4618      	mov	r0, r3
 80079a4:	f000 f9fc 	bl	8007da0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079ac:	e086      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80079ae:	4b48      	ldr	r3, [pc, #288]	; (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80079b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80079b6:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80079b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d102      	bne.n	80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80079be:	4b45      	ldr	r3, [pc, #276]	; (8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80079c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80079c2:	e07b      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80079c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079ca:	d102      	bne.n	80079d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 80079cc:	4b42      	ldr	r3, [pc, #264]	; (8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80079ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079d0:	e074      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80079d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079d8:	d102      	bne.n	80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 80079da:	4b3b      	ldr	r3, [pc, #236]	; (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80079dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079de:	e06d      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80079e0:	2300      	movs	r3, #0
 80079e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079e4:	e06a      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80079e6:	2300      	movs	r3, #0
 80079e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079ea:	bf00      	nop
 80079ec:	e066      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079f4:	d11f      	bne.n	8007a36 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80079f6:	4b36      	ldr	r3, [pc, #216]	; (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80079f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079fe:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d003      	beq.n	8007a0e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007a06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a0a:	d008      	beq.n	8007a1e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8007a0c:	e00f      	b.n	8007a2e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a12:	4618      	mov	r0, r3
 8007a14:	f000 fb10 	bl	8008038 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a1c:	e04e      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a1e:	f107 0318 	add.w	r3, r7, #24
 8007a22:	4618      	mov	r0, r3
 8007a24:	f000 f870 	bl	8007b08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007a28:	6a3b      	ldr	r3, [r7, #32]
 8007a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a2c:	e046      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a32:	bf00      	nop
 8007a34:	e042      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a3c:	d13c      	bne.n	8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007a3e:	4b24      	ldr	r3, [pc, #144]	; (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a42:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007a46:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a4e:	d01e      	beq.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8007a50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a54:	d805      	bhi.n	8007a62 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00d      	beq.n	8007a76 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8007a5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a5e:	d00e      	beq.n	8007a7e <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8007a60:	e026      	b.n	8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8007a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a66:	d01d      	beq.n	8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8007a68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a6c:	d01d      	beq.n	8007aaa <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8007a6e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007a72:	d014      	beq.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8007a74:	e01c      	b.n	8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007a76:	f000 f831 	bl	8007adc <HAL_RCCEx_GetD3PCLK1Freq>
 8007a7a:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007a7c:	e01e      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a7e:	f107 0318 	add.w	r3, r7, #24
 8007a82:	4618      	mov	r0, r3
 8007a84:	f000 f840 	bl	8007b08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a8c:	e016      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a8e:	f107 030c 	add.w	r3, r7, #12
 8007a92:	4618      	mov	r0, r3
 8007a94:	f000 f984 	bl	8007da0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a9c:	e00e      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8007a9e:	4b0d      	ldr	r3, [pc, #52]	; (8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007aa2:	e00b      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8007aa4:	4b0c      	ldr	r3, [pc, #48]	; (8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007aa8:	e008      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8007aaa:	4b07      	ldr	r3, [pc, #28]	; (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007aac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007aae:	e005      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ab4:	bf00      	nop
 8007ab6:	e001      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3740      	adds	r7, #64	; 0x40
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	017d7840 	.word	0x017d7840
 8007acc:	00bb8000 	.word	0x00bb8000
 8007ad0:	58024400 	.word	0x58024400
 8007ad4:	03d09000 	.word	0x03d09000
 8007ad8:	003d0900 	.word	0x003d0900

08007adc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007ae0:	f7fe fe3a 	bl	8006758 <HAL_RCC_GetHCLKFreq>
 8007ae4:	4601      	mov	r1, r0
 8007ae6:	4b06      	ldr	r3, [pc, #24]	; (8007b00 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007ae8:	6a1b      	ldr	r3, [r3, #32]
 8007aea:	091b      	lsrs	r3, r3, #4
 8007aec:	f003 0307 	and.w	r3, r3, #7
 8007af0:	4a04      	ldr	r2, [pc, #16]	; (8007b04 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007af2:	5cd3      	ldrb	r3, [r2, r3]
 8007af4:	f003 031f 	and.w	r3, r3, #31
 8007af8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	bd80      	pop	{r7, pc}
 8007b00:	58024400 	.word	0x58024400
 8007b04:	0800fe04 	.word	0x0800fe04

08007b08 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b089      	sub	sp, #36	; 0x24
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b10:	4b9d      	ldr	r3, [pc, #628]	; (8007d88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b14:	f003 0303 	and.w	r3, r3, #3
 8007b18:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007b1a:	4b9b      	ldr	r3, [pc, #620]	; (8007d88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b1e:	0b1b      	lsrs	r3, r3, #12
 8007b20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b24:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007b26:	4b98      	ldr	r3, [pc, #608]	; (8007d88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b2a:	091b      	lsrs	r3, r3, #4
 8007b2c:	f003 0301 	and.w	r3, r3, #1
 8007b30:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007b32:	4b95      	ldr	r3, [pc, #596]	; (8007d88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b36:	08db      	lsrs	r3, r3, #3
 8007b38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b3c:	693a      	ldr	r2, [r7, #16]
 8007b3e:	fb02 f303 	mul.w	r3, r2, r3
 8007b42:	ee07 3a90 	vmov	s15, r3
 8007b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b4a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	f000 810a 	beq.w	8007d6a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d05a      	beq.n	8007c12 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d302      	bcc.n	8007b66 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	d078      	beq.n	8007c56 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8007b64:	e099      	b.n	8007c9a <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b66:	4b88      	ldr	r3, [pc, #544]	; (8007d88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f003 0320 	and.w	r3, r3, #32
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d02d      	beq.n	8007bce <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b72:	4b85      	ldr	r3, [pc, #532]	; (8007d88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	08db      	lsrs	r3, r3, #3
 8007b78:	f003 0303 	and.w	r3, r3, #3
 8007b7c:	4a83      	ldr	r2, [pc, #524]	; (8007d8c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8007b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8007b82:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	ee07 3a90 	vmov	s15, r3
 8007b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	ee07 3a90 	vmov	s15, r3
 8007b94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b9c:	4b7a      	ldr	r3, [pc, #488]	; (8007d88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ba4:	ee07 3a90 	vmov	s15, r3
 8007ba8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bac:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bb0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007d90 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007bb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bc8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007bcc:	e087      	b.n	8007cde <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	ee07 3a90 	vmov	s15, r3
 8007bd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bd8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007d94 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8007bdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007be0:	4b69      	ldr	r3, [pc, #420]	; (8007d88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007be8:	ee07 3a90 	vmov	s15, r3
 8007bec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bf0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bf4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007d90 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007bf8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c0c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c10:	e065      	b.n	8007cde <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	ee07 3a90 	vmov	s15, r3
 8007c18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c1c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007d98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007c20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c24:	4b58      	ldr	r3, [pc, #352]	; (8007d88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c2c:	ee07 3a90 	vmov	s15, r3
 8007c30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c34:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c38:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007d90 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007c3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c50:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c54:	e043      	b.n	8007cde <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	ee07 3a90 	vmov	s15, r3
 8007c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c60:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007d9c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8007c64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c68:	4b47      	ldr	r3, [pc, #284]	; (8007d88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c70:	ee07 3a90 	vmov	s15, r3
 8007c74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c78:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c7c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007d90 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007c80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c94:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c98:	e021      	b.n	8007cde <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	ee07 3a90 	vmov	s15, r3
 8007ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ca4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007d98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007ca8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cac:	4b36      	ldr	r3, [pc, #216]	; (8007d88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cb4:	ee07 3a90 	vmov	s15, r3
 8007cb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cbc:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cc0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007d90 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007cc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ccc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cd8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007cdc:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007cde:	4b2a      	ldr	r3, [pc, #168]	; (8007d88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce2:	0a5b      	lsrs	r3, r3, #9
 8007ce4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ce8:	ee07 3a90 	vmov	s15, r3
 8007cec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cf0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007cf4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cf8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d04:	ee17 2a90 	vmov	r2, s15
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007d0c:	4b1e      	ldr	r3, [pc, #120]	; (8007d88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d10:	0c1b      	lsrs	r3, r3, #16
 8007d12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d16:	ee07 3a90 	vmov	s15, r3
 8007d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d26:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d32:	ee17 2a90 	vmov	r2, s15
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007d3a:	4b13      	ldr	r3, [pc, #76]	; (8007d88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d3e:	0e1b      	lsrs	r3, r3, #24
 8007d40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d44:	ee07 3a90 	vmov	s15, r3
 8007d48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d54:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d60:	ee17 2a90 	vmov	r2, s15
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007d68:	e008      	b.n	8007d7c <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	609a      	str	r2, [r3, #8]
}
 8007d7c:	bf00      	nop
 8007d7e:	3724      	adds	r7, #36	; 0x24
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr
 8007d88:	58024400 	.word	0x58024400
 8007d8c:	03d09000 	.word	0x03d09000
 8007d90:	46000000 	.word	0x46000000
 8007d94:	4c742400 	.word	0x4c742400
 8007d98:	4a742400 	.word	0x4a742400
 8007d9c:	4bbebc20 	.word	0x4bbebc20

08007da0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b089      	sub	sp, #36	; 0x24
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007da8:	4b9d      	ldr	r3, [pc, #628]	; (8008020 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dac:	f003 0303 	and.w	r3, r3, #3
 8007db0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007db2:	4b9b      	ldr	r3, [pc, #620]	; (8008020 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db6:	0d1b      	lsrs	r3, r3, #20
 8007db8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007dbc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007dbe:	4b98      	ldr	r3, [pc, #608]	; (8008020 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc2:	0a1b      	lsrs	r3, r3, #8
 8007dc4:	f003 0301 	and.w	r3, r3, #1
 8007dc8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007dca:	4b95      	ldr	r3, [pc, #596]	; (8008020 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dce:	08db      	lsrs	r3, r3, #3
 8007dd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007dd4:	693a      	ldr	r2, [r7, #16]
 8007dd6:	fb02 f303 	mul.w	r3, r2, r3
 8007dda:	ee07 3a90 	vmov	s15, r3
 8007dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007de2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	f000 810a 	beq.w	8008002 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d05a      	beq.n	8007eaa <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d302      	bcc.n	8007dfe <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8007df8:	2b02      	cmp	r3, #2
 8007dfa:	d078      	beq.n	8007eee <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8007dfc:	e099      	b.n	8007f32 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007dfe:	4b88      	ldr	r3, [pc, #544]	; (8008020 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f003 0320 	and.w	r3, r3, #32
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d02d      	beq.n	8007e66 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007e0a:	4b85      	ldr	r3, [pc, #532]	; (8008020 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	08db      	lsrs	r3, r3, #3
 8007e10:	f003 0303 	and.w	r3, r3, #3
 8007e14:	4a83      	ldr	r2, [pc, #524]	; (8008024 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8007e16:	fa22 f303 	lsr.w	r3, r2, r3
 8007e1a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	ee07 3a90 	vmov	s15, r3
 8007e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	ee07 3a90 	vmov	s15, r3
 8007e2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e34:	4b7a      	ldr	r3, [pc, #488]	; (8008020 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e3c:	ee07 3a90 	vmov	s15, r3
 8007e40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e44:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e48:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008028 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007e4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e60:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007e64:	e087      	b.n	8007f76 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	ee07 3a90 	vmov	s15, r3
 8007e6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e70:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800802c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8007e74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e78:	4b69      	ldr	r3, [pc, #420]	; (8008020 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e80:	ee07 3a90 	vmov	s15, r3
 8007e84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e88:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e8c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008028 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007e90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ea0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ea4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ea8:	e065      	b.n	8007f76 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	ee07 3a90 	vmov	s15, r3
 8007eb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eb4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007eb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ebc:	4b58      	ldr	r3, [pc, #352]	; (8008020 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ec4:	ee07 3a90 	vmov	s15, r3
 8007ec8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ecc:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ed0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008028 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007ed4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ed8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007edc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ee0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ee4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ee8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007eec:	e043      	b.n	8007f76 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	ee07 3a90 	vmov	s15, r3
 8007ef4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ef8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008034 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8007efc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f00:	4b47      	ldr	r3, [pc, #284]	; (8008020 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f08:	ee07 3a90 	vmov	s15, r3
 8007f0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f10:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f14:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008028 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007f18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f2c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f30:	e021      	b.n	8007f76 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	ee07 3a90 	vmov	s15, r3
 8007f38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f3c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007f40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f44:	4b36      	ldr	r3, [pc, #216]	; (8008020 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f4c:	ee07 3a90 	vmov	s15, r3
 8007f50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f54:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f58:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008028 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007f5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f70:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f74:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007f76:	4b2a      	ldr	r3, [pc, #168]	; (8008020 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f7a:	0a5b      	lsrs	r3, r3, #9
 8007f7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f80:	ee07 3a90 	vmov	s15, r3
 8007f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f90:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f9c:	ee17 2a90 	vmov	r2, s15
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007fa4:	4b1e      	ldr	r3, [pc, #120]	; (8008020 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa8:	0c1b      	lsrs	r3, r3, #16
 8007faa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fae:	ee07 3a90 	vmov	s15, r3
 8007fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fca:	ee17 2a90 	vmov	r2, s15
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007fd2:	4b13      	ldr	r3, [pc, #76]	; (8008020 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd6:	0e1b      	lsrs	r3, r3, #24
 8007fd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fdc:	ee07 3a90 	vmov	s15, r3
 8007fe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fe4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fe8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fec:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ff0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ff4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ff8:	ee17 2a90 	vmov	r2, s15
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008000:	e008      	b.n	8008014 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2200      	movs	r2, #0
 800800c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	609a      	str	r2, [r3, #8]
}
 8008014:	bf00      	nop
 8008016:	3724      	adds	r7, #36	; 0x24
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr
 8008020:	58024400 	.word	0x58024400
 8008024:	03d09000 	.word	0x03d09000
 8008028:	46000000 	.word	0x46000000
 800802c:	4c742400 	.word	0x4c742400
 8008030:	4a742400 	.word	0x4a742400
 8008034:	4bbebc20 	.word	0x4bbebc20

08008038 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8008038:	b480      	push	{r7}
 800803a:	b089      	sub	sp, #36	; 0x24
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008040:	4b9d      	ldr	r3, [pc, #628]	; (80082b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008044:	f003 0303 	and.w	r3, r3, #3
 8008048:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800804a:	4b9b      	ldr	r3, [pc, #620]	; (80082b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800804c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800804e:	091b      	lsrs	r3, r3, #4
 8008050:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008054:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008056:	4b98      	ldr	r3, [pc, #608]	; (80082b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800805a:	f003 0301 	and.w	r3, r3, #1
 800805e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008060:	4b95      	ldr	r3, [pc, #596]	; (80082b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008064:	08db      	lsrs	r3, r3, #3
 8008066:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800806a:	693a      	ldr	r2, [r7, #16]
 800806c:	fb02 f303 	mul.w	r3, r2, r3
 8008070:	ee07 3a90 	vmov	s15, r3
 8008074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008078:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	2b00      	cmp	r3, #0
 8008080:	f000 810a 	beq.w	8008298 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	2b01      	cmp	r3, #1
 8008088:	d05a      	beq.n	8008140 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800808a:	2b01      	cmp	r3, #1
 800808c:	d302      	bcc.n	8008094 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800808e:	2b02      	cmp	r3, #2
 8008090:	d078      	beq.n	8008184 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8008092:	e099      	b.n	80081c8 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008094:	4b88      	ldr	r3, [pc, #544]	; (80082b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f003 0320 	and.w	r3, r3, #32
 800809c:	2b00      	cmp	r3, #0
 800809e:	d02d      	beq.n	80080fc <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80080a0:	4b85      	ldr	r3, [pc, #532]	; (80082b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	08db      	lsrs	r3, r3, #3
 80080a6:	f003 0303 	and.w	r3, r3, #3
 80080aa:	4a84      	ldr	r2, [pc, #528]	; (80082bc <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 80080ac:	fa22 f303 	lsr.w	r3, r2, r3
 80080b0:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	ee07 3a90 	vmov	s15, r3
 80080b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	ee07 3a90 	vmov	s15, r3
 80080c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080ca:	4b7b      	ldr	r3, [pc, #492]	; (80082b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80080cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080d2:	ee07 3a90 	vmov	s15, r3
 80080d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080da:	ed97 6a03 	vldr	s12, [r7, #12]
 80080de:	eddf 5a78 	vldr	s11, [pc, #480]	; 80082c0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80080e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080f6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80080fa:	e087      	b.n	800820c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	ee07 3a90 	vmov	s15, r3
 8008102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008106:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80082c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800810a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800810e:	4b6a      	ldr	r3, [pc, #424]	; (80082b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008116:	ee07 3a90 	vmov	s15, r3
 800811a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800811e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008122:	eddf 5a67 	vldr	s11, [pc, #412]	; 80082c0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800812a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800812e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800813a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800813e:	e065      	b.n	800820c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	ee07 3a90 	vmov	s15, r3
 8008146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800814a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80082c8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800814e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008152:	4b59      	ldr	r3, [pc, #356]	; (80082b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800815a:	ee07 3a90 	vmov	s15, r3
 800815e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008162:	ed97 6a03 	vldr	s12, [r7, #12]
 8008166:	eddf 5a56 	vldr	s11, [pc, #344]	; 80082c0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800816a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800816e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008172:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800817a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800817e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008182:	e043      	b.n	800820c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	ee07 3a90 	vmov	s15, r3
 800818a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800818e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80082cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008196:	4b48      	ldr	r3, [pc, #288]	; (80082b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800819a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800819e:	ee07 3a90 	vmov	s15, r3
 80081a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80081aa:	eddf 5a45 	vldr	s11, [pc, #276]	; 80082c0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80081ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081c6:	e021      	b.n	800820c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	ee07 3a90 	vmov	s15, r3
 80081ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80082c8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80081d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081da:	4b37      	ldr	r3, [pc, #220]	; (80082b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80081dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081e2:	ee07 3a90 	vmov	s15, r3
 80081e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80081ee:	eddf 5a34 	vldr	s11, [pc, #208]	; 80082c0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80081f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008206:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800820a:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800820c:	4b2a      	ldr	r3, [pc, #168]	; (80082b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800820e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008210:	0a5b      	lsrs	r3, r3, #9
 8008212:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008216:	ee07 3a90 	vmov	s15, r3
 800821a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800821e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008222:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008226:	edd7 6a07 	vldr	s13, [r7, #28]
 800822a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800822e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008232:	ee17 2a90 	vmov	r2, s15
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800823a:	4b1f      	ldr	r3, [pc, #124]	; (80082b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800823c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800823e:	0c1b      	lsrs	r3, r3, #16
 8008240:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008244:	ee07 3a90 	vmov	s15, r3
 8008248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800824c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008250:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008254:	edd7 6a07 	vldr	s13, [r7, #28]
 8008258:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800825c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008260:	ee17 2a90 	vmov	r2, s15
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008268:	4b13      	ldr	r3, [pc, #76]	; (80082b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800826a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800826c:	0e1b      	lsrs	r3, r3, #24
 800826e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008272:	ee07 3a90 	vmov	s15, r3
 8008276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800827a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800827e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008282:	edd7 6a07 	vldr	s13, [r7, #28]
 8008286:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800828a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800828e:	ee17 2a90 	vmov	r2, s15
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008296:	e008      	b.n	80082aa <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	609a      	str	r2, [r3, #8]
}
 80082aa:	bf00      	nop
 80082ac:	3724      	adds	r7, #36	; 0x24
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr
 80082b6:	bf00      	nop
 80082b8:	58024400 	.word	0x58024400
 80082bc:	03d09000 	.word	0x03d09000
 80082c0:	46000000 	.word	0x46000000
 80082c4:	4c742400 	.word	0x4c742400
 80082c8:	4a742400 	.word	0x4a742400
 80082cc:	4bbebc20 	.word	0x4bbebc20

080082d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80082da:	2300      	movs	r3, #0
 80082dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80082de:	4b53      	ldr	r3, [pc, #332]	; (800842c <RCCEx_PLL2_Config+0x15c>)
 80082e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e2:	f003 0303 	and.w	r3, r3, #3
 80082e6:	2b03      	cmp	r3, #3
 80082e8:	d101      	bne.n	80082ee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	e099      	b.n	8008422 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80082ee:	4b4f      	ldr	r3, [pc, #316]	; (800842c <RCCEx_PLL2_Config+0x15c>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a4e      	ldr	r2, [pc, #312]	; (800842c <RCCEx_PLL2_Config+0x15c>)
 80082f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80082f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082fa:	f7f9 f949 	bl	8001590 <HAL_GetTick>
 80082fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008300:	e008      	b.n	8008314 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008302:	f7f9 f945 	bl	8001590 <HAL_GetTick>
 8008306:	4602      	mov	r2, r0
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	1ad3      	subs	r3, r2, r3
 800830c:	2b02      	cmp	r3, #2
 800830e:	d901      	bls.n	8008314 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008310:	2303      	movs	r3, #3
 8008312:	e086      	b.n	8008422 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008314:	4b45      	ldr	r3, [pc, #276]	; (800842c <RCCEx_PLL2_Config+0x15c>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800831c:	2b00      	cmp	r3, #0
 800831e:	d1f0      	bne.n	8008302 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008320:	4b42      	ldr	r3, [pc, #264]	; (800842c <RCCEx_PLL2_Config+0x15c>)
 8008322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008324:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	031b      	lsls	r3, r3, #12
 800832e:	493f      	ldr	r1, [pc, #252]	; (800842c <RCCEx_PLL2_Config+0x15c>)
 8008330:	4313      	orrs	r3, r2
 8008332:	628b      	str	r3, [r1, #40]	; 0x28
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	3b01      	subs	r3, #1
 800833a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	3b01      	subs	r3, #1
 8008344:	025b      	lsls	r3, r3, #9
 8008346:	b29b      	uxth	r3, r3
 8008348:	431a      	orrs	r2, r3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	68db      	ldr	r3, [r3, #12]
 800834e:	3b01      	subs	r3, #1
 8008350:	041b      	lsls	r3, r3, #16
 8008352:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008356:	431a      	orrs	r2, r3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	691b      	ldr	r3, [r3, #16]
 800835c:	3b01      	subs	r3, #1
 800835e:	061b      	lsls	r3, r3, #24
 8008360:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008364:	4931      	ldr	r1, [pc, #196]	; (800842c <RCCEx_PLL2_Config+0x15c>)
 8008366:	4313      	orrs	r3, r2
 8008368:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800836a:	4b30      	ldr	r3, [pc, #192]	; (800842c <RCCEx_PLL2_Config+0x15c>)
 800836c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800836e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	695b      	ldr	r3, [r3, #20]
 8008376:	492d      	ldr	r1, [pc, #180]	; (800842c <RCCEx_PLL2_Config+0x15c>)
 8008378:	4313      	orrs	r3, r2
 800837a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800837c:	4b2b      	ldr	r3, [pc, #172]	; (800842c <RCCEx_PLL2_Config+0x15c>)
 800837e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008380:	f023 0220 	bic.w	r2, r3, #32
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	699b      	ldr	r3, [r3, #24]
 8008388:	4928      	ldr	r1, [pc, #160]	; (800842c <RCCEx_PLL2_Config+0x15c>)
 800838a:	4313      	orrs	r3, r2
 800838c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800838e:	4b27      	ldr	r3, [pc, #156]	; (800842c <RCCEx_PLL2_Config+0x15c>)
 8008390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008392:	4a26      	ldr	r2, [pc, #152]	; (800842c <RCCEx_PLL2_Config+0x15c>)
 8008394:	f023 0310 	bic.w	r3, r3, #16
 8008398:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800839a:	4b24      	ldr	r3, [pc, #144]	; (800842c <RCCEx_PLL2_Config+0x15c>)
 800839c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800839e:	4b24      	ldr	r3, [pc, #144]	; (8008430 <RCCEx_PLL2_Config+0x160>)
 80083a0:	4013      	ands	r3, r2
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	69d2      	ldr	r2, [r2, #28]
 80083a6:	00d2      	lsls	r2, r2, #3
 80083a8:	4920      	ldr	r1, [pc, #128]	; (800842c <RCCEx_PLL2_Config+0x15c>)
 80083aa:	4313      	orrs	r3, r2
 80083ac:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80083ae:	4b1f      	ldr	r3, [pc, #124]	; (800842c <RCCEx_PLL2_Config+0x15c>)
 80083b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b2:	4a1e      	ldr	r2, [pc, #120]	; (800842c <RCCEx_PLL2_Config+0x15c>)
 80083b4:	f043 0310 	orr.w	r3, r3, #16
 80083b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d106      	bne.n	80083ce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80083c0:	4b1a      	ldr	r3, [pc, #104]	; (800842c <RCCEx_PLL2_Config+0x15c>)
 80083c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c4:	4a19      	ldr	r2, [pc, #100]	; (800842c <RCCEx_PLL2_Config+0x15c>)
 80083c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80083cc:	e00f      	b.n	80083ee <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d106      	bne.n	80083e2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80083d4:	4b15      	ldr	r3, [pc, #84]	; (800842c <RCCEx_PLL2_Config+0x15c>)
 80083d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d8:	4a14      	ldr	r2, [pc, #80]	; (800842c <RCCEx_PLL2_Config+0x15c>)
 80083da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80083e0:	e005      	b.n	80083ee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80083e2:	4b12      	ldr	r3, [pc, #72]	; (800842c <RCCEx_PLL2_Config+0x15c>)
 80083e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e6:	4a11      	ldr	r2, [pc, #68]	; (800842c <RCCEx_PLL2_Config+0x15c>)
 80083e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80083ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80083ee:	4b0f      	ldr	r3, [pc, #60]	; (800842c <RCCEx_PLL2_Config+0x15c>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a0e      	ldr	r2, [pc, #56]	; (800842c <RCCEx_PLL2_Config+0x15c>)
 80083f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80083f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083fa:	f7f9 f8c9 	bl	8001590 <HAL_GetTick>
 80083fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008400:	e008      	b.n	8008414 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008402:	f7f9 f8c5 	bl	8001590 <HAL_GetTick>
 8008406:	4602      	mov	r2, r0
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	1ad3      	subs	r3, r2, r3
 800840c:	2b02      	cmp	r3, #2
 800840e:	d901      	bls.n	8008414 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008410:	2303      	movs	r3, #3
 8008412:	e006      	b.n	8008422 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008414:	4b05      	ldr	r3, [pc, #20]	; (800842c <RCCEx_PLL2_Config+0x15c>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800841c:	2b00      	cmp	r3, #0
 800841e:	d0f0      	beq.n	8008402 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008420:	7bfb      	ldrb	r3, [r7, #15]
}
 8008422:	4618      	mov	r0, r3
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	58024400 	.word	0x58024400
 8008430:	ffff0007 	.word	0xffff0007

08008434 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800843e:	2300      	movs	r3, #0
 8008440:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008442:	4b53      	ldr	r3, [pc, #332]	; (8008590 <RCCEx_PLL3_Config+0x15c>)
 8008444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008446:	f003 0303 	and.w	r3, r3, #3
 800844a:	2b03      	cmp	r3, #3
 800844c:	d101      	bne.n	8008452 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	e099      	b.n	8008586 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008452:	4b4f      	ldr	r3, [pc, #316]	; (8008590 <RCCEx_PLL3_Config+0x15c>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a4e      	ldr	r2, [pc, #312]	; (8008590 <RCCEx_PLL3_Config+0x15c>)
 8008458:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800845c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800845e:	f7f9 f897 	bl	8001590 <HAL_GetTick>
 8008462:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008464:	e008      	b.n	8008478 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008466:	f7f9 f893 	bl	8001590 <HAL_GetTick>
 800846a:	4602      	mov	r2, r0
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	1ad3      	subs	r3, r2, r3
 8008470:	2b02      	cmp	r3, #2
 8008472:	d901      	bls.n	8008478 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008474:	2303      	movs	r3, #3
 8008476:	e086      	b.n	8008586 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008478:	4b45      	ldr	r3, [pc, #276]	; (8008590 <RCCEx_PLL3_Config+0x15c>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008480:	2b00      	cmp	r3, #0
 8008482:	d1f0      	bne.n	8008466 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008484:	4b42      	ldr	r3, [pc, #264]	; (8008590 <RCCEx_PLL3_Config+0x15c>)
 8008486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008488:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	051b      	lsls	r3, r3, #20
 8008492:	493f      	ldr	r1, [pc, #252]	; (8008590 <RCCEx_PLL3_Config+0x15c>)
 8008494:	4313      	orrs	r3, r2
 8008496:	628b      	str	r3, [r1, #40]	; 0x28
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	3b01      	subs	r3, #1
 800849e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	3b01      	subs	r3, #1
 80084a8:	025b      	lsls	r3, r3, #9
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	431a      	orrs	r2, r3
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	68db      	ldr	r3, [r3, #12]
 80084b2:	3b01      	subs	r3, #1
 80084b4:	041b      	lsls	r3, r3, #16
 80084b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80084ba:	431a      	orrs	r2, r3
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	691b      	ldr	r3, [r3, #16]
 80084c0:	3b01      	subs	r3, #1
 80084c2:	061b      	lsls	r3, r3, #24
 80084c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80084c8:	4931      	ldr	r1, [pc, #196]	; (8008590 <RCCEx_PLL3_Config+0x15c>)
 80084ca:	4313      	orrs	r3, r2
 80084cc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80084ce:	4b30      	ldr	r3, [pc, #192]	; (8008590 <RCCEx_PLL3_Config+0x15c>)
 80084d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	695b      	ldr	r3, [r3, #20]
 80084da:	492d      	ldr	r1, [pc, #180]	; (8008590 <RCCEx_PLL3_Config+0x15c>)
 80084dc:	4313      	orrs	r3, r2
 80084de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80084e0:	4b2b      	ldr	r3, [pc, #172]	; (8008590 <RCCEx_PLL3_Config+0x15c>)
 80084e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084e4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	699b      	ldr	r3, [r3, #24]
 80084ec:	4928      	ldr	r1, [pc, #160]	; (8008590 <RCCEx_PLL3_Config+0x15c>)
 80084ee:	4313      	orrs	r3, r2
 80084f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80084f2:	4b27      	ldr	r3, [pc, #156]	; (8008590 <RCCEx_PLL3_Config+0x15c>)
 80084f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f6:	4a26      	ldr	r2, [pc, #152]	; (8008590 <RCCEx_PLL3_Config+0x15c>)
 80084f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80084fe:	4b24      	ldr	r3, [pc, #144]	; (8008590 <RCCEx_PLL3_Config+0x15c>)
 8008500:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008502:	4b24      	ldr	r3, [pc, #144]	; (8008594 <RCCEx_PLL3_Config+0x160>)
 8008504:	4013      	ands	r3, r2
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	69d2      	ldr	r2, [r2, #28]
 800850a:	00d2      	lsls	r2, r2, #3
 800850c:	4920      	ldr	r1, [pc, #128]	; (8008590 <RCCEx_PLL3_Config+0x15c>)
 800850e:	4313      	orrs	r3, r2
 8008510:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008512:	4b1f      	ldr	r3, [pc, #124]	; (8008590 <RCCEx_PLL3_Config+0x15c>)
 8008514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008516:	4a1e      	ldr	r2, [pc, #120]	; (8008590 <RCCEx_PLL3_Config+0x15c>)
 8008518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800851c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d106      	bne.n	8008532 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008524:	4b1a      	ldr	r3, [pc, #104]	; (8008590 <RCCEx_PLL3_Config+0x15c>)
 8008526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008528:	4a19      	ldr	r2, [pc, #100]	; (8008590 <RCCEx_PLL3_Config+0x15c>)
 800852a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800852e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008530:	e00f      	b.n	8008552 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	2b01      	cmp	r3, #1
 8008536:	d106      	bne.n	8008546 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008538:	4b15      	ldr	r3, [pc, #84]	; (8008590 <RCCEx_PLL3_Config+0x15c>)
 800853a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800853c:	4a14      	ldr	r2, [pc, #80]	; (8008590 <RCCEx_PLL3_Config+0x15c>)
 800853e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008542:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008544:	e005      	b.n	8008552 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008546:	4b12      	ldr	r3, [pc, #72]	; (8008590 <RCCEx_PLL3_Config+0x15c>)
 8008548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800854a:	4a11      	ldr	r2, [pc, #68]	; (8008590 <RCCEx_PLL3_Config+0x15c>)
 800854c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008550:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008552:	4b0f      	ldr	r3, [pc, #60]	; (8008590 <RCCEx_PLL3_Config+0x15c>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a0e      	ldr	r2, [pc, #56]	; (8008590 <RCCEx_PLL3_Config+0x15c>)
 8008558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800855c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800855e:	f7f9 f817 	bl	8001590 <HAL_GetTick>
 8008562:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008564:	e008      	b.n	8008578 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008566:	f7f9 f813 	bl	8001590 <HAL_GetTick>
 800856a:	4602      	mov	r2, r0
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	1ad3      	subs	r3, r2, r3
 8008570:	2b02      	cmp	r3, #2
 8008572:	d901      	bls.n	8008578 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008574:	2303      	movs	r3, #3
 8008576:	e006      	b.n	8008586 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008578:	4b05      	ldr	r3, [pc, #20]	; (8008590 <RCCEx_PLL3_Config+0x15c>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008580:	2b00      	cmp	r3, #0
 8008582:	d0f0      	beq.n	8008566 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008584:	7bfb      	ldrb	r3, [r7, #15]
}
 8008586:	4618      	mov	r0, r3
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	58024400 	.word	0x58024400
 8008594:	ffff0007 	.word	0xffff0007

08008598 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b08a      	sub	sp, #40	; 0x28
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d101      	bne.n	80085aa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	e07c      	b.n	80086a4 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d10c      	bne.n	80085d0 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2200      	movs	r2, #0
 80085ba:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	699b      	ldr	r3, [r3, #24]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d102      	bne.n	80085ca <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2202      	movs	r2, #2
 80085c8:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f7f8 fcc6 	bl	8000f5c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2203      	movs	r2, #3
 80085d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 f867 	bl	80086ac <HAL_SD_InitCard>
 80085de:	4603      	mov	r3, r0
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d001      	beq.n	80085e8 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 80085e4:	2301      	movs	r3, #1
 80085e6:	e05d      	b.n	80086a4 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80085e8:	f107 0308 	add.w	r3, r7, #8
 80085ec:	4619      	mov	r1, r3
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 fdbe 	bl	8009170 <HAL_SD_GetCardStatus>
 80085f4:	4603      	mov	r3, r0
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d001      	beq.n	80085fe <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	e052      	b.n	80086a4 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80085fe:	7e3b      	ldrb	r3, [r7, #24]
 8008600:	b2db      	uxtb	r3, r3
 8008602:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8008604:	7e7b      	ldrb	r3, [r7, #25]
 8008606:	b2db      	uxtb	r3, r3
 8008608:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800860e:	2b01      	cmp	r3, #1
 8008610:	d10a      	bne.n	8008628 <HAL_SD_Init+0x90>
 8008612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008614:	2b00      	cmp	r3, #0
 8008616:	d102      	bne.n	800861e <HAL_SD_Init+0x86>
 8008618:	6a3b      	ldr	r3, [r7, #32]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d004      	beq.n	8008628 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008624:	65da      	str	r2, [r3, #92]	; 0x5c
 8008626:	e00b      	b.n	8008640 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800862c:	2b01      	cmp	r3, #1
 800862e:	d104      	bne.n	800863a <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008636:	65da      	str	r2, [r3, #92]	; 0x5c
 8008638:	e002      	b.n	8008640 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	68db      	ldr	r3, [r3, #12]
 8008644:	4619      	mov	r1, r3
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 fe74 	bl	8009334 <HAL_SD_ConfigWideBusOperation>
 800864c:	4603      	mov	r3, r0
 800864e:	2b00      	cmp	r3, #0
 8008650:	d001      	beq.n	8008656 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 8008652:	2301      	movs	r3, #1
 8008654:	e026      	b.n	80086a4 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008656:	f7f8 ff9b 	bl	8001590 <HAL_GetTick>
 800865a:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800865c:	e011      	b.n	8008682 <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800865e:	f7f8 ff97 	bl	8001590 <HAL_GetTick>
 8008662:	4602      	mov	r2, r0
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	1ad3      	subs	r3, r2, r3
 8008668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800866c:	d109      	bne.n	8008682 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008674:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2201      	movs	r2, #1
 800867a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800867e:	2303      	movs	r3, #3
 8008680:	e010      	b.n	80086a4 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 ff00 	bl	8009488 <HAL_SD_GetCardState>
 8008688:	4603      	mov	r3, r0
 800868a:	2b04      	cmp	r3, #4
 800868c:	d1e7      	bne.n	800865e <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2200      	movs	r2, #0
 8008692:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2200      	movs	r2, #0
 8008698:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2201      	movs	r2, #1
 800869e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80086a2:	2300      	movs	r3, #0
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3728      	adds	r7, #40	; 0x28
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80086ac:	b5b0      	push	{r4, r5, r7, lr}
 80086ae:	b08e      	sub	sp, #56	; 0x38
 80086b0:	af04      	add	r7, sp, #16
 80086b2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80086b4:	2300      	movs	r3, #0
 80086b6:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80086b8:	2300      	movs	r3, #0
 80086ba:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80086bc:	2300      	movs	r3, #0
 80086be:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80086c0:	2300      	movs	r3, #0
 80086c2:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80086c4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80086c8:	f7fe ff90 	bl	80075ec <HAL_RCCEx_GetPeriphCLKFreq>
 80086cc:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 80086ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d0:	0a1b      	lsrs	r3, r3, #8
 80086d2:	4a40      	ldr	r2, [pc, #256]	; (80087d4 <HAL_SD_InitCard+0x128>)
 80086d4:	fba2 2303 	umull	r2, r3, r2, r3
 80086d8:	091b      	lsrs	r3, r3, #4
 80086da:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	699b      	ldr	r3, [r3, #24]
 80086e0:	2b02      	cmp	r3, #2
 80086e2:	d107      	bne.n	80086f4 <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f042 0210 	orr.w	r2, r2, #16
 80086f2:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681d      	ldr	r5, [r3, #0]
 80086f8:	466c      	mov	r4, sp
 80086fa:	f107 0314 	add.w	r3, r7, #20
 80086fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008702:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008706:	f107 0308 	add.w	r3, r7, #8
 800870a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800870c:	4628      	mov	r0, r5
 800870e:	f002 fdf9 	bl	800b304 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4618      	mov	r0, r3
 8008718:	f002 fe3c 	bl	800b394 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	005b      	lsls	r3, r3, #1
 8008720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008722:	fbb2 f3f3 	udiv	r3, r2, r3
 8008726:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 8008728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872a:	2b00      	cmp	r3, #0
 800872c:	d008      	beq.n	8008740 <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800872e:	4a2a      	ldr	r2, [pc, #168]	; (80087d8 <HAL_SD_InitCard+0x12c>)
 8008730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008732:	fbb2 f3f3 	udiv	r3, r2, r3
 8008736:	3301      	adds	r3, #1
 8008738:	4618      	mov	r0, r3
 800873a:	f7f8 ff35 	bl	80015a8 <HAL_Delay>
 800873e:	e002      	b.n	8008746 <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 8008740:	2002      	movs	r0, #2
 8008742:	f7f8 ff31 	bl	80015a8 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 ff7c 	bl	8009644 <SD_PowerON>
 800874c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800874e:	6a3b      	ldr	r3, [r7, #32]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d00b      	beq.n	800876c <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2201      	movs	r2, #1
 8008758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008760:	6a3b      	ldr	r3, [r7, #32]
 8008762:	431a      	orrs	r2, r3
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008768:	2301      	movs	r3, #1
 800876a:	e02e      	b.n	80087ca <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 feab 	bl	80094c8 <SD_InitCard>
 8008772:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008774:	6a3b      	ldr	r3, [r7, #32]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d00b      	beq.n	8008792 <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2201      	movs	r2, #1
 800877e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008786:	6a3b      	ldr	r3, [r7, #32]
 8008788:	431a      	orrs	r2, r3
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	e01b      	b.n	80087ca <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f44f 7100 	mov.w	r1, #512	; 0x200
 800879a:	4618      	mov	r0, r3
 800879c:	f002 fe90 	bl	800b4c0 <SDMMC_CmdBlockLength>
 80087a0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80087a2:	6a3b      	ldr	r3, [r7, #32]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d00f      	beq.n	80087c8 <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a0b      	ldr	r2, [pc, #44]	; (80087dc <HAL_SD_InitCard+0x130>)
 80087ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087b4:	6a3b      	ldr	r3, [r7, #32]
 80087b6:	431a      	orrs	r2, r3
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80087c4:	2301      	movs	r3, #1
 80087c6:	e000      	b.n	80087ca <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 80087c8:	2300      	movs	r3, #0
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3728      	adds	r7, #40	; 0x28
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bdb0      	pop	{r4, r5, r7, pc}
 80087d2:	bf00      	nop
 80087d4:	014f8b59 	.word	0x014f8b59
 80087d8:	00012110 	.word	0x00012110
 80087dc:	1fe00fff 	.word	0x1fe00fff

080087e0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b092      	sub	sp, #72	; 0x48
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	607a      	str	r2, [r7, #4]
 80087ec:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80087ee:	f7f8 fecf 	bl	8001590 <HAL_GetTick>
 80087f2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d107      	bne.n	8008812 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008806:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800880e:	2301      	movs	r3, #1
 8008810:	e167      	b.n	8008ae2 <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008818:	b2db      	uxtb	r3, r3
 800881a:	2b01      	cmp	r3, #1
 800881c:	f040 815a 	bne.w	8008ad4 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2200      	movs	r2, #0
 8008824:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008826:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	441a      	add	r2, r3
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008830:	429a      	cmp	r2, r3
 8008832:	d907      	bls.n	8008844 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008838:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008840:	2301      	movs	r3, #1
 8008842:	e14e      	b.n	8008ae2 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2203      	movs	r2, #3
 8008848:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2200      	movs	r2, #0
 8008852:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008858:	2b01      	cmp	r3, #1
 800885a:	d002      	beq.n	8008862 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800885c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800885e:	025b      	lsls	r3, r3, #9
 8008860:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008862:	f04f 33ff 	mov.w	r3, #4294967295
 8008866:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	025b      	lsls	r3, r3, #9
 800886c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800886e:	2390      	movs	r3, #144	; 0x90
 8008870:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008872:	2302      	movs	r3, #2
 8008874:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008876:	2300      	movs	r3, #0
 8008878:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800887a:	2300      	movs	r3, #0
 800887c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f107 0214 	add.w	r2, r7, #20
 8008886:	4611      	mov	r1, r2
 8008888:	4618      	mov	r0, r3
 800888a:	f002 fded 	bl	800b468 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	68da      	ldr	r2, [r3, #12]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800889c:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d90a      	bls.n	80088ba <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2202      	movs	r2, #2
 80088a8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80088b0:	4618      	mov	r0, r3
 80088b2:	f002 fe4b 	bl	800b54c <SDMMC_CmdReadMultiBlock>
 80088b6:	6478      	str	r0, [r7, #68]	; 0x44
 80088b8:	e009      	b.n	80088ce <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2201      	movs	r2, #1
 80088be:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80088c6:	4618      	mov	r0, r3
 80088c8:	f002 fe1d 	bl	800b506 <SDMMC_CmdReadSingleBlock>
 80088cc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80088ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d012      	beq.n	80088fa <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a84      	ldr	r2, [pc, #528]	; (8008aec <HAL_SD_ReadBlocks+0x30c>)
 80088da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088e2:	431a      	orrs	r2, r3
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2201      	movs	r2, #1
 80088ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2200      	movs	r2, #0
 80088f4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80088f6:	2301      	movs	r3, #1
 80088f8:	e0f3      	b.n	8008ae2 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 80088fa:	69bb      	ldr	r3, [r7, #24]
 80088fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80088fe:	e058      	b.n	80089b2 <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008906:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800890a:	2b00      	cmp	r3, #0
 800890c:	d033      	beq.n	8008976 <HAL_SD_ReadBlocks+0x196>
 800890e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008910:	2b1f      	cmp	r3, #31
 8008912:	d930      	bls.n	8008976 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8008914:	2300      	movs	r3, #0
 8008916:	643b      	str	r3, [r7, #64]	; 0x40
 8008918:	e027      	b.n	800896a <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4618      	mov	r0, r3
 8008920:	f002 fd1a 	bl	800b358 <SDMMC_ReadFIFO>
 8008924:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8008926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008928:	b2da      	uxtb	r2, r3
 800892a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800892c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800892e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008930:	3301      	adds	r3, #1
 8008932:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008936:	0a1b      	lsrs	r3, r3, #8
 8008938:	b2da      	uxtb	r2, r3
 800893a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800893c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800893e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008940:	3301      	adds	r3, #1
 8008942:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008946:	0c1b      	lsrs	r3, r3, #16
 8008948:	b2da      	uxtb	r2, r3
 800894a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800894c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800894e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008950:	3301      	adds	r3, #1
 8008952:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008956:	0e1b      	lsrs	r3, r3, #24
 8008958:	b2da      	uxtb	r2, r3
 800895a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800895c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800895e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008960:	3301      	adds	r3, #1
 8008962:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 8008964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008966:	3301      	adds	r3, #1
 8008968:	643b      	str	r3, [r7, #64]	; 0x40
 800896a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800896c:	2b07      	cmp	r3, #7
 800896e:	d9d4      	bls.n	800891a <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008972:	3b20      	subs	r3, #32
 8008974:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008976:	f7f8 fe0b 	bl	8001590 <HAL_GetTick>
 800897a:	4602      	mov	r2, r0
 800897c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897e:	1ad3      	subs	r3, r2, r3
 8008980:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008982:	429a      	cmp	r2, r3
 8008984:	d902      	bls.n	800898c <HAL_SD_ReadBlocks+0x1ac>
 8008986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008988:	2b00      	cmp	r3, #0
 800898a:	d112      	bne.n	80089b2 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a56      	ldr	r2, [pc, #344]	; (8008aec <HAL_SD_ReadBlocks+0x30c>)
 8008992:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008998:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2201      	movs	r2, #1
 80089a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2200      	movs	r2, #0
 80089ac:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80089ae:	2303      	movs	r3, #3
 80089b0:	e097      	b.n	8008ae2 <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089b8:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d09f      	beq.n	8008900 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	68da      	ldr	r2, [r3, #12]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089ce:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d022      	beq.n	8008a24 <HAL_SD_ReadBlocks+0x244>
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d91f      	bls.n	8008a24 <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089e8:	2b03      	cmp	r3, #3
 80089ea:	d01b      	beq.n	8008a24 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4618      	mov	r0, r3
 80089f2:	f002 fe15 	bl	800b620 <SDMMC_CmdStopTransfer>
 80089f6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80089f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d012      	beq.n	8008a24 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a3a      	ldr	r2, [pc, #232]	; (8008aec <HAL_SD_ReadBlocks+0x30c>)
 8008a04:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a0c:	431a      	orrs	r2, r3
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2201      	movs	r2, #1
 8008a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008a20:	2301      	movs	r3, #1
 8008a22:	e05e      	b.n	8008ae2 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a2a:	f003 0308 	and.w	r3, r3, #8
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d012      	beq.n	8008a58 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a2d      	ldr	r2, [pc, #180]	; (8008aec <HAL_SD_ReadBlocks+0x30c>)
 8008a38:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a3e:	f043 0208 	orr.w	r2, r3, #8
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2201      	movs	r2, #1
 8008a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2200      	movs	r2, #0
 8008a52:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008a54:	2301      	movs	r3, #1
 8008a56:	e044      	b.n	8008ae2 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a5e:	f003 0302 	and.w	r3, r3, #2
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d012      	beq.n	8008a8c <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a20      	ldr	r2, [pc, #128]	; (8008aec <HAL_SD_ReadBlocks+0x30c>)
 8008a6c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a72:	f043 0202 	orr.w	r2, r3, #2
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2200      	movs	r2, #0
 8008a86:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	e02a      	b.n	8008ae2 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a92:	f003 0320 	and.w	r3, r3, #32
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d012      	beq.n	8008ac0 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a13      	ldr	r2, [pc, #76]	; (8008aec <HAL_SD_ReadBlocks+0x30c>)
 8008aa0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa6:	f043 0220 	orr.w	r2, r3, #32
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008abc:	2301      	movs	r3, #1
 8008abe:	e010      	b.n	8008ae2 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a0a      	ldr	r2, [pc, #40]	; (8008af0 <HAL_SD_ReadBlocks+0x310>)
 8008ac6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2201      	movs	r2, #1
 8008acc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	e006      	b.n	8008ae2 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008ae0:	2301      	movs	r3, #1
  }
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3748      	adds	r7, #72	; 0x48
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	bf00      	nop
 8008aec:	1fe00fff 	.word	0x1fe00fff
 8008af0:	18000f3a 	.word	0x18000f3a

08008af4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b092      	sub	sp, #72	; 0x48
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	60b9      	str	r1, [r7, #8]
 8008afe:	607a      	str	r2, [r7, #4]
 8008b00:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008b02:	f7f8 fd45 	bl	8001590 <HAL_GetTick>
 8008b06:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d107      	bne.n	8008b26 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b1a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008b22:	2301      	movs	r3, #1
 8008b24:	e16b      	b.n	8008dfe <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	f040 815e 	bne.w	8008df0 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2200      	movs	r2, #0
 8008b38:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008b3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	441a      	add	r2, r3
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d907      	bls.n	8008b58 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b4c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008b54:	2301      	movs	r3, #1
 8008b56:	e152      	b.n	8008dfe <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2203      	movs	r2, #3
 8008b5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	2200      	movs	r2, #0
 8008b66:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d002      	beq.n	8008b76 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b72:	025b      	lsls	r3, r3, #9
 8008b74:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008b76:	f04f 33ff 	mov.w	r3, #4294967295
 8008b7a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	025b      	lsls	r3, r3, #9
 8008b80:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008b82:	2390      	movs	r3, #144	; 0x90
 8008b84:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008b86:	2300      	movs	r3, #0
 8008b88:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f107 0218 	add.w	r2, r7, #24
 8008b9a:	4611      	mov	r1, r2
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f002 fc63 	bl	800b468 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	68da      	ldr	r2, [r3, #12]
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bb0:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d90a      	bls.n	8008bce <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2220      	movs	r2, #32
 8008bbc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f002 fd07 	bl	800b5d8 <SDMMC_CmdWriteMultiBlock>
 8008bca:	6478      	str	r0, [r7, #68]	; 0x44
 8008bcc:	e009      	b.n	8008be2 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2210      	movs	r2, #16
 8008bd2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f002 fcd9 	bl	800b592 <SDMMC_CmdWriteSingleBlock>
 8008be0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008be2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d012      	beq.n	8008c0e <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a86      	ldr	r2, [pc, #536]	; (8008e08 <HAL_SD_WriteBlocks+0x314>)
 8008bee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bf6:	431a      	orrs	r2, r3
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2200      	movs	r2, #0
 8008c08:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e0f7      	b.n	8008dfe <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8008c0e:	69fb      	ldr	r3, [r7, #28]
 8008c10:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008c12:	e05c      	b.n	8008cce <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d037      	beq.n	8008c92 <HAL_SD_WriteBlocks+0x19e>
 8008c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c24:	2b1f      	cmp	r3, #31
 8008c26:	d934      	bls.n	8008c92 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8008c28:	2300      	movs	r3, #0
 8008c2a:	643b      	str	r3, [r7, #64]	; 0x40
 8008c2c:	e02b      	b.n	8008c86 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8008c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c36:	3301      	adds	r3, #1
 8008c38:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8008c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	021a      	lsls	r2, r3, #8
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	4313      	orrs	r3, r2
 8008c44:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c48:	3301      	adds	r3, #1
 8008c4a:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	041a      	lsls	r2, r3, #16
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	4313      	orrs	r3, r2
 8008c56:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	061a      	lsls	r2, r3, #24
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	4313      	orrs	r3, r2
 8008c68:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f107 0214 	add.w	r2, r7, #20
 8008c78:	4611      	mov	r1, r2
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f002 fb79 	bl	800b372 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8008c80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c82:	3301      	adds	r3, #1
 8008c84:	643b      	str	r3, [r7, #64]	; 0x40
 8008c86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c88:	2b07      	cmp	r3, #7
 8008c8a:	d9d0      	bls.n	8008c2e <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c8e:	3b20      	subs	r3, #32
 8008c90:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008c92:	f7f8 fc7d 	bl	8001590 <HAL_GetTick>
 8008c96:	4602      	mov	r2, r0
 8008c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9a:	1ad3      	subs	r3, r2, r3
 8008c9c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d902      	bls.n	8008ca8 <HAL_SD_WriteBlocks+0x1b4>
 8008ca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d112      	bne.n	8008cce <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a56      	ldr	r2, [pc, #344]	; (8008e08 <HAL_SD_WriteBlocks+0x314>)
 8008cae:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cb6:	431a      	orrs	r2, r3
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008cca:	2303      	movs	r3, #3
 8008ccc:	e097      	b.n	8008dfe <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cd4:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d09b      	beq.n	8008c14 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	68da      	ldr	r2, [r3, #12]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008cea:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d022      	beq.n	8008d40 <HAL_SD_WriteBlocks+0x24c>
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d91f      	bls.n	8008d40 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d04:	2b03      	cmp	r3, #3
 8008d06:	d01b      	beq.n	8008d40 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f002 fc87 	bl	800b620 <SDMMC_CmdStopTransfer>
 8008d12:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008d14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d012      	beq.n	8008d40 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4a3a      	ldr	r2, [pc, #232]	; (8008e08 <HAL_SD_WriteBlocks+0x314>)
 8008d20:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d28:	431a      	orrs	r2, r3
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2201      	movs	r2, #1
 8008d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e05e      	b.n	8008dfe <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d46:	f003 0308 	and.w	r3, r3, #8
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d012      	beq.n	8008d74 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a2d      	ldr	r2, [pc, #180]	; (8008e08 <HAL_SD_WriteBlocks+0x314>)
 8008d54:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d5a:	f043 0208 	orr.w	r2, r3, #8
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2201      	movs	r2, #1
 8008d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008d70:	2301      	movs	r3, #1
 8008d72:	e044      	b.n	8008dfe <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d7a:	f003 0302 	and.w	r3, r3, #2
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d012      	beq.n	8008da8 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a20      	ldr	r2, [pc, #128]	; (8008e08 <HAL_SD_WriteBlocks+0x314>)
 8008d88:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d8e:	f043 0202 	orr.w	r2, r3, #2
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2201      	movs	r2, #1
 8008d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2200      	movs	r2, #0
 8008da2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008da4:	2301      	movs	r3, #1
 8008da6:	e02a      	b.n	8008dfe <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dae:	f003 0310 	and.w	r3, r3, #16
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d012      	beq.n	8008ddc <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a13      	ldr	r2, [pc, #76]	; (8008e08 <HAL_SD_WriteBlocks+0x314>)
 8008dbc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc2:	f043 0210 	orr.w	r2, r3, #16
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2201      	movs	r2, #1
 8008dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	e010      	b.n	8008dfe <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a0a      	ldr	r2, [pc, #40]	; (8008e0c <HAL_SD_WriteBlocks+0x318>)
 8008de2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2201      	movs	r2, #1
 8008de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008dec:	2300      	movs	r3, #0
 8008dee:	e006      	b.n	8008dfe <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008dfc:	2301      	movs	r3, #1
  }
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3748      	adds	r7, #72	; 0x48
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	bf00      	nop
 8008e08:	1fe00fff 	.word	0x1fe00fff
 8008e0c:	18000f3a 	.word	0x18000f3a

08008e10 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b083      	sub	sp, #12
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	4603      	mov	r3, r0
 8008e18:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 8008e1a:	bf00      	nop
 8008e1c:	370c      	adds	r7, #12
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr
	...

08008e28 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b083      	sub	sp, #12
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e36:	0f9b      	lsrs	r3, r3, #30
 8008e38:	b2da      	uxtb	r2, r3
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e42:	0e9b      	lsrs	r3, r3, #26
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	f003 030f 	and.w	r3, r3, #15
 8008e4a:	b2da      	uxtb	r2, r3
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e54:	0e1b      	lsrs	r3, r3, #24
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	f003 0303 	and.w	r3, r3, #3
 8008e5c:	b2da      	uxtb	r2, r3
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e66:	0c1b      	lsrs	r3, r3, #16
 8008e68:	b2da      	uxtb	r2, r3
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e72:	0a1b      	lsrs	r3, r3, #8
 8008e74:	b2da      	uxtb	r2, r3
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e7e:	b2da      	uxtb	r2, r3
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e88:	0d1b      	lsrs	r3, r3, #20
 8008e8a:	b29a      	uxth	r2, r3
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e94:	0c1b      	lsrs	r3, r3, #16
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	f003 030f 	and.w	r3, r3, #15
 8008e9c:	b2da      	uxtb	r2, r3
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ea6:	0bdb      	lsrs	r3, r3, #15
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	f003 0301 	and.w	r3, r3, #1
 8008eae:	b2da      	uxtb	r2, r3
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008eb8:	0b9b      	lsrs	r3, r3, #14
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	f003 0301 	and.w	r3, r3, #1
 8008ec0:	b2da      	uxtb	r2, r3
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008eca:	0b5b      	lsrs	r3, r3, #13
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	f003 0301 	and.w	r3, r3, #1
 8008ed2:	b2da      	uxtb	r2, r3
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008edc:	0b1b      	lsrs	r3, r3, #12
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	f003 0301 	and.w	r3, r3, #1
 8008ee4:	b2da      	uxtb	r2, r3
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	2200      	movs	r2, #0
 8008eee:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d163      	bne.n	8008fc0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008efc:	009a      	lsls	r2, r3, #2
 8008efe:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008f02:	4013      	ands	r3, r2
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008f08:	0f92      	lsrs	r2, r2, #30
 8008f0a:	431a      	orrs	r2, r3
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f14:	0edb      	lsrs	r3, r3, #27
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	f003 0307 	and.w	r3, r3, #7
 8008f1c:	b2da      	uxtb	r2, r3
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f26:	0e1b      	lsrs	r3, r3, #24
 8008f28:	b2db      	uxtb	r3, r3
 8008f2a:	f003 0307 	and.w	r3, r3, #7
 8008f2e:	b2da      	uxtb	r2, r3
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f38:	0d5b      	lsrs	r3, r3, #21
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	f003 0307 	and.w	r3, r3, #7
 8008f40:	b2da      	uxtb	r2, r3
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f4a:	0c9b      	lsrs	r3, r3, #18
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	f003 0307 	and.w	r3, r3, #7
 8008f52:	b2da      	uxtb	r2, r3
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f5c:	0bdb      	lsrs	r3, r3, #15
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	f003 0307 	and.w	r3, r3, #7
 8008f64:	b2da      	uxtb	r2, r3
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	691b      	ldr	r3, [r3, #16]
 8008f6e:	1c5a      	adds	r2, r3, #1
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	7e1b      	ldrb	r3, [r3, #24]
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	f003 0307 	and.w	r3, r3, #7
 8008f7e:	3302      	adds	r3, #2
 8008f80:	2201      	movs	r2, #1
 8008f82:	fa02 f303 	lsl.w	r3, r2, r3
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008f8a:	fb02 f203 	mul.w	r2, r2, r3
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	7a1b      	ldrb	r3, [r3, #8]
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	f003 030f 	and.w	r3, r3, #15
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	409a      	lsls	r2, r3
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008fac:	0a52      	lsrs	r2, r2, #9
 8008fae:	fb02 f203 	mul.w	r2, r2, r3
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008fbc:	659a      	str	r2, [r3, #88]	; 0x58
 8008fbe:	e031      	b.n	8009024 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d11d      	bne.n	8009004 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fcc:	041b      	lsls	r3, r3, #16
 8008fce:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fd6:	0c1b      	lsrs	r3, r3, #16
 8008fd8:	431a      	orrs	r2, r3
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	691b      	ldr	r3, [r3, #16]
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	029a      	lsls	r2, r3, #10
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ff8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	659a      	str	r2, [r3, #88]	; 0x58
 8009002:	e00f      	b.n	8009024 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a58      	ldr	r2, [pc, #352]	; (800916c <HAL_SD_GetCardCSD+0x344>)
 800900a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009010:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2201      	movs	r2, #1
 800901c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009020:	2301      	movs	r3, #1
 8009022:	e09d      	b.n	8009160 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009028:	0b9b      	lsrs	r3, r3, #14
 800902a:	b2db      	uxtb	r3, r3
 800902c:	f003 0301 	and.w	r3, r3, #1
 8009030:	b2da      	uxtb	r2, r3
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800903a:	09db      	lsrs	r3, r3, #7
 800903c:	b2db      	uxtb	r3, r3
 800903e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009042:	b2da      	uxtb	r2, r3
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800904c:	b2db      	uxtb	r3, r3
 800904e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009052:	b2da      	uxtb	r2, r3
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800905c:	0fdb      	lsrs	r3, r3, #31
 800905e:	b2da      	uxtb	r2, r3
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009068:	0f5b      	lsrs	r3, r3, #29
 800906a:	b2db      	uxtb	r3, r3
 800906c:	f003 0303 	and.w	r3, r3, #3
 8009070:	b2da      	uxtb	r2, r3
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800907a:	0e9b      	lsrs	r3, r3, #26
 800907c:	b2db      	uxtb	r3, r3
 800907e:	f003 0307 	and.w	r3, r3, #7
 8009082:	b2da      	uxtb	r2, r3
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800908c:	0d9b      	lsrs	r3, r3, #22
 800908e:	b2db      	uxtb	r3, r3
 8009090:	f003 030f 	and.w	r3, r3, #15
 8009094:	b2da      	uxtb	r2, r3
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800909e:	0d5b      	lsrs	r3, r3, #21
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	f003 0301 	and.w	r3, r3, #1
 80090a6:	b2da      	uxtb	r2, r3
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	2200      	movs	r2, #0
 80090b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090ba:	0c1b      	lsrs	r3, r3, #16
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	f003 0301 	and.w	r3, r3, #1
 80090c2:	b2da      	uxtb	r2, r3
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090ce:	0bdb      	lsrs	r3, r3, #15
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	f003 0301 	and.w	r3, r3, #1
 80090d6:	b2da      	uxtb	r2, r3
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090e2:	0b9b      	lsrs	r3, r3, #14
 80090e4:	b2db      	uxtb	r3, r3
 80090e6:	f003 0301 	and.w	r3, r3, #1
 80090ea:	b2da      	uxtb	r2, r3
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090f6:	0b5b      	lsrs	r3, r3, #13
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	f003 0301 	and.w	r3, r3, #1
 80090fe:	b2da      	uxtb	r2, r3
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800910a:	0b1b      	lsrs	r3, r3, #12
 800910c:	b2db      	uxtb	r3, r3
 800910e:	f003 0301 	and.w	r3, r3, #1
 8009112:	b2da      	uxtb	r2, r3
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800911e:	0a9b      	lsrs	r3, r3, #10
 8009120:	b2db      	uxtb	r3, r3
 8009122:	f003 0303 	and.w	r3, r3, #3
 8009126:	b2da      	uxtb	r2, r3
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009132:	0a1b      	lsrs	r3, r3, #8
 8009134:	b2db      	uxtb	r3, r3
 8009136:	f003 0303 	and.w	r3, r3, #3
 800913a:	b2da      	uxtb	r2, r3
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009146:	085b      	lsrs	r3, r3, #1
 8009148:	b2db      	uxtb	r3, r3
 800914a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800914e:	b2da      	uxtb	r2, r3
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	2201      	movs	r2, #1
 800915a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800915e:	2300      	movs	r3, #0
}
 8009160:	4618      	mov	r0, r3
 8009162:	370c      	adds	r7, #12
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr
 800916c:	1fe00fff 	.word	0x1fe00fff

08009170 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b094      	sub	sp, #80	; 0x50
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800917a:	2300      	movs	r3, #0
 800917c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8009180:	f107 0308 	add.w	r3, r7, #8
 8009184:	4619      	mov	r1, r3
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 fb64 	bl	8009854 <SD_SendSDStatus>
 800918c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800918e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009190:	2b00      	cmp	r3, #0
 8009192:	d011      	beq.n	80091b8 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a4f      	ldr	r2, [pc, #316]	; (80092d8 <HAL_SD_GetCardStatus+0x168>)
 800919a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091a2:	431a      	orrs	r2, r3
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2201      	movs	r2, #1
 80091ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80091b0:	2301      	movs	r3, #1
 80091b2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80091b6:	e070      	b.n	800929a <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	099b      	lsrs	r3, r3, #6
 80091bc:	b2db      	uxtb	r3, r3
 80091be:	f003 0303 	and.w	r3, r3, #3
 80091c2:	b2da      	uxtb	r2, r3
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	095b      	lsrs	r3, r3, #5
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	f003 0301 	and.w	r3, r3, #1
 80091d2:	b2da      	uxtb	r2, r3
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	0a1b      	lsrs	r3, r3, #8
 80091dc:	b29b      	uxth	r3, r3
 80091de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80091e2:	b29a      	uxth	r2, r3
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	0e1b      	lsrs	r3, r3, #24
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	4313      	orrs	r3, r2
 80091ec:	b29a      	uxth	r2, r3
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	061a      	lsls	r2, r3, #24
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	021b      	lsls	r3, r3, #8
 80091fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80091fe:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	0a1b      	lsrs	r3, r3, #8
 8009204:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009208:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	0e1b      	lsrs	r3, r3, #24
 800920e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	b2da      	uxtb	r2, r3
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	0a1b      	lsrs	r3, r3, #8
 8009220:	b2da      	uxtb	r2, r3
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	0d1b      	lsrs	r3, r3, #20
 800922a:	b2db      	uxtb	r3, r3
 800922c:	f003 030f 	and.w	r3, r3, #15
 8009230:	b2da      	uxtb	r2, r3
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	0c1b      	lsrs	r3, r3, #16
 800923a:	b29b      	uxth	r3, r3
 800923c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009240:	b29a      	uxth	r2, r3
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	b29b      	uxth	r3, r3
 8009246:	b2db      	uxtb	r3, r3
 8009248:	b29b      	uxth	r3, r3
 800924a:	4313      	orrs	r3, r2
 800924c:	b29a      	uxth	r2, r3
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	0a9b      	lsrs	r3, r3, #10
 8009256:	b2db      	uxtb	r3, r3
 8009258:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800925c:	b2da      	uxtb	r2, r3
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	0a1b      	lsrs	r3, r3, #8
 8009266:	b2db      	uxtb	r3, r3
 8009268:	f003 0303 	and.w	r3, r3, #3
 800926c:	b2da      	uxtb	r2, r3
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	091b      	lsrs	r3, r3, #4
 8009276:	b2db      	uxtb	r3, r3
 8009278:	f003 030f 	and.w	r3, r3, #15
 800927c:	b2da      	uxtb	r2, r3
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	b2db      	uxtb	r3, r3
 8009286:	f003 030f 	and.w	r3, r3, #15
 800928a:	b2da      	uxtb	r2, r3
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8009290:	69bb      	ldr	r3, [r7, #24]
 8009292:	0e1b      	lsrs	r3, r3, #24
 8009294:	b2da      	uxtb	r2, r3
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80092a2:	4618      	mov	r0, r3
 80092a4:	f002 f90c 	bl	800b4c0 <SDMMC_CmdBlockLength>
 80092a8:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80092aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d00d      	beq.n	80092cc <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a08      	ldr	r2, [pc, #32]	; (80092d8 <HAL_SD_GetCardStatus+0x168>)
 80092b6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092bc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2201      	movs	r2, #1
 80092c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80092c6:	2301      	movs	r3, #1
 80092c8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 80092cc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3750      	adds	r7, #80	; 0x50
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}
 80092d8:	1fe00fff 	.word	0x1fe00fff

080092dc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80092dc:	b480      	push	{r7}
 80092de:	b083      	sub	sp, #12
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009326:	2300      	movs	r3, #0
}
 8009328:	4618      	mov	r0, r3
 800932a:	370c      	adds	r7, #12
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr

08009334 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009334:	b5b0      	push	{r4, r5, r7, lr}
 8009336:	b08e      	sub	sp, #56	; 0x38
 8009338:	af04      	add	r7, sp, #16
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800933e:	2300      	movs	r3, #0
 8009340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2203      	movs	r2, #3
 8009348:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009350:	2b03      	cmp	r3, #3
 8009352:	d02e      	beq.n	80093b2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800935a:	d106      	bne.n	800936a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009360:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	639a      	str	r2, [r3, #56]	; 0x38
 8009368:	e029      	b.n	80093be <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009370:	d10a      	bne.n	8009388 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 fb66 	bl	8009a44 <SD_WideBus_Enable>
 8009378:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800937e:	6a3b      	ldr	r3, [r7, #32]
 8009380:	431a      	orrs	r2, r3
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	639a      	str	r2, [r3, #56]	; 0x38
 8009386:	e01a      	b.n	80093be <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d10a      	bne.n	80093a4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 fba3 	bl	8009ada <SD_WideBus_Disable>
 8009394:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800939a:	6a3b      	ldr	r3, [r7, #32]
 800939c:	431a      	orrs	r2, r3
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	639a      	str	r2, [r3, #56]	; 0x38
 80093a2:	e00c      	b.n	80093be <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	639a      	str	r2, [r3, #56]	; 0x38
 80093b0:	e005      	b.n	80093be <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093b6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d007      	beq.n	80093d6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a2e      	ldr	r2, [pc, #184]	; (8009484 <HAL_SD_ConfigWideBusOperation+0x150>)
 80093cc:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80093ce:	2301      	movs	r3, #1
 80093d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80093d4:	e034      	b.n	8009440 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	689b      	ldr	r3, [r3, #8]
 80093e0:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	691b      	ldr	r3, [r3, #16]
 80093ea:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	695b      	ldr	r3, [r3, #20]
 80093f0:	2b03      	cmp	r3, #3
 80093f2:	d903      	bls.n	80093fc <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	695b      	ldr	r3, [r3, #20]
 80093f8:	61bb      	str	r3, [r7, #24]
 80093fa:	e012      	b.n	8009422 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009400:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009404:	d103      	bne.n	800940e <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	695b      	ldr	r3, [r3, #20]
 800940a:	61bb      	str	r3, [r7, #24]
 800940c:	e009      	b.n	8009422 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009412:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009416:	d102      	bne.n	800941e <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 8009418:	2302      	movs	r3, #2
 800941a:	61bb      	str	r3, [r7, #24]
 800941c:	e001      	b.n	8009422 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800941e:	2304      	movs	r3, #4
 8009420:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681d      	ldr	r5, [r3, #0]
 8009426:	466c      	mov	r4, sp
 8009428:	f107 0314 	add.w	r3, r7, #20
 800942c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009430:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009434:	f107 0308 	add.w	r3, r7, #8
 8009438:	cb0e      	ldmia	r3, {r1, r2, r3}
 800943a:	4628      	mov	r0, r5
 800943c:	f001 ff62 	bl	800b304 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009448:	4618      	mov	r0, r3
 800944a:	f002 f839 	bl	800b4c0 <SDMMC_CmdBlockLength>
 800944e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009450:	6a3b      	ldr	r3, [r7, #32]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d00c      	beq.n	8009470 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a0a      	ldr	r2, [pc, #40]	; (8009484 <HAL_SD_ConfigWideBusOperation+0x150>)
 800945c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009462:	6a3b      	ldr	r3, [r7, #32]
 8009464:	431a      	orrs	r2, r3
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800946a:	2301      	movs	r3, #1
 800946c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2201      	movs	r2, #1
 8009474:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8009478:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800947c:	4618      	mov	r0, r3
 800947e:	3728      	adds	r7, #40	; 0x28
 8009480:	46bd      	mov	sp, r7
 8009482:	bdb0      	pop	{r4, r5, r7, pc}
 8009484:	1fe00fff 	.word	0x1fe00fff

08009488 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b086      	sub	sp, #24
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009490:	2300      	movs	r3, #0
 8009492:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009494:	f107 030c 	add.w	r3, r7, #12
 8009498:	4619      	mov	r1, r3
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 faaa 	bl	80099f4 <SD_SendStatus>
 80094a0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d005      	beq.n	80094b4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	431a      	orrs	r2, r3
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	0a5b      	lsrs	r3, r3, #9
 80094b8:	f003 030f 	and.w	r3, r3, #15
 80094bc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80094be:	693b      	ldr	r3, [r7, #16]
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3718      	adds	r7, #24
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80094c8:	b590      	push	{r4, r7, lr}
 80094ca:	b091      	sub	sp, #68	; 0x44
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80094d0:	2301      	movs	r3, #1
 80094d2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4618      	mov	r0, r3
 80094da:	f001 ff6c 	bl	800b3b6 <SDMMC_GetPowerState>
 80094de:	4603      	mov	r3, r0
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d102      	bne.n	80094ea <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80094e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80094e8:	e0a8      	b.n	800963c <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094ee:	2b03      	cmp	r3, #3
 80094f0:	d02e      	beq.n	8009550 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4618      	mov	r0, r3
 80094f8:	f002 f9b8 	bl	800b86c <SDMMC_CmdSendCID>
 80094fc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80094fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009500:	2b00      	cmp	r3, #0
 8009502:	d001      	beq.n	8009508 <SD_InitCard+0x40>
    {
      return errorstate;
 8009504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009506:	e099      	b.n	800963c <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	2100      	movs	r1, #0
 800950e:	4618      	mov	r0, r3
 8009510:	f001 ff97 	bl	800b442 <SDMMC_GetResponse>
 8009514:	4602      	mov	r2, r0
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	2104      	movs	r1, #4
 8009520:	4618      	mov	r0, r3
 8009522:	f001 ff8e 	bl	800b442 <SDMMC_GetResponse>
 8009526:	4602      	mov	r2, r0
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	2108      	movs	r1, #8
 8009532:	4618      	mov	r0, r3
 8009534:	f001 ff85 	bl	800b442 <SDMMC_GetResponse>
 8009538:	4602      	mov	r2, r0
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	210c      	movs	r1, #12
 8009544:	4618      	mov	r0, r3
 8009546:	f001 ff7c 	bl	800b442 <SDMMC_GetResponse>
 800954a:	4602      	mov	r2, r0
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009554:	2b03      	cmp	r3, #3
 8009556:	d00d      	beq.n	8009574 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f107 020e 	add.w	r2, r7, #14
 8009560:	4611      	mov	r1, r2
 8009562:	4618      	mov	r0, r3
 8009564:	f002 f9c1 	bl	800b8ea <SDMMC_CmdSetRelAdd>
 8009568:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800956a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800956c:	2b00      	cmp	r3, #0
 800956e:	d001      	beq.n	8009574 <SD_InitCard+0xac>
    {
      return errorstate;
 8009570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009572:	e063      	b.n	800963c <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009578:	2b03      	cmp	r3, #3
 800957a:	d036      	beq.n	80095ea <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800957c:	89fb      	ldrh	r3, [r7, #14]
 800957e:	461a      	mov	r2, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681a      	ldr	r2, [r3, #0]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800958c:	041b      	lsls	r3, r3, #16
 800958e:	4619      	mov	r1, r3
 8009590:	4610      	mov	r0, r2
 8009592:	f002 f98a 	bl	800b8aa <SDMMC_CmdSendCSD>
 8009596:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800959a:	2b00      	cmp	r3, #0
 800959c:	d001      	beq.n	80095a2 <SD_InitCard+0xda>
    {
      return errorstate;
 800959e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095a0:	e04c      	b.n	800963c <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	2100      	movs	r1, #0
 80095a8:	4618      	mov	r0, r3
 80095aa:	f001 ff4a 	bl	800b442 <SDMMC_GetResponse>
 80095ae:	4602      	mov	r2, r0
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	2104      	movs	r1, #4
 80095ba:	4618      	mov	r0, r3
 80095bc:	f001 ff41 	bl	800b442 <SDMMC_GetResponse>
 80095c0:	4602      	mov	r2, r0
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2108      	movs	r1, #8
 80095cc:	4618      	mov	r0, r3
 80095ce:	f001 ff38 	bl	800b442 <SDMMC_GetResponse>
 80095d2:	4602      	mov	r2, r0
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	210c      	movs	r1, #12
 80095de:	4618      	mov	r0, r3
 80095e0:	f001 ff2f 	bl	800b442 <SDMMC_GetResponse>
 80095e4:	4602      	mov	r2, r0
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	2104      	movs	r1, #4
 80095f0:	4618      	mov	r0, r3
 80095f2:	f001 ff26 	bl	800b442 <SDMMC_GetResponse>
 80095f6:	4603      	mov	r3, r0
 80095f8:	0d1a      	lsrs	r2, r3, #20
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80095fe:	f107 0310 	add.w	r3, r7, #16
 8009602:	4619      	mov	r1, r3
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f7ff fc0f 	bl	8008e28 <HAL_SD_GetCardCSD>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d002      	beq.n	8009616 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009610:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009614:	e012      	b.n	800963c <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6819      	ldr	r1, [r3, #0]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800961e:	041b      	lsls	r3, r3, #16
 8009620:	f04f 0400 	mov.w	r4, #0
 8009624:	461a      	mov	r2, r3
 8009626:	4623      	mov	r3, r4
 8009628:	4608      	mov	r0, r1
 800962a:	f002 f835 	bl	800b698 <SDMMC_CmdSelDesel>
 800962e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009632:	2b00      	cmp	r3, #0
 8009634:	d001      	beq.n	800963a <SD_InitCard+0x172>
  {
    return errorstate;
 8009636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009638:	e000      	b.n	800963c <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800963a:	2300      	movs	r3, #0
}
 800963c:	4618      	mov	r0, r3
 800963e:	3744      	adds	r7, #68	; 0x44
 8009640:	46bd      	mov	sp, r7
 8009642:	bd90      	pop	{r4, r7, pc}

08009644 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b088      	sub	sp, #32
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800964c:	2300      	movs	r3, #0
 800964e:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8009650:	2300      	movs	r3, #0
 8009652:	61fb      	str	r3, [r7, #28]
 8009654:	2300      	movs	r3, #0
 8009656:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 8009658:	f7f7 ff9a 	bl	8001590 <HAL_GetTick>
 800965c:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4618      	mov	r0, r3
 8009664:	f002 f83c 	bl	800b6e0 <SDMMC_CmdGoIdleState>
 8009668:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d001      	beq.n	8009674 <SD_PowerON+0x30>
  {
    return errorstate;
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	e0e9      	b.n	8009848 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4618      	mov	r0, r3
 800967a:	f002 f84f 	bl	800b71c <SDMMC_CmdOperCond>
 800967e:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d00d      	beq.n	80096a2 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2200      	movs	r2, #0
 800968a:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4618      	mov	r0, r3
 8009692:	f002 f825 	bl	800b6e0 <SDMMC_CmdGoIdleState>
 8009696:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d004      	beq.n	80096a8 <SD_PowerON+0x64>
    {
      return errorstate;
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	e0d2      	b.n	8009848 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2201      	movs	r2, #1
 80096a6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d137      	bne.n	8009720 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	2100      	movs	r1, #0
 80096b6:	4618      	mov	r0, r3
 80096b8:	f002 f850 	bl	800b75c <SDMMC_CmdAppCommand>
 80096bc:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d02d      	beq.n	8009720 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80096c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80096c8:	e0be      	b.n	8009848 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	2100      	movs	r1, #0
 80096d0:	4618      	mov	r0, r3
 80096d2:	f002 f843 	bl	800b75c <SDMMC_CmdAppCommand>
 80096d6:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d001      	beq.n	80096e2 <SD_PowerON+0x9e>
    {
      return errorstate;
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	e0b2      	b.n	8009848 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	495a      	ldr	r1, [pc, #360]	; (8009850 <SD_PowerON+0x20c>)
 80096e8:	4618      	mov	r0, r3
 80096ea:	f002 f85a 	bl	800b7a2 <SDMMC_CmdAppOperCommand>
 80096ee:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d002      	beq.n	80096fc <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80096f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80096fa:	e0a5      	b.n	8009848 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	2100      	movs	r1, #0
 8009702:	4618      	mov	r0, r3
 8009704:	f001 fe9d 	bl	800b442 <SDMMC_GetResponse>
 8009708:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800970a:	69fb      	ldr	r3, [r7, #28]
 800970c:	0fdb      	lsrs	r3, r3, #31
 800970e:	2b01      	cmp	r3, #1
 8009710:	d101      	bne.n	8009716 <SD_PowerON+0xd2>
 8009712:	2301      	movs	r3, #1
 8009714:	e000      	b.n	8009718 <SD_PowerON+0xd4>
 8009716:	2300      	movs	r3, #0
 8009718:	61bb      	str	r3, [r7, #24]

    count++;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	3301      	adds	r3, #1
 800971e:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009726:	4293      	cmp	r3, r2
 8009728:	d802      	bhi.n	8009730 <SD_PowerON+0xec>
 800972a:	69bb      	ldr	r3, [r7, #24]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d0cc      	beq.n	80096ca <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009736:	4293      	cmp	r3, r2
 8009738:	d902      	bls.n	8009740 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800973a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800973e:	e083      	b.n	8009848 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009740:	69fb      	ldr	r3, [r7, #28]
 8009742:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009746:	2b00      	cmp	r3, #0
 8009748:	d07d      	beq.n	8009846 <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2201      	movs	r2, #1
 800974e:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	699b      	ldr	r3, [r3, #24]
 8009754:	2b02      	cmp	r3, #2
 8009756:	d176      	bne.n	8009846 <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8009758:	69fb      	ldr	r3, [r7, #28]
 800975a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800975e:	2b00      	cmp	r3, #0
 8009760:	d071      	beq.n	8009846 <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009768:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f042 0208 	orr.w	r2, r2, #8
 8009778:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4618      	mov	r0, r3
 8009780:	f002 f91a 	bl	800b9b8 <SDMMC_CmdVoltageSwitch>
 8009784:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d00c      	beq.n	80097a6 <SD_PowerON+0x162>
        {
          return errorstate;
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	e05b      	b.n	8009848 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009790:	f7f7 fefe 	bl	8001590 <HAL_GetTick>
 8009794:	4602      	mov	r2, r0
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	1ad3      	subs	r3, r2, r3
 800979a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800979e:	d102      	bne.n	80097a6 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 80097a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80097a4:	e050      	b.n	8009848 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80097b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80097b4:	d1ec      	bne.n	8009790 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80097be:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80097ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80097ce:	d002      	beq.n	80097d6 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 80097d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80097d4:	e038      	b.n	8009848 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 80097d6:	2001      	movs	r0, #1
 80097d8:	f7ff fb1a 	bl	8008e10 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	681a      	ldr	r2, [r3, #0]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f042 0204 	orr.w	r2, r2, #4
 80097ea:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 80097ec:	e00a      	b.n	8009804 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80097ee:	f7f7 fecf 	bl	8001590 <HAL_GetTick>
 80097f2:	4602      	mov	r2, r0
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	1ad3      	subs	r3, r2, r3
 80097f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097fc:	d102      	bne.n	8009804 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 80097fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009802:	e021      	b.n	8009848 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800980a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800980e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009812:	d1ec      	bne.n	80097ee <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800981c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009824:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009828:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800982c:	d102      	bne.n	8009834 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800982e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009832:	e009      	b.n	8009848 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	2213      	movs	r2, #19
 800983a:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f04f 32ff 	mov.w	r2, #4294967295
 8009844:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8009846:	2300      	movs	r3, #0
}
 8009848:	4618      	mov	r0, r3
 800984a:	3720      	adds	r7, #32
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}
 8009850:	c1100000 	.word	0xc1100000

08009854 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b08c      	sub	sp, #48	; 0x30
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800985e:	f7f7 fe97 	bl	8001590 <HAL_GetTick>
 8009862:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2100      	movs	r1, #0
 800986e:	4618      	mov	r0, r3
 8009870:	f001 fde7 	bl	800b442 <SDMMC_GetResponse>
 8009874:	4603      	mov	r3, r0
 8009876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800987a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800987e:	d102      	bne.n	8009886 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009880:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009884:	e0b0      	b.n	80099e8 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	2140      	movs	r1, #64	; 0x40
 800988c:	4618      	mov	r0, r3
 800988e:	f001 fe17 	bl	800b4c0 <SDMMC_CmdBlockLength>
 8009892:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009894:	6a3b      	ldr	r3, [r7, #32]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d005      	beq.n	80098a6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80098a2:	6a3b      	ldr	r3, [r7, #32]
 80098a4:	e0a0      	b.n	80099e8 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098ae:	041b      	lsls	r3, r3, #16
 80098b0:	4619      	mov	r1, r3
 80098b2:	4610      	mov	r0, r2
 80098b4:	f001 ff52 	bl	800b75c <SDMMC_CmdAppCommand>
 80098b8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80098ba:	6a3b      	ldr	r3, [r7, #32]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d005      	beq.n	80098cc <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80098c8:	6a3b      	ldr	r3, [r7, #32]
 80098ca:	e08d      	b.n	80099e8 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80098cc:	f04f 33ff 	mov.w	r3, #4294967295
 80098d0:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80098d2:	2340      	movs	r3, #64	; 0x40
 80098d4:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80098d6:	2360      	movs	r3, #96	; 0x60
 80098d8:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80098da:	2302      	movs	r3, #2
 80098dc:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80098de:	2300      	movs	r3, #0
 80098e0:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80098e2:	2301      	movs	r3, #1
 80098e4:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f107 0208 	add.w	r2, r7, #8
 80098ee:	4611      	mov	r1, r2
 80098f0:	4618      	mov	r0, r3
 80098f2:	f001 fdb9 	bl	800b468 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4618      	mov	r0, r3
 80098fc:	f002 f83a 	bl	800b974 <SDMMC_CmdStatusRegister>
 8009900:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009902:	6a3b      	ldr	r3, [r7, #32]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d02b      	beq.n	8009960 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009910:	6a3b      	ldr	r3, [r7, #32]
 8009912:	e069      	b.n	80099e8 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800991a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800991e:	2b00      	cmp	r3, #0
 8009920:	d013      	beq.n	800994a <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8009922:	2300      	movs	r3, #0
 8009924:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009926:	e00d      	b.n	8009944 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	4618      	mov	r0, r3
 800992e:	f001 fd13 	bl	800b358 <SDMMC_ReadFIFO>
 8009932:	4602      	mov	r2, r0
 8009934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009936:	601a      	str	r2, [r3, #0]
        pData++;
 8009938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993a:	3304      	adds	r3, #4
 800993c:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800993e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009940:	3301      	adds	r3, #1
 8009942:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009946:	2b07      	cmp	r3, #7
 8009948:	d9ee      	bls.n	8009928 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800994a:	f7f7 fe21 	bl	8001590 <HAL_GetTick>
 800994e:	4602      	mov	r2, r0
 8009950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009952:	1ad3      	subs	r3, r2, r3
 8009954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009958:	d102      	bne.n	8009960 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800995a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800995e:	e043      	b.n	80099e8 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009966:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800996a:	2b00      	cmp	r3, #0
 800996c:	d0d2      	beq.n	8009914 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009974:	f003 0308 	and.w	r3, r3, #8
 8009978:	2b00      	cmp	r3, #0
 800997a:	d001      	beq.n	8009980 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800997c:	2308      	movs	r3, #8
 800997e:	e033      	b.n	80099e8 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009986:	f003 0302 	and.w	r3, r3, #2
 800998a:	2b00      	cmp	r3, #0
 800998c:	d001      	beq.n	8009992 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800998e:	2302      	movs	r3, #2
 8009990:	e02a      	b.n	80099e8 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009998:	f003 0320 	and.w	r3, r3, #32
 800999c:	2b00      	cmp	r3, #0
 800999e:	d017      	beq.n	80099d0 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80099a0:	2320      	movs	r3, #32
 80099a2:	e021      	b.n	80099e8 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4618      	mov	r0, r3
 80099aa:	f001 fcd5 	bl	800b358 <SDMMC_ReadFIFO>
 80099ae:	4602      	mov	r2, r0
 80099b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b2:	601a      	str	r2, [r3, #0]
    pData++;
 80099b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b6:	3304      	adds	r3, #4
 80099b8:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80099ba:	f7f7 fde9 	bl	8001590 <HAL_GetTick>
 80099be:	4602      	mov	r2, r0
 80099c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c2:	1ad3      	subs	r3, r2, r3
 80099c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099c8:	d102      	bne.n	80099d0 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80099ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80099ce:	e00b      	b.n	80099e8 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d1e2      	bne.n	80099a4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a03      	ldr	r2, [pc, #12]	; (80099f0 <SD_SendSDStatus+0x19c>)
 80099e4:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 80099e6:	2300      	movs	r3, #0
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3730      	adds	r7, #48	; 0x30
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}
 80099f0:	18000f3a 	.word	0x18000f3a

080099f4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d102      	bne.n	8009a0a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009a04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009a08:	e018      	b.n	8009a3c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681a      	ldr	r2, [r3, #0]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a12:	041b      	lsls	r3, r3, #16
 8009a14:	4619      	mov	r1, r3
 8009a16:	4610      	mov	r0, r2
 8009a18:	f001 ff89 	bl	800b92e <SDMMC_CmdSendStatus>
 8009a1c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d001      	beq.n	8009a28 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	e009      	b.n	8009a3c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	2100      	movs	r1, #0
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f001 fd07 	bl	800b442 <SDMMC_GetResponse>
 8009a34:	4602      	mov	r2, r0
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009a3a:	2300      	movs	r3, #0
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3710      	adds	r7, #16
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b086      	sub	sp, #24
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	60fb      	str	r3, [r7, #12]
 8009a50:	2300      	movs	r3, #0
 8009a52:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2100      	movs	r1, #0
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f001 fcf1 	bl	800b442 <SDMMC_GetResponse>
 8009a60:	4603      	mov	r3, r0
 8009a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a6a:	d102      	bne.n	8009a72 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009a6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009a70:	e02f      	b.n	8009ad2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009a72:	f107 030c 	add.w	r3, r7, #12
 8009a76:	4619      	mov	r1, r3
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f000 f879 	bl	8009b70 <SD_FindSCR>
 8009a7e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d001      	beq.n	8009a8a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	e023      	b.n	8009ad2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d01c      	beq.n	8009ace <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a9c:	041b      	lsls	r3, r3, #16
 8009a9e:	4619      	mov	r1, r3
 8009aa0:	4610      	mov	r0, r2
 8009aa2:	f001 fe5b 	bl	800b75c <SDMMC_CmdAppCommand>
 8009aa6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d001      	beq.n	8009ab2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	e00f      	b.n	8009ad2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	2102      	movs	r1, #2
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f001 fe92 	bl	800b7e2 <SDMMC_CmdBusWidth>
 8009abe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d001      	beq.n	8009aca <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	e003      	b.n	8009ad2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009aca:	2300      	movs	r3, #0
 8009acc:	e001      	b.n	8009ad2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009ace:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3718      	adds	r7, #24
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}

08009ada <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009ada:	b580      	push	{r7, lr}
 8009adc:	b086      	sub	sp, #24
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	60fb      	str	r3, [r7, #12]
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	2100      	movs	r1, #0
 8009af0:	4618      	mov	r0, r3
 8009af2:	f001 fca6 	bl	800b442 <SDMMC_GetResponse>
 8009af6:	4603      	mov	r3, r0
 8009af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009afc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b00:	d102      	bne.n	8009b08 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009b02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009b06:	e02f      	b.n	8009b68 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009b08:	f107 030c 	add.w	r3, r7, #12
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 f82e 	bl	8009b70 <SD_FindSCR>
 8009b14:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d001      	beq.n	8009b20 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	e023      	b.n	8009b68 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d01c      	beq.n	8009b64 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b32:	041b      	lsls	r3, r3, #16
 8009b34:	4619      	mov	r1, r3
 8009b36:	4610      	mov	r0, r2
 8009b38:	f001 fe10 	bl	800b75c <SDMMC_CmdAppCommand>
 8009b3c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d001      	beq.n	8009b48 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	e00f      	b.n	8009b68 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	2100      	movs	r1, #0
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f001 fe47 	bl	800b7e2 <SDMMC_CmdBusWidth>
 8009b54:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d001      	beq.n	8009b60 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	e003      	b.n	8009b68 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009b60:	2300      	movs	r3, #0
 8009b62:	e001      	b.n	8009b68 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009b64:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3718      	adds	r7, #24
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b08e      	sub	sp, #56	; 0x38
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009b7a:	f7f7 fd09 	bl	8001590 <HAL_GetTick>
 8009b7e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009b80:	2300      	movs	r3, #0
 8009b82:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009b84:	2300      	movs	r3, #0
 8009b86:	60bb      	str	r3, [r7, #8]
 8009b88:	2300      	movs	r3, #0
 8009b8a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	2108      	movs	r1, #8
 8009b96:	4618      	mov	r0, r3
 8009b98:	f001 fc92 	bl	800b4c0 <SDMMC_CmdBlockLength>
 8009b9c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d001      	beq.n	8009ba8 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba6:	e0ad      	b.n	8009d04 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681a      	ldr	r2, [r3, #0]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bb0:	041b      	lsls	r3, r3, #16
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	4610      	mov	r0, r2
 8009bb6:	f001 fdd1 	bl	800b75c <SDMMC_CmdAppCommand>
 8009bba:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d001      	beq.n	8009bc6 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bc4:	e09e      	b.n	8009d04 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8009bca:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009bcc:	2308      	movs	r3, #8
 8009bce:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009bd0:	2330      	movs	r3, #48	; 0x30
 8009bd2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009bd4:	2302      	movs	r3, #2
 8009bd6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f107 0210 	add.w	r2, r7, #16
 8009be8:	4611      	mov	r1, r2
 8009bea:	4618      	mov	r0, r3
 8009bec:	f001 fc3c 	bl	800b468 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f001 fe17 	bl	800b828 <SDMMC_CmdSendSCR>
 8009bfa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d027      	beq.n	8009c52 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8009c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c04:	e07e      	b.n	8009d04 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d113      	bne.n	8009c3c <SD_FindSCR+0xcc>
 8009c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d110      	bne.n	8009c3c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f001 fb9a 	bl	800b358 <SDMMC_ReadFIFO>
 8009c24:	4603      	mov	r3, r0
 8009c26:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f001 fb93 	bl	800b358 <SDMMC_ReadFIFO>
 8009c32:	4603      	mov	r3, r0
 8009c34:	60fb      	str	r3, [r7, #12]
      index++;
 8009c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c38:	3301      	adds	r3, #1
 8009c3a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009c3c:	f7f7 fca8 	bl	8001590 <HAL_GetTick>
 8009c40:	4602      	mov	r2, r0
 8009c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c44:	1ad3      	subs	r3, r2, r3
 8009c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c4a:	d102      	bne.n	8009c52 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009c4c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c50:	e058      	b.n	8009d04 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c58:	f240 532a 	movw	r3, #1322	; 0x52a
 8009c5c:	4013      	ands	r3, r2
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d0d1      	beq.n	8009c06 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c68:	f003 0308 	and.w	r3, r3, #8
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d005      	beq.n	8009c7c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	2208      	movs	r2, #8
 8009c76:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009c78:	2308      	movs	r3, #8
 8009c7a:	e043      	b.n	8009d04 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c82:	f003 0302 	and.w	r3, r3, #2
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d005      	beq.n	8009c96 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	2202      	movs	r2, #2
 8009c90:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009c92:	2302      	movs	r3, #2
 8009c94:	e036      	b.n	8009d04 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c9c:	f003 0320 	and.w	r3, r3, #32
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d005      	beq.n	8009cb0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	2220      	movs	r2, #32
 8009caa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009cac:	2320      	movs	r3, #32
 8009cae:	e029      	b.n	8009d04 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a15      	ldr	r2, [pc, #84]	; (8009d0c <SD_FindSCR+0x19c>)
 8009cb6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	061a      	lsls	r2, r3, #24
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	021b      	lsls	r3, r3, #8
 8009cc0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009cc4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	0a1b      	lsrs	r3, r3, #8
 8009cca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009cce:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	0e1b      	lsrs	r3, r3, #24
 8009cd4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd8:	601a      	str	r2, [r3, #0]
    scr++;
 8009cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cdc:	3304      	adds	r3, #4
 8009cde:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	061a      	lsls	r2, r3, #24
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	021b      	lsls	r3, r3, #8
 8009ce8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009cec:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	0a1b      	lsrs	r3, r3, #8
 8009cf2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009cf6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	0e1b      	lsrs	r3, r3, #24
 8009cfc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d00:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009d02:	2300      	movs	r3, #0
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3738      	adds	r7, #56	; 0x38
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}
 8009d0c:	18000f3a 	.word	0x18000f3a

08009d10 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d101      	bne.n	8009d26 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8009d22:	2301      	movs	r3, #1
 8009d24:	e0e2      	b.n	8009eec <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a70      	ldr	r2, [pc, #448]	; (8009ef4 <HAL_SPI_Init+0x1e4>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d00f      	beq.n	8009d56 <HAL_SPI_Init+0x46>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4a6f      	ldr	r2, [pc, #444]	; (8009ef8 <HAL_SPI_Init+0x1e8>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d00a      	beq.n	8009d56 <HAL_SPI_Init+0x46>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a6d      	ldr	r2, [pc, #436]	; (8009efc <HAL_SPI_Init+0x1ec>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d005      	beq.n	8009d56 <HAL_SPI_Init+0x46>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	68db      	ldr	r3, [r3, #12]
 8009d4e:	2b0f      	cmp	r3, #15
 8009d50:	d901      	bls.n	8009d56 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8009d52:	2301      	movs	r3, #1
 8009d54:	e0ca      	b.n	8009eec <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f000 f8d2 	bl	8009f00 <SPI_GetPacketSize>
 8009d5c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	4a64      	ldr	r2, [pc, #400]	; (8009ef4 <HAL_SPI_Init+0x1e4>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d00c      	beq.n	8009d82 <HAL_SPI_Init+0x72>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4a62      	ldr	r2, [pc, #392]	; (8009ef8 <HAL_SPI_Init+0x1e8>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d007      	beq.n	8009d82 <HAL_SPI_Init+0x72>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4a61      	ldr	r2, [pc, #388]	; (8009efc <HAL_SPI_Init+0x1ec>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d002      	beq.n	8009d82 <HAL_SPI_Init+0x72>
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	2b08      	cmp	r3, #8
 8009d80:	d811      	bhi.n	8009da6 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009d86:	4a5b      	ldr	r2, [pc, #364]	; (8009ef4 <HAL_SPI_Init+0x1e4>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d009      	beq.n	8009da0 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a59      	ldr	r2, [pc, #356]	; (8009ef8 <HAL_SPI_Init+0x1e8>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d004      	beq.n	8009da0 <HAL_SPI_Init+0x90>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4a58      	ldr	r2, [pc, #352]	; (8009efc <HAL_SPI_Init+0x1ec>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d104      	bne.n	8009daa <HAL_SPI_Init+0x9a>
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	2b10      	cmp	r3, #16
 8009da4:	d901      	bls.n	8009daa <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8009da6:	2301      	movs	r3, #1
 8009da8:	e0a0      	b.n	8009eec <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009db0:	b2db      	uxtb	r3, r3
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d106      	bne.n	8009dc4 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2200      	movs	r2, #0
 8009dba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f7f7 f938 	bl	8001034 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2202      	movs	r2, #2
 8009dc8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f022 0201 	bic.w	r2, r2, #1
 8009dda:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	699b      	ldr	r3, [r3, #24]
 8009de0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009de4:	d110      	bne.n	8009e08 <HAL_SPI_Init+0xf8>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009dee:	d10b      	bne.n	8009e08 <HAL_SPI_Init+0xf8>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d107      	bne.n	8009e08 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	681a      	ldr	r2, [r3, #0]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009e06:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	69da      	ldr	r2, [r3, #28]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e10:	431a      	orrs	r2, r3
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	431a      	orrs	r2, r3
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e1a:	ea42 0103 	orr.w	r1, r2, r3
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	68da      	ldr	r2, [r3, #12]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	430a      	orrs	r2, r1
 8009e28:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e32:	431a      	orrs	r2, r3
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e38:	431a      	orrs	r2, r3
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	699b      	ldr	r3, [r3, #24]
 8009e3e:	431a      	orrs	r2, r3
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	691b      	ldr	r3, [r3, #16]
 8009e44:	431a      	orrs	r2, r3
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	695b      	ldr	r3, [r3, #20]
 8009e4a:	431a      	orrs	r2, r3
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6a1b      	ldr	r3, [r3, #32]
 8009e50:	431a      	orrs	r2, r3
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	431a      	orrs	r2, r3
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e5c:	431a      	orrs	r2, r3
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	689b      	ldr	r3, [r3, #8]
 8009e62:	431a      	orrs	r2, r3
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e68:	ea42 0103 	orr.w	r1, r2, r3
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	430a      	orrs	r2, r1
 8009e76:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d113      	bne.n	8009ea8 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	689b      	ldr	r3, [r3, #8]
 8009e86:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e92:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	689b      	ldr	r3, [r3, #8]
 8009e9a:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009ea6:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f022 0201 	bic.w	r2, r2, #1
 8009eb6:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d00a      	beq.n	8009eda <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	68db      	ldr	r3, [r3, #12]
 8009eca:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	430a      	orrs	r2, r1
 8009ed8:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2200      	movs	r2, #0
 8009ede:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8009eea:	2300      	movs	r3, #0
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3710      	adds	r7, #16
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}
 8009ef4:	40013000 	.word	0x40013000
 8009ef8:	40003800 	.word	0x40003800
 8009efc:	40003c00 	.word	0x40003c00

08009f00 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b085      	sub	sp, #20
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f0c:	095b      	lsrs	r3, r3, #5
 8009f0e:	3301      	adds	r3, #1
 8009f10:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	68db      	ldr	r3, [r3, #12]
 8009f16:	3301      	adds	r3, #1
 8009f18:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	3307      	adds	r3, #7
 8009f1e:	08db      	lsrs	r3, r3, #3
 8009f20:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	68fa      	ldr	r2, [r7, #12]
 8009f26:	fb02 f303 	mul.w	r3, r2, r3
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3714      	adds	r7, #20
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f34:	4770      	bx	lr

08009f36 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009f36:	b580      	push	{r7, lr}
 8009f38:	b082      	sub	sp, #8
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d101      	bne.n	8009f48 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f44:	2301      	movs	r3, #1
 8009f46:	e042      	b.n	8009fce <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d106      	bne.n	8009f60 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2200      	movs	r2, #0
 8009f56:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f7f7 f8b4 	bl	80010c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2224      	movs	r2, #36	; 0x24
 8009f64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f022 0201 	bic.w	r2, r2, #1
 8009f76:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f000 f8c9 	bl	800a110 <UART_SetConfig>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	2b01      	cmp	r3, #1
 8009f82:	d101      	bne.n	8009f88 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009f84:	2301      	movs	r3, #1
 8009f86:	e022      	b.n	8009fce <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d002      	beq.n	8009f96 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f000 fe6d 	bl	800ac70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	685a      	ldr	r2, [r3, #4]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009fa4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	689a      	ldr	r2, [r3, #8]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009fb4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	681a      	ldr	r2, [r3, #0]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f042 0201 	orr.w	r2, r2, #1
 8009fc4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 fef4 	bl	800adb4 <UART_CheckIdleState>
 8009fcc:	4603      	mov	r3, r0
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3708      	adds	r7, #8
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
	...

08009fd8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b084      	sub	sp, #16
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	60f8      	str	r0, [r7, #12]
 8009fe0:	60b9      	str	r1, [r7, #8]
 8009fe2:	4613      	mov	r3, r2
 8009fe4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009fec:	2b20      	cmp	r3, #32
 8009fee:	d170      	bne.n	800a0d2 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d002      	beq.n	8009ffc <HAL_UART_Receive_DMA+0x24>
 8009ff6:	88fb      	ldrh	r3, [r7, #6]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d101      	bne.n	800a000 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	e069      	b.n	800a0d4 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a006:	2b01      	cmp	r3, #1
 800a008:	d101      	bne.n	800a00e <HAL_UART_Receive_DMA+0x36>
 800a00a:	2302      	movs	r3, #2
 800a00c:	e062      	b.n	800a0d4 <HAL_UART_Receive_DMA+0xfc>
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2201      	movs	r2, #1
 800a012:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	68ba      	ldr	r2, [r7, #8]
 800a01a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	88fa      	ldrh	r2, [r7, #6]
 800a020:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2200      	movs	r2, #0
 800a028:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	2222      	movs	r2, #34	; 0x22
 800a030:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d02c      	beq.n	800a096 <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a040:	4a26      	ldr	r2, [pc, #152]	; (800a0dc <HAL_UART_Receive_DMA+0x104>)
 800a042:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a048:	4a25      	ldr	r2, [pc, #148]	; (800a0e0 <HAL_UART_Receive_DMA+0x108>)
 800a04a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a050:	4a24      	ldr	r2, [pc, #144]	; (800a0e4 <HAL_UART_Receive_DMA+0x10c>)
 800a052:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a058:	2200      	movs	r2, #0
 800a05a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	3324      	adds	r3, #36	; 0x24
 800a066:	4619      	mov	r1, r3
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a06c:	461a      	mov	r2, r3
 800a06e:	88fb      	ldrh	r3, [r7, #6]
 800a070:	f7f7 ff34 	bl	8001edc <HAL_DMA_Start_IT>
 800a074:	4603      	mov	r3, r0
 800a076:	2b00      	cmp	r3, #0
 800a078:	d00d      	beq.n	800a096 <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2210      	movs	r2, #16
 800a07e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2200      	movs	r2, #0
 800a086:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2220      	movs	r2, #32
 800a08e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800a092:	2301      	movs	r3, #1
 800a094:	e01e      	b.n	800a0d4 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2200      	movs	r2, #0
 800a09a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a0ac:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	689a      	ldr	r2, [r3, #8]
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f042 0201 	orr.w	r2, r2, #1
 800a0bc:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	689a      	ldr	r2, [r3, #8]
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a0cc:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	e000      	b.n	800a0d4 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 800a0d2:	2302      	movs	r3, #2
  }
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3710      	adds	r7, #16
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}
 800a0dc:	0800afc9 	.word	0x0800afc9
 800a0e0:	0800b02f 	.word	0x0800b02f
 800a0e4:	0800b04b 	.word	0x0800b04b

0800a0e8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b083      	sub	sp, #12
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a0f0:	bf00      	nop
 800a0f2:	370c      	adds	r7, #12
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr

0800a0fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b083      	sub	sp, #12
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a104:	bf00      	nop
 800a106:	370c      	adds	r7, #12
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a110:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800a114:	b08e      	sub	sp, #56	; 0x38
 800a116:	af00      	add	r7, sp, #0
 800a118:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a11a:	2300      	movs	r3, #0
 800a11c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	689a      	ldr	r2, [r3, #8]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	691b      	ldr	r3, [r3, #16]
 800a128:	431a      	orrs	r2, r3
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	695b      	ldr	r3, [r3, #20]
 800a12e:	431a      	orrs	r2, r3
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	69db      	ldr	r3, [r3, #28]
 800a134:	4313      	orrs	r3, r2
 800a136:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a13c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a13e:	4313      	orrs	r3, r2
 800a140:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	4bc1      	ldr	r3, [pc, #772]	; (800a450 <UART_SetConfig+0x340>)
 800a14a:	4013      	ands	r3, r2
 800a14c:	687a      	ldr	r2, [r7, #4]
 800a14e:	6812      	ldr	r2, [r2, #0]
 800a150:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a152:	430b      	orrs	r3, r1
 800a154:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	68da      	ldr	r2, [r3, #12]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	430a      	orrs	r2, r1
 800a16a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	699b      	ldr	r3, [r3, #24]
 800a170:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	4ab7      	ldr	r2, [pc, #732]	; (800a454 <UART_SetConfig+0x344>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d004      	beq.n	800a186 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6a1b      	ldr	r3, [r3, #32]
 800a180:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a182:	4313      	orrs	r3, r2
 800a184:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	689a      	ldr	r2, [r3, #8]
 800a18c:	4bb2      	ldr	r3, [pc, #712]	; (800a458 <UART_SetConfig+0x348>)
 800a18e:	4013      	ands	r3, r2
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	6812      	ldr	r2, [r2, #0]
 800a194:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a196:	430b      	orrs	r3, r1
 800a198:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a0:	f023 010f 	bic.w	r1, r3, #15
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	430a      	orrs	r2, r1
 800a1ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	4aa9      	ldr	r2, [pc, #676]	; (800a45c <UART_SetConfig+0x34c>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d177      	bne.n	800a2aa <UART_SetConfig+0x19a>
 800a1ba:	4ba9      	ldr	r3, [pc, #676]	; (800a460 <UART_SetConfig+0x350>)
 800a1bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a1c2:	2b28      	cmp	r3, #40	; 0x28
 800a1c4:	d86c      	bhi.n	800a2a0 <UART_SetConfig+0x190>
 800a1c6:	a201      	add	r2, pc, #4	; (adr r2, 800a1cc <UART_SetConfig+0xbc>)
 800a1c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1cc:	0800a271 	.word	0x0800a271
 800a1d0:	0800a2a1 	.word	0x0800a2a1
 800a1d4:	0800a2a1 	.word	0x0800a2a1
 800a1d8:	0800a2a1 	.word	0x0800a2a1
 800a1dc:	0800a2a1 	.word	0x0800a2a1
 800a1e0:	0800a2a1 	.word	0x0800a2a1
 800a1e4:	0800a2a1 	.word	0x0800a2a1
 800a1e8:	0800a2a1 	.word	0x0800a2a1
 800a1ec:	0800a279 	.word	0x0800a279
 800a1f0:	0800a2a1 	.word	0x0800a2a1
 800a1f4:	0800a2a1 	.word	0x0800a2a1
 800a1f8:	0800a2a1 	.word	0x0800a2a1
 800a1fc:	0800a2a1 	.word	0x0800a2a1
 800a200:	0800a2a1 	.word	0x0800a2a1
 800a204:	0800a2a1 	.word	0x0800a2a1
 800a208:	0800a2a1 	.word	0x0800a2a1
 800a20c:	0800a281 	.word	0x0800a281
 800a210:	0800a2a1 	.word	0x0800a2a1
 800a214:	0800a2a1 	.word	0x0800a2a1
 800a218:	0800a2a1 	.word	0x0800a2a1
 800a21c:	0800a2a1 	.word	0x0800a2a1
 800a220:	0800a2a1 	.word	0x0800a2a1
 800a224:	0800a2a1 	.word	0x0800a2a1
 800a228:	0800a2a1 	.word	0x0800a2a1
 800a22c:	0800a289 	.word	0x0800a289
 800a230:	0800a2a1 	.word	0x0800a2a1
 800a234:	0800a2a1 	.word	0x0800a2a1
 800a238:	0800a2a1 	.word	0x0800a2a1
 800a23c:	0800a2a1 	.word	0x0800a2a1
 800a240:	0800a2a1 	.word	0x0800a2a1
 800a244:	0800a2a1 	.word	0x0800a2a1
 800a248:	0800a2a1 	.word	0x0800a2a1
 800a24c:	0800a291 	.word	0x0800a291
 800a250:	0800a2a1 	.word	0x0800a2a1
 800a254:	0800a2a1 	.word	0x0800a2a1
 800a258:	0800a2a1 	.word	0x0800a2a1
 800a25c:	0800a2a1 	.word	0x0800a2a1
 800a260:	0800a2a1 	.word	0x0800a2a1
 800a264:	0800a2a1 	.word	0x0800a2a1
 800a268:	0800a2a1 	.word	0x0800a2a1
 800a26c:	0800a299 	.word	0x0800a299
 800a270:	2301      	movs	r3, #1
 800a272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a276:	e233      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a278:	2304      	movs	r3, #4
 800a27a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a27e:	e22f      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a280:	2308      	movs	r3, #8
 800a282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a286:	e22b      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a288:	2310      	movs	r3, #16
 800a28a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a28e:	e227      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a290:	2320      	movs	r3, #32
 800a292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a296:	e223      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a298:	2340      	movs	r3, #64	; 0x40
 800a29a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a29e:	e21f      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a2a0:	2380      	movs	r3, #128	; 0x80
 800a2a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2a6:	bf00      	nop
 800a2a8:	e21a      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4a6d      	ldr	r2, [pc, #436]	; (800a464 <UART_SetConfig+0x354>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d132      	bne.n	800a31a <UART_SetConfig+0x20a>
 800a2b4:	4b6a      	ldr	r3, [pc, #424]	; (800a460 <UART_SetConfig+0x350>)
 800a2b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2b8:	f003 0307 	and.w	r3, r3, #7
 800a2bc:	2b05      	cmp	r3, #5
 800a2be:	d827      	bhi.n	800a310 <UART_SetConfig+0x200>
 800a2c0:	a201      	add	r2, pc, #4	; (adr r2, 800a2c8 <UART_SetConfig+0x1b8>)
 800a2c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2c6:	bf00      	nop
 800a2c8:	0800a2e1 	.word	0x0800a2e1
 800a2cc:	0800a2e9 	.word	0x0800a2e9
 800a2d0:	0800a2f1 	.word	0x0800a2f1
 800a2d4:	0800a2f9 	.word	0x0800a2f9
 800a2d8:	0800a301 	.word	0x0800a301
 800a2dc:	0800a309 	.word	0x0800a309
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2e6:	e1fb      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a2e8:	2304      	movs	r3, #4
 800a2ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2ee:	e1f7      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a2f0:	2308      	movs	r3, #8
 800a2f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2f6:	e1f3      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a2f8:	2310      	movs	r3, #16
 800a2fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2fe:	e1ef      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a300:	2320      	movs	r3, #32
 800a302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a306:	e1eb      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a308:	2340      	movs	r3, #64	; 0x40
 800a30a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a30e:	e1e7      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a310:	2380      	movs	r3, #128	; 0x80
 800a312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a316:	bf00      	nop
 800a318:	e1e2      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4a52      	ldr	r2, [pc, #328]	; (800a468 <UART_SetConfig+0x358>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d132      	bne.n	800a38a <UART_SetConfig+0x27a>
 800a324:	4b4e      	ldr	r3, [pc, #312]	; (800a460 <UART_SetConfig+0x350>)
 800a326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a328:	f003 0307 	and.w	r3, r3, #7
 800a32c:	2b05      	cmp	r3, #5
 800a32e:	d827      	bhi.n	800a380 <UART_SetConfig+0x270>
 800a330:	a201      	add	r2, pc, #4	; (adr r2, 800a338 <UART_SetConfig+0x228>)
 800a332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a336:	bf00      	nop
 800a338:	0800a351 	.word	0x0800a351
 800a33c:	0800a359 	.word	0x0800a359
 800a340:	0800a361 	.word	0x0800a361
 800a344:	0800a369 	.word	0x0800a369
 800a348:	0800a371 	.word	0x0800a371
 800a34c:	0800a379 	.word	0x0800a379
 800a350:	2300      	movs	r3, #0
 800a352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a356:	e1c3      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a358:	2304      	movs	r3, #4
 800a35a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a35e:	e1bf      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a360:	2308      	movs	r3, #8
 800a362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a366:	e1bb      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a368:	2310      	movs	r3, #16
 800a36a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a36e:	e1b7      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a370:	2320      	movs	r3, #32
 800a372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a376:	e1b3      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a378:	2340      	movs	r3, #64	; 0x40
 800a37a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a37e:	e1af      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a380:	2380      	movs	r3, #128	; 0x80
 800a382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a386:	bf00      	nop
 800a388:	e1aa      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4a37      	ldr	r2, [pc, #220]	; (800a46c <UART_SetConfig+0x35c>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d132      	bne.n	800a3fa <UART_SetConfig+0x2ea>
 800a394:	4b32      	ldr	r3, [pc, #200]	; (800a460 <UART_SetConfig+0x350>)
 800a396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a398:	f003 0307 	and.w	r3, r3, #7
 800a39c:	2b05      	cmp	r3, #5
 800a39e:	d827      	bhi.n	800a3f0 <UART_SetConfig+0x2e0>
 800a3a0:	a201      	add	r2, pc, #4	; (adr r2, 800a3a8 <UART_SetConfig+0x298>)
 800a3a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3a6:	bf00      	nop
 800a3a8:	0800a3c1 	.word	0x0800a3c1
 800a3ac:	0800a3c9 	.word	0x0800a3c9
 800a3b0:	0800a3d1 	.word	0x0800a3d1
 800a3b4:	0800a3d9 	.word	0x0800a3d9
 800a3b8:	0800a3e1 	.word	0x0800a3e1
 800a3bc:	0800a3e9 	.word	0x0800a3e9
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3c6:	e18b      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a3c8:	2304      	movs	r3, #4
 800a3ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3ce:	e187      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a3d0:	2308      	movs	r3, #8
 800a3d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3d6:	e183      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a3d8:	2310      	movs	r3, #16
 800a3da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3de:	e17f      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a3e0:	2320      	movs	r3, #32
 800a3e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3e6:	e17b      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a3e8:	2340      	movs	r3, #64	; 0x40
 800a3ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3ee:	e177      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a3f0:	2380      	movs	r3, #128	; 0x80
 800a3f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3f6:	bf00      	nop
 800a3f8:	e172      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	4a1c      	ldr	r2, [pc, #112]	; (800a470 <UART_SetConfig+0x360>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d144      	bne.n	800a48e <UART_SetConfig+0x37e>
 800a404:	4b16      	ldr	r3, [pc, #88]	; (800a460 <UART_SetConfig+0x350>)
 800a406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a408:	f003 0307 	and.w	r3, r3, #7
 800a40c:	2b05      	cmp	r3, #5
 800a40e:	d839      	bhi.n	800a484 <UART_SetConfig+0x374>
 800a410:	a201      	add	r2, pc, #4	; (adr r2, 800a418 <UART_SetConfig+0x308>)
 800a412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a416:	bf00      	nop
 800a418:	0800a431 	.word	0x0800a431
 800a41c:	0800a439 	.word	0x0800a439
 800a420:	0800a441 	.word	0x0800a441
 800a424:	0800a449 	.word	0x0800a449
 800a428:	0800a475 	.word	0x0800a475
 800a42c:	0800a47d 	.word	0x0800a47d
 800a430:	2300      	movs	r3, #0
 800a432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a436:	e153      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a438:	2304      	movs	r3, #4
 800a43a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a43e:	e14f      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a440:	2308      	movs	r3, #8
 800a442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a446:	e14b      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a448:	2310      	movs	r3, #16
 800a44a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a44e:	e147      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a450:	cfff69f3 	.word	0xcfff69f3
 800a454:	58000c00 	.word	0x58000c00
 800a458:	11fff4ff 	.word	0x11fff4ff
 800a45c:	40011000 	.word	0x40011000
 800a460:	58024400 	.word	0x58024400
 800a464:	40004400 	.word	0x40004400
 800a468:	40004800 	.word	0x40004800
 800a46c:	40004c00 	.word	0x40004c00
 800a470:	40005000 	.word	0x40005000
 800a474:	2320      	movs	r3, #32
 800a476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a47a:	e131      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a47c:	2340      	movs	r3, #64	; 0x40
 800a47e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a482:	e12d      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a484:	2380      	movs	r3, #128	; 0x80
 800a486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a48a:	bf00      	nop
 800a48c:	e128      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	4ab6      	ldr	r2, [pc, #728]	; (800a76c <UART_SetConfig+0x65c>)
 800a494:	4293      	cmp	r3, r2
 800a496:	d178      	bne.n	800a58a <UART_SetConfig+0x47a>
 800a498:	4bb5      	ldr	r3, [pc, #724]	; (800a770 <UART_SetConfig+0x660>)
 800a49a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a49c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a4a0:	2b28      	cmp	r3, #40	; 0x28
 800a4a2:	d86d      	bhi.n	800a580 <UART_SetConfig+0x470>
 800a4a4:	a201      	add	r2, pc, #4	; (adr r2, 800a4ac <UART_SetConfig+0x39c>)
 800a4a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4aa:	bf00      	nop
 800a4ac:	0800a551 	.word	0x0800a551
 800a4b0:	0800a581 	.word	0x0800a581
 800a4b4:	0800a581 	.word	0x0800a581
 800a4b8:	0800a581 	.word	0x0800a581
 800a4bc:	0800a581 	.word	0x0800a581
 800a4c0:	0800a581 	.word	0x0800a581
 800a4c4:	0800a581 	.word	0x0800a581
 800a4c8:	0800a581 	.word	0x0800a581
 800a4cc:	0800a559 	.word	0x0800a559
 800a4d0:	0800a581 	.word	0x0800a581
 800a4d4:	0800a581 	.word	0x0800a581
 800a4d8:	0800a581 	.word	0x0800a581
 800a4dc:	0800a581 	.word	0x0800a581
 800a4e0:	0800a581 	.word	0x0800a581
 800a4e4:	0800a581 	.word	0x0800a581
 800a4e8:	0800a581 	.word	0x0800a581
 800a4ec:	0800a561 	.word	0x0800a561
 800a4f0:	0800a581 	.word	0x0800a581
 800a4f4:	0800a581 	.word	0x0800a581
 800a4f8:	0800a581 	.word	0x0800a581
 800a4fc:	0800a581 	.word	0x0800a581
 800a500:	0800a581 	.word	0x0800a581
 800a504:	0800a581 	.word	0x0800a581
 800a508:	0800a581 	.word	0x0800a581
 800a50c:	0800a569 	.word	0x0800a569
 800a510:	0800a581 	.word	0x0800a581
 800a514:	0800a581 	.word	0x0800a581
 800a518:	0800a581 	.word	0x0800a581
 800a51c:	0800a581 	.word	0x0800a581
 800a520:	0800a581 	.word	0x0800a581
 800a524:	0800a581 	.word	0x0800a581
 800a528:	0800a581 	.word	0x0800a581
 800a52c:	0800a571 	.word	0x0800a571
 800a530:	0800a581 	.word	0x0800a581
 800a534:	0800a581 	.word	0x0800a581
 800a538:	0800a581 	.word	0x0800a581
 800a53c:	0800a581 	.word	0x0800a581
 800a540:	0800a581 	.word	0x0800a581
 800a544:	0800a581 	.word	0x0800a581
 800a548:	0800a581 	.word	0x0800a581
 800a54c:	0800a579 	.word	0x0800a579
 800a550:	2301      	movs	r3, #1
 800a552:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a556:	e0c3      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a558:	2304      	movs	r3, #4
 800a55a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a55e:	e0bf      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a560:	2308      	movs	r3, #8
 800a562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a566:	e0bb      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a568:	2310      	movs	r3, #16
 800a56a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a56e:	e0b7      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a570:	2320      	movs	r3, #32
 800a572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a576:	e0b3      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a578:	2340      	movs	r3, #64	; 0x40
 800a57a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a57e:	e0af      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a580:	2380      	movs	r3, #128	; 0x80
 800a582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a586:	bf00      	nop
 800a588:	e0aa      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	4a79      	ldr	r2, [pc, #484]	; (800a774 <UART_SetConfig+0x664>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d132      	bne.n	800a5fa <UART_SetConfig+0x4ea>
 800a594:	4b76      	ldr	r3, [pc, #472]	; (800a770 <UART_SetConfig+0x660>)
 800a596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a598:	f003 0307 	and.w	r3, r3, #7
 800a59c:	2b05      	cmp	r3, #5
 800a59e:	d827      	bhi.n	800a5f0 <UART_SetConfig+0x4e0>
 800a5a0:	a201      	add	r2, pc, #4	; (adr r2, 800a5a8 <UART_SetConfig+0x498>)
 800a5a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5a6:	bf00      	nop
 800a5a8:	0800a5c1 	.word	0x0800a5c1
 800a5ac:	0800a5c9 	.word	0x0800a5c9
 800a5b0:	0800a5d1 	.word	0x0800a5d1
 800a5b4:	0800a5d9 	.word	0x0800a5d9
 800a5b8:	0800a5e1 	.word	0x0800a5e1
 800a5bc:	0800a5e9 	.word	0x0800a5e9
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5c6:	e08b      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a5c8:	2304      	movs	r3, #4
 800a5ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5ce:	e087      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a5d0:	2308      	movs	r3, #8
 800a5d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5d6:	e083      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a5d8:	2310      	movs	r3, #16
 800a5da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5de:	e07f      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a5e0:	2320      	movs	r3, #32
 800a5e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5e6:	e07b      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a5e8:	2340      	movs	r3, #64	; 0x40
 800a5ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5ee:	e077      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a5f0:	2380      	movs	r3, #128	; 0x80
 800a5f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5f6:	bf00      	nop
 800a5f8:	e072      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4a5e      	ldr	r2, [pc, #376]	; (800a778 <UART_SetConfig+0x668>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d132      	bne.n	800a66a <UART_SetConfig+0x55a>
 800a604:	4b5a      	ldr	r3, [pc, #360]	; (800a770 <UART_SetConfig+0x660>)
 800a606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a608:	f003 0307 	and.w	r3, r3, #7
 800a60c:	2b05      	cmp	r3, #5
 800a60e:	d827      	bhi.n	800a660 <UART_SetConfig+0x550>
 800a610:	a201      	add	r2, pc, #4	; (adr r2, 800a618 <UART_SetConfig+0x508>)
 800a612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a616:	bf00      	nop
 800a618:	0800a631 	.word	0x0800a631
 800a61c:	0800a639 	.word	0x0800a639
 800a620:	0800a641 	.word	0x0800a641
 800a624:	0800a649 	.word	0x0800a649
 800a628:	0800a651 	.word	0x0800a651
 800a62c:	0800a659 	.word	0x0800a659
 800a630:	2300      	movs	r3, #0
 800a632:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a636:	e053      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a638:	2304      	movs	r3, #4
 800a63a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a63e:	e04f      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a640:	2308      	movs	r3, #8
 800a642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a646:	e04b      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a648:	2310      	movs	r3, #16
 800a64a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a64e:	e047      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a650:	2320      	movs	r3, #32
 800a652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a656:	e043      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a658:	2340      	movs	r3, #64	; 0x40
 800a65a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a65e:	e03f      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a660:	2380      	movs	r3, #128	; 0x80
 800a662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a666:	bf00      	nop
 800a668:	e03a      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4a43      	ldr	r2, [pc, #268]	; (800a77c <UART_SetConfig+0x66c>)
 800a670:	4293      	cmp	r3, r2
 800a672:	d132      	bne.n	800a6da <UART_SetConfig+0x5ca>
 800a674:	4b3e      	ldr	r3, [pc, #248]	; (800a770 <UART_SetConfig+0x660>)
 800a676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a678:	f003 0307 	and.w	r3, r3, #7
 800a67c:	2b05      	cmp	r3, #5
 800a67e:	d827      	bhi.n	800a6d0 <UART_SetConfig+0x5c0>
 800a680:	a201      	add	r2, pc, #4	; (adr r2, 800a688 <UART_SetConfig+0x578>)
 800a682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a686:	bf00      	nop
 800a688:	0800a6a1 	.word	0x0800a6a1
 800a68c:	0800a6a9 	.word	0x0800a6a9
 800a690:	0800a6b1 	.word	0x0800a6b1
 800a694:	0800a6b9 	.word	0x0800a6b9
 800a698:	0800a6c1 	.word	0x0800a6c1
 800a69c:	0800a6c9 	.word	0x0800a6c9
 800a6a0:	2302      	movs	r3, #2
 800a6a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6a6:	e01b      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a6a8:	2304      	movs	r3, #4
 800a6aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6ae:	e017      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a6b0:	2308      	movs	r3, #8
 800a6b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6b6:	e013      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a6b8:	2310      	movs	r3, #16
 800a6ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6be:	e00f      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a6c0:	2320      	movs	r3, #32
 800a6c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6c6:	e00b      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a6c8:	2340      	movs	r3, #64	; 0x40
 800a6ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6ce:	e007      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a6d0:	2380      	movs	r3, #128	; 0x80
 800a6d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6d6:	bf00      	nop
 800a6d8:	e002      	b.n	800a6e0 <UART_SetConfig+0x5d0>
 800a6da:	2380      	movs	r3, #128	; 0x80
 800a6dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4a25      	ldr	r2, [pc, #148]	; (800a77c <UART_SetConfig+0x66c>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	f040 80b8 	bne.w	800a85c <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a6ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a6f0:	2b08      	cmp	r3, #8
 800a6f2:	d019      	beq.n	800a728 <UART_SetConfig+0x618>
 800a6f4:	2b08      	cmp	r3, #8
 800a6f6:	dc04      	bgt.n	800a702 <UART_SetConfig+0x5f2>
 800a6f8:	2b02      	cmp	r3, #2
 800a6fa:	d009      	beq.n	800a710 <UART_SetConfig+0x600>
 800a6fc:	2b04      	cmp	r3, #4
 800a6fe:	d00b      	beq.n	800a718 <UART_SetConfig+0x608>
 800a700:	e042      	b.n	800a788 <UART_SetConfig+0x678>
 800a702:	2b20      	cmp	r3, #32
 800a704:	d02b      	beq.n	800a75e <UART_SetConfig+0x64e>
 800a706:	2b40      	cmp	r3, #64	; 0x40
 800a708:	d02c      	beq.n	800a764 <UART_SetConfig+0x654>
 800a70a:	2b10      	cmp	r3, #16
 800a70c:	d014      	beq.n	800a738 <UART_SetConfig+0x628>
 800a70e:	e03b      	b.n	800a788 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a710:	f7fd f9e4 	bl	8007adc <HAL_RCCEx_GetD3PCLK1Freq>
 800a714:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a716:	e03d      	b.n	800a794 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a718:	f107 0314 	add.w	r3, r7, #20
 800a71c:	4618      	mov	r0, r3
 800a71e:	f7fd f9f3 	bl	8007b08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a722:	69bb      	ldr	r3, [r7, #24]
 800a724:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a726:	e035      	b.n	800a794 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a728:	f107 0308 	add.w	r3, r7, #8
 800a72c:	4618      	mov	r0, r3
 800a72e:	f7fd fb37 	bl	8007da0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a736:	e02d      	b.n	800a794 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a738:	4b0d      	ldr	r3, [pc, #52]	; (800a770 <UART_SetConfig+0x660>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f003 0320 	and.w	r3, r3, #32
 800a740:	2b00      	cmp	r3, #0
 800a742:	d009      	beq.n	800a758 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a744:	4b0a      	ldr	r3, [pc, #40]	; (800a770 <UART_SetConfig+0x660>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	08db      	lsrs	r3, r3, #3
 800a74a:	f003 0303 	and.w	r3, r3, #3
 800a74e:	4a0c      	ldr	r2, [pc, #48]	; (800a780 <UART_SetConfig+0x670>)
 800a750:	fa22 f303 	lsr.w	r3, r2, r3
 800a754:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a756:	e01d      	b.n	800a794 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800a758:	4b09      	ldr	r3, [pc, #36]	; (800a780 <UART_SetConfig+0x670>)
 800a75a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a75c:	e01a      	b.n	800a794 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a75e:	4b09      	ldr	r3, [pc, #36]	; (800a784 <UART_SetConfig+0x674>)
 800a760:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a762:	e017      	b.n	800a794 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a764:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a768:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a76a:	e013      	b.n	800a794 <UART_SetConfig+0x684>
 800a76c:	40011400 	.word	0x40011400
 800a770:	58024400 	.word	0x58024400
 800a774:	40007800 	.word	0x40007800
 800a778:	40007c00 	.word	0x40007c00
 800a77c:	58000c00 	.word	0x58000c00
 800a780:	03d09000 	.word	0x03d09000
 800a784:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800a788:	2300      	movs	r3, #0
 800a78a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a78c:	2301      	movs	r3, #1
 800a78e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a792:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a796:	2b00      	cmp	r3, #0
 800a798:	f000 824d 	beq.w	800ac36 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a0:	4aad      	ldr	r2, [pc, #692]	; (800aa58 <UART_SetConfig+0x948>)
 800a7a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7aa:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7ae:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	685a      	ldr	r2, [r3, #4]
 800a7b4:	4613      	mov	r3, r2
 800a7b6:	005b      	lsls	r3, r3, #1
 800a7b8:	4413      	add	r3, r2
 800a7ba:	6a3a      	ldr	r2, [r7, #32]
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d305      	bcc.n	800a7cc <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a7c6:	6a3a      	ldr	r2, [r7, #32]
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d903      	bls.n	800a7d4 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a7d2:	e230      	b.n	800ac36 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f04f 0100 	mov.w	r1, #0
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e0:	4a9d      	ldr	r2, [pc, #628]	; (800aa58 <UART_SetConfig+0x948>)
 800a7e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	f04f 0400 	mov.w	r4, #0
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	4623      	mov	r3, r4
 800a7f0:	f7f5 fd72 	bl	80002d8 <__aeabi_uldivmod>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	460c      	mov	r4, r1
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	4622      	mov	r2, r4
 800a7fc:	f04f 0300 	mov.w	r3, #0
 800a800:	f04f 0400 	mov.w	r4, #0
 800a804:	0214      	lsls	r4, r2, #8
 800a806:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a80a:	020b      	lsls	r3, r1, #8
 800a80c:	687a      	ldr	r2, [r7, #4]
 800a80e:	6852      	ldr	r2, [r2, #4]
 800a810:	0852      	lsrs	r2, r2, #1
 800a812:	4611      	mov	r1, r2
 800a814:	f04f 0200 	mov.w	r2, #0
 800a818:	eb13 0b01 	adds.w	fp, r3, r1
 800a81c:	eb44 0c02 	adc.w	ip, r4, r2
 800a820:	4658      	mov	r0, fp
 800a822:	4661      	mov	r1, ip
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	685b      	ldr	r3, [r3, #4]
 800a828:	f04f 0400 	mov.w	r4, #0
 800a82c:	461a      	mov	r2, r3
 800a82e:	4623      	mov	r3, r4
 800a830:	f7f5 fd52 	bl	80002d8 <__aeabi_uldivmod>
 800a834:	4603      	mov	r3, r0
 800a836:	460c      	mov	r4, r1
 800a838:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a83c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a840:	d308      	bcc.n	800a854 <UART_SetConfig+0x744>
 800a842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a844:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a848:	d204      	bcs.n	800a854 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a850:	60da      	str	r2, [r3, #12]
 800a852:	e1f0      	b.n	800ac36 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800a854:	2301      	movs	r3, #1
 800a856:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a85a:	e1ec      	b.n	800ac36 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	69db      	ldr	r3, [r3, #28]
 800a860:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a864:	f040 8100 	bne.w	800aa68 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800a868:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a86c:	2b40      	cmp	r3, #64	; 0x40
 800a86e:	f200 80b7 	bhi.w	800a9e0 <UART_SetConfig+0x8d0>
 800a872:	a201      	add	r2, pc, #4	; (adr r2, 800a878 <UART_SetConfig+0x768>)
 800a874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a878:	0800a97d 	.word	0x0800a97d
 800a87c:	0800a985 	.word	0x0800a985
 800a880:	0800a9e1 	.word	0x0800a9e1
 800a884:	0800a9e1 	.word	0x0800a9e1
 800a888:	0800a98d 	.word	0x0800a98d
 800a88c:	0800a9e1 	.word	0x0800a9e1
 800a890:	0800a9e1 	.word	0x0800a9e1
 800a894:	0800a9e1 	.word	0x0800a9e1
 800a898:	0800a99d 	.word	0x0800a99d
 800a89c:	0800a9e1 	.word	0x0800a9e1
 800a8a0:	0800a9e1 	.word	0x0800a9e1
 800a8a4:	0800a9e1 	.word	0x0800a9e1
 800a8a8:	0800a9e1 	.word	0x0800a9e1
 800a8ac:	0800a9e1 	.word	0x0800a9e1
 800a8b0:	0800a9e1 	.word	0x0800a9e1
 800a8b4:	0800a9e1 	.word	0x0800a9e1
 800a8b8:	0800a9ad 	.word	0x0800a9ad
 800a8bc:	0800a9e1 	.word	0x0800a9e1
 800a8c0:	0800a9e1 	.word	0x0800a9e1
 800a8c4:	0800a9e1 	.word	0x0800a9e1
 800a8c8:	0800a9e1 	.word	0x0800a9e1
 800a8cc:	0800a9e1 	.word	0x0800a9e1
 800a8d0:	0800a9e1 	.word	0x0800a9e1
 800a8d4:	0800a9e1 	.word	0x0800a9e1
 800a8d8:	0800a9e1 	.word	0x0800a9e1
 800a8dc:	0800a9e1 	.word	0x0800a9e1
 800a8e0:	0800a9e1 	.word	0x0800a9e1
 800a8e4:	0800a9e1 	.word	0x0800a9e1
 800a8e8:	0800a9e1 	.word	0x0800a9e1
 800a8ec:	0800a9e1 	.word	0x0800a9e1
 800a8f0:	0800a9e1 	.word	0x0800a9e1
 800a8f4:	0800a9e1 	.word	0x0800a9e1
 800a8f8:	0800a9d3 	.word	0x0800a9d3
 800a8fc:	0800a9e1 	.word	0x0800a9e1
 800a900:	0800a9e1 	.word	0x0800a9e1
 800a904:	0800a9e1 	.word	0x0800a9e1
 800a908:	0800a9e1 	.word	0x0800a9e1
 800a90c:	0800a9e1 	.word	0x0800a9e1
 800a910:	0800a9e1 	.word	0x0800a9e1
 800a914:	0800a9e1 	.word	0x0800a9e1
 800a918:	0800a9e1 	.word	0x0800a9e1
 800a91c:	0800a9e1 	.word	0x0800a9e1
 800a920:	0800a9e1 	.word	0x0800a9e1
 800a924:	0800a9e1 	.word	0x0800a9e1
 800a928:	0800a9e1 	.word	0x0800a9e1
 800a92c:	0800a9e1 	.word	0x0800a9e1
 800a930:	0800a9e1 	.word	0x0800a9e1
 800a934:	0800a9e1 	.word	0x0800a9e1
 800a938:	0800a9e1 	.word	0x0800a9e1
 800a93c:	0800a9e1 	.word	0x0800a9e1
 800a940:	0800a9e1 	.word	0x0800a9e1
 800a944:	0800a9e1 	.word	0x0800a9e1
 800a948:	0800a9e1 	.word	0x0800a9e1
 800a94c:	0800a9e1 	.word	0x0800a9e1
 800a950:	0800a9e1 	.word	0x0800a9e1
 800a954:	0800a9e1 	.word	0x0800a9e1
 800a958:	0800a9e1 	.word	0x0800a9e1
 800a95c:	0800a9e1 	.word	0x0800a9e1
 800a960:	0800a9e1 	.word	0x0800a9e1
 800a964:	0800a9e1 	.word	0x0800a9e1
 800a968:	0800a9e1 	.word	0x0800a9e1
 800a96c:	0800a9e1 	.word	0x0800a9e1
 800a970:	0800a9e1 	.word	0x0800a9e1
 800a974:	0800a9e1 	.word	0x0800a9e1
 800a978:	0800a9d9 	.word	0x0800a9d9
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a97c:	f7fb ff1c 	bl	80067b8 <HAL_RCC_GetPCLK1Freq>
 800a980:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a982:	e033      	b.n	800a9ec <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a984:	f7fb ff2e 	bl	80067e4 <HAL_RCC_GetPCLK2Freq>
 800a988:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a98a:	e02f      	b.n	800a9ec <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a98c:	f107 0314 	add.w	r3, r7, #20
 800a990:	4618      	mov	r0, r3
 800a992:	f7fd f8b9 	bl	8007b08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a996:	69bb      	ldr	r3, [r7, #24]
 800a998:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a99a:	e027      	b.n	800a9ec <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a99c:	f107 0308 	add.w	r3, r7, #8
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f7fd f9fd 	bl	8007da0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a9aa:	e01f      	b.n	800a9ec <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9ac:	4b2b      	ldr	r3, [pc, #172]	; (800aa5c <UART_SetConfig+0x94c>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f003 0320 	and.w	r3, r3, #32
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d009      	beq.n	800a9cc <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a9b8:	4b28      	ldr	r3, [pc, #160]	; (800aa5c <UART_SetConfig+0x94c>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	08db      	lsrs	r3, r3, #3
 800a9be:	f003 0303 	and.w	r3, r3, #3
 800a9c2:	4a27      	ldr	r2, [pc, #156]	; (800aa60 <UART_SetConfig+0x950>)
 800a9c4:	fa22 f303 	lsr.w	r3, r2, r3
 800a9c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a9ca:	e00f      	b.n	800a9ec <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800a9cc:	4b24      	ldr	r3, [pc, #144]	; (800aa60 <UART_SetConfig+0x950>)
 800a9ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a9d0:	e00c      	b.n	800a9ec <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a9d2:	4b24      	ldr	r3, [pc, #144]	; (800aa64 <UART_SetConfig+0x954>)
 800a9d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a9d6:	e009      	b.n	800a9ec <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a9d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a9dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a9de:	e005      	b.n	800a9ec <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a9ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	f000 8121 	beq.w	800ac36 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f8:	4a17      	ldr	r2, [pc, #92]	; (800aa58 <UART_SetConfig+0x948>)
 800a9fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a9fe:	461a      	mov	r2, r3
 800aa00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa02:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa06:	005a      	lsls	r2, r3, #1
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	085b      	lsrs	r3, r3, #1
 800aa0e:	441a      	add	r2, r3
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	685b      	ldr	r3, [r3, #4]
 800aa14:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa18:	b29b      	uxth	r3, r3
 800aa1a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa1e:	2b0f      	cmp	r3, #15
 800aa20:	d916      	bls.n	800aa50 <UART_SetConfig+0x940>
 800aa22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa28:	d212      	bcs.n	800aa50 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aa2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa2c:	b29b      	uxth	r3, r3
 800aa2e:	f023 030f 	bic.w	r3, r3, #15
 800aa32:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aa34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa36:	085b      	lsrs	r3, r3, #1
 800aa38:	b29b      	uxth	r3, r3
 800aa3a:	f003 0307 	and.w	r3, r3, #7
 800aa3e:	b29a      	uxth	r2, r3
 800aa40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aa42:	4313      	orrs	r3, r2
 800aa44:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800aa4c:	60da      	str	r2, [r3, #12]
 800aa4e:	e0f2      	b.n	800ac36 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800aa50:	2301      	movs	r3, #1
 800aa52:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800aa56:	e0ee      	b.n	800ac36 <UART_SetConfig+0xb26>
 800aa58:	0800fe1c 	.word	0x0800fe1c
 800aa5c:	58024400 	.word	0x58024400
 800aa60:	03d09000 	.word	0x03d09000
 800aa64:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800aa68:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800aa6c:	2b40      	cmp	r3, #64	; 0x40
 800aa6e:	f200 80b7 	bhi.w	800abe0 <UART_SetConfig+0xad0>
 800aa72:	a201      	add	r2, pc, #4	; (adr r2, 800aa78 <UART_SetConfig+0x968>)
 800aa74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa78:	0800ab7d 	.word	0x0800ab7d
 800aa7c:	0800ab85 	.word	0x0800ab85
 800aa80:	0800abe1 	.word	0x0800abe1
 800aa84:	0800abe1 	.word	0x0800abe1
 800aa88:	0800ab8d 	.word	0x0800ab8d
 800aa8c:	0800abe1 	.word	0x0800abe1
 800aa90:	0800abe1 	.word	0x0800abe1
 800aa94:	0800abe1 	.word	0x0800abe1
 800aa98:	0800ab9d 	.word	0x0800ab9d
 800aa9c:	0800abe1 	.word	0x0800abe1
 800aaa0:	0800abe1 	.word	0x0800abe1
 800aaa4:	0800abe1 	.word	0x0800abe1
 800aaa8:	0800abe1 	.word	0x0800abe1
 800aaac:	0800abe1 	.word	0x0800abe1
 800aab0:	0800abe1 	.word	0x0800abe1
 800aab4:	0800abe1 	.word	0x0800abe1
 800aab8:	0800abad 	.word	0x0800abad
 800aabc:	0800abe1 	.word	0x0800abe1
 800aac0:	0800abe1 	.word	0x0800abe1
 800aac4:	0800abe1 	.word	0x0800abe1
 800aac8:	0800abe1 	.word	0x0800abe1
 800aacc:	0800abe1 	.word	0x0800abe1
 800aad0:	0800abe1 	.word	0x0800abe1
 800aad4:	0800abe1 	.word	0x0800abe1
 800aad8:	0800abe1 	.word	0x0800abe1
 800aadc:	0800abe1 	.word	0x0800abe1
 800aae0:	0800abe1 	.word	0x0800abe1
 800aae4:	0800abe1 	.word	0x0800abe1
 800aae8:	0800abe1 	.word	0x0800abe1
 800aaec:	0800abe1 	.word	0x0800abe1
 800aaf0:	0800abe1 	.word	0x0800abe1
 800aaf4:	0800abe1 	.word	0x0800abe1
 800aaf8:	0800abd3 	.word	0x0800abd3
 800aafc:	0800abe1 	.word	0x0800abe1
 800ab00:	0800abe1 	.word	0x0800abe1
 800ab04:	0800abe1 	.word	0x0800abe1
 800ab08:	0800abe1 	.word	0x0800abe1
 800ab0c:	0800abe1 	.word	0x0800abe1
 800ab10:	0800abe1 	.word	0x0800abe1
 800ab14:	0800abe1 	.word	0x0800abe1
 800ab18:	0800abe1 	.word	0x0800abe1
 800ab1c:	0800abe1 	.word	0x0800abe1
 800ab20:	0800abe1 	.word	0x0800abe1
 800ab24:	0800abe1 	.word	0x0800abe1
 800ab28:	0800abe1 	.word	0x0800abe1
 800ab2c:	0800abe1 	.word	0x0800abe1
 800ab30:	0800abe1 	.word	0x0800abe1
 800ab34:	0800abe1 	.word	0x0800abe1
 800ab38:	0800abe1 	.word	0x0800abe1
 800ab3c:	0800abe1 	.word	0x0800abe1
 800ab40:	0800abe1 	.word	0x0800abe1
 800ab44:	0800abe1 	.word	0x0800abe1
 800ab48:	0800abe1 	.word	0x0800abe1
 800ab4c:	0800abe1 	.word	0x0800abe1
 800ab50:	0800abe1 	.word	0x0800abe1
 800ab54:	0800abe1 	.word	0x0800abe1
 800ab58:	0800abe1 	.word	0x0800abe1
 800ab5c:	0800abe1 	.word	0x0800abe1
 800ab60:	0800abe1 	.word	0x0800abe1
 800ab64:	0800abe1 	.word	0x0800abe1
 800ab68:	0800abe1 	.word	0x0800abe1
 800ab6c:	0800abe1 	.word	0x0800abe1
 800ab70:	0800abe1 	.word	0x0800abe1
 800ab74:	0800abe1 	.word	0x0800abe1
 800ab78:	0800abd9 	.word	0x0800abd9
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab7c:	f7fb fe1c 	bl	80067b8 <HAL_RCC_GetPCLK1Freq>
 800ab80:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ab82:	e033      	b.n	800abec <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab84:	f7fb fe2e 	bl	80067e4 <HAL_RCC_GetPCLK2Freq>
 800ab88:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ab8a:	e02f      	b.n	800abec <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab8c:	f107 0314 	add.w	r3, r7, #20
 800ab90:	4618      	mov	r0, r3
 800ab92:	f7fc ffb9 	bl	8007b08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ab96:	69bb      	ldr	r3, [r7, #24]
 800ab98:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab9a:	e027      	b.n	800abec <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab9c:	f107 0308 	add.w	r3, r7, #8
 800aba0:	4618      	mov	r0, r3
 800aba2:	f7fd f8fd 	bl	8007da0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800abaa:	e01f      	b.n	800abec <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abac:	4b2c      	ldr	r3, [pc, #176]	; (800ac60 <UART_SetConfig+0xb50>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f003 0320 	and.w	r3, r3, #32
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d009      	beq.n	800abcc <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800abb8:	4b29      	ldr	r3, [pc, #164]	; (800ac60 <UART_SetConfig+0xb50>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	08db      	lsrs	r3, r3, #3
 800abbe:	f003 0303 	and.w	r3, r3, #3
 800abc2:	4a28      	ldr	r2, [pc, #160]	; (800ac64 <UART_SetConfig+0xb54>)
 800abc4:	fa22 f303 	lsr.w	r3, r2, r3
 800abc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800abca:	e00f      	b.n	800abec <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800abcc:	4b25      	ldr	r3, [pc, #148]	; (800ac64 <UART_SetConfig+0xb54>)
 800abce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800abd0:	e00c      	b.n	800abec <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800abd2:	4b25      	ldr	r3, [pc, #148]	; (800ac68 <UART_SetConfig+0xb58>)
 800abd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800abd6:	e009      	b.n	800abec <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800abd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800abdc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800abde:	e005      	b.n	800abec <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800abe0:	2300      	movs	r3, #0
 800abe2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800abe4:	2301      	movs	r3, #1
 800abe6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800abea:	bf00      	nop
    }

    if (pclk != 0U)
 800abec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d021      	beq.n	800ac36 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abf6:	4a1d      	ldr	r2, [pc, #116]	; (800ac6c <UART_SetConfig+0xb5c>)
 800abf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800abfc:	461a      	mov	r2, r3
 800abfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac00:	fbb3 f2f2 	udiv	r2, r3, r2
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	085b      	lsrs	r3, r3, #1
 800ac0a:	441a      	add	r2, r3
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac14:	b29b      	uxth	r3, r3
 800ac16:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac1a:	2b0f      	cmp	r3, #15
 800ac1c:	d908      	bls.n	800ac30 <UART_SetConfig+0xb20>
 800ac1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac24:	d204      	bcs.n	800ac30 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac2c:	60da      	str	r2, [r3, #12]
 800ac2e:	e002      	b.n	800ac36 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800ac30:	2301      	movs	r3, #1
 800ac32:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2201      	movs	r2, #1
 800ac3a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2201      	movs	r2, #1
 800ac42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800ac52:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3738      	adds	r7, #56	; 0x38
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800ac60:	58024400 	.word	0x58024400
 800ac64:	03d09000 	.word	0x03d09000
 800ac68:	003d0900 	.word	0x003d0900
 800ac6c:	0800fe1c 	.word	0x0800fe1c

0800ac70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ac70:	b480      	push	{r7}
 800ac72:	b083      	sub	sp, #12
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac7c:	f003 0301 	and.w	r3, r3, #1
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d00a      	beq.n	800ac9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	685b      	ldr	r3, [r3, #4]
 800ac8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	430a      	orrs	r2, r1
 800ac98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac9e:	f003 0302 	and.w	r3, r3, #2
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d00a      	beq.n	800acbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	685b      	ldr	r3, [r3, #4]
 800acac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	430a      	orrs	r2, r1
 800acba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acc0:	f003 0304 	and.w	r3, r3, #4
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d00a      	beq.n	800acde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	430a      	orrs	r2, r1
 800acdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ace2:	f003 0308 	and.w	r3, r3, #8
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d00a      	beq.n	800ad00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	430a      	orrs	r2, r1
 800acfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad04:	f003 0310 	and.w	r3, r3, #16
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d00a      	beq.n	800ad22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	689b      	ldr	r3, [r3, #8]
 800ad12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	430a      	orrs	r2, r1
 800ad20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad26:	f003 0320 	and.w	r3, r3, #32
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d00a      	beq.n	800ad44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	689b      	ldr	r3, [r3, #8]
 800ad34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	430a      	orrs	r2, r1
 800ad42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d01a      	beq.n	800ad86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	685b      	ldr	r3, [r3, #4]
 800ad56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	430a      	orrs	r2, r1
 800ad64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad6e:	d10a      	bne.n	800ad86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	685b      	ldr	r3, [r3, #4]
 800ad76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	430a      	orrs	r2, r1
 800ad84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d00a      	beq.n	800ada8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	430a      	orrs	r2, r1
 800ada6:	605a      	str	r2, [r3, #4]
  }
}
 800ada8:	bf00      	nop
 800adaa:	370c      	adds	r7, #12
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr

0800adb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b086      	sub	sp, #24
 800adb8:	af02      	add	r7, sp, #8
 800adba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2200      	movs	r2, #0
 800adc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800adc4:	f7f6 fbe4 	bl	8001590 <HAL_GetTick>
 800adc8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f003 0308 	and.w	r3, r3, #8
 800add4:	2b08      	cmp	r3, #8
 800add6:	d10e      	bne.n	800adf6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800add8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800addc:	9300      	str	r3, [sp, #0]
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	2200      	movs	r2, #0
 800ade2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f000 f82c 	bl	800ae44 <UART_WaitOnFlagUntilTimeout>
 800adec:	4603      	mov	r3, r0
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d001      	beq.n	800adf6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800adf2:	2303      	movs	r3, #3
 800adf4:	e022      	b.n	800ae3c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	f003 0304 	and.w	r3, r3, #4
 800ae00:	2b04      	cmp	r3, #4
 800ae02:	d10e      	bne.n	800ae22 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ae08:	9300      	str	r3, [sp, #0]
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f000 f816 	bl	800ae44 <UART_WaitOnFlagUntilTimeout>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d001      	beq.n	800ae22 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae1e:	2303      	movs	r3, #3
 800ae20:	e00c      	b.n	800ae3c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2220      	movs	r2, #32
 800ae26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2220      	movs	r2, #32
 800ae2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2200      	movs	r2, #0
 800ae36:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ae3a:	2300      	movs	r3, #0
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3710      	adds	r7, #16
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}

0800ae44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b084      	sub	sp, #16
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	60f8      	str	r0, [r7, #12]
 800ae4c:	60b9      	str	r1, [r7, #8]
 800ae4e:	603b      	str	r3, [r7, #0]
 800ae50:	4613      	mov	r3, r2
 800ae52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae54:	e062      	b.n	800af1c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae56:	69bb      	ldr	r3, [r7, #24]
 800ae58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae5c:	d05e      	beq.n	800af1c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae5e:	f7f6 fb97 	bl	8001590 <HAL_GetTick>
 800ae62:	4602      	mov	r2, r0
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	1ad3      	subs	r3, r2, r3
 800ae68:	69ba      	ldr	r2, [r7, #24]
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	d302      	bcc.n	800ae74 <UART_WaitOnFlagUntilTimeout+0x30>
 800ae6e:	69bb      	ldr	r3, [r7, #24]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d11d      	bne.n	800aeb0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	681a      	ldr	r2, [r3, #0]
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ae82:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	689a      	ldr	r2, [r3, #8]
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f022 0201 	bic.w	r2, r2, #1
 800ae92:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	2220      	movs	r2, #32
 800ae98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	2220      	movs	r2, #32
 800aea0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	2200      	movs	r2, #0
 800aea8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800aeac:	2303      	movs	r3, #3
 800aeae:	e045      	b.n	800af3c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f003 0304 	and.w	r3, r3, #4
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d02e      	beq.n	800af1c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	69db      	ldr	r3, [r3, #28]
 800aec4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aec8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aecc:	d126      	bne.n	800af1c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aed6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	681a      	ldr	r2, [r3, #0]
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800aee6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	689a      	ldr	r2, [r3, #8]
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f022 0201 	bic.w	r2, r2, #1
 800aef6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2220      	movs	r2, #32
 800aefc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	2220      	movs	r2, #32
 800af04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	2220      	movs	r2, #32
 800af0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	2200      	movs	r2, #0
 800af14:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800af18:	2303      	movs	r3, #3
 800af1a:	e00f      	b.n	800af3c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	69da      	ldr	r2, [r3, #28]
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	4013      	ands	r3, r2
 800af26:	68ba      	ldr	r2, [r7, #8]
 800af28:	429a      	cmp	r2, r3
 800af2a:	bf0c      	ite	eq
 800af2c:	2301      	moveq	r3, #1
 800af2e:	2300      	movne	r3, #0
 800af30:	b2db      	uxtb	r3, r3
 800af32:	461a      	mov	r2, r3
 800af34:	79fb      	ldrb	r3, [r7, #7]
 800af36:	429a      	cmp	r2, r3
 800af38:	d08d      	beq.n	800ae56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800af3a:	2300      	movs	r3, #0
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3710      	adds	r7, #16
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}

0800af44 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800af44:	b480      	push	{r7}
 800af46:	b083      	sub	sp, #12
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	681a      	ldr	r2, [r3, #0]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800af5a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	689a      	ldr	r2, [r3, #8]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800af6a:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2220      	movs	r2, #32
 800af70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800af74:	bf00      	nop
 800af76:	370c      	adds	r7, #12
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr

0800af80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800af80:	b480      	push	{r7}
 800af82:	b083      	sub	sp, #12
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	681a      	ldr	r2, [r3, #0]
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800af96:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	6899      	ldr	r1, [r3, #8]
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681a      	ldr	r2, [r3, #0]
 800afa2:	4b08      	ldr	r3, [pc, #32]	; (800afc4 <UART_EndRxTransfer+0x44>)
 800afa4:	400b      	ands	r3, r1
 800afa6:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2220      	movs	r2, #32
 800afac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2200      	movs	r2, #0
 800afb4:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800afb6:	bf00      	nop
 800afb8:	370c      	adds	r7, #12
 800afba:	46bd      	mov	sp, r7
 800afbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc0:	4770      	bx	lr
 800afc2:	bf00      	nop
 800afc4:	effffffe 	.word	0xeffffffe

0800afc8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b084      	sub	sp, #16
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afd4:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	69db      	ldr	r3, [r3, #28]
 800afda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afde:	d01f      	beq.n	800b020 <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2200      	movs	r2, #0
 800afe4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	681a      	ldr	r2, [r3, #0]
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aff6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	689a      	ldr	r2, [r3, #8]
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f022 0201 	bic.w	r2, r2, #1
 800b006:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	689a      	ldr	r2, [r3, #8]
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b016:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	2220      	movs	r2, #32
 800b01c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800b020:	68f8      	ldr	r0, [r7, #12]
 800b022:	f7f5 fed5 	bl	8000dd0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b026:	bf00      	nop
 800b028:	3710      	adds	r7, #16
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}

0800b02e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b02e:	b580      	push	{r7, lr}
 800b030:	b084      	sub	sp, #16
 800b032:	af00      	add	r7, sp, #0
 800b034:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b03a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800b03c:	68f8      	ldr	r0, [r7, #12]
 800b03e:	f7ff f853 	bl	800a0e8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b042:	bf00      	nop
 800b044:	3710      	adds	r7, #16
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}

0800b04a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b04a:	b580      	push	{r7, lr}
 800b04c:	b086      	sub	sp, #24
 800b04e:	af00      	add	r7, sp, #0
 800b050:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b056:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b05e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b066:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	689b      	ldr	r3, [r3, #8]
 800b06e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b072:	2b80      	cmp	r3, #128	; 0x80
 800b074:	d109      	bne.n	800b08a <UART_DMAError+0x40>
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	2b21      	cmp	r3, #33	; 0x21
 800b07a:	d106      	bne.n	800b08a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b07c:	697b      	ldr	r3, [r7, #20]
 800b07e:	2200      	movs	r2, #0
 800b080:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800b084:	6978      	ldr	r0, [r7, #20]
 800b086:	f7ff ff5d 	bl	800af44 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	689b      	ldr	r3, [r3, #8]
 800b090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b094:	2b40      	cmp	r3, #64	; 0x40
 800b096:	d109      	bne.n	800b0ac <UART_DMAError+0x62>
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	2b22      	cmp	r3, #34	; 0x22
 800b09c:	d106      	bne.n	800b0ac <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800b0a6:	6978      	ldr	r0, [r7, #20]
 800b0a8:	f7ff ff6a 	bl	800af80 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0b2:	f043 0210 	orr.w	r2, r3, #16
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b0bc:	6978      	ldr	r0, [r7, #20]
 800b0be:	f7ff f81d 	bl	800a0fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b0c2:	bf00      	nop
 800b0c4:	3718      	adds	r7, #24
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}

0800b0ca <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b0ca:	b480      	push	{r7}
 800b0cc:	b085      	sub	sp, #20
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b0d8:	2b01      	cmp	r3, #1
 800b0da:	d101      	bne.n	800b0e0 <HAL_UARTEx_DisableFifoMode+0x16>
 800b0dc:	2302      	movs	r3, #2
 800b0de:	e027      	b.n	800b130 <HAL_UARTEx_DisableFifoMode+0x66>
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2201      	movs	r2, #1
 800b0e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2224      	movs	r2, #36	; 0x24
 800b0ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	681a      	ldr	r2, [r3, #0]
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f022 0201 	bic.w	r2, r2, #1
 800b106:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b10e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2200      	movs	r2, #0
 800b114:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	68fa      	ldr	r2, [r7, #12]
 800b11c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2220      	movs	r2, #32
 800b122:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2200      	movs	r2, #0
 800b12a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b12e:	2300      	movs	r3, #0
}
 800b130:	4618      	mov	r0, r3
 800b132:	3714      	adds	r7, #20
 800b134:	46bd      	mov	sp, r7
 800b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13a:	4770      	bx	lr

0800b13c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b084      	sub	sp, #16
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b14c:	2b01      	cmp	r3, #1
 800b14e:	d101      	bne.n	800b154 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b150:	2302      	movs	r3, #2
 800b152:	e02d      	b.n	800b1b0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2201      	movs	r2, #1
 800b158:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2224      	movs	r2, #36	; 0x24
 800b160:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	681a      	ldr	r2, [r3, #0]
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f022 0201 	bic.w	r2, r2, #1
 800b17a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	689b      	ldr	r3, [r3, #8]
 800b182:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	683a      	ldr	r2, [r7, #0]
 800b18c:	430a      	orrs	r2, r1
 800b18e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f000 f84f 	bl	800b234 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	68fa      	ldr	r2, [r7, #12]
 800b19c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2220      	movs	r2, #32
 800b1a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b1ae:	2300      	movs	r3, #0
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3710      	adds	r7, #16
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}

0800b1b8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b084      	sub	sp, #16
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b1c8:	2b01      	cmp	r3, #1
 800b1ca:	d101      	bne.n	800b1d0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b1cc:	2302      	movs	r3, #2
 800b1ce:	e02d      	b.n	800b22c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2224      	movs	r2, #36	; 0x24
 800b1dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	681a      	ldr	r2, [r3, #0]
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f022 0201 	bic.w	r2, r2, #1
 800b1f6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	689b      	ldr	r3, [r3, #8]
 800b1fe:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	683a      	ldr	r2, [r7, #0]
 800b208:	430a      	orrs	r2, r1
 800b20a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f000 f811 	bl	800b234 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	68fa      	ldr	r2, [r7, #12]
 800b218:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2220      	movs	r2, #32
 800b21e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2200      	movs	r2, #0
 800b226:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b22a:	2300      	movs	r3, #0
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3710      	adds	r7, #16
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}

0800b234 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b234:	b480      	push	{r7}
 800b236:	b089      	sub	sp, #36	; 0x24
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800b23c:	4a2f      	ldr	r2, [pc, #188]	; (800b2fc <UARTEx_SetNbDataToProcess+0xc8>)
 800b23e:	f107 0314 	add.w	r3, r7, #20
 800b242:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b246:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800b24a:	4a2d      	ldr	r2, [pc, #180]	; (800b300 <UARTEx_SetNbDataToProcess+0xcc>)
 800b24c:	f107 030c 	add.w	r3, r7, #12
 800b250:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b254:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d108      	bne.n	800b272 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2201      	movs	r2, #1
 800b264:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2201      	movs	r2, #1
 800b26c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b270:	e03d      	b.n	800b2ee <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b272:	2310      	movs	r3, #16
 800b274:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b276:	2310      	movs	r3, #16
 800b278:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	689b      	ldr	r3, [r3, #8]
 800b280:	0e5b      	lsrs	r3, r3, #25
 800b282:	b2db      	uxtb	r3, r3
 800b284:	f003 0307 	and.w	r3, r3, #7
 800b288:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	689b      	ldr	r3, [r3, #8]
 800b290:	0f5b      	lsrs	r3, r3, #29
 800b292:	b2db      	uxtb	r3, r3
 800b294:	f003 0307 	and.w	r3, r3, #7
 800b298:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800b29a:	7fbb      	ldrb	r3, [r7, #30]
 800b29c:	7f3a      	ldrb	r2, [r7, #28]
 800b29e:	f107 0120 	add.w	r1, r7, #32
 800b2a2:	440a      	add	r2, r1
 800b2a4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800b2a8:	fb02 f303 	mul.w	r3, r2, r3
 800b2ac:	7f3a      	ldrb	r2, [r7, #28]
 800b2ae:	f107 0120 	add.w	r1, r7, #32
 800b2b2:	440a      	add	r2, r1
 800b2b4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800b2b8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b2bc:	b29a      	uxth	r2, r3
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800b2c4:	7ffb      	ldrb	r3, [r7, #31]
 800b2c6:	7f7a      	ldrb	r2, [r7, #29]
 800b2c8:	f107 0120 	add.w	r1, r7, #32
 800b2cc:	440a      	add	r2, r1
 800b2ce:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800b2d2:	fb02 f303 	mul.w	r3, r2, r3
 800b2d6:	7f7a      	ldrb	r2, [r7, #29]
 800b2d8:	f107 0120 	add.w	r1, r7, #32
 800b2dc:	440a      	add	r2, r1
 800b2de:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800b2e2:	fb93 f3f2 	sdiv	r3, r3, r2
 800b2e6:	b29a      	uxth	r2, r3
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b2ee:	bf00      	nop
 800b2f0:	3724      	adds	r7, #36	; 0x24
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f8:	4770      	bx	lr
 800b2fa:	bf00      	nop
 800b2fc:	0800fdac 	.word	0x0800fdac
 800b300:	0800fdb4 	.word	0x0800fdb4

0800b304 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b304:	b084      	sub	sp, #16
 800b306:	b480      	push	{r7}
 800b308:	b085      	sub	sp, #20
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	6078      	str	r0, [r7, #4]
 800b30e:	f107 001c 	add.w	r0, r7, #28
 800b312:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b316:	2300      	movs	r3, #0
 800b318:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b31a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800b31c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b31e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800b322:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b324:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800b326:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800b32a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b32c:	68fa      	ldr	r2, [r7, #12]
 800b32e:	4313      	orrs	r3, r2
 800b330:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	685a      	ldr	r2, [r3, #4]
 800b336:	4b07      	ldr	r3, [pc, #28]	; (800b354 <SDMMC_Init+0x50>)
 800b338:	4013      	ands	r3, r2
 800b33a:	68fa      	ldr	r2, [r7, #12]
 800b33c:	431a      	orrs	r2, r3
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b342:	2300      	movs	r3, #0
}
 800b344:	4618      	mov	r0, r3
 800b346:	3714      	adds	r7, #20
 800b348:	46bd      	mov	sp, r7
 800b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34e:	b004      	add	sp, #16
 800b350:	4770      	bx	lr
 800b352:	bf00      	nop
 800b354:	ffc02c00 	.word	0xffc02c00

0800b358 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b358:	b480      	push	{r7}
 800b35a:	b083      	sub	sp, #12
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b366:	4618      	mov	r0, r3
 800b368:	370c      	adds	r7, #12
 800b36a:	46bd      	mov	sp, r7
 800b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b370:	4770      	bx	lr

0800b372 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b372:	b480      	push	{r7}
 800b374:	b083      	sub	sp, #12
 800b376:	af00      	add	r7, sp, #0
 800b378:	6078      	str	r0, [r7, #4]
 800b37a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	681a      	ldr	r2, [r3, #0]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b386:	2300      	movs	r3, #0
}
 800b388:	4618      	mov	r0, r3
 800b38a:	370c      	adds	r7, #12
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr

0800b394 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b394:	b480      	push	{r7}
 800b396:	b083      	sub	sp, #12
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f043 0203 	orr.w	r2, r3, #3
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b3a8:	2300      	movs	r3, #0
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	370c      	adds	r7, #12
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b4:	4770      	bx	lr

0800b3b6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b3b6:	b480      	push	{r7}
 800b3b8:	b083      	sub	sp, #12
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f003 0303 	and.w	r3, r3, #3
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	370c      	adds	r7, #12
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d0:	4770      	bx	lr
	...

0800b3d4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b085      	sub	sp, #20
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	681a      	ldr	r2, [r3, #0]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b3f2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b3f8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b3fe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b400:	68fa      	ldr	r2, [r7, #12]
 800b402:	4313      	orrs	r3, r2
 800b404:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	68da      	ldr	r2, [r3, #12]
 800b40a:	4b06      	ldr	r3, [pc, #24]	; (800b424 <SDMMC_SendCommand+0x50>)
 800b40c:	4013      	ands	r3, r2
 800b40e:	68fa      	ldr	r2, [r7, #12]
 800b410:	431a      	orrs	r2, r3
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b416:	2300      	movs	r3, #0
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3714      	adds	r7, #20
 800b41c:	46bd      	mov	sp, r7
 800b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b422:	4770      	bx	lr
 800b424:	fffee0c0 	.word	0xfffee0c0

0800b428 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b428:	b480      	push	{r7}
 800b42a:	b083      	sub	sp, #12
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	691b      	ldr	r3, [r3, #16]
 800b434:	b2db      	uxtb	r3, r3
}
 800b436:	4618      	mov	r0, r3
 800b438:	370c      	adds	r7, #12
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr

0800b442 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b442:	b480      	push	{r7}
 800b444:	b085      	sub	sp, #20
 800b446:	af00      	add	r7, sp, #0
 800b448:	6078      	str	r0, [r7, #4]
 800b44a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	3314      	adds	r3, #20
 800b450:	461a      	mov	r2, r3
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	4413      	add	r3, r2
 800b456:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3714      	adds	r7, #20
 800b460:	46bd      	mov	sp, r7
 800b462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b466:	4770      	bx	lr

0800b468 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b468:	b480      	push	{r7}
 800b46a:	b085      	sub	sp, #20
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b472:	2300      	movs	r3, #0
 800b474:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	681a      	ldr	r2, [r3, #0]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	685a      	ldr	r2, [r3, #4]
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b48e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b494:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b49a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b49c:	68fa      	ldr	r2, [r7, #12]
 800b49e:	4313      	orrs	r3, r2
 800b4a0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	431a      	orrs	r2, r3
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b4b2:	2300      	movs	r3, #0

}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3714      	adds	r7, #20
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4be:	4770      	bx	lr

0800b4c0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b088      	sub	sp, #32
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
 800b4c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b4ce:	2310      	movs	r3, #16
 800b4d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4e2:	f107 0308 	add.w	r3, r7, #8
 800b4e6:	4619      	mov	r1, r3
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f7ff ff73 	bl	800b3d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b4ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4f2:	2110      	movs	r1, #16
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f000 faaf 	bl	800ba58 <SDMMC_GetCmdResp1>
 800b4fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4fc:	69fb      	ldr	r3, [r7, #28]
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3720      	adds	r7, #32
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}

0800b506 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b506:	b580      	push	{r7, lr}
 800b508:	b088      	sub	sp, #32
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	6078      	str	r0, [r7, #4]
 800b50e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b514:	2311      	movs	r3, #17
 800b516:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b518:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b51c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b51e:	2300      	movs	r3, #0
 800b520:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b522:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b526:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b528:	f107 0308 	add.w	r3, r7, #8
 800b52c:	4619      	mov	r1, r3
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f7ff ff50 	bl	800b3d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b534:	f241 3288 	movw	r2, #5000	; 0x1388
 800b538:	2111      	movs	r1, #17
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f000 fa8c 	bl	800ba58 <SDMMC_GetCmdResp1>
 800b540:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b542:	69fb      	ldr	r3, [r7, #28]
}
 800b544:	4618      	mov	r0, r3
 800b546:	3720      	adds	r7, #32
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}

0800b54c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b088      	sub	sp, #32
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
 800b554:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b55a:	2312      	movs	r3, #18
 800b55c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b55e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b562:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b564:	2300      	movs	r3, #0
 800b566:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b568:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b56c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b56e:	f107 0308 	add.w	r3, r7, #8
 800b572:	4619      	mov	r1, r3
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f7ff ff2d 	bl	800b3d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b57a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b57e:	2112      	movs	r1, #18
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f000 fa69 	bl	800ba58 <SDMMC_GetCmdResp1>
 800b586:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b588:	69fb      	ldr	r3, [r7, #28]
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3720      	adds	r7, #32
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}

0800b592 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b592:	b580      	push	{r7, lr}
 800b594:	b088      	sub	sp, #32
 800b596:	af00      	add	r7, sp, #0
 800b598:	6078      	str	r0, [r7, #4]
 800b59a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b5a0:	2318      	movs	r3, #24
 800b5a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5b4:	f107 0308 	add.w	r3, r7, #8
 800b5b8:	4619      	mov	r1, r3
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f7ff ff0a 	bl	800b3d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b5c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5c4:	2118      	movs	r1, #24
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f000 fa46 	bl	800ba58 <SDMMC_GetCmdResp1>
 800b5cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5ce:	69fb      	ldr	r3, [r7, #28]
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	3720      	adds	r7, #32
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}

0800b5d8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b088      	sub	sp, #32
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b5e6:	2319      	movs	r3, #25
 800b5e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5fa:	f107 0308 	add.w	r3, r7, #8
 800b5fe:	4619      	mov	r1, r3
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f7ff fee7 	bl	800b3d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b606:	f241 3288 	movw	r2, #5000	; 0x1388
 800b60a:	2119      	movs	r1, #25
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f000 fa23 	bl	800ba58 <SDMMC_GetCmdResp1>
 800b612:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b614:	69fb      	ldr	r3, [r7, #28]
}
 800b616:	4618      	mov	r0, r3
 800b618:	3720      	adds	r7, #32
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}
	...

0800b620 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b088      	sub	sp, #32
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b628:	2300      	movs	r3, #0
 800b62a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b62c:	230c      	movs	r3, #12
 800b62e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b630:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b634:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b636:	2300      	movs	r3, #0
 800b638:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b63a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b63e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	68db      	ldr	r3, [r3, #12]
 800b644:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	68db      	ldr	r3, [r3, #12]
 800b650:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b658:	f107 0308 	add.w	r3, r7, #8
 800b65c:	4619      	mov	r1, r3
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f7ff feb8 	bl	800b3d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b664:	4a0b      	ldr	r2, [pc, #44]	; (800b694 <SDMMC_CmdStopTransfer+0x74>)
 800b666:	210c      	movs	r1, #12
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f000 f9f5 	bl	800ba58 <SDMMC_GetCmdResp1>
 800b66e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	68db      	ldr	r3, [r3, #12]
 800b674:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800b67c:	69fb      	ldr	r3, [r7, #28]
 800b67e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b682:	d101      	bne.n	800b688 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800b684:	2300      	movs	r3, #0
 800b686:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800b688:	69fb      	ldr	r3, [r7, #28]
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3720      	adds	r7, #32
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}
 800b692:	bf00      	nop
 800b694:	05f5e100 	.word	0x05f5e100

0800b698 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b08a      	sub	sp, #40	; 0x28
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	60f8      	str	r0, [r7, #12]
 800b6a0:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b6a8:	2307      	movs	r3, #7
 800b6aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6b0:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6ba:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6bc:	f107 0310 	add.w	r3, r7, #16
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	68f8      	ldr	r0, [r7, #12]
 800b6c4:	f7ff fe86 	bl	800b3d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b6c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6cc:	2107      	movs	r1, #7
 800b6ce:	68f8      	ldr	r0, [r7, #12]
 800b6d0:	f000 f9c2 	bl	800ba58 <SDMMC_GetCmdResp1>
 800b6d4:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	3728      	adds	r7, #40	; 0x28
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}

0800b6e0 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b088      	sub	sp, #32
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6fe:	f107 0308 	add.w	r3, r7, #8
 800b702:	4619      	mov	r1, r3
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f7ff fe65 	bl	800b3d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f000 f976 	bl	800b9fc <SDMMC_GetCmdError>
 800b710:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b712:	69fb      	ldr	r3, [r7, #28]
}
 800b714:	4618      	mov	r0, r3
 800b716:	3720      	adds	r7, #32
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}

0800b71c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b088      	sub	sp, #32
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b724:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b728:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b72a:	2308      	movs	r3, #8
 800b72c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b72e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b732:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b734:	2300      	movs	r3, #0
 800b736:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b738:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b73c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b73e:	f107 0308 	add.w	r3, r7, #8
 800b742:	4619      	mov	r1, r3
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f7ff fe45 	bl	800b3d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f000 fb78 	bl	800be40 <SDMMC_GetCmdResp7>
 800b750:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b752:	69fb      	ldr	r3, [r7, #28]
}
 800b754:	4618      	mov	r0, r3
 800b756:	3720      	adds	r7, #32
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}

0800b75c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b088      	sub	sp, #32
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
 800b764:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b76a:	2337      	movs	r3, #55	; 0x37
 800b76c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b76e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b772:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b774:	2300      	movs	r3, #0
 800b776:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b77c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b77e:	f107 0308 	add.w	r3, r7, #8
 800b782:	4619      	mov	r1, r3
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f7ff fe25 	bl	800b3d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b78a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b78e:	2137      	movs	r1, #55	; 0x37
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f000 f961 	bl	800ba58 <SDMMC_GetCmdResp1>
 800b796:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b798:	69fb      	ldr	r3, [r7, #28]
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3720      	adds	r7, #32
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}

0800b7a2 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b7a2:	b580      	push	{r7, lr}
 800b7a4:	b088      	sub	sp, #32
 800b7a6:	af00      	add	r7, sp, #0
 800b7a8:	6078      	str	r0, [r7, #4]
 800b7aa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b7b0:	2329      	movs	r3, #41	; 0x29
 800b7b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7c4:	f107 0308 	add.w	r3, r7, #8
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f7ff fe02 	bl	800b3d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f000 fa7d 	bl	800bcd0 <SDMMC_GetCmdResp3>
 800b7d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7d8:	69fb      	ldr	r3, [r7, #28]
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3720      	adds	r7, #32
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}

0800b7e2 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b7e2:	b580      	push	{r7, lr}
 800b7e4:	b088      	sub	sp, #32
 800b7e6:	af00      	add	r7, sp, #0
 800b7e8:	6078      	str	r0, [r7, #4]
 800b7ea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b7f0:	2306      	movs	r3, #6
 800b7f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b802:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b804:	f107 0308 	add.w	r3, r7, #8
 800b808:	4619      	mov	r1, r3
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f7ff fde2 	bl	800b3d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b810:	f241 3288 	movw	r2, #5000	; 0x1388
 800b814:	2106      	movs	r1, #6
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f000 f91e 	bl	800ba58 <SDMMC_GetCmdResp1>
 800b81c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b81e:	69fb      	ldr	r3, [r7, #28]
}
 800b820:	4618      	mov	r0, r3
 800b822:	3720      	adds	r7, #32
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}

0800b828 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b088      	sub	sp, #32
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b830:	2300      	movs	r3, #0
 800b832:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b834:	2333      	movs	r3, #51	; 0x33
 800b836:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b838:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b83c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b83e:	2300      	movs	r3, #0
 800b840:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b842:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b846:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b848:	f107 0308 	add.w	r3, r7, #8
 800b84c:	4619      	mov	r1, r3
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f7ff fdc0 	bl	800b3d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b854:	f241 3288 	movw	r2, #5000	; 0x1388
 800b858:	2133      	movs	r1, #51	; 0x33
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f000 f8fc 	bl	800ba58 <SDMMC_GetCmdResp1>
 800b860:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b862:	69fb      	ldr	r3, [r7, #28]
}
 800b864:	4618      	mov	r0, r3
 800b866:	3720      	adds	r7, #32
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}

0800b86c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b088      	sub	sp, #32
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b874:	2300      	movs	r3, #0
 800b876:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b878:	2302      	movs	r3, #2
 800b87a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b87c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b880:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b882:	2300      	movs	r3, #0
 800b884:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b886:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b88a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b88c:	f107 0308 	add.w	r3, r7, #8
 800b890:	4619      	mov	r1, r3
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f7ff fd9e 	bl	800b3d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f000 f9cf 	bl	800bc3c <SDMMC_GetCmdResp2>
 800b89e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8a0:	69fb      	ldr	r3, [r7, #28]
}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	3720      	adds	r7, #32
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}

0800b8aa <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b8aa:	b580      	push	{r7, lr}
 800b8ac:	b088      	sub	sp, #32
 800b8ae:	af00      	add	r7, sp, #0
 800b8b0:	6078      	str	r0, [r7, #4]
 800b8b2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b8b8:	2309      	movs	r3, #9
 800b8ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b8bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b8c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b8ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8cc:	f107 0308 	add.w	r3, r7, #8
 800b8d0:	4619      	mov	r1, r3
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f7ff fd7e 	bl	800b3d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f000 f9af 	bl	800bc3c <SDMMC_GetCmdResp2>
 800b8de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8e0:	69fb      	ldr	r3, [r7, #28]
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	3720      	adds	r7, #32
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}

0800b8ea <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b8ea:	b580      	push	{r7, lr}
 800b8ec:	b088      	sub	sp, #32
 800b8ee:	af00      	add	r7, sp, #0
 800b8f0:	6078      	str	r0, [r7, #4]
 800b8f2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b8f8:	2303      	movs	r3, #3
 800b8fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b8fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b900:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b902:	2300      	movs	r3, #0
 800b904:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b906:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b90a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b90c:	f107 0308 	add.w	r3, r7, #8
 800b910:	4619      	mov	r1, r3
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f7ff fd5e 	bl	800b3d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b918:	683a      	ldr	r2, [r7, #0]
 800b91a:	2103      	movs	r1, #3
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f000 fa17 	bl	800bd50 <SDMMC_GetCmdResp6>
 800b922:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b924:	69fb      	ldr	r3, [r7, #28]
}
 800b926:	4618      	mov	r0, r3
 800b928:	3720      	adds	r7, #32
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}

0800b92e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b92e:	b580      	push	{r7, lr}
 800b930:	b088      	sub	sp, #32
 800b932:	af00      	add	r7, sp, #0
 800b934:	6078      	str	r0, [r7, #4]
 800b936:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b93c:	230d      	movs	r3, #13
 800b93e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b940:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b944:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b946:	2300      	movs	r3, #0
 800b948:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b94a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b94e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b950:	f107 0308 	add.w	r3, r7, #8
 800b954:	4619      	mov	r1, r3
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f7ff fd3c 	bl	800b3d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b95c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b960:	210d      	movs	r1, #13
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f000 f878 	bl	800ba58 <SDMMC_GetCmdResp1>
 800b968:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b96a:	69fb      	ldr	r3, [r7, #28]
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3720      	adds	r7, #32
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}

0800b974 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b088      	sub	sp, #32
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b97c:	2300      	movs	r3, #0
 800b97e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b980:	230d      	movs	r3, #13
 800b982:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b984:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b988:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b98a:	2300      	movs	r3, #0
 800b98c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b98e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b992:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b994:	f107 0308 	add.w	r3, r7, #8
 800b998:	4619      	mov	r1, r3
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f7ff fd1a 	bl	800b3d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b9a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9a4:	210d      	movs	r1, #13
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f000 f856 	bl	800ba58 <SDMMC_GetCmdResp1>
 800b9ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9ae:	69fb      	ldr	r3, [r7, #28]
}
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	3720      	adds	r7, #32
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}

0800b9b8 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b088      	sub	sp, #32
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800b9c4:	230b      	movs	r3, #11
 800b9c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b9c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b9cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b9d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b9d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b9d8:	f107 0308 	add.w	r3, r7, #8
 800b9dc:	4619      	mov	r1, r3
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f7ff fcf8 	bl	800b3d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800b9e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9e8:	210b      	movs	r1, #11
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f000 f834 	bl	800ba58 <SDMMC_GetCmdResp1>
 800b9f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9f2:	69fb      	ldr	r3, [r7, #28]
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3720      	adds	r7, #32
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}

0800b9fc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b085      	sub	sp, #20
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ba04:	4b11      	ldr	r3, [pc, #68]	; (800ba4c <SDMMC_GetCmdError+0x50>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	4a11      	ldr	r2, [pc, #68]	; (800ba50 <SDMMC_GetCmdError+0x54>)
 800ba0a:	fba2 2303 	umull	r2, r3, r2, r3
 800ba0e:	0a5b      	lsrs	r3, r3, #9
 800ba10:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba14:	fb02 f303 	mul.w	r3, r2, r3
 800ba18:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	1e5a      	subs	r2, r3, #1
 800ba1e:	60fa      	str	r2, [r7, #12]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d102      	bne.n	800ba2a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba28:	e009      	b.n	800ba3e <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d0f1      	beq.n	800ba1a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	4a06      	ldr	r2, [pc, #24]	; (800ba54 <SDMMC_GetCmdError+0x58>)
 800ba3a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800ba3c:	2300      	movs	r3, #0
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3714      	adds	r7, #20
 800ba42:	46bd      	mov	sp, r7
 800ba44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba48:	4770      	bx	lr
 800ba4a:	bf00      	nop
 800ba4c:	24000000 	.word	0x24000000
 800ba50:	10624dd3 	.word	0x10624dd3
 800ba54:	002000c5 	.word	0x002000c5

0800ba58 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b088      	sub	sp, #32
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	60f8      	str	r0, [r7, #12]
 800ba60:	460b      	mov	r3, r1
 800ba62:	607a      	str	r2, [r7, #4]
 800ba64:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ba66:	4b70      	ldr	r3, [pc, #448]	; (800bc28 <SDMMC_GetCmdResp1+0x1d0>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	4a70      	ldr	r2, [pc, #448]	; (800bc2c <SDMMC_GetCmdResp1+0x1d4>)
 800ba6c:	fba2 2303 	umull	r2, r3, r2, r3
 800ba70:	0a5a      	lsrs	r2, r3, #9
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	fb02 f303 	mul.w	r3, r2, r3
 800ba78:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ba7a:	69fb      	ldr	r3, [r7, #28]
 800ba7c:	1e5a      	subs	r2, r3, #1
 800ba7e:	61fa      	str	r2, [r7, #28]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d102      	bne.n	800ba8a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba88:	e0c9      	b.n	800bc1e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba8e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800ba90:	69ba      	ldr	r2, [r7, #24]
 800ba92:	4b67      	ldr	r3, [pc, #412]	; (800bc30 <SDMMC_GetCmdResp1+0x1d8>)
 800ba94:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d0ef      	beq.n	800ba7a <SDMMC_GetCmdResp1+0x22>
 800ba9a:	69bb      	ldr	r3, [r7, #24]
 800ba9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d1ea      	bne.n	800ba7a <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baa8:	f003 0304 	and.w	r3, r3, #4
 800baac:	2b00      	cmp	r3, #0
 800baae:	d004      	beq.n	800baba <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	2204      	movs	r2, #4
 800bab4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bab6:	2304      	movs	r3, #4
 800bab8:	e0b1      	b.n	800bc1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800babe:	f003 0301 	and.w	r3, r3, #1
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d004      	beq.n	800bad0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	2201      	movs	r2, #1
 800baca:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bacc:	2301      	movs	r3, #1
 800bace:	e0a6      	b.n	800bc1e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	4a58      	ldr	r2, [pc, #352]	; (800bc34 <SDMMC_GetCmdResp1+0x1dc>)
 800bad4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bad6:	68f8      	ldr	r0, [r7, #12]
 800bad8:	f7ff fca6 	bl	800b428 <SDMMC_GetCommandResponse>
 800badc:	4603      	mov	r3, r0
 800bade:	461a      	mov	r2, r3
 800bae0:	7afb      	ldrb	r3, [r7, #11]
 800bae2:	4293      	cmp	r3, r2
 800bae4:	d001      	beq.n	800baea <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bae6:	2301      	movs	r3, #1
 800bae8:	e099      	b.n	800bc1e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800baea:	2100      	movs	r1, #0
 800baec:	68f8      	ldr	r0, [r7, #12]
 800baee:	f7ff fca8 	bl	800b442 <SDMMC_GetResponse>
 800baf2:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800baf4:	697a      	ldr	r2, [r7, #20]
 800baf6:	4b50      	ldr	r3, [pc, #320]	; (800bc38 <SDMMC_GetCmdResp1+0x1e0>)
 800baf8:	4013      	ands	r3, r2
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d101      	bne.n	800bb02 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800bafe:	2300      	movs	r3, #0
 800bb00:	e08d      	b.n	800bc1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	da02      	bge.n	800bb0e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bb08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bb0c:	e087      	b.n	800bc1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d001      	beq.n	800bb1c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bb18:	2340      	movs	r3, #64	; 0x40
 800bb1a:	e080      	b.n	800bc1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bb1c:	697b      	ldr	r3, [r7, #20]
 800bb1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d001      	beq.n	800bb2a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bb26:	2380      	movs	r3, #128	; 0x80
 800bb28:	e079      	b.n	800bc1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d002      	beq.n	800bb3a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bb34:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb38:	e071      	b.n	800bc1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d002      	beq.n	800bb4a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bb44:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb48:	e069      	b.n	800bc1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d002      	beq.n	800bb5a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bb54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb58:	e061      	b.n	800bc1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bb5a:	697b      	ldr	r3, [r7, #20]
 800bb5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d002      	beq.n	800bb6a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bb64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bb68:	e059      	b.n	800bc1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d002      	beq.n	800bb7a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bb74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb78:	e051      	b.n	800bc1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d002      	beq.n	800bb8a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bb84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bb88:	e049      	b.n	800bc1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d002      	beq.n	800bb9a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bb94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bb98:	e041      	b.n	800bc1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d002      	beq.n	800bbaa <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800bba4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bba8:	e039      	b.n	800bc1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d002      	beq.n	800bbba <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bbb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bbb8:	e031      	b.n	800bc1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d002      	beq.n	800bbca <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bbc4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bbc8:	e029      	b.n	800bc1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bbca:	697b      	ldr	r3, [r7, #20]
 800bbcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d002      	beq.n	800bbda <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bbd4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bbd8:	e021      	b.n	800bc1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bbda:	697b      	ldr	r3, [r7, #20]
 800bbdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d002      	beq.n	800bbea <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bbe4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bbe8:	e019      	b.n	800bc1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d002      	beq.n	800bbfa <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bbf4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bbf8:	e011      	b.n	800bc1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bbfa:	697b      	ldr	r3, [r7, #20]
 800bbfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d002      	beq.n	800bc0a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800bc04:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bc08:	e009      	b.n	800bc1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	f003 0308 	and.w	r3, r3, #8
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d002      	beq.n	800bc1a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bc14:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800bc18:	e001      	b.n	800bc1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bc1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	3720      	adds	r7, #32
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}
 800bc26:	bf00      	nop
 800bc28:	24000000 	.word	0x24000000
 800bc2c:	10624dd3 	.word	0x10624dd3
 800bc30:	00200045 	.word	0x00200045
 800bc34:	002000c5 	.word	0x002000c5
 800bc38:	fdffe008 	.word	0xfdffe008

0800bc3c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b085      	sub	sp, #20
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bc44:	4b1f      	ldr	r3, [pc, #124]	; (800bcc4 <SDMMC_GetCmdResp2+0x88>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	4a1f      	ldr	r2, [pc, #124]	; (800bcc8 <SDMMC_GetCmdResp2+0x8c>)
 800bc4a:	fba2 2303 	umull	r2, r3, r2, r3
 800bc4e:	0a5b      	lsrs	r3, r3, #9
 800bc50:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc54:	fb02 f303 	mul.w	r3, r2, r3
 800bc58:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	1e5a      	subs	r2, r3, #1
 800bc5e:	60fa      	str	r2, [r7, #12]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d102      	bne.n	800bc6a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc64:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc68:	e026      	b.n	800bcb8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc6e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc70:	68bb      	ldr	r3, [r7, #8]
 800bc72:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d0ef      	beq.n	800bc5a <SDMMC_GetCmdResp2+0x1e>
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d1ea      	bne.n	800bc5a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc88:	f003 0304 	and.w	r3, r3, #4
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d004      	beq.n	800bc9a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2204      	movs	r2, #4
 800bc94:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bc96:	2304      	movs	r3, #4
 800bc98:	e00e      	b.n	800bcb8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc9e:	f003 0301 	and.w	r3, r3, #1
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d004      	beq.n	800bcb0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	2201      	movs	r2, #1
 800bcaa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bcac:	2301      	movs	r3, #1
 800bcae:	e003      	b.n	800bcb8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	4a06      	ldr	r2, [pc, #24]	; (800bccc <SDMMC_GetCmdResp2+0x90>)
 800bcb4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bcb6:	2300      	movs	r3, #0
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	3714      	adds	r7, #20
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc2:	4770      	bx	lr
 800bcc4:	24000000 	.word	0x24000000
 800bcc8:	10624dd3 	.word	0x10624dd3
 800bccc:	002000c5 	.word	0x002000c5

0800bcd0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	b085      	sub	sp, #20
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bcd8:	4b1a      	ldr	r3, [pc, #104]	; (800bd44 <SDMMC_GetCmdResp3+0x74>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	4a1a      	ldr	r2, [pc, #104]	; (800bd48 <SDMMC_GetCmdResp3+0x78>)
 800bcde:	fba2 2303 	umull	r2, r3, r2, r3
 800bce2:	0a5b      	lsrs	r3, r3, #9
 800bce4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bce8:	fb02 f303 	mul.w	r3, r2, r3
 800bcec:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	1e5a      	subs	r2, r3, #1
 800bcf2:	60fa      	str	r2, [r7, #12]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d102      	bne.n	800bcfe <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bcf8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bcfc:	e01b      	b.n	800bd36 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd02:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d0ef      	beq.n	800bcee <SDMMC_GetCmdResp3+0x1e>
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d1ea      	bne.n	800bcee <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd1c:	f003 0304 	and.w	r3, r3, #4
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d004      	beq.n	800bd2e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2204      	movs	r2, #4
 800bd28:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bd2a:	2304      	movs	r3, #4
 800bd2c:	e003      	b.n	800bd36 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	4a06      	ldr	r2, [pc, #24]	; (800bd4c <SDMMC_GetCmdResp3+0x7c>)
 800bd32:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bd34:	2300      	movs	r3, #0
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3714      	adds	r7, #20
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd40:	4770      	bx	lr
 800bd42:	bf00      	nop
 800bd44:	24000000 	.word	0x24000000
 800bd48:	10624dd3 	.word	0x10624dd3
 800bd4c:	002000c5 	.word	0x002000c5

0800bd50 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b088      	sub	sp, #32
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	60f8      	str	r0, [r7, #12]
 800bd58:	460b      	mov	r3, r1
 800bd5a:	607a      	str	r2, [r7, #4]
 800bd5c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bd5e:	4b35      	ldr	r3, [pc, #212]	; (800be34 <SDMMC_GetCmdResp6+0xe4>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	4a35      	ldr	r2, [pc, #212]	; (800be38 <SDMMC_GetCmdResp6+0xe8>)
 800bd64:	fba2 2303 	umull	r2, r3, r2, r3
 800bd68:	0a5b      	lsrs	r3, r3, #9
 800bd6a:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd6e:	fb02 f303 	mul.w	r3, r2, r3
 800bd72:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800bd74:	69fb      	ldr	r3, [r7, #28]
 800bd76:	1e5a      	subs	r2, r3, #1
 800bd78:	61fa      	str	r2, [r7, #28]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d102      	bne.n	800bd84 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd7e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd82:	e052      	b.n	800be2a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd88:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd8a:	69bb      	ldr	r3, [r7, #24]
 800bd8c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d0ef      	beq.n	800bd74 <SDMMC_GetCmdResp6+0x24>
 800bd94:	69bb      	ldr	r3, [r7, #24]
 800bd96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d1ea      	bne.n	800bd74 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bda2:	f003 0304 	and.w	r3, r3, #4
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d004      	beq.n	800bdb4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	2204      	movs	r2, #4
 800bdae:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bdb0:	2304      	movs	r3, #4
 800bdb2:	e03a      	b.n	800be2a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdb8:	f003 0301 	and.w	r3, r3, #1
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d004      	beq.n	800bdca <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	2201      	movs	r2, #1
 800bdc4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	e02f      	b.n	800be2a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bdca:	68f8      	ldr	r0, [r7, #12]
 800bdcc:	f7ff fb2c 	bl	800b428 <SDMMC_GetCommandResponse>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	461a      	mov	r2, r3
 800bdd4:	7afb      	ldrb	r3, [r7, #11]
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	d001      	beq.n	800bdde <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bdda:	2301      	movs	r3, #1
 800bddc:	e025      	b.n	800be2a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	4a16      	ldr	r2, [pc, #88]	; (800be3c <SDMMC_GetCmdResp6+0xec>)
 800bde2:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bde4:	2100      	movs	r1, #0
 800bde6:	68f8      	ldr	r0, [r7, #12]
 800bde8:	f7ff fb2b 	bl	800b442 <SDMMC_GetResponse>
 800bdec:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800bdee:	697b      	ldr	r3, [r7, #20]
 800bdf0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d106      	bne.n	800be06 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	0c1b      	lsrs	r3, r3, #16
 800bdfc:	b29a      	uxth	r2, r3
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800be02:	2300      	movs	r3, #0
 800be04:	e011      	b.n	800be2a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800be06:	697b      	ldr	r3, [r7, #20]
 800be08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d002      	beq.n	800be16 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800be10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800be14:	e009      	b.n	800be2a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800be16:	697b      	ldr	r3, [r7, #20]
 800be18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d002      	beq.n	800be26 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800be20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be24:	e001      	b.n	800be2a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800be26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	3720      	adds	r7, #32
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}
 800be32:	bf00      	nop
 800be34:	24000000 	.word	0x24000000
 800be38:	10624dd3 	.word	0x10624dd3
 800be3c:	002000c5 	.word	0x002000c5

0800be40 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800be40:	b480      	push	{r7}
 800be42:	b085      	sub	sp, #20
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800be48:	4b22      	ldr	r3, [pc, #136]	; (800bed4 <SDMMC_GetCmdResp7+0x94>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	4a22      	ldr	r2, [pc, #136]	; (800bed8 <SDMMC_GetCmdResp7+0x98>)
 800be4e:	fba2 2303 	umull	r2, r3, r2, r3
 800be52:	0a5b      	lsrs	r3, r3, #9
 800be54:	f241 3288 	movw	r2, #5000	; 0x1388
 800be58:	fb02 f303 	mul.w	r3, r2, r3
 800be5c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	1e5a      	subs	r2, r3, #1
 800be62:	60fa      	str	r2, [r7, #12]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d102      	bne.n	800be6e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800be68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800be6c:	e02c      	b.n	800bec8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be72:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d0ef      	beq.n	800be5e <SDMMC_GetCmdResp7+0x1e>
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800be84:	2b00      	cmp	r3, #0
 800be86:	d1ea      	bne.n	800be5e <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be8c:	f003 0304 	and.w	r3, r3, #4
 800be90:	2b00      	cmp	r3, #0
 800be92:	d004      	beq.n	800be9e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2204      	movs	r2, #4
 800be98:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800be9a:	2304      	movs	r3, #4
 800be9c:	e014      	b.n	800bec8 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bea2:	f003 0301 	and.w	r3, r3, #1
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d004      	beq.n	800beb4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2201      	movs	r2, #1
 800beae:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800beb0:	2301      	movs	r3, #1
 800beb2:	e009      	b.n	800bec8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d002      	beq.n	800bec6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2240      	movs	r2, #64	; 0x40
 800bec4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bec6:	2300      	movs	r3, #0

}
 800bec8:	4618      	mov	r0, r3
 800beca:	3714      	adds	r7, #20
 800becc:	46bd      	mov	sp, r7
 800bece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed2:	4770      	bx	lr
 800bed4:	24000000 	.word	0x24000000
 800bed8:	10624dd3 	.word	0x10624dd3

0800bedc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bedc:	b084      	sub	sp, #16
 800bede:	b580      	push	{r7, lr}
 800bee0:	b084      	sub	sp, #16
 800bee2:	af00      	add	r7, sp, #0
 800bee4:	6078      	str	r0, [r7, #4]
 800bee6:	f107 001c 	add.w	r0, r7, #28
 800beea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800beee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef0:	2b01      	cmp	r3, #1
 800bef2:	d120      	bne.n	800bf36 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bef8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	68da      	ldr	r2, [r3, #12]
 800bf04:	4b25      	ldr	r3, [pc, #148]	; (800bf9c <USB_CoreInit+0xc0>)
 800bf06:	4013      	ands	r3, r2
 800bf08:	687a      	ldr	r2, [r7, #4]
 800bf0a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	68db      	ldr	r3, [r3, #12]
 800bf10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bf18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf1a:	2b01      	cmp	r3, #1
 800bf1c:	d105      	bne.n	800bf2a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	68db      	ldr	r3, [r3, #12]
 800bf22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f001 fabe 	bl	800d4ac <USB_CoreReset>
 800bf30:	4603      	mov	r3, r0
 800bf32:	73fb      	strb	r3, [r7, #15]
 800bf34:	e01a      	b.n	800bf6c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	68db      	ldr	r3, [r3, #12]
 800bf3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f001 fab2 	bl	800d4ac <USB_CoreReset>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bf4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d106      	bne.n	800bf60 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf56:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	639a      	str	r2, [r3, #56]	; 0x38
 800bf5e:	e005      	b.n	800bf6c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bf6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf6e:	2b01      	cmp	r3, #1
 800bf70:	d10b      	bne.n	800bf8a <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	689b      	ldr	r3, [r3, #8]
 800bf76:	f043 0206 	orr.w	r2, r3, #6
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	689b      	ldr	r3, [r3, #8]
 800bf82:	f043 0220 	orr.w	r2, r3, #32
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bf8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3710      	adds	r7, #16
 800bf90:	46bd      	mov	sp, r7
 800bf92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bf96:	b004      	add	sp, #16
 800bf98:	4770      	bx	lr
 800bf9a:	bf00      	nop
 800bf9c:	ffbdffbf 	.word	0xffbdffbf

0800bfa0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b087      	sub	sp, #28
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	60f8      	str	r0, [r7, #12]
 800bfa8:	60b9      	str	r1, [r7, #8]
 800bfaa:	4613      	mov	r3, r2
 800bfac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800bfae:	79fb      	ldrb	r3, [r7, #7]
 800bfb0:	2b02      	cmp	r3, #2
 800bfb2:	d165      	bne.n	800c080 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	4a41      	ldr	r2, [pc, #260]	; (800c0bc <USB_SetTurnaroundTime+0x11c>)
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	d906      	bls.n	800bfca <USB_SetTurnaroundTime+0x2a>
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	4a40      	ldr	r2, [pc, #256]	; (800c0c0 <USB_SetTurnaroundTime+0x120>)
 800bfc0:	4293      	cmp	r3, r2
 800bfc2:	d802      	bhi.n	800bfca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800bfc4:	230f      	movs	r3, #15
 800bfc6:	617b      	str	r3, [r7, #20]
 800bfc8:	e062      	b.n	800c090 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	4a3c      	ldr	r2, [pc, #240]	; (800c0c0 <USB_SetTurnaroundTime+0x120>)
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	d906      	bls.n	800bfe0 <USB_SetTurnaroundTime+0x40>
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	4a3b      	ldr	r2, [pc, #236]	; (800c0c4 <USB_SetTurnaroundTime+0x124>)
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	d802      	bhi.n	800bfe0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800bfda:	230e      	movs	r3, #14
 800bfdc:	617b      	str	r3, [r7, #20]
 800bfde:	e057      	b.n	800c090 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	4a38      	ldr	r2, [pc, #224]	; (800c0c4 <USB_SetTurnaroundTime+0x124>)
 800bfe4:	4293      	cmp	r3, r2
 800bfe6:	d906      	bls.n	800bff6 <USB_SetTurnaroundTime+0x56>
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	4a37      	ldr	r2, [pc, #220]	; (800c0c8 <USB_SetTurnaroundTime+0x128>)
 800bfec:	4293      	cmp	r3, r2
 800bfee:	d802      	bhi.n	800bff6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800bff0:	230d      	movs	r3, #13
 800bff2:	617b      	str	r3, [r7, #20]
 800bff4:	e04c      	b.n	800c090 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	4a33      	ldr	r2, [pc, #204]	; (800c0c8 <USB_SetTurnaroundTime+0x128>)
 800bffa:	4293      	cmp	r3, r2
 800bffc:	d906      	bls.n	800c00c <USB_SetTurnaroundTime+0x6c>
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	4a32      	ldr	r2, [pc, #200]	; (800c0cc <USB_SetTurnaroundTime+0x12c>)
 800c002:	4293      	cmp	r3, r2
 800c004:	d802      	bhi.n	800c00c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c006:	230c      	movs	r3, #12
 800c008:	617b      	str	r3, [r7, #20]
 800c00a:	e041      	b.n	800c090 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	4a2f      	ldr	r2, [pc, #188]	; (800c0cc <USB_SetTurnaroundTime+0x12c>)
 800c010:	4293      	cmp	r3, r2
 800c012:	d906      	bls.n	800c022 <USB_SetTurnaroundTime+0x82>
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	4a2e      	ldr	r2, [pc, #184]	; (800c0d0 <USB_SetTurnaroundTime+0x130>)
 800c018:	4293      	cmp	r3, r2
 800c01a:	d802      	bhi.n	800c022 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c01c:	230b      	movs	r3, #11
 800c01e:	617b      	str	r3, [r7, #20]
 800c020:	e036      	b.n	800c090 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c022:	68bb      	ldr	r3, [r7, #8]
 800c024:	4a2a      	ldr	r2, [pc, #168]	; (800c0d0 <USB_SetTurnaroundTime+0x130>)
 800c026:	4293      	cmp	r3, r2
 800c028:	d906      	bls.n	800c038 <USB_SetTurnaroundTime+0x98>
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	4a29      	ldr	r2, [pc, #164]	; (800c0d4 <USB_SetTurnaroundTime+0x134>)
 800c02e:	4293      	cmp	r3, r2
 800c030:	d802      	bhi.n	800c038 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c032:	230a      	movs	r3, #10
 800c034:	617b      	str	r3, [r7, #20]
 800c036:	e02b      	b.n	800c090 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	4a26      	ldr	r2, [pc, #152]	; (800c0d4 <USB_SetTurnaroundTime+0x134>)
 800c03c:	4293      	cmp	r3, r2
 800c03e:	d906      	bls.n	800c04e <USB_SetTurnaroundTime+0xae>
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	4a25      	ldr	r2, [pc, #148]	; (800c0d8 <USB_SetTurnaroundTime+0x138>)
 800c044:	4293      	cmp	r3, r2
 800c046:	d802      	bhi.n	800c04e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c048:	2309      	movs	r3, #9
 800c04a:	617b      	str	r3, [r7, #20]
 800c04c:	e020      	b.n	800c090 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c04e:	68bb      	ldr	r3, [r7, #8]
 800c050:	4a21      	ldr	r2, [pc, #132]	; (800c0d8 <USB_SetTurnaroundTime+0x138>)
 800c052:	4293      	cmp	r3, r2
 800c054:	d906      	bls.n	800c064 <USB_SetTurnaroundTime+0xc4>
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	4a20      	ldr	r2, [pc, #128]	; (800c0dc <USB_SetTurnaroundTime+0x13c>)
 800c05a:	4293      	cmp	r3, r2
 800c05c:	d802      	bhi.n	800c064 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c05e:	2308      	movs	r3, #8
 800c060:	617b      	str	r3, [r7, #20]
 800c062:	e015      	b.n	800c090 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c064:	68bb      	ldr	r3, [r7, #8]
 800c066:	4a1d      	ldr	r2, [pc, #116]	; (800c0dc <USB_SetTurnaroundTime+0x13c>)
 800c068:	4293      	cmp	r3, r2
 800c06a:	d906      	bls.n	800c07a <USB_SetTurnaroundTime+0xda>
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	4a1c      	ldr	r2, [pc, #112]	; (800c0e0 <USB_SetTurnaroundTime+0x140>)
 800c070:	4293      	cmp	r3, r2
 800c072:	d802      	bhi.n	800c07a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c074:	2307      	movs	r3, #7
 800c076:	617b      	str	r3, [r7, #20]
 800c078:	e00a      	b.n	800c090 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c07a:	2306      	movs	r3, #6
 800c07c:	617b      	str	r3, [r7, #20]
 800c07e:	e007      	b.n	800c090 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c080:	79fb      	ldrb	r3, [r7, #7]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d102      	bne.n	800c08c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c086:	2309      	movs	r3, #9
 800c088:	617b      	str	r3, [r7, #20]
 800c08a:	e001      	b.n	800c090 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c08c:	2309      	movs	r3, #9
 800c08e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	68db      	ldr	r3, [r3, #12]
 800c094:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	68da      	ldr	r2, [r3, #12]
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	029b      	lsls	r3, r3, #10
 800c0a4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800c0a8:	431a      	orrs	r2, r3
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c0ae:	2300      	movs	r3, #0
}
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	371c      	adds	r7, #28
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ba:	4770      	bx	lr
 800c0bc:	00d8acbf 	.word	0x00d8acbf
 800c0c0:	00e4e1bf 	.word	0x00e4e1bf
 800c0c4:	00f423ff 	.word	0x00f423ff
 800c0c8:	0106737f 	.word	0x0106737f
 800c0cc:	011a499f 	.word	0x011a499f
 800c0d0:	01312cff 	.word	0x01312cff
 800c0d4:	014ca43f 	.word	0x014ca43f
 800c0d8:	016e35ff 	.word	0x016e35ff
 800c0dc:	01a6ab1f 	.word	0x01a6ab1f
 800c0e0:	01e847ff 	.word	0x01e847ff

0800c0e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b083      	sub	sp, #12
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	689b      	ldr	r3, [r3, #8]
 800c0f0:	f043 0201 	orr.w	r2, r3, #1
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c0f8:	2300      	movs	r3, #0
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	370c      	adds	r7, #12
 800c0fe:	46bd      	mov	sp, r7
 800c100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c104:	4770      	bx	lr

0800c106 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c106:	b480      	push	{r7}
 800c108:	b083      	sub	sp, #12
 800c10a:	af00      	add	r7, sp, #0
 800c10c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	689b      	ldr	r3, [r3, #8]
 800c112:	f023 0201 	bic.w	r2, r3, #1
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c11a:	2300      	movs	r3, #0
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	370c      	adds	r7, #12
 800c120:	46bd      	mov	sp, r7
 800c122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c126:	4770      	bx	lr

0800c128 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b082      	sub	sp, #8
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
 800c130:	460b      	mov	r3, r1
 800c132:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	68db      	ldr	r3, [r3, #12]
 800c138:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c140:	78fb      	ldrb	r3, [r7, #3]
 800c142:	2b01      	cmp	r3, #1
 800c144:	d106      	bne.n	800c154 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	68db      	ldr	r3, [r3, #12]
 800c14a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	60da      	str	r2, [r3, #12]
 800c152:	e00b      	b.n	800c16c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c154:	78fb      	ldrb	r3, [r7, #3]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d106      	bne.n	800c168 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	68db      	ldr	r3, [r3, #12]
 800c15e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	60da      	str	r2, [r3, #12]
 800c166:	e001      	b.n	800c16c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c168:	2301      	movs	r3, #1
 800c16a:	e003      	b.n	800c174 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c16c:	2032      	movs	r0, #50	; 0x32
 800c16e:	f7f5 fa1b 	bl	80015a8 <HAL_Delay>

  return HAL_OK;
 800c172:	2300      	movs	r3, #0
}
 800c174:	4618      	mov	r0, r3
 800c176:	3708      	adds	r7, #8
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}

0800c17c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c17c:	b084      	sub	sp, #16
 800c17e:	b580      	push	{r7, lr}
 800c180:	b086      	sub	sp, #24
 800c182:	af00      	add	r7, sp, #0
 800c184:	6078      	str	r0, [r7, #4]
 800c186:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c18a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c18e:	2300      	movs	r3, #0
 800c190:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c196:	2300      	movs	r3, #0
 800c198:	613b      	str	r3, [r7, #16]
 800c19a:	e009      	b.n	800c1b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c19c:	687a      	ldr	r2, [r7, #4]
 800c19e:	693b      	ldr	r3, [r7, #16]
 800c1a0:	3340      	adds	r3, #64	; 0x40
 800c1a2:	009b      	lsls	r3, r3, #2
 800c1a4:	4413      	add	r3, r2
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c1aa:	693b      	ldr	r3, [r7, #16]
 800c1ac:	3301      	adds	r3, #1
 800c1ae:	613b      	str	r3, [r7, #16]
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	2b0e      	cmp	r3, #14
 800c1b4:	d9f2      	bls.n	800c19c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c1b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d11c      	bne.n	800c1f6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1c2:	685b      	ldr	r3, [r3, #4]
 800c1c4:	68fa      	ldr	r2, [r7, #12]
 800c1c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c1ca:	f043 0302 	orr.w	r3, r3, #2
 800c1ce:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1d4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	601a      	str	r2, [r3, #0]
 800c1f4:	e005      	b.n	800c202 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c208:	461a      	mov	r2, r3
 800c20a:	2300      	movs	r3, #0
 800c20c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c214:	4619      	mov	r1, r3
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c21c:	461a      	mov	r2, r3
 800c21e:	680b      	ldr	r3, [r1, #0]
 800c220:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c224:	2b01      	cmp	r3, #1
 800c226:	d10c      	bne.n	800c242 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d104      	bne.n	800c238 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c22e:	2100      	movs	r1, #0
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	f000 f949 	bl	800c4c8 <USB_SetDevSpeed>
 800c236:	e008      	b.n	800c24a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c238:	2101      	movs	r1, #1
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f000 f944 	bl	800c4c8 <USB_SetDevSpeed>
 800c240:	e003      	b.n	800c24a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c242:	2103      	movs	r1, #3
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f000 f93f 	bl	800c4c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c24a:	2110      	movs	r1, #16
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	f000 f8f3 	bl	800c438 <USB_FlushTxFifo>
 800c252:	4603      	mov	r3, r0
 800c254:	2b00      	cmp	r3, #0
 800c256:	d001      	beq.n	800c25c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c258:	2301      	movs	r3, #1
 800c25a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f000 f911 	bl	800c484 <USB_FlushRxFifo>
 800c262:	4603      	mov	r3, r0
 800c264:	2b00      	cmp	r3, #0
 800c266:	d001      	beq.n	800c26c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c268:	2301      	movs	r3, #1
 800c26a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c272:	461a      	mov	r2, r3
 800c274:	2300      	movs	r3, #0
 800c276:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c27e:	461a      	mov	r2, r3
 800c280:	2300      	movs	r3, #0
 800c282:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c28a:	461a      	mov	r2, r3
 800c28c:	2300      	movs	r3, #0
 800c28e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c290:	2300      	movs	r3, #0
 800c292:	613b      	str	r3, [r7, #16]
 800c294:	e043      	b.n	800c31e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c296:	693b      	ldr	r3, [r7, #16]
 800c298:	015a      	lsls	r2, r3, #5
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	4413      	add	r3, r2
 800c29e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c2a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c2ac:	d118      	bne.n	800c2e0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c2ae:	693b      	ldr	r3, [r7, #16]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d10a      	bne.n	800c2ca <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c2b4:	693b      	ldr	r3, [r7, #16]
 800c2b6:	015a      	lsls	r2, r3, #5
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	4413      	add	r3, r2
 800c2bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2c0:	461a      	mov	r2, r3
 800c2c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c2c6:	6013      	str	r3, [r2, #0]
 800c2c8:	e013      	b.n	800c2f2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c2ca:	693b      	ldr	r3, [r7, #16]
 800c2cc:	015a      	lsls	r2, r3, #5
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	4413      	add	r3, r2
 800c2d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2d6:	461a      	mov	r2, r3
 800c2d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c2dc:	6013      	str	r3, [r2, #0]
 800c2de:	e008      	b.n	800c2f2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c2e0:	693b      	ldr	r3, [r7, #16]
 800c2e2:	015a      	lsls	r2, r3, #5
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	4413      	add	r3, r2
 800c2e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2ec:	461a      	mov	r2, r3
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c2f2:	693b      	ldr	r3, [r7, #16]
 800c2f4:	015a      	lsls	r2, r3, #5
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	4413      	add	r3, r2
 800c2fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2fe:	461a      	mov	r2, r3
 800c300:	2300      	movs	r3, #0
 800c302:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c304:	693b      	ldr	r3, [r7, #16]
 800c306:	015a      	lsls	r2, r3, #5
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	4413      	add	r3, r2
 800c30c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c310:	461a      	mov	r2, r3
 800c312:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c316:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c318:	693b      	ldr	r3, [r7, #16]
 800c31a:	3301      	adds	r3, #1
 800c31c:	613b      	str	r3, [r7, #16]
 800c31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c320:	693a      	ldr	r2, [r7, #16]
 800c322:	429a      	cmp	r2, r3
 800c324:	d3b7      	bcc.n	800c296 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c326:	2300      	movs	r3, #0
 800c328:	613b      	str	r3, [r7, #16]
 800c32a:	e043      	b.n	800c3b4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	015a      	lsls	r2, r3, #5
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	4413      	add	r3, r2
 800c334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c33e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c342:	d118      	bne.n	800c376 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c344:	693b      	ldr	r3, [r7, #16]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d10a      	bne.n	800c360 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c34a:	693b      	ldr	r3, [r7, #16]
 800c34c:	015a      	lsls	r2, r3, #5
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	4413      	add	r3, r2
 800c352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c356:	461a      	mov	r2, r3
 800c358:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c35c:	6013      	str	r3, [r2, #0]
 800c35e:	e013      	b.n	800c388 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c360:	693b      	ldr	r3, [r7, #16]
 800c362:	015a      	lsls	r2, r3, #5
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	4413      	add	r3, r2
 800c368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c36c:	461a      	mov	r2, r3
 800c36e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c372:	6013      	str	r3, [r2, #0]
 800c374:	e008      	b.n	800c388 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c376:	693b      	ldr	r3, [r7, #16]
 800c378:	015a      	lsls	r2, r3, #5
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	4413      	add	r3, r2
 800c37e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c382:	461a      	mov	r2, r3
 800c384:	2300      	movs	r3, #0
 800c386:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	015a      	lsls	r2, r3, #5
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	4413      	add	r3, r2
 800c390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c394:	461a      	mov	r2, r3
 800c396:	2300      	movs	r3, #0
 800c398:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c39a:	693b      	ldr	r3, [r7, #16]
 800c39c:	015a      	lsls	r2, r3, #5
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	4413      	add	r3, r2
 800c3a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3a6:	461a      	mov	r2, r3
 800c3a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c3ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c3ae:	693b      	ldr	r3, [r7, #16]
 800c3b0:	3301      	adds	r3, #1
 800c3b2:	613b      	str	r3, [r7, #16]
 800c3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3b6:	693a      	ldr	r2, [r7, #16]
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	d3b7      	bcc.n	800c32c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3c2:	691b      	ldr	r3, [r3, #16]
 800c3c4:	68fa      	ldr	r2, [r7, #12]
 800c3c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c3ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c3ce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c3dc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d105      	bne.n	800c3f0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	699b      	ldr	r3, [r3, #24]
 800c3e8:	f043 0210 	orr.w	r2, r3, #16
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	699a      	ldr	r2, [r3, #24]
 800c3f4:	4b0e      	ldr	r3, [pc, #56]	; (800c430 <USB_DevInit+0x2b4>)
 800c3f6:	4313      	orrs	r3, r2
 800c3f8:	687a      	ldr	r2, [r7, #4]
 800c3fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c3fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d005      	beq.n	800c40e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	699b      	ldr	r3, [r3, #24]
 800c406:	f043 0208 	orr.w	r2, r3, #8
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c40e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c410:	2b01      	cmp	r3, #1
 800c412:	d105      	bne.n	800c420 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	699a      	ldr	r2, [r3, #24]
 800c418:	4b06      	ldr	r3, [pc, #24]	; (800c434 <USB_DevInit+0x2b8>)
 800c41a:	4313      	orrs	r3, r2
 800c41c:	687a      	ldr	r2, [r7, #4]
 800c41e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c420:	7dfb      	ldrb	r3, [r7, #23]
}
 800c422:	4618      	mov	r0, r3
 800c424:	3718      	adds	r7, #24
 800c426:	46bd      	mov	sp, r7
 800c428:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c42c:	b004      	add	sp, #16
 800c42e:	4770      	bx	lr
 800c430:	803c3800 	.word	0x803c3800
 800c434:	40000004 	.word	0x40000004

0800c438 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c438:	b480      	push	{r7}
 800c43a:	b085      	sub	sp, #20
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
 800c440:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c442:	2300      	movs	r3, #0
 800c444:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	019b      	lsls	r3, r3, #6
 800c44a:	f043 0220 	orr.w	r2, r3, #32
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	3301      	adds	r3, #1
 800c456:	60fb      	str	r3, [r7, #12]
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	4a09      	ldr	r2, [pc, #36]	; (800c480 <USB_FlushTxFifo+0x48>)
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d901      	bls.n	800c464 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c460:	2303      	movs	r3, #3
 800c462:	e006      	b.n	800c472 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	691b      	ldr	r3, [r3, #16]
 800c468:	f003 0320 	and.w	r3, r3, #32
 800c46c:	2b20      	cmp	r3, #32
 800c46e:	d0f0      	beq.n	800c452 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c470:	2300      	movs	r3, #0
}
 800c472:	4618      	mov	r0, r3
 800c474:	3714      	adds	r7, #20
 800c476:	46bd      	mov	sp, r7
 800c478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47c:	4770      	bx	lr
 800c47e:	bf00      	nop
 800c480:	00030d40 	.word	0x00030d40

0800c484 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c484:	b480      	push	{r7}
 800c486:	b085      	sub	sp, #20
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c48c:	2300      	movs	r3, #0
 800c48e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2210      	movs	r2, #16
 800c494:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	3301      	adds	r3, #1
 800c49a:	60fb      	str	r3, [r7, #12]
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	4a09      	ldr	r2, [pc, #36]	; (800c4c4 <USB_FlushRxFifo+0x40>)
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	d901      	bls.n	800c4a8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c4a4:	2303      	movs	r3, #3
 800c4a6:	e006      	b.n	800c4b6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	691b      	ldr	r3, [r3, #16]
 800c4ac:	f003 0310 	and.w	r3, r3, #16
 800c4b0:	2b10      	cmp	r3, #16
 800c4b2:	d0f0      	beq.n	800c496 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c4b4:	2300      	movs	r3, #0
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3714      	adds	r7, #20
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c0:	4770      	bx	lr
 800c4c2:	bf00      	nop
 800c4c4:	00030d40 	.word	0x00030d40

0800c4c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c4c8:	b480      	push	{r7}
 800c4ca:	b085      	sub	sp, #20
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
 800c4d0:	460b      	mov	r3, r1
 800c4d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4de:	681a      	ldr	r2, [r3, #0]
 800c4e0:	78fb      	ldrb	r3, [r7, #3]
 800c4e2:	68f9      	ldr	r1, [r7, #12]
 800c4e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c4e8:	4313      	orrs	r3, r2
 800c4ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c4ec:	2300      	movs	r3, #0
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	3714      	adds	r7, #20
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f8:	4770      	bx	lr

0800c4fa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c4fa:	b480      	push	{r7}
 800c4fc:	b087      	sub	sp, #28
 800c4fe:	af00      	add	r7, sp, #0
 800c500:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c506:	693b      	ldr	r3, [r7, #16]
 800c508:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c50c:	689b      	ldr	r3, [r3, #8]
 800c50e:	f003 0306 	and.w	r3, r3, #6
 800c512:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d102      	bne.n	800c520 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c51a:	2300      	movs	r3, #0
 800c51c:	75fb      	strb	r3, [r7, #23]
 800c51e:	e00a      	b.n	800c536 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	2b02      	cmp	r3, #2
 800c524:	d002      	beq.n	800c52c <USB_GetDevSpeed+0x32>
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	2b06      	cmp	r3, #6
 800c52a:	d102      	bne.n	800c532 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c52c:	2302      	movs	r3, #2
 800c52e:	75fb      	strb	r3, [r7, #23]
 800c530:	e001      	b.n	800c536 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c532:	230f      	movs	r3, #15
 800c534:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c536:	7dfb      	ldrb	r3, [r7, #23]
}
 800c538:	4618      	mov	r0, r3
 800c53a:	371c      	adds	r7, #28
 800c53c:	46bd      	mov	sp, r7
 800c53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c542:	4770      	bx	lr

0800c544 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c544:	b480      	push	{r7}
 800c546:	b085      	sub	sp, #20
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
 800c54c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	781b      	ldrb	r3, [r3, #0]
 800c556:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	785b      	ldrb	r3, [r3, #1]
 800c55c:	2b01      	cmp	r3, #1
 800c55e:	d139      	bne.n	800c5d4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c566:	69da      	ldr	r2, [r3, #28]
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	781b      	ldrb	r3, [r3, #0]
 800c56c:	f003 030f 	and.w	r3, r3, #15
 800c570:	2101      	movs	r1, #1
 800c572:	fa01 f303 	lsl.w	r3, r1, r3
 800c576:	b29b      	uxth	r3, r3
 800c578:	68f9      	ldr	r1, [r7, #12]
 800c57a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c57e:	4313      	orrs	r3, r2
 800c580:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	015a      	lsls	r2, r3, #5
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	4413      	add	r3, r2
 800c58a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c594:	2b00      	cmp	r3, #0
 800c596:	d153      	bne.n	800c640 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	015a      	lsls	r2, r3, #5
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	4413      	add	r3, r2
 800c5a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5a4:	681a      	ldr	r2, [r3, #0]
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	689b      	ldr	r3, [r3, #8]
 800c5aa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	78db      	ldrb	r3, [r3, #3]
 800c5b2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c5b4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	059b      	lsls	r3, r3, #22
 800c5ba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c5bc:	431a      	orrs	r2, r3
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	0159      	lsls	r1, r3, #5
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	440b      	add	r3, r1
 800c5c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5ca:	4619      	mov	r1, r3
 800c5cc:	4b20      	ldr	r3, [pc, #128]	; (800c650 <USB_ActivateEndpoint+0x10c>)
 800c5ce:	4313      	orrs	r3, r2
 800c5d0:	600b      	str	r3, [r1, #0]
 800c5d2:	e035      	b.n	800c640 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5da:	69da      	ldr	r2, [r3, #28]
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	781b      	ldrb	r3, [r3, #0]
 800c5e0:	f003 030f 	and.w	r3, r3, #15
 800c5e4:	2101      	movs	r1, #1
 800c5e6:	fa01 f303 	lsl.w	r3, r1, r3
 800c5ea:	041b      	lsls	r3, r3, #16
 800c5ec:	68f9      	ldr	r1, [r7, #12]
 800c5ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c5f2:	4313      	orrs	r3, r2
 800c5f4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	015a      	lsls	r2, r3, #5
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	4413      	add	r3, r2
 800c5fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d119      	bne.n	800c640 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	015a      	lsls	r2, r3, #5
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	4413      	add	r3, r2
 800c614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c618:	681a      	ldr	r2, [r3, #0]
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	689b      	ldr	r3, [r3, #8]
 800c61e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	78db      	ldrb	r3, [r3, #3]
 800c626:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c628:	430b      	orrs	r3, r1
 800c62a:	431a      	orrs	r2, r3
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	0159      	lsls	r1, r3, #5
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	440b      	add	r3, r1
 800c634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c638:	4619      	mov	r1, r3
 800c63a:	4b05      	ldr	r3, [pc, #20]	; (800c650 <USB_ActivateEndpoint+0x10c>)
 800c63c:	4313      	orrs	r3, r2
 800c63e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c640:	2300      	movs	r3, #0
}
 800c642:	4618      	mov	r0, r3
 800c644:	3714      	adds	r7, #20
 800c646:	46bd      	mov	sp, r7
 800c648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64c:	4770      	bx	lr
 800c64e:	bf00      	nop
 800c650:	10008000 	.word	0x10008000

0800c654 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c654:	b480      	push	{r7}
 800c656:	b085      	sub	sp, #20
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
 800c65c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	781b      	ldrb	r3, [r3, #0]
 800c666:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	785b      	ldrb	r3, [r3, #1]
 800c66c:	2b01      	cmp	r3, #1
 800c66e:	d161      	bne.n	800c734 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	015a      	lsls	r2, r3, #5
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	4413      	add	r3, r2
 800c678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c682:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c686:	d11f      	bne.n	800c6c8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	015a      	lsls	r2, r3, #5
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	4413      	add	r3, r2
 800c690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	68ba      	ldr	r2, [r7, #8]
 800c698:	0151      	lsls	r1, r2, #5
 800c69a:	68fa      	ldr	r2, [r7, #12]
 800c69c:	440a      	add	r2, r1
 800c69e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c6a6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	015a      	lsls	r2, r3, #5
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	4413      	add	r3, r2
 800c6b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	68ba      	ldr	r2, [r7, #8]
 800c6b8:	0151      	lsls	r1, r2, #5
 800c6ba:	68fa      	ldr	r2, [r7, #12]
 800c6bc:	440a      	add	r2, r1
 800c6be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c6c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	781b      	ldrb	r3, [r3, #0]
 800c6d4:	f003 030f 	and.w	r3, r3, #15
 800c6d8:	2101      	movs	r1, #1
 800c6da:	fa01 f303 	lsl.w	r3, r1, r3
 800c6de:	b29b      	uxth	r3, r3
 800c6e0:	43db      	mvns	r3, r3
 800c6e2:	68f9      	ldr	r1, [r7, #12]
 800c6e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c6e8:	4013      	ands	r3, r2
 800c6ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6f2:	69da      	ldr	r2, [r3, #28]
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	781b      	ldrb	r3, [r3, #0]
 800c6f8:	f003 030f 	and.w	r3, r3, #15
 800c6fc:	2101      	movs	r1, #1
 800c6fe:	fa01 f303 	lsl.w	r3, r1, r3
 800c702:	b29b      	uxth	r3, r3
 800c704:	43db      	mvns	r3, r3
 800c706:	68f9      	ldr	r1, [r7, #12]
 800c708:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c70c:	4013      	ands	r3, r2
 800c70e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	015a      	lsls	r2, r3, #5
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	4413      	add	r3, r2
 800c718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c71c:	681a      	ldr	r2, [r3, #0]
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	0159      	lsls	r1, r3, #5
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	440b      	add	r3, r1
 800c726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c72a:	4619      	mov	r1, r3
 800c72c:	4b35      	ldr	r3, [pc, #212]	; (800c804 <USB_DeactivateEndpoint+0x1b0>)
 800c72e:	4013      	ands	r3, r2
 800c730:	600b      	str	r3, [r1, #0]
 800c732:	e060      	b.n	800c7f6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	015a      	lsls	r2, r3, #5
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	4413      	add	r3, r2
 800c73c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c746:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c74a:	d11f      	bne.n	800c78c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	015a      	lsls	r2, r3, #5
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	4413      	add	r3, r2
 800c754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	68ba      	ldr	r2, [r7, #8]
 800c75c:	0151      	lsls	r1, r2, #5
 800c75e:	68fa      	ldr	r2, [r7, #12]
 800c760:	440a      	add	r2, r1
 800c762:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c766:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c76a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	015a      	lsls	r2, r3, #5
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	4413      	add	r3, r2
 800c774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	68ba      	ldr	r2, [r7, #8]
 800c77c:	0151      	lsls	r1, r2, #5
 800c77e:	68fa      	ldr	r2, [r7, #12]
 800c780:	440a      	add	r2, r1
 800c782:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c786:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c78a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c792:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	781b      	ldrb	r3, [r3, #0]
 800c798:	f003 030f 	and.w	r3, r3, #15
 800c79c:	2101      	movs	r1, #1
 800c79e:	fa01 f303 	lsl.w	r3, r1, r3
 800c7a2:	041b      	lsls	r3, r3, #16
 800c7a4:	43db      	mvns	r3, r3
 800c7a6:	68f9      	ldr	r1, [r7, #12]
 800c7a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c7ac:	4013      	ands	r3, r2
 800c7ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7b6:	69da      	ldr	r2, [r3, #28]
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	781b      	ldrb	r3, [r3, #0]
 800c7bc:	f003 030f 	and.w	r3, r3, #15
 800c7c0:	2101      	movs	r1, #1
 800c7c2:	fa01 f303 	lsl.w	r3, r1, r3
 800c7c6:	041b      	lsls	r3, r3, #16
 800c7c8:	43db      	mvns	r3, r3
 800c7ca:	68f9      	ldr	r1, [r7, #12]
 800c7cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c7d0:	4013      	ands	r3, r2
 800c7d2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c7d4:	68bb      	ldr	r3, [r7, #8]
 800c7d6:	015a      	lsls	r2, r3, #5
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	4413      	add	r3, r2
 800c7dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7e0:	681a      	ldr	r2, [r3, #0]
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	0159      	lsls	r1, r3, #5
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	440b      	add	r3, r1
 800c7ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7ee:	4619      	mov	r1, r3
 800c7f0:	4b05      	ldr	r3, [pc, #20]	; (800c808 <USB_DeactivateEndpoint+0x1b4>)
 800c7f2:	4013      	ands	r3, r2
 800c7f4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c7f6:	2300      	movs	r3, #0
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3714      	adds	r7, #20
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c802:	4770      	bx	lr
 800c804:	ec337800 	.word	0xec337800
 800c808:	eff37800 	.word	0xeff37800

0800c80c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b08a      	sub	sp, #40	; 0x28
 800c810:	af02      	add	r7, sp, #8
 800c812:	60f8      	str	r0, [r7, #12]
 800c814:	60b9      	str	r1, [r7, #8]
 800c816:	4613      	mov	r3, r2
 800c818:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	781b      	ldrb	r3, [r3, #0]
 800c822:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c824:	68bb      	ldr	r3, [r7, #8]
 800c826:	785b      	ldrb	r3, [r3, #1]
 800c828:	2b01      	cmp	r3, #1
 800c82a:	f040 8163 	bne.w	800caf4 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	695b      	ldr	r3, [r3, #20]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d132      	bne.n	800c89c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c836:	69bb      	ldr	r3, [r7, #24]
 800c838:	015a      	lsls	r2, r3, #5
 800c83a:	69fb      	ldr	r3, [r7, #28]
 800c83c:	4413      	add	r3, r2
 800c83e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c842:	691a      	ldr	r2, [r3, #16]
 800c844:	69bb      	ldr	r3, [r7, #24]
 800c846:	0159      	lsls	r1, r3, #5
 800c848:	69fb      	ldr	r3, [r7, #28]
 800c84a:	440b      	add	r3, r1
 800c84c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c850:	4619      	mov	r1, r3
 800c852:	4ba5      	ldr	r3, [pc, #660]	; (800cae8 <USB_EPStartXfer+0x2dc>)
 800c854:	4013      	ands	r3, r2
 800c856:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c858:	69bb      	ldr	r3, [r7, #24]
 800c85a:	015a      	lsls	r2, r3, #5
 800c85c:	69fb      	ldr	r3, [r7, #28]
 800c85e:	4413      	add	r3, r2
 800c860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c864:	691b      	ldr	r3, [r3, #16]
 800c866:	69ba      	ldr	r2, [r7, #24]
 800c868:	0151      	lsls	r1, r2, #5
 800c86a:	69fa      	ldr	r2, [r7, #28]
 800c86c:	440a      	add	r2, r1
 800c86e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c872:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c876:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c878:	69bb      	ldr	r3, [r7, #24]
 800c87a:	015a      	lsls	r2, r3, #5
 800c87c:	69fb      	ldr	r3, [r7, #28]
 800c87e:	4413      	add	r3, r2
 800c880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c884:	691a      	ldr	r2, [r3, #16]
 800c886:	69bb      	ldr	r3, [r7, #24]
 800c888:	0159      	lsls	r1, r3, #5
 800c88a:	69fb      	ldr	r3, [r7, #28]
 800c88c:	440b      	add	r3, r1
 800c88e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c892:	4619      	mov	r1, r3
 800c894:	4b95      	ldr	r3, [pc, #596]	; (800caec <USB_EPStartXfer+0x2e0>)
 800c896:	4013      	ands	r3, r2
 800c898:	610b      	str	r3, [r1, #16]
 800c89a:	e074      	b.n	800c986 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c89c:	69bb      	ldr	r3, [r7, #24]
 800c89e:	015a      	lsls	r2, r3, #5
 800c8a0:	69fb      	ldr	r3, [r7, #28]
 800c8a2:	4413      	add	r3, r2
 800c8a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8a8:	691a      	ldr	r2, [r3, #16]
 800c8aa:	69bb      	ldr	r3, [r7, #24]
 800c8ac:	0159      	lsls	r1, r3, #5
 800c8ae:	69fb      	ldr	r3, [r7, #28]
 800c8b0:	440b      	add	r3, r1
 800c8b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8b6:	4619      	mov	r1, r3
 800c8b8:	4b8c      	ldr	r3, [pc, #560]	; (800caec <USB_EPStartXfer+0x2e0>)
 800c8ba:	4013      	ands	r3, r2
 800c8bc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c8be:	69bb      	ldr	r3, [r7, #24]
 800c8c0:	015a      	lsls	r2, r3, #5
 800c8c2:	69fb      	ldr	r3, [r7, #28]
 800c8c4:	4413      	add	r3, r2
 800c8c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8ca:	691a      	ldr	r2, [r3, #16]
 800c8cc:	69bb      	ldr	r3, [r7, #24]
 800c8ce:	0159      	lsls	r1, r3, #5
 800c8d0:	69fb      	ldr	r3, [r7, #28]
 800c8d2:	440b      	add	r3, r1
 800c8d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8d8:	4619      	mov	r1, r3
 800c8da:	4b83      	ldr	r3, [pc, #524]	; (800cae8 <USB_EPStartXfer+0x2dc>)
 800c8dc:	4013      	ands	r3, r2
 800c8de:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c8e0:	69bb      	ldr	r3, [r7, #24]
 800c8e2:	015a      	lsls	r2, r3, #5
 800c8e4:	69fb      	ldr	r3, [r7, #28]
 800c8e6:	4413      	add	r3, r2
 800c8e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8ec:	691a      	ldr	r2, [r3, #16]
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	6959      	ldr	r1, [r3, #20]
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	689b      	ldr	r3, [r3, #8]
 800c8f6:	440b      	add	r3, r1
 800c8f8:	1e59      	subs	r1, r3, #1
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	689b      	ldr	r3, [r3, #8]
 800c8fe:	fbb1 f3f3 	udiv	r3, r1, r3
 800c902:	04d9      	lsls	r1, r3, #19
 800c904:	4b7a      	ldr	r3, [pc, #488]	; (800caf0 <USB_EPStartXfer+0x2e4>)
 800c906:	400b      	ands	r3, r1
 800c908:	69b9      	ldr	r1, [r7, #24]
 800c90a:	0148      	lsls	r0, r1, #5
 800c90c:	69f9      	ldr	r1, [r7, #28]
 800c90e:	4401      	add	r1, r0
 800c910:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c914:	4313      	orrs	r3, r2
 800c916:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c918:	69bb      	ldr	r3, [r7, #24]
 800c91a:	015a      	lsls	r2, r3, #5
 800c91c:	69fb      	ldr	r3, [r7, #28]
 800c91e:	4413      	add	r3, r2
 800c920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c924:	691a      	ldr	r2, [r3, #16]
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	695b      	ldr	r3, [r3, #20]
 800c92a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c92e:	69b9      	ldr	r1, [r7, #24]
 800c930:	0148      	lsls	r0, r1, #5
 800c932:	69f9      	ldr	r1, [r7, #28]
 800c934:	4401      	add	r1, r0
 800c936:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c93a:	4313      	orrs	r3, r2
 800c93c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	78db      	ldrb	r3, [r3, #3]
 800c942:	2b01      	cmp	r3, #1
 800c944:	d11f      	bne.n	800c986 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c946:	69bb      	ldr	r3, [r7, #24]
 800c948:	015a      	lsls	r2, r3, #5
 800c94a:	69fb      	ldr	r3, [r7, #28]
 800c94c:	4413      	add	r3, r2
 800c94e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c952:	691b      	ldr	r3, [r3, #16]
 800c954:	69ba      	ldr	r2, [r7, #24]
 800c956:	0151      	lsls	r1, r2, #5
 800c958:	69fa      	ldr	r2, [r7, #28]
 800c95a:	440a      	add	r2, r1
 800c95c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c960:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c964:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c966:	69bb      	ldr	r3, [r7, #24]
 800c968:	015a      	lsls	r2, r3, #5
 800c96a:	69fb      	ldr	r3, [r7, #28]
 800c96c:	4413      	add	r3, r2
 800c96e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c972:	691b      	ldr	r3, [r3, #16]
 800c974:	69ba      	ldr	r2, [r7, #24]
 800c976:	0151      	lsls	r1, r2, #5
 800c978:	69fa      	ldr	r2, [r7, #28]
 800c97a:	440a      	add	r2, r1
 800c97c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c980:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c984:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c986:	79fb      	ldrb	r3, [r7, #7]
 800c988:	2b01      	cmp	r3, #1
 800c98a:	d14b      	bne.n	800ca24 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	691b      	ldr	r3, [r3, #16]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d009      	beq.n	800c9a8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c994:	69bb      	ldr	r3, [r7, #24]
 800c996:	015a      	lsls	r2, r3, #5
 800c998:	69fb      	ldr	r3, [r7, #28]
 800c99a:	4413      	add	r3, r2
 800c99c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9a0:	461a      	mov	r2, r3
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	691b      	ldr	r3, [r3, #16]
 800c9a6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	78db      	ldrb	r3, [r3, #3]
 800c9ac:	2b01      	cmp	r3, #1
 800c9ae:	d128      	bne.n	800ca02 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c9b0:	69fb      	ldr	r3, [r7, #28]
 800c9b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9b6:	689b      	ldr	r3, [r3, #8]
 800c9b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d110      	bne.n	800c9e2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c9c0:	69bb      	ldr	r3, [r7, #24]
 800c9c2:	015a      	lsls	r2, r3, #5
 800c9c4:	69fb      	ldr	r3, [r7, #28]
 800c9c6:	4413      	add	r3, r2
 800c9c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	69ba      	ldr	r2, [r7, #24]
 800c9d0:	0151      	lsls	r1, r2, #5
 800c9d2:	69fa      	ldr	r2, [r7, #28]
 800c9d4:	440a      	add	r2, r1
 800c9d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c9da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c9de:	6013      	str	r3, [r2, #0]
 800c9e0:	e00f      	b.n	800ca02 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c9e2:	69bb      	ldr	r3, [r7, #24]
 800c9e4:	015a      	lsls	r2, r3, #5
 800c9e6:	69fb      	ldr	r3, [r7, #28]
 800c9e8:	4413      	add	r3, r2
 800c9ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	69ba      	ldr	r2, [r7, #24]
 800c9f2:	0151      	lsls	r1, r2, #5
 800c9f4:	69fa      	ldr	r2, [r7, #28]
 800c9f6:	440a      	add	r2, r1
 800c9f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c9fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ca00:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ca02:	69bb      	ldr	r3, [r7, #24]
 800ca04:	015a      	lsls	r2, r3, #5
 800ca06:	69fb      	ldr	r3, [r7, #28]
 800ca08:	4413      	add	r3, r2
 800ca0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	69ba      	ldr	r2, [r7, #24]
 800ca12:	0151      	lsls	r1, r2, #5
 800ca14:	69fa      	ldr	r2, [r7, #28]
 800ca16:	440a      	add	r2, r1
 800ca18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca1c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ca20:	6013      	str	r3, [r2, #0]
 800ca22:	e133      	b.n	800cc8c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ca24:	69bb      	ldr	r3, [r7, #24]
 800ca26:	015a      	lsls	r2, r3, #5
 800ca28:	69fb      	ldr	r3, [r7, #28]
 800ca2a:	4413      	add	r3, r2
 800ca2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	69ba      	ldr	r2, [r7, #24]
 800ca34:	0151      	lsls	r1, r2, #5
 800ca36:	69fa      	ldr	r2, [r7, #28]
 800ca38:	440a      	add	r2, r1
 800ca3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ca42:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ca44:	68bb      	ldr	r3, [r7, #8]
 800ca46:	78db      	ldrb	r3, [r3, #3]
 800ca48:	2b01      	cmp	r3, #1
 800ca4a:	d015      	beq.n	800ca78 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	695b      	ldr	r3, [r3, #20]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	f000 811b 	beq.w	800cc8c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ca56:	69fb      	ldr	r3, [r7, #28]
 800ca58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca5e:	68bb      	ldr	r3, [r7, #8]
 800ca60:	781b      	ldrb	r3, [r3, #0]
 800ca62:	f003 030f 	and.w	r3, r3, #15
 800ca66:	2101      	movs	r1, #1
 800ca68:	fa01 f303 	lsl.w	r3, r1, r3
 800ca6c:	69f9      	ldr	r1, [r7, #28]
 800ca6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ca72:	4313      	orrs	r3, r2
 800ca74:	634b      	str	r3, [r1, #52]	; 0x34
 800ca76:	e109      	b.n	800cc8c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ca78:	69fb      	ldr	r3, [r7, #28]
 800ca7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca7e:	689b      	ldr	r3, [r3, #8]
 800ca80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d110      	bne.n	800caaa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ca88:	69bb      	ldr	r3, [r7, #24]
 800ca8a:	015a      	lsls	r2, r3, #5
 800ca8c:	69fb      	ldr	r3, [r7, #28]
 800ca8e:	4413      	add	r3, r2
 800ca90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	69ba      	ldr	r2, [r7, #24]
 800ca98:	0151      	lsls	r1, r2, #5
 800ca9a:	69fa      	ldr	r2, [r7, #28]
 800ca9c:	440a      	add	r2, r1
 800ca9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800caa2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800caa6:	6013      	str	r3, [r2, #0]
 800caa8:	e00f      	b.n	800caca <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800caaa:	69bb      	ldr	r3, [r7, #24]
 800caac:	015a      	lsls	r2, r3, #5
 800caae:	69fb      	ldr	r3, [r7, #28]
 800cab0:	4413      	add	r3, r2
 800cab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	69ba      	ldr	r2, [r7, #24]
 800caba:	0151      	lsls	r1, r2, #5
 800cabc:	69fa      	ldr	r2, [r7, #28]
 800cabe:	440a      	add	r2, r1
 800cac0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cac8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	68d9      	ldr	r1, [r3, #12]
 800cace:	68bb      	ldr	r3, [r7, #8]
 800cad0:	781a      	ldrb	r2, [r3, #0]
 800cad2:	68bb      	ldr	r3, [r7, #8]
 800cad4:	695b      	ldr	r3, [r3, #20]
 800cad6:	b298      	uxth	r0, r3
 800cad8:	79fb      	ldrb	r3, [r7, #7]
 800cada:	9300      	str	r3, [sp, #0]
 800cadc:	4603      	mov	r3, r0
 800cade:	68f8      	ldr	r0, [r7, #12]
 800cae0:	f000 fa38 	bl	800cf54 <USB_WritePacket>
 800cae4:	e0d2      	b.n	800cc8c <USB_EPStartXfer+0x480>
 800cae6:	bf00      	nop
 800cae8:	e007ffff 	.word	0xe007ffff
 800caec:	fff80000 	.word	0xfff80000
 800caf0:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800caf4:	69bb      	ldr	r3, [r7, #24]
 800caf6:	015a      	lsls	r2, r3, #5
 800caf8:	69fb      	ldr	r3, [r7, #28]
 800cafa:	4413      	add	r3, r2
 800cafc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb00:	691a      	ldr	r2, [r3, #16]
 800cb02:	69bb      	ldr	r3, [r7, #24]
 800cb04:	0159      	lsls	r1, r3, #5
 800cb06:	69fb      	ldr	r3, [r7, #28]
 800cb08:	440b      	add	r3, r1
 800cb0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb0e:	4619      	mov	r1, r3
 800cb10:	4b61      	ldr	r3, [pc, #388]	; (800cc98 <USB_EPStartXfer+0x48c>)
 800cb12:	4013      	ands	r3, r2
 800cb14:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800cb16:	69bb      	ldr	r3, [r7, #24]
 800cb18:	015a      	lsls	r2, r3, #5
 800cb1a:	69fb      	ldr	r3, [r7, #28]
 800cb1c:	4413      	add	r3, r2
 800cb1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb22:	691a      	ldr	r2, [r3, #16]
 800cb24:	69bb      	ldr	r3, [r7, #24]
 800cb26:	0159      	lsls	r1, r3, #5
 800cb28:	69fb      	ldr	r3, [r7, #28]
 800cb2a:	440b      	add	r3, r1
 800cb2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb30:	4619      	mov	r1, r3
 800cb32:	4b5a      	ldr	r3, [pc, #360]	; (800cc9c <USB_EPStartXfer+0x490>)
 800cb34:	4013      	ands	r3, r2
 800cb36:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800cb38:	68bb      	ldr	r3, [r7, #8]
 800cb3a:	695b      	ldr	r3, [r3, #20]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d123      	bne.n	800cb88 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800cb40:	69bb      	ldr	r3, [r7, #24]
 800cb42:	015a      	lsls	r2, r3, #5
 800cb44:	69fb      	ldr	r3, [r7, #28]
 800cb46:	4413      	add	r3, r2
 800cb48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb4c:	691a      	ldr	r2, [r3, #16]
 800cb4e:	68bb      	ldr	r3, [r7, #8]
 800cb50:	689b      	ldr	r3, [r3, #8]
 800cb52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cb56:	69b9      	ldr	r1, [r7, #24]
 800cb58:	0148      	lsls	r0, r1, #5
 800cb5a:	69f9      	ldr	r1, [r7, #28]
 800cb5c:	4401      	add	r1, r0
 800cb5e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cb62:	4313      	orrs	r3, r2
 800cb64:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cb66:	69bb      	ldr	r3, [r7, #24]
 800cb68:	015a      	lsls	r2, r3, #5
 800cb6a:	69fb      	ldr	r3, [r7, #28]
 800cb6c:	4413      	add	r3, r2
 800cb6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb72:	691b      	ldr	r3, [r3, #16]
 800cb74:	69ba      	ldr	r2, [r7, #24]
 800cb76:	0151      	lsls	r1, r2, #5
 800cb78:	69fa      	ldr	r2, [r7, #28]
 800cb7a:	440a      	add	r2, r1
 800cb7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cb84:	6113      	str	r3, [r2, #16]
 800cb86:	e033      	b.n	800cbf0 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	695a      	ldr	r2, [r3, #20]
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	689b      	ldr	r3, [r3, #8]
 800cb90:	4413      	add	r3, r2
 800cb92:	1e5a      	subs	r2, r3, #1
 800cb94:	68bb      	ldr	r3, [r7, #8]
 800cb96:	689b      	ldr	r3, [r3, #8]
 800cb98:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb9c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800cb9e:	69bb      	ldr	r3, [r7, #24]
 800cba0:	015a      	lsls	r2, r3, #5
 800cba2:	69fb      	ldr	r3, [r7, #28]
 800cba4:	4413      	add	r3, r2
 800cba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbaa:	691a      	ldr	r2, [r3, #16]
 800cbac:	8afb      	ldrh	r3, [r7, #22]
 800cbae:	04d9      	lsls	r1, r3, #19
 800cbb0:	4b3b      	ldr	r3, [pc, #236]	; (800cca0 <USB_EPStartXfer+0x494>)
 800cbb2:	400b      	ands	r3, r1
 800cbb4:	69b9      	ldr	r1, [r7, #24]
 800cbb6:	0148      	lsls	r0, r1, #5
 800cbb8:	69f9      	ldr	r1, [r7, #28]
 800cbba:	4401      	add	r1, r0
 800cbbc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cbc0:	4313      	orrs	r3, r2
 800cbc2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800cbc4:	69bb      	ldr	r3, [r7, #24]
 800cbc6:	015a      	lsls	r2, r3, #5
 800cbc8:	69fb      	ldr	r3, [r7, #28]
 800cbca:	4413      	add	r3, r2
 800cbcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbd0:	691a      	ldr	r2, [r3, #16]
 800cbd2:	68bb      	ldr	r3, [r7, #8]
 800cbd4:	689b      	ldr	r3, [r3, #8]
 800cbd6:	8af9      	ldrh	r1, [r7, #22]
 800cbd8:	fb01 f303 	mul.w	r3, r1, r3
 800cbdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cbe0:	69b9      	ldr	r1, [r7, #24]
 800cbe2:	0148      	lsls	r0, r1, #5
 800cbe4:	69f9      	ldr	r1, [r7, #28]
 800cbe6:	4401      	add	r1, r0
 800cbe8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cbec:	4313      	orrs	r3, r2
 800cbee:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800cbf0:	79fb      	ldrb	r3, [r7, #7]
 800cbf2:	2b01      	cmp	r3, #1
 800cbf4:	d10d      	bne.n	800cc12 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	68db      	ldr	r3, [r3, #12]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d009      	beq.n	800cc12 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	68d9      	ldr	r1, [r3, #12]
 800cc02:	69bb      	ldr	r3, [r7, #24]
 800cc04:	015a      	lsls	r2, r3, #5
 800cc06:	69fb      	ldr	r3, [r7, #28]
 800cc08:	4413      	add	r3, r2
 800cc0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc0e:	460a      	mov	r2, r1
 800cc10:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	78db      	ldrb	r3, [r3, #3]
 800cc16:	2b01      	cmp	r3, #1
 800cc18:	d128      	bne.n	800cc6c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cc1a:	69fb      	ldr	r3, [r7, #28]
 800cc1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc20:	689b      	ldr	r3, [r3, #8]
 800cc22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d110      	bne.n	800cc4c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800cc2a:	69bb      	ldr	r3, [r7, #24]
 800cc2c:	015a      	lsls	r2, r3, #5
 800cc2e:	69fb      	ldr	r3, [r7, #28]
 800cc30:	4413      	add	r3, r2
 800cc32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	69ba      	ldr	r2, [r7, #24]
 800cc3a:	0151      	lsls	r1, r2, #5
 800cc3c:	69fa      	ldr	r2, [r7, #28]
 800cc3e:	440a      	add	r2, r1
 800cc40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc44:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cc48:	6013      	str	r3, [r2, #0]
 800cc4a:	e00f      	b.n	800cc6c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800cc4c:	69bb      	ldr	r3, [r7, #24]
 800cc4e:	015a      	lsls	r2, r3, #5
 800cc50:	69fb      	ldr	r3, [r7, #28]
 800cc52:	4413      	add	r3, r2
 800cc54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	69ba      	ldr	r2, [r7, #24]
 800cc5c:	0151      	lsls	r1, r2, #5
 800cc5e:	69fa      	ldr	r2, [r7, #28]
 800cc60:	440a      	add	r2, r1
 800cc62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cc6a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cc6c:	69bb      	ldr	r3, [r7, #24]
 800cc6e:	015a      	lsls	r2, r3, #5
 800cc70:	69fb      	ldr	r3, [r7, #28]
 800cc72:	4413      	add	r3, r2
 800cc74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	69ba      	ldr	r2, [r7, #24]
 800cc7c:	0151      	lsls	r1, r2, #5
 800cc7e:	69fa      	ldr	r2, [r7, #28]
 800cc80:	440a      	add	r2, r1
 800cc82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc86:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cc8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cc8c:	2300      	movs	r3, #0
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	3720      	adds	r7, #32
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}
 800cc96:	bf00      	nop
 800cc98:	fff80000 	.word	0xfff80000
 800cc9c:	e007ffff 	.word	0xe007ffff
 800cca0:	1ff80000 	.word	0x1ff80000

0800cca4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800cca4:	b480      	push	{r7}
 800cca6:	b087      	sub	sp, #28
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	60f8      	str	r0, [r7, #12]
 800ccac:	60b9      	str	r1, [r7, #8]
 800ccae:	4613      	mov	r3, r2
 800ccb0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800ccb6:	68bb      	ldr	r3, [r7, #8]
 800ccb8:	781b      	ldrb	r3, [r3, #0]
 800ccba:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ccbc:	68bb      	ldr	r3, [r7, #8]
 800ccbe:	785b      	ldrb	r3, [r3, #1]
 800ccc0:	2b01      	cmp	r3, #1
 800ccc2:	f040 80cd 	bne.w	800ce60 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	695b      	ldr	r3, [r3, #20]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d132      	bne.n	800cd34 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ccce:	693b      	ldr	r3, [r7, #16]
 800ccd0:	015a      	lsls	r2, r3, #5
 800ccd2:	697b      	ldr	r3, [r7, #20]
 800ccd4:	4413      	add	r3, r2
 800ccd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccda:	691a      	ldr	r2, [r3, #16]
 800ccdc:	693b      	ldr	r3, [r7, #16]
 800ccde:	0159      	lsls	r1, r3, #5
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	440b      	add	r3, r1
 800cce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cce8:	4619      	mov	r1, r3
 800ccea:	4b98      	ldr	r3, [pc, #608]	; (800cf4c <USB_EP0StartXfer+0x2a8>)
 800ccec:	4013      	ands	r3, r2
 800ccee:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ccf0:	693b      	ldr	r3, [r7, #16]
 800ccf2:	015a      	lsls	r2, r3, #5
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	4413      	add	r3, r2
 800ccf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccfc:	691b      	ldr	r3, [r3, #16]
 800ccfe:	693a      	ldr	r2, [r7, #16]
 800cd00:	0151      	lsls	r1, r2, #5
 800cd02:	697a      	ldr	r2, [r7, #20]
 800cd04:	440a      	add	r2, r1
 800cd06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cd0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cd10:	693b      	ldr	r3, [r7, #16]
 800cd12:	015a      	lsls	r2, r3, #5
 800cd14:	697b      	ldr	r3, [r7, #20]
 800cd16:	4413      	add	r3, r2
 800cd18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd1c:	691a      	ldr	r2, [r3, #16]
 800cd1e:	693b      	ldr	r3, [r7, #16]
 800cd20:	0159      	lsls	r1, r3, #5
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	440b      	add	r3, r1
 800cd26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd2a:	4619      	mov	r1, r3
 800cd2c:	4b88      	ldr	r3, [pc, #544]	; (800cf50 <USB_EP0StartXfer+0x2ac>)
 800cd2e:	4013      	ands	r3, r2
 800cd30:	610b      	str	r3, [r1, #16]
 800cd32:	e04e      	b.n	800cdd2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cd34:	693b      	ldr	r3, [r7, #16]
 800cd36:	015a      	lsls	r2, r3, #5
 800cd38:	697b      	ldr	r3, [r7, #20]
 800cd3a:	4413      	add	r3, r2
 800cd3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd40:	691a      	ldr	r2, [r3, #16]
 800cd42:	693b      	ldr	r3, [r7, #16]
 800cd44:	0159      	lsls	r1, r3, #5
 800cd46:	697b      	ldr	r3, [r7, #20]
 800cd48:	440b      	add	r3, r1
 800cd4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd4e:	4619      	mov	r1, r3
 800cd50:	4b7f      	ldr	r3, [pc, #508]	; (800cf50 <USB_EP0StartXfer+0x2ac>)
 800cd52:	4013      	ands	r3, r2
 800cd54:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cd56:	693b      	ldr	r3, [r7, #16]
 800cd58:	015a      	lsls	r2, r3, #5
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	4413      	add	r3, r2
 800cd5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd62:	691a      	ldr	r2, [r3, #16]
 800cd64:	693b      	ldr	r3, [r7, #16]
 800cd66:	0159      	lsls	r1, r3, #5
 800cd68:	697b      	ldr	r3, [r7, #20]
 800cd6a:	440b      	add	r3, r1
 800cd6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd70:	4619      	mov	r1, r3
 800cd72:	4b76      	ldr	r3, [pc, #472]	; (800cf4c <USB_EP0StartXfer+0x2a8>)
 800cd74:	4013      	ands	r3, r2
 800cd76:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	695a      	ldr	r2, [r3, #20]
 800cd7c:	68bb      	ldr	r3, [r7, #8]
 800cd7e:	689b      	ldr	r3, [r3, #8]
 800cd80:	429a      	cmp	r2, r3
 800cd82:	d903      	bls.n	800cd8c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800cd84:	68bb      	ldr	r3, [r7, #8]
 800cd86:	689a      	ldr	r2, [r3, #8]
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cd8c:	693b      	ldr	r3, [r7, #16]
 800cd8e:	015a      	lsls	r2, r3, #5
 800cd90:	697b      	ldr	r3, [r7, #20]
 800cd92:	4413      	add	r3, r2
 800cd94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd98:	691b      	ldr	r3, [r3, #16]
 800cd9a:	693a      	ldr	r2, [r7, #16]
 800cd9c:	0151      	lsls	r1, r2, #5
 800cd9e:	697a      	ldr	r2, [r7, #20]
 800cda0:	440a      	add	r2, r1
 800cda2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cda6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cdaa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800cdac:	693b      	ldr	r3, [r7, #16]
 800cdae:	015a      	lsls	r2, r3, #5
 800cdb0:	697b      	ldr	r3, [r7, #20]
 800cdb2:	4413      	add	r3, r2
 800cdb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdb8:	691a      	ldr	r2, [r3, #16]
 800cdba:	68bb      	ldr	r3, [r7, #8]
 800cdbc:	695b      	ldr	r3, [r3, #20]
 800cdbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cdc2:	6939      	ldr	r1, [r7, #16]
 800cdc4:	0148      	lsls	r0, r1, #5
 800cdc6:	6979      	ldr	r1, [r7, #20]
 800cdc8:	4401      	add	r1, r0
 800cdca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cdce:	4313      	orrs	r3, r2
 800cdd0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800cdd2:	79fb      	ldrb	r3, [r7, #7]
 800cdd4:	2b01      	cmp	r3, #1
 800cdd6:	d11e      	bne.n	800ce16 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	691b      	ldr	r3, [r3, #16]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d009      	beq.n	800cdf4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800cde0:	693b      	ldr	r3, [r7, #16]
 800cde2:	015a      	lsls	r2, r3, #5
 800cde4:	697b      	ldr	r3, [r7, #20]
 800cde6:	4413      	add	r3, r2
 800cde8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdec:	461a      	mov	r2, r3
 800cdee:	68bb      	ldr	r3, [r7, #8]
 800cdf0:	691b      	ldr	r3, [r3, #16]
 800cdf2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cdf4:	693b      	ldr	r3, [r7, #16]
 800cdf6:	015a      	lsls	r2, r3, #5
 800cdf8:	697b      	ldr	r3, [r7, #20]
 800cdfa:	4413      	add	r3, r2
 800cdfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	693a      	ldr	r2, [r7, #16]
 800ce04:	0151      	lsls	r1, r2, #5
 800ce06:	697a      	ldr	r2, [r7, #20]
 800ce08:	440a      	add	r2, r1
 800ce0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce0e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ce12:	6013      	str	r3, [r2, #0]
 800ce14:	e092      	b.n	800cf3c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ce16:	693b      	ldr	r3, [r7, #16]
 800ce18:	015a      	lsls	r2, r3, #5
 800ce1a:	697b      	ldr	r3, [r7, #20]
 800ce1c:	4413      	add	r3, r2
 800ce1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	693a      	ldr	r2, [r7, #16]
 800ce26:	0151      	lsls	r1, r2, #5
 800ce28:	697a      	ldr	r2, [r7, #20]
 800ce2a:	440a      	add	r2, r1
 800ce2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce30:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ce34:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800ce36:	68bb      	ldr	r3, [r7, #8]
 800ce38:	695b      	ldr	r3, [r3, #20]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d07e      	beq.n	800cf3c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ce3e:	697b      	ldr	r3, [r7, #20]
 800ce40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ce46:	68bb      	ldr	r3, [r7, #8]
 800ce48:	781b      	ldrb	r3, [r3, #0]
 800ce4a:	f003 030f 	and.w	r3, r3, #15
 800ce4e:	2101      	movs	r1, #1
 800ce50:	fa01 f303 	lsl.w	r3, r1, r3
 800ce54:	6979      	ldr	r1, [r7, #20]
 800ce56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ce5a:	4313      	orrs	r3, r2
 800ce5c:	634b      	str	r3, [r1, #52]	; 0x34
 800ce5e:	e06d      	b.n	800cf3c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ce60:	693b      	ldr	r3, [r7, #16]
 800ce62:	015a      	lsls	r2, r3, #5
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	4413      	add	r3, r2
 800ce68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce6c:	691a      	ldr	r2, [r3, #16]
 800ce6e:	693b      	ldr	r3, [r7, #16]
 800ce70:	0159      	lsls	r1, r3, #5
 800ce72:	697b      	ldr	r3, [r7, #20]
 800ce74:	440b      	add	r3, r1
 800ce76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce7a:	4619      	mov	r1, r3
 800ce7c:	4b34      	ldr	r3, [pc, #208]	; (800cf50 <USB_EP0StartXfer+0x2ac>)
 800ce7e:	4013      	ands	r3, r2
 800ce80:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ce82:	693b      	ldr	r3, [r7, #16]
 800ce84:	015a      	lsls	r2, r3, #5
 800ce86:	697b      	ldr	r3, [r7, #20]
 800ce88:	4413      	add	r3, r2
 800ce8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce8e:	691a      	ldr	r2, [r3, #16]
 800ce90:	693b      	ldr	r3, [r7, #16]
 800ce92:	0159      	lsls	r1, r3, #5
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	440b      	add	r3, r1
 800ce98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce9c:	4619      	mov	r1, r3
 800ce9e:	4b2b      	ldr	r3, [pc, #172]	; (800cf4c <USB_EP0StartXfer+0x2a8>)
 800cea0:	4013      	ands	r3, r2
 800cea2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	695b      	ldr	r3, [r3, #20]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d003      	beq.n	800ceb4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800ceac:	68bb      	ldr	r3, [r7, #8]
 800ceae:	689a      	ldr	r2, [r3, #8]
 800ceb0:	68bb      	ldr	r3, [r7, #8]
 800ceb2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ceb4:	693b      	ldr	r3, [r7, #16]
 800ceb6:	015a      	lsls	r2, r3, #5
 800ceb8:	697b      	ldr	r3, [r7, #20]
 800ceba:	4413      	add	r3, r2
 800cebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cec0:	691b      	ldr	r3, [r3, #16]
 800cec2:	693a      	ldr	r2, [r7, #16]
 800cec4:	0151      	lsls	r1, r2, #5
 800cec6:	697a      	ldr	r2, [r7, #20]
 800cec8:	440a      	add	r2, r1
 800ceca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cece:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ced2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800ced4:	693b      	ldr	r3, [r7, #16]
 800ced6:	015a      	lsls	r2, r3, #5
 800ced8:	697b      	ldr	r3, [r7, #20]
 800ceda:	4413      	add	r3, r2
 800cedc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cee0:	691a      	ldr	r2, [r3, #16]
 800cee2:	68bb      	ldr	r3, [r7, #8]
 800cee4:	689b      	ldr	r3, [r3, #8]
 800cee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ceea:	6939      	ldr	r1, [r7, #16]
 800ceec:	0148      	lsls	r0, r1, #5
 800ceee:	6979      	ldr	r1, [r7, #20]
 800cef0:	4401      	add	r1, r0
 800cef2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cef6:	4313      	orrs	r3, r2
 800cef8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800cefa:	79fb      	ldrb	r3, [r7, #7]
 800cefc:	2b01      	cmp	r3, #1
 800cefe:	d10d      	bne.n	800cf1c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800cf00:	68bb      	ldr	r3, [r7, #8]
 800cf02:	68db      	ldr	r3, [r3, #12]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d009      	beq.n	800cf1c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	68d9      	ldr	r1, [r3, #12]
 800cf0c:	693b      	ldr	r3, [r7, #16]
 800cf0e:	015a      	lsls	r2, r3, #5
 800cf10:	697b      	ldr	r3, [r7, #20]
 800cf12:	4413      	add	r3, r2
 800cf14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf18:	460a      	mov	r2, r1
 800cf1a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cf1c:	693b      	ldr	r3, [r7, #16]
 800cf1e:	015a      	lsls	r2, r3, #5
 800cf20:	697b      	ldr	r3, [r7, #20]
 800cf22:	4413      	add	r3, r2
 800cf24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	693a      	ldr	r2, [r7, #16]
 800cf2c:	0151      	lsls	r1, r2, #5
 800cf2e:	697a      	ldr	r2, [r7, #20]
 800cf30:	440a      	add	r2, r1
 800cf32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cf3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cf3c:	2300      	movs	r3, #0
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	371c      	adds	r7, #28
 800cf42:	46bd      	mov	sp, r7
 800cf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf48:	4770      	bx	lr
 800cf4a:	bf00      	nop
 800cf4c:	e007ffff 	.word	0xe007ffff
 800cf50:	fff80000 	.word	0xfff80000

0800cf54 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800cf54:	b480      	push	{r7}
 800cf56:	b089      	sub	sp, #36	; 0x24
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	60f8      	str	r0, [r7, #12]
 800cf5c:	60b9      	str	r1, [r7, #8]
 800cf5e:	4611      	mov	r1, r2
 800cf60:	461a      	mov	r2, r3
 800cf62:	460b      	mov	r3, r1
 800cf64:	71fb      	strb	r3, [r7, #7]
 800cf66:	4613      	mov	r3, r2
 800cf68:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800cf72:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d11a      	bne.n	800cfb0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800cf7a:	88bb      	ldrh	r3, [r7, #4]
 800cf7c:	3303      	adds	r3, #3
 800cf7e:	089b      	lsrs	r3, r3, #2
 800cf80:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800cf82:	2300      	movs	r3, #0
 800cf84:	61bb      	str	r3, [r7, #24]
 800cf86:	e00f      	b.n	800cfa8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cf88:	79fb      	ldrb	r3, [r7, #7]
 800cf8a:	031a      	lsls	r2, r3, #12
 800cf8c:	697b      	ldr	r3, [r7, #20]
 800cf8e:	4413      	add	r3, r2
 800cf90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf94:	461a      	mov	r2, r3
 800cf96:	69fb      	ldr	r3, [r7, #28]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800cf9c:	69fb      	ldr	r3, [r7, #28]
 800cf9e:	3304      	adds	r3, #4
 800cfa0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800cfa2:	69bb      	ldr	r3, [r7, #24]
 800cfa4:	3301      	adds	r3, #1
 800cfa6:	61bb      	str	r3, [r7, #24]
 800cfa8:	69ba      	ldr	r2, [r7, #24]
 800cfaa:	693b      	ldr	r3, [r7, #16]
 800cfac:	429a      	cmp	r2, r3
 800cfae:	d3eb      	bcc.n	800cf88 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800cfb0:	2300      	movs	r3, #0
}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	3724      	adds	r7, #36	; 0x24
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbc:	4770      	bx	lr

0800cfbe <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800cfbe:	b480      	push	{r7}
 800cfc0:	b089      	sub	sp, #36	; 0x24
 800cfc2:	af00      	add	r7, sp, #0
 800cfc4:	60f8      	str	r0, [r7, #12]
 800cfc6:	60b9      	str	r1, [r7, #8]
 800cfc8:	4613      	mov	r3, r2
 800cfca:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800cfd0:	68bb      	ldr	r3, [r7, #8]
 800cfd2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800cfd4:	88fb      	ldrh	r3, [r7, #6]
 800cfd6:	3303      	adds	r3, #3
 800cfd8:	089b      	lsrs	r3, r3, #2
 800cfda:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800cfdc:	2300      	movs	r3, #0
 800cfde:	61bb      	str	r3, [r7, #24]
 800cfe0:	e00b      	b.n	800cffa <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfe8:	681a      	ldr	r2, [r3, #0]
 800cfea:	69fb      	ldr	r3, [r7, #28]
 800cfec:	601a      	str	r2, [r3, #0]
    pDest++;
 800cfee:	69fb      	ldr	r3, [r7, #28]
 800cff0:	3304      	adds	r3, #4
 800cff2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800cff4:	69bb      	ldr	r3, [r7, #24]
 800cff6:	3301      	adds	r3, #1
 800cff8:	61bb      	str	r3, [r7, #24]
 800cffa:	69ba      	ldr	r2, [r7, #24]
 800cffc:	693b      	ldr	r3, [r7, #16]
 800cffe:	429a      	cmp	r2, r3
 800d000:	d3ef      	bcc.n	800cfe2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800d002:	69fb      	ldr	r3, [r7, #28]
}
 800d004:	4618      	mov	r0, r3
 800d006:	3724      	adds	r7, #36	; 0x24
 800d008:	46bd      	mov	sp, r7
 800d00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00e:	4770      	bx	lr

0800d010 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d010:	b480      	push	{r7}
 800d012:	b085      	sub	sp, #20
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
 800d018:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	781b      	ldrb	r3, [r3, #0]
 800d022:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	785b      	ldrb	r3, [r3, #1]
 800d028:	2b01      	cmp	r3, #1
 800d02a:	d12c      	bne.n	800d086 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	015a      	lsls	r2, r3, #5
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	4413      	add	r3, r2
 800d034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	db12      	blt.n	800d064 <USB_EPSetStall+0x54>
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d00f      	beq.n	800d064 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	015a      	lsls	r2, r3, #5
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	4413      	add	r3, r2
 800d04c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	68ba      	ldr	r2, [r7, #8]
 800d054:	0151      	lsls	r1, r2, #5
 800d056:	68fa      	ldr	r2, [r7, #12]
 800d058:	440a      	add	r2, r1
 800d05a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d05e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d062:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d064:	68bb      	ldr	r3, [r7, #8]
 800d066:	015a      	lsls	r2, r3, #5
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	4413      	add	r3, r2
 800d06c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	68ba      	ldr	r2, [r7, #8]
 800d074:	0151      	lsls	r1, r2, #5
 800d076:	68fa      	ldr	r2, [r7, #12]
 800d078:	440a      	add	r2, r1
 800d07a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d07e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d082:	6013      	str	r3, [r2, #0]
 800d084:	e02b      	b.n	800d0de <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d086:	68bb      	ldr	r3, [r7, #8]
 800d088:	015a      	lsls	r2, r3, #5
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	4413      	add	r3, r2
 800d08e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	2b00      	cmp	r3, #0
 800d096:	db12      	blt.n	800d0be <USB_EPSetStall+0xae>
 800d098:	68bb      	ldr	r3, [r7, #8]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d00f      	beq.n	800d0be <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	015a      	lsls	r2, r3, #5
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	4413      	add	r3, r2
 800d0a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	68ba      	ldr	r2, [r7, #8]
 800d0ae:	0151      	lsls	r1, r2, #5
 800d0b0:	68fa      	ldr	r2, [r7, #12]
 800d0b2:	440a      	add	r2, r1
 800d0b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d0b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d0bc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	015a      	lsls	r2, r3, #5
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	4413      	add	r3, r2
 800d0c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	68ba      	ldr	r2, [r7, #8]
 800d0ce:	0151      	lsls	r1, r2, #5
 800d0d0:	68fa      	ldr	r2, [r7, #12]
 800d0d2:	440a      	add	r2, r1
 800d0d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d0d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d0dc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d0de:	2300      	movs	r3, #0
}
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	3714      	adds	r7, #20
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ea:	4770      	bx	lr

0800d0ec <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d0ec:	b480      	push	{r7}
 800d0ee:	b085      	sub	sp, #20
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
 800d0f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	781b      	ldrb	r3, [r3, #0]
 800d0fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	785b      	ldrb	r3, [r3, #1]
 800d104:	2b01      	cmp	r3, #1
 800d106:	d128      	bne.n	800d15a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	015a      	lsls	r2, r3, #5
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	4413      	add	r3, r2
 800d110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	68ba      	ldr	r2, [r7, #8]
 800d118:	0151      	lsls	r1, r2, #5
 800d11a:	68fa      	ldr	r2, [r7, #12]
 800d11c:	440a      	add	r2, r1
 800d11e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d122:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d126:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	78db      	ldrb	r3, [r3, #3]
 800d12c:	2b03      	cmp	r3, #3
 800d12e:	d003      	beq.n	800d138 <USB_EPClearStall+0x4c>
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	78db      	ldrb	r3, [r3, #3]
 800d134:	2b02      	cmp	r3, #2
 800d136:	d138      	bne.n	800d1aa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d138:	68bb      	ldr	r3, [r7, #8]
 800d13a:	015a      	lsls	r2, r3, #5
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	4413      	add	r3, r2
 800d140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	68ba      	ldr	r2, [r7, #8]
 800d148:	0151      	lsls	r1, r2, #5
 800d14a:	68fa      	ldr	r2, [r7, #12]
 800d14c:	440a      	add	r2, r1
 800d14e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d156:	6013      	str	r3, [r2, #0]
 800d158:	e027      	b.n	800d1aa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d15a:	68bb      	ldr	r3, [r7, #8]
 800d15c:	015a      	lsls	r2, r3, #5
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	4413      	add	r3, r2
 800d162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	68ba      	ldr	r2, [r7, #8]
 800d16a:	0151      	lsls	r1, r2, #5
 800d16c:	68fa      	ldr	r2, [r7, #12]
 800d16e:	440a      	add	r2, r1
 800d170:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d174:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d178:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	78db      	ldrb	r3, [r3, #3]
 800d17e:	2b03      	cmp	r3, #3
 800d180:	d003      	beq.n	800d18a <USB_EPClearStall+0x9e>
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	78db      	ldrb	r3, [r3, #3]
 800d186:	2b02      	cmp	r3, #2
 800d188:	d10f      	bne.n	800d1aa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	015a      	lsls	r2, r3, #5
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	4413      	add	r3, r2
 800d192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	68ba      	ldr	r2, [r7, #8]
 800d19a:	0151      	lsls	r1, r2, #5
 800d19c:	68fa      	ldr	r2, [r7, #12]
 800d19e:	440a      	add	r2, r1
 800d1a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d1a8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d1aa:	2300      	movs	r3, #0
}
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	3714      	adds	r7, #20
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b6:	4770      	bx	lr

0800d1b8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b085      	sub	sp, #20
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
 800d1c0:	460b      	mov	r3, r1
 800d1c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	68fa      	ldr	r2, [r7, #12]
 800d1d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d1d6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d1da:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1e2:	681a      	ldr	r2, [r3, #0]
 800d1e4:	78fb      	ldrb	r3, [r7, #3]
 800d1e6:	011b      	lsls	r3, r3, #4
 800d1e8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d1ec:	68f9      	ldr	r1, [r7, #12]
 800d1ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d1f2:	4313      	orrs	r3, r2
 800d1f4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d1f6:	2300      	movs	r3, #0
}
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	3714      	adds	r7, #20
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d202:	4770      	bx	lr

0800d204 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b084      	sub	sp, #16
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d216:	685b      	ldr	r3, [r3, #4]
 800d218:	68fa      	ldr	r2, [r7, #12]
 800d21a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d21e:	f023 0302 	bic.w	r3, r3, #2
 800d222:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800d224:	2003      	movs	r0, #3
 800d226:	f7f4 f9bf 	bl	80015a8 <HAL_Delay>

  return HAL_OK;
 800d22a:	2300      	movs	r3, #0
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	3710      	adds	r7, #16
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}

0800d234 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b084      	sub	sp, #16
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d246:	685b      	ldr	r3, [r3, #4]
 800d248:	68fa      	ldr	r2, [r7, #12]
 800d24a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d24e:	f043 0302 	orr.w	r3, r3, #2
 800d252:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800d254:	2003      	movs	r0, #3
 800d256:	f7f4 f9a7 	bl	80015a8 <HAL_Delay>

  return HAL_OK;
 800d25a:	2300      	movs	r3, #0
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	3710      	adds	r7, #16
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}

0800d264 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d264:	b480      	push	{r7}
 800d266:	b085      	sub	sp, #20
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	695b      	ldr	r3, [r3, #20]
 800d270:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	699b      	ldr	r3, [r3, #24]
 800d276:	68fa      	ldr	r2, [r7, #12]
 800d278:	4013      	ands	r3, r2
 800d27a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d27c:	68fb      	ldr	r3, [r7, #12]
}
 800d27e:	4618      	mov	r0, r3
 800d280:	3714      	adds	r7, #20
 800d282:	46bd      	mov	sp, r7
 800d284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d288:	4770      	bx	lr

0800d28a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d28a:	b480      	push	{r7}
 800d28c:	b085      	sub	sp, #20
 800d28e:	af00      	add	r7, sp, #0
 800d290:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d29c:	699b      	ldr	r3, [r3, #24]
 800d29e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2a6:	69db      	ldr	r3, [r3, #28]
 800d2a8:	68ba      	ldr	r2, [r7, #8]
 800d2aa:	4013      	ands	r3, r2
 800d2ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	0c1b      	lsrs	r3, r3, #16
}
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	3714      	adds	r7, #20
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2bc:	4770      	bx	lr

0800d2be <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d2be:	b480      	push	{r7}
 800d2c0:	b085      	sub	sp, #20
 800d2c2:	af00      	add	r7, sp, #0
 800d2c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2d0:	699b      	ldr	r3, [r3, #24]
 800d2d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2da:	69db      	ldr	r3, [r3, #28]
 800d2dc:	68ba      	ldr	r2, [r7, #8]
 800d2de:	4013      	ands	r3, r2
 800d2e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d2e2:	68bb      	ldr	r3, [r7, #8]
 800d2e4:	b29b      	uxth	r3, r3
}
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	3714      	adds	r7, #20
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f0:	4770      	bx	lr

0800d2f2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d2f2:	b480      	push	{r7}
 800d2f4:	b085      	sub	sp, #20
 800d2f6:	af00      	add	r7, sp, #0
 800d2f8:	6078      	str	r0, [r7, #4]
 800d2fa:	460b      	mov	r3, r1
 800d2fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d302:	78fb      	ldrb	r3, [r7, #3]
 800d304:	015a      	lsls	r2, r3, #5
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	4413      	add	r3, r2
 800d30a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d30e:	689b      	ldr	r3, [r3, #8]
 800d310:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d318:	695b      	ldr	r3, [r3, #20]
 800d31a:	68ba      	ldr	r2, [r7, #8]
 800d31c:	4013      	ands	r3, r2
 800d31e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d320:	68bb      	ldr	r3, [r7, #8]
}
 800d322:	4618      	mov	r0, r3
 800d324:	3714      	adds	r7, #20
 800d326:	46bd      	mov	sp, r7
 800d328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32c:	4770      	bx	lr

0800d32e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d32e:	b480      	push	{r7}
 800d330:	b087      	sub	sp, #28
 800d332:	af00      	add	r7, sp, #0
 800d334:	6078      	str	r0, [r7, #4]
 800d336:	460b      	mov	r3, r1
 800d338:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d33e:	697b      	ldr	r3, [r7, #20]
 800d340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d344:	691b      	ldr	r3, [r3, #16]
 800d346:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d348:	697b      	ldr	r3, [r7, #20]
 800d34a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d34e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d350:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d352:	78fb      	ldrb	r3, [r7, #3]
 800d354:	f003 030f 	and.w	r3, r3, #15
 800d358:	68fa      	ldr	r2, [r7, #12]
 800d35a:	fa22 f303 	lsr.w	r3, r2, r3
 800d35e:	01db      	lsls	r3, r3, #7
 800d360:	b2db      	uxtb	r3, r3
 800d362:	693a      	ldr	r2, [r7, #16]
 800d364:	4313      	orrs	r3, r2
 800d366:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d368:	78fb      	ldrb	r3, [r7, #3]
 800d36a:	015a      	lsls	r2, r3, #5
 800d36c:	697b      	ldr	r3, [r7, #20]
 800d36e:	4413      	add	r3, r2
 800d370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d374:	689b      	ldr	r3, [r3, #8]
 800d376:	693a      	ldr	r2, [r7, #16]
 800d378:	4013      	ands	r3, r2
 800d37a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d37c:	68bb      	ldr	r3, [r7, #8]
}
 800d37e:	4618      	mov	r0, r3
 800d380:	371c      	adds	r7, #28
 800d382:	46bd      	mov	sp, r7
 800d384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d388:	4770      	bx	lr

0800d38a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d38a:	b480      	push	{r7}
 800d38c:	b083      	sub	sp, #12
 800d38e:	af00      	add	r7, sp, #0
 800d390:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	695b      	ldr	r3, [r3, #20]
 800d396:	f003 0301 	and.w	r3, r3, #1
}
 800d39a:	4618      	mov	r0, r3
 800d39c:	370c      	adds	r7, #12
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a4:	4770      	bx	lr
	...

0800d3a8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d3a8:	b480      	push	{r7}
 800d3aa:	b085      	sub	sp, #20
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3ba:	681a      	ldr	r2, [r3, #0]
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3c2:	4619      	mov	r1, r3
 800d3c4:	4b09      	ldr	r3, [pc, #36]	; (800d3ec <USB_ActivateSetup+0x44>)
 800d3c6:	4013      	ands	r3, r2
 800d3c8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3d0:	685b      	ldr	r3, [r3, #4]
 800d3d2:	68fa      	ldr	r2, [r7, #12]
 800d3d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d3d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d3dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d3de:	2300      	movs	r3, #0
}
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	3714      	adds	r7, #20
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ea:	4770      	bx	lr
 800d3ec:	fffff800 	.word	0xfffff800

0800d3f0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800d3f0:	b480      	push	{r7}
 800d3f2:	b087      	sub	sp, #28
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	60f8      	str	r0, [r7, #12]
 800d3f8:	460b      	mov	r3, r1
 800d3fa:	607a      	str	r2, [r7, #4]
 800d3fc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	333c      	adds	r3, #60	; 0x3c
 800d406:	3304      	adds	r3, #4
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d40c:	693b      	ldr	r3, [r7, #16]
 800d40e:	4a26      	ldr	r2, [pc, #152]	; (800d4a8 <USB_EP0_OutStart+0xb8>)
 800d410:	4293      	cmp	r3, r2
 800d412:	d90a      	bls.n	800d42a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d414:	697b      	ldr	r3, [r7, #20]
 800d416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d420:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d424:	d101      	bne.n	800d42a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d426:	2300      	movs	r3, #0
 800d428:	e037      	b.n	800d49a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d42a:	697b      	ldr	r3, [r7, #20]
 800d42c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d430:	461a      	mov	r2, r3
 800d432:	2300      	movs	r3, #0
 800d434:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d436:	697b      	ldr	r3, [r7, #20]
 800d438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d43c:	691b      	ldr	r3, [r3, #16]
 800d43e:	697a      	ldr	r2, [r7, #20]
 800d440:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d444:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d448:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d44a:	697b      	ldr	r3, [r7, #20]
 800d44c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d450:	691b      	ldr	r3, [r3, #16]
 800d452:	697a      	ldr	r2, [r7, #20]
 800d454:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d458:	f043 0318 	orr.w	r3, r3, #24
 800d45c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d45e:	697b      	ldr	r3, [r7, #20]
 800d460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d464:	691b      	ldr	r3, [r3, #16]
 800d466:	697a      	ldr	r2, [r7, #20]
 800d468:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d46c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d470:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d472:	7afb      	ldrb	r3, [r7, #11]
 800d474:	2b01      	cmp	r3, #1
 800d476:	d10f      	bne.n	800d498 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d478:	697b      	ldr	r3, [r7, #20]
 800d47a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d47e:	461a      	mov	r2, r3
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d484:	697b      	ldr	r3, [r7, #20]
 800d486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	697a      	ldr	r2, [r7, #20]
 800d48e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d492:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d496:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d498:	2300      	movs	r3, #0
}
 800d49a:	4618      	mov	r0, r3
 800d49c:	371c      	adds	r7, #28
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a4:	4770      	bx	lr
 800d4a6:	bf00      	nop
 800d4a8:	4f54300a 	.word	0x4f54300a

0800d4ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d4ac:	b480      	push	{r7}
 800d4ae:	b085      	sub	sp, #20
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	3301      	adds	r3, #1
 800d4bc:	60fb      	str	r3, [r7, #12]
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	4a13      	ldr	r2, [pc, #76]	; (800d510 <USB_CoreReset+0x64>)
 800d4c2:	4293      	cmp	r3, r2
 800d4c4:	d901      	bls.n	800d4ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d4c6:	2303      	movs	r3, #3
 800d4c8:	e01b      	b.n	800d502 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	691b      	ldr	r3, [r3, #16]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	daf2      	bge.n	800d4b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	691b      	ldr	r3, [r3, #16]
 800d4da:	f043 0201 	orr.w	r2, r3, #1
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	3301      	adds	r3, #1
 800d4e6:	60fb      	str	r3, [r7, #12]
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	4a09      	ldr	r2, [pc, #36]	; (800d510 <USB_CoreReset+0x64>)
 800d4ec:	4293      	cmp	r3, r2
 800d4ee:	d901      	bls.n	800d4f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d4f0:	2303      	movs	r3, #3
 800d4f2:	e006      	b.n	800d502 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	691b      	ldr	r3, [r3, #16]
 800d4f8:	f003 0301 	and.w	r3, r3, #1
 800d4fc:	2b01      	cmp	r3, #1
 800d4fe:	d0f0      	beq.n	800d4e2 <USB_CoreReset+0x36>

  return HAL_OK;
 800d500:	2300      	movs	r3, #0
}
 800d502:	4618      	mov	r0, r3
 800d504:	3714      	adds	r7, #20
 800d506:	46bd      	mov	sp, r7
 800d508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50c:	4770      	bx	lr
 800d50e:	bf00      	nop
 800d510:	00030d40 	.word	0x00030d40

0800d514 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d518:	4904      	ldr	r1, [pc, #16]	; (800d52c <MX_FATFS_Init+0x18>)
 800d51a:	4805      	ldr	r0, [pc, #20]	; (800d530 <MX_FATFS_Init+0x1c>)
 800d51c:	f001 fdf0 	bl	800f100 <FATFS_LinkDriver>
 800d520:	4603      	mov	r3, r0
 800d522:	461a      	mov	r2, r3
 800d524:	4b03      	ldr	r3, [pc, #12]	; (800d534 <MX_FATFS_Init+0x20>)
 800d526:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d528:	bf00      	nop
 800d52a:	bd80      	pop	{r7, pc}
 800d52c:	2400064c 	.word	0x2400064c
 800d530:	0800fe34 	.word	0x0800fe34
 800d534:	24000648 	.word	0x24000648

0800d538 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b082      	sub	sp, #8
 800d53c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d53e:	2300      	movs	r3, #0
 800d540:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d542:	f000 f879 	bl	800d638 <BSP_SD_IsDetected>
 800d546:	4603      	mov	r3, r0
 800d548:	2b01      	cmp	r3, #1
 800d54a:	d001      	beq.n	800d550 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800d54c:	2302      	movs	r3, #2
 800d54e:	e012      	b.n	800d576 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800d550:	480b      	ldr	r0, [pc, #44]	; (800d580 <BSP_SD_Init+0x48>)
 800d552:	f7fb f821 	bl	8008598 <HAL_SD_Init>
 800d556:	4603      	mov	r3, r0
 800d558:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d55a:	79fb      	ldrb	r3, [r7, #7]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d109      	bne.n	800d574 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800d560:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800d564:	4806      	ldr	r0, [pc, #24]	; (800d580 <BSP_SD_Init+0x48>)
 800d566:	f7fb fee5 	bl	8009334 <HAL_SD_ConfigWideBusOperation>
 800d56a:	4603      	mov	r3, r0
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d001      	beq.n	800d574 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d570:	2301      	movs	r3, #1
 800d572:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d574:	79fb      	ldrb	r3, [r7, #7]
}
 800d576:	4618      	mov	r0, r3
 800d578:	3708      	adds	r7, #8
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd80      	pop	{r7, pc}
 800d57e:	bf00      	nop
 800d580:	24000328 	.word	0x24000328

0800d584 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b088      	sub	sp, #32
 800d588:	af02      	add	r7, sp, #8
 800d58a:	60f8      	str	r0, [r7, #12]
 800d58c:	60b9      	str	r1, [r7, #8]
 800d58e:	607a      	str	r2, [r7, #4]
 800d590:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d592:	2300      	movs	r3, #0
 800d594:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	9300      	str	r3, [sp, #0]
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	68ba      	ldr	r2, [r7, #8]
 800d59e:	68f9      	ldr	r1, [r7, #12]
 800d5a0:	4806      	ldr	r0, [pc, #24]	; (800d5bc <BSP_SD_ReadBlocks+0x38>)
 800d5a2:	f7fb f91d 	bl	80087e0 <HAL_SD_ReadBlocks>
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d001      	beq.n	800d5b0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d5ac:	2301      	movs	r3, #1
 800d5ae:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d5b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	3718      	adds	r7, #24
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd80      	pop	{r7, pc}
 800d5ba:	bf00      	nop
 800d5bc:	24000328 	.word	0x24000328

0800d5c0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b088      	sub	sp, #32
 800d5c4:	af02      	add	r7, sp, #8
 800d5c6:	60f8      	str	r0, [r7, #12]
 800d5c8:	60b9      	str	r1, [r7, #8]
 800d5ca:	607a      	str	r2, [r7, #4]
 800d5cc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	9300      	str	r3, [sp, #0]
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	68ba      	ldr	r2, [r7, #8]
 800d5da:	68f9      	ldr	r1, [r7, #12]
 800d5dc:	4806      	ldr	r0, [pc, #24]	; (800d5f8 <BSP_SD_WriteBlocks+0x38>)
 800d5de:	f7fb fa89 	bl	8008af4 <HAL_SD_WriteBlocks>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d001      	beq.n	800d5ec <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d5ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	3718      	adds	r7, #24
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}
 800d5f6:	bf00      	nop
 800d5f8:	24000328 	.word	0x24000328

0800d5fc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d600:	4805      	ldr	r0, [pc, #20]	; (800d618 <BSP_SD_GetCardState+0x1c>)
 800d602:	f7fb ff41 	bl	8009488 <HAL_SD_GetCardState>
 800d606:	4603      	mov	r3, r0
 800d608:	2b04      	cmp	r3, #4
 800d60a:	bf14      	ite	ne
 800d60c:	2301      	movne	r3, #1
 800d60e:	2300      	moveq	r3, #0
 800d610:	b2db      	uxtb	r3, r3
}
 800d612:	4618      	mov	r0, r3
 800d614:	bd80      	pop	{r7, pc}
 800d616:	bf00      	nop
 800d618:	24000328 	.word	0x24000328

0800d61c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b082      	sub	sp, #8
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800d624:	6879      	ldr	r1, [r7, #4]
 800d626:	4803      	ldr	r0, [pc, #12]	; (800d634 <BSP_SD_GetCardInfo+0x18>)
 800d628:	f7fb fe58 	bl	80092dc <HAL_SD_GetCardInfo>
}
 800d62c:	bf00      	nop
 800d62e:	3708      	adds	r7, #8
 800d630:	46bd      	mov	sp, r7
 800d632:	bd80      	pop	{r7, pc}
 800d634:	24000328 	.word	0x24000328

0800d638 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b082      	sub	sp, #8
 800d63c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d63e:	2301      	movs	r3, #1
 800d640:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d642:	f000 f80b 	bl	800d65c <BSP_PlatformIsDetected>
 800d646:	4603      	mov	r3, r0
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d101      	bne.n	800d650 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d64c:	2300      	movs	r3, #0
 800d64e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d650:	79fb      	ldrb	r3, [r7, #7]
 800d652:	b2db      	uxtb	r3, r3
}
 800d654:	4618      	mov	r0, r3
 800d656:	3708      	adds	r7, #8
 800d658:	46bd      	mov	sp, r7
 800d65a:	bd80      	pop	{r7, pc}

0800d65c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b082      	sub	sp, #8
 800d660:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d662:	2301      	movs	r3, #1
 800d664:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d666:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d66a:	4806      	ldr	r0, [pc, #24]	; (800d684 <BSP_PlatformIsDetected+0x28>)
 800d66c:	f7f6 feca 	bl	8004404 <HAL_GPIO_ReadPin>
 800d670:	4603      	mov	r3, r0
 800d672:	2b00      	cmp	r3, #0
 800d674:	d001      	beq.n	800d67a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800d676:	2300      	movs	r3, #0
 800d678:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d67a:	79fb      	ldrb	r3, [r7, #7]
}
 800d67c:	4618      	mov	r0, r3
 800d67e:	3708      	adds	r7, #8
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}
 800d684:	58020000 	.word	0x58020000

0800d688 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b082      	sub	sp, #8
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	4603      	mov	r3, r0
 800d690:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d692:	4b0b      	ldr	r3, [pc, #44]	; (800d6c0 <SD_CheckStatus+0x38>)
 800d694:	2201      	movs	r2, #1
 800d696:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d698:	f7ff ffb0 	bl	800d5fc <BSP_SD_GetCardState>
 800d69c:	4603      	mov	r3, r0
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d107      	bne.n	800d6b2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d6a2:	4b07      	ldr	r3, [pc, #28]	; (800d6c0 <SD_CheckStatus+0x38>)
 800d6a4:	781b      	ldrb	r3, [r3, #0]
 800d6a6:	b2db      	uxtb	r3, r3
 800d6a8:	f023 0301 	bic.w	r3, r3, #1
 800d6ac:	b2da      	uxtb	r2, r3
 800d6ae:	4b04      	ldr	r3, [pc, #16]	; (800d6c0 <SD_CheckStatus+0x38>)
 800d6b0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d6b2:	4b03      	ldr	r3, [pc, #12]	; (800d6c0 <SD_CheckStatus+0x38>)
 800d6b4:	781b      	ldrb	r3, [r3, #0]
 800d6b6:	b2db      	uxtb	r3, r3
}
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	3708      	adds	r7, #8
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bd80      	pop	{r7, pc}
 800d6c0:	2400000d 	.word	0x2400000d

0800d6c4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b082      	sub	sp, #8
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800d6ce:	4b0b      	ldr	r3, [pc, #44]	; (800d6fc <SD_initialize+0x38>)
 800d6d0:	2201      	movs	r2, #1
 800d6d2:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d6d4:	f7ff ff30 	bl	800d538 <BSP_SD_Init>
 800d6d8:	4603      	mov	r3, r0
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d107      	bne.n	800d6ee <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800d6de:	79fb      	ldrb	r3, [r7, #7]
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f7ff ffd1 	bl	800d688 <SD_CheckStatus>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	461a      	mov	r2, r3
 800d6ea:	4b04      	ldr	r3, [pc, #16]	; (800d6fc <SD_initialize+0x38>)
 800d6ec:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d6ee:	4b03      	ldr	r3, [pc, #12]	; (800d6fc <SD_initialize+0x38>)
 800d6f0:	781b      	ldrb	r3, [r3, #0]
 800d6f2:	b2db      	uxtb	r3, r3
}
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	3708      	adds	r7, #8
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}
 800d6fc:	2400000d 	.word	0x2400000d

0800d700 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b082      	sub	sp, #8
 800d704:	af00      	add	r7, sp, #0
 800d706:	4603      	mov	r3, r0
 800d708:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d70a:	79fb      	ldrb	r3, [r7, #7]
 800d70c:	4618      	mov	r0, r3
 800d70e:	f7ff ffbb 	bl	800d688 <SD_CheckStatus>
 800d712:	4603      	mov	r3, r0
}
 800d714:	4618      	mov	r0, r3
 800d716:	3708      	adds	r7, #8
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd80      	pop	{r7, pc}

0800d71c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b086      	sub	sp, #24
 800d720:	af00      	add	r7, sp, #0
 800d722:	60b9      	str	r1, [r7, #8]
 800d724:	607a      	str	r2, [r7, #4]
 800d726:	603b      	str	r3, [r7, #0]
 800d728:	4603      	mov	r3, r0
 800d72a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d72c:	2301      	movs	r3, #1
 800d72e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800d730:	f04f 33ff 	mov.w	r3, #4294967295
 800d734:	683a      	ldr	r2, [r7, #0]
 800d736:	6879      	ldr	r1, [r7, #4]
 800d738:	68b8      	ldr	r0, [r7, #8]
 800d73a:	f7ff ff23 	bl	800d584 <BSP_SD_ReadBlocks>
 800d73e:	4603      	mov	r3, r0
 800d740:	2b00      	cmp	r3, #0
 800d742:	d107      	bne.n	800d754 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800d744:	bf00      	nop
 800d746:	f7ff ff59 	bl	800d5fc <BSP_SD_GetCardState>
 800d74a:	4603      	mov	r3, r0
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d1fa      	bne.n	800d746 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800d750:	2300      	movs	r3, #0
 800d752:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d754:	7dfb      	ldrb	r3, [r7, #23]
}
 800d756:	4618      	mov	r0, r3
 800d758:	3718      	adds	r7, #24
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}

0800d75e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d75e:	b580      	push	{r7, lr}
 800d760:	b086      	sub	sp, #24
 800d762:	af00      	add	r7, sp, #0
 800d764:	60b9      	str	r1, [r7, #8]
 800d766:	607a      	str	r2, [r7, #4]
 800d768:	603b      	str	r3, [r7, #0]
 800d76a:	4603      	mov	r3, r0
 800d76c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d76e:	2301      	movs	r3, #1
 800d770:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800d772:	f04f 33ff 	mov.w	r3, #4294967295
 800d776:	683a      	ldr	r2, [r7, #0]
 800d778:	6879      	ldr	r1, [r7, #4]
 800d77a:	68b8      	ldr	r0, [r7, #8]
 800d77c:	f7ff ff20 	bl	800d5c0 <BSP_SD_WriteBlocks>
 800d780:	4603      	mov	r3, r0
 800d782:	2b00      	cmp	r3, #0
 800d784:	d107      	bne.n	800d796 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800d786:	bf00      	nop
 800d788:	f7ff ff38 	bl	800d5fc <BSP_SD_GetCardState>
 800d78c:	4603      	mov	r3, r0
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d1fa      	bne.n	800d788 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800d792:	2300      	movs	r3, #0
 800d794:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d796:	7dfb      	ldrb	r3, [r7, #23]
}
 800d798:	4618      	mov	r0, r3
 800d79a:	3718      	adds	r7, #24
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}

0800d7a0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b08c      	sub	sp, #48	; 0x30
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	603a      	str	r2, [r7, #0]
 800d7aa:	71fb      	strb	r3, [r7, #7]
 800d7ac:	460b      	mov	r3, r1
 800d7ae:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d7b6:	4b25      	ldr	r3, [pc, #148]	; (800d84c <SD_ioctl+0xac>)
 800d7b8:	781b      	ldrb	r3, [r3, #0]
 800d7ba:	b2db      	uxtb	r3, r3
 800d7bc:	f003 0301 	and.w	r3, r3, #1
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d001      	beq.n	800d7c8 <SD_ioctl+0x28>
 800d7c4:	2303      	movs	r3, #3
 800d7c6:	e03c      	b.n	800d842 <SD_ioctl+0xa2>

  switch (cmd)
 800d7c8:	79bb      	ldrb	r3, [r7, #6]
 800d7ca:	2b03      	cmp	r3, #3
 800d7cc:	d834      	bhi.n	800d838 <SD_ioctl+0x98>
 800d7ce:	a201      	add	r2, pc, #4	; (adr r2, 800d7d4 <SD_ioctl+0x34>)
 800d7d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7d4:	0800d7e5 	.word	0x0800d7e5
 800d7d8:	0800d7ed 	.word	0x0800d7ed
 800d7dc:	0800d805 	.word	0x0800d805
 800d7e0:	0800d81f 	.word	0x0800d81f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d7ea:	e028      	b.n	800d83e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d7ec:	f107 0308 	add.w	r3, r7, #8
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	f7ff ff13 	bl	800d61c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d7f6:	6a3a      	ldr	r2, [r7, #32]
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d802:	e01c      	b.n	800d83e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d804:	f107 0308 	add.w	r3, r7, #8
 800d808:	4618      	mov	r0, r3
 800d80a:	f7ff ff07 	bl	800d61c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d810:	b29a      	uxth	r2, r3
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d816:	2300      	movs	r3, #0
 800d818:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d81c:	e00f      	b.n	800d83e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d81e:	f107 0308 	add.w	r3, r7, #8
 800d822:	4618      	mov	r0, r3
 800d824:	f7ff fefa 	bl	800d61c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d82a:	0a5a      	lsrs	r2, r3, #9
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d830:	2300      	movs	r3, #0
 800d832:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d836:	e002      	b.n	800d83e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d838:	2304      	movs	r3, #4
 800d83a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d83e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d842:	4618      	mov	r0, r3
 800d844:	3730      	adds	r7, #48	; 0x30
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}
 800d84a:	bf00      	nop
 800d84c:	2400000d 	.word	0x2400000d

0800d850 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b084      	sub	sp, #16
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
 800d858:	460b      	mov	r3, r1
 800d85a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d85c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d860:	f002 f98c 	bl	800fb7c <malloc>
 800d864:	4603      	mov	r3, r0
 800d866:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d105      	bne.n	800d87a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	2200      	movs	r2, #0
 800d872:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800d876:	2302      	movs	r3, #2
 800d878:	e066      	b.n	800d948 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	68fa      	ldr	r2, [r7, #12]
 800d87e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	7c1b      	ldrb	r3, [r3, #16]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d119      	bne.n	800d8be <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d88a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d88e:	2202      	movs	r2, #2
 800d890:	2181      	movs	r1, #129	; 0x81
 800d892:	6878      	ldr	r0, [r7, #4]
 800d894:	f001 fff9 	bl	800f88a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2201      	movs	r2, #1
 800d89c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d89e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d8a2:	2202      	movs	r2, #2
 800d8a4:	2101      	movs	r1, #1
 800d8a6:	6878      	ldr	r0, [r7, #4]
 800d8a8:	f001 ffef 	bl	800f88a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2201      	movs	r2, #1
 800d8b0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2210      	movs	r2, #16
 800d8b8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800d8bc:	e016      	b.n	800d8ec <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d8be:	2340      	movs	r3, #64	; 0x40
 800d8c0:	2202      	movs	r2, #2
 800d8c2:	2181      	movs	r1, #129	; 0x81
 800d8c4:	6878      	ldr	r0, [r7, #4]
 800d8c6:	f001 ffe0 	bl	800f88a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	2201      	movs	r2, #1
 800d8ce:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d8d0:	2340      	movs	r3, #64	; 0x40
 800d8d2:	2202      	movs	r2, #2
 800d8d4:	2101      	movs	r1, #1
 800d8d6:	6878      	ldr	r0, [r7, #4]
 800d8d8:	f001 ffd7 	bl	800f88a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2201      	movs	r2, #1
 800d8e0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2210      	movs	r2, #16
 800d8e8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d8ec:	2308      	movs	r3, #8
 800d8ee:	2203      	movs	r2, #3
 800d8f0:	2182      	movs	r1, #130	; 0x82
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f001 ffc9 	bl	800f88a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2201      	movs	r2, #1
 800d8fc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	2200      	movs	r2, #0
 800d90e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	2200      	movs	r2, #0
 800d916:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	7c1b      	ldrb	r3, [r3, #16]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d109      	bne.n	800d936 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d928:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d92c:	2101      	movs	r1, #1
 800d92e:	6878      	ldr	r0, [r7, #4]
 800d930:	f002 f89a 	bl	800fa68 <USBD_LL_PrepareReceive>
 800d934:	e007      	b.n	800d946 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d93c:	2340      	movs	r3, #64	; 0x40
 800d93e:	2101      	movs	r1, #1
 800d940:	6878      	ldr	r0, [r7, #4]
 800d942:	f002 f891 	bl	800fa68 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d946:	2300      	movs	r3, #0
}
 800d948:	4618      	mov	r0, r3
 800d94a:	3710      	adds	r7, #16
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd80      	pop	{r7, pc}

0800d950 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b084      	sub	sp, #16
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
 800d958:	460b      	mov	r3, r1
 800d95a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800d95c:	2300      	movs	r3, #0
 800d95e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d960:	2181      	movs	r1, #129	; 0x81
 800d962:	6878      	ldr	r0, [r7, #4]
 800d964:	f001 ffb7 	bl	800f8d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2200      	movs	r2, #0
 800d96c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d96e:	2101      	movs	r1, #1
 800d970:	6878      	ldr	r0, [r7, #4]
 800d972:	f001 ffb0 	bl	800f8d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2200      	movs	r2, #0
 800d97a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d97e:	2182      	movs	r1, #130	; 0x82
 800d980:	6878      	ldr	r0, [r7, #4]
 800d982:	f001 ffa8 	bl	800f8d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	2200      	movs	r2, #0
 800d98a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	2200      	movs	r2, #0
 800d992:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d00e      	beq.n	800d9be <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d9a6:	685b      	ldr	r3, [r3, #4]
 800d9a8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f002 f8eb 	bl	800fb8c <free>
    pdev->pClassData = NULL;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800d9be:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	3710      	adds	r7, #16
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd80      	pop	{r7, pc}

0800d9c8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b086      	sub	sp, #24
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
 800d9d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d9d8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800d9da:	2300      	movs	r3, #0
 800d9dc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800d9de:	2300      	movs	r3, #0
 800d9e0:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	781b      	ldrb	r3, [r3, #0]
 800d9ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d03a      	beq.n	800da68 <USBD_CDC_Setup+0xa0>
 800d9f2:	2b20      	cmp	r3, #32
 800d9f4:	f040 8097 	bne.w	800db26 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	88db      	ldrh	r3, [r3, #6]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d029      	beq.n	800da54 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	781b      	ldrb	r3, [r3, #0]
 800da04:	b25b      	sxtb	r3, r3
 800da06:	2b00      	cmp	r3, #0
 800da08:	da11      	bge.n	800da2e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800da10:	689b      	ldr	r3, [r3, #8]
 800da12:	683a      	ldr	r2, [r7, #0]
 800da14:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800da16:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800da18:	683a      	ldr	r2, [r7, #0]
 800da1a:	88d2      	ldrh	r2, [r2, #6]
 800da1c:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800da1e:	6939      	ldr	r1, [r7, #16]
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	88db      	ldrh	r3, [r3, #6]
 800da24:	461a      	mov	r2, r3
 800da26:	6878      	ldr	r0, [r7, #4]
 800da28:	f001 fa9d 	bl	800ef66 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800da2c:	e082      	b.n	800db34 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	785a      	ldrb	r2, [r3, #1]
 800da32:	693b      	ldr	r3, [r7, #16]
 800da34:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	88db      	ldrh	r3, [r3, #6]
 800da3c:	b2da      	uxtb	r2, r3
 800da3e:	693b      	ldr	r3, [r7, #16]
 800da40:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800da44:	6939      	ldr	r1, [r7, #16]
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	88db      	ldrh	r3, [r3, #6]
 800da4a:	461a      	mov	r2, r3
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f001 fab6 	bl	800efbe <USBD_CtlPrepareRx>
    break;
 800da52:	e06f      	b.n	800db34 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800da5a:	689b      	ldr	r3, [r3, #8]
 800da5c:	683a      	ldr	r2, [r7, #0]
 800da5e:	7850      	ldrb	r0, [r2, #1]
 800da60:	2200      	movs	r2, #0
 800da62:	6839      	ldr	r1, [r7, #0]
 800da64:	4798      	blx	r3
    break;
 800da66:	e065      	b.n	800db34 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	785b      	ldrb	r3, [r3, #1]
 800da6c:	2b0b      	cmp	r3, #11
 800da6e:	d84f      	bhi.n	800db10 <USBD_CDC_Setup+0x148>
 800da70:	a201      	add	r2, pc, #4	; (adr r2, 800da78 <USBD_CDC_Setup+0xb0>)
 800da72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da76:	bf00      	nop
 800da78:	0800daa9 	.word	0x0800daa9
 800da7c:	0800db1f 	.word	0x0800db1f
 800da80:	0800db11 	.word	0x0800db11
 800da84:	0800db11 	.word	0x0800db11
 800da88:	0800db11 	.word	0x0800db11
 800da8c:	0800db11 	.word	0x0800db11
 800da90:	0800db11 	.word	0x0800db11
 800da94:	0800db11 	.word	0x0800db11
 800da98:	0800db11 	.word	0x0800db11
 800da9c:	0800db11 	.word	0x0800db11
 800daa0:	0800dad1 	.word	0x0800dad1
 800daa4:	0800daf9 	.word	0x0800daf9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800daae:	2b03      	cmp	r3, #3
 800dab0:	d107      	bne.n	800dac2 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800dab2:	f107 030c 	add.w	r3, r7, #12
 800dab6:	2202      	movs	r2, #2
 800dab8:	4619      	mov	r1, r3
 800daba:	6878      	ldr	r0, [r7, #4]
 800dabc:	f001 fa53 	bl	800ef66 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800dac0:	e030      	b.n	800db24 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800dac2:	6839      	ldr	r1, [r7, #0]
 800dac4:	6878      	ldr	r0, [r7, #4]
 800dac6:	f001 f9dd 	bl	800ee84 <USBD_CtlError>
        ret = USBD_FAIL;
 800daca:	2303      	movs	r3, #3
 800dacc:	75fb      	strb	r3, [r7, #23]
      break;
 800dace:	e029      	b.n	800db24 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dad6:	2b03      	cmp	r3, #3
 800dad8:	d107      	bne.n	800daea <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800dada:	f107 030f 	add.w	r3, r7, #15
 800dade:	2201      	movs	r2, #1
 800dae0:	4619      	mov	r1, r3
 800dae2:	6878      	ldr	r0, [r7, #4]
 800dae4:	f001 fa3f 	bl	800ef66 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800dae8:	e01c      	b.n	800db24 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800daea:	6839      	ldr	r1, [r7, #0]
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f001 f9c9 	bl	800ee84 <USBD_CtlError>
        ret = USBD_FAIL;
 800daf2:	2303      	movs	r3, #3
 800daf4:	75fb      	strb	r3, [r7, #23]
      break;
 800daf6:	e015      	b.n	800db24 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dafe:	2b03      	cmp	r3, #3
 800db00:	d00f      	beq.n	800db22 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800db02:	6839      	ldr	r1, [r7, #0]
 800db04:	6878      	ldr	r0, [r7, #4]
 800db06:	f001 f9bd 	bl	800ee84 <USBD_CtlError>
        ret = USBD_FAIL;
 800db0a:	2303      	movs	r3, #3
 800db0c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800db0e:	e008      	b.n	800db22 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800db10:	6839      	ldr	r1, [r7, #0]
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f001 f9b6 	bl	800ee84 <USBD_CtlError>
      ret = USBD_FAIL;
 800db18:	2303      	movs	r3, #3
 800db1a:	75fb      	strb	r3, [r7, #23]
      break;
 800db1c:	e002      	b.n	800db24 <USBD_CDC_Setup+0x15c>
      break;
 800db1e:	bf00      	nop
 800db20:	e008      	b.n	800db34 <USBD_CDC_Setup+0x16c>
      break;
 800db22:	bf00      	nop
    }
    break;
 800db24:	e006      	b.n	800db34 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800db26:	6839      	ldr	r1, [r7, #0]
 800db28:	6878      	ldr	r0, [r7, #4]
 800db2a:	f001 f9ab 	bl	800ee84 <USBD_CtlError>
    ret = USBD_FAIL;
 800db2e:	2303      	movs	r3, #3
 800db30:	75fb      	strb	r3, [r7, #23]
    break;
 800db32:	bf00      	nop
  }

  return (uint8_t)ret;
 800db34:	7dfb      	ldrb	r3, [r7, #23]
}
 800db36:	4618      	mov	r0, r3
 800db38:	3718      	adds	r7, #24
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}
 800db3e:	bf00      	nop

0800db40 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b084      	sub	sp, #16
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
 800db48:	460b      	mov	r3, r1
 800db4a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800db52:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d101      	bne.n	800db62 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800db5e:	2303      	movs	r3, #3
 800db60:	e049      	b.n	800dbf6 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800db68:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800db6a:	78fa      	ldrb	r2, [r7, #3]
 800db6c:	6879      	ldr	r1, [r7, #4]
 800db6e:	4613      	mov	r3, r2
 800db70:	009b      	lsls	r3, r3, #2
 800db72:	4413      	add	r3, r2
 800db74:	009b      	lsls	r3, r3, #2
 800db76:	440b      	add	r3, r1
 800db78:	3318      	adds	r3, #24
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d029      	beq.n	800dbd4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800db80:	78fa      	ldrb	r2, [r7, #3]
 800db82:	6879      	ldr	r1, [r7, #4]
 800db84:	4613      	mov	r3, r2
 800db86:	009b      	lsls	r3, r3, #2
 800db88:	4413      	add	r3, r2
 800db8a:	009b      	lsls	r3, r3, #2
 800db8c:	440b      	add	r3, r1
 800db8e:	3318      	adds	r3, #24
 800db90:	681a      	ldr	r2, [r3, #0]
 800db92:	78f9      	ldrb	r1, [r7, #3]
 800db94:	68f8      	ldr	r0, [r7, #12]
 800db96:	460b      	mov	r3, r1
 800db98:	00db      	lsls	r3, r3, #3
 800db9a:	1a5b      	subs	r3, r3, r1
 800db9c:	009b      	lsls	r3, r3, #2
 800db9e:	4403      	add	r3, r0
 800dba0:	3344      	adds	r3, #68	; 0x44
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	fbb2 f1f3 	udiv	r1, r2, r3
 800dba8:	fb03 f301 	mul.w	r3, r3, r1
 800dbac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d110      	bne.n	800dbd4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800dbb2:	78fa      	ldrb	r2, [r7, #3]
 800dbb4:	6879      	ldr	r1, [r7, #4]
 800dbb6:	4613      	mov	r3, r2
 800dbb8:	009b      	lsls	r3, r3, #2
 800dbba:	4413      	add	r3, r2
 800dbbc:	009b      	lsls	r3, r3, #2
 800dbbe:	440b      	add	r3, r1
 800dbc0:	3318      	adds	r3, #24
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800dbc6:	78f9      	ldrb	r1, [r7, #3]
 800dbc8:	2300      	movs	r3, #0
 800dbca:	2200      	movs	r2, #0
 800dbcc:	6878      	ldr	r0, [r7, #4]
 800dbce:	f001 ff2a 	bl	800fa26 <USBD_LL_Transmit>
 800dbd2:	e00f      	b.n	800dbf4 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dbe2:	691b      	ldr	r3, [r3, #16]
 800dbe4:	68ba      	ldr	r2, [r7, #8]
 800dbe6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800dbea:	68ba      	ldr	r2, [r7, #8]
 800dbec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800dbf0:	78fa      	ldrb	r2, [r7, #3]
 800dbf2:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800dbf4:	2300      	movs	r3, #0
}
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	3710      	adds	r7, #16
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bd80      	pop	{r7, pc}

0800dbfe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800dbfe:	b580      	push	{r7, lr}
 800dc00:	b084      	sub	sp, #16
 800dc02:	af00      	add	r7, sp, #0
 800dc04:	6078      	str	r0, [r7, #4]
 800dc06:	460b      	mov	r3, r1
 800dc08:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dc10:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d101      	bne.n	800dc20 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800dc1c:	2303      	movs	r3, #3
 800dc1e:	e015      	b.n	800dc4c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800dc20:	78fb      	ldrb	r3, [r7, #3]
 800dc22:	4619      	mov	r1, r3
 800dc24:	6878      	ldr	r0, [r7, #4]
 800dc26:	f001 ff40 	bl	800faaa <USBD_LL_GetRxDataSize>
 800dc2a:	4602      	mov	r2, r0
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dc38:	68db      	ldr	r3, [r3, #12]
 800dc3a:	68fa      	ldr	r2, [r7, #12]
 800dc3c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800dc40:	68fa      	ldr	r2, [r7, #12]
 800dc42:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800dc46:	4611      	mov	r1, r2
 800dc48:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800dc4a:	2300      	movs	r3, #0
}
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	3710      	adds	r7, #16
 800dc50:	46bd      	mov	sp, r7
 800dc52:	bd80      	pop	{r7, pc}

0800dc54 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b084      	sub	sp, #16
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dc62:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d015      	beq.n	800dc9a <USBD_CDC_EP0_RxReady+0x46>
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800dc74:	2bff      	cmp	r3, #255	; 0xff
 800dc76:	d010      	beq.n	800dc9a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dc7e:	689b      	ldr	r3, [r3, #8]
 800dc80:	68fa      	ldr	r2, [r7, #12]
 800dc82:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800dc86:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800dc88:	68fa      	ldr	r2, [r7, #12]
 800dc8a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800dc8e:	b292      	uxth	r2, r2
 800dc90:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	22ff      	movs	r2, #255	; 0xff
 800dc96:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800dc9a:	2300      	movs	r3, #0
}
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	3710      	adds	r7, #16
 800dca0:	46bd      	mov	sp, r7
 800dca2:	bd80      	pop	{r7, pc}

0800dca4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800dca4:	b480      	push	{r7}
 800dca6:	b083      	sub	sp, #12
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2243      	movs	r2, #67	; 0x43
 800dcb0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800dcb2:	4b03      	ldr	r3, [pc, #12]	; (800dcc0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	370c      	adds	r7, #12
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcbe:	4770      	bx	lr
 800dcc0:	24000098 	.word	0x24000098

0800dcc4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800dcc4:	b480      	push	{r7}
 800dcc6:	b083      	sub	sp, #12
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2243      	movs	r2, #67	; 0x43
 800dcd0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800dcd2:	4b03      	ldr	r3, [pc, #12]	; (800dce0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	370c      	adds	r7, #12
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcde:	4770      	bx	lr
 800dce0:	24000054 	.word	0x24000054

0800dce4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800dce4:	b480      	push	{r7}
 800dce6:	b083      	sub	sp, #12
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2243      	movs	r2, #67	; 0x43
 800dcf0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800dcf2:	4b03      	ldr	r3, [pc, #12]	; (800dd00 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	370c      	adds	r7, #12
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfe:	4770      	bx	lr
 800dd00:	240000dc 	.word	0x240000dc

0800dd04 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800dd04:	b480      	push	{r7}
 800dd06:	b083      	sub	sp, #12
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	220a      	movs	r2, #10
 800dd10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800dd12:	4b03      	ldr	r3, [pc, #12]	; (800dd20 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800dd14:	4618      	mov	r0, r3
 800dd16:	370c      	adds	r7, #12
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1e:	4770      	bx	lr
 800dd20:	24000010 	.word	0x24000010

0800dd24 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800dd24:	b480      	push	{r7}
 800dd26:	b083      	sub	sp, #12
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
 800dd2c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d101      	bne.n	800dd38 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800dd34:	2303      	movs	r3, #3
 800dd36:	e004      	b.n	800dd42 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	683a      	ldr	r2, [r7, #0]
 800dd3c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800dd40:	2300      	movs	r3, #0
}
 800dd42:	4618      	mov	r0, r3
 800dd44:	370c      	adds	r7, #12
 800dd46:	46bd      	mov	sp, r7
 800dd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4c:	4770      	bx	lr

0800dd4e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800dd4e:	b480      	push	{r7}
 800dd50:	b087      	sub	sp, #28
 800dd52:	af00      	add	r7, sp, #0
 800dd54:	60f8      	str	r0, [r7, #12]
 800dd56:	60b9      	str	r1, [r7, #8]
 800dd58:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dd60:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800dd62:	697b      	ldr	r3, [r7, #20]
 800dd64:	68ba      	ldr	r2, [r7, #8]
 800dd66:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800dd6a:	697b      	ldr	r3, [r7, #20]
 800dd6c:	687a      	ldr	r2, [r7, #4]
 800dd6e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800dd72:	2300      	movs	r3, #0
}
 800dd74:	4618      	mov	r0, r3
 800dd76:	371c      	adds	r7, #28
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7e:	4770      	bx	lr

0800dd80 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800dd80:	b480      	push	{r7}
 800dd82:	b085      	sub	sp, #20
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
 800dd88:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dd90:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	683a      	ldr	r2, [r7, #0]
 800dd96:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800dd9a:	2300      	movs	r3, #0
}
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	3714      	adds	r7, #20
 800dda0:	46bd      	mov	sp, r7
 800dda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda6:	4770      	bx	lr

0800dda8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b084      	sub	sp, #16
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ddb6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800ddb8:	2301      	movs	r3, #1
 800ddba:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d101      	bne.n	800ddca <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ddc6:	2303      	movs	r3, #3
 800ddc8:	e01a      	b.n	800de00 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800ddca:	68bb      	ldr	r3, [r7, #8]
 800ddcc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d114      	bne.n	800ddfe <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ddd4:	68bb      	ldr	r3, [r7, #8]
 800ddd6:	2201      	movs	r2, #1
 800ddd8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800dde6:	68bb      	ldr	r3, [r7, #8]
 800dde8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ddec:	68bb      	ldr	r3, [r7, #8]
 800ddee:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ddf2:	2181      	movs	r1, #129	; 0x81
 800ddf4:	6878      	ldr	r0, [r7, #4]
 800ddf6:	f001 fe16 	bl	800fa26 <USBD_LL_Transmit>

    ret = USBD_OK;
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ddfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800de00:	4618      	mov	r0, r3
 800de02:	3710      	adds	r7, #16
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}

0800de08 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b084      	sub	sp, #16
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800de16:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d101      	bne.n	800de26 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800de22:	2303      	movs	r3, #3
 800de24:	e016      	b.n	800de54 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	7c1b      	ldrb	r3, [r3, #16]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d109      	bne.n	800de42 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800de34:	f44f 7300 	mov.w	r3, #512	; 0x200
 800de38:	2101      	movs	r1, #1
 800de3a:	6878      	ldr	r0, [r7, #4]
 800de3c:	f001 fe14 	bl	800fa68 <USBD_LL_PrepareReceive>
 800de40:	e007      	b.n	800de52 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800de48:	2340      	movs	r3, #64	; 0x40
 800de4a:	2101      	movs	r1, #1
 800de4c:	6878      	ldr	r0, [r7, #4]
 800de4e:	f001 fe0b 	bl	800fa68 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800de52:	2300      	movs	r3, #0
}
 800de54:	4618      	mov	r0, r3
 800de56:	3710      	adds	r7, #16
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}

0800de5c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b086      	sub	sp, #24
 800de60:	af00      	add	r7, sp, #0
 800de62:	60f8      	str	r0, [r7, #12]
 800de64:	60b9      	str	r1, [r7, #8]
 800de66:	4613      	mov	r3, r2
 800de68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d101      	bne.n	800de74 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800de70:	2303      	movs	r3, #3
 800de72:	e025      	b.n	800dec0 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d003      	beq.n	800de86 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	2200      	movs	r2, #0
 800de82:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d003      	beq.n	800de98 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	2200      	movs	r2, #0
 800de94:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d003      	beq.n	800dea6 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	68ba      	ldr	r2, [r7, #8]
 800dea2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	2201      	movs	r2, #1
 800deaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	79fa      	ldrb	r2, [r7, #7]
 800deb2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800deb4:	68f8      	ldr	r0, [r7, #12]
 800deb6:	f001 fc7d 	bl	800f7b4 <USBD_LL_Init>
 800deba:	4603      	mov	r3, r0
 800debc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800debe:	7dfb      	ldrb	r3, [r7, #23]
}
 800dec0:	4618      	mov	r0, r3
 800dec2:	3718      	adds	r7, #24
 800dec4:	46bd      	mov	sp, r7
 800dec6:	bd80      	pop	{r7, pc}

0800dec8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b084      	sub	sp, #16
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
 800ded0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ded2:	2300      	movs	r3, #0
 800ded4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d101      	bne.n	800dee0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800dedc:	2303      	movs	r3, #3
 800dede:	e010      	b.n	800df02 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	683a      	ldr	r2, [r7, #0]
 800dee4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800deee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800def0:	f107 020e 	add.w	r2, r7, #14
 800def4:	4610      	mov	r0, r2
 800def6:	4798      	blx	r3
 800def8:	4602      	mov	r2, r0
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800df00:	2300      	movs	r3, #0
}
 800df02:	4618      	mov	r0, r3
 800df04:	3710      	adds	r7, #16
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}

0800df0a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800df0a:	b580      	push	{r7, lr}
 800df0c:	b082      	sub	sp, #8
 800df0e:	af00      	add	r7, sp, #0
 800df10:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800df12:	6878      	ldr	r0, [r7, #4]
 800df14:	f001 fc9e 	bl	800f854 <USBD_LL_Start>
 800df18:	4603      	mov	r3, r0
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3708      	adds	r7, #8
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}

0800df22 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800df22:	b480      	push	{r7}
 800df24:	b083      	sub	sp, #12
 800df26:	af00      	add	r7, sp, #0
 800df28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800df2a:	2300      	movs	r3, #0
}
 800df2c:	4618      	mov	r0, r3
 800df2e:	370c      	adds	r7, #12
 800df30:	46bd      	mov	sp, r7
 800df32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df36:	4770      	bx	lr

0800df38 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b084      	sub	sp, #16
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
 800df40:	460b      	mov	r3, r1
 800df42:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800df44:	2303      	movs	r3, #3
 800df46:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d009      	beq.n	800df66 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	78fa      	ldrb	r2, [r7, #3]
 800df5c:	4611      	mov	r1, r2
 800df5e:	6878      	ldr	r0, [r7, #4]
 800df60:	4798      	blx	r3
 800df62:	4603      	mov	r3, r0
 800df64:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800df66:	7bfb      	ldrb	r3, [r7, #15]
}
 800df68:	4618      	mov	r0, r3
 800df6a:	3710      	adds	r7, #16
 800df6c:	46bd      	mov	sp, r7
 800df6e:	bd80      	pop	{r7, pc}

0800df70 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b082      	sub	sp, #8
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
 800df78:	460b      	mov	r3, r1
 800df7a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df82:	2b00      	cmp	r3, #0
 800df84:	d007      	beq.n	800df96 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df8c:	685b      	ldr	r3, [r3, #4]
 800df8e:	78fa      	ldrb	r2, [r7, #3]
 800df90:	4611      	mov	r1, r2
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	4798      	blx	r3
  }

  return USBD_OK;
 800df96:	2300      	movs	r3, #0
}
 800df98:	4618      	mov	r0, r3
 800df9a:	3708      	adds	r7, #8
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}

0800dfa0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b084      	sub	sp, #16
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
 800dfa8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dfb0:	6839      	ldr	r1, [r7, #0]
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	f000 ff2c 	bl	800ee10 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2201      	movs	r2, #1
 800dfbc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800dfc6:	461a      	mov	r2, r3
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dfd4:	f003 031f 	and.w	r3, r3, #31
 800dfd8:	2b01      	cmp	r3, #1
 800dfda:	d00e      	beq.n	800dffa <USBD_LL_SetupStage+0x5a>
 800dfdc:	2b01      	cmp	r3, #1
 800dfde:	d302      	bcc.n	800dfe6 <USBD_LL_SetupStage+0x46>
 800dfe0:	2b02      	cmp	r3, #2
 800dfe2:	d014      	beq.n	800e00e <USBD_LL_SetupStage+0x6e>
 800dfe4:	e01d      	b.n	800e022 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dfec:	4619      	mov	r1, r3
 800dfee:	6878      	ldr	r0, [r7, #4]
 800dff0:	f000 fa18 	bl	800e424 <USBD_StdDevReq>
 800dff4:	4603      	mov	r3, r0
 800dff6:	73fb      	strb	r3, [r7, #15]
      break;
 800dff8:	e020      	b.n	800e03c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e000:	4619      	mov	r1, r3
 800e002:	6878      	ldr	r0, [r7, #4]
 800e004:	f000 fa7c 	bl	800e500 <USBD_StdItfReq>
 800e008:	4603      	mov	r3, r0
 800e00a:	73fb      	strb	r3, [r7, #15]
      break;
 800e00c:	e016      	b.n	800e03c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e014:	4619      	mov	r1, r3
 800e016:	6878      	ldr	r0, [r7, #4]
 800e018:	f000 fab8 	bl	800e58c <USBD_StdEPReq>
 800e01c:	4603      	mov	r3, r0
 800e01e:	73fb      	strb	r3, [r7, #15]
      break;
 800e020:	e00c      	b.n	800e03c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e028:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e02c:	b2db      	uxtb	r3, r3
 800e02e:	4619      	mov	r1, r3
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	f001 fc6f 	bl	800f914 <USBD_LL_StallEP>
 800e036:	4603      	mov	r3, r0
 800e038:	73fb      	strb	r3, [r7, #15]
      break;
 800e03a:	bf00      	nop
  }

  return ret;
 800e03c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e03e:	4618      	mov	r0, r3
 800e040:	3710      	adds	r7, #16
 800e042:	46bd      	mov	sp, r7
 800e044:	bd80      	pop	{r7, pc}

0800e046 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e046:	b580      	push	{r7, lr}
 800e048:	b086      	sub	sp, #24
 800e04a:	af00      	add	r7, sp, #0
 800e04c:	60f8      	str	r0, [r7, #12]
 800e04e:	460b      	mov	r3, r1
 800e050:	607a      	str	r2, [r7, #4]
 800e052:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e054:	7afb      	ldrb	r3, [r7, #11]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d137      	bne.n	800e0ca <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e060:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e068:	2b03      	cmp	r3, #3
 800e06a:	d14a      	bne.n	800e102 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800e06c:	693b      	ldr	r3, [r7, #16]
 800e06e:	689a      	ldr	r2, [r3, #8]
 800e070:	693b      	ldr	r3, [r7, #16]
 800e072:	68db      	ldr	r3, [r3, #12]
 800e074:	429a      	cmp	r2, r3
 800e076:	d913      	bls.n	800e0a0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e078:	693b      	ldr	r3, [r7, #16]
 800e07a:	689a      	ldr	r2, [r3, #8]
 800e07c:	693b      	ldr	r3, [r7, #16]
 800e07e:	68db      	ldr	r3, [r3, #12]
 800e080:	1ad2      	subs	r2, r2, r3
 800e082:	693b      	ldr	r3, [r7, #16]
 800e084:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e086:	693b      	ldr	r3, [r7, #16]
 800e088:	68da      	ldr	r2, [r3, #12]
 800e08a:	693b      	ldr	r3, [r7, #16]
 800e08c:	689b      	ldr	r3, [r3, #8]
 800e08e:	4293      	cmp	r3, r2
 800e090:	bf28      	it	cs
 800e092:	4613      	movcs	r3, r2
 800e094:	461a      	mov	r2, r3
 800e096:	6879      	ldr	r1, [r7, #4]
 800e098:	68f8      	ldr	r0, [r7, #12]
 800e09a:	f000 ffad 	bl	800eff8 <USBD_CtlContinueRx>
 800e09e:	e030      	b.n	800e102 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0a6:	691b      	ldr	r3, [r3, #16]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d00a      	beq.n	800e0c2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e0b2:	2b03      	cmp	r3, #3
 800e0b4:	d105      	bne.n	800e0c2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0bc:	691b      	ldr	r3, [r3, #16]
 800e0be:	68f8      	ldr	r0, [r7, #12]
 800e0c0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800e0c2:	68f8      	ldr	r0, [r7, #12]
 800e0c4:	f000 ffa9 	bl	800f01a <USBD_CtlSendStatus>
 800e0c8:	e01b      	b.n	800e102 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0d0:	699b      	ldr	r3, [r3, #24]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d013      	beq.n	800e0fe <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800e0dc:	2b03      	cmp	r3, #3
 800e0de:	d10e      	bne.n	800e0fe <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0e6:	699b      	ldr	r3, [r3, #24]
 800e0e8:	7afa      	ldrb	r2, [r7, #11]
 800e0ea:	4611      	mov	r1, r2
 800e0ec:	68f8      	ldr	r0, [r7, #12]
 800e0ee:	4798      	blx	r3
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800e0f4:	7dfb      	ldrb	r3, [r7, #23]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d003      	beq.n	800e102 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800e0fa:	7dfb      	ldrb	r3, [r7, #23]
 800e0fc:	e002      	b.n	800e104 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e0fe:	2303      	movs	r3, #3
 800e100:	e000      	b.n	800e104 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800e102:	2300      	movs	r3, #0
}
 800e104:	4618      	mov	r0, r3
 800e106:	3718      	adds	r7, #24
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}

0800e10c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b086      	sub	sp, #24
 800e110:	af00      	add	r7, sp, #0
 800e112:	60f8      	str	r0, [r7, #12]
 800e114:	460b      	mov	r3, r1
 800e116:	607a      	str	r2, [r7, #4]
 800e118:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e11a:	7afb      	ldrb	r3, [r7, #11]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d16a      	bne.n	800e1f6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	3314      	adds	r3, #20
 800e124:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e12c:	2b02      	cmp	r3, #2
 800e12e:	d155      	bne.n	800e1dc <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800e130:	693b      	ldr	r3, [r7, #16]
 800e132:	689a      	ldr	r2, [r3, #8]
 800e134:	693b      	ldr	r3, [r7, #16]
 800e136:	68db      	ldr	r3, [r3, #12]
 800e138:	429a      	cmp	r2, r3
 800e13a:	d914      	bls.n	800e166 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e13c:	693b      	ldr	r3, [r7, #16]
 800e13e:	689a      	ldr	r2, [r3, #8]
 800e140:	693b      	ldr	r3, [r7, #16]
 800e142:	68db      	ldr	r3, [r3, #12]
 800e144:	1ad2      	subs	r2, r2, r3
 800e146:	693b      	ldr	r3, [r7, #16]
 800e148:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e14a:	693b      	ldr	r3, [r7, #16]
 800e14c:	689b      	ldr	r3, [r3, #8]
 800e14e:	461a      	mov	r2, r3
 800e150:	6879      	ldr	r1, [r7, #4]
 800e152:	68f8      	ldr	r0, [r7, #12]
 800e154:	f000 ff22 	bl	800ef9c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e158:	2300      	movs	r3, #0
 800e15a:	2200      	movs	r2, #0
 800e15c:	2100      	movs	r1, #0
 800e15e:	68f8      	ldr	r0, [r7, #12]
 800e160:	f001 fc82 	bl	800fa68 <USBD_LL_PrepareReceive>
 800e164:	e03a      	b.n	800e1dc <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e166:	693b      	ldr	r3, [r7, #16]
 800e168:	68da      	ldr	r2, [r3, #12]
 800e16a:	693b      	ldr	r3, [r7, #16]
 800e16c:	689b      	ldr	r3, [r3, #8]
 800e16e:	429a      	cmp	r2, r3
 800e170:	d11c      	bne.n	800e1ac <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e172:	693b      	ldr	r3, [r7, #16]
 800e174:	685a      	ldr	r2, [r3, #4]
 800e176:	693b      	ldr	r3, [r7, #16]
 800e178:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e17a:	429a      	cmp	r2, r3
 800e17c:	d316      	bcc.n	800e1ac <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e17e:	693b      	ldr	r3, [r7, #16]
 800e180:	685a      	ldr	r2, [r3, #4]
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e188:	429a      	cmp	r2, r3
 800e18a:	d20f      	bcs.n	800e1ac <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e18c:	2200      	movs	r2, #0
 800e18e:	2100      	movs	r1, #0
 800e190:	68f8      	ldr	r0, [r7, #12]
 800e192:	f000 ff03 	bl	800ef9c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	2200      	movs	r2, #0
 800e19a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e19e:	2300      	movs	r3, #0
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	2100      	movs	r1, #0
 800e1a4:	68f8      	ldr	r0, [r7, #12]
 800e1a6:	f001 fc5f 	bl	800fa68 <USBD_LL_PrepareReceive>
 800e1aa:	e017      	b.n	800e1dc <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1b2:	68db      	ldr	r3, [r3, #12]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d00a      	beq.n	800e1ce <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e1be:	2b03      	cmp	r3, #3
 800e1c0:	d105      	bne.n	800e1ce <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1c8:	68db      	ldr	r3, [r3, #12]
 800e1ca:	68f8      	ldr	r0, [r7, #12]
 800e1cc:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e1ce:	2180      	movs	r1, #128	; 0x80
 800e1d0:	68f8      	ldr	r0, [r7, #12]
 800e1d2:	f001 fb9f 	bl	800f914 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e1d6:	68f8      	ldr	r0, [r7, #12]
 800e1d8:	f000 ff32 	bl	800f040 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e1e2:	2b01      	cmp	r3, #1
 800e1e4:	d123      	bne.n	800e22e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800e1e6:	68f8      	ldr	r0, [r7, #12]
 800e1e8:	f7ff fe9b 	bl	800df22 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e1f4:	e01b      	b.n	800e22e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1fc:	695b      	ldr	r3, [r3, #20]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d013      	beq.n	800e22a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800e208:	2b03      	cmp	r3, #3
 800e20a:	d10e      	bne.n	800e22a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e212:	695b      	ldr	r3, [r3, #20]
 800e214:	7afa      	ldrb	r2, [r7, #11]
 800e216:	4611      	mov	r1, r2
 800e218:	68f8      	ldr	r0, [r7, #12]
 800e21a:	4798      	blx	r3
 800e21c:	4603      	mov	r3, r0
 800e21e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800e220:	7dfb      	ldrb	r3, [r7, #23]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d003      	beq.n	800e22e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800e226:	7dfb      	ldrb	r3, [r7, #23]
 800e228:	e002      	b.n	800e230 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e22a:	2303      	movs	r3, #3
 800e22c:	e000      	b.n	800e230 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800e22e:	2300      	movs	r3, #0
}
 800e230:	4618      	mov	r0, r3
 800e232:	3718      	adds	r7, #24
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}

0800e238 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b082      	sub	sp, #8
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2201      	movs	r2, #1
 800e244:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	2200      	movs	r2, #0
 800e24c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	2200      	movs	r2, #0
 800e254:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	2200      	movs	r2, #0
 800e25a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e264:	2b00      	cmp	r3, #0
 800e266:	d009      	beq.n	800e27c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e26e:	685b      	ldr	r3, [r3, #4]
 800e270:	687a      	ldr	r2, [r7, #4]
 800e272:	6852      	ldr	r2, [r2, #4]
 800e274:	b2d2      	uxtb	r2, r2
 800e276:	4611      	mov	r1, r2
 800e278:	6878      	ldr	r0, [r7, #4]
 800e27a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e27c:	2340      	movs	r3, #64	; 0x40
 800e27e:	2200      	movs	r2, #0
 800e280:	2100      	movs	r1, #0
 800e282:	6878      	ldr	r0, [r7, #4]
 800e284:	f001 fb01 	bl	800f88a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	2201      	movs	r2, #1
 800e28c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	2240      	movs	r2, #64	; 0x40
 800e294:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e298:	2340      	movs	r3, #64	; 0x40
 800e29a:	2200      	movs	r2, #0
 800e29c:	2180      	movs	r1, #128	; 0x80
 800e29e:	6878      	ldr	r0, [r7, #4]
 800e2a0:	f001 faf3 	bl	800f88a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2201      	movs	r2, #1
 800e2a8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	2240      	movs	r2, #64	; 0x40
 800e2ae:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800e2b0:	2300      	movs	r3, #0
}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	3708      	adds	r7, #8
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}

0800e2ba <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e2ba:	b480      	push	{r7}
 800e2bc:	b083      	sub	sp, #12
 800e2be:	af00      	add	r7, sp, #0
 800e2c0:	6078      	str	r0, [r7, #4]
 800e2c2:	460b      	mov	r3, r1
 800e2c4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	78fa      	ldrb	r2, [r7, #3]
 800e2ca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e2cc:	2300      	movs	r3, #0
}
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	370c      	adds	r7, #12
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d8:	4770      	bx	lr

0800e2da <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e2da:	b480      	push	{r7}
 800e2dc:	b083      	sub	sp, #12
 800e2de:	af00      	add	r7, sp, #0
 800e2e0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	2204      	movs	r2, #4
 800e2f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e2f6:	2300      	movs	r3, #0
}
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	370c      	adds	r7, #12
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e302:	4770      	bx	lr

0800e304 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e304:	b480      	push	{r7}
 800e306:	b083      	sub	sp, #12
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e312:	2b04      	cmp	r3, #4
 800e314:	d105      	bne.n	800e322 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e322:	2300      	movs	r3, #0
}
 800e324:	4618      	mov	r0, r3
 800e326:	370c      	adds	r7, #12
 800e328:	46bd      	mov	sp, r7
 800e32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32e:	4770      	bx	lr

0800e330 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b082      	sub	sp, #8
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e33e:	2b03      	cmp	r3, #3
 800e340:	d10b      	bne.n	800e35a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e348:	69db      	ldr	r3, [r3, #28]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d005      	beq.n	800e35a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e354:	69db      	ldr	r3, [r3, #28]
 800e356:	6878      	ldr	r0, [r7, #4]
 800e358:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e35a:	2300      	movs	r3, #0
}
 800e35c:	4618      	mov	r0, r3
 800e35e:	3708      	adds	r7, #8
 800e360:	46bd      	mov	sp, r7
 800e362:	bd80      	pop	{r7, pc}

0800e364 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e364:	b480      	push	{r7}
 800e366:	b083      	sub	sp, #12
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
 800e36c:	460b      	mov	r3, r1
 800e36e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800e370:	2300      	movs	r3, #0
}
 800e372:	4618      	mov	r0, r3
 800e374:	370c      	adds	r7, #12
 800e376:	46bd      	mov	sp, r7
 800e378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37c:	4770      	bx	lr

0800e37e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e37e:	b480      	push	{r7}
 800e380:	b083      	sub	sp, #12
 800e382:	af00      	add	r7, sp, #0
 800e384:	6078      	str	r0, [r7, #4]
 800e386:	460b      	mov	r3, r1
 800e388:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800e38a:	2300      	movs	r3, #0
}
 800e38c:	4618      	mov	r0, r3
 800e38e:	370c      	adds	r7, #12
 800e390:	46bd      	mov	sp, r7
 800e392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e396:	4770      	bx	lr

0800e398 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e398:	b480      	push	{r7}
 800e39a:	b083      	sub	sp, #12
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e3a0:	2300      	movs	r3, #0
}
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	370c      	adds	r7, #12
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ac:	4770      	bx	lr

0800e3ae <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e3ae:	b580      	push	{r7, lr}
 800e3b0:	b082      	sub	sp, #8
 800e3b2:	af00      	add	r7, sp, #0
 800e3b4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	2201      	movs	r2, #1
 800e3ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d009      	beq.n	800e3dc <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e3ce:	685b      	ldr	r3, [r3, #4]
 800e3d0:	687a      	ldr	r2, [r7, #4]
 800e3d2:	6852      	ldr	r2, [r2, #4]
 800e3d4:	b2d2      	uxtb	r2, r2
 800e3d6:	4611      	mov	r1, r2
 800e3d8:	6878      	ldr	r0, [r7, #4]
 800e3da:	4798      	blx	r3
  }

  return USBD_OK;
 800e3dc:	2300      	movs	r3, #0
}
 800e3de:	4618      	mov	r0, r3
 800e3e0:	3708      	adds	r7, #8
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	bd80      	pop	{r7, pc}

0800e3e6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e3e6:	b480      	push	{r7}
 800e3e8:	b087      	sub	sp, #28
 800e3ea:	af00      	add	r7, sp, #0
 800e3ec:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e3f2:	697b      	ldr	r3, [r7, #20]
 800e3f4:	781b      	ldrb	r3, [r3, #0]
 800e3f6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e3f8:	697b      	ldr	r3, [r7, #20]
 800e3fa:	3301      	adds	r3, #1
 800e3fc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e3fe:	697b      	ldr	r3, [r7, #20]
 800e400:	781b      	ldrb	r3, [r3, #0]
 800e402:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e404:	8a3b      	ldrh	r3, [r7, #16]
 800e406:	021b      	lsls	r3, r3, #8
 800e408:	b21a      	sxth	r2, r3
 800e40a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e40e:	4313      	orrs	r3, r2
 800e410:	b21b      	sxth	r3, r3
 800e412:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e414:	89fb      	ldrh	r3, [r7, #14]
}
 800e416:	4618      	mov	r0, r3
 800e418:	371c      	adds	r7, #28
 800e41a:	46bd      	mov	sp, r7
 800e41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e420:	4770      	bx	lr
	...

0800e424 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b084      	sub	sp, #16
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
 800e42c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e42e:	2300      	movs	r3, #0
 800e430:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e432:	683b      	ldr	r3, [r7, #0]
 800e434:	781b      	ldrb	r3, [r3, #0]
 800e436:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e43a:	2b20      	cmp	r3, #32
 800e43c:	d004      	beq.n	800e448 <USBD_StdDevReq+0x24>
 800e43e:	2b40      	cmp	r3, #64	; 0x40
 800e440:	d002      	beq.n	800e448 <USBD_StdDevReq+0x24>
 800e442:	2b00      	cmp	r3, #0
 800e444:	d00a      	beq.n	800e45c <USBD_StdDevReq+0x38>
 800e446:	e050      	b.n	800e4ea <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e44e:	689b      	ldr	r3, [r3, #8]
 800e450:	6839      	ldr	r1, [r7, #0]
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	4798      	blx	r3
 800e456:	4603      	mov	r3, r0
 800e458:	73fb      	strb	r3, [r7, #15]
    break;
 800e45a:	e04b      	b.n	800e4f4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800e45c:	683b      	ldr	r3, [r7, #0]
 800e45e:	785b      	ldrb	r3, [r3, #1]
 800e460:	2b09      	cmp	r3, #9
 800e462:	d83c      	bhi.n	800e4de <USBD_StdDevReq+0xba>
 800e464:	a201      	add	r2, pc, #4	; (adr r2, 800e46c <USBD_StdDevReq+0x48>)
 800e466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e46a:	bf00      	nop
 800e46c:	0800e4c1 	.word	0x0800e4c1
 800e470:	0800e4d5 	.word	0x0800e4d5
 800e474:	0800e4df 	.word	0x0800e4df
 800e478:	0800e4cb 	.word	0x0800e4cb
 800e47c:	0800e4df 	.word	0x0800e4df
 800e480:	0800e49f 	.word	0x0800e49f
 800e484:	0800e495 	.word	0x0800e495
 800e488:	0800e4df 	.word	0x0800e4df
 800e48c:	0800e4b7 	.word	0x0800e4b7
 800e490:	0800e4a9 	.word	0x0800e4a9
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800e494:	6839      	ldr	r1, [r7, #0]
 800e496:	6878      	ldr	r0, [r7, #4]
 800e498:	f000 f9ce 	bl	800e838 <USBD_GetDescriptor>
      break;
 800e49c:	e024      	b.n	800e4e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800e49e:	6839      	ldr	r1, [r7, #0]
 800e4a0:	6878      	ldr	r0, [r7, #4]
 800e4a2:	f000 fb33 	bl	800eb0c <USBD_SetAddress>
      break;
 800e4a6:	e01f      	b.n	800e4e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800e4a8:	6839      	ldr	r1, [r7, #0]
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	f000 fb70 	bl	800eb90 <USBD_SetConfig>
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	73fb      	strb	r3, [r7, #15]
      break;
 800e4b4:	e018      	b.n	800e4e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800e4b6:	6839      	ldr	r1, [r7, #0]
 800e4b8:	6878      	ldr	r0, [r7, #4]
 800e4ba:	f000 fc0d 	bl	800ecd8 <USBD_GetConfig>
      break;
 800e4be:	e013      	b.n	800e4e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800e4c0:	6839      	ldr	r1, [r7, #0]
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f000 fc3c 	bl	800ed40 <USBD_GetStatus>
      break;
 800e4c8:	e00e      	b.n	800e4e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800e4ca:	6839      	ldr	r1, [r7, #0]
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	f000 fc6a 	bl	800eda6 <USBD_SetFeature>
      break;
 800e4d2:	e009      	b.n	800e4e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800e4d4:	6839      	ldr	r1, [r7, #0]
 800e4d6:	6878      	ldr	r0, [r7, #4]
 800e4d8:	f000 fc79 	bl	800edce <USBD_ClrFeature>
      break;
 800e4dc:	e004      	b.n	800e4e8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800e4de:	6839      	ldr	r1, [r7, #0]
 800e4e0:	6878      	ldr	r0, [r7, #4]
 800e4e2:	f000 fccf 	bl	800ee84 <USBD_CtlError>
      break;
 800e4e6:	bf00      	nop
    }
    break;
 800e4e8:	e004      	b.n	800e4f4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800e4ea:	6839      	ldr	r1, [r7, #0]
 800e4ec:	6878      	ldr	r0, [r7, #4]
 800e4ee:	f000 fcc9 	bl	800ee84 <USBD_CtlError>
    break;
 800e4f2:	bf00      	nop
  }

  return ret;
 800e4f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	3710      	adds	r7, #16
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	bd80      	pop	{r7, pc}
 800e4fe:	bf00      	nop

0800e500 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b084      	sub	sp, #16
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
 800e508:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e50a:	2300      	movs	r3, #0
 800e50c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e50e:	683b      	ldr	r3, [r7, #0]
 800e510:	781b      	ldrb	r3, [r3, #0]
 800e512:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e516:	2b20      	cmp	r3, #32
 800e518:	d003      	beq.n	800e522 <USBD_StdItfReq+0x22>
 800e51a:	2b40      	cmp	r3, #64	; 0x40
 800e51c:	d001      	beq.n	800e522 <USBD_StdItfReq+0x22>
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d12a      	bne.n	800e578 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e528:	3b01      	subs	r3, #1
 800e52a:	2b02      	cmp	r3, #2
 800e52c:	d81d      	bhi.n	800e56a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	889b      	ldrh	r3, [r3, #4]
 800e532:	b2db      	uxtb	r3, r3
 800e534:	2b01      	cmp	r3, #1
 800e536:	d813      	bhi.n	800e560 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e53e:	689b      	ldr	r3, [r3, #8]
 800e540:	6839      	ldr	r1, [r7, #0]
 800e542:	6878      	ldr	r0, [r7, #4]
 800e544:	4798      	blx	r3
 800e546:	4603      	mov	r3, r0
 800e548:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800e54a:	683b      	ldr	r3, [r7, #0]
 800e54c:	88db      	ldrh	r3, [r3, #6]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d110      	bne.n	800e574 <USBD_StdItfReq+0x74>
 800e552:	7bfb      	ldrb	r3, [r7, #15]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d10d      	bne.n	800e574 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800e558:	6878      	ldr	r0, [r7, #4]
 800e55a:	f000 fd5e 	bl	800f01a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800e55e:	e009      	b.n	800e574 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800e560:	6839      	ldr	r1, [r7, #0]
 800e562:	6878      	ldr	r0, [r7, #4]
 800e564:	f000 fc8e 	bl	800ee84 <USBD_CtlError>
      break;
 800e568:	e004      	b.n	800e574 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800e56a:	6839      	ldr	r1, [r7, #0]
 800e56c:	6878      	ldr	r0, [r7, #4]
 800e56e:	f000 fc89 	bl	800ee84 <USBD_CtlError>
      break;
 800e572:	e000      	b.n	800e576 <USBD_StdItfReq+0x76>
      break;
 800e574:	bf00      	nop
    }
    break;
 800e576:	e004      	b.n	800e582 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800e578:	6839      	ldr	r1, [r7, #0]
 800e57a:	6878      	ldr	r0, [r7, #4]
 800e57c:	f000 fc82 	bl	800ee84 <USBD_CtlError>
    break;
 800e580:	bf00      	nop
  }

  return ret;
 800e582:	7bfb      	ldrb	r3, [r7, #15]
}
 800e584:	4618      	mov	r0, r3
 800e586:	3710      	adds	r7, #16
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}

0800e58c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b084      	sub	sp, #16
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
 800e594:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800e596:	2300      	movs	r3, #0
 800e598:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800e59a:	683b      	ldr	r3, [r7, #0]
 800e59c:	889b      	ldrh	r3, [r3, #4]
 800e59e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e5a0:	683b      	ldr	r3, [r7, #0]
 800e5a2:	781b      	ldrb	r3, [r3, #0]
 800e5a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e5a8:	2b20      	cmp	r3, #32
 800e5aa:	d004      	beq.n	800e5b6 <USBD_StdEPReq+0x2a>
 800e5ac:	2b40      	cmp	r3, #64	; 0x40
 800e5ae:	d002      	beq.n	800e5b6 <USBD_StdEPReq+0x2a>
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d00a      	beq.n	800e5ca <USBD_StdEPReq+0x3e>
 800e5b4:	e135      	b.n	800e822 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e5bc:	689b      	ldr	r3, [r3, #8]
 800e5be:	6839      	ldr	r1, [r7, #0]
 800e5c0:	6878      	ldr	r0, [r7, #4]
 800e5c2:	4798      	blx	r3
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	73fb      	strb	r3, [r7, #15]
    break;
 800e5c8:	e130      	b.n	800e82c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	785b      	ldrb	r3, [r3, #1]
 800e5ce:	2b01      	cmp	r3, #1
 800e5d0:	d03e      	beq.n	800e650 <USBD_StdEPReq+0xc4>
 800e5d2:	2b03      	cmp	r3, #3
 800e5d4:	d002      	beq.n	800e5dc <USBD_StdEPReq+0x50>
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d077      	beq.n	800e6ca <USBD_StdEPReq+0x13e>
 800e5da:	e11c      	b.n	800e816 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5e2:	2b02      	cmp	r3, #2
 800e5e4:	d002      	beq.n	800e5ec <USBD_StdEPReq+0x60>
 800e5e6:	2b03      	cmp	r3, #3
 800e5e8:	d015      	beq.n	800e616 <USBD_StdEPReq+0x8a>
 800e5ea:	e02b      	b.n	800e644 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e5ec:	7bbb      	ldrb	r3, [r7, #14]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d00c      	beq.n	800e60c <USBD_StdEPReq+0x80>
 800e5f2:	7bbb      	ldrb	r3, [r7, #14]
 800e5f4:	2b80      	cmp	r3, #128	; 0x80
 800e5f6:	d009      	beq.n	800e60c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800e5f8:	7bbb      	ldrb	r3, [r7, #14]
 800e5fa:	4619      	mov	r1, r3
 800e5fc:	6878      	ldr	r0, [r7, #4]
 800e5fe:	f001 f989 	bl	800f914 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e602:	2180      	movs	r1, #128	; 0x80
 800e604:	6878      	ldr	r0, [r7, #4]
 800e606:	f001 f985 	bl	800f914 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800e60a:	e020      	b.n	800e64e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800e60c:	6839      	ldr	r1, [r7, #0]
 800e60e:	6878      	ldr	r0, [r7, #4]
 800e610:	f000 fc38 	bl	800ee84 <USBD_CtlError>
        break;
 800e614:	e01b      	b.n	800e64e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800e616:	683b      	ldr	r3, [r7, #0]
 800e618:	885b      	ldrh	r3, [r3, #2]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d10e      	bne.n	800e63c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e61e:	7bbb      	ldrb	r3, [r7, #14]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d00b      	beq.n	800e63c <USBD_StdEPReq+0xb0>
 800e624:	7bbb      	ldrb	r3, [r7, #14]
 800e626:	2b80      	cmp	r3, #128	; 0x80
 800e628:	d008      	beq.n	800e63c <USBD_StdEPReq+0xb0>
 800e62a:	683b      	ldr	r3, [r7, #0]
 800e62c:	88db      	ldrh	r3, [r3, #6]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d104      	bne.n	800e63c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800e632:	7bbb      	ldrb	r3, [r7, #14]
 800e634:	4619      	mov	r1, r3
 800e636:	6878      	ldr	r0, [r7, #4]
 800e638:	f001 f96c 	bl	800f914 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800e63c:	6878      	ldr	r0, [r7, #4]
 800e63e:	f000 fcec 	bl	800f01a <USBD_CtlSendStatus>

        break;
 800e642:	e004      	b.n	800e64e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800e644:	6839      	ldr	r1, [r7, #0]
 800e646:	6878      	ldr	r0, [r7, #4]
 800e648:	f000 fc1c 	bl	800ee84 <USBD_CtlError>
        break;
 800e64c:	bf00      	nop
      }
      break;
 800e64e:	e0e7      	b.n	800e820 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e656:	2b02      	cmp	r3, #2
 800e658:	d002      	beq.n	800e660 <USBD_StdEPReq+0xd4>
 800e65a:	2b03      	cmp	r3, #3
 800e65c:	d015      	beq.n	800e68a <USBD_StdEPReq+0xfe>
 800e65e:	e02d      	b.n	800e6bc <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e660:	7bbb      	ldrb	r3, [r7, #14]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d00c      	beq.n	800e680 <USBD_StdEPReq+0xf4>
 800e666:	7bbb      	ldrb	r3, [r7, #14]
 800e668:	2b80      	cmp	r3, #128	; 0x80
 800e66a:	d009      	beq.n	800e680 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800e66c:	7bbb      	ldrb	r3, [r7, #14]
 800e66e:	4619      	mov	r1, r3
 800e670:	6878      	ldr	r0, [r7, #4]
 800e672:	f001 f94f 	bl	800f914 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e676:	2180      	movs	r1, #128	; 0x80
 800e678:	6878      	ldr	r0, [r7, #4]
 800e67a:	f001 f94b 	bl	800f914 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800e67e:	e023      	b.n	800e6c8 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800e680:	6839      	ldr	r1, [r7, #0]
 800e682:	6878      	ldr	r0, [r7, #4]
 800e684:	f000 fbfe 	bl	800ee84 <USBD_CtlError>
        break;
 800e688:	e01e      	b.n	800e6c8 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800e68a:	683b      	ldr	r3, [r7, #0]
 800e68c:	885b      	ldrh	r3, [r3, #2]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d119      	bne.n	800e6c6 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800e692:	7bbb      	ldrb	r3, [r7, #14]
 800e694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d004      	beq.n	800e6a6 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e69c:	7bbb      	ldrb	r3, [r7, #14]
 800e69e:	4619      	mov	r1, r3
 800e6a0:	6878      	ldr	r0, [r7, #4]
 800e6a2:	f001 f956 	bl	800f952 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	f000 fcb7 	bl	800f01a <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6b2:	689b      	ldr	r3, [r3, #8]
 800e6b4:	6839      	ldr	r1, [r7, #0]
 800e6b6:	6878      	ldr	r0, [r7, #4]
 800e6b8:	4798      	blx	r3
        }
        break;
 800e6ba:	e004      	b.n	800e6c6 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800e6bc:	6839      	ldr	r1, [r7, #0]
 800e6be:	6878      	ldr	r0, [r7, #4]
 800e6c0:	f000 fbe0 	bl	800ee84 <USBD_CtlError>
        break;
 800e6c4:	e000      	b.n	800e6c8 <USBD_StdEPReq+0x13c>
        break;
 800e6c6:	bf00      	nop
      }
      break;
 800e6c8:	e0aa      	b.n	800e820 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e6d0:	2b02      	cmp	r3, #2
 800e6d2:	d002      	beq.n	800e6da <USBD_StdEPReq+0x14e>
 800e6d4:	2b03      	cmp	r3, #3
 800e6d6:	d032      	beq.n	800e73e <USBD_StdEPReq+0x1b2>
 800e6d8:	e097      	b.n	800e80a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e6da:	7bbb      	ldrb	r3, [r7, #14]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d007      	beq.n	800e6f0 <USBD_StdEPReq+0x164>
 800e6e0:	7bbb      	ldrb	r3, [r7, #14]
 800e6e2:	2b80      	cmp	r3, #128	; 0x80
 800e6e4:	d004      	beq.n	800e6f0 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800e6e6:	6839      	ldr	r1, [r7, #0]
 800e6e8:	6878      	ldr	r0, [r7, #4]
 800e6ea:	f000 fbcb 	bl	800ee84 <USBD_CtlError>
          break;
 800e6ee:	e091      	b.n	800e814 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e6f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	da0b      	bge.n	800e710 <USBD_StdEPReq+0x184>
 800e6f8:	7bbb      	ldrb	r3, [r7, #14]
 800e6fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e6fe:	4613      	mov	r3, r2
 800e700:	009b      	lsls	r3, r3, #2
 800e702:	4413      	add	r3, r2
 800e704:	009b      	lsls	r3, r3, #2
 800e706:	3310      	adds	r3, #16
 800e708:	687a      	ldr	r2, [r7, #4]
 800e70a:	4413      	add	r3, r2
 800e70c:	3304      	adds	r3, #4
 800e70e:	e00b      	b.n	800e728 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800e710:	7bbb      	ldrb	r3, [r7, #14]
 800e712:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e716:	4613      	mov	r3, r2
 800e718:	009b      	lsls	r3, r3, #2
 800e71a:	4413      	add	r3, r2
 800e71c:	009b      	lsls	r3, r3, #2
 800e71e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e722:	687a      	ldr	r2, [r7, #4]
 800e724:	4413      	add	r3, r2
 800e726:	3304      	adds	r3, #4
 800e728:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800e72a:	68bb      	ldr	r3, [r7, #8]
 800e72c:	2200      	movs	r2, #0
 800e72e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e730:	68bb      	ldr	r3, [r7, #8]
 800e732:	2202      	movs	r2, #2
 800e734:	4619      	mov	r1, r3
 800e736:	6878      	ldr	r0, [r7, #4]
 800e738:	f000 fc15 	bl	800ef66 <USBD_CtlSendData>
        break;
 800e73c:	e06a      	b.n	800e814 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800e73e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e742:	2b00      	cmp	r3, #0
 800e744:	da11      	bge.n	800e76a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e746:	7bbb      	ldrb	r3, [r7, #14]
 800e748:	f003 020f 	and.w	r2, r3, #15
 800e74c:	6879      	ldr	r1, [r7, #4]
 800e74e:	4613      	mov	r3, r2
 800e750:	009b      	lsls	r3, r3, #2
 800e752:	4413      	add	r3, r2
 800e754:	009b      	lsls	r3, r3, #2
 800e756:	440b      	add	r3, r1
 800e758:	3324      	adds	r3, #36	; 0x24
 800e75a:	881b      	ldrh	r3, [r3, #0]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d117      	bne.n	800e790 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800e760:	6839      	ldr	r1, [r7, #0]
 800e762:	6878      	ldr	r0, [r7, #4]
 800e764:	f000 fb8e 	bl	800ee84 <USBD_CtlError>
            break;
 800e768:	e054      	b.n	800e814 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e76a:	7bbb      	ldrb	r3, [r7, #14]
 800e76c:	f003 020f 	and.w	r2, r3, #15
 800e770:	6879      	ldr	r1, [r7, #4]
 800e772:	4613      	mov	r3, r2
 800e774:	009b      	lsls	r3, r3, #2
 800e776:	4413      	add	r3, r2
 800e778:	009b      	lsls	r3, r3, #2
 800e77a:	440b      	add	r3, r1
 800e77c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e780:	881b      	ldrh	r3, [r3, #0]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d104      	bne.n	800e790 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800e786:	6839      	ldr	r1, [r7, #0]
 800e788:	6878      	ldr	r0, [r7, #4]
 800e78a:	f000 fb7b 	bl	800ee84 <USBD_CtlError>
            break;
 800e78e:	e041      	b.n	800e814 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e790:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e794:	2b00      	cmp	r3, #0
 800e796:	da0b      	bge.n	800e7b0 <USBD_StdEPReq+0x224>
 800e798:	7bbb      	ldrb	r3, [r7, #14]
 800e79a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e79e:	4613      	mov	r3, r2
 800e7a0:	009b      	lsls	r3, r3, #2
 800e7a2:	4413      	add	r3, r2
 800e7a4:	009b      	lsls	r3, r3, #2
 800e7a6:	3310      	adds	r3, #16
 800e7a8:	687a      	ldr	r2, [r7, #4]
 800e7aa:	4413      	add	r3, r2
 800e7ac:	3304      	adds	r3, #4
 800e7ae:	e00b      	b.n	800e7c8 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800e7b0:	7bbb      	ldrb	r3, [r7, #14]
 800e7b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e7b6:	4613      	mov	r3, r2
 800e7b8:	009b      	lsls	r3, r3, #2
 800e7ba:	4413      	add	r3, r2
 800e7bc:	009b      	lsls	r3, r3, #2
 800e7be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e7c2:	687a      	ldr	r2, [r7, #4]
 800e7c4:	4413      	add	r3, r2
 800e7c6:	3304      	adds	r3, #4
 800e7c8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e7ca:	7bbb      	ldrb	r3, [r7, #14]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d002      	beq.n	800e7d6 <USBD_StdEPReq+0x24a>
 800e7d0:	7bbb      	ldrb	r3, [r7, #14]
 800e7d2:	2b80      	cmp	r3, #128	; 0x80
 800e7d4:	d103      	bne.n	800e7de <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800e7d6:	68bb      	ldr	r3, [r7, #8]
 800e7d8:	2200      	movs	r2, #0
 800e7da:	601a      	str	r2, [r3, #0]
 800e7dc:	e00e      	b.n	800e7fc <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e7de:	7bbb      	ldrb	r3, [r7, #14]
 800e7e0:	4619      	mov	r1, r3
 800e7e2:	6878      	ldr	r0, [r7, #4]
 800e7e4:	f001 f8d4 	bl	800f990 <USBD_LL_IsStallEP>
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d003      	beq.n	800e7f6 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800e7ee:	68bb      	ldr	r3, [r7, #8]
 800e7f0:	2201      	movs	r2, #1
 800e7f2:	601a      	str	r2, [r3, #0]
 800e7f4:	e002      	b.n	800e7fc <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800e7f6:	68bb      	ldr	r3, [r7, #8]
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e7fc:	68bb      	ldr	r3, [r7, #8]
 800e7fe:	2202      	movs	r2, #2
 800e800:	4619      	mov	r1, r3
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f000 fbaf 	bl	800ef66 <USBD_CtlSendData>
          break;
 800e808:	e004      	b.n	800e814 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800e80a:	6839      	ldr	r1, [r7, #0]
 800e80c:	6878      	ldr	r0, [r7, #4]
 800e80e:	f000 fb39 	bl	800ee84 <USBD_CtlError>
        break;
 800e812:	bf00      	nop
      }
      break;
 800e814:	e004      	b.n	800e820 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800e816:	6839      	ldr	r1, [r7, #0]
 800e818:	6878      	ldr	r0, [r7, #4]
 800e81a:	f000 fb33 	bl	800ee84 <USBD_CtlError>
      break;
 800e81e:	bf00      	nop
    }
    break;
 800e820:	e004      	b.n	800e82c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800e822:	6839      	ldr	r1, [r7, #0]
 800e824:	6878      	ldr	r0, [r7, #4]
 800e826:	f000 fb2d 	bl	800ee84 <USBD_CtlError>
    break;
 800e82a:	bf00      	nop
  }

  return ret;
 800e82c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e82e:	4618      	mov	r0, r3
 800e830:	3710      	adds	r7, #16
 800e832:	46bd      	mov	sp, r7
 800e834:	bd80      	pop	{r7, pc}
	...

0800e838 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b084      	sub	sp, #16
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
 800e840:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e842:	2300      	movs	r3, #0
 800e844:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e846:	2300      	movs	r3, #0
 800e848:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e84a:	2300      	movs	r3, #0
 800e84c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	885b      	ldrh	r3, [r3, #2]
 800e852:	0a1b      	lsrs	r3, r3, #8
 800e854:	b29b      	uxth	r3, r3
 800e856:	3b01      	subs	r3, #1
 800e858:	2b06      	cmp	r3, #6
 800e85a:	f200 8128 	bhi.w	800eaae <USBD_GetDescriptor+0x276>
 800e85e:	a201      	add	r2, pc, #4	; (adr r2, 800e864 <USBD_GetDescriptor+0x2c>)
 800e860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e864:	0800e881 	.word	0x0800e881
 800e868:	0800e899 	.word	0x0800e899
 800e86c:	0800e8d9 	.word	0x0800e8d9
 800e870:	0800eaaf 	.word	0x0800eaaf
 800e874:	0800eaaf 	.word	0x0800eaaf
 800e878:	0800ea4f 	.word	0x0800ea4f
 800e87c:	0800ea7b 	.word	0x0800ea7b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	687a      	ldr	r2, [r7, #4]
 800e88a:	7c12      	ldrb	r2, [r2, #16]
 800e88c:	f107 0108 	add.w	r1, r7, #8
 800e890:	4610      	mov	r0, r2
 800e892:	4798      	blx	r3
 800e894:	60f8      	str	r0, [r7, #12]
    break;
 800e896:	e112      	b.n	800eabe <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	7c1b      	ldrb	r3, [r3, #16]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d10d      	bne.n	800e8bc <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8a8:	f107 0208 	add.w	r2, r7, #8
 800e8ac:	4610      	mov	r0, r2
 800e8ae:	4798      	blx	r3
 800e8b0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	3301      	adds	r3, #1
 800e8b6:	2202      	movs	r2, #2
 800e8b8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800e8ba:	e100      	b.n	800eabe <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8c4:	f107 0208 	add.w	r2, r7, #8
 800e8c8:	4610      	mov	r0, r2
 800e8ca:	4798      	blx	r3
 800e8cc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	3301      	adds	r3, #1
 800e8d2:	2202      	movs	r2, #2
 800e8d4:	701a      	strb	r2, [r3, #0]
    break;
 800e8d6:	e0f2      	b.n	800eabe <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800e8d8:	683b      	ldr	r3, [r7, #0]
 800e8da:	885b      	ldrh	r3, [r3, #2]
 800e8dc:	b2db      	uxtb	r3, r3
 800e8de:	2b05      	cmp	r3, #5
 800e8e0:	f200 80ac 	bhi.w	800ea3c <USBD_GetDescriptor+0x204>
 800e8e4:	a201      	add	r2, pc, #4	; (adr r2, 800e8ec <USBD_GetDescriptor+0xb4>)
 800e8e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8ea:	bf00      	nop
 800e8ec:	0800e905 	.word	0x0800e905
 800e8f0:	0800e939 	.word	0x0800e939
 800e8f4:	0800e96d 	.word	0x0800e96d
 800e8f8:	0800e9a1 	.word	0x0800e9a1
 800e8fc:	0800e9d5 	.word	0x0800e9d5
 800e900:	0800ea09 	.word	0x0800ea09
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e90a:	685b      	ldr	r3, [r3, #4]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d00b      	beq.n	800e928 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e916:	685b      	ldr	r3, [r3, #4]
 800e918:	687a      	ldr	r2, [r7, #4]
 800e91a:	7c12      	ldrb	r2, [r2, #16]
 800e91c:	f107 0108 	add.w	r1, r7, #8
 800e920:	4610      	mov	r0, r2
 800e922:	4798      	blx	r3
 800e924:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e926:	e091      	b.n	800ea4c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800e928:	6839      	ldr	r1, [r7, #0]
 800e92a:	6878      	ldr	r0, [r7, #4]
 800e92c:	f000 faaa 	bl	800ee84 <USBD_CtlError>
        err++;
 800e930:	7afb      	ldrb	r3, [r7, #11]
 800e932:	3301      	adds	r3, #1
 800e934:	72fb      	strb	r3, [r7, #11]
      break;
 800e936:	e089      	b.n	800ea4c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e93e:	689b      	ldr	r3, [r3, #8]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d00b      	beq.n	800e95c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e94a:	689b      	ldr	r3, [r3, #8]
 800e94c:	687a      	ldr	r2, [r7, #4]
 800e94e:	7c12      	ldrb	r2, [r2, #16]
 800e950:	f107 0108 	add.w	r1, r7, #8
 800e954:	4610      	mov	r0, r2
 800e956:	4798      	blx	r3
 800e958:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e95a:	e077      	b.n	800ea4c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800e95c:	6839      	ldr	r1, [r7, #0]
 800e95e:	6878      	ldr	r0, [r7, #4]
 800e960:	f000 fa90 	bl	800ee84 <USBD_CtlError>
        err++;
 800e964:	7afb      	ldrb	r3, [r7, #11]
 800e966:	3301      	adds	r3, #1
 800e968:	72fb      	strb	r3, [r7, #11]
      break;
 800e96a:	e06f      	b.n	800ea4c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e972:	68db      	ldr	r3, [r3, #12]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d00b      	beq.n	800e990 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e97e:	68db      	ldr	r3, [r3, #12]
 800e980:	687a      	ldr	r2, [r7, #4]
 800e982:	7c12      	ldrb	r2, [r2, #16]
 800e984:	f107 0108 	add.w	r1, r7, #8
 800e988:	4610      	mov	r0, r2
 800e98a:	4798      	blx	r3
 800e98c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e98e:	e05d      	b.n	800ea4c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800e990:	6839      	ldr	r1, [r7, #0]
 800e992:	6878      	ldr	r0, [r7, #4]
 800e994:	f000 fa76 	bl	800ee84 <USBD_CtlError>
        err++;
 800e998:	7afb      	ldrb	r3, [r7, #11]
 800e99a:	3301      	adds	r3, #1
 800e99c:	72fb      	strb	r3, [r7, #11]
      break;
 800e99e:	e055      	b.n	800ea4c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e9a6:	691b      	ldr	r3, [r3, #16]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d00b      	beq.n	800e9c4 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e9b2:	691b      	ldr	r3, [r3, #16]
 800e9b4:	687a      	ldr	r2, [r7, #4]
 800e9b6:	7c12      	ldrb	r2, [r2, #16]
 800e9b8:	f107 0108 	add.w	r1, r7, #8
 800e9bc:	4610      	mov	r0, r2
 800e9be:	4798      	blx	r3
 800e9c0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e9c2:	e043      	b.n	800ea4c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800e9c4:	6839      	ldr	r1, [r7, #0]
 800e9c6:	6878      	ldr	r0, [r7, #4]
 800e9c8:	f000 fa5c 	bl	800ee84 <USBD_CtlError>
        err++;
 800e9cc:	7afb      	ldrb	r3, [r7, #11]
 800e9ce:	3301      	adds	r3, #1
 800e9d0:	72fb      	strb	r3, [r7, #11]
      break;
 800e9d2:	e03b      	b.n	800ea4c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e9da:	695b      	ldr	r3, [r3, #20]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d00b      	beq.n	800e9f8 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e9e6:	695b      	ldr	r3, [r3, #20]
 800e9e8:	687a      	ldr	r2, [r7, #4]
 800e9ea:	7c12      	ldrb	r2, [r2, #16]
 800e9ec:	f107 0108 	add.w	r1, r7, #8
 800e9f0:	4610      	mov	r0, r2
 800e9f2:	4798      	blx	r3
 800e9f4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e9f6:	e029      	b.n	800ea4c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800e9f8:	6839      	ldr	r1, [r7, #0]
 800e9fa:	6878      	ldr	r0, [r7, #4]
 800e9fc:	f000 fa42 	bl	800ee84 <USBD_CtlError>
        err++;
 800ea00:	7afb      	ldrb	r3, [r7, #11]
 800ea02:	3301      	adds	r3, #1
 800ea04:	72fb      	strb	r3, [r7, #11]
      break;
 800ea06:	e021      	b.n	800ea4c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea0e:	699b      	ldr	r3, [r3, #24]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d00b      	beq.n	800ea2c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea1a:	699b      	ldr	r3, [r3, #24]
 800ea1c:	687a      	ldr	r2, [r7, #4]
 800ea1e:	7c12      	ldrb	r2, [r2, #16]
 800ea20:	f107 0108 	add.w	r1, r7, #8
 800ea24:	4610      	mov	r0, r2
 800ea26:	4798      	blx	r3
 800ea28:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ea2a:	e00f      	b.n	800ea4c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ea2c:	6839      	ldr	r1, [r7, #0]
 800ea2e:	6878      	ldr	r0, [r7, #4]
 800ea30:	f000 fa28 	bl	800ee84 <USBD_CtlError>
        err++;
 800ea34:	7afb      	ldrb	r3, [r7, #11]
 800ea36:	3301      	adds	r3, #1
 800ea38:	72fb      	strb	r3, [r7, #11]
      break;
 800ea3a:	e007      	b.n	800ea4c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800ea3c:	6839      	ldr	r1, [r7, #0]
 800ea3e:	6878      	ldr	r0, [r7, #4]
 800ea40:	f000 fa20 	bl	800ee84 <USBD_CtlError>
      err++;
 800ea44:	7afb      	ldrb	r3, [r7, #11]
 800ea46:	3301      	adds	r3, #1
 800ea48:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800ea4a:	bf00      	nop
    }
    break;
 800ea4c:	e037      	b.n	800eabe <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	7c1b      	ldrb	r3, [r3, #16]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d109      	bne.n	800ea6a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea5e:	f107 0208 	add.w	r2, r7, #8
 800ea62:	4610      	mov	r0, r2
 800ea64:	4798      	blx	r3
 800ea66:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800ea68:	e029      	b.n	800eabe <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800ea6a:	6839      	ldr	r1, [r7, #0]
 800ea6c:	6878      	ldr	r0, [r7, #4]
 800ea6e:	f000 fa09 	bl	800ee84 <USBD_CtlError>
      err++;
 800ea72:	7afb      	ldrb	r3, [r7, #11]
 800ea74:	3301      	adds	r3, #1
 800ea76:	72fb      	strb	r3, [r7, #11]
    break;
 800ea78:	e021      	b.n	800eabe <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	7c1b      	ldrb	r3, [r3, #16]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d10d      	bne.n	800ea9e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea8a:	f107 0208 	add.w	r2, r7, #8
 800ea8e:	4610      	mov	r0, r2
 800ea90:	4798      	blx	r3
 800ea92:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	3301      	adds	r3, #1
 800ea98:	2207      	movs	r2, #7
 800ea9a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800ea9c:	e00f      	b.n	800eabe <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800ea9e:	6839      	ldr	r1, [r7, #0]
 800eaa0:	6878      	ldr	r0, [r7, #4]
 800eaa2:	f000 f9ef 	bl	800ee84 <USBD_CtlError>
      err++;
 800eaa6:	7afb      	ldrb	r3, [r7, #11]
 800eaa8:	3301      	adds	r3, #1
 800eaaa:	72fb      	strb	r3, [r7, #11]
    break;
 800eaac:	e007      	b.n	800eabe <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800eaae:	6839      	ldr	r1, [r7, #0]
 800eab0:	6878      	ldr	r0, [r7, #4]
 800eab2:	f000 f9e7 	bl	800ee84 <USBD_CtlError>
    err++;
 800eab6:	7afb      	ldrb	r3, [r7, #11]
 800eab8:	3301      	adds	r3, #1
 800eaba:	72fb      	strb	r3, [r7, #11]
    break;
 800eabc:	bf00      	nop
  }

  if (err != 0U)
 800eabe:	7afb      	ldrb	r3, [r7, #11]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d11e      	bne.n	800eb02 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	88db      	ldrh	r3, [r3, #6]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d016      	beq.n	800eafa <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800eacc:	893b      	ldrh	r3, [r7, #8]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d00e      	beq.n	800eaf0 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800ead2:	683b      	ldr	r3, [r7, #0]
 800ead4:	88da      	ldrh	r2, [r3, #6]
 800ead6:	893b      	ldrh	r3, [r7, #8]
 800ead8:	4293      	cmp	r3, r2
 800eada:	bf28      	it	cs
 800eadc:	4613      	movcs	r3, r2
 800eade:	b29b      	uxth	r3, r3
 800eae0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800eae2:	893b      	ldrh	r3, [r7, #8]
 800eae4:	461a      	mov	r2, r3
 800eae6:	68f9      	ldr	r1, [r7, #12]
 800eae8:	6878      	ldr	r0, [r7, #4]
 800eaea:	f000 fa3c 	bl	800ef66 <USBD_CtlSendData>
 800eaee:	e009      	b.n	800eb04 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800eaf0:	6839      	ldr	r1, [r7, #0]
 800eaf2:	6878      	ldr	r0, [r7, #4]
 800eaf4:	f000 f9c6 	bl	800ee84 <USBD_CtlError>
 800eaf8:	e004      	b.n	800eb04 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800eafa:	6878      	ldr	r0, [r7, #4]
 800eafc:	f000 fa8d 	bl	800f01a <USBD_CtlSendStatus>
 800eb00:	e000      	b.n	800eb04 <USBD_GetDescriptor+0x2cc>
    return;
 800eb02:	bf00      	nop
    }
  }
}
 800eb04:	3710      	adds	r7, #16
 800eb06:	46bd      	mov	sp, r7
 800eb08:	bd80      	pop	{r7, pc}
 800eb0a:	bf00      	nop

0800eb0c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b084      	sub	sp, #16
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
 800eb14:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800eb16:	683b      	ldr	r3, [r7, #0]
 800eb18:	889b      	ldrh	r3, [r3, #4]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d130      	bne.n	800eb80 <USBD_SetAddress+0x74>
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	88db      	ldrh	r3, [r3, #6]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d12c      	bne.n	800eb80 <USBD_SetAddress+0x74>
 800eb26:	683b      	ldr	r3, [r7, #0]
 800eb28:	885b      	ldrh	r3, [r3, #2]
 800eb2a:	2b7f      	cmp	r3, #127	; 0x7f
 800eb2c:	d828      	bhi.n	800eb80 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800eb2e:	683b      	ldr	r3, [r7, #0]
 800eb30:	885b      	ldrh	r3, [r3, #2]
 800eb32:	b2db      	uxtb	r3, r3
 800eb34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb38:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb40:	2b03      	cmp	r3, #3
 800eb42:	d104      	bne.n	800eb4e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800eb44:	6839      	ldr	r1, [r7, #0]
 800eb46:	6878      	ldr	r0, [r7, #4]
 800eb48:	f000 f99c 	bl	800ee84 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb4c:	e01c      	b.n	800eb88 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	7bfa      	ldrb	r2, [r7, #15]
 800eb52:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800eb56:	7bfb      	ldrb	r3, [r7, #15]
 800eb58:	4619      	mov	r1, r3
 800eb5a:	6878      	ldr	r0, [r7, #4]
 800eb5c:	f000 ff44 	bl	800f9e8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800eb60:	6878      	ldr	r0, [r7, #4]
 800eb62:	f000 fa5a 	bl	800f01a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800eb66:	7bfb      	ldrb	r3, [r7, #15]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d004      	beq.n	800eb76 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	2202      	movs	r2, #2
 800eb70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb74:	e008      	b.n	800eb88 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	2201      	movs	r2, #1
 800eb7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb7e:	e003      	b.n	800eb88 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800eb80:	6839      	ldr	r1, [r7, #0]
 800eb82:	6878      	ldr	r0, [r7, #4]
 800eb84:	f000 f97e 	bl	800ee84 <USBD_CtlError>
  }
}
 800eb88:	bf00      	nop
 800eb8a:	3710      	adds	r7, #16
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	bd80      	pop	{r7, pc}

0800eb90 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b084      	sub	sp, #16
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
 800eb98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800eb9e:	683b      	ldr	r3, [r7, #0]
 800eba0:	885b      	ldrh	r3, [r3, #2]
 800eba2:	b2da      	uxtb	r2, r3
 800eba4:	4b4b      	ldr	r3, [pc, #300]	; (800ecd4 <USBD_SetConfig+0x144>)
 800eba6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800eba8:	4b4a      	ldr	r3, [pc, #296]	; (800ecd4 <USBD_SetConfig+0x144>)
 800ebaa:	781b      	ldrb	r3, [r3, #0]
 800ebac:	2b01      	cmp	r3, #1
 800ebae:	d905      	bls.n	800ebbc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ebb0:	6839      	ldr	r1, [r7, #0]
 800ebb2:	6878      	ldr	r0, [r7, #4]
 800ebb4:	f000 f966 	bl	800ee84 <USBD_CtlError>
    return USBD_FAIL;
 800ebb8:	2303      	movs	r3, #3
 800ebba:	e087      	b.n	800eccc <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ebc2:	2b02      	cmp	r3, #2
 800ebc4:	d002      	beq.n	800ebcc <USBD_SetConfig+0x3c>
 800ebc6:	2b03      	cmp	r3, #3
 800ebc8:	d025      	beq.n	800ec16 <USBD_SetConfig+0x86>
 800ebca:	e071      	b.n	800ecb0 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800ebcc:	4b41      	ldr	r3, [pc, #260]	; (800ecd4 <USBD_SetConfig+0x144>)
 800ebce:	781b      	ldrb	r3, [r3, #0]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d01c      	beq.n	800ec0e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800ebd4:	4b3f      	ldr	r3, [pc, #252]	; (800ecd4 <USBD_SetConfig+0x144>)
 800ebd6:	781b      	ldrb	r3, [r3, #0]
 800ebd8:	461a      	mov	r2, r3
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800ebde:	4b3d      	ldr	r3, [pc, #244]	; (800ecd4 <USBD_SetConfig+0x144>)
 800ebe0:	781b      	ldrb	r3, [r3, #0]
 800ebe2:	4619      	mov	r1, r3
 800ebe4:	6878      	ldr	r0, [r7, #4]
 800ebe6:	f7ff f9a7 	bl	800df38 <USBD_SetClassConfig>
 800ebea:	4603      	mov	r3, r0
 800ebec:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800ebee:	7bfb      	ldrb	r3, [r7, #15]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d004      	beq.n	800ebfe <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800ebf4:	6839      	ldr	r1, [r7, #0]
 800ebf6:	6878      	ldr	r0, [r7, #4]
 800ebf8:	f000 f944 	bl	800ee84 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800ebfc:	e065      	b.n	800ecca <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800ebfe:	6878      	ldr	r0, [r7, #4]
 800ec00:	f000 fa0b 	bl	800f01a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	2203      	movs	r2, #3
 800ec08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800ec0c:	e05d      	b.n	800ecca <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800ec0e:	6878      	ldr	r0, [r7, #4]
 800ec10:	f000 fa03 	bl	800f01a <USBD_CtlSendStatus>
    break;
 800ec14:	e059      	b.n	800ecca <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800ec16:	4b2f      	ldr	r3, [pc, #188]	; (800ecd4 <USBD_SetConfig+0x144>)
 800ec18:	781b      	ldrb	r3, [r3, #0]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d112      	bne.n	800ec44 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	2202      	movs	r2, #2
 800ec22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800ec26:	4b2b      	ldr	r3, [pc, #172]	; (800ecd4 <USBD_SetConfig+0x144>)
 800ec28:	781b      	ldrb	r3, [r3, #0]
 800ec2a:	461a      	mov	r2, r3
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ec30:	4b28      	ldr	r3, [pc, #160]	; (800ecd4 <USBD_SetConfig+0x144>)
 800ec32:	781b      	ldrb	r3, [r3, #0]
 800ec34:	4619      	mov	r1, r3
 800ec36:	6878      	ldr	r0, [r7, #4]
 800ec38:	f7ff f99a 	bl	800df70 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800ec3c:	6878      	ldr	r0, [r7, #4]
 800ec3e:	f000 f9ec 	bl	800f01a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800ec42:	e042      	b.n	800ecca <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800ec44:	4b23      	ldr	r3, [pc, #140]	; (800ecd4 <USBD_SetConfig+0x144>)
 800ec46:	781b      	ldrb	r3, [r3, #0]
 800ec48:	461a      	mov	r2, r3
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	685b      	ldr	r3, [r3, #4]
 800ec4e:	429a      	cmp	r2, r3
 800ec50:	d02a      	beq.n	800eca8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	685b      	ldr	r3, [r3, #4]
 800ec56:	b2db      	uxtb	r3, r3
 800ec58:	4619      	mov	r1, r3
 800ec5a:	6878      	ldr	r0, [r7, #4]
 800ec5c:	f7ff f988 	bl	800df70 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800ec60:	4b1c      	ldr	r3, [pc, #112]	; (800ecd4 <USBD_SetConfig+0x144>)
 800ec62:	781b      	ldrb	r3, [r3, #0]
 800ec64:	461a      	mov	r2, r3
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800ec6a:	4b1a      	ldr	r3, [pc, #104]	; (800ecd4 <USBD_SetConfig+0x144>)
 800ec6c:	781b      	ldrb	r3, [r3, #0]
 800ec6e:	4619      	mov	r1, r3
 800ec70:	6878      	ldr	r0, [r7, #4]
 800ec72:	f7ff f961 	bl	800df38 <USBD_SetClassConfig>
 800ec76:	4603      	mov	r3, r0
 800ec78:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800ec7a:	7bfb      	ldrb	r3, [r7, #15]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d00f      	beq.n	800eca0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800ec80:	6839      	ldr	r1, [r7, #0]
 800ec82:	6878      	ldr	r0, [r7, #4]
 800ec84:	f000 f8fe 	bl	800ee84 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	685b      	ldr	r3, [r3, #4]
 800ec8c:	b2db      	uxtb	r3, r3
 800ec8e:	4619      	mov	r1, r3
 800ec90:	6878      	ldr	r0, [r7, #4]
 800ec92:	f7ff f96d 	bl	800df70 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	2202      	movs	r2, #2
 800ec9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800ec9e:	e014      	b.n	800ecca <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800eca0:	6878      	ldr	r0, [r7, #4]
 800eca2:	f000 f9ba 	bl	800f01a <USBD_CtlSendStatus>
    break;
 800eca6:	e010      	b.n	800ecca <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800eca8:	6878      	ldr	r0, [r7, #4]
 800ecaa:	f000 f9b6 	bl	800f01a <USBD_CtlSendStatus>
    break;
 800ecae:	e00c      	b.n	800ecca <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800ecb0:	6839      	ldr	r1, [r7, #0]
 800ecb2:	6878      	ldr	r0, [r7, #4]
 800ecb4:	f000 f8e6 	bl	800ee84 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ecb8:	4b06      	ldr	r3, [pc, #24]	; (800ecd4 <USBD_SetConfig+0x144>)
 800ecba:	781b      	ldrb	r3, [r3, #0]
 800ecbc:	4619      	mov	r1, r3
 800ecbe:	6878      	ldr	r0, [r7, #4]
 800ecc0:	f7ff f956 	bl	800df70 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800ecc4:	2303      	movs	r3, #3
 800ecc6:	73fb      	strb	r3, [r7, #15]
    break;
 800ecc8:	bf00      	nop
  }

  return ret;
 800ecca:	7bfb      	ldrb	r3, [r7, #15]
}
 800eccc:	4618      	mov	r0, r3
 800ecce:	3710      	adds	r7, #16
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	bd80      	pop	{r7, pc}
 800ecd4:	2400020c 	.word	0x2400020c

0800ecd8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b082      	sub	sp, #8
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
 800ece0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	88db      	ldrh	r3, [r3, #6]
 800ece6:	2b01      	cmp	r3, #1
 800ece8:	d004      	beq.n	800ecf4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ecea:	6839      	ldr	r1, [r7, #0]
 800ecec:	6878      	ldr	r0, [r7, #4]
 800ecee:	f000 f8c9 	bl	800ee84 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800ecf2:	e021      	b.n	800ed38 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ecfa:	2b01      	cmp	r3, #1
 800ecfc:	db17      	blt.n	800ed2e <USBD_GetConfig+0x56>
 800ecfe:	2b02      	cmp	r3, #2
 800ed00:	dd02      	ble.n	800ed08 <USBD_GetConfig+0x30>
 800ed02:	2b03      	cmp	r3, #3
 800ed04:	d00b      	beq.n	800ed1e <USBD_GetConfig+0x46>
 800ed06:	e012      	b.n	800ed2e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	3308      	adds	r3, #8
 800ed12:	2201      	movs	r2, #1
 800ed14:	4619      	mov	r1, r3
 800ed16:	6878      	ldr	r0, [r7, #4]
 800ed18:	f000 f925 	bl	800ef66 <USBD_CtlSendData>
      break;
 800ed1c:	e00c      	b.n	800ed38 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	3304      	adds	r3, #4
 800ed22:	2201      	movs	r2, #1
 800ed24:	4619      	mov	r1, r3
 800ed26:	6878      	ldr	r0, [r7, #4]
 800ed28:	f000 f91d 	bl	800ef66 <USBD_CtlSendData>
      break;
 800ed2c:	e004      	b.n	800ed38 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800ed2e:	6839      	ldr	r1, [r7, #0]
 800ed30:	6878      	ldr	r0, [r7, #4]
 800ed32:	f000 f8a7 	bl	800ee84 <USBD_CtlError>
      break;
 800ed36:	bf00      	nop
}
 800ed38:	bf00      	nop
 800ed3a:	3708      	adds	r7, #8
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	bd80      	pop	{r7, pc}

0800ed40 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b082      	sub	sp, #8
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
 800ed48:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed50:	3b01      	subs	r3, #1
 800ed52:	2b02      	cmp	r3, #2
 800ed54:	d81e      	bhi.n	800ed94 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800ed56:	683b      	ldr	r3, [r7, #0]
 800ed58:	88db      	ldrh	r3, [r3, #6]
 800ed5a:	2b02      	cmp	r3, #2
 800ed5c:	d004      	beq.n	800ed68 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800ed5e:	6839      	ldr	r1, [r7, #0]
 800ed60:	6878      	ldr	r0, [r7, #4]
 800ed62:	f000 f88f 	bl	800ee84 <USBD_CtlError>
      break;
 800ed66:	e01a      	b.n	800ed9e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	2201      	movs	r2, #1
 800ed6c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d005      	beq.n	800ed84 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	68db      	ldr	r3, [r3, #12]
 800ed7c:	f043 0202 	orr.w	r2, r3, #2
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	330c      	adds	r3, #12
 800ed88:	2202      	movs	r2, #2
 800ed8a:	4619      	mov	r1, r3
 800ed8c:	6878      	ldr	r0, [r7, #4]
 800ed8e:	f000 f8ea 	bl	800ef66 <USBD_CtlSendData>
    break;
 800ed92:	e004      	b.n	800ed9e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800ed94:	6839      	ldr	r1, [r7, #0]
 800ed96:	6878      	ldr	r0, [r7, #4]
 800ed98:	f000 f874 	bl	800ee84 <USBD_CtlError>
    break;
 800ed9c:	bf00      	nop
  }
}
 800ed9e:	bf00      	nop
 800eda0:	3708      	adds	r7, #8
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bd80      	pop	{r7, pc}

0800eda6 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eda6:	b580      	push	{r7, lr}
 800eda8:	b082      	sub	sp, #8
 800edaa:	af00      	add	r7, sp, #0
 800edac:	6078      	str	r0, [r7, #4]
 800edae:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800edb0:	683b      	ldr	r3, [r7, #0]
 800edb2:	885b      	ldrh	r3, [r3, #2]
 800edb4:	2b01      	cmp	r3, #1
 800edb6:	d106      	bne.n	800edc6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2201      	movs	r2, #1
 800edbc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800edc0:	6878      	ldr	r0, [r7, #4]
 800edc2:	f000 f92a 	bl	800f01a <USBD_CtlSendStatus>
  }
}
 800edc6:	bf00      	nop
 800edc8:	3708      	adds	r7, #8
 800edca:	46bd      	mov	sp, r7
 800edcc:	bd80      	pop	{r7, pc}

0800edce <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800edce:	b580      	push	{r7, lr}
 800edd0:	b082      	sub	sp, #8
 800edd2:	af00      	add	r7, sp, #0
 800edd4:	6078      	str	r0, [r7, #4]
 800edd6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800edde:	3b01      	subs	r3, #1
 800ede0:	2b02      	cmp	r3, #2
 800ede2:	d80b      	bhi.n	800edfc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ede4:	683b      	ldr	r3, [r7, #0]
 800ede6:	885b      	ldrh	r3, [r3, #2]
 800ede8:	2b01      	cmp	r3, #1
 800edea:	d10c      	bne.n	800ee06 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2200      	movs	r2, #0
 800edf0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800edf4:	6878      	ldr	r0, [r7, #4]
 800edf6:	f000 f910 	bl	800f01a <USBD_CtlSendStatus>
      }
      break;
 800edfa:	e004      	b.n	800ee06 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800edfc:	6839      	ldr	r1, [r7, #0]
 800edfe:	6878      	ldr	r0, [r7, #4]
 800ee00:	f000 f840 	bl	800ee84 <USBD_CtlError>
      break;
 800ee04:	e000      	b.n	800ee08 <USBD_ClrFeature+0x3a>
      break;
 800ee06:	bf00      	nop
  }
}
 800ee08:	bf00      	nop
 800ee0a:	3708      	adds	r7, #8
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	bd80      	pop	{r7, pc}

0800ee10 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b084      	sub	sp, #16
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
 800ee18:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ee1a:	683b      	ldr	r3, [r7, #0]
 800ee1c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	781a      	ldrb	r2, [r3, #0]
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	3301      	adds	r3, #1
 800ee2a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	781a      	ldrb	r2, [r3, #0]
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	3301      	adds	r3, #1
 800ee38:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ee3a:	68f8      	ldr	r0, [r7, #12]
 800ee3c:	f7ff fad3 	bl	800e3e6 <SWAPBYTE>
 800ee40:	4603      	mov	r3, r0
 800ee42:	461a      	mov	r2, r3
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	3301      	adds	r3, #1
 800ee4c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	3301      	adds	r3, #1
 800ee52:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ee54:	68f8      	ldr	r0, [r7, #12]
 800ee56:	f7ff fac6 	bl	800e3e6 <SWAPBYTE>
 800ee5a:	4603      	mov	r3, r0
 800ee5c:	461a      	mov	r2, r3
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	3301      	adds	r3, #1
 800ee66:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	3301      	adds	r3, #1
 800ee6c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ee6e:	68f8      	ldr	r0, [r7, #12]
 800ee70:	f7ff fab9 	bl	800e3e6 <SWAPBYTE>
 800ee74:	4603      	mov	r3, r0
 800ee76:	461a      	mov	r2, r3
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	80da      	strh	r2, [r3, #6]
}
 800ee7c:	bf00      	nop
 800ee7e:	3710      	adds	r7, #16
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bd80      	pop	{r7, pc}

0800ee84 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b082      	sub	sp, #8
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
 800ee8c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ee8e:	2180      	movs	r1, #128	; 0x80
 800ee90:	6878      	ldr	r0, [r7, #4]
 800ee92:	f000 fd3f 	bl	800f914 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ee96:	2100      	movs	r1, #0
 800ee98:	6878      	ldr	r0, [r7, #4]
 800ee9a:	f000 fd3b 	bl	800f914 <USBD_LL_StallEP>
}
 800ee9e:	bf00      	nop
 800eea0:	3708      	adds	r7, #8
 800eea2:	46bd      	mov	sp, r7
 800eea4:	bd80      	pop	{r7, pc}

0800eea6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800eea6:	b580      	push	{r7, lr}
 800eea8:	b086      	sub	sp, #24
 800eeaa:	af00      	add	r7, sp, #0
 800eeac:	60f8      	str	r0, [r7, #12]
 800eeae:	60b9      	str	r1, [r7, #8]
 800eeb0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d036      	beq.n	800ef2a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800eec0:	6938      	ldr	r0, [r7, #16]
 800eec2:	f000 f836 	bl	800ef32 <USBD_GetLen>
 800eec6:	4603      	mov	r3, r0
 800eec8:	3301      	adds	r3, #1
 800eeca:	b29b      	uxth	r3, r3
 800eecc:	005b      	lsls	r3, r3, #1
 800eece:	b29a      	uxth	r2, r3
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800eed4:	7dfb      	ldrb	r3, [r7, #23]
 800eed6:	68ba      	ldr	r2, [r7, #8]
 800eed8:	4413      	add	r3, r2
 800eeda:	687a      	ldr	r2, [r7, #4]
 800eedc:	7812      	ldrb	r2, [r2, #0]
 800eede:	701a      	strb	r2, [r3, #0]
  idx++;
 800eee0:	7dfb      	ldrb	r3, [r7, #23]
 800eee2:	3301      	adds	r3, #1
 800eee4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800eee6:	7dfb      	ldrb	r3, [r7, #23]
 800eee8:	68ba      	ldr	r2, [r7, #8]
 800eeea:	4413      	add	r3, r2
 800eeec:	2203      	movs	r2, #3
 800eeee:	701a      	strb	r2, [r3, #0]
  idx++;
 800eef0:	7dfb      	ldrb	r3, [r7, #23]
 800eef2:	3301      	adds	r3, #1
 800eef4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800eef6:	e013      	b.n	800ef20 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800eef8:	7dfb      	ldrb	r3, [r7, #23]
 800eefa:	68ba      	ldr	r2, [r7, #8]
 800eefc:	4413      	add	r3, r2
 800eefe:	693a      	ldr	r2, [r7, #16]
 800ef00:	7812      	ldrb	r2, [r2, #0]
 800ef02:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ef04:	693b      	ldr	r3, [r7, #16]
 800ef06:	3301      	adds	r3, #1
 800ef08:	613b      	str	r3, [r7, #16]
    idx++;
 800ef0a:	7dfb      	ldrb	r3, [r7, #23]
 800ef0c:	3301      	adds	r3, #1
 800ef0e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ef10:	7dfb      	ldrb	r3, [r7, #23]
 800ef12:	68ba      	ldr	r2, [r7, #8]
 800ef14:	4413      	add	r3, r2
 800ef16:	2200      	movs	r2, #0
 800ef18:	701a      	strb	r2, [r3, #0]
    idx++;
 800ef1a:	7dfb      	ldrb	r3, [r7, #23]
 800ef1c:	3301      	adds	r3, #1
 800ef1e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ef20:	693b      	ldr	r3, [r7, #16]
 800ef22:	781b      	ldrb	r3, [r3, #0]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d1e7      	bne.n	800eef8 <USBD_GetString+0x52>
 800ef28:	e000      	b.n	800ef2c <USBD_GetString+0x86>
    return;
 800ef2a:	bf00      	nop
  }
}
 800ef2c:	3718      	adds	r7, #24
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	bd80      	pop	{r7, pc}

0800ef32 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ef32:	b480      	push	{r7}
 800ef34:	b085      	sub	sp, #20
 800ef36:	af00      	add	r7, sp, #0
 800ef38:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ef42:	e005      	b.n	800ef50 <USBD_GetLen+0x1e>
  {
    len++;
 800ef44:	7bfb      	ldrb	r3, [r7, #15]
 800ef46:	3301      	adds	r3, #1
 800ef48:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ef4a:	68bb      	ldr	r3, [r7, #8]
 800ef4c:	3301      	adds	r3, #1
 800ef4e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ef50:	68bb      	ldr	r3, [r7, #8]
 800ef52:	781b      	ldrb	r3, [r3, #0]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d1f5      	bne.n	800ef44 <USBD_GetLen+0x12>
  }

  return len;
 800ef58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	3714      	adds	r7, #20
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef64:	4770      	bx	lr

0800ef66 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ef66:	b580      	push	{r7, lr}
 800ef68:	b084      	sub	sp, #16
 800ef6a:	af00      	add	r7, sp, #0
 800ef6c:	60f8      	str	r0, [r7, #12]
 800ef6e:	60b9      	str	r1, [r7, #8]
 800ef70:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	2202      	movs	r2, #2
 800ef76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	687a      	ldr	r2, [r7, #4]
 800ef7e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	687a      	ldr	r2, [r7, #4]
 800ef84:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	68ba      	ldr	r2, [r7, #8]
 800ef8a:	2100      	movs	r1, #0
 800ef8c:	68f8      	ldr	r0, [r7, #12]
 800ef8e:	f000 fd4a 	bl	800fa26 <USBD_LL_Transmit>

  return USBD_OK;
 800ef92:	2300      	movs	r3, #0
}
 800ef94:	4618      	mov	r0, r3
 800ef96:	3710      	adds	r7, #16
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	bd80      	pop	{r7, pc}

0800ef9c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b084      	sub	sp, #16
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	60f8      	str	r0, [r7, #12]
 800efa4:	60b9      	str	r1, [r7, #8]
 800efa6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	68ba      	ldr	r2, [r7, #8]
 800efac:	2100      	movs	r1, #0
 800efae:	68f8      	ldr	r0, [r7, #12]
 800efb0:	f000 fd39 	bl	800fa26 <USBD_LL_Transmit>

  return USBD_OK;
 800efb4:	2300      	movs	r3, #0
}
 800efb6:	4618      	mov	r0, r3
 800efb8:	3710      	adds	r7, #16
 800efba:	46bd      	mov	sp, r7
 800efbc:	bd80      	pop	{r7, pc}

0800efbe <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800efbe:	b580      	push	{r7, lr}
 800efc0:	b084      	sub	sp, #16
 800efc2:	af00      	add	r7, sp, #0
 800efc4:	60f8      	str	r0, [r7, #12]
 800efc6:	60b9      	str	r1, [r7, #8]
 800efc8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	2203      	movs	r2, #3
 800efce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	687a      	ldr	r2, [r7, #4]
 800efd6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	687a      	ldr	r2, [r7, #4]
 800efde:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	68ba      	ldr	r2, [r7, #8]
 800efe6:	2100      	movs	r1, #0
 800efe8:	68f8      	ldr	r0, [r7, #12]
 800efea:	f000 fd3d 	bl	800fa68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800efee:	2300      	movs	r3, #0
}
 800eff0:	4618      	mov	r0, r3
 800eff2:	3710      	adds	r7, #16
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd80      	pop	{r7, pc}

0800eff8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b084      	sub	sp, #16
 800effc:	af00      	add	r7, sp, #0
 800effe:	60f8      	str	r0, [r7, #12]
 800f000:	60b9      	str	r1, [r7, #8]
 800f002:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	68ba      	ldr	r2, [r7, #8]
 800f008:	2100      	movs	r1, #0
 800f00a:	68f8      	ldr	r0, [r7, #12]
 800f00c:	f000 fd2c 	bl	800fa68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f010:	2300      	movs	r3, #0
}
 800f012:	4618      	mov	r0, r3
 800f014:	3710      	adds	r7, #16
 800f016:	46bd      	mov	sp, r7
 800f018:	bd80      	pop	{r7, pc}

0800f01a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f01a:	b580      	push	{r7, lr}
 800f01c:	b082      	sub	sp, #8
 800f01e:	af00      	add	r7, sp, #0
 800f020:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	2204      	movs	r2, #4
 800f026:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f02a:	2300      	movs	r3, #0
 800f02c:	2200      	movs	r2, #0
 800f02e:	2100      	movs	r1, #0
 800f030:	6878      	ldr	r0, [r7, #4]
 800f032:	f000 fcf8 	bl	800fa26 <USBD_LL_Transmit>

  return USBD_OK;
 800f036:	2300      	movs	r3, #0
}
 800f038:	4618      	mov	r0, r3
 800f03a:	3708      	adds	r7, #8
 800f03c:	46bd      	mov	sp, r7
 800f03e:	bd80      	pop	{r7, pc}

0800f040 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b082      	sub	sp, #8
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	2205      	movs	r2, #5
 800f04c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f050:	2300      	movs	r3, #0
 800f052:	2200      	movs	r2, #0
 800f054:	2100      	movs	r1, #0
 800f056:	6878      	ldr	r0, [r7, #4]
 800f058:	f000 fd06 	bl	800fa68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f05c:	2300      	movs	r3, #0
}
 800f05e:	4618      	mov	r0, r3
 800f060:	3708      	adds	r7, #8
 800f062:	46bd      	mov	sp, r7
 800f064:	bd80      	pop	{r7, pc}
	...

0800f068 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f068:	b480      	push	{r7}
 800f06a:	b087      	sub	sp, #28
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	60f8      	str	r0, [r7, #12]
 800f070:	60b9      	str	r1, [r7, #8]
 800f072:	4613      	mov	r3, r2
 800f074:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f076:	2301      	movs	r3, #1
 800f078:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f07a:	2300      	movs	r3, #0
 800f07c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f07e:	4b1f      	ldr	r3, [pc, #124]	; (800f0fc <FATFS_LinkDriverEx+0x94>)
 800f080:	7a5b      	ldrb	r3, [r3, #9]
 800f082:	b2db      	uxtb	r3, r3
 800f084:	2b00      	cmp	r3, #0
 800f086:	d131      	bne.n	800f0ec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f088:	4b1c      	ldr	r3, [pc, #112]	; (800f0fc <FATFS_LinkDriverEx+0x94>)
 800f08a:	7a5b      	ldrb	r3, [r3, #9]
 800f08c:	b2db      	uxtb	r3, r3
 800f08e:	461a      	mov	r2, r3
 800f090:	4b1a      	ldr	r3, [pc, #104]	; (800f0fc <FATFS_LinkDriverEx+0x94>)
 800f092:	2100      	movs	r1, #0
 800f094:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f096:	4b19      	ldr	r3, [pc, #100]	; (800f0fc <FATFS_LinkDriverEx+0x94>)
 800f098:	7a5b      	ldrb	r3, [r3, #9]
 800f09a:	b2db      	uxtb	r3, r3
 800f09c:	4a17      	ldr	r2, [pc, #92]	; (800f0fc <FATFS_LinkDriverEx+0x94>)
 800f09e:	009b      	lsls	r3, r3, #2
 800f0a0:	4413      	add	r3, r2
 800f0a2:	68fa      	ldr	r2, [r7, #12]
 800f0a4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f0a6:	4b15      	ldr	r3, [pc, #84]	; (800f0fc <FATFS_LinkDriverEx+0x94>)
 800f0a8:	7a5b      	ldrb	r3, [r3, #9]
 800f0aa:	b2db      	uxtb	r3, r3
 800f0ac:	461a      	mov	r2, r3
 800f0ae:	4b13      	ldr	r3, [pc, #76]	; (800f0fc <FATFS_LinkDriverEx+0x94>)
 800f0b0:	4413      	add	r3, r2
 800f0b2:	79fa      	ldrb	r2, [r7, #7]
 800f0b4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f0b6:	4b11      	ldr	r3, [pc, #68]	; (800f0fc <FATFS_LinkDriverEx+0x94>)
 800f0b8:	7a5b      	ldrb	r3, [r3, #9]
 800f0ba:	b2db      	uxtb	r3, r3
 800f0bc:	1c5a      	adds	r2, r3, #1
 800f0be:	b2d1      	uxtb	r1, r2
 800f0c0:	4a0e      	ldr	r2, [pc, #56]	; (800f0fc <FATFS_LinkDriverEx+0x94>)
 800f0c2:	7251      	strb	r1, [r2, #9]
 800f0c4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f0c6:	7dbb      	ldrb	r3, [r7, #22]
 800f0c8:	3330      	adds	r3, #48	; 0x30
 800f0ca:	b2da      	uxtb	r2, r3
 800f0cc:	68bb      	ldr	r3, [r7, #8]
 800f0ce:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f0d0:	68bb      	ldr	r3, [r7, #8]
 800f0d2:	3301      	adds	r3, #1
 800f0d4:	223a      	movs	r2, #58	; 0x3a
 800f0d6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f0d8:	68bb      	ldr	r3, [r7, #8]
 800f0da:	3302      	adds	r3, #2
 800f0dc:	222f      	movs	r2, #47	; 0x2f
 800f0de:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f0e0:	68bb      	ldr	r3, [r7, #8]
 800f0e2:	3303      	adds	r3, #3
 800f0e4:	2200      	movs	r2, #0
 800f0e6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f0ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	371c      	adds	r7, #28
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f8:	4770      	bx	lr
 800f0fa:	bf00      	nop
 800f0fc:	24000210 	.word	0x24000210

0800f100 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f100:	b580      	push	{r7, lr}
 800f102:	b082      	sub	sp, #8
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
 800f108:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f10a:	2200      	movs	r2, #0
 800f10c:	6839      	ldr	r1, [r7, #0]
 800f10e:	6878      	ldr	r0, [r7, #4]
 800f110:	f7ff ffaa 	bl	800f068 <FATFS_LinkDriverEx>
 800f114:	4603      	mov	r3, r0
}
 800f116:	4618      	mov	r0, r3
 800f118:	3708      	adds	r7, #8
 800f11a:	46bd      	mov	sp, r7
 800f11c:	bd80      	pop	{r7, pc}
	...

0800f120 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f124:	2200      	movs	r2, #0
 800f126:	4913      	ldr	r1, [pc, #76]	; (800f174 <MX_USB_DEVICE_Init+0x54>)
 800f128:	4813      	ldr	r0, [pc, #76]	; (800f178 <MX_USB_DEVICE_Init+0x58>)
 800f12a:	f7fe fe97 	bl	800de5c <USBD_Init>
 800f12e:	4603      	mov	r3, r0
 800f130:	2b00      	cmp	r3, #0
 800f132:	d001      	beq.n	800f138 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f134:	f7f1 fe60 	bl	8000df8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f138:	4910      	ldr	r1, [pc, #64]	; (800f17c <MX_USB_DEVICE_Init+0x5c>)
 800f13a:	480f      	ldr	r0, [pc, #60]	; (800f178 <MX_USB_DEVICE_Init+0x58>)
 800f13c:	f7fe fec4 	bl	800dec8 <USBD_RegisterClass>
 800f140:	4603      	mov	r3, r0
 800f142:	2b00      	cmp	r3, #0
 800f144:	d001      	beq.n	800f14a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f146:	f7f1 fe57 	bl	8000df8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f14a:	490d      	ldr	r1, [pc, #52]	; (800f180 <MX_USB_DEVICE_Init+0x60>)
 800f14c:	480a      	ldr	r0, [pc, #40]	; (800f178 <MX_USB_DEVICE_Init+0x58>)
 800f14e:	f7fe fde9 	bl	800dd24 <USBD_CDC_RegisterInterface>
 800f152:	4603      	mov	r3, r0
 800f154:	2b00      	cmp	r3, #0
 800f156:	d001      	beq.n	800f15c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f158:	f7f1 fe4e 	bl	8000df8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f15c:	4806      	ldr	r0, [pc, #24]	; (800f178 <MX_USB_DEVICE_Init+0x58>)
 800f15e:	f7fe fed4 	bl	800df0a <USBD_Start>
 800f162:	4603      	mov	r3, r0
 800f164:	2b00      	cmp	r3, #0
 800f166:	d001      	beq.n	800f16c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f168:	f7f1 fe46 	bl	8000df8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800f16c:	f7f6 fbac 	bl	80058c8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f170:	bf00      	nop
 800f172:	bd80      	pop	{r7, pc}
 800f174:	24000134 	.word	0x24000134
 800f178:	24000ab0 	.word	0x24000ab0
 800f17c:	2400001c 	.word	0x2400001c
 800f180:	24000120 	.word	0x24000120

0800f184 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f184:	b580      	push	{r7, lr}
 800f186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f188:	2200      	movs	r2, #0
 800f18a:	4905      	ldr	r1, [pc, #20]	; (800f1a0 <CDC_Init_FS+0x1c>)
 800f18c:	4805      	ldr	r0, [pc, #20]	; (800f1a4 <CDC_Init_FS+0x20>)
 800f18e:	f7fe fdde 	bl	800dd4e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f192:	4905      	ldr	r1, [pc, #20]	; (800f1a8 <CDC_Init_FS+0x24>)
 800f194:	4803      	ldr	r0, [pc, #12]	; (800f1a4 <CDC_Init_FS+0x20>)
 800f196:	f7fe fdf3 	bl	800dd80 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f19a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f19c:	4618      	mov	r0, r3
 800f19e:	bd80      	pop	{r7, pc}
 800f1a0:	24001580 	.word	0x24001580
 800f1a4:	24000ab0 	.word	0x24000ab0
 800f1a8:	24000d80 	.word	0x24000d80

0800f1ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f1ac:	b480      	push	{r7}
 800f1ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f1b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ba:	4770      	bx	lr

0800f1bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f1bc:	b480      	push	{r7}
 800f1be:	b083      	sub	sp, #12
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	6039      	str	r1, [r7, #0]
 800f1c6:	71fb      	strb	r3, [r7, #7]
 800f1c8:	4613      	mov	r3, r2
 800f1ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f1cc:	79fb      	ldrb	r3, [r7, #7]
 800f1ce:	2b23      	cmp	r3, #35	; 0x23
 800f1d0:	d84a      	bhi.n	800f268 <CDC_Control_FS+0xac>
 800f1d2:	a201      	add	r2, pc, #4	; (adr r2, 800f1d8 <CDC_Control_FS+0x1c>)
 800f1d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1d8:	0800f269 	.word	0x0800f269
 800f1dc:	0800f269 	.word	0x0800f269
 800f1e0:	0800f269 	.word	0x0800f269
 800f1e4:	0800f269 	.word	0x0800f269
 800f1e8:	0800f269 	.word	0x0800f269
 800f1ec:	0800f269 	.word	0x0800f269
 800f1f0:	0800f269 	.word	0x0800f269
 800f1f4:	0800f269 	.word	0x0800f269
 800f1f8:	0800f269 	.word	0x0800f269
 800f1fc:	0800f269 	.word	0x0800f269
 800f200:	0800f269 	.word	0x0800f269
 800f204:	0800f269 	.word	0x0800f269
 800f208:	0800f269 	.word	0x0800f269
 800f20c:	0800f269 	.word	0x0800f269
 800f210:	0800f269 	.word	0x0800f269
 800f214:	0800f269 	.word	0x0800f269
 800f218:	0800f269 	.word	0x0800f269
 800f21c:	0800f269 	.word	0x0800f269
 800f220:	0800f269 	.word	0x0800f269
 800f224:	0800f269 	.word	0x0800f269
 800f228:	0800f269 	.word	0x0800f269
 800f22c:	0800f269 	.word	0x0800f269
 800f230:	0800f269 	.word	0x0800f269
 800f234:	0800f269 	.word	0x0800f269
 800f238:	0800f269 	.word	0x0800f269
 800f23c:	0800f269 	.word	0x0800f269
 800f240:	0800f269 	.word	0x0800f269
 800f244:	0800f269 	.word	0x0800f269
 800f248:	0800f269 	.word	0x0800f269
 800f24c:	0800f269 	.word	0x0800f269
 800f250:	0800f269 	.word	0x0800f269
 800f254:	0800f269 	.word	0x0800f269
 800f258:	0800f269 	.word	0x0800f269
 800f25c:	0800f269 	.word	0x0800f269
 800f260:	0800f269 	.word	0x0800f269
 800f264:	0800f269 	.word	0x0800f269
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f268:	bf00      	nop
  }

  return (USBD_OK);
 800f26a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f26c:	4618      	mov	r0, r3
 800f26e:	370c      	adds	r7, #12
 800f270:	46bd      	mov	sp, r7
 800f272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f276:	4770      	bx	lr

0800f278 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b082      	sub	sp, #8
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]
 800f280:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f282:	6879      	ldr	r1, [r7, #4]
 800f284:	4805      	ldr	r0, [pc, #20]	; (800f29c <CDC_Receive_FS+0x24>)
 800f286:	f7fe fd7b 	bl	800dd80 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f28a:	4804      	ldr	r0, [pc, #16]	; (800f29c <CDC_Receive_FS+0x24>)
 800f28c:	f7fe fdbc 	bl	800de08 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f290:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f292:	4618      	mov	r0, r3
 800f294:	3708      	adds	r7, #8
 800f296:	46bd      	mov	sp, r7
 800f298:	bd80      	pop	{r7, pc}
 800f29a:	bf00      	nop
 800f29c:	24000ab0 	.word	0x24000ab0

0800f2a0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b084      	sub	sp, #16
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
 800f2a8:	460b      	mov	r3, r1
 800f2aa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f2b0:	4b0d      	ldr	r3, [pc, #52]	; (800f2e8 <CDC_Transmit_FS+0x48>)
 800f2b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f2b6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f2b8:	68bb      	ldr	r3, [r7, #8]
 800f2ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d001      	beq.n	800f2c6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f2c2:	2301      	movs	r3, #1
 800f2c4:	e00b      	b.n	800f2de <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f2c6:	887b      	ldrh	r3, [r7, #2]
 800f2c8:	461a      	mov	r2, r3
 800f2ca:	6879      	ldr	r1, [r7, #4]
 800f2cc:	4806      	ldr	r0, [pc, #24]	; (800f2e8 <CDC_Transmit_FS+0x48>)
 800f2ce:	f7fe fd3e 	bl	800dd4e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f2d2:	4805      	ldr	r0, [pc, #20]	; (800f2e8 <CDC_Transmit_FS+0x48>)
 800f2d4:	f7fe fd68 	bl	800dda8 <USBD_CDC_TransmitPacket>
 800f2d8:	4603      	mov	r3, r0
 800f2da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f2dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2de:	4618      	mov	r0, r3
 800f2e0:	3710      	adds	r7, #16
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	bd80      	pop	{r7, pc}
 800f2e6:	bf00      	nop
 800f2e8:	24000ab0 	.word	0x24000ab0

0800f2ec <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f2ec:	b480      	push	{r7}
 800f2ee:	b087      	sub	sp, #28
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	60f8      	str	r0, [r7, #12]
 800f2f4:	60b9      	str	r1, [r7, #8]
 800f2f6:	4613      	mov	r3, r2
 800f2f8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f2fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f302:	4618      	mov	r0, r3
 800f304:	371c      	adds	r7, #28
 800f306:	46bd      	mov	sp, r7
 800f308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30c:	4770      	bx	lr
	...

0800f310 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f310:	b480      	push	{r7}
 800f312:	b083      	sub	sp, #12
 800f314:	af00      	add	r7, sp, #0
 800f316:	4603      	mov	r3, r0
 800f318:	6039      	str	r1, [r7, #0]
 800f31a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f31c:	683b      	ldr	r3, [r7, #0]
 800f31e:	2212      	movs	r2, #18
 800f320:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f322:	4b03      	ldr	r3, [pc, #12]	; (800f330 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f324:	4618      	mov	r0, r3
 800f326:	370c      	adds	r7, #12
 800f328:	46bd      	mov	sp, r7
 800f32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32e:	4770      	bx	lr
 800f330:	24000150 	.word	0x24000150

0800f334 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f334:	b480      	push	{r7}
 800f336:	b083      	sub	sp, #12
 800f338:	af00      	add	r7, sp, #0
 800f33a:	4603      	mov	r3, r0
 800f33c:	6039      	str	r1, [r7, #0]
 800f33e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f340:	683b      	ldr	r3, [r7, #0]
 800f342:	2204      	movs	r2, #4
 800f344:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f346:	4b03      	ldr	r3, [pc, #12]	; (800f354 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f348:	4618      	mov	r0, r3
 800f34a:	370c      	adds	r7, #12
 800f34c:	46bd      	mov	sp, r7
 800f34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f352:	4770      	bx	lr
 800f354:	24000164 	.word	0x24000164

0800f358 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b082      	sub	sp, #8
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	4603      	mov	r3, r0
 800f360:	6039      	str	r1, [r7, #0]
 800f362:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f364:	79fb      	ldrb	r3, [r7, #7]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d105      	bne.n	800f376 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f36a:	683a      	ldr	r2, [r7, #0]
 800f36c:	4907      	ldr	r1, [pc, #28]	; (800f38c <USBD_FS_ProductStrDescriptor+0x34>)
 800f36e:	4808      	ldr	r0, [pc, #32]	; (800f390 <USBD_FS_ProductStrDescriptor+0x38>)
 800f370:	f7ff fd99 	bl	800eea6 <USBD_GetString>
 800f374:	e004      	b.n	800f380 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f376:	683a      	ldr	r2, [r7, #0]
 800f378:	4904      	ldr	r1, [pc, #16]	; (800f38c <USBD_FS_ProductStrDescriptor+0x34>)
 800f37a:	4805      	ldr	r0, [pc, #20]	; (800f390 <USBD_FS_ProductStrDescriptor+0x38>)
 800f37c:	f7ff fd93 	bl	800eea6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f380:	4b02      	ldr	r3, [pc, #8]	; (800f38c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f382:	4618      	mov	r0, r3
 800f384:	3708      	adds	r7, #8
 800f386:	46bd      	mov	sp, r7
 800f388:	bd80      	pop	{r7, pc}
 800f38a:	bf00      	nop
 800f38c:	24001d80 	.word	0x24001d80
 800f390:	0800fdbc 	.word	0x0800fdbc

0800f394 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f394:	b580      	push	{r7, lr}
 800f396:	b082      	sub	sp, #8
 800f398:	af00      	add	r7, sp, #0
 800f39a:	4603      	mov	r3, r0
 800f39c:	6039      	str	r1, [r7, #0]
 800f39e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f3a0:	683a      	ldr	r2, [r7, #0]
 800f3a2:	4904      	ldr	r1, [pc, #16]	; (800f3b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f3a4:	4804      	ldr	r0, [pc, #16]	; (800f3b8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f3a6:	f7ff fd7e 	bl	800eea6 <USBD_GetString>
  return USBD_StrDesc;
 800f3aa:	4b02      	ldr	r3, [pc, #8]	; (800f3b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	3708      	adds	r7, #8
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	bd80      	pop	{r7, pc}
 800f3b4:	24001d80 	.word	0x24001d80
 800f3b8:	0800fdd4 	.word	0x0800fdd4

0800f3bc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	b082      	sub	sp, #8
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	6039      	str	r1, [r7, #0]
 800f3c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f3c8:	683b      	ldr	r3, [r7, #0]
 800f3ca:	221a      	movs	r2, #26
 800f3cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f3ce:	f000 f843 	bl	800f458 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f3d2:	4b02      	ldr	r3, [pc, #8]	; (800f3dc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	3708      	adds	r7, #8
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	bd80      	pop	{r7, pc}
 800f3dc:	24000168 	.word	0x24000168

0800f3e0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b082      	sub	sp, #8
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	6039      	str	r1, [r7, #0]
 800f3ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f3ec:	79fb      	ldrb	r3, [r7, #7]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d105      	bne.n	800f3fe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f3f2:	683a      	ldr	r2, [r7, #0]
 800f3f4:	4907      	ldr	r1, [pc, #28]	; (800f414 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f3f6:	4808      	ldr	r0, [pc, #32]	; (800f418 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f3f8:	f7ff fd55 	bl	800eea6 <USBD_GetString>
 800f3fc:	e004      	b.n	800f408 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f3fe:	683a      	ldr	r2, [r7, #0]
 800f400:	4904      	ldr	r1, [pc, #16]	; (800f414 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f402:	4805      	ldr	r0, [pc, #20]	; (800f418 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f404:	f7ff fd4f 	bl	800eea6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f408:	4b02      	ldr	r3, [pc, #8]	; (800f414 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f40a:	4618      	mov	r0, r3
 800f40c:	3708      	adds	r7, #8
 800f40e:	46bd      	mov	sp, r7
 800f410:	bd80      	pop	{r7, pc}
 800f412:	bf00      	nop
 800f414:	24001d80 	.word	0x24001d80
 800f418:	0800fde8 	.word	0x0800fde8

0800f41c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b082      	sub	sp, #8
 800f420:	af00      	add	r7, sp, #0
 800f422:	4603      	mov	r3, r0
 800f424:	6039      	str	r1, [r7, #0]
 800f426:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f428:	79fb      	ldrb	r3, [r7, #7]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d105      	bne.n	800f43a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f42e:	683a      	ldr	r2, [r7, #0]
 800f430:	4907      	ldr	r1, [pc, #28]	; (800f450 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f432:	4808      	ldr	r0, [pc, #32]	; (800f454 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f434:	f7ff fd37 	bl	800eea6 <USBD_GetString>
 800f438:	e004      	b.n	800f444 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f43a:	683a      	ldr	r2, [r7, #0]
 800f43c:	4904      	ldr	r1, [pc, #16]	; (800f450 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f43e:	4805      	ldr	r0, [pc, #20]	; (800f454 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f440:	f7ff fd31 	bl	800eea6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f444:	4b02      	ldr	r3, [pc, #8]	; (800f450 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f446:	4618      	mov	r0, r3
 800f448:	3708      	adds	r7, #8
 800f44a:	46bd      	mov	sp, r7
 800f44c:	bd80      	pop	{r7, pc}
 800f44e:	bf00      	nop
 800f450:	24001d80 	.word	0x24001d80
 800f454:	0800fdf4 	.word	0x0800fdf4

0800f458 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f458:	b580      	push	{r7, lr}
 800f45a:	b084      	sub	sp, #16
 800f45c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f45e:	4b0f      	ldr	r3, [pc, #60]	; (800f49c <Get_SerialNum+0x44>)
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f464:	4b0e      	ldr	r3, [pc, #56]	; (800f4a0 <Get_SerialNum+0x48>)
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f46a:	4b0e      	ldr	r3, [pc, #56]	; (800f4a4 <Get_SerialNum+0x4c>)
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f470:	68fa      	ldr	r2, [r7, #12]
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	4413      	add	r3, r2
 800f476:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d009      	beq.n	800f492 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f47e:	2208      	movs	r2, #8
 800f480:	4909      	ldr	r1, [pc, #36]	; (800f4a8 <Get_SerialNum+0x50>)
 800f482:	68f8      	ldr	r0, [r7, #12]
 800f484:	f000 f814 	bl	800f4b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f488:	2204      	movs	r2, #4
 800f48a:	4908      	ldr	r1, [pc, #32]	; (800f4ac <Get_SerialNum+0x54>)
 800f48c:	68b8      	ldr	r0, [r7, #8]
 800f48e:	f000 f80f 	bl	800f4b0 <IntToUnicode>
  }
}
 800f492:	bf00      	nop
 800f494:	3710      	adds	r7, #16
 800f496:	46bd      	mov	sp, r7
 800f498:	bd80      	pop	{r7, pc}
 800f49a:	bf00      	nop
 800f49c:	1ff1e800 	.word	0x1ff1e800
 800f4a0:	1ff1e804 	.word	0x1ff1e804
 800f4a4:	1ff1e808 	.word	0x1ff1e808
 800f4a8:	2400016a 	.word	0x2400016a
 800f4ac:	2400017a 	.word	0x2400017a

0800f4b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f4b0:	b480      	push	{r7}
 800f4b2:	b087      	sub	sp, #28
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	60f8      	str	r0, [r7, #12]
 800f4b8:	60b9      	str	r1, [r7, #8]
 800f4ba:	4613      	mov	r3, r2
 800f4bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f4be:	2300      	movs	r3, #0
 800f4c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	75fb      	strb	r3, [r7, #23]
 800f4c6:	e027      	b.n	800f518 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	0f1b      	lsrs	r3, r3, #28
 800f4cc:	2b09      	cmp	r3, #9
 800f4ce:	d80b      	bhi.n	800f4e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	0f1b      	lsrs	r3, r3, #28
 800f4d4:	b2da      	uxtb	r2, r3
 800f4d6:	7dfb      	ldrb	r3, [r7, #23]
 800f4d8:	005b      	lsls	r3, r3, #1
 800f4da:	4619      	mov	r1, r3
 800f4dc:	68bb      	ldr	r3, [r7, #8]
 800f4de:	440b      	add	r3, r1
 800f4e0:	3230      	adds	r2, #48	; 0x30
 800f4e2:	b2d2      	uxtb	r2, r2
 800f4e4:	701a      	strb	r2, [r3, #0]
 800f4e6:	e00a      	b.n	800f4fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	0f1b      	lsrs	r3, r3, #28
 800f4ec:	b2da      	uxtb	r2, r3
 800f4ee:	7dfb      	ldrb	r3, [r7, #23]
 800f4f0:	005b      	lsls	r3, r3, #1
 800f4f2:	4619      	mov	r1, r3
 800f4f4:	68bb      	ldr	r3, [r7, #8]
 800f4f6:	440b      	add	r3, r1
 800f4f8:	3237      	adds	r2, #55	; 0x37
 800f4fa:	b2d2      	uxtb	r2, r2
 800f4fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	011b      	lsls	r3, r3, #4
 800f502:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f504:	7dfb      	ldrb	r3, [r7, #23]
 800f506:	005b      	lsls	r3, r3, #1
 800f508:	3301      	adds	r3, #1
 800f50a:	68ba      	ldr	r2, [r7, #8]
 800f50c:	4413      	add	r3, r2
 800f50e:	2200      	movs	r2, #0
 800f510:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f512:	7dfb      	ldrb	r3, [r7, #23]
 800f514:	3301      	adds	r3, #1
 800f516:	75fb      	strb	r3, [r7, #23]
 800f518:	7dfa      	ldrb	r2, [r7, #23]
 800f51a:	79fb      	ldrb	r3, [r7, #7]
 800f51c:	429a      	cmp	r2, r3
 800f51e:	d3d3      	bcc.n	800f4c8 <IntToUnicode+0x18>
  }
}
 800f520:	bf00      	nop
 800f522:	371c      	adds	r7, #28
 800f524:	46bd      	mov	sp, r7
 800f526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52a:	4770      	bx	lr

0800f52c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b08a      	sub	sp, #40	; 0x28
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f534:	f107 0314 	add.w	r3, r7, #20
 800f538:	2200      	movs	r2, #0
 800f53a:	601a      	str	r2, [r3, #0]
 800f53c:	605a      	str	r2, [r3, #4]
 800f53e:	609a      	str	r2, [r3, #8]
 800f540:	60da      	str	r2, [r3, #12]
 800f542:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	4a1e      	ldr	r2, [pc, #120]	; (800f5c4 <HAL_PCD_MspInit+0x98>)
 800f54a:	4293      	cmp	r3, r2
 800f54c:	d136      	bne.n	800f5bc <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f54e:	4b1e      	ldr	r3, [pc, #120]	; (800f5c8 <HAL_PCD_MspInit+0x9c>)
 800f550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f554:	4a1c      	ldr	r2, [pc, #112]	; (800f5c8 <HAL_PCD_MspInit+0x9c>)
 800f556:	f043 0301 	orr.w	r3, r3, #1
 800f55a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f55e:	4b1a      	ldr	r3, [pc, #104]	; (800f5c8 <HAL_PCD_MspInit+0x9c>)
 800f560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f564:	f003 0301 	and.w	r3, r3, #1
 800f568:	613b      	str	r3, [r7, #16]
 800f56a:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f56c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f572:	2302      	movs	r3, #2
 800f574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f576:	2300      	movs	r3, #0
 800f578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f57a:	2300      	movs	r3, #0
 800f57c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800f57e:	230a      	movs	r3, #10
 800f580:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f582:	f107 0314 	add.w	r3, r7, #20
 800f586:	4619      	mov	r1, r3
 800f588:	4810      	ldr	r0, [pc, #64]	; (800f5cc <HAL_PCD_MspInit+0xa0>)
 800f58a:	f7f4 fd8b 	bl	80040a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f58e:	4b0e      	ldr	r3, [pc, #56]	; (800f5c8 <HAL_PCD_MspInit+0x9c>)
 800f590:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f594:	4a0c      	ldr	r2, [pc, #48]	; (800f5c8 <HAL_PCD_MspInit+0x9c>)
 800f596:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f59a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f59e:	4b0a      	ldr	r3, [pc, #40]	; (800f5c8 <HAL_PCD_MspInit+0x9c>)
 800f5a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f5a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f5a8:	60fb      	str	r3, [r7, #12]
 800f5aa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	2100      	movs	r1, #0
 800f5b0:	2065      	movs	r0, #101	; 0x65
 800f5b2:	f7f2 f902 	bl	80017ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f5b6:	2065      	movs	r0, #101	; 0x65
 800f5b8:	f7f2 f919 	bl	80017ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f5bc:	bf00      	nop
 800f5be:	3728      	adds	r7, #40	; 0x28
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	bd80      	pop	{r7, pc}
 800f5c4:	40080000 	.word	0x40080000
 800f5c8:	58024400 	.word	0x58024400
 800f5cc:	58020000 	.word	0x58020000

0800f5d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b082      	sub	sp, #8
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800f5e4:	4619      	mov	r1, r3
 800f5e6:	4610      	mov	r0, r2
 800f5e8:	f7fe fcda 	bl	800dfa0 <USBD_LL_SetupStage>
}
 800f5ec:	bf00      	nop
 800f5ee:	3708      	adds	r7, #8
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	bd80      	pop	{r7, pc}

0800f5f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b082      	sub	sp, #8
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
 800f5fc:	460b      	mov	r3, r1
 800f5fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800f606:	78fa      	ldrb	r2, [r7, #3]
 800f608:	6879      	ldr	r1, [r7, #4]
 800f60a:	4613      	mov	r3, r2
 800f60c:	00db      	lsls	r3, r3, #3
 800f60e:	1a9b      	subs	r3, r3, r2
 800f610:	009b      	lsls	r3, r3, #2
 800f612:	440b      	add	r3, r1
 800f614:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f618:	681a      	ldr	r2, [r3, #0]
 800f61a:	78fb      	ldrb	r3, [r7, #3]
 800f61c:	4619      	mov	r1, r3
 800f61e:	f7fe fd12 	bl	800e046 <USBD_LL_DataOutStage>
}
 800f622:	bf00      	nop
 800f624:	3708      	adds	r7, #8
 800f626:	46bd      	mov	sp, r7
 800f628:	bd80      	pop	{r7, pc}

0800f62a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f62a:	b580      	push	{r7, lr}
 800f62c:	b082      	sub	sp, #8
 800f62e:	af00      	add	r7, sp, #0
 800f630:	6078      	str	r0, [r7, #4]
 800f632:	460b      	mov	r3, r1
 800f634:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800f63c:	78fa      	ldrb	r2, [r7, #3]
 800f63e:	6879      	ldr	r1, [r7, #4]
 800f640:	4613      	mov	r3, r2
 800f642:	00db      	lsls	r3, r3, #3
 800f644:	1a9b      	subs	r3, r3, r2
 800f646:	009b      	lsls	r3, r3, #2
 800f648:	440b      	add	r3, r1
 800f64a:	3348      	adds	r3, #72	; 0x48
 800f64c:	681a      	ldr	r2, [r3, #0]
 800f64e:	78fb      	ldrb	r3, [r7, #3]
 800f650:	4619      	mov	r1, r3
 800f652:	f7fe fd5b 	bl	800e10c <USBD_LL_DataInStage>
}
 800f656:	bf00      	nop
 800f658:	3708      	adds	r7, #8
 800f65a:	46bd      	mov	sp, r7
 800f65c:	bd80      	pop	{r7, pc}

0800f65e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f65e:	b580      	push	{r7, lr}
 800f660:	b082      	sub	sp, #8
 800f662:	af00      	add	r7, sp, #0
 800f664:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f66c:	4618      	mov	r0, r3
 800f66e:	f7fe fe5f 	bl	800e330 <USBD_LL_SOF>
}
 800f672:	bf00      	nop
 800f674:	3708      	adds	r7, #8
 800f676:	46bd      	mov	sp, r7
 800f678:	bd80      	pop	{r7, pc}

0800f67a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f67a:	b580      	push	{r7, lr}
 800f67c:	b084      	sub	sp, #16
 800f67e:	af00      	add	r7, sp, #0
 800f680:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f682:	2301      	movs	r3, #1
 800f684:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	68db      	ldr	r3, [r3, #12]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d102      	bne.n	800f694 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f68e:	2300      	movs	r3, #0
 800f690:	73fb      	strb	r3, [r7, #15]
 800f692:	e008      	b.n	800f6a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	68db      	ldr	r3, [r3, #12]
 800f698:	2b02      	cmp	r3, #2
 800f69a:	d102      	bne.n	800f6a2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f69c:	2301      	movs	r3, #1
 800f69e:	73fb      	strb	r3, [r7, #15]
 800f6a0:	e001      	b.n	800f6a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f6a2:	f7f1 fba9 	bl	8000df8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f6ac:	7bfa      	ldrb	r2, [r7, #15]
 800f6ae:	4611      	mov	r1, r2
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	f7fe fe02 	bl	800e2ba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f6bc:	4618      	mov	r0, r3
 800f6be:	f7fe fdbb 	bl	800e238 <USBD_LL_Reset>
}
 800f6c2:	bf00      	nop
 800f6c4:	3710      	adds	r7, #16
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	bd80      	pop	{r7, pc}
	...

0800f6cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b082      	sub	sp, #8
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f6da:	4618      	mov	r0, r3
 800f6dc:	f7fe fdfd 	bl	800e2da <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	687a      	ldr	r2, [r7, #4]
 800f6ec:	6812      	ldr	r2, [r2, #0]
 800f6ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f6f2:	f043 0301 	orr.w	r3, r3, #1
 800f6f6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	6a1b      	ldr	r3, [r3, #32]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d005      	beq.n	800f70c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f700:	4b04      	ldr	r3, [pc, #16]	; (800f714 <HAL_PCD_SuspendCallback+0x48>)
 800f702:	691b      	ldr	r3, [r3, #16]
 800f704:	4a03      	ldr	r2, [pc, #12]	; (800f714 <HAL_PCD_SuspendCallback+0x48>)
 800f706:	f043 0306 	orr.w	r3, r3, #6
 800f70a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f70c:	bf00      	nop
 800f70e:	3708      	adds	r7, #8
 800f710:	46bd      	mov	sp, r7
 800f712:	bd80      	pop	{r7, pc}
 800f714:	e000ed00 	.word	0xe000ed00

0800f718 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f718:	b580      	push	{r7, lr}
 800f71a:	b082      	sub	sp, #8
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f726:	4618      	mov	r0, r3
 800f728:	f7fe fdec 	bl	800e304 <USBD_LL_Resume>
}
 800f72c:	bf00      	nop
 800f72e:	3708      	adds	r7, #8
 800f730:	46bd      	mov	sp, r7
 800f732:	bd80      	pop	{r7, pc}

0800f734 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f734:	b580      	push	{r7, lr}
 800f736:	b082      	sub	sp, #8
 800f738:	af00      	add	r7, sp, #0
 800f73a:	6078      	str	r0, [r7, #4]
 800f73c:	460b      	mov	r3, r1
 800f73e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f746:	78fa      	ldrb	r2, [r7, #3]
 800f748:	4611      	mov	r1, r2
 800f74a:	4618      	mov	r0, r3
 800f74c:	f7fe fe17 	bl	800e37e <USBD_LL_IsoOUTIncomplete>
}
 800f750:	bf00      	nop
 800f752:	3708      	adds	r7, #8
 800f754:	46bd      	mov	sp, r7
 800f756:	bd80      	pop	{r7, pc}

0800f758 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b082      	sub	sp, #8
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
 800f760:	460b      	mov	r3, r1
 800f762:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f76a:	78fa      	ldrb	r2, [r7, #3]
 800f76c:	4611      	mov	r1, r2
 800f76e:	4618      	mov	r0, r3
 800f770:	f7fe fdf8 	bl	800e364 <USBD_LL_IsoINIncomplete>
}
 800f774:	bf00      	nop
 800f776:	3708      	adds	r7, #8
 800f778:	46bd      	mov	sp, r7
 800f77a:	bd80      	pop	{r7, pc}

0800f77c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b082      	sub	sp, #8
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f78a:	4618      	mov	r0, r3
 800f78c:	f7fe fe04 	bl	800e398 <USBD_LL_DevConnected>
}
 800f790:	bf00      	nop
 800f792:	3708      	adds	r7, #8
 800f794:	46bd      	mov	sp, r7
 800f796:	bd80      	pop	{r7, pc}

0800f798 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b082      	sub	sp, #8
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	f7fe fe01 	bl	800e3ae <USBD_LL_DevDisconnected>
}
 800f7ac:	bf00      	nop
 800f7ae:	3708      	adds	r7, #8
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	bd80      	pop	{r7, pc}

0800f7b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b082      	sub	sp, #8
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	781b      	ldrb	r3, [r3, #0]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d13e      	bne.n	800f842 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f7c4:	4a21      	ldr	r2, [pc, #132]	; (800f84c <USBD_LL_Init+0x98>)
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	4a1f      	ldr	r2, [pc, #124]	; (800f84c <USBD_LL_Init+0x98>)
 800f7d0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f7d4:	4b1d      	ldr	r3, [pc, #116]	; (800f84c <USBD_LL_Init+0x98>)
 800f7d6:	4a1e      	ldr	r2, [pc, #120]	; (800f850 <USBD_LL_Init+0x9c>)
 800f7d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800f7da:	4b1c      	ldr	r3, [pc, #112]	; (800f84c <USBD_LL_Init+0x98>)
 800f7dc:	2209      	movs	r2, #9
 800f7de:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f7e0:	4b1a      	ldr	r3, [pc, #104]	; (800f84c <USBD_LL_Init+0x98>)
 800f7e2:	2202      	movs	r2, #2
 800f7e4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f7e6:	4b19      	ldr	r3, [pc, #100]	; (800f84c <USBD_LL_Init+0x98>)
 800f7e8:	2200      	movs	r2, #0
 800f7ea:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f7ec:	4b17      	ldr	r3, [pc, #92]	; (800f84c <USBD_LL_Init+0x98>)
 800f7ee:	2202      	movs	r2, #2
 800f7f0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f7f2:	4b16      	ldr	r3, [pc, #88]	; (800f84c <USBD_LL_Init+0x98>)
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f7f8:	4b14      	ldr	r3, [pc, #80]	; (800f84c <USBD_LL_Init+0x98>)
 800f7fa:	2200      	movs	r2, #0
 800f7fc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f7fe:	4b13      	ldr	r3, [pc, #76]	; (800f84c <USBD_LL_Init+0x98>)
 800f800:	2200      	movs	r2, #0
 800f802:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800f804:	4b11      	ldr	r3, [pc, #68]	; (800f84c <USBD_LL_Init+0x98>)
 800f806:	2200      	movs	r2, #0
 800f808:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f80a:	4b10      	ldr	r3, [pc, #64]	; (800f84c <USBD_LL_Init+0x98>)
 800f80c:	2200      	movs	r2, #0
 800f80e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f810:	4b0e      	ldr	r3, [pc, #56]	; (800f84c <USBD_LL_Init+0x98>)
 800f812:	2200      	movs	r2, #0
 800f814:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f816:	480d      	ldr	r0, [pc, #52]	; (800f84c <USBD_LL_Init+0x98>)
 800f818:	f7f4 fe40 	bl	800449c <HAL_PCD_Init>
 800f81c:	4603      	mov	r3, r0
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d001      	beq.n	800f826 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800f822:	f7f1 fae9 	bl	8000df8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f826:	2180      	movs	r1, #128	; 0x80
 800f828:	4808      	ldr	r0, [pc, #32]	; (800f84c <USBD_LL_Init+0x98>)
 800f82a:	f7f5 ffd2 	bl	80057d2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f82e:	2240      	movs	r2, #64	; 0x40
 800f830:	2100      	movs	r1, #0
 800f832:	4806      	ldr	r0, [pc, #24]	; (800f84c <USBD_LL_Init+0x98>)
 800f834:	f7f5 ff86 	bl	8005744 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f838:	2280      	movs	r2, #128	; 0x80
 800f83a:	2101      	movs	r1, #1
 800f83c:	4803      	ldr	r0, [pc, #12]	; (800f84c <USBD_LL_Init+0x98>)
 800f83e:	f7f5 ff81 	bl	8005744 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f842:	2300      	movs	r3, #0
}
 800f844:	4618      	mov	r0, r3
 800f846:	3708      	adds	r7, #8
 800f848:	46bd      	mov	sp, r7
 800f84a:	bd80      	pop	{r7, pc}
 800f84c:	24001f80 	.word	0x24001f80
 800f850:	40080000 	.word	0x40080000

0800f854 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f854:	b580      	push	{r7, lr}
 800f856:	b084      	sub	sp, #16
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f85c:	2300      	movs	r3, #0
 800f85e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f860:	2300      	movs	r3, #0
 800f862:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f86a:	4618      	mov	r0, r3
 800f86c:	f7f4 ff3a 	bl	80046e4 <HAL_PCD_Start>
 800f870:	4603      	mov	r3, r0
 800f872:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f874:	7bfb      	ldrb	r3, [r7, #15]
 800f876:	4618      	mov	r0, r3
 800f878:	f000 f92a 	bl	800fad0 <USBD_Get_USB_Status>
 800f87c:	4603      	mov	r3, r0
 800f87e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f880:	7bbb      	ldrb	r3, [r7, #14]
}
 800f882:	4618      	mov	r0, r3
 800f884:	3710      	adds	r7, #16
 800f886:	46bd      	mov	sp, r7
 800f888:	bd80      	pop	{r7, pc}

0800f88a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f88a:	b580      	push	{r7, lr}
 800f88c:	b084      	sub	sp, #16
 800f88e:	af00      	add	r7, sp, #0
 800f890:	6078      	str	r0, [r7, #4]
 800f892:	4608      	mov	r0, r1
 800f894:	4611      	mov	r1, r2
 800f896:	461a      	mov	r2, r3
 800f898:	4603      	mov	r3, r0
 800f89a:	70fb      	strb	r3, [r7, #3]
 800f89c:	460b      	mov	r3, r1
 800f89e:	70bb      	strb	r3, [r7, #2]
 800f8a0:	4613      	mov	r3, r2
 800f8a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f8b2:	78bb      	ldrb	r3, [r7, #2]
 800f8b4:	883a      	ldrh	r2, [r7, #0]
 800f8b6:	78f9      	ldrb	r1, [r7, #3]
 800f8b8:	f7f5 fb4b 	bl	8004f52 <HAL_PCD_EP_Open>
 800f8bc:	4603      	mov	r3, r0
 800f8be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f8c0:	7bfb      	ldrb	r3, [r7, #15]
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	f000 f904 	bl	800fad0 <USBD_Get_USB_Status>
 800f8c8:	4603      	mov	r3, r0
 800f8ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f8cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	3710      	adds	r7, #16
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	bd80      	pop	{r7, pc}

0800f8d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f8d6:	b580      	push	{r7, lr}
 800f8d8:	b084      	sub	sp, #16
 800f8da:	af00      	add	r7, sp, #0
 800f8dc:	6078      	str	r0, [r7, #4]
 800f8de:	460b      	mov	r3, r1
 800f8e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f8f0:	78fa      	ldrb	r2, [r7, #3]
 800f8f2:	4611      	mov	r1, r2
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	f7f5 fb94 	bl	8005022 <HAL_PCD_EP_Close>
 800f8fa:	4603      	mov	r3, r0
 800f8fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f8fe:	7bfb      	ldrb	r3, [r7, #15]
 800f900:	4618      	mov	r0, r3
 800f902:	f000 f8e5 	bl	800fad0 <USBD_Get_USB_Status>
 800f906:	4603      	mov	r3, r0
 800f908:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f90a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f90c:	4618      	mov	r0, r3
 800f90e:	3710      	adds	r7, #16
 800f910:	46bd      	mov	sp, r7
 800f912:	bd80      	pop	{r7, pc}

0800f914 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b084      	sub	sp, #16
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]
 800f91c:	460b      	mov	r3, r1
 800f91e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f920:	2300      	movs	r3, #0
 800f922:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f924:	2300      	movs	r3, #0
 800f926:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f92e:	78fa      	ldrb	r2, [r7, #3]
 800f930:	4611      	mov	r1, r2
 800f932:	4618      	mov	r0, r3
 800f934:	f7f5 fc6c 	bl	8005210 <HAL_PCD_EP_SetStall>
 800f938:	4603      	mov	r3, r0
 800f93a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f93c:	7bfb      	ldrb	r3, [r7, #15]
 800f93e:	4618      	mov	r0, r3
 800f940:	f000 f8c6 	bl	800fad0 <USBD_Get_USB_Status>
 800f944:	4603      	mov	r3, r0
 800f946:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f948:	7bbb      	ldrb	r3, [r7, #14]
}
 800f94a:	4618      	mov	r0, r3
 800f94c:	3710      	adds	r7, #16
 800f94e:	46bd      	mov	sp, r7
 800f950:	bd80      	pop	{r7, pc}

0800f952 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f952:	b580      	push	{r7, lr}
 800f954:	b084      	sub	sp, #16
 800f956:	af00      	add	r7, sp, #0
 800f958:	6078      	str	r0, [r7, #4]
 800f95a:	460b      	mov	r3, r1
 800f95c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f95e:	2300      	movs	r3, #0
 800f960:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f962:	2300      	movs	r3, #0
 800f964:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f96c:	78fa      	ldrb	r2, [r7, #3]
 800f96e:	4611      	mov	r1, r2
 800f970:	4618      	mov	r0, r3
 800f972:	f7f5 fcb1 	bl	80052d8 <HAL_PCD_EP_ClrStall>
 800f976:	4603      	mov	r3, r0
 800f978:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f97a:	7bfb      	ldrb	r3, [r7, #15]
 800f97c:	4618      	mov	r0, r3
 800f97e:	f000 f8a7 	bl	800fad0 <USBD_Get_USB_Status>
 800f982:	4603      	mov	r3, r0
 800f984:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f986:	7bbb      	ldrb	r3, [r7, #14]
}
 800f988:	4618      	mov	r0, r3
 800f98a:	3710      	adds	r7, #16
 800f98c:	46bd      	mov	sp, r7
 800f98e:	bd80      	pop	{r7, pc}

0800f990 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f990:	b480      	push	{r7}
 800f992:	b085      	sub	sp, #20
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
 800f998:	460b      	mov	r3, r1
 800f99a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f9a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f9a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	da0b      	bge.n	800f9c4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f9ac:	78fb      	ldrb	r3, [r7, #3]
 800f9ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f9b2:	68f9      	ldr	r1, [r7, #12]
 800f9b4:	4613      	mov	r3, r2
 800f9b6:	00db      	lsls	r3, r3, #3
 800f9b8:	1a9b      	subs	r3, r3, r2
 800f9ba:	009b      	lsls	r3, r3, #2
 800f9bc:	440b      	add	r3, r1
 800f9be:	333e      	adds	r3, #62	; 0x3e
 800f9c0:	781b      	ldrb	r3, [r3, #0]
 800f9c2:	e00b      	b.n	800f9dc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f9c4:	78fb      	ldrb	r3, [r7, #3]
 800f9c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f9ca:	68f9      	ldr	r1, [r7, #12]
 800f9cc:	4613      	mov	r3, r2
 800f9ce:	00db      	lsls	r3, r3, #3
 800f9d0:	1a9b      	subs	r3, r3, r2
 800f9d2:	009b      	lsls	r3, r3, #2
 800f9d4:	440b      	add	r3, r1
 800f9d6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f9da:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f9dc:	4618      	mov	r0, r3
 800f9de:	3714      	adds	r7, #20
 800f9e0:	46bd      	mov	sp, r7
 800f9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e6:	4770      	bx	lr

0800f9e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b084      	sub	sp, #16
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
 800f9f0:	460b      	mov	r3, r1
 800f9f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fa02:	78fa      	ldrb	r2, [r7, #3]
 800fa04:	4611      	mov	r1, r2
 800fa06:	4618      	mov	r0, r3
 800fa08:	f7f5 fa7e 	bl	8004f08 <HAL_PCD_SetAddress>
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa10:	7bfb      	ldrb	r3, [r7, #15]
 800fa12:	4618      	mov	r0, r3
 800fa14:	f000 f85c 	bl	800fad0 <USBD_Get_USB_Status>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa1e:	4618      	mov	r0, r3
 800fa20:	3710      	adds	r7, #16
 800fa22:	46bd      	mov	sp, r7
 800fa24:	bd80      	pop	{r7, pc}

0800fa26 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fa26:	b580      	push	{r7, lr}
 800fa28:	b086      	sub	sp, #24
 800fa2a:	af00      	add	r7, sp, #0
 800fa2c:	60f8      	str	r0, [r7, #12]
 800fa2e:	607a      	str	r2, [r7, #4]
 800fa30:	603b      	str	r3, [r7, #0]
 800fa32:	460b      	mov	r3, r1
 800fa34:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa36:	2300      	movs	r3, #0
 800fa38:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa3a:	2300      	movs	r3, #0
 800fa3c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fa44:	7af9      	ldrb	r1, [r7, #11]
 800fa46:	683b      	ldr	r3, [r7, #0]
 800fa48:	687a      	ldr	r2, [r7, #4]
 800fa4a:	f7f5 fb97 	bl	800517c <HAL_PCD_EP_Transmit>
 800fa4e:	4603      	mov	r3, r0
 800fa50:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa52:	7dfb      	ldrb	r3, [r7, #23]
 800fa54:	4618      	mov	r0, r3
 800fa56:	f000 f83b 	bl	800fad0 <USBD_Get_USB_Status>
 800fa5a:	4603      	mov	r3, r0
 800fa5c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fa5e:	7dbb      	ldrb	r3, [r7, #22]
}
 800fa60:	4618      	mov	r0, r3
 800fa62:	3718      	adds	r7, #24
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd80      	pop	{r7, pc}

0800fa68 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b086      	sub	sp, #24
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	60f8      	str	r0, [r7, #12]
 800fa70:	607a      	str	r2, [r7, #4]
 800fa72:	603b      	str	r3, [r7, #0]
 800fa74:	460b      	mov	r3, r1
 800fa76:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa78:	2300      	movs	r3, #0
 800fa7a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa7c:	2300      	movs	r3, #0
 800fa7e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fa86:	7af9      	ldrb	r1, [r7, #11]
 800fa88:	683b      	ldr	r3, [r7, #0]
 800fa8a:	687a      	ldr	r2, [r7, #4]
 800fa8c:	f7f5 fb13 	bl	80050b6 <HAL_PCD_EP_Receive>
 800fa90:	4603      	mov	r3, r0
 800fa92:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa94:	7dfb      	ldrb	r3, [r7, #23]
 800fa96:	4618      	mov	r0, r3
 800fa98:	f000 f81a 	bl	800fad0 <USBD_Get_USB_Status>
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800faa0:	7dbb      	ldrb	r3, [r7, #22]
}
 800faa2:	4618      	mov	r0, r3
 800faa4:	3718      	adds	r7, #24
 800faa6:	46bd      	mov	sp, r7
 800faa8:	bd80      	pop	{r7, pc}

0800faaa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800faaa:	b580      	push	{r7, lr}
 800faac:	b082      	sub	sp, #8
 800faae:	af00      	add	r7, sp, #0
 800fab0:	6078      	str	r0, [r7, #4]
 800fab2:	460b      	mov	r3, r1
 800fab4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fabc:	78fa      	ldrb	r2, [r7, #3]
 800fabe:	4611      	mov	r1, r2
 800fac0:	4618      	mov	r0, r3
 800fac2:	f7f5 fb43 	bl	800514c <HAL_PCD_EP_GetRxCount>
 800fac6:	4603      	mov	r3, r0
}
 800fac8:	4618      	mov	r0, r3
 800faca:	3708      	adds	r7, #8
 800facc:	46bd      	mov	sp, r7
 800face:	bd80      	pop	{r7, pc}

0800fad0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fad0:	b480      	push	{r7}
 800fad2:	b085      	sub	sp, #20
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	4603      	mov	r3, r0
 800fad8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fada:	2300      	movs	r3, #0
 800fadc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fade:	79fb      	ldrb	r3, [r7, #7]
 800fae0:	2b03      	cmp	r3, #3
 800fae2:	d817      	bhi.n	800fb14 <USBD_Get_USB_Status+0x44>
 800fae4:	a201      	add	r2, pc, #4	; (adr r2, 800faec <USBD_Get_USB_Status+0x1c>)
 800fae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800faea:	bf00      	nop
 800faec:	0800fafd 	.word	0x0800fafd
 800faf0:	0800fb03 	.word	0x0800fb03
 800faf4:	0800fb09 	.word	0x0800fb09
 800faf8:	0800fb0f 	.word	0x0800fb0f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fafc:	2300      	movs	r3, #0
 800fafe:	73fb      	strb	r3, [r7, #15]
    break;
 800fb00:	e00b      	b.n	800fb1a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fb02:	2303      	movs	r3, #3
 800fb04:	73fb      	strb	r3, [r7, #15]
    break;
 800fb06:	e008      	b.n	800fb1a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fb08:	2301      	movs	r3, #1
 800fb0a:	73fb      	strb	r3, [r7, #15]
    break;
 800fb0c:	e005      	b.n	800fb1a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fb0e:	2303      	movs	r3, #3
 800fb10:	73fb      	strb	r3, [r7, #15]
    break;
 800fb12:	e002      	b.n	800fb1a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fb14:	2303      	movs	r3, #3
 800fb16:	73fb      	strb	r3, [r7, #15]
    break;
 800fb18:	bf00      	nop
  }
  return usb_status;
 800fb1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	3714      	adds	r7, #20
 800fb20:	46bd      	mov	sp, r7
 800fb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb26:	4770      	bx	lr

0800fb28 <__errno>:
 800fb28:	4b01      	ldr	r3, [pc, #4]	; (800fb30 <__errno+0x8>)
 800fb2a:	6818      	ldr	r0, [r3, #0]
 800fb2c:	4770      	bx	lr
 800fb2e:	bf00      	nop
 800fb30:	24000184 	.word	0x24000184

0800fb34 <__libc_init_array>:
 800fb34:	b570      	push	{r4, r5, r6, lr}
 800fb36:	4e0d      	ldr	r6, [pc, #52]	; (800fb6c <__libc_init_array+0x38>)
 800fb38:	4c0d      	ldr	r4, [pc, #52]	; (800fb70 <__libc_init_array+0x3c>)
 800fb3a:	1ba4      	subs	r4, r4, r6
 800fb3c:	10a4      	asrs	r4, r4, #2
 800fb3e:	2500      	movs	r5, #0
 800fb40:	42a5      	cmp	r5, r4
 800fb42:	d109      	bne.n	800fb58 <__libc_init_array+0x24>
 800fb44:	4e0b      	ldr	r6, [pc, #44]	; (800fb74 <__libc_init_array+0x40>)
 800fb46:	4c0c      	ldr	r4, [pc, #48]	; (800fb78 <__libc_init_array+0x44>)
 800fb48:	f000 f8f6 	bl	800fd38 <_init>
 800fb4c:	1ba4      	subs	r4, r4, r6
 800fb4e:	10a4      	asrs	r4, r4, #2
 800fb50:	2500      	movs	r5, #0
 800fb52:	42a5      	cmp	r5, r4
 800fb54:	d105      	bne.n	800fb62 <__libc_init_array+0x2e>
 800fb56:	bd70      	pop	{r4, r5, r6, pc}
 800fb58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fb5c:	4798      	blx	r3
 800fb5e:	3501      	adds	r5, #1
 800fb60:	e7ee      	b.n	800fb40 <__libc_init_array+0xc>
 800fb62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fb66:	4798      	blx	r3
 800fb68:	3501      	adds	r5, #1
 800fb6a:	e7f2      	b.n	800fb52 <__libc_init_array+0x1e>
 800fb6c:	0800feb0 	.word	0x0800feb0
 800fb70:	0800feb0 	.word	0x0800feb0
 800fb74:	0800feb0 	.word	0x0800feb0
 800fb78:	0800feb4 	.word	0x0800feb4

0800fb7c <malloc>:
 800fb7c:	4b02      	ldr	r3, [pc, #8]	; (800fb88 <malloc+0xc>)
 800fb7e:	4601      	mov	r1, r0
 800fb80:	6818      	ldr	r0, [r3, #0]
 800fb82:	f000 b86d 	b.w	800fc60 <_malloc_r>
 800fb86:	bf00      	nop
 800fb88:	24000184 	.word	0x24000184

0800fb8c <free>:
 800fb8c:	4b02      	ldr	r3, [pc, #8]	; (800fb98 <free+0xc>)
 800fb8e:	4601      	mov	r1, r0
 800fb90:	6818      	ldr	r0, [r3, #0]
 800fb92:	f000 b817 	b.w	800fbc4 <_free_r>
 800fb96:	bf00      	nop
 800fb98:	24000184 	.word	0x24000184

0800fb9c <memcpy>:
 800fb9c:	b510      	push	{r4, lr}
 800fb9e:	1e43      	subs	r3, r0, #1
 800fba0:	440a      	add	r2, r1
 800fba2:	4291      	cmp	r1, r2
 800fba4:	d100      	bne.n	800fba8 <memcpy+0xc>
 800fba6:	bd10      	pop	{r4, pc}
 800fba8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fbac:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fbb0:	e7f7      	b.n	800fba2 <memcpy+0x6>

0800fbb2 <memset>:
 800fbb2:	4402      	add	r2, r0
 800fbb4:	4603      	mov	r3, r0
 800fbb6:	4293      	cmp	r3, r2
 800fbb8:	d100      	bne.n	800fbbc <memset+0xa>
 800fbba:	4770      	bx	lr
 800fbbc:	f803 1b01 	strb.w	r1, [r3], #1
 800fbc0:	e7f9      	b.n	800fbb6 <memset+0x4>
	...

0800fbc4 <_free_r>:
 800fbc4:	b538      	push	{r3, r4, r5, lr}
 800fbc6:	4605      	mov	r5, r0
 800fbc8:	2900      	cmp	r1, #0
 800fbca:	d045      	beq.n	800fc58 <_free_r+0x94>
 800fbcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fbd0:	1f0c      	subs	r4, r1, #4
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	bfb8      	it	lt
 800fbd6:	18e4      	addlt	r4, r4, r3
 800fbd8:	f000 f8ac 	bl	800fd34 <__malloc_lock>
 800fbdc:	4a1f      	ldr	r2, [pc, #124]	; (800fc5c <_free_r+0x98>)
 800fbde:	6813      	ldr	r3, [r2, #0]
 800fbe0:	4610      	mov	r0, r2
 800fbe2:	b933      	cbnz	r3, 800fbf2 <_free_r+0x2e>
 800fbe4:	6063      	str	r3, [r4, #4]
 800fbe6:	6014      	str	r4, [r2, #0]
 800fbe8:	4628      	mov	r0, r5
 800fbea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fbee:	f000 b8a2 	b.w	800fd36 <__malloc_unlock>
 800fbf2:	42a3      	cmp	r3, r4
 800fbf4:	d90c      	bls.n	800fc10 <_free_r+0x4c>
 800fbf6:	6821      	ldr	r1, [r4, #0]
 800fbf8:	1862      	adds	r2, r4, r1
 800fbfa:	4293      	cmp	r3, r2
 800fbfc:	bf04      	itt	eq
 800fbfe:	681a      	ldreq	r2, [r3, #0]
 800fc00:	685b      	ldreq	r3, [r3, #4]
 800fc02:	6063      	str	r3, [r4, #4]
 800fc04:	bf04      	itt	eq
 800fc06:	1852      	addeq	r2, r2, r1
 800fc08:	6022      	streq	r2, [r4, #0]
 800fc0a:	6004      	str	r4, [r0, #0]
 800fc0c:	e7ec      	b.n	800fbe8 <_free_r+0x24>
 800fc0e:	4613      	mov	r3, r2
 800fc10:	685a      	ldr	r2, [r3, #4]
 800fc12:	b10a      	cbz	r2, 800fc18 <_free_r+0x54>
 800fc14:	42a2      	cmp	r2, r4
 800fc16:	d9fa      	bls.n	800fc0e <_free_r+0x4a>
 800fc18:	6819      	ldr	r1, [r3, #0]
 800fc1a:	1858      	adds	r0, r3, r1
 800fc1c:	42a0      	cmp	r0, r4
 800fc1e:	d10b      	bne.n	800fc38 <_free_r+0x74>
 800fc20:	6820      	ldr	r0, [r4, #0]
 800fc22:	4401      	add	r1, r0
 800fc24:	1858      	adds	r0, r3, r1
 800fc26:	4282      	cmp	r2, r0
 800fc28:	6019      	str	r1, [r3, #0]
 800fc2a:	d1dd      	bne.n	800fbe8 <_free_r+0x24>
 800fc2c:	6810      	ldr	r0, [r2, #0]
 800fc2e:	6852      	ldr	r2, [r2, #4]
 800fc30:	605a      	str	r2, [r3, #4]
 800fc32:	4401      	add	r1, r0
 800fc34:	6019      	str	r1, [r3, #0]
 800fc36:	e7d7      	b.n	800fbe8 <_free_r+0x24>
 800fc38:	d902      	bls.n	800fc40 <_free_r+0x7c>
 800fc3a:	230c      	movs	r3, #12
 800fc3c:	602b      	str	r3, [r5, #0]
 800fc3e:	e7d3      	b.n	800fbe8 <_free_r+0x24>
 800fc40:	6820      	ldr	r0, [r4, #0]
 800fc42:	1821      	adds	r1, r4, r0
 800fc44:	428a      	cmp	r2, r1
 800fc46:	bf04      	itt	eq
 800fc48:	6811      	ldreq	r1, [r2, #0]
 800fc4a:	6852      	ldreq	r2, [r2, #4]
 800fc4c:	6062      	str	r2, [r4, #4]
 800fc4e:	bf04      	itt	eq
 800fc50:	1809      	addeq	r1, r1, r0
 800fc52:	6021      	streq	r1, [r4, #0]
 800fc54:	605c      	str	r4, [r3, #4]
 800fc56:	e7c7      	b.n	800fbe8 <_free_r+0x24>
 800fc58:	bd38      	pop	{r3, r4, r5, pc}
 800fc5a:	bf00      	nop
 800fc5c:	2400021c 	.word	0x2400021c

0800fc60 <_malloc_r>:
 800fc60:	b570      	push	{r4, r5, r6, lr}
 800fc62:	1ccd      	adds	r5, r1, #3
 800fc64:	f025 0503 	bic.w	r5, r5, #3
 800fc68:	3508      	adds	r5, #8
 800fc6a:	2d0c      	cmp	r5, #12
 800fc6c:	bf38      	it	cc
 800fc6e:	250c      	movcc	r5, #12
 800fc70:	2d00      	cmp	r5, #0
 800fc72:	4606      	mov	r6, r0
 800fc74:	db01      	blt.n	800fc7a <_malloc_r+0x1a>
 800fc76:	42a9      	cmp	r1, r5
 800fc78:	d903      	bls.n	800fc82 <_malloc_r+0x22>
 800fc7a:	230c      	movs	r3, #12
 800fc7c:	6033      	str	r3, [r6, #0]
 800fc7e:	2000      	movs	r0, #0
 800fc80:	bd70      	pop	{r4, r5, r6, pc}
 800fc82:	f000 f857 	bl	800fd34 <__malloc_lock>
 800fc86:	4a21      	ldr	r2, [pc, #132]	; (800fd0c <_malloc_r+0xac>)
 800fc88:	6814      	ldr	r4, [r2, #0]
 800fc8a:	4621      	mov	r1, r4
 800fc8c:	b991      	cbnz	r1, 800fcb4 <_malloc_r+0x54>
 800fc8e:	4c20      	ldr	r4, [pc, #128]	; (800fd10 <_malloc_r+0xb0>)
 800fc90:	6823      	ldr	r3, [r4, #0]
 800fc92:	b91b      	cbnz	r3, 800fc9c <_malloc_r+0x3c>
 800fc94:	4630      	mov	r0, r6
 800fc96:	f000 f83d 	bl	800fd14 <_sbrk_r>
 800fc9a:	6020      	str	r0, [r4, #0]
 800fc9c:	4629      	mov	r1, r5
 800fc9e:	4630      	mov	r0, r6
 800fca0:	f000 f838 	bl	800fd14 <_sbrk_r>
 800fca4:	1c43      	adds	r3, r0, #1
 800fca6:	d124      	bne.n	800fcf2 <_malloc_r+0x92>
 800fca8:	230c      	movs	r3, #12
 800fcaa:	6033      	str	r3, [r6, #0]
 800fcac:	4630      	mov	r0, r6
 800fcae:	f000 f842 	bl	800fd36 <__malloc_unlock>
 800fcb2:	e7e4      	b.n	800fc7e <_malloc_r+0x1e>
 800fcb4:	680b      	ldr	r3, [r1, #0]
 800fcb6:	1b5b      	subs	r3, r3, r5
 800fcb8:	d418      	bmi.n	800fcec <_malloc_r+0x8c>
 800fcba:	2b0b      	cmp	r3, #11
 800fcbc:	d90f      	bls.n	800fcde <_malloc_r+0x7e>
 800fcbe:	600b      	str	r3, [r1, #0]
 800fcc0:	50cd      	str	r5, [r1, r3]
 800fcc2:	18cc      	adds	r4, r1, r3
 800fcc4:	4630      	mov	r0, r6
 800fcc6:	f000 f836 	bl	800fd36 <__malloc_unlock>
 800fcca:	f104 000b 	add.w	r0, r4, #11
 800fcce:	1d23      	adds	r3, r4, #4
 800fcd0:	f020 0007 	bic.w	r0, r0, #7
 800fcd4:	1ac3      	subs	r3, r0, r3
 800fcd6:	d0d3      	beq.n	800fc80 <_malloc_r+0x20>
 800fcd8:	425a      	negs	r2, r3
 800fcda:	50e2      	str	r2, [r4, r3]
 800fcdc:	e7d0      	b.n	800fc80 <_malloc_r+0x20>
 800fcde:	428c      	cmp	r4, r1
 800fce0:	684b      	ldr	r3, [r1, #4]
 800fce2:	bf16      	itet	ne
 800fce4:	6063      	strne	r3, [r4, #4]
 800fce6:	6013      	streq	r3, [r2, #0]
 800fce8:	460c      	movne	r4, r1
 800fcea:	e7eb      	b.n	800fcc4 <_malloc_r+0x64>
 800fcec:	460c      	mov	r4, r1
 800fcee:	6849      	ldr	r1, [r1, #4]
 800fcf0:	e7cc      	b.n	800fc8c <_malloc_r+0x2c>
 800fcf2:	1cc4      	adds	r4, r0, #3
 800fcf4:	f024 0403 	bic.w	r4, r4, #3
 800fcf8:	42a0      	cmp	r0, r4
 800fcfa:	d005      	beq.n	800fd08 <_malloc_r+0xa8>
 800fcfc:	1a21      	subs	r1, r4, r0
 800fcfe:	4630      	mov	r0, r6
 800fd00:	f000 f808 	bl	800fd14 <_sbrk_r>
 800fd04:	3001      	adds	r0, #1
 800fd06:	d0cf      	beq.n	800fca8 <_malloc_r+0x48>
 800fd08:	6025      	str	r5, [r4, #0]
 800fd0a:	e7db      	b.n	800fcc4 <_malloc_r+0x64>
 800fd0c:	2400021c 	.word	0x2400021c
 800fd10:	24000220 	.word	0x24000220

0800fd14 <_sbrk_r>:
 800fd14:	b538      	push	{r3, r4, r5, lr}
 800fd16:	4c06      	ldr	r4, [pc, #24]	; (800fd30 <_sbrk_r+0x1c>)
 800fd18:	2300      	movs	r3, #0
 800fd1a:	4605      	mov	r5, r0
 800fd1c:	4608      	mov	r0, r1
 800fd1e:	6023      	str	r3, [r4, #0]
 800fd20:	f7f1 fac4 	bl	80012ac <_sbrk>
 800fd24:	1c43      	adds	r3, r0, #1
 800fd26:	d102      	bne.n	800fd2e <_sbrk_r+0x1a>
 800fd28:	6823      	ldr	r3, [r4, #0]
 800fd2a:	b103      	cbz	r3, 800fd2e <_sbrk_r+0x1a>
 800fd2c:	602b      	str	r3, [r5, #0]
 800fd2e:	bd38      	pop	{r3, r4, r5, pc}
 800fd30:	24002388 	.word	0x24002388

0800fd34 <__malloc_lock>:
 800fd34:	4770      	bx	lr

0800fd36 <__malloc_unlock>:
 800fd36:	4770      	bx	lr

0800fd38 <_init>:
 800fd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd3a:	bf00      	nop
 800fd3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd3e:	bc08      	pop	{r3}
 800fd40:	469e      	mov	lr, r3
 800fd42:	4770      	bx	lr

0800fd44 <_fini>:
 800fd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd46:	bf00      	nop
 800fd48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd4a:	bc08      	pop	{r3}
 800fd4c:	469e      	mov	lr, r3
 800fd4e:	4770      	bx	lr

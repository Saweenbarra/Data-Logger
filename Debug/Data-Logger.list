
Data-Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011c94  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08011f34  08011f34  00021f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080120f8  080120f8  000301cc  2**0
                  CONTENTS
  4 .ARM          00000008  080120f8  080120f8  000220f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012100  08012100  000301cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012100  08012100  00022100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012104  08012104  00022104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  24000000  08012108  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011c4  240001cc  080122d4  000301cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24001390  080122d4  00031390  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000399a2  00000000  00000000  000301fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006169  00000000  00000000  00069b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001d60  00000000  00000000  0006fd08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001af0  00000000  00000000  00071a68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000a23e  00000000  00000000  00073558  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001f07a  00000000  00000000  0007d796  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0016efdc  00000000  00000000  0009c810  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0020b7ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000081e4  00000000  00000000  0020b868  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001cc 	.word	0x240001cc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011f1c 	.word	0x08011f1c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001d0 	.word	0x240001d0
 80002dc:	08011f1c 	.word	0x08011f1c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000684:	f001 f81a 	bl	80016bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000688:	f000 f818 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068c:	f000 fb04 	bl	8000c98 <MX_GPIO_Init>
  MX_DMA_Init();
 8000690:	f000 fae2 	bl	8000c58 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8000694:	f000 f9d0 	bl	8000a38 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000698:	f00d f8e4 	bl	800d864 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 800069c:	f010 f84a 	bl	8010734 <MX_USB_DEVICE_Init>
  MX_FDCAN1_Init();
 80006a0:	f000 f900 	bl	80008a4 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80006a4:	f000 f964 	bl	8000970 <MX_FDCAN2_Init>
  MX_UART8_Init();
 80006a8:	f000 fa3e 	bl	8000b28 <MX_UART8_Init>
  MX_USART3_UART_Init();
 80006ac:	f000 fa88 	bl	8000bc0 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80006b0:	f000 f9e4 	bl	8000a7c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  FDCAN_Config();
 80006b4:	f000 fbda 	bl	8000e6c <FDCAN_Config>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <main+0x38>
	...

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b0cc      	sub	sp, #304	; 0x130
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80006c6:	224c      	movs	r2, #76	; 0x4c
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f010 fd39 	bl	8011142 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80006d4:	2220      	movs	r2, #32
 80006d6:	2100      	movs	r1, #0
 80006d8:	4618      	mov	r0, r3
 80006da:	f010 fd32 	bl	8011142 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006de:	f107 0308 	add.w	r3, r7, #8
 80006e2:	4618      	mov	r0, r3
 80006e4:	23bc      	movs	r3, #188	; 0xbc
 80006e6:	461a      	mov	r2, r3
 80006e8:	2100      	movs	r1, #0
 80006ea:	f010 fd2a 	bl	8011142 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006ee:	2002      	movs	r0, #2
 80006f0:	f005 fbb6 	bl	8005e60 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	4b66      	ldr	r3, [pc, #408]	; (8000894 <SystemClock_Config+0x1d8>)
 80006fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006fe:	4a65      	ldr	r2, [pc, #404]	; (8000894 <SystemClock_Config+0x1d8>)
 8000700:	f023 0301 	bic.w	r3, r3, #1
 8000704:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000706:	4b63      	ldr	r3, [pc, #396]	; (8000894 <SystemClock_Config+0x1d8>)
 8000708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800070a:	f003 0201 	and.w	r2, r3, #1
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	4b61      	ldr	r3, [pc, #388]	; (8000898 <SystemClock_Config+0x1dc>)
 8000714:	699b      	ldr	r3, [r3, #24]
 8000716:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800071a:	4a5f      	ldr	r2, [pc, #380]	; (8000898 <SystemClock_Config+0x1dc>)
 800071c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000720:	6193      	str	r3, [r2, #24]
 8000722:	4b5d      	ldr	r3, [pc, #372]	; (8000898 <SystemClock_Config+0x1dc>)
 8000724:	699b      	ldr	r3, [r3, #24]
 8000726:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000732:	bf00      	nop
 8000734:	4b58      	ldr	r3, [pc, #352]	; (8000898 <SystemClock_Config+0x1dc>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800073c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000740:	d1f8      	bne.n	8000734 <SystemClock_Config+0x78>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000742:	4b56      	ldr	r3, [pc, #344]	; (800089c <SystemClock_Config+0x1e0>)
 8000744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000746:	f023 0303 	bic.w	r3, r3, #3
 800074a:	4a54      	ldr	r2, [pc, #336]	; (800089c <SystemClock_Config+0x1e0>)
 800074c:	f043 0302 	orr.w	r3, r3, #2
 8000750:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000752:	2321      	movs	r3, #33	; 0x21
 8000754:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000758:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800075c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000760:	2301      	movs	r3, #1
 8000762:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000766:	2302      	movs	r3, #2
 8000768:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800076c:	2302      	movs	r3, #2
 800076e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000772:	2302      	movs	r3, #2
 8000774:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000778:	2320      	movs	r3, #32
 800077a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800077e:	2302      	movs	r3, #2
 8000780:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000784:	2306      	movs	r3, #6
 8000786:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800078a:	2302      	movs	r3, #2
 800078c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000790:	230c      	movs	r3, #12
 8000792:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000796:	2300      	movs	r3, #0
 8000798:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80007a6:	4618      	mov	r0, r3
 80007a8:	f005 fba4 	bl	8005ef4 <HAL_RCC_OscConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 80007b2:	f000 fbbd 	bl	8000f30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b6:	233f      	movs	r3, #63	; 0x3f
 80007b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007bc:	2303      	movs	r3, #3
 80007be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007c8:	2308      	movs	r3, #8
 80007ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007e6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80007ea:	2101      	movs	r1, #1
 80007ec:	4618      	mov	r0, r3
 80007ee:	f005 ff91 	bl	8006714 <HAL_RCC_ClockConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0x140>
  {
    Error_Handler();
 80007f8:	f000 fb9a 	bl	8000f30 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_FDCAN
 80007fc:	f107 0308 	add.w	r3, r7, #8
 8000800:	4a27      	ldr	r2, [pc, #156]	; (80008a0 <SystemClock_Config+0x1e4>)
 8000802:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_SPI1
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000804:	f107 0308 	add.w	r3, r7, #8
 8000808:	2202      	movs	r2, #2
 800080a:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 800080c:	f107 0308 	add.w	r3, r7, #8
 8000810:	2220      	movs	r2, #32
 8000812:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000814:	f107 0308 	add.w	r3, r7, #8
 8000818:	2202      	movs	r2, #2
 800081a:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 5;
 800081c:	f107 0308 	add.w	r3, r7, #8
 8000820:	2205      	movs	r2, #5
 8000822:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000824:	f107 0308 	add.w	r3, r7, #8
 8000828:	2202      	movs	r2, #2
 800082a:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800082c:	f107 0308 	add.w	r3, r7, #8
 8000830:	22c0      	movs	r2, #192	; 0xc0
 8000832:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000834:	f107 0308 	add.w	r3, r7, #8
 8000838:	2200      	movs	r2, #0
 800083a:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800083c:	f107 0308 	add.w	r3, r7, #8
 8000840:	2200      	movs	r2, #0
 8000842:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000844:	f107 0308 	add.w	r3, r7, #8
 8000848:	2200      	movs	r2, #0
 800084a:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800084c:	f107 0308 	add.w	r3, r7, #8
 8000850:	2200      	movs	r2, #0
 8000852:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8000854:	f107 0308 	add.w	r3, r7, #8
 8000858:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800085c:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	2200      	movs	r2, #0
 8000864:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000866:	f107 0308 	add.w	r3, r7, #8
 800086a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800086e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000872:	f107 0308 	add.w	r3, r7, #8
 8000876:	4618      	mov	r0, r3
 8000878:	f006 fad0 	bl	8006e1c <HAL_RCCEx_PeriphCLKConfig>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <SystemClock_Config+0x1ca>
  {
    Error_Handler();
 8000882:	f000 fb55 	bl	8000f30 <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000886:	f005 fb25 	bl	8005ed4 <HAL_PWREx_EnableUSBVoltageDetector>
}
 800088a:	bf00      	nop
 800088c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	58000400 	.word	0x58000400
 8000898:	58024800 	.word	0x58024800
 800089c:	58024400 	.word	0x58024400
 80008a0:	00059002 	.word	0x00059002

080008a4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80008a8:	4b2f      	ldr	r3, [pc, #188]	; (8000968 <MX_FDCAN1_Init+0xc4>)
 80008aa:	4a30      	ldr	r2, [pc, #192]	; (800096c <MX_FDCAN1_Init+0xc8>)
 80008ac:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80008ae:	4b2e      	ldr	r3, [pc, #184]	; (8000968 <MX_FDCAN1_Init+0xc4>)
 80008b0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80008b4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80008b6:	4b2c      	ldr	r3, [pc, #176]	; (8000968 <MX_FDCAN1_Init+0xc4>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80008bc:	4b2a      	ldr	r3, [pc, #168]	; (8000968 <MX_FDCAN1_Init+0xc4>)
 80008be:	2200      	movs	r2, #0
 80008c0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80008c2:	4b29      	ldr	r3, [pc, #164]	; (8000968 <MX_FDCAN1_Init+0xc4>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80008c8:	4b27      	ldr	r3, [pc, #156]	; (8000968 <MX_FDCAN1_Init+0xc4>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80008ce:	4b26      	ldr	r3, [pc, #152]	; (8000968 <MX_FDCAN1_Init+0xc4>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 50;
 80008d4:	4b24      	ldr	r3, [pc, #144]	; (8000968 <MX_FDCAN1_Init+0xc4>)
 80008d6:	2232      	movs	r2, #50	; 0x32
 80008d8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 109;
 80008da:	4b23      	ldr	r3, [pc, #140]	; (8000968 <MX_FDCAN1_Init+0xc4>)
 80008dc:	226d      	movs	r2, #109	; 0x6d
 80008de:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 50;
 80008e0:	4b21      	ldr	r3, [pc, #132]	; (8000968 <MX_FDCAN1_Init+0xc4>)
 80008e2:	2232      	movs	r2, #50	; 0x32
 80008e4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80008e6:	4b20      	ldr	r3, [pc, #128]	; (8000968 <MX_FDCAN1_Init+0xc4>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 5;
 80008ec:	4b1e      	ldr	r3, [pc, #120]	; (8000968 <MX_FDCAN1_Init+0xc4>)
 80008ee:	2205      	movs	r2, #5
 80008f0:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 80008f2:	4b1d      	ldr	r3, [pc, #116]	; (8000968 <MX_FDCAN1_Init+0xc4>)
 80008f4:	220a      	movs	r2, #10
 80008f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 80008f8:	4b1b      	ldr	r3, [pc, #108]	; (8000968 <MX_FDCAN1_Init+0xc4>)
 80008fa:	2205      	movs	r2, #5
 80008fc:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80008fe:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <MX_FDCAN1_Init+0xc4>)
 8000900:	2200      	movs	r2, #0
 8000902:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 2;
 8000904:	4b18      	ldr	r3, [pc, #96]	; (8000968 <MX_FDCAN1_Init+0xc4>)
 8000906:	2202      	movs	r2, #2
 8000908:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 2;
 800090a:	4b17      	ldr	r3, [pc, #92]	; (8000968 <MX_FDCAN1_Init+0xc4>)
 800090c:	2202      	movs	r2, #2
 800090e:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 10;
 8000910:	4b15      	ldr	r3, [pc, #84]	; (8000968 <MX_FDCAN1_Init+0xc4>)
 8000912:	220a      	movs	r2, #10
 8000914:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 8000916:	4b14      	ldr	r3, [pc, #80]	; (8000968 <MX_FDCAN1_Init+0xc4>)
 8000918:	2212      	movs	r2, #18
 800091a:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <MX_FDCAN1_Init+0xc4>)
 800091e:	2200      	movs	r2, #0
 8000920:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_FDCAN1_Init+0xc4>)
 8000924:	2204      	movs	r2, #4
 8000926:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_FDCAN1_Init+0xc4>)
 800092a:	2200      	movs	r2, #0
 800092c:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_FDCAN1_Init+0xc4>)
 8000930:	2204      	movs	r2, #4
 8000932:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_FDCAN1_Init+0xc4>)
 8000936:	2200      	movs	r2, #0
 8000938:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <MX_FDCAN1_Init+0xc4>)
 800093c:	2200      	movs	r2, #0
 800093e:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_FDCAN1_Init+0xc4>)
 8000942:	2200      	movs	r2, #0
 8000944:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <MX_FDCAN1_Init+0xc4>)
 8000948:	2200      	movs	r2, #0
 800094a:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_FDCAN1_Init+0xc4>)
 800094e:	2204      	movs	r2, #4
 8000950:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <MX_FDCAN1_Init+0xc4>)
 8000954:	f002 fd44 	bl	80033e0 <HAL_FDCAN_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 800095e:	f000 fae7 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	2400038c 	.word	0x2400038c
 800096c:	4000a000 	.word	0x4000a000

08000970 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000974:	4b2e      	ldr	r3, [pc, #184]	; (8000a30 <MX_FDCAN2_Init+0xc0>)
 8000976:	4a2f      	ldr	r2, [pc, #188]	; (8000a34 <MX_FDCAN2_Init+0xc4>)
 8000978:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800097a:	4b2d      	ldr	r3, [pc, #180]	; (8000a30 <MX_FDCAN2_Init+0xc0>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000980:	4b2b      	ldr	r3, [pc, #172]	; (8000a30 <MX_FDCAN2_Init+0xc0>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000986:	4b2a      	ldr	r3, [pc, #168]	; (8000a30 <MX_FDCAN2_Init+0xc0>)
 8000988:	2200      	movs	r2, #0
 800098a:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 800098c:	4b28      	ldr	r3, [pc, #160]	; (8000a30 <MX_FDCAN2_Init+0xc0>)
 800098e:	2200      	movs	r2, #0
 8000990:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000992:	4b27      	ldr	r3, [pc, #156]	; (8000a30 <MX_FDCAN2_Init+0xc0>)
 8000994:	2200      	movs	r2, #0
 8000996:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000998:	4b25      	ldr	r3, [pc, #148]	; (8000a30 <MX_FDCAN2_Init+0xc0>)
 800099a:	2201      	movs	r2, #1
 800099c:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 800099e:	4b24      	ldr	r3, [pc, #144]	; (8000a30 <MX_FDCAN2_Init+0xc0>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 80009a4:	4b22      	ldr	r3, [pc, #136]	; (8000a30 <MX_FDCAN2_Init+0xc0>)
 80009a6:	2202      	movs	r2, #2
 80009a8:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80009aa:	4b21      	ldr	r3, [pc, #132]	; (8000a30 <MX_FDCAN2_Init+0xc0>)
 80009ac:	2202      	movs	r2, #2
 80009ae:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80009b0:	4b1f      	ldr	r3, [pc, #124]	; (8000a30 <MX_FDCAN2_Init+0xc0>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80009b6:	4b1e      	ldr	r3, [pc, #120]	; (8000a30 <MX_FDCAN2_Init+0xc0>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80009bc:	4b1c      	ldr	r3, [pc, #112]	; (8000a30 <MX_FDCAN2_Init+0xc0>)
 80009be:	2201      	movs	r2, #1
 80009c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80009c2:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <MX_FDCAN2_Init+0xc0>)
 80009c4:	2201      	movs	r2, #1
 80009c6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 80009c8:	4b19      	ldr	r3, [pc, #100]	; (8000a30 <MX_FDCAN2_Init+0xc0>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 80009ce:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <MX_FDCAN2_Init+0xc0>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 80009d4:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <MX_FDCAN2_Init+0xc0>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 80009da:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <MX_FDCAN2_Init+0xc0>)
 80009dc:	2200      	movs	r2, #0
 80009de:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80009e0:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <MX_FDCAN2_Init+0xc0>)
 80009e2:	2204      	movs	r2, #4
 80009e4:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 80009e6:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <MX_FDCAN2_Init+0xc0>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80009ec:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <MX_FDCAN2_Init+0xc0>)
 80009ee:	2204      	movs	r2, #4
 80009f0:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 80009f2:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_FDCAN2_Init+0xc0>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80009f8:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <MX_FDCAN2_Init+0xc0>)
 80009fa:	2204      	movs	r2, #4
 80009fc:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 80009fe:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_FDCAN2_Init+0xc0>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000a04:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <MX_FDCAN2_Init+0xc0>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000a0a:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_FDCAN2_Init+0xc0>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000a10:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <MX_FDCAN2_Init+0xc0>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_FDCAN2_Init+0xc0>)
 8000a18:	2204      	movs	r2, #4
 8000a1a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000a1c:	4804      	ldr	r0, [pc, #16]	; (8000a30 <MX_FDCAN2_Init+0xc0>)
 8000a1e:	f002 fcdf 	bl	80033e0 <HAL_FDCAN_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000a28:	f000 fa82 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	240005a8 	.word	0x240005a8
 8000a34:	4000a400 	.word	0x4000a400

08000a38 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000a3c:	4b0d      	ldr	r3, [pc, #52]	; (8000a74 <MX_SDMMC1_SD_Init+0x3c>)
 8000a3e:	4a0e      	ldr	r2, [pc, #56]	; (8000a78 <MX_SDMMC1_SD_Init+0x40>)
 8000a40:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <MX_SDMMC1_SD_Init+0x3c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000a48:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <MX_SDMMC1_SD_Init+0x3c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <MX_SDMMC1_SD_Init+0x3c>)
 8000a50:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a54:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000a56:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <MX_SDMMC1_SD_Init+0x3c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000a5c:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <MX_SDMMC1_SD_Init+0x3c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8000a62:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <MX_SDMMC1_SD_Init+0x3c>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	2400030c 	.word	0x2400030c
 8000a78:	52007000 	.word	0x52007000

08000a7c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a80:	4b27      	ldr	r3, [pc, #156]	; (8000b20 <MX_SPI1_Init+0xa4>)
 8000a82:	4a28      	ldr	r2, [pc, #160]	; (8000b24 <MX_SPI1_Init+0xa8>)
 8000a84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a86:	4b26      	ldr	r3, [pc, #152]	; (8000b20 <MX_SPI1_Init+0xa4>)
 8000a88:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000a8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a8e:	4b24      	ldr	r3, [pc, #144]	; (8000b20 <MX_SPI1_Init+0xa4>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a94:	4b22      	ldr	r3, [pc, #136]	; (8000b20 <MX_SPI1_Init+0xa4>)
 8000a96:	2207      	movs	r2, #7
 8000a98:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a9a:	4b21      	ldr	r3, [pc, #132]	; (8000b20 <MX_SPI1_Init+0xa4>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aa0:	4b1f      	ldr	r3, [pc, #124]	; (8000b20 <MX_SPI1_Init+0xa4>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000aa6:	4b1e      	ldr	r3, [pc, #120]	; (8000b20 <MX_SPI1_Init+0xa4>)
 8000aa8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000aac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000aae:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <MX_SPI1_Init+0xa4>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ab4:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <MX_SPI1_Init+0xa4>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aba:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <MX_SPI1_Init+0xa4>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ac0:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <MX_SPI1_Init+0xa4>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000ac6:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <MX_SPI1_Init+0xa4>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000acc:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <MX_SPI1_Init+0xa4>)
 8000ace:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ad2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <MX_SPI1_Init+0xa4>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <MX_SPI1_Init+0xa4>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_SPI1_Init+0xa4>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MX_SPI1_Init+0xa4>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <MX_SPI1_Init+0xa4>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000af2:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <MX_SPI1_Init+0xa4>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000af8:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <MX_SPI1_Init+0xa4>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000afe:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <MX_SPI1_Init+0xa4>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_SPI1_Init+0xa4>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_SPI1_Init+0xa4>)
 8000b0c:	f009 fc06 	bl	800a31c <HAL_SPI_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000b16:	f000 fa0b 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	240004b8 	.word	0x240004b8
 8000b24:	40013000 	.word	0x40013000

08000b28 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000b2c:	4b22      	ldr	r3, [pc, #136]	; (8000bb8 <MX_UART8_Init+0x90>)
 8000b2e:	4a23      	ldr	r2, [pc, #140]	; (8000bbc <MX_UART8_Init+0x94>)
 8000b30:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000b32:	4b21      	ldr	r3, [pc, #132]	; (8000bb8 <MX_UART8_Init+0x90>)
 8000b34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b38:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3a:	4b1f      	ldr	r3, [pc, #124]	; (8000bb8 <MX_UART8_Init+0x90>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000b40:	4b1d      	ldr	r3, [pc, #116]	; (8000bb8 <MX_UART8_Init+0x90>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000b46:	4b1c      	ldr	r3, [pc, #112]	; (8000bb8 <MX_UART8_Init+0x90>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000b4c:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <MX_UART8_Init+0x90>)
 8000b4e:	220c      	movs	r2, #12
 8000b50:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b52:	4b19      	ldr	r3, [pc, #100]	; (8000bb8 <MX_UART8_Init+0x90>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b58:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <MX_UART8_Init+0x90>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b5e:	4b16      	ldr	r3, [pc, #88]	; (8000bb8 <MX_UART8_Init+0x90>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b64:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <MX_UART8_Init+0x90>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b6a:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <MX_UART8_Init+0x90>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000b70:	4811      	ldr	r0, [pc, #68]	; (8000bb8 <MX_UART8_Init+0x90>)
 8000b72:	f009 fce6 	bl	800a542 <HAL_UART_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8000b7c:	f000 f9d8 	bl	8000f30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b80:	2100      	movs	r1, #0
 8000b82:	480d      	ldr	r0, [pc, #52]	; (8000bb8 <MX_UART8_Init+0x90>)
 8000b84:	f00a fc81 	bl	800b48a <HAL_UARTEx_SetTxFifoThreshold>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8000b8e:	f000 f9cf 	bl	8000f30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b92:	2100      	movs	r1, #0
 8000b94:	4808      	ldr	r0, [pc, #32]	; (8000bb8 <MX_UART8_Init+0x90>)
 8000b96:	f00a fcb6 	bl	800b506 <HAL_UARTEx_SetRxFifoThreshold>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8000ba0:	f000 f9c6 	bl	8000f30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000ba4:	4804      	ldr	r0, [pc, #16]	; (8000bb8 <MX_UART8_Init+0x90>)
 8000ba6:	f00a fc37 	bl	800b418 <HAL_UARTEx_DisableFifoMode>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8000bb0:	f000 f9be 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	2400042c 	.word	0x2400042c
 8000bbc:	40007c00 	.word	0x40007c00

08000bc0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bc4:	4b22      	ldr	r3, [pc, #136]	; (8000c50 <MX_USART3_UART_Init+0x90>)
 8000bc6:	4a23      	ldr	r2, [pc, #140]	; (8000c54 <MX_USART3_UART_Init+0x94>)
 8000bc8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000bca:	4b21      	ldr	r3, [pc, #132]	; (8000c50 <MX_USART3_UART_Init+0x90>)
 8000bcc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000bd0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd2:	4b1f      	ldr	r3, [pc, #124]	; (8000c50 <MX_USART3_UART_Init+0x90>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bd8:	4b1d      	ldr	r3, [pc, #116]	; (8000c50 <MX_USART3_UART_Init+0x90>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bde:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <MX_USART3_UART_Init+0x90>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000be4:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <MX_USART3_UART_Init+0x90>)
 8000be6:	220c      	movs	r2, #12
 8000be8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bea:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <MX_USART3_UART_Init+0x90>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf0:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <MX_USART3_UART_Init+0x90>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bf6:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <MX_USART3_UART_Init+0x90>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bfc:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <MX_USART3_UART_Init+0x90>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c02:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <MX_USART3_UART_Init+0x90>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c08:	4811      	ldr	r0, [pc, #68]	; (8000c50 <MX_USART3_UART_Init+0x90>)
 8000c0a:	f009 fc9a 	bl	800a542 <HAL_UART_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c14:	f000 f98c 	bl	8000f30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c18:	2100      	movs	r1, #0
 8000c1a:	480d      	ldr	r0, [pc, #52]	; (8000c50 <MX_USART3_UART_Init+0x90>)
 8000c1c:	f00a fc35 	bl	800b48a <HAL_UARTEx_SetTxFifoThreshold>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c26:	f000 f983 	bl	8000f30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4808      	ldr	r0, [pc, #32]	; (8000c50 <MX_USART3_UART_Init+0x90>)
 8000c2e:	f00a fc6a 	bl	800b506 <HAL_UARTEx_SetRxFifoThreshold>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c38:	f000 f97a 	bl	8000f30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c3c:	4804      	ldr	r0, [pc, #16]	; (8000c50 <MX_USART3_UART_Init+0x90>)
 8000c3e:	f00a fbeb 	bl	800b418 <HAL_UARTEx_DisableFifoMode>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c48:	f000 f972 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	24000280 	.word	0x24000280
 8000c54:	40004800 	.word	0x40004800

08000c58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c5e:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <MX_DMA_Init+0x3c>)
 8000c60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c64:	4a0b      	ldr	r2, [pc, #44]	; (8000c94 <MX_DMA_Init+0x3c>)
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <MX_DMA_Init+0x3c>)
 8000c70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2100      	movs	r1, #0
 8000c80:	200b      	movs	r0, #11
 8000c82:	f000 feb6 	bl	80019f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c86:	200b      	movs	r0, #11
 8000c88:	f000 fecd 	bl	8001a26 <HAL_NVIC_EnableIRQ>

}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	58024400 	.word	0x58024400

08000c98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08c      	sub	sp, #48	; 0x30
 8000c9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9e:	f107 031c 	add.w	r3, r7, #28
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
 8000cac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cae:	4b69      	ldr	r3, [pc, #420]	; (8000e54 <MX_GPIO_Init+0x1bc>)
 8000cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb4:	4a67      	ldr	r2, [pc, #412]	; (8000e54 <MX_GPIO_Init+0x1bc>)
 8000cb6:	f043 0310 	orr.w	r3, r3, #16
 8000cba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cbe:	4b65      	ldr	r3, [pc, #404]	; (8000e54 <MX_GPIO_Init+0x1bc>)
 8000cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc4:	f003 0310 	and.w	r3, r3, #16
 8000cc8:	61bb      	str	r3, [r7, #24]
 8000cca:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ccc:	4b61      	ldr	r3, [pc, #388]	; (8000e54 <MX_GPIO_Init+0x1bc>)
 8000cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd2:	4a60      	ldr	r2, [pc, #384]	; (8000e54 <MX_GPIO_Init+0x1bc>)
 8000cd4:	f043 0304 	orr.w	r3, r3, #4
 8000cd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cdc:	4b5d      	ldr	r3, [pc, #372]	; (8000e54 <MX_GPIO_Init+0x1bc>)
 8000cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce2:	f003 0304 	and.w	r3, r3, #4
 8000ce6:	617b      	str	r3, [r7, #20]
 8000ce8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cea:	4b5a      	ldr	r3, [pc, #360]	; (8000e54 <MX_GPIO_Init+0x1bc>)
 8000cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf0:	4a58      	ldr	r2, [pc, #352]	; (8000e54 <MX_GPIO_Init+0x1bc>)
 8000cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cfa:	4b56      	ldr	r3, [pc, #344]	; (8000e54 <MX_GPIO_Init+0x1bc>)
 8000cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d04:	613b      	str	r3, [r7, #16]
 8000d06:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d08:	4b52      	ldr	r3, [pc, #328]	; (8000e54 <MX_GPIO_Init+0x1bc>)
 8000d0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d0e:	4a51      	ldr	r2, [pc, #324]	; (8000e54 <MX_GPIO_Init+0x1bc>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d18:	4b4e      	ldr	r3, [pc, #312]	; (8000e54 <MX_GPIO_Init+0x1bc>)
 8000d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d26:	4b4b      	ldr	r3, [pc, #300]	; (8000e54 <MX_GPIO_Init+0x1bc>)
 8000d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d2c:	4a49      	ldr	r2, [pc, #292]	; (8000e54 <MX_GPIO_Init+0x1bc>)
 8000d2e:	f043 0302 	orr.w	r3, r3, #2
 8000d32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d36:	4b47      	ldr	r3, [pc, #284]	; (8000e54 <MX_GPIO_Init+0x1bc>)
 8000d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3c:	f003 0302 	and.w	r3, r3, #2
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d44:	4b43      	ldr	r3, [pc, #268]	; (8000e54 <MX_GPIO_Init+0x1bc>)
 8000d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4a:	4a42      	ldr	r2, [pc, #264]	; (8000e54 <MX_GPIO_Init+0x1bc>)
 8000d4c:	f043 0308 	orr.w	r3, r3, #8
 8000d50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d54:	4b3f      	ldr	r3, [pc, #252]	; (8000e54 <MX_GPIO_Init+0x1bc>)
 8000d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d5a:	f003 0308 	and.w	r3, r3, #8
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_485_TX_EN_Pin|RS_485_RX_EN_Pin, GPIO_PIN_RESET);
 8000d62:	2200      	movs	r2, #0
 8000d64:	210c      	movs	r1, #12
 8000d66:	483c      	ldr	r0, [pc, #240]	; (8000e58 <MX_GPIO_Init+0x1c0>)
 8000d68:	f003 fe3e 	bl	80049e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TELE_CE_Pin|TELE_CS_Pin, GPIO_PIN_RESET);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2103      	movs	r1, #3
 8000d70:	483a      	ldr	r0, [pc, #232]	; (8000e5c <MX_GPIO_Init+0x1c4>)
 8000d72:	f003 fe39 	bl	80049e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2101      	movs	r1, #1
 8000d7a:	4839      	ldr	r0, [pc, #228]	; (8000e60 <MX_GPIO_Init+0x1c8>)
 8000d7c:	f003 fe34 	bl	80049e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_RESET);
 8000d80:	2200      	movs	r2, #0
 8000d82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d86:	4837      	ldr	r0, [pc, #220]	; (8000e64 <MX_GPIO_Init+0x1cc>)
 8000d88:	f003 fe2e 	bl	80049e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS_485_TX_EN_Pin RS_485_RX_EN_Pin */
  GPIO_InitStruct.Pin = RS_485_TX_EN_Pin|RS_485_RX_EN_Pin;
 8000d8c:	230c      	movs	r3, #12
 8000d8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d90:	2301      	movs	r3, #1
 8000d92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d9c:	f107 031c 	add.w	r3, r7, #28
 8000da0:	4619      	mov	r1, r3
 8000da2:	482d      	ldr	r0, [pc, #180]	; (8000e58 <MX_GPIO_Init+0x1c0>)
 8000da4:	f003 fc58 	bl	8004658 <HAL_GPIO_Init>

  /*Configure GPIO pins : TELE_CE_Pin TELE_CS_Pin */
  GPIO_InitStruct.Pin = TELE_CE_Pin|TELE_CS_Pin;
 8000da8:	2303      	movs	r3, #3
 8000daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dac:	2301      	movs	r3, #1
 8000dae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2300      	movs	r3, #0
 8000db6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db8:	f107 031c 	add.w	r3, r7, #28
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4827      	ldr	r0, [pc, #156]	; (8000e5c <MX_GPIO_Init+0x1c4>)
 8000dc0:	f003 fc4a 	bl	8004658 <HAL_GPIO_Init>

  /*Configure GPIO pin : TELE_IRQ_Pin */
  GPIO_InitStruct.Pin = TELE_IRQ_Pin;
 8000dc4:	2304      	movs	r3, #4
 8000dc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dc8:	4b27      	ldr	r3, [pc, #156]	; (8000e68 <MX_GPIO_Init+0x1d0>)
 8000dca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TELE_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000dd0:	f107 031c 	add.w	r3, r7, #28
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4821      	ldr	r0, [pc, #132]	; (8000e5c <MX_GPIO_Init+0x1c4>)
 8000dd8:	f003 fc3e 	bl	8004658 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de0:	2301      	movs	r3, #1
 8000de2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2300      	movs	r3, #0
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000dec:	f107 031c 	add.w	r3, r7, #28
 8000df0:	4619      	mov	r1, r3
 8000df2:	481b      	ldr	r0, [pc, #108]	; (8000e60 <MX_GPIO_Init+0x1c8>)
 8000df4:	f003 fc30 	bl	8004658 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_INT_Pin */
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 8000df8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dfe:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <MX_GPIO_Init+0x1d0>)
 8000e00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 8000e06:	f107 031c 	add.w	r3, r7, #28
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4812      	ldr	r0, [pc, #72]	; (8000e58 <MX_GPIO_Init+0x1c0>)
 8000e0e:	f003 fc23 	bl	8004658 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 8000e12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 8000e24:	f107 031c 	add.w	r3, r7, #28
 8000e28:	4619      	mov	r1, r3
 8000e2a:	480e      	ldr	r0, [pc, #56]	; (8000e64 <MX_GPIO_Init+0x1cc>)
 8000e2c:	f003 fc14 	bl	8004658 <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DET_Pin */
  GPIO_InitStruct.Pin = CARD_DET_Pin;
 8000e30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e36:	2300      	movs	r3, #0
 8000e38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DET_GPIO_Port, &GPIO_InitStruct);
 8000e3e:	f107 031c 	add.w	r3, r7, #28
 8000e42:	4619      	mov	r1, r3
 8000e44:	4805      	ldr	r0, [pc, #20]	; (8000e5c <MX_GPIO_Init+0x1c4>)
 8000e46:	f003 fc07 	bl	8004658 <HAL_GPIO_Init>

}
 8000e4a:	bf00      	nop
 8000e4c:	3730      	adds	r7, #48	; 0x30
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	58024400 	.word	0x58024400
 8000e58:	58021000 	.word	0x58021000
 8000e5c:	58020000 	.word	0x58020000
 8000e60:	58020400 	.word	0x58020400
 8000e64:	58020c00 	.word	0x58020c00
 8000e68:	11110000 	.word	0x11110000

08000e6c <FDCAN_Config>:

/* USER CODE BEGIN 4 */
static void FDCAN_Config(void){
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	; 0x28
 8000e70:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef sFilterConfig;

	  /* Configure Rx filter */
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000e72:	2300      	movs	r3, #0
 8000e74:	603b      	str	r3, [r7, #0]
	  sFilterConfig.FilterIndex = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	607b      	str	r3, [r7, #4]
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterID1 = 0x321;
 8000e82:	f240 3321 	movw	r3, #801	; 0x321
 8000e86:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterID2 = 0x7FF;
 8000e88:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000e8c:	617b      	str	r3, [r7, #20]
	  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) == HAL_OK)
 8000e8e:	463b      	mov	r3, r7
 8000e90:	4619      	mov	r1, r3
 8000e92:	4817      	ldr	r0, [pc, #92]	; (8000ef0 <FDCAN_Config+0x84>)
 8000e94:	f002 fc86 	bl	80037a4 <HAL_FDCAN_ConfigFilter>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d102      	bne.n	8000ea4 <FDCAN_Config+0x38>
	  {
	    printf("Filter configured");
 8000e9e:	4815      	ldr	r0, [pc, #84]	; (8000ef4 <FDCAN_Config+0x88>)
 8000ea0:	f010 fa00 	bl	80112a4 <iprintf>
	  }

	  /* Configure global filter:
	     Filter all remote frames with STD and EXT ID
	     Reject non matching frames with STD ID and EXT ID */
	  if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	2202      	movs	r2, #2
 8000eac:	2102      	movs	r1, #2
 8000eae:	4810      	ldr	r0, [pc, #64]	; (8000ef0 <FDCAN_Config+0x84>)
 8000eb0:	f002 fcee 	bl	8003890 <HAL_FDCAN_ConfigGlobalFilter>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <FDCAN_Config+0x52>
	  {
	    Error_Handler();
 8000eba:	f000 f839 	bl	8000f30 <Error_Handler>
	  }
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8000ebe:	480c      	ldr	r0, [pc, #48]	; (8000ef0 <FDCAN_Config+0x84>)
 8000ec0:	f002 fd36 	bl	8003930 <HAL_FDCAN_Start>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <FDCAN_Config+0x62>
	  {
	    Error_Handler();
 8000eca:	f000 f831 	bl	8000f30 <Error_Handler>
	  }
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	4807      	ldr	r0, [pc, #28]	; (8000ef0 <FDCAN_Config+0x84>)
 8000ed4:	f002 feb6 	bl	8003c44 <HAL_FDCAN_ActivateNotification>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <FDCAN_Config+0x76>
	  {
	    /* Notification Error */
	    Error_Handler();
 8000ede:	f000 f827 	bl	8000f30 <Error_Handler>
	  }
	HAL_FDCAN_EnableTxDelayCompensation(&hfdcan1);
 8000ee2:	4803      	ldr	r0, [pc, #12]	; (8000ef0 <FDCAN_Config+0x84>)
 8000ee4:	f002 fd01 	bl	80038ea <HAL_FDCAN_EnableTxDelayCompensation>

}
 8000ee8:	bf00      	nop
 8000eea:	3720      	adds	r7, #32
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	2400038c 	.word	0x2400038c
 8000ef4:	08011f34 	.word	0x08011f34

08000ef8 <HAL_FDCAN_RxFifo0Callback>:
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan1, uint32_t RxFifo0ITs)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
	if (HAL_FDCAN_GetRxMessage(hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000f02:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <HAL_FDCAN_RxFifo0Callback+0x2c>)
 8000f04:	4a08      	ldr	r2, [pc, #32]	; (8000f28 <HAL_FDCAN_RxFifo0Callback+0x30>)
 8000f06:	2140      	movs	r1, #64	; 0x40
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f002 fd3d 	bl	8003988 <HAL_FDCAN_GetRxMessage>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d103      	bne.n	8000f1c <HAL_FDCAN_RxFifo0Callback+0x24>
			      {
					HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000f14:	2101      	movs	r1, #1
 8000f16:	4805      	ldr	r0, [pc, #20]	; (8000f2c <HAL_FDCAN_RxFifo0Callback+0x34>)
 8000f18:	f003 fd7f 	bl	8004a1a <HAL_GPIO_TogglePin>
				  			  printf("%c",RxData[i]);
				  	  }
				  	  printf("\n");
				  	*/
			      }
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	24000540 	.word	0x24000540
 8000f28:	24000580 	.word	0x24000580
 8000f2c:	58020400 	.word	0x58020400

08000f30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f34:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f36:	e7fe      	b.n	8000f36 <Error_Handler+0x6>

08000f38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <HAL_MspInit+0x30>)
 8000f40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f44:	4a08      	ldr	r2, [pc, #32]	; (8000f68 <HAL_MspInit+0x30>)
 8000f46:	f043 0302 	orr.w	r3, r3, #2
 8000f4a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_MspInit+0x30>)
 8000f50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f54:	f003 0302 	and.w	r3, r3, #2
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	58024400 	.word	0x58024400

08000f6c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08c      	sub	sp, #48	; 0x30
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	f107 031c 	add.w	r3, r7, #28
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a41      	ldr	r2, [pc, #260]	; (8001090 <HAL_FDCAN_MspInit+0x124>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d140      	bne.n	8001010 <HAL_FDCAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000f8e:	4b41      	ldr	r3, [pc, #260]	; (8001094 <HAL_FDCAN_MspInit+0x128>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	3301      	adds	r3, #1
 8000f94:	4a3f      	ldr	r2, [pc, #252]	; (8001094 <HAL_FDCAN_MspInit+0x128>)
 8000f96:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000f98:	4b3e      	ldr	r3, [pc, #248]	; (8001094 <HAL_FDCAN_MspInit+0x128>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d10e      	bne.n	8000fbe <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000fa0:	4b3d      	ldr	r3, [pc, #244]	; (8001098 <HAL_FDCAN_MspInit+0x12c>)
 8000fa2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000fa6:	4a3c      	ldr	r2, [pc, #240]	; (8001098 <HAL_FDCAN_MspInit+0x12c>)
 8000fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fac:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000fb0:	4b39      	ldr	r3, [pc, #228]	; (8001098 <HAL_FDCAN_MspInit+0x12c>)
 8000fb2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fba:	61bb      	str	r3, [r7, #24]
 8000fbc:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbe:	4b36      	ldr	r3, [pc, #216]	; (8001098 <HAL_FDCAN_MspInit+0x12c>)
 8000fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc4:	4a34      	ldr	r2, [pc, #208]	; (8001098 <HAL_FDCAN_MspInit+0x12c>)
 8000fc6:	f043 0302 	orr.w	r3, r3, #2
 8000fca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fce:	4b32      	ldr	r3, [pc, #200]	; (8001098 <HAL_FDCAN_MspInit+0x12c>)
 8000fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	617b      	str	r3, [r7, #20]
 8000fda:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fdc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fea:	2303      	movs	r3, #3
 8000fec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000fee:	2309      	movs	r3, #9
 8000ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff2:	f107 031c 	add.w	r3, r7, #28
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4828      	ldr	r0, [pc, #160]	; (800109c <HAL_FDCAN_MspInit+0x130>)
 8000ffa:	f003 fb2d 	bl	8004658 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2100      	movs	r1, #0
 8001002:	2013      	movs	r0, #19
 8001004:	f000 fcf5 	bl	80019f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001008:	2013      	movs	r0, #19
 800100a:	f000 fd0c 	bl	8001a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 800100e:	e03b      	b.n	8001088 <HAL_FDCAN_MspInit+0x11c>
  else if(hfdcan->Instance==FDCAN2)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a22      	ldr	r2, [pc, #136]	; (80010a0 <HAL_FDCAN_MspInit+0x134>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d136      	bne.n	8001088 <HAL_FDCAN_MspInit+0x11c>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800101a:	4b1e      	ldr	r3, [pc, #120]	; (8001094 <HAL_FDCAN_MspInit+0x128>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	3301      	adds	r3, #1
 8001020:	4a1c      	ldr	r2, [pc, #112]	; (8001094 <HAL_FDCAN_MspInit+0x128>)
 8001022:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001024:	4b1b      	ldr	r3, [pc, #108]	; (8001094 <HAL_FDCAN_MspInit+0x128>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d10e      	bne.n	800104a <HAL_FDCAN_MspInit+0xde>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800102c:	4b1a      	ldr	r3, [pc, #104]	; (8001098 <HAL_FDCAN_MspInit+0x12c>)
 800102e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001032:	4a19      	ldr	r2, [pc, #100]	; (8001098 <HAL_FDCAN_MspInit+0x12c>)
 8001034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001038:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800103c:	4b16      	ldr	r3, [pc, #88]	; (8001098 <HAL_FDCAN_MspInit+0x12c>)
 800103e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800104a:	4b13      	ldr	r3, [pc, #76]	; (8001098 <HAL_FDCAN_MspInit+0x12c>)
 800104c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001050:	4a11      	ldr	r2, [pc, #68]	; (8001098 <HAL_FDCAN_MspInit+0x12c>)
 8001052:	f043 0302 	orr.w	r3, r3, #2
 8001056:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800105a:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <HAL_FDCAN_MspInit+0x12c>)
 800105c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001068:	2360      	movs	r3, #96	; 0x60
 800106a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	2302      	movs	r3, #2
 800106e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001078:	2309      	movs	r3, #9
 800107a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107c:	f107 031c 	add.w	r3, r7, #28
 8001080:	4619      	mov	r1, r3
 8001082:	4806      	ldr	r0, [pc, #24]	; (800109c <HAL_FDCAN_MspInit+0x130>)
 8001084:	f003 fae8 	bl	8004658 <HAL_GPIO_Init>
}
 8001088:	bf00      	nop
 800108a:	3730      	adds	r7, #48	; 0x30
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	4000a000 	.word	0x4000a000
 8001094:	240001e8 	.word	0x240001e8
 8001098:	58024400 	.word	0x58024400
 800109c:	58020400 	.word	0x58020400
 80010a0:	4000a400 	.word	0x4000a400

080010a4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	; 0x28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a2a      	ldr	r2, [pc, #168]	; (800116c <HAL_SD_MspInit+0xc8>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d14d      	bne.n	8001162 <HAL_SD_MspInit+0xbe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80010c6:	4b2a      	ldr	r3, [pc, #168]	; (8001170 <HAL_SD_MspInit+0xcc>)
 80010c8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80010cc:	4a28      	ldr	r2, [pc, #160]	; (8001170 <HAL_SD_MspInit+0xcc>)
 80010ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80010d6:	4b26      	ldr	r3, [pc, #152]	; (8001170 <HAL_SD_MspInit+0xcc>)
 80010d8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80010dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e0:	613b      	str	r3, [r7, #16]
 80010e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e4:	4b22      	ldr	r3, [pc, #136]	; (8001170 <HAL_SD_MspInit+0xcc>)
 80010e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ea:	4a21      	ldr	r2, [pc, #132]	; (8001170 <HAL_SD_MspInit+0xcc>)
 80010ec:	f043 0304 	orr.w	r3, r3, #4
 80010f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010f4:	4b1e      	ldr	r3, [pc, #120]	; (8001170 <HAL_SD_MspInit+0xcc>)
 80010f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010fa:	f003 0304 	and.w	r3, r3, #4
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001102:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <HAL_SD_MspInit+0xcc>)
 8001104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001108:	4a19      	ldr	r2, [pc, #100]	; (8001170 <HAL_SD_MspInit+0xcc>)
 800110a:	f043 0308 	orr.w	r3, r3, #8
 800110e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001112:	4b17      	ldr	r3, [pc, #92]	; (8001170 <HAL_SD_MspInit+0xcc>)
 8001114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001118:	f003 0308 	and.w	r3, r3, #8
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001120:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001124:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001126:	2302      	movs	r3, #2
 8001128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112e:	2303      	movs	r3, #3
 8001130:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001132:	230c      	movs	r3, #12
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	4619      	mov	r1, r3
 800113c:	480d      	ldr	r0, [pc, #52]	; (8001174 <HAL_SD_MspInit+0xd0>)
 800113e:	f003 fa8b 	bl	8004658 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001142:	2304      	movs	r3, #4
 8001144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001146:	2302      	movs	r3, #2
 8001148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114e:	2303      	movs	r3, #3
 8001150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001152:	230c      	movs	r3, #12
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	4619      	mov	r1, r3
 800115c:	4806      	ldr	r0, [pc, #24]	; (8001178 <HAL_SD_MspInit+0xd4>)
 800115e:	f003 fa7b 	bl	8004658 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001162:	bf00      	nop
 8001164:	3728      	adds	r7, #40	; 0x28
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	52007000 	.word	0x52007000
 8001170:	58024400 	.word	0x58024400
 8001174:	58020800 	.word	0x58020800
 8001178:	58020c00 	.word	0x58020c00

0800117c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	; 0x28
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a1a      	ldr	r2, [pc, #104]	; (8001204 <HAL_SPI_MspInit+0x88>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d12d      	bne.n	80011fa <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800119e:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <HAL_SPI_MspInit+0x8c>)
 80011a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011a4:	4a18      	ldr	r2, [pc, #96]	; (8001208 <HAL_SPI_MspInit+0x8c>)
 80011a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80011ae:	4b16      	ldr	r3, [pc, #88]	; (8001208 <HAL_SPI_MspInit+0x8c>)
 80011b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <HAL_SPI_MspInit+0x8c>)
 80011be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c2:	4a11      	ldr	r2, [pc, #68]	; (8001208 <HAL_SPI_MspInit+0x8c>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011cc:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <HAL_SPI_MspInit+0x8c>)
 80011ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011da:	23e0      	movs	r3, #224	; 0xe0
 80011dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011de:	2302      	movs	r3, #2
 80011e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2300      	movs	r3, #0
 80011e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011ea:	2305      	movs	r3, #5
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	4805      	ldr	r0, [pc, #20]	; (800120c <HAL_SPI_MspInit+0x90>)
 80011f6:	f003 fa2f 	bl	8004658 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011fa:	bf00      	nop
 80011fc:	3728      	adds	r7, #40	; 0x28
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40013000 	.word	0x40013000
 8001208:	58024400 	.word	0x58024400
 800120c:	58020000 	.word	0x58020000

08001210 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08c      	sub	sp, #48	; 0x30
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 031c 	add.w	r3, r7, #28
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a4b      	ldr	r2, [pc, #300]	; (800135c <HAL_UART_MspInit+0x14c>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d12e      	bne.n	8001290 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8001232:	4b4b      	ldr	r3, [pc, #300]	; (8001360 <HAL_UART_MspInit+0x150>)
 8001234:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001238:	4a49      	ldr	r2, [pc, #292]	; (8001360 <HAL_UART_MspInit+0x150>)
 800123a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800123e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001242:	4b47      	ldr	r3, [pc, #284]	; (8001360 <HAL_UART_MspInit+0x150>)
 8001244:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001248:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800124c:	61bb      	str	r3, [r7, #24]
 800124e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001250:	4b43      	ldr	r3, [pc, #268]	; (8001360 <HAL_UART_MspInit+0x150>)
 8001252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001256:	4a42      	ldr	r2, [pc, #264]	; (8001360 <HAL_UART_MspInit+0x150>)
 8001258:	f043 0310 	orr.w	r3, r3, #16
 800125c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001260:	4b3f      	ldr	r3, [pc, #252]	; (8001360 <HAL_UART_MspInit+0x150>)
 8001262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001266:	f003 0310 	and.w	r3, r3, #16
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800126e:	2303      	movs	r3, #3
 8001270:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001272:	2302      	movs	r3, #2
 8001274:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127a:	2300      	movs	r3, #0
 800127c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800127e:	2308      	movs	r3, #8
 8001280:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001282:	f107 031c 	add.w	r3, r7, #28
 8001286:	4619      	mov	r1, r3
 8001288:	4836      	ldr	r0, [pc, #216]	; (8001364 <HAL_UART_MspInit+0x154>)
 800128a:	f003 f9e5 	bl	8004658 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800128e:	e061      	b.n	8001354 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a34      	ldr	r2, [pc, #208]	; (8001368 <HAL_UART_MspInit+0x158>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d15c      	bne.n	8001354 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART3_CLK_ENABLE();
 800129a:	4b31      	ldr	r3, [pc, #196]	; (8001360 <HAL_UART_MspInit+0x150>)
 800129c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012a0:	4a2f      	ldr	r2, [pc, #188]	; (8001360 <HAL_UART_MspInit+0x150>)
 80012a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012a6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012aa:	4b2d      	ldr	r3, [pc, #180]	; (8001360 <HAL_UART_MspInit+0x150>)
 80012ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012b8:	4b29      	ldr	r3, [pc, #164]	; (8001360 <HAL_UART_MspInit+0x150>)
 80012ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012be:	4a28      	ldr	r2, [pc, #160]	; (8001360 <HAL_UART_MspInit+0x150>)
 80012c0:	f043 0308 	orr.w	r3, r3, #8
 80012c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012c8:	4b25      	ldr	r3, [pc, #148]	; (8001360 <HAL_UART_MspInit+0x150>)
 80012ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ce:	f003 0308 	and.w	r3, r3, #8
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	2302      	movs	r3, #2
 80012de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e4:	2300      	movs	r3, #0
 80012e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012e8:	2307      	movs	r3, #7
 80012ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ec:	f107 031c 	add.w	r3, r7, #28
 80012f0:	4619      	mov	r1, r3
 80012f2:	481e      	ldr	r0, [pc, #120]	; (800136c <HAL_UART_MspInit+0x15c>)
 80012f4:	f003 f9b0 	bl	8004658 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 80012f8:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <HAL_UART_MspInit+0x160>)
 80012fa:	4a1e      	ldr	r2, [pc, #120]	; (8001374 <HAL_UART_MspInit+0x164>)
 80012fc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80012fe:	4b1c      	ldr	r3, [pc, #112]	; (8001370 <HAL_UART_MspInit+0x160>)
 8001300:	222d      	movs	r2, #45	; 0x2d
 8001302:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001304:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <HAL_UART_MspInit+0x160>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800130a:	4b19      	ldr	r3, [pc, #100]	; (8001370 <HAL_UART_MspInit+0x160>)
 800130c:	2200      	movs	r2, #0
 800130e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001310:	4b17      	ldr	r3, [pc, #92]	; (8001370 <HAL_UART_MspInit+0x160>)
 8001312:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001316:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001318:	4b15      	ldr	r3, [pc, #84]	; (8001370 <HAL_UART_MspInit+0x160>)
 800131a:	2200      	movs	r2, #0
 800131c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800131e:	4b14      	ldr	r3, [pc, #80]	; (8001370 <HAL_UART_MspInit+0x160>)
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001324:	4b12      	ldr	r3, [pc, #72]	; (8001370 <HAL_UART_MspInit+0x160>)
 8001326:	f44f 7280 	mov.w	r2, #256	; 0x100
 800132a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800132c:	4b10      	ldr	r3, [pc, #64]	; (8001370 <HAL_UART_MspInit+0x160>)
 800132e:	2200      	movs	r2, #0
 8001330:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001332:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <HAL_UART_MspInit+0x160>)
 8001334:	2200      	movs	r2, #0
 8001336:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001338:	480d      	ldr	r0, [pc, #52]	; (8001370 <HAL_UART_MspInit+0x160>)
 800133a:	f000 fb8f 	bl	8001a5c <HAL_DMA_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <HAL_UART_MspInit+0x138>
      Error_Handler();
 8001344:	f7ff fdf4 	bl	8000f30 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a09      	ldr	r2, [pc, #36]	; (8001370 <HAL_UART_MspInit+0x160>)
 800134c:	679a      	str	r2, [r3, #120]	; 0x78
 800134e:	4a08      	ldr	r2, [pc, #32]	; (8001370 <HAL_UART_MspInit+0x160>)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001354:	bf00      	nop
 8001356:	3730      	adds	r7, #48	; 0x30
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40007c00 	.word	0x40007c00
 8001360:	58024400 	.word	0x58024400
 8001364:	58021000 	.word	0x58021000
 8001368:	40004800 	.word	0x40004800
 800136c:	58020c00 	.word	0x58020c00
 8001370:	24000208 	.word	0x24000208
 8001374:	40020010 	.word	0x40020010

08001378 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800137c:	e7fe      	b.n	800137c <NMI_Handler+0x4>

0800137e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001382:	e7fe      	b.n	8001382 <HardFault_Handler+0x4>

08001384 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001388:	e7fe      	b.n	8001388 <MemManage_Handler+0x4>

0800138a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800138e:	e7fe      	b.n	800138e <BusFault_Handler+0x4>

08001390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001394:	e7fe      	b.n	8001394 <UsageFault_Handler+0x4>

08001396 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c4:	f000 f9ec 	bl	80017a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}

080013cc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80013d0:	4802      	ldr	r0, [pc, #8]	; (80013dc <DMA1_Stream0_IRQHandler+0x10>)
 80013d2:	f000 fe9f 	bl	8002114 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	24000208 	.word	0x24000208

080013e0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80013e4:	4802      	ldr	r0, [pc, #8]	; (80013f0 <FDCAN1_IT0_IRQHandler+0x10>)
 80013e6:	f002 fca7 	bl	8003d38 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	2400038c 	.word	0x2400038c

080013f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80013f8:	4802      	ldr	r0, [pc, #8]	; (8001404 <OTG_FS_IRQHandler+0x10>)
 80013fa:	f003 fc80 	bl	8004cfe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	24000f84 	.word	0x24000f84

08001408 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]
 8001418:	e00a      	b.n	8001430 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800141a:	f3af 8000 	nop.w
 800141e:	4601      	mov	r1, r0
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	1c5a      	adds	r2, r3, #1
 8001424:	60ba      	str	r2, [r7, #8]
 8001426:	b2ca      	uxtb	r2, r1
 8001428:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	3301      	adds	r3, #1
 800142e:	617b      	str	r3, [r7, #20]
 8001430:	697a      	ldr	r2, [r7, #20]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	429a      	cmp	r2, r3
 8001436:	dbf0      	blt.n	800141a <_read+0x12>
	}

return len;
 8001438:	687b      	ldr	r3, [r7, #4]
}
 800143a:	4618      	mov	r0, r3
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b086      	sub	sp, #24
 8001446:	af00      	add	r7, sp, #0
 8001448:	60f8      	str	r0, [r7, #12]
 800144a:	60b9      	str	r1, [r7, #8]
 800144c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
 8001452:	e009      	b.n	8001468 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	1c5a      	adds	r2, r3, #1
 8001458:	60ba      	str	r2, [r7, #8]
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	3301      	adds	r3, #1
 8001466:	617b      	str	r3, [r7, #20]
 8001468:	697a      	ldr	r2, [r7, #20]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	429a      	cmp	r2, r3
 800146e:	dbf1      	blt.n	8001454 <_write+0x12>
	}
	return len;
 8001470:	687b      	ldr	r3, [r7, #4]
}
 8001472:	4618      	mov	r0, r3
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <_close>:

int _close(int file)
{
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
	return -1;
 8001482:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001486:	4618      	mov	r0, r3
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014a2:	605a      	str	r2, [r3, #4]
	return 0;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <_isatty>:

int _isatty(int file)
{
 80014b2:	b480      	push	{r7}
 80014b4:	b083      	sub	sp, #12
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
	return 1;
 80014ba:	2301      	movs	r3, #1
}
 80014bc:	4618      	mov	r0, r3
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
	return 0;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
	...

080014e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014ec:	4a14      	ldr	r2, [pc, #80]	; (8001540 <_sbrk+0x5c>)
 80014ee:	4b15      	ldr	r3, [pc, #84]	; (8001544 <_sbrk+0x60>)
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014f8:	4b13      	ldr	r3, [pc, #76]	; (8001548 <_sbrk+0x64>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d102      	bne.n	8001506 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001500:	4b11      	ldr	r3, [pc, #68]	; (8001548 <_sbrk+0x64>)
 8001502:	4a12      	ldr	r2, [pc, #72]	; (800154c <_sbrk+0x68>)
 8001504:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001506:	4b10      	ldr	r3, [pc, #64]	; (8001548 <_sbrk+0x64>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4413      	add	r3, r2
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	429a      	cmp	r2, r3
 8001512:	d207      	bcs.n	8001524 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001514:	f00f fdd0 	bl	80110b8 <__errno>
 8001518:	4602      	mov	r2, r0
 800151a:	230c      	movs	r3, #12
 800151c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800151e:	f04f 33ff 	mov.w	r3, #4294967295
 8001522:	e009      	b.n	8001538 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001524:	4b08      	ldr	r3, [pc, #32]	; (8001548 <_sbrk+0x64>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800152a:	4b07      	ldr	r3, [pc, #28]	; (8001548 <_sbrk+0x64>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4413      	add	r3, r2
 8001532:	4a05      	ldr	r2, [pc, #20]	; (8001548 <_sbrk+0x64>)
 8001534:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001536:	68fb      	ldr	r3, [r7, #12]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	24080000 	.word	0x24080000
 8001544:	00000400 	.word	0x00000400
 8001548:	240001ec 	.word	0x240001ec
 800154c:	24001390 	.word	0x24001390

08001550 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001554:	4b39      	ldr	r3, [pc, #228]	; (800163c <SystemInit+0xec>)
 8001556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800155a:	4a38      	ldr	r2, [pc, #224]	; (800163c <SystemInit+0xec>)
 800155c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001560:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001564:	4b36      	ldr	r3, [pc, #216]	; (8001640 <SystemInit+0xf0>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 030f 	and.w	r3, r3, #15
 800156c:	2b06      	cmp	r3, #6
 800156e:	d807      	bhi.n	8001580 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001570:	4b33      	ldr	r3, [pc, #204]	; (8001640 <SystemInit+0xf0>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f023 030f 	bic.w	r3, r3, #15
 8001578:	4a31      	ldr	r2, [pc, #196]	; (8001640 <SystemInit+0xf0>)
 800157a:	f043 0307 	orr.w	r3, r3, #7
 800157e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001580:	4b30      	ldr	r3, [pc, #192]	; (8001644 <SystemInit+0xf4>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a2f      	ldr	r2, [pc, #188]	; (8001644 <SystemInit+0xf4>)
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800158c:	4b2d      	ldr	r3, [pc, #180]	; (8001644 <SystemInit+0xf4>)
 800158e:	2200      	movs	r2, #0
 8001590:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001592:	4b2c      	ldr	r3, [pc, #176]	; (8001644 <SystemInit+0xf4>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	492b      	ldr	r1, [pc, #172]	; (8001644 <SystemInit+0xf4>)
 8001598:	4b2b      	ldr	r3, [pc, #172]	; (8001648 <SystemInit+0xf8>)
 800159a:	4013      	ands	r3, r2
 800159c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800159e:	4b28      	ldr	r3, [pc, #160]	; (8001640 <SystemInit+0xf0>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 030f 	and.w	r3, r3, #15
 80015a6:	2b07      	cmp	r3, #7
 80015a8:	d907      	bls.n	80015ba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015aa:	4b25      	ldr	r3, [pc, #148]	; (8001640 <SystemInit+0xf0>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f023 030f 	bic.w	r3, r3, #15
 80015b2:	4a23      	ldr	r2, [pc, #140]	; (8001640 <SystemInit+0xf0>)
 80015b4:	f043 0307 	orr.w	r3, r3, #7
 80015b8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80015ba:	4b22      	ldr	r3, [pc, #136]	; (8001644 <SystemInit+0xf4>)
 80015bc:	2200      	movs	r2, #0
 80015be:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80015c0:	4b20      	ldr	r3, [pc, #128]	; (8001644 <SystemInit+0xf4>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80015c6:	4b1f      	ldr	r3, [pc, #124]	; (8001644 <SystemInit+0xf4>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80015cc:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <SystemInit+0xf4>)
 80015ce:	4a1f      	ldr	r2, [pc, #124]	; (800164c <SystemInit+0xfc>)
 80015d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80015d2:	4b1c      	ldr	r3, [pc, #112]	; (8001644 <SystemInit+0xf4>)
 80015d4:	4a1e      	ldr	r2, [pc, #120]	; (8001650 <SystemInit+0x100>)
 80015d6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80015d8:	4b1a      	ldr	r3, [pc, #104]	; (8001644 <SystemInit+0xf4>)
 80015da:	4a1e      	ldr	r2, [pc, #120]	; (8001654 <SystemInit+0x104>)
 80015dc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80015de:	4b19      	ldr	r3, [pc, #100]	; (8001644 <SystemInit+0xf4>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80015e4:	4b17      	ldr	r3, [pc, #92]	; (8001644 <SystemInit+0xf4>)
 80015e6:	4a1b      	ldr	r2, [pc, #108]	; (8001654 <SystemInit+0x104>)
 80015e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80015ea:	4b16      	ldr	r3, [pc, #88]	; (8001644 <SystemInit+0xf4>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015f0:	4b14      	ldr	r3, [pc, #80]	; (8001644 <SystemInit+0xf4>)
 80015f2:	4a18      	ldr	r2, [pc, #96]	; (8001654 <SystemInit+0x104>)
 80015f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015f6:	4b13      	ldr	r3, [pc, #76]	; (8001644 <SystemInit+0xf4>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015fc:	4b11      	ldr	r3, [pc, #68]	; (8001644 <SystemInit+0xf4>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a10      	ldr	r2, [pc, #64]	; (8001644 <SystemInit+0xf4>)
 8001602:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001606:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001608:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <SystemInit+0xf4>)
 800160a:	2200      	movs	r2, #0
 800160c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800160e:	4b12      	ldr	r3, [pc, #72]	; (8001658 <SystemInit+0x108>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	4b12      	ldr	r3, [pc, #72]	; (800165c <SystemInit+0x10c>)
 8001614:	4013      	ands	r3, r2
 8001616:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800161a:	d202      	bcs.n	8001622 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800161c:	4b10      	ldr	r3, [pc, #64]	; (8001660 <SystemInit+0x110>)
 800161e:	2201      	movs	r2, #1
 8001620:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001622:	4b10      	ldr	r3, [pc, #64]	; (8001664 <SystemInit+0x114>)
 8001624:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001628:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800162a:	4b04      	ldr	r3, [pc, #16]	; (800163c <SystemInit+0xec>)
 800162c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001630:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	e000ed00 	.word	0xe000ed00
 8001640:	52002000 	.word	0x52002000
 8001644:	58024400 	.word	0x58024400
 8001648:	eaf6ed7f 	.word	0xeaf6ed7f
 800164c:	02020200 	.word	0x02020200
 8001650:	01ff0000 	.word	0x01ff0000
 8001654:	01010280 	.word	0x01010280
 8001658:	5c001000 	.word	0x5c001000
 800165c:	ffff0000 	.word	0xffff0000
 8001660:	51008108 	.word	0x51008108
 8001664:	52004000 	.word	0x52004000

08001668 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001668:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016a0 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800166c:	f7ff ff70 	bl	8001550 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001670:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001672:	e003      	b.n	800167c <LoopCopyDataInit>

08001674 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001674:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001676:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001678:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800167a:	3104      	adds	r1, #4

0800167c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800167c:	480a      	ldr	r0, [pc, #40]	; (80016a8 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800167e:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001680:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001682:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001684:	d3f6      	bcc.n	8001674 <CopyDataInit>
  ldr  r2, =_sbss
 8001686:	4a0a      	ldr	r2, [pc, #40]	; (80016b0 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001688:	e002      	b.n	8001690 <LoopFillZerobss>

0800168a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800168a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800168c:	f842 3b04 	str.w	r3, [r2], #4

08001690 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001692:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001694:	d3f9      	bcc.n	800168a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001696:	f00f fd15 	bl	80110c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800169a:	f7fe fff1 	bl	8000680 <main>
  bx  lr    
 800169e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016a0:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80016a4:	08012108 	.word	0x08012108
  ldr  r0, =_sdata
 80016a8:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80016ac:	240001cc 	.word	0x240001cc
  ldr  r2, =_sbss
 80016b0:	240001cc 	.word	0x240001cc
  ldr  r3, = _ebss
 80016b4:	24001390 	.word	0x24001390

080016b8 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016b8:	e7fe      	b.n	80016b8 <ADC3_IRQHandler>
	...

080016bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c2:	2003      	movs	r0, #3
 80016c4:	f000 f98a 	bl	80019dc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016c8:	f005 f9da 	bl	8006a80 <HAL_RCC_GetSysClockFreq>
 80016cc:	4601      	mov	r1, r0
 80016ce:	4b15      	ldr	r3, [pc, #84]	; (8001724 <HAL_Init+0x68>)
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	0a1b      	lsrs	r3, r3, #8
 80016d4:	f003 030f 	and.w	r3, r3, #15
 80016d8:	4a13      	ldr	r2, [pc, #76]	; (8001728 <HAL_Init+0x6c>)
 80016da:	5cd3      	ldrb	r3, [r2, r3]
 80016dc:	f003 031f 	and.w	r3, r3, #31
 80016e0:	fa21 f303 	lsr.w	r3, r1, r3
 80016e4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016e6:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <HAL_Init+0x68>)
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	4a0e      	ldr	r2, [pc, #56]	; (8001728 <HAL_Init+0x6c>)
 80016f0:	5cd3      	ldrb	r3, [r2, r3]
 80016f2:	f003 031f 	and.w	r3, r3, #31
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	fa22 f303 	lsr.w	r3, r2, r3
 80016fc:	4a0b      	ldr	r2, [pc, #44]	; (800172c <HAL_Init+0x70>)
 80016fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001700:	4a0b      	ldr	r2, [pc, #44]	; (8001730 <HAL_Init+0x74>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001706:	2000      	movs	r0, #0
 8001708:	f000 f814 	bl	8001734 <HAL_InitTick>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e002      	b.n	800171c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001716:	f7ff fc0f 	bl	8000f38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	58024400 	.word	0x58024400
 8001728:	08011fe8 	.word	0x08011fe8
 800172c:	24000004 	.word	0x24000004
 8001730:	24000000 	.word	0x24000000

08001734 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800173c:	4b15      	ldr	r3, [pc, #84]	; (8001794 <HAL_InitTick+0x60>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e021      	b.n	800178c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001748:	4b13      	ldr	r3, [pc, #76]	; (8001798 <HAL_InitTick+0x64>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4b11      	ldr	r3, [pc, #68]	; (8001794 <HAL_InitTick+0x60>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	4619      	mov	r1, r3
 8001752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001756:	fbb3 f3f1 	udiv	r3, r3, r1
 800175a:	fbb2 f3f3 	udiv	r3, r2, r3
 800175e:	4618      	mov	r0, r3
 8001760:	f000 f96f 	bl	8001a42 <HAL_SYSTICK_Config>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e00e      	b.n	800178c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b0f      	cmp	r3, #15
 8001772:	d80a      	bhi.n	800178a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001774:	2200      	movs	r2, #0
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	f04f 30ff 	mov.w	r0, #4294967295
 800177c:	f000 f939 	bl	80019f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001780:	4a06      	ldr	r2, [pc, #24]	; (800179c <HAL_InitTick+0x68>)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001786:	2300      	movs	r3, #0
 8001788:	e000      	b.n	800178c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
}
 800178c:	4618      	mov	r0, r3
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	2400000c 	.word	0x2400000c
 8001798:	24000000 	.word	0x24000000
 800179c:	24000008 	.word	0x24000008

080017a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <HAL_IncTick+0x20>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	461a      	mov	r2, r3
 80017aa:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <HAL_IncTick+0x24>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4413      	add	r3, r2
 80017b0:	4a04      	ldr	r2, [pc, #16]	; (80017c4 <HAL_IncTick+0x24>)
 80017b2:	6013      	str	r3, [r2, #0]
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	2400000c 	.word	0x2400000c
 80017c4:	24000648 	.word	0x24000648

080017c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  return uwTick;
 80017cc:	4b03      	ldr	r3, [pc, #12]	; (80017dc <HAL_GetTick+0x14>)
 80017ce:	681b      	ldr	r3, [r3, #0]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	24000648 	.word	0x24000648

080017e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017e8:	f7ff ffee 	bl	80017c8 <HAL_GetTick>
 80017ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017f8:	d005      	beq.n	8001806 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017fa:	4b09      	ldr	r3, [pc, #36]	; (8001820 <HAL_Delay+0x40>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	461a      	mov	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4413      	add	r3, r2
 8001804:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001806:	bf00      	nop
 8001808:	f7ff ffde 	bl	80017c8 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	429a      	cmp	r2, r3
 8001816:	d8f7      	bhi.n	8001808 <HAL_Delay+0x28>
  {
  }
}
 8001818:	bf00      	nop
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	2400000c 	.word	0x2400000c

08001824 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001828:	4b03      	ldr	r3, [pc, #12]	; (8001838 <HAL_GetREVID+0x14>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	0c1b      	lsrs	r3, r3, #16
}
 800182e:	4618      	mov	r0, r3
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	5c001000 	.word	0x5c001000

0800183c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800184c:	4b0b      	ldr	r3, [pc, #44]	; (800187c <__NVIC_SetPriorityGrouping+0x40>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001852:	68ba      	ldr	r2, [r7, #8]
 8001854:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001858:	4013      	ands	r3, r2
 800185a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <__NVIC_SetPriorityGrouping+0x44>)
 8001866:	4313      	orrs	r3, r2
 8001868:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800186a:	4a04      	ldr	r2, [pc, #16]	; (800187c <__NVIC_SetPriorityGrouping+0x40>)
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	60d3      	str	r3, [r2, #12]
}
 8001870:	bf00      	nop
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000ed00 	.word	0xe000ed00
 8001880:	05fa0000 	.word	0x05fa0000

08001884 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001888:	4b04      	ldr	r3, [pc, #16]	; (800189c <__NVIC_GetPriorityGrouping+0x18>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	0a1b      	lsrs	r3, r3, #8
 800188e:	f003 0307 	and.w	r3, r3, #7
}
 8001892:	4618      	mov	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	db0b      	blt.n	80018ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018b2:	88fb      	ldrh	r3, [r7, #6]
 80018b4:	f003 021f 	and.w	r2, r3, #31
 80018b8:	4907      	ldr	r1, [pc, #28]	; (80018d8 <__NVIC_EnableIRQ+0x38>)
 80018ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018be:	095b      	lsrs	r3, r3, #5
 80018c0:	2001      	movs	r0, #1
 80018c2:	fa00 f202 	lsl.w	r2, r0, r2
 80018c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	e000e100 	.word	0xe000e100

080018dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	6039      	str	r1, [r7, #0]
 80018e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	db0a      	blt.n	8001906 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	490c      	ldr	r1, [pc, #48]	; (8001928 <__NVIC_SetPriority+0x4c>)
 80018f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018fa:	0112      	lsls	r2, r2, #4
 80018fc:	b2d2      	uxtb	r2, r2
 80018fe:	440b      	add	r3, r1
 8001900:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001904:	e00a      	b.n	800191c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	b2da      	uxtb	r2, r3
 800190a:	4908      	ldr	r1, [pc, #32]	; (800192c <__NVIC_SetPriority+0x50>)
 800190c:	88fb      	ldrh	r3, [r7, #6]
 800190e:	f003 030f 	and.w	r3, r3, #15
 8001912:	3b04      	subs	r3, #4
 8001914:	0112      	lsls	r2, r2, #4
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	440b      	add	r3, r1
 800191a:	761a      	strb	r2, [r3, #24]
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	e000e100 	.word	0xe000e100
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001930:	b480      	push	{r7}
 8001932:	b089      	sub	sp, #36	; 0x24
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	f1c3 0307 	rsb	r3, r3, #7
 800194a:	2b04      	cmp	r3, #4
 800194c:	bf28      	it	cs
 800194e:	2304      	movcs	r3, #4
 8001950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	3304      	adds	r3, #4
 8001956:	2b06      	cmp	r3, #6
 8001958:	d902      	bls.n	8001960 <NVIC_EncodePriority+0x30>
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3b03      	subs	r3, #3
 800195e:	e000      	b.n	8001962 <NVIC_EncodePriority+0x32>
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001964:	f04f 32ff 	mov.w	r2, #4294967295
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43da      	mvns	r2, r3
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	401a      	ands	r2, r3
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001978:	f04f 31ff 	mov.w	r1, #4294967295
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	fa01 f303 	lsl.w	r3, r1, r3
 8001982:	43d9      	mvns	r1, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001988:	4313      	orrs	r3, r2
         );
}
 800198a:	4618      	mov	r0, r3
 800198c:	3724      	adds	r7, #36	; 0x24
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
	...

08001998 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019a8:	d301      	bcc.n	80019ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019aa:	2301      	movs	r3, #1
 80019ac:	e00f      	b.n	80019ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ae:	4a0a      	ldr	r2, [pc, #40]	; (80019d8 <SysTick_Config+0x40>)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3b01      	subs	r3, #1
 80019b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019b6:	210f      	movs	r1, #15
 80019b8:	f04f 30ff 	mov.w	r0, #4294967295
 80019bc:	f7ff ff8e 	bl	80018dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019c0:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <SysTick_Config+0x40>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019c6:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <SysTick_Config+0x40>)
 80019c8:	2207      	movs	r2, #7
 80019ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	e000e010 	.word	0xe000e010

080019dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f7ff ff29 	bl	800183c <__NVIC_SetPriorityGrouping>
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b086      	sub	sp, #24
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	4603      	mov	r3, r0
 80019fa:	60b9      	str	r1, [r7, #8]
 80019fc:	607a      	str	r2, [r7, #4]
 80019fe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a00:	f7ff ff40 	bl	8001884 <__NVIC_GetPriorityGrouping>
 8001a04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	68b9      	ldr	r1, [r7, #8]
 8001a0a:	6978      	ldr	r0, [r7, #20]
 8001a0c:	f7ff ff90 	bl	8001930 <NVIC_EncodePriority>
 8001a10:	4602      	mov	r2, r0
 8001a12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a16:	4611      	mov	r1, r2
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ff5f 	bl	80018dc <__NVIC_SetPriority>
}
 8001a1e:	bf00      	nop
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff33 	bl	80018a0 <__NVIC_EnableIRQ>
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff ffa4 	bl	8001998 <SysTick_Config>
 8001a50:	4603      	mov	r3, r0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
	...

08001a5c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001a64:	f7ff feb0 	bl	80017c8 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e316      	b.n	80020a2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a66      	ldr	r2, [pc, #408]	; (8001c14 <HAL_DMA_Init+0x1b8>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d04a      	beq.n	8001b14 <HAL_DMA_Init+0xb8>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a65      	ldr	r2, [pc, #404]	; (8001c18 <HAL_DMA_Init+0x1bc>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d045      	beq.n	8001b14 <HAL_DMA_Init+0xb8>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a63      	ldr	r2, [pc, #396]	; (8001c1c <HAL_DMA_Init+0x1c0>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d040      	beq.n	8001b14 <HAL_DMA_Init+0xb8>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a62      	ldr	r2, [pc, #392]	; (8001c20 <HAL_DMA_Init+0x1c4>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d03b      	beq.n	8001b14 <HAL_DMA_Init+0xb8>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a60      	ldr	r2, [pc, #384]	; (8001c24 <HAL_DMA_Init+0x1c8>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d036      	beq.n	8001b14 <HAL_DMA_Init+0xb8>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a5f      	ldr	r2, [pc, #380]	; (8001c28 <HAL_DMA_Init+0x1cc>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d031      	beq.n	8001b14 <HAL_DMA_Init+0xb8>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a5d      	ldr	r2, [pc, #372]	; (8001c2c <HAL_DMA_Init+0x1d0>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d02c      	beq.n	8001b14 <HAL_DMA_Init+0xb8>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a5c      	ldr	r2, [pc, #368]	; (8001c30 <HAL_DMA_Init+0x1d4>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d027      	beq.n	8001b14 <HAL_DMA_Init+0xb8>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a5a      	ldr	r2, [pc, #360]	; (8001c34 <HAL_DMA_Init+0x1d8>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d022      	beq.n	8001b14 <HAL_DMA_Init+0xb8>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a59      	ldr	r2, [pc, #356]	; (8001c38 <HAL_DMA_Init+0x1dc>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d01d      	beq.n	8001b14 <HAL_DMA_Init+0xb8>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a57      	ldr	r2, [pc, #348]	; (8001c3c <HAL_DMA_Init+0x1e0>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d018      	beq.n	8001b14 <HAL_DMA_Init+0xb8>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a56      	ldr	r2, [pc, #344]	; (8001c40 <HAL_DMA_Init+0x1e4>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d013      	beq.n	8001b14 <HAL_DMA_Init+0xb8>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a54      	ldr	r2, [pc, #336]	; (8001c44 <HAL_DMA_Init+0x1e8>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d00e      	beq.n	8001b14 <HAL_DMA_Init+0xb8>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a53      	ldr	r2, [pc, #332]	; (8001c48 <HAL_DMA_Init+0x1ec>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d009      	beq.n	8001b14 <HAL_DMA_Init+0xb8>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a51      	ldr	r2, [pc, #324]	; (8001c4c <HAL_DMA_Init+0x1f0>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d004      	beq.n	8001b14 <HAL_DMA_Init+0xb8>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a50      	ldr	r2, [pc, #320]	; (8001c50 <HAL_DMA_Init+0x1f4>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d101      	bne.n	8001b18 <HAL_DMA_Init+0xbc>
 8001b14:	2301      	movs	r3, #1
 8001b16:	e000      	b.n	8001b1a <HAL_DMA_Init+0xbe>
 8001b18:	2300      	movs	r3, #0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f000 813b 	beq.w	8001d96 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a37      	ldr	r2, [pc, #220]	; (8001c14 <HAL_DMA_Init+0x1b8>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d04a      	beq.n	8001bd0 <HAL_DMA_Init+0x174>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a36      	ldr	r2, [pc, #216]	; (8001c18 <HAL_DMA_Init+0x1bc>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d045      	beq.n	8001bd0 <HAL_DMA_Init+0x174>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a34      	ldr	r2, [pc, #208]	; (8001c1c <HAL_DMA_Init+0x1c0>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d040      	beq.n	8001bd0 <HAL_DMA_Init+0x174>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a33      	ldr	r2, [pc, #204]	; (8001c20 <HAL_DMA_Init+0x1c4>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d03b      	beq.n	8001bd0 <HAL_DMA_Init+0x174>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a31      	ldr	r2, [pc, #196]	; (8001c24 <HAL_DMA_Init+0x1c8>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d036      	beq.n	8001bd0 <HAL_DMA_Init+0x174>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a30      	ldr	r2, [pc, #192]	; (8001c28 <HAL_DMA_Init+0x1cc>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d031      	beq.n	8001bd0 <HAL_DMA_Init+0x174>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a2e      	ldr	r2, [pc, #184]	; (8001c2c <HAL_DMA_Init+0x1d0>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d02c      	beq.n	8001bd0 <HAL_DMA_Init+0x174>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a2d      	ldr	r2, [pc, #180]	; (8001c30 <HAL_DMA_Init+0x1d4>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d027      	beq.n	8001bd0 <HAL_DMA_Init+0x174>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a2b      	ldr	r2, [pc, #172]	; (8001c34 <HAL_DMA_Init+0x1d8>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d022      	beq.n	8001bd0 <HAL_DMA_Init+0x174>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a2a      	ldr	r2, [pc, #168]	; (8001c38 <HAL_DMA_Init+0x1dc>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d01d      	beq.n	8001bd0 <HAL_DMA_Init+0x174>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a28      	ldr	r2, [pc, #160]	; (8001c3c <HAL_DMA_Init+0x1e0>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d018      	beq.n	8001bd0 <HAL_DMA_Init+0x174>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a27      	ldr	r2, [pc, #156]	; (8001c40 <HAL_DMA_Init+0x1e4>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d013      	beq.n	8001bd0 <HAL_DMA_Init+0x174>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a25      	ldr	r2, [pc, #148]	; (8001c44 <HAL_DMA_Init+0x1e8>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d00e      	beq.n	8001bd0 <HAL_DMA_Init+0x174>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a24      	ldr	r2, [pc, #144]	; (8001c48 <HAL_DMA_Init+0x1ec>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d009      	beq.n	8001bd0 <HAL_DMA_Init+0x174>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a22      	ldr	r2, [pc, #136]	; (8001c4c <HAL_DMA_Init+0x1f0>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d004      	beq.n	8001bd0 <HAL_DMA_Init+0x174>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a21      	ldr	r2, [pc, #132]	; (8001c50 <HAL_DMA_Init+0x1f4>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d108      	bne.n	8001be2 <HAL_DMA_Init+0x186>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f022 0201 	bic.w	r2, r2, #1
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	e007      	b.n	8001bf2 <HAL_DMA_Init+0x196>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 0201 	bic.w	r2, r2, #1
 8001bf0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001bf2:	e02f      	b.n	8001c54 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bf4:	f7ff fde8 	bl	80017c8 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b05      	cmp	r3, #5
 8001c00:	d928      	bls.n	8001c54 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2220      	movs	r2, #32
 8001c06:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2203      	movs	r2, #3
 8001c0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e246      	b.n	80020a2 <HAL_DMA_Init+0x646>
 8001c14:	40020010 	.word	0x40020010
 8001c18:	40020028 	.word	0x40020028
 8001c1c:	40020040 	.word	0x40020040
 8001c20:	40020058 	.word	0x40020058
 8001c24:	40020070 	.word	0x40020070
 8001c28:	40020088 	.word	0x40020088
 8001c2c:	400200a0 	.word	0x400200a0
 8001c30:	400200b8 	.word	0x400200b8
 8001c34:	40020410 	.word	0x40020410
 8001c38:	40020428 	.word	0x40020428
 8001c3c:	40020440 	.word	0x40020440
 8001c40:	40020458 	.word	0x40020458
 8001c44:	40020470 	.word	0x40020470
 8001c48:	40020488 	.word	0x40020488
 8001c4c:	400204a0 	.word	0x400204a0
 8001c50:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1c8      	bne.n	8001bf4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	4b83      	ldr	r3, [pc, #524]	; (8001e7c <HAL_DMA_Init+0x420>)
 8001c6e:	4013      	ands	r3, r2
 8001c70:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001c7a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c86:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c92:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca4:	2b04      	cmp	r3, #4
 8001ca6:	d107      	bne.n	8001cb8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001cb8:	4b71      	ldr	r3, [pc, #452]	; (8001e80 <HAL_DMA_Init+0x424>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	4b71      	ldr	r3, [pc, #452]	; (8001e84 <HAL_DMA_Init+0x428>)
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cc4:	d328      	bcc.n	8001d18 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b28      	cmp	r3, #40	; 0x28
 8001ccc:	d903      	bls.n	8001cd6 <HAL_DMA_Init+0x27a>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b2e      	cmp	r3, #46	; 0x2e
 8001cd4:	d917      	bls.n	8001d06 <HAL_DMA_Init+0x2aa>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2b3e      	cmp	r3, #62	; 0x3e
 8001cdc:	d903      	bls.n	8001ce6 <HAL_DMA_Init+0x28a>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b42      	cmp	r3, #66	; 0x42
 8001ce4:	d90f      	bls.n	8001d06 <HAL_DMA_Init+0x2aa>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b46      	cmp	r3, #70	; 0x46
 8001cec:	d903      	bls.n	8001cf6 <HAL_DMA_Init+0x29a>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b48      	cmp	r3, #72	; 0x48
 8001cf4:	d907      	bls.n	8001d06 <HAL_DMA_Init+0x2aa>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b4e      	cmp	r3, #78	; 0x4e
 8001cfc:	d905      	bls.n	8001d0a <HAL_DMA_Init+0x2ae>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b52      	cmp	r3, #82	; 0x52
 8001d04:	d801      	bhi.n	8001d0a <HAL_DMA_Init+0x2ae>
 8001d06:	2301      	movs	r3, #1
 8001d08:	e000      	b.n	8001d0c <HAL_DMA_Init+0x2b0>
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d003      	beq.n	8001d18 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d16:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	f023 0307 	bic.w	r3, r3, #7
 8001d2e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d34:	697a      	ldr	r2, [r7, #20]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3e:	2b04      	cmp	r3, #4
 8001d40:	d117      	bne.n	8001d72 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00e      	beq.n	8001d72 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f001 f9b9 	bl	80030cc <DMA_CheckFifoParam>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d008      	beq.n	8001d72 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2240      	movs	r2, #64	; 0x40
 8001d64:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e197      	b.n	80020a2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f001 f8f4 	bl	8002f68 <DMA_CalcBaseAndBitshift>
 8001d80:	4603      	mov	r3, r0
 8001d82:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d88:	f003 031f 	and.w	r3, r3, #31
 8001d8c:	223f      	movs	r2, #63	; 0x3f
 8001d8e:	409a      	lsls	r2, r3
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	e0cd      	b.n	8001f32 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a3b      	ldr	r2, [pc, #236]	; (8001e88 <HAL_DMA_Init+0x42c>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d022      	beq.n	8001de6 <HAL_DMA_Init+0x38a>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a39      	ldr	r2, [pc, #228]	; (8001e8c <HAL_DMA_Init+0x430>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d01d      	beq.n	8001de6 <HAL_DMA_Init+0x38a>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a38      	ldr	r2, [pc, #224]	; (8001e90 <HAL_DMA_Init+0x434>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d018      	beq.n	8001de6 <HAL_DMA_Init+0x38a>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a36      	ldr	r2, [pc, #216]	; (8001e94 <HAL_DMA_Init+0x438>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d013      	beq.n	8001de6 <HAL_DMA_Init+0x38a>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a35      	ldr	r2, [pc, #212]	; (8001e98 <HAL_DMA_Init+0x43c>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d00e      	beq.n	8001de6 <HAL_DMA_Init+0x38a>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a33      	ldr	r2, [pc, #204]	; (8001e9c <HAL_DMA_Init+0x440>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d009      	beq.n	8001de6 <HAL_DMA_Init+0x38a>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a32      	ldr	r2, [pc, #200]	; (8001ea0 <HAL_DMA_Init+0x444>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d004      	beq.n	8001de6 <HAL_DMA_Init+0x38a>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a30      	ldr	r2, [pc, #192]	; (8001ea4 <HAL_DMA_Init+0x448>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d101      	bne.n	8001dea <HAL_DMA_Init+0x38e>
 8001de6:	2301      	movs	r3, #1
 8001de8:	e000      	b.n	8001dec <HAL_DMA_Init+0x390>
 8001dea:	2300      	movs	r3, #0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 8097 	beq.w	8001f20 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a24      	ldr	r2, [pc, #144]	; (8001e88 <HAL_DMA_Init+0x42c>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d021      	beq.n	8001e40 <HAL_DMA_Init+0x3e4>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a22      	ldr	r2, [pc, #136]	; (8001e8c <HAL_DMA_Init+0x430>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d01c      	beq.n	8001e40 <HAL_DMA_Init+0x3e4>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a21      	ldr	r2, [pc, #132]	; (8001e90 <HAL_DMA_Init+0x434>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d017      	beq.n	8001e40 <HAL_DMA_Init+0x3e4>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a1f      	ldr	r2, [pc, #124]	; (8001e94 <HAL_DMA_Init+0x438>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d012      	beq.n	8001e40 <HAL_DMA_Init+0x3e4>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a1e      	ldr	r2, [pc, #120]	; (8001e98 <HAL_DMA_Init+0x43c>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d00d      	beq.n	8001e40 <HAL_DMA_Init+0x3e4>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a1c      	ldr	r2, [pc, #112]	; (8001e9c <HAL_DMA_Init+0x440>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d008      	beq.n	8001e40 <HAL_DMA_Init+0x3e4>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a1b      	ldr	r2, [pc, #108]	; (8001ea0 <HAL_DMA_Init+0x444>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d003      	beq.n	8001e40 <HAL_DMA_Init+0x3e4>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a19      	ldr	r2, [pc, #100]	; (8001ea4 <HAL_DMA_Init+0x448>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <HAL_DMA_Init+0x44c>)
 8001e5e:	4013      	ands	r3, r2
 8001e60:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	2b40      	cmp	r3, #64	; 0x40
 8001e68:	d020      	beq.n	8001eac <HAL_DMA_Init+0x450>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	2b80      	cmp	r3, #128	; 0x80
 8001e70:	d102      	bne.n	8001e78 <HAL_DMA_Init+0x41c>
 8001e72:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e76:	e01a      	b.n	8001eae <HAL_DMA_Init+0x452>
 8001e78:	2300      	movs	r3, #0
 8001e7a:	e018      	b.n	8001eae <HAL_DMA_Init+0x452>
 8001e7c:	fe10803f 	.word	0xfe10803f
 8001e80:	5c001000 	.word	0x5c001000
 8001e84:	ffff0000 	.word	0xffff0000
 8001e88:	58025408 	.word	0x58025408
 8001e8c:	5802541c 	.word	0x5802541c
 8001e90:	58025430 	.word	0x58025430
 8001e94:	58025444 	.word	0x58025444
 8001e98:	58025458 	.word	0x58025458
 8001e9c:	5802546c 	.word	0x5802546c
 8001ea0:	58025480 	.word	0x58025480
 8001ea4:	58025494 	.word	0x58025494
 8001ea8:	fffe000f 	.word	0xfffe000f
 8001eac:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	68d2      	ldr	r2, [r2, #12]
 8001eb2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001eb4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001ebc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001ec4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001ecc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001ed4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001edc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4b6e      	ldr	r3, [pc, #440]	; (80020ac <HAL_DMA_Init+0x650>)
 8001ef4:	4413      	add	r3, r2
 8001ef6:	4a6e      	ldr	r2, [pc, #440]	; (80020b0 <HAL_DMA_Init+0x654>)
 8001ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8001efc:	091b      	lsrs	r3, r3, #4
 8001efe:	009a      	lsls	r2, r3, #2
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f001 f82f 	bl	8002f68 <DMA_CalcBaseAndBitshift>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f12:	f003 031f 	and.w	r3, r3, #31
 8001f16:	2201      	movs	r2, #1
 8001f18:	409a      	lsls	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	e008      	b.n	8001f32 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2240      	movs	r2, #64	; 0x40
 8001f24:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2203      	movs	r2, #3
 8001f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e0b7      	b.n	80020a2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a5f      	ldr	r2, [pc, #380]	; (80020b4 <HAL_DMA_Init+0x658>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d072      	beq.n	8002022 <HAL_DMA_Init+0x5c6>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a5d      	ldr	r2, [pc, #372]	; (80020b8 <HAL_DMA_Init+0x65c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d06d      	beq.n	8002022 <HAL_DMA_Init+0x5c6>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a5c      	ldr	r2, [pc, #368]	; (80020bc <HAL_DMA_Init+0x660>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d068      	beq.n	8002022 <HAL_DMA_Init+0x5c6>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a5a      	ldr	r2, [pc, #360]	; (80020c0 <HAL_DMA_Init+0x664>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d063      	beq.n	8002022 <HAL_DMA_Init+0x5c6>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a59      	ldr	r2, [pc, #356]	; (80020c4 <HAL_DMA_Init+0x668>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d05e      	beq.n	8002022 <HAL_DMA_Init+0x5c6>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a57      	ldr	r2, [pc, #348]	; (80020c8 <HAL_DMA_Init+0x66c>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d059      	beq.n	8002022 <HAL_DMA_Init+0x5c6>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a56      	ldr	r2, [pc, #344]	; (80020cc <HAL_DMA_Init+0x670>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d054      	beq.n	8002022 <HAL_DMA_Init+0x5c6>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a54      	ldr	r2, [pc, #336]	; (80020d0 <HAL_DMA_Init+0x674>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d04f      	beq.n	8002022 <HAL_DMA_Init+0x5c6>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a53      	ldr	r2, [pc, #332]	; (80020d4 <HAL_DMA_Init+0x678>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d04a      	beq.n	8002022 <HAL_DMA_Init+0x5c6>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a51      	ldr	r2, [pc, #324]	; (80020d8 <HAL_DMA_Init+0x67c>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d045      	beq.n	8002022 <HAL_DMA_Init+0x5c6>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a50      	ldr	r2, [pc, #320]	; (80020dc <HAL_DMA_Init+0x680>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d040      	beq.n	8002022 <HAL_DMA_Init+0x5c6>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a4e      	ldr	r2, [pc, #312]	; (80020e0 <HAL_DMA_Init+0x684>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d03b      	beq.n	8002022 <HAL_DMA_Init+0x5c6>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a4d      	ldr	r2, [pc, #308]	; (80020e4 <HAL_DMA_Init+0x688>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d036      	beq.n	8002022 <HAL_DMA_Init+0x5c6>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a4b      	ldr	r2, [pc, #300]	; (80020e8 <HAL_DMA_Init+0x68c>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d031      	beq.n	8002022 <HAL_DMA_Init+0x5c6>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a4a      	ldr	r2, [pc, #296]	; (80020ec <HAL_DMA_Init+0x690>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d02c      	beq.n	8002022 <HAL_DMA_Init+0x5c6>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a48      	ldr	r2, [pc, #288]	; (80020f0 <HAL_DMA_Init+0x694>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d027      	beq.n	8002022 <HAL_DMA_Init+0x5c6>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a47      	ldr	r2, [pc, #284]	; (80020f4 <HAL_DMA_Init+0x698>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d022      	beq.n	8002022 <HAL_DMA_Init+0x5c6>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a45      	ldr	r2, [pc, #276]	; (80020f8 <HAL_DMA_Init+0x69c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d01d      	beq.n	8002022 <HAL_DMA_Init+0x5c6>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a44      	ldr	r2, [pc, #272]	; (80020fc <HAL_DMA_Init+0x6a0>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d018      	beq.n	8002022 <HAL_DMA_Init+0x5c6>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a42      	ldr	r2, [pc, #264]	; (8002100 <HAL_DMA_Init+0x6a4>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d013      	beq.n	8002022 <HAL_DMA_Init+0x5c6>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a41      	ldr	r2, [pc, #260]	; (8002104 <HAL_DMA_Init+0x6a8>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d00e      	beq.n	8002022 <HAL_DMA_Init+0x5c6>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a3f      	ldr	r2, [pc, #252]	; (8002108 <HAL_DMA_Init+0x6ac>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d009      	beq.n	8002022 <HAL_DMA_Init+0x5c6>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a3e      	ldr	r2, [pc, #248]	; (800210c <HAL_DMA_Init+0x6b0>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d004      	beq.n	8002022 <HAL_DMA_Init+0x5c6>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a3c      	ldr	r2, [pc, #240]	; (8002110 <HAL_DMA_Init+0x6b4>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d101      	bne.n	8002026 <HAL_DMA_Init+0x5ca>
 8002022:	2301      	movs	r3, #1
 8002024:	e000      	b.n	8002028 <HAL_DMA_Init+0x5cc>
 8002026:	2300      	movs	r3, #0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d032      	beq.n	8002092 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f001 f8c9 	bl	80031c4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	2b80      	cmp	r3, #128	; 0x80
 8002038:	d102      	bne.n	8002040 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002054:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d010      	beq.n	8002080 <HAL_DMA_Init+0x624>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b08      	cmp	r3, #8
 8002064:	d80c      	bhi.n	8002080 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f001 f946 	bl	80032f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	e008      	b.n	8002092 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	a7fdabf8 	.word	0xa7fdabf8
 80020b0:	cccccccd 	.word	0xcccccccd
 80020b4:	40020010 	.word	0x40020010
 80020b8:	40020028 	.word	0x40020028
 80020bc:	40020040 	.word	0x40020040
 80020c0:	40020058 	.word	0x40020058
 80020c4:	40020070 	.word	0x40020070
 80020c8:	40020088 	.word	0x40020088
 80020cc:	400200a0 	.word	0x400200a0
 80020d0:	400200b8 	.word	0x400200b8
 80020d4:	40020410 	.word	0x40020410
 80020d8:	40020428 	.word	0x40020428
 80020dc:	40020440 	.word	0x40020440
 80020e0:	40020458 	.word	0x40020458
 80020e4:	40020470 	.word	0x40020470
 80020e8:	40020488 	.word	0x40020488
 80020ec:	400204a0 	.word	0x400204a0
 80020f0:	400204b8 	.word	0x400204b8
 80020f4:	58025408 	.word	0x58025408
 80020f8:	5802541c 	.word	0x5802541c
 80020fc:	58025430 	.word	0x58025430
 8002100:	58025444 	.word	0x58025444
 8002104:	58025458 	.word	0x58025458
 8002108:	5802546c 	.word	0x5802546c
 800210c:	58025480 	.word	0x58025480
 8002110:	58025494 	.word	0x58025494

08002114 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b08a      	sub	sp, #40	; 0x28
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800211c:	2300      	movs	r3, #0
 800211e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002120:	4b67      	ldr	r3, [pc, #412]	; (80022c0 <HAL_DMA_IRQHandler+0x1ac>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a67      	ldr	r2, [pc, #412]	; (80022c4 <HAL_DMA_IRQHandler+0x1b0>)
 8002126:	fba2 2303 	umull	r2, r3, r2, r3
 800212a:	0a9b      	lsrs	r3, r3, #10
 800212c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002132:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002138:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800213a:	6a3b      	ldr	r3, [r7, #32]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a5f      	ldr	r2, [pc, #380]	; (80022c8 <HAL_DMA_IRQHandler+0x1b4>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d04a      	beq.n	80021e6 <HAL_DMA_IRQHandler+0xd2>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a5d      	ldr	r2, [pc, #372]	; (80022cc <HAL_DMA_IRQHandler+0x1b8>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d045      	beq.n	80021e6 <HAL_DMA_IRQHandler+0xd2>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a5c      	ldr	r2, [pc, #368]	; (80022d0 <HAL_DMA_IRQHandler+0x1bc>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d040      	beq.n	80021e6 <HAL_DMA_IRQHandler+0xd2>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a5a      	ldr	r2, [pc, #360]	; (80022d4 <HAL_DMA_IRQHandler+0x1c0>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d03b      	beq.n	80021e6 <HAL_DMA_IRQHandler+0xd2>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a59      	ldr	r2, [pc, #356]	; (80022d8 <HAL_DMA_IRQHandler+0x1c4>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d036      	beq.n	80021e6 <HAL_DMA_IRQHandler+0xd2>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a57      	ldr	r2, [pc, #348]	; (80022dc <HAL_DMA_IRQHandler+0x1c8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d031      	beq.n	80021e6 <HAL_DMA_IRQHandler+0xd2>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a56      	ldr	r2, [pc, #344]	; (80022e0 <HAL_DMA_IRQHandler+0x1cc>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d02c      	beq.n	80021e6 <HAL_DMA_IRQHandler+0xd2>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a54      	ldr	r2, [pc, #336]	; (80022e4 <HAL_DMA_IRQHandler+0x1d0>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d027      	beq.n	80021e6 <HAL_DMA_IRQHandler+0xd2>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a53      	ldr	r2, [pc, #332]	; (80022e8 <HAL_DMA_IRQHandler+0x1d4>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d022      	beq.n	80021e6 <HAL_DMA_IRQHandler+0xd2>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a51      	ldr	r2, [pc, #324]	; (80022ec <HAL_DMA_IRQHandler+0x1d8>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d01d      	beq.n	80021e6 <HAL_DMA_IRQHandler+0xd2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a50      	ldr	r2, [pc, #320]	; (80022f0 <HAL_DMA_IRQHandler+0x1dc>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d018      	beq.n	80021e6 <HAL_DMA_IRQHandler+0xd2>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a4e      	ldr	r2, [pc, #312]	; (80022f4 <HAL_DMA_IRQHandler+0x1e0>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d013      	beq.n	80021e6 <HAL_DMA_IRQHandler+0xd2>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a4d      	ldr	r2, [pc, #308]	; (80022f8 <HAL_DMA_IRQHandler+0x1e4>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d00e      	beq.n	80021e6 <HAL_DMA_IRQHandler+0xd2>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a4b      	ldr	r2, [pc, #300]	; (80022fc <HAL_DMA_IRQHandler+0x1e8>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d009      	beq.n	80021e6 <HAL_DMA_IRQHandler+0xd2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a4a      	ldr	r2, [pc, #296]	; (8002300 <HAL_DMA_IRQHandler+0x1ec>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d004      	beq.n	80021e6 <HAL_DMA_IRQHandler+0xd2>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a48      	ldr	r2, [pc, #288]	; (8002304 <HAL_DMA_IRQHandler+0x1f0>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d101      	bne.n	80021ea <HAL_DMA_IRQHandler+0xd6>
 80021e6:	2301      	movs	r3, #1
 80021e8:	e000      	b.n	80021ec <HAL_DMA_IRQHandler+0xd8>
 80021ea:	2300      	movs	r3, #0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 842b 	beq.w	8002a48 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f6:	f003 031f 	and.w	r3, r3, #31
 80021fa:	2208      	movs	r2, #8
 80021fc:	409a      	lsls	r2, r3
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 80a2 	beq.w	800234c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a2e      	ldr	r2, [pc, #184]	; (80022c8 <HAL_DMA_IRQHandler+0x1b4>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d04a      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x194>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a2d      	ldr	r2, [pc, #180]	; (80022cc <HAL_DMA_IRQHandler+0x1b8>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d045      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x194>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a2b      	ldr	r2, [pc, #172]	; (80022d0 <HAL_DMA_IRQHandler+0x1bc>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d040      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x194>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a2a      	ldr	r2, [pc, #168]	; (80022d4 <HAL_DMA_IRQHandler+0x1c0>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d03b      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x194>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a28      	ldr	r2, [pc, #160]	; (80022d8 <HAL_DMA_IRQHandler+0x1c4>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d036      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x194>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a27      	ldr	r2, [pc, #156]	; (80022dc <HAL_DMA_IRQHandler+0x1c8>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d031      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x194>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a25      	ldr	r2, [pc, #148]	; (80022e0 <HAL_DMA_IRQHandler+0x1cc>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d02c      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x194>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a24      	ldr	r2, [pc, #144]	; (80022e4 <HAL_DMA_IRQHandler+0x1d0>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d027      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x194>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a22      	ldr	r2, [pc, #136]	; (80022e8 <HAL_DMA_IRQHandler+0x1d4>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d022      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x194>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a21      	ldr	r2, [pc, #132]	; (80022ec <HAL_DMA_IRQHandler+0x1d8>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d01d      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x194>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a1f      	ldr	r2, [pc, #124]	; (80022f0 <HAL_DMA_IRQHandler+0x1dc>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d018      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x194>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a1e      	ldr	r2, [pc, #120]	; (80022f4 <HAL_DMA_IRQHandler+0x1e0>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d013      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x194>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a1c      	ldr	r2, [pc, #112]	; (80022f8 <HAL_DMA_IRQHandler+0x1e4>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d00e      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x194>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a1b      	ldr	r2, [pc, #108]	; (80022fc <HAL_DMA_IRQHandler+0x1e8>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d009      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x194>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a19      	ldr	r2, [pc, #100]	; (8002300 <HAL_DMA_IRQHandler+0x1ec>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d004      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x194>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a18      	ldr	r2, [pc, #96]	; (8002304 <HAL_DMA_IRQHandler+0x1f0>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d12f      	bne.n	8002308 <HAL_DMA_IRQHandler+0x1f4>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0304 	and.w	r3, r3, #4
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	bf14      	ite	ne
 80022b6:	2301      	movne	r3, #1
 80022b8:	2300      	moveq	r3, #0
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	e02e      	b.n	800231c <HAL_DMA_IRQHandler+0x208>
 80022be:	bf00      	nop
 80022c0:	24000000 	.word	0x24000000
 80022c4:	1b4e81b5 	.word	0x1b4e81b5
 80022c8:	40020010 	.word	0x40020010
 80022cc:	40020028 	.word	0x40020028
 80022d0:	40020040 	.word	0x40020040
 80022d4:	40020058 	.word	0x40020058
 80022d8:	40020070 	.word	0x40020070
 80022dc:	40020088 	.word	0x40020088
 80022e0:	400200a0 	.word	0x400200a0
 80022e4:	400200b8 	.word	0x400200b8
 80022e8:	40020410 	.word	0x40020410
 80022ec:	40020428 	.word	0x40020428
 80022f0:	40020440 	.word	0x40020440
 80022f4:	40020458 	.word	0x40020458
 80022f8:	40020470 	.word	0x40020470
 80022fc:	40020488 	.word	0x40020488
 8002300:	400204a0 	.word	0x400204a0
 8002304:	400204b8 	.word	0x400204b8
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0308 	and.w	r3, r3, #8
 8002312:	2b00      	cmp	r3, #0
 8002314:	bf14      	ite	ne
 8002316:	2301      	movne	r3, #1
 8002318:	2300      	moveq	r3, #0
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b00      	cmp	r3, #0
 800231e:	d015      	beq.n	800234c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 0204 	bic.w	r2, r2, #4
 800232e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002334:	f003 031f 	and.w	r3, r3, #31
 8002338:	2208      	movs	r2, #8
 800233a:	409a      	lsls	r2, r3
 800233c:	6a3b      	ldr	r3, [r7, #32]
 800233e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002344:	f043 0201 	orr.w	r2, r3, #1
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002350:	f003 031f 	and.w	r3, r3, #31
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	fa22 f303 	lsr.w	r3, r2, r3
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d06e      	beq.n	8002440 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a69      	ldr	r2, [pc, #420]	; (800250c <HAL_DMA_IRQHandler+0x3f8>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d04a      	beq.n	8002402 <HAL_DMA_IRQHandler+0x2ee>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a67      	ldr	r2, [pc, #412]	; (8002510 <HAL_DMA_IRQHandler+0x3fc>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d045      	beq.n	8002402 <HAL_DMA_IRQHandler+0x2ee>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a66      	ldr	r2, [pc, #408]	; (8002514 <HAL_DMA_IRQHandler+0x400>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d040      	beq.n	8002402 <HAL_DMA_IRQHandler+0x2ee>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a64      	ldr	r2, [pc, #400]	; (8002518 <HAL_DMA_IRQHandler+0x404>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d03b      	beq.n	8002402 <HAL_DMA_IRQHandler+0x2ee>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a63      	ldr	r2, [pc, #396]	; (800251c <HAL_DMA_IRQHandler+0x408>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d036      	beq.n	8002402 <HAL_DMA_IRQHandler+0x2ee>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a61      	ldr	r2, [pc, #388]	; (8002520 <HAL_DMA_IRQHandler+0x40c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d031      	beq.n	8002402 <HAL_DMA_IRQHandler+0x2ee>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a60      	ldr	r2, [pc, #384]	; (8002524 <HAL_DMA_IRQHandler+0x410>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d02c      	beq.n	8002402 <HAL_DMA_IRQHandler+0x2ee>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a5e      	ldr	r2, [pc, #376]	; (8002528 <HAL_DMA_IRQHandler+0x414>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d027      	beq.n	8002402 <HAL_DMA_IRQHandler+0x2ee>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a5d      	ldr	r2, [pc, #372]	; (800252c <HAL_DMA_IRQHandler+0x418>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d022      	beq.n	8002402 <HAL_DMA_IRQHandler+0x2ee>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a5b      	ldr	r2, [pc, #364]	; (8002530 <HAL_DMA_IRQHandler+0x41c>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d01d      	beq.n	8002402 <HAL_DMA_IRQHandler+0x2ee>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a5a      	ldr	r2, [pc, #360]	; (8002534 <HAL_DMA_IRQHandler+0x420>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d018      	beq.n	8002402 <HAL_DMA_IRQHandler+0x2ee>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a58      	ldr	r2, [pc, #352]	; (8002538 <HAL_DMA_IRQHandler+0x424>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d013      	beq.n	8002402 <HAL_DMA_IRQHandler+0x2ee>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a57      	ldr	r2, [pc, #348]	; (800253c <HAL_DMA_IRQHandler+0x428>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d00e      	beq.n	8002402 <HAL_DMA_IRQHandler+0x2ee>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a55      	ldr	r2, [pc, #340]	; (8002540 <HAL_DMA_IRQHandler+0x42c>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d009      	beq.n	8002402 <HAL_DMA_IRQHandler+0x2ee>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a54      	ldr	r2, [pc, #336]	; (8002544 <HAL_DMA_IRQHandler+0x430>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d004      	beq.n	8002402 <HAL_DMA_IRQHandler+0x2ee>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a52      	ldr	r2, [pc, #328]	; (8002548 <HAL_DMA_IRQHandler+0x434>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d10a      	bne.n	8002418 <HAL_DMA_IRQHandler+0x304>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800240c:	2b00      	cmp	r3, #0
 800240e:	bf14      	ite	ne
 8002410:	2301      	movne	r3, #1
 8002412:	2300      	moveq	r3, #0
 8002414:	b2db      	uxtb	r3, r3
 8002416:	e003      	b.n	8002420 <HAL_DMA_IRQHandler+0x30c>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2300      	movs	r3, #0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00d      	beq.n	8002440 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002428:	f003 031f 	and.w	r3, r3, #31
 800242c:	2201      	movs	r2, #1
 800242e:	409a      	lsls	r2, r3
 8002430:	6a3b      	ldr	r3, [r7, #32]
 8002432:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002438:	f043 0202 	orr.w	r2, r3, #2
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002444:	f003 031f 	and.w	r3, r3, #31
 8002448:	2204      	movs	r2, #4
 800244a:	409a      	lsls	r2, r3
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	4013      	ands	r3, r2
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 808f 	beq.w	8002574 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a2c      	ldr	r2, [pc, #176]	; (800250c <HAL_DMA_IRQHandler+0x3f8>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d04a      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x3e2>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a2a      	ldr	r2, [pc, #168]	; (8002510 <HAL_DMA_IRQHandler+0x3fc>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d045      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x3e2>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a29      	ldr	r2, [pc, #164]	; (8002514 <HAL_DMA_IRQHandler+0x400>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d040      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x3e2>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a27      	ldr	r2, [pc, #156]	; (8002518 <HAL_DMA_IRQHandler+0x404>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d03b      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x3e2>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a26      	ldr	r2, [pc, #152]	; (800251c <HAL_DMA_IRQHandler+0x408>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d036      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x3e2>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a24      	ldr	r2, [pc, #144]	; (8002520 <HAL_DMA_IRQHandler+0x40c>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d031      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x3e2>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a23      	ldr	r2, [pc, #140]	; (8002524 <HAL_DMA_IRQHandler+0x410>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d02c      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x3e2>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a21      	ldr	r2, [pc, #132]	; (8002528 <HAL_DMA_IRQHandler+0x414>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d027      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x3e2>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a20      	ldr	r2, [pc, #128]	; (800252c <HAL_DMA_IRQHandler+0x418>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d022      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x3e2>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a1e      	ldr	r2, [pc, #120]	; (8002530 <HAL_DMA_IRQHandler+0x41c>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d01d      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x3e2>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a1d      	ldr	r2, [pc, #116]	; (8002534 <HAL_DMA_IRQHandler+0x420>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d018      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x3e2>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a1b      	ldr	r2, [pc, #108]	; (8002538 <HAL_DMA_IRQHandler+0x424>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d013      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x3e2>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a1a      	ldr	r2, [pc, #104]	; (800253c <HAL_DMA_IRQHandler+0x428>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d00e      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x3e2>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a18      	ldr	r2, [pc, #96]	; (8002540 <HAL_DMA_IRQHandler+0x42c>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d009      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x3e2>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a17      	ldr	r2, [pc, #92]	; (8002544 <HAL_DMA_IRQHandler+0x430>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d004      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x3e2>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a15      	ldr	r2, [pc, #84]	; (8002548 <HAL_DMA_IRQHandler+0x434>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d12a      	bne.n	800254c <HAL_DMA_IRQHandler+0x438>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	bf14      	ite	ne
 8002504:	2301      	movne	r3, #1
 8002506:	2300      	moveq	r3, #0
 8002508:	b2db      	uxtb	r3, r3
 800250a:	e023      	b.n	8002554 <HAL_DMA_IRQHandler+0x440>
 800250c:	40020010 	.word	0x40020010
 8002510:	40020028 	.word	0x40020028
 8002514:	40020040 	.word	0x40020040
 8002518:	40020058 	.word	0x40020058
 800251c:	40020070 	.word	0x40020070
 8002520:	40020088 	.word	0x40020088
 8002524:	400200a0 	.word	0x400200a0
 8002528:	400200b8 	.word	0x400200b8
 800252c:	40020410 	.word	0x40020410
 8002530:	40020428 	.word	0x40020428
 8002534:	40020440 	.word	0x40020440
 8002538:	40020458 	.word	0x40020458
 800253c:	40020470 	.word	0x40020470
 8002540:	40020488 	.word	0x40020488
 8002544:	400204a0 	.word	0x400204a0
 8002548:	400204b8 	.word	0x400204b8
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2300      	movs	r3, #0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00d      	beq.n	8002574 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800255c:	f003 031f 	and.w	r3, r3, #31
 8002560:	2204      	movs	r2, #4
 8002562:	409a      	lsls	r2, r3
 8002564:	6a3b      	ldr	r3, [r7, #32]
 8002566:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800256c:	f043 0204 	orr.w	r2, r3, #4
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002578:	f003 031f 	and.w	r3, r3, #31
 800257c:	2210      	movs	r2, #16
 800257e:	409a      	lsls	r2, r3
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	4013      	ands	r3, r2
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 80a6 	beq.w	80026d6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a85      	ldr	r2, [pc, #532]	; (80027a4 <HAL_DMA_IRQHandler+0x690>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d04a      	beq.n	800262a <HAL_DMA_IRQHandler+0x516>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a83      	ldr	r2, [pc, #524]	; (80027a8 <HAL_DMA_IRQHandler+0x694>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d045      	beq.n	800262a <HAL_DMA_IRQHandler+0x516>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a82      	ldr	r2, [pc, #520]	; (80027ac <HAL_DMA_IRQHandler+0x698>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d040      	beq.n	800262a <HAL_DMA_IRQHandler+0x516>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a80      	ldr	r2, [pc, #512]	; (80027b0 <HAL_DMA_IRQHandler+0x69c>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d03b      	beq.n	800262a <HAL_DMA_IRQHandler+0x516>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a7f      	ldr	r2, [pc, #508]	; (80027b4 <HAL_DMA_IRQHandler+0x6a0>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d036      	beq.n	800262a <HAL_DMA_IRQHandler+0x516>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a7d      	ldr	r2, [pc, #500]	; (80027b8 <HAL_DMA_IRQHandler+0x6a4>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d031      	beq.n	800262a <HAL_DMA_IRQHandler+0x516>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a7c      	ldr	r2, [pc, #496]	; (80027bc <HAL_DMA_IRQHandler+0x6a8>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d02c      	beq.n	800262a <HAL_DMA_IRQHandler+0x516>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a7a      	ldr	r2, [pc, #488]	; (80027c0 <HAL_DMA_IRQHandler+0x6ac>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d027      	beq.n	800262a <HAL_DMA_IRQHandler+0x516>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a79      	ldr	r2, [pc, #484]	; (80027c4 <HAL_DMA_IRQHandler+0x6b0>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d022      	beq.n	800262a <HAL_DMA_IRQHandler+0x516>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a77      	ldr	r2, [pc, #476]	; (80027c8 <HAL_DMA_IRQHandler+0x6b4>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d01d      	beq.n	800262a <HAL_DMA_IRQHandler+0x516>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a76      	ldr	r2, [pc, #472]	; (80027cc <HAL_DMA_IRQHandler+0x6b8>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d018      	beq.n	800262a <HAL_DMA_IRQHandler+0x516>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a74      	ldr	r2, [pc, #464]	; (80027d0 <HAL_DMA_IRQHandler+0x6bc>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d013      	beq.n	800262a <HAL_DMA_IRQHandler+0x516>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a73      	ldr	r2, [pc, #460]	; (80027d4 <HAL_DMA_IRQHandler+0x6c0>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d00e      	beq.n	800262a <HAL_DMA_IRQHandler+0x516>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a71      	ldr	r2, [pc, #452]	; (80027d8 <HAL_DMA_IRQHandler+0x6c4>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d009      	beq.n	800262a <HAL_DMA_IRQHandler+0x516>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a70      	ldr	r2, [pc, #448]	; (80027dc <HAL_DMA_IRQHandler+0x6c8>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d004      	beq.n	800262a <HAL_DMA_IRQHandler+0x516>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a6e      	ldr	r2, [pc, #440]	; (80027e0 <HAL_DMA_IRQHandler+0x6cc>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d10a      	bne.n	8002640 <HAL_DMA_IRQHandler+0x52c>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0308 	and.w	r3, r3, #8
 8002634:	2b00      	cmp	r3, #0
 8002636:	bf14      	ite	ne
 8002638:	2301      	movne	r3, #1
 800263a:	2300      	moveq	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	e009      	b.n	8002654 <HAL_DMA_IRQHandler+0x540>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0304 	and.w	r3, r3, #4
 800264a:	2b00      	cmp	r3, #0
 800264c:	bf14      	ite	ne
 800264e:	2301      	movne	r3, #1
 8002650:	2300      	moveq	r3, #0
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	d03e      	beq.n	80026d6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265c:	f003 031f 	and.w	r3, r3, #31
 8002660:	2210      	movs	r2, #16
 8002662:	409a      	lsls	r2, r3
 8002664:	6a3b      	ldr	r3, [r7, #32]
 8002666:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d018      	beq.n	80026a8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d108      	bne.n	8002696 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002688:	2b00      	cmp	r3, #0
 800268a:	d024      	beq.n	80026d6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	4798      	blx	r3
 8002694:	e01f      	b.n	80026d6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800269a:	2b00      	cmp	r3, #0
 800269c:	d01b      	beq.n	80026d6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	4798      	blx	r3
 80026a6:	e016      	b.n	80026d6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d107      	bne.n	80026c6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 0208 	bic.w	r2, r2, #8
 80026c4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026da:	f003 031f 	and.w	r3, r3, #31
 80026de:	2220      	movs	r2, #32
 80026e0:	409a      	lsls	r2, r3
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	4013      	ands	r3, r2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 8110 	beq.w	800290c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a2c      	ldr	r2, [pc, #176]	; (80027a4 <HAL_DMA_IRQHandler+0x690>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d04a      	beq.n	800278c <HAL_DMA_IRQHandler+0x678>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a2b      	ldr	r2, [pc, #172]	; (80027a8 <HAL_DMA_IRQHandler+0x694>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d045      	beq.n	800278c <HAL_DMA_IRQHandler+0x678>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a29      	ldr	r2, [pc, #164]	; (80027ac <HAL_DMA_IRQHandler+0x698>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d040      	beq.n	800278c <HAL_DMA_IRQHandler+0x678>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a28      	ldr	r2, [pc, #160]	; (80027b0 <HAL_DMA_IRQHandler+0x69c>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d03b      	beq.n	800278c <HAL_DMA_IRQHandler+0x678>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a26      	ldr	r2, [pc, #152]	; (80027b4 <HAL_DMA_IRQHandler+0x6a0>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d036      	beq.n	800278c <HAL_DMA_IRQHandler+0x678>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a25      	ldr	r2, [pc, #148]	; (80027b8 <HAL_DMA_IRQHandler+0x6a4>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d031      	beq.n	800278c <HAL_DMA_IRQHandler+0x678>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a23      	ldr	r2, [pc, #140]	; (80027bc <HAL_DMA_IRQHandler+0x6a8>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d02c      	beq.n	800278c <HAL_DMA_IRQHandler+0x678>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a22      	ldr	r2, [pc, #136]	; (80027c0 <HAL_DMA_IRQHandler+0x6ac>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d027      	beq.n	800278c <HAL_DMA_IRQHandler+0x678>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a20      	ldr	r2, [pc, #128]	; (80027c4 <HAL_DMA_IRQHandler+0x6b0>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d022      	beq.n	800278c <HAL_DMA_IRQHandler+0x678>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a1f      	ldr	r2, [pc, #124]	; (80027c8 <HAL_DMA_IRQHandler+0x6b4>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d01d      	beq.n	800278c <HAL_DMA_IRQHandler+0x678>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a1d      	ldr	r2, [pc, #116]	; (80027cc <HAL_DMA_IRQHandler+0x6b8>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d018      	beq.n	800278c <HAL_DMA_IRQHandler+0x678>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a1c      	ldr	r2, [pc, #112]	; (80027d0 <HAL_DMA_IRQHandler+0x6bc>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d013      	beq.n	800278c <HAL_DMA_IRQHandler+0x678>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a1a      	ldr	r2, [pc, #104]	; (80027d4 <HAL_DMA_IRQHandler+0x6c0>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d00e      	beq.n	800278c <HAL_DMA_IRQHandler+0x678>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a19      	ldr	r2, [pc, #100]	; (80027d8 <HAL_DMA_IRQHandler+0x6c4>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d009      	beq.n	800278c <HAL_DMA_IRQHandler+0x678>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a17      	ldr	r2, [pc, #92]	; (80027dc <HAL_DMA_IRQHandler+0x6c8>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d004      	beq.n	800278c <HAL_DMA_IRQHandler+0x678>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a16      	ldr	r2, [pc, #88]	; (80027e0 <HAL_DMA_IRQHandler+0x6cc>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d12b      	bne.n	80027e4 <HAL_DMA_IRQHandler+0x6d0>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0310 	and.w	r3, r3, #16
 8002796:	2b00      	cmp	r3, #0
 8002798:	bf14      	ite	ne
 800279a:	2301      	movne	r3, #1
 800279c:	2300      	moveq	r3, #0
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	e02a      	b.n	80027f8 <HAL_DMA_IRQHandler+0x6e4>
 80027a2:	bf00      	nop
 80027a4:	40020010 	.word	0x40020010
 80027a8:	40020028 	.word	0x40020028
 80027ac:	40020040 	.word	0x40020040
 80027b0:	40020058 	.word	0x40020058
 80027b4:	40020070 	.word	0x40020070
 80027b8:	40020088 	.word	0x40020088
 80027bc:	400200a0 	.word	0x400200a0
 80027c0:	400200b8 	.word	0x400200b8
 80027c4:	40020410 	.word	0x40020410
 80027c8:	40020428 	.word	0x40020428
 80027cc:	40020440 	.word	0x40020440
 80027d0:	40020458 	.word	0x40020458
 80027d4:	40020470 	.word	0x40020470
 80027d8:	40020488 	.word	0x40020488
 80027dc:	400204a0 	.word	0x400204a0
 80027e0:	400204b8 	.word	0x400204b8
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	bf14      	ite	ne
 80027f2:	2301      	movne	r3, #1
 80027f4:	2300      	moveq	r3, #0
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 8087 	beq.w	800290c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002802:	f003 031f 	and.w	r3, r3, #31
 8002806:	2220      	movs	r2, #32
 8002808:	409a      	lsls	r2, r3
 800280a:	6a3b      	ldr	r3, [r7, #32]
 800280c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b04      	cmp	r3, #4
 8002818:	d139      	bne.n	800288e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 0216 	bic.w	r2, r2, #22
 8002828:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	695a      	ldr	r2, [r3, #20]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002838:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	2b00      	cmp	r3, #0
 8002840:	d103      	bne.n	800284a <HAL_DMA_IRQHandler+0x736>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002846:	2b00      	cmp	r3, #0
 8002848:	d007      	beq.n	800285a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 0208 	bic.w	r2, r2, #8
 8002858:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800285e:	f003 031f 	and.w	r3, r3, #31
 8002862:	223f      	movs	r2, #63	; 0x3f
 8002864:	409a      	lsls	r2, r3
 8002866:	6a3b      	ldr	r3, [r7, #32]
 8002868:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 834a 	beq.w	8002f18 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	4798      	blx	r3
          }
          return;
 800288c:	e344      	b.n	8002f18 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d018      	beq.n	80028ce <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d108      	bne.n	80028bc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d02c      	beq.n	800290c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	4798      	blx	r3
 80028ba:	e027      	b.n	800290c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d023      	beq.n	800290c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	4798      	blx	r3
 80028cc:	e01e      	b.n	800290c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10f      	bne.n	80028fc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0210 	bic.w	r2, r2, #16
 80028ea:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002900:	2b00      	cmp	r3, #0
 8002902:	d003      	beq.n	800290c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 8306 	beq.w	8002f22 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	f000 8088 	beq.w	8002a34 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2204      	movs	r2, #4
 8002928:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a7a      	ldr	r2, [pc, #488]	; (8002b1c <HAL_DMA_IRQHandler+0xa08>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d04a      	beq.n	80029cc <HAL_DMA_IRQHandler+0x8b8>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a79      	ldr	r2, [pc, #484]	; (8002b20 <HAL_DMA_IRQHandler+0xa0c>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d045      	beq.n	80029cc <HAL_DMA_IRQHandler+0x8b8>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a77      	ldr	r2, [pc, #476]	; (8002b24 <HAL_DMA_IRQHandler+0xa10>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d040      	beq.n	80029cc <HAL_DMA_IRQHandler+0x8b8>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a76      	ldr	r2, [pc, #472]	; (8002b28 <HAL_DMA_IRQHandler+0xa14>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d03b      	beq.n	80029cc <HAL_DMA_IRQHandler+0x8b8>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a74      	ldr	r2, [pc, #464]	; (8002b2c <HAL_DMA_IRQHandler+0xa18>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d036      	beq.n	80029cc <HAL_DMA_IRQHandler+0x8b8>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a73      	ldr	r2, [pc, #460]	; (8002b30 <HAL_DMA_IRQHandler+0xa1c>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d031      	beq.n	80029cc <HAL_DMA_IRQHandler+0x8b8>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a71      	ldr	r2, [pc, #452]	; (8002b34 <HAL_DMA_IRQHandler+0xa20>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d02c      	beq.n	80029cc <HAL_DMA_IRQHandler+0x8b8>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a70      	ldr	r2, [pc, #448]	; (8002b38 <HAL_DMA_IRQHandler+0xa24>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d027      	beq.n	80029cc <HAL_DMA_IRQHandler+0x8b8>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a6e      	ldr	r2, [pc, #440]	; (8002b3c <HAL_DMA_IRQHandler+0xa28>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d022      	beq.n	80029cc <HAL_DMA_IRQHandler+0x8b8>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a6d      	ldr	r2, [pc, #436]	; (8002b40 <HAL_DMA_IRQHandler+0xa2c>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d01d      	beq.n	80029cc <HAL_DMA_IRQHandler+0x8b8>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a6b      	ldr	r2, [pc, #428]	; (8002b44 <HAL_DMA_IRQHandler+0xa30>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d018      	beq.n	80029cc <HAL_DMA_IRQHandler+0x8b8>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a6a      	ldr	r2, [pc, #424]	; (8002b48 <HAL_DMA_IRQHandler+0xa34>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d013      	beq.n	80029cc <HAL_DMA_IRQHandler+0x8b8>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a68      	ldr	r2, [pc, #416]	; (8002b4c <HAL_DMA_IRQHandler+0xa38>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d00e      	beq.n	80029cc <HAL_DMA_IRQHandler+0x8b8>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a67      	ldr	r2, [pc, #412]	; (8002b50 <HAL_DMA_IRQHandler+0xa3c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d009      	beq.n	80029cc <HAL_DMA_IRQHandler+0x8b8>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a65      	ldr	r2, [pc, #404]	; (8002b54 <HAL_DMA_IRQHandler+0xa40>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d004      	beq.n	80029cc <HAL_DMA_IRQHandler+0x8b8>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a64      	ldr	r2, [pc, #400]	; (8002b58 <HAL_DMA_IRQHandler+0xa44>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d108      	bne.n	80029de <HAL_DMA_IRQHandler+0x8ca>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 0201 	bic.w	r2, r2, #1
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	e007      	b.n	80029ee <HAL_DMA_IRQHandler+0x8da>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0201 	bic.w	r2, r2, #1
 80029ec:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	3301      	adds	r3, #1
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d307      	bcc.n	8002a0a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1f2      	bne.n	80029ee <HAL_DMA_IRQHandler+0x8da>
 8002a08:	e000      	b.n	8002a0c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002a0a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d004      	beq.n	8002a2c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2203      	movs	r2, #3
 8002a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002a2a:	e003      	b.n	8002a34 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 8272 	beq.w	8002f22 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	4798      	blx	r3
 8002a46:	e26c      	b.n	8002f22 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a43      	ldr	r2, [pc, #268]	; (8002b5c <HAL_DMA_IRQHandler+0xa48>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d022      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x984>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a42      	ldr	r2, [pc, #264]	; (8002b60 <HAL_DMA_IRQHandler+0xa4c>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d01d      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x984>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a40      	ldr	r2, [pc, #256]	; (8002b64 <HAL_DMA_IRQHandler+0xa50>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d018      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x984>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a3f      	ldr	r2, [pc, #252]	; (8002b68 <HAL_DMA_IRQHandler+0xa54>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d013      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x984>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a3d      	ldr	r2, [pc, #244]	; (8002b6c <HAL_DMA_IRQHandler+0xa58>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d00e      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x984>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a3c      	ldr	r2, [pc, #240]	; (8002b70 <HAL_DMA_IRQHandler+0xa5c>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d009      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x984>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a3a      	ldr	r2, [pc, #232]	; (8002b74 <HAL_DMA_IRQHandler+0xa60>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d004      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x984>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a39      	ldr	r2, [pc, #228]	; (8002b78 <HAL_DMA_IRQHandler+0xa64>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d101      	bne.n	8002a9c <HAL_DMA_IRQHandler+0x988>
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e000      	b.n	8002a9e <HAL_DMA_IRQHandler+0x98a>
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 823f 	beq.w	8002f22 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab0:	f003 031f 	and.w	r3, r3, #31
 8002ab4:	2204      	movs	r2, #4
 8002ab6:	409a      	lsls	r2, r3
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	4013      	ands	r3, r2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 80cd 	beq.w	8002c5c <HAL_DMA_IRQHandler+0xb48>
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 80c7 	beq.w	8002c5c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad2:	f003 031f 	and.w	r3, r3, #31
 8002ad6:	2204      	movs	r2, #4
 8002ad8:	409a      	lsls	r2, r3
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d049      	beq.n	8002b7c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d109      	bne.n	8002b06 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 8210 	beq.w	8002f1c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b04:	e20a      	b.n	8002f1c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 8206 	beq.w	8002f1c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b18:	e200      	b.n	8002f1c <HAL_DMA_IRQHandler+0xe08>
 8002b1a:	bf00      	nop
 8002b1c:	40020010 	.word	0x40020010
 8002b20:	40020028 	.word	0x40020028
 8002b24:	40020040 	.word	0x40020040
 8002b28:	40020058 	.word	0x40020058
 8002b2c:	40020070 	.word	0x40020070
 8002b30:	40020088 	.word	0x40020088
 8002b34:	400200a0 	.word	0x400200a0
 8002b38:	400200b8 	.word	0x400200b8
 8002b3c:	40020410 	.word	0x40020410
 8002b40:	40020428 	.word	0x40020428
 8002b44:	40020440 	.word	0x40020440
 8002b48:	40020458 	.word	0x40020458
 8002b4c:	40020470 	.word	0x40020470
 8002b50:	40020488 	.word	0x40020488
 8002b54:	400204a0 	.word	0x400204a0
 8002b58:	400204b8 	.word	0x400204b8
 8002b5c:	58025408 	.word	0x58025408
 8002b60:	5802541c 	.word	0x5802541c
 8002b64:	58025430 	.word	0x58025430
 8002b68:	58025444 	.word	0x58025444
 8002b6c:	58025458 	.word	0x58025458
 8002b70:	5802546c 	.word	0x5802546c
 8002b74:	58025480 	.word	0x58025480
 8002b78:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	f003 0320 	and.w	r3, r3, #32
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d160      	bne.n	8002c48 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a8c      	ldr	r2, [pc, #560]	; (8002dbc <HAL_DMA_IRQHandler+0xca8>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d04a      	beq.n	8002c26 <HAL_DMA_IRQHandler+0xb12>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a8a      	ldr	r2, [pc, #552]	; (8002dc0 <HAL_DMA_IRQHandler+0xcac>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d045      	beq.n	8002c26 <HAL_DMA_IRQHandler+0xb12>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a89      	ldr	r2, [pc, #548]	; (8002dc4 <HAL_DMA_IRQHandler+0xcb0>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d040      	beq.n	8002c26 <HAL_DMA_IRQHandler+0xb12>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a87      	ldr	r2, [pc, #540]	; (8002dc8 <HAL_DMA_IRQHandler+0xcb4>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d03b      	beq.n	8002c26 <HAL_DMA_IRQHandler+0xb12>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a86      	ldr	r2, [pc, #536]	; (8002dcc <HAL_DMA_IRQHandler+0xcb8>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d036      	beq.n	8002c26 <HAL_DMA_IRQHandler+0xb12>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a84      	ldr	r2, [pc, #528]	; (8002dd0 <HAL_DMA_IRQHandler+0xcbc>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d031      	beq.n	8002c26 <HAL_DMA_IRQHandler+0xb12>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a83      	ldr	r2, [pc, #524]	; (8002dd4 <HAL_DMA_IRQHandler+0xcc0>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d02c      	beq.n	8002c26 <HAL_DMA_IRQHandler+0xb12>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a81      	ldr	r2, [pc, #516]	; (8002dd8 <HAL_DMA_IRQHandler+0xcc4>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d027      	beq.n	8002c26 <HAL_DMA_IRQHandler+0xb12>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a80      	ldr	r2, [pc, #512]	; (8002ddc <HAL_DMA_IRQHandler+0xcc8>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d022      	beq.n	8002c26 <HAL_DMA_IRQHandler+0xb12>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a7e      	ldr	r2, [pc, #504]	; (8002de0 <HAL_DMA_IRQHandler+0xccc>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d01d      	beq.n	8002c26 <HAL_DMA_IRQHandler+0xb12>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a7d      	ldr	r2, [pc, #500]	; (8002de4 <HAL_DMA_IRQHandler+0xcd0>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d018      	beq.n	8002c26 <HAL_DMA_IRQHandler+0xb12>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a7b      	ldr	r2, [pc, #492]	; (8002de8 <HAL_DMA_IRQHandler+0xcd4>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d013      	beq.n	8002c26 <HAL_DMA_IRQHandler+0xb12>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a7a      	ldr	r2, [pc, #488]	; (8002dec <HAL_DMA_IRQHandler+0xcd8>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d00e      	beq.n	8002c26 <HAL_DMA_IRQHandler+0xb12>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a78      	ldr	r2, [pc, #480]	; (8002df0 <HAL_DMA_IRQHandler+0xcdc>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d009      	beq.n	8002c26 <HAL_DMA_IRQHandler+0xb12>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a77      	ldr	r2, [pc, #476]	; (8002df4 <HAL_DMA_IRQHandler+0xce0>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d004      	beq.n	8002c26 <HAL_DMA_IRQHandler+0xb12>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a75      	ldr	r2, [pc, #468]	; (8002df8 <HAL_DMA_IRQHandler+0xce4>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d108      	bne.n	8002c38 <HAL_DMA_IRQHandler+0xb24>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 0208 	bic.w	r2, r2, #8
 8002c34:	601a      	str	r2, [r3, #0]
 8002c36:	e007      	b.n	8002c48 <HAL_DMA_IRQHandler+0xb34>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 0204 	bic.w	r2, r2, #4
 8002c46:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 8165 	beq.w	8002f1c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c5a:	e15f      	b.n	8002f1c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c60:	f003 031f 	and.w	r3, r3, #31
 8002c64:	2202      	movs	r2, #2
 8002c66:	409a      	lsls	r2, r3
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 80c5 	beq.w	8002dfc <HAL_DMA_IRQHandler+0xce8>
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 80bf 	beq.w	8002dfc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c82:	f003 031f 	and.w	r3, r3, #31
 8002c86:	2202      	movs	r2, #2
 8002c88:	409a      	lsls	r2, r3
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d018      	beq.n	8002cca <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d109      	bne.n	8002cb6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f000 813a 	beq.w	8002f20 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002cb4:	e134      	b.n	8002f20 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f000 8130 	beq.w	8002f20 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002cc8:	e12a      	b.n	8002f20 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	f003 0320 	and.w	r3, r3, #32
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d168      	bne.n	8002da6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a38      	ldr	r2, [pc, #224]	; (8002dbc <HAL_DMA_IRQHandler+0xca8>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d04a      	beq.n	8002d74 <HAL_DMA_IRQHandler+0xc60>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a37      	ldr	r2, [pc, #220]	; (8002dc0 <HAL_DMA_IRQHandler+0xcac>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d045      	beq.n	8002d74 <HAL_DMA_IRQHandler+0xc60>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a35      	ldr	r2, [pc, #212]	; (8002dc4 <HAL_DMA_IRQHandler+0xcb0>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d040      	beq.n	8002d74 <HAL_DMA_IRQHandler+0xc60>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a34      	ldr	r2, [pc, #208]	; (8002dc8 <HAL_DMA_IRQHandler+0xcb4>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d03b      	beq.n	8002d74 <HAL_DMA_IRQHandler+0xc60>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a32      	ldr	r2, [pc, #200]	; (8002dcc <HAL_DMA_IRQHandler+0xcb8>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d036      	beq.n	8002d74 <HAL_DMA_IRQHandler+0xc60>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a31      	ldr	r2, [pc, #196]	; (8002dd0 <HAL_DMA_IRQHandler+0xcbc>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d031      	beq.n	8002d74 <HAL_DMA_IRQHandler+0xc60>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a2f      	ldr	r2, [pc, #188]	; (8002dd4 <HAL_DMA_IRQHandler+0xcc0>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d02c      	beq.n	8002d74 <HAL_DMA_IRQHandler+0xc60>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a2e      	ldr	r2, [pc, #184]	; (8002dd8 <HAL_DMA_IRQHandler+0xcc4>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d027      	beq.n	8002d74 <HAL_DMA_IRQHandler+0xc60>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a2c      	ldr	r2, [pc, #176]	; (8002ddc <HAL_DMA_IRQHandler+0xcc8>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d022      	beq.n	8002d74 <HAL_DMA_IRQHandler+0xc60>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a2b      	ldr	r2, [pc, #172]	; (8002de0 <HAL_DMA_IRQHandler+0xccc>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d01d      	beq.n	8002d74 <HAL_DMA_IRQHandler+0xc60>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a29      	ldr	r2, [pc, #164]	; (8002de4 <HAL_DMA_IRQHandler+0xcd0>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d018      	beq.n	8002d74 <HAL_DMA_IRQHandler+0xc60>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a28      	ldr	r2, [pc, #160]	; (8002de8 <HAL_DMA_IRQHandler+0xcd4>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d013      	beq.n	8002d74 <HAL_DMA_IRQHandler+0xc60>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a26      	ldr	r2, [pc, #152]	; (8002dec <HAL_DMA_IRQHandler+0xcd8>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d00e      	beq.n	8002d74 <HAL_DMA_IRQHandler+0xc60>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a25      	ldr	r2, [pc, #148]	; (8002df0 <HAL_DMA_IRQHandler+0xcdc>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d009      	beq.n	8002d74 <HAL_DMA_IRQHandler+0xc60>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a23      	ldr	r2, [pc, #140]	; (8002df4 <HAL_DMA_IRQHandler+0xce0>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d004      	beq.n	8002d74 <HAL_DMA_IRQHandler+0xc60>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a22      	ldr	r2, [pc, #136]	; (8002df8 <HAL_DMA_IRQHandler+0xce4>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d108      	bne.n	8002d86 <HAL_DMA_IRQHandler+0xc72>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0214 	bic.w	r2, r2, #20
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	e007      	b.n	8002d96 <HAL_DMA_IRQHandler+0xc82>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 020a 	bic.w	r2, r2, #10
 8002d94:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f000 80b8 	beq.w	8002f20 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002db8:	e0b2      	b.n	8002f20 <HAL_DMA_IRQHandler+0xe0c>
 8002dba:	bf00      	nop
 8002dbc:	40020010 	.word	0x40020010
 8002dc0:	40020028 	.word	0x40020028
 8002dc4:	40020040 	.word	0x40020040
 8002dc8:	40020058 	.word	0x40020058
 8002dcc:	40020070 	.word	0x40020070
 8002dd0:	40020088 	.word	0x40020088
 8002dd4:	400200a0 	.word	0x400200a0
 8002dd8:	400200b8 	.word	0x400200b8
 8002ddc:	40020410 	.word	0x40020410
 8002de0:	40020428 	.word	0x40020428
 8002de4:	40020440 	.word	0x40020440
 8002de8:	40020458 	.word	0x40020458
 8002dec:	40020470 	.word	0x40020470
 8002df0:	40020488 	.word	0x40020488
 8002df4:	400204a0 	.word	0x400204a0
 8002df8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e00:	f003 031f 	and.w	r3, r3, #31
 8002e04:	2208      	movs	r2, #8
 8002e06:	409a      	lsls	r2, r3
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 8088 	beq.w	8002f22 <HAL_DMA_IRQHandler+0xe0e>
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	f003 0308 	and.w	r3, r3, #8
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 8082 	beq.w	8002f22 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a41      	ldr	r2, [pc, #260]	; (8002f28 <HAL_DMA_IRQHandler+0xe14>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d04a      	beq.n	8002ebe <HAL_DMA_IRQHandler+0xdaa>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a3f      	ldr	r2, [pc, #252]	; (8002f2c <HAL_DMA_IRQHandler+0xe18>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d045      	beq.n	8002ebe <HAL_DMA_IRQHandler+0xdaa>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a3e      	ldr	r2, [pc, #248]	; (8002f30 <HAL_DMA_IRQHandler+0xe1c>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d040      	beq.n	8002ebe <HAL_DMA_IRQHandler+0xdaa>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a3c      	ldr	r2, [pc, #240]	; (8002f34 <HAL_DMA_IRQHandler+0xe20>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d03b      	beq.n	8002ebe <HAL_DMA_IRQHandler+0xdaa>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a3b      	ldr	r2, [pc, #236]	; (8002f38 <HAL_DMA_IRQHandler+0xe24>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d036      	beq.n	8002ebe <HAL_DMA_IRQHandler+0xdaa>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a39      	ldr	r2, [pc, #228]	; (8002f3c <HAL_DMA_IRQHandler+0xe28>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d031      	beq.n	8002ebe <HAL_DMA_IRQHandler+0xdaa>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a38      	ldr	r2, [pc, #224]	; (8002f40 <HAL_DMA_IRQHandler+0xe2c>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d02c      	beq.n	8002ebe <HAL_DMA_IRQHandler+0xdaa>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a36      	ldr	r2, [pc, #216]	; (8002f44 <HAL_DMA_IRQHandler+0xe30>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d027      	beq.n	8002ebe <HAL_DMA_IRQHandler+0xdaa>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a35      	ldr	r2, [pc, #212]	; (8002f48 <HAL_DMA_IRQHandler+0xe34>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d022      	beq.n	8002ebe <HAL_DMA_IRQHandler+0xdaa>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a33      	ldr	r2, [pc, #204]	; (8002f4c <HAL_DMA_IRQHandler+0xe38>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d01d      	beq.n	8002ebe <HAL_DMA_IRQHandler+0xdaa>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a32      	ldr	r2, [pc, #200]	; (8002f50 <HAL_DMA_IRQHandler+0xe3c>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d018      	beq.n	8002ebe <HAL_DMA_IRQHandler+0xdaa>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a30      	ldr	r2, [pc, #192]	; (8002f54 <HAL_DMA_IRQHandler+0xe40>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d013      	beq.n	8002ebe <HAL_DMA_IRQHandler+0xdaa>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a2f      	ldr	r2, [pc, #188]	; (8002f58 <HAL_DMA_IRQHandler+0xe44>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d00e      	beq.n	8002ebe <HAL_DMA_IRQHandler+0xdaa>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a2d      	ldr	r2, [pc, #180]	; (8002f5c <HAL_DMA_IRQHandler+0xe48>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d009      	beq.n	8002ebe <HAL_DMA_IRQHandler+0xdaa>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a2c      	ldr	r2, [pc, #176]	; (8002f60 <HAL_DMA_IRQHandler+0xe4c>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d004      	beq.n	8002ebe <HAL_DMA_IRQHandler+0xdaa>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a2a      	ldr	r2, [pc, #168]	; (8002f64 <HAL_DMA_IRQHandler+0xe50>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d108      	bne.n	8002ed0 <HAL_DMA_IRQHandler+0xdbc>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 021c 	bic.w	r2, r2, #28
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	e007      	b.n	8002ee0 <HAL_DMA_IRQHandler+0xdcc>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 020e 	bic.w	r2, r2, #14
 8002ede:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee4:	f003 031f 	and.w	r3, r3, #31
 8002ee8:	2201      	movs	r2, #1
 8002eea:	409a      	lsls	r2, r3
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d009      	beq.n	8002f22 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	4798      	blx	r3
 8002f16:	e004      	b.n	8002f22 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002f18:	bf00      	nop
 8002f1a:	e002      	b.n	8002f22 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f1c:	bf00      	nop
 8002f1e:	e000      	b.n	8002f22 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f20:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002f22:	3728      	adds	r7, #40	; 0x28
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40020010 	.word	0x40020010
 8002f2c:	40020028 	.word	0x40020028
 8002f30:	40020040 	.word	0x40020040
 8002f34:	40020058 	.word	0x40020058
 8002f38:	40020070 	.word	0x40020070
 8002f3c:	40020088 	.word	0x40020088
 8002f40:	400200a0 	.word	0x400200a0
 8002f44:	400200b8 	.word	0x400200b8
 8002f48:	40020410 	.word	0x40020410
 8002f4c:	40020428 	.word	0x40020428
 8002f50:	40020440 	.word	0x40020440
 8002f54:	40020458 	.word	0x40020458
 8002f58:	40020470 	.word	0x40020470
 8002f5c:	40020488 	.word	0x40020488
 8002f60:	400204a0 	.word	0x400204a0
 8002f64:	400204b8 	.word	0x400204b8

08002f68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a42      	ldr	r2, [pc, #264]	; (8003080 <DMA_CalcBaseAndBitshift+0x118>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d04a      	beq.n	8003010 <DMA_CalcBaseAndBitshift+0xa8>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a41      	ldr	r2, [pc, #260]	; (8003084 <DMA_CalcBaseAndBitshift+0x11c>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d045      	beq.n	8003010 <DMA_CalcBaseAndBitshift+0xa8>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a3f      	ldr	r2, [pc, #252]	; (8003088 <DMA_CalcBaseAndBitshift+0x120>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d040      	beq.n	8003010 <DMA_CalcBaseAndBitshift+0xa8>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a3e      	ldr	r2, [pc, #248]	; (800308c <DMA_CalcBaseAndBitshift+0x124>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d03b      	beq.n	8003010 <DMA_CalcBaseAndBitshift+0xa8>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a3c      	ldr	r2, [pc, #240]	; (8003090 <DMA_CalcBaseAndBitshift+0x128>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d036      	beq.n	8003010 <DMA_CalcBaseAndBitshift+0xa8>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a3b      	ldr	r2, [pc, #236]	; (8003094 <DMA_CalcBaseAndBitshift+0x12c>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d031      	beq.n	8003010 <DMA_CalcBaseAndBitshift+0xa8>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a39      	ldr	r2, [pc, #228]	; (8003098 <DMA_CalcBaseAndBitshift+0x130>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d02c      	beq.n	8003010 <DMA_CalcBaseAndBitshift+0xa8>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a38      	ldr	r2, [pc, #224]	; (800309c <DMA_CalcBaseAndBitshift+0x134>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d027      	beq.n	8003010 <DMA_CalcBaseAndBitshift+0xa8>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a36      	ldr	r2, [pc, #216]	; (80030a0 <DMA_CalcBaseAndBitshift+0x138>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d022      	beq.n	8003010 <DMA_CalcBaseAndBitshift+0xa8>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a35      	ldr	r2, [pc, #212]	; (80030a4 <DMA_CalcBaseAndBitshift+0x13c>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d01d      	beq.n	8003010 <DMA_CalcBaseAndBitshift+0xa8>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a33      	ldr	r2, [pc, #204]	; (80030a8 <DMA_CalcBaseAndBitshift+0x140>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d018      	beq.n	8003010 <DMA_CalcBaseAndBitshift+0xa8>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a32      	ldr	r2, [pc, #200]	; (80030ac <DMA_CalcBaseAndBitshift+0x144>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d013      	beq.n	8003010 <DMA_CalcBaseAndBitshift+0xa8>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a30      	ldr	r2, [pc, #192]	; (80030b0 <DMA_CalcBaseAndBitshift+0x148>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d00e      	beq.n	8003010 <DMA_CalcBaseAndBitshift+0xa8>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a2f      	ldr	r2, [pc, #188]	; (80030b4 <DMA_CalcBaseAndBitshift+0x14c>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d009      	beq.n	8003010 <DMA_CalcBaseAndBitshift+0xa8>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a2d      	ldr	r2, [pc, #180]	; (80030b8 <DMA_CalcBaseAndBitshift+0x150>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d004      	beq.n	8003010 <DMA_CalcBaseAndBitshift+0xa8>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a2c      	ldr	r2, [pc, #176]	; (80030bc <DMA_CalcBaseAndBitshift+0x154>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d101      	bne.n	8003014 <DMA_CalcBaseAndBitshift+0xac>
 8003010:	2301      	movs	r3, #1
 8003012:	e000      	b.n	8003016 <DMA_CalcBaseAndBitshift+0xae>
 8003014:	2300      	movs	r3, #0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d024      	beq.n	8003064 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	b2db      	uxtb	r3, r3
 8003020:	3b10      	subs	r3, #16
 8003022:	4a27      	ldr	r2, [pc, #156]	; (80030c0 <DMA_CalcBaseAndBitshift+0x158>)
 8003024:	fba2 2303 	umull	r2, r3, r2, r3
 8003028:	091b      	lsrs	r3, r3, #4
 800302a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	4a24      	ldr	r2, [pc, #144]	; (80030c4 <DMA_CalcBaseAndBitshift+0x15c>)
 8003034:	5cd3      	ldrb	r3, [r2, r3]
 8003036:	461a      	mov	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2b03      	cmp	r3, #3
 8003040:	d908      	bls.n	8003054 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	461a      	mov	r2, r3
 8003048:	4b1f      	ldr	r3, [pc, #124]	; (80030c8 <DMA_CalcBaseAndBitshift+0x160>)
 800304a:	4013      	ands	r3, r2
 800304c:	1d1a      	adds	r2, r3, #4
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	659a      	str	r2, [r3, #88]	; 0x58
 8003052:	e00d      	b.n	8003070 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	461a      	mov	r2, r3
 800305a:	4b1b      	ldr	r3, [pc, #108]	; (80030c8 <DMA_CalcBaseAndBitshift+0x160>)
 800305c:	4013      	ands	r3, r2
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6593      	str	r3, [r2, #88]	; 0x58
 8003062:	e005      	b.n	8003070 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003074:	4618      	mov	r0, r3
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr
 8003080:	40020010 	.word	0x40020010
 8003084:	40020028 	.word	0x40020028
 8003088:	40020040 	.word	0x40020040
 800308c:	40020058 	.word	0x40020058
 8003090:	40020070 	.word	0x40020070
 8003094:	40020088 	.word	0x40020088
 8003098:	400200a0 	.word	0x400200a0
 800309c:	400200b8 	.word	0x400200b8
 80030a0:	40020410 	.word	0x40020410
 80030a4:	40020428 	.word	0x40020428
 80030a8:	40020440 	.word	0x40020440
 80030ac:	40020458 	.word	0x40020458
 80030b0:	40020470 	.word	0x40020470
 80030b4:	40020488 	.word	0x40020488
 80030b8:	400204a0 	.word	0x400204a0
 80030bc:	400204b8 	.word	0x400204b8
 80030c0:	aaaaaaab 	.word	0xaaaaaaab
 80030c4:	08011ff8 	.word	0x08011ff8
 80030c8:	fffffc00 	.word	0xfffffc00

080030cc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030d4:	2300      	movs	r3, #0
 80030d6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d120      	bne.n	8003122 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e4:	2b03      	cmp	r3, #3
 80030e6:	d858      	bhi.n	800319a <DMA_CheckFifoParam+0xce>
 80030e8:	a201      	add	r2, pc, #4	; (adr r2, 80030f0 <DMA_CheckFifoParam+0x24>)
 80030ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ee:	bf00      	nop
 80030f0:	08003101 	.word	0x08003101
 80030f4:	08003113 	.word	0x08003113
 80030f8:	08003101 	.word	0x08003101
 80030fc:	0800319b 	.word	0x0800319b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003104:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d048      	beq.n	800319e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003110:	e045      	b.n	800319e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003116:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800311a:	d142      	bne.n	80031a2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003120:	e03f      	b.n	80031a2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800312a:	d123      	bne.n	8003174 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003130:	2b03      	cmp	r3, #3
 8003132:	d838      	bhi.n	80031a6 <DMA_CheckFifoParam+0xda>
 8003134:	a201      	add	r2, pc, #4	; (adr r2, 800313c <DMA_CheckFifoParam+0x70>)
 8003136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313a:	bf00      	nop
 800313c:	0800314d 	.word	0x0800314d
 8003140:	08003153 	.word	0x08003153
 8003144:	0800314d 	.word	0x0800314d
 8003148:	08003165 	.word	0x08003165
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	73fb      	strb	r3, [r7, #15]
        break;
 8003150:	e030      	b.n	80031b4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003156:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d025      	beq.n	80031aa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003162:	e022      	b.n	80031aa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003168:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800316c:	d11f      	bne.n	80031ae <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003172:	e01c      	b.n	80031ae <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003178:	2b02      	cmp	r3, #2
 800317a:	d902      	bls.n	8003182 <DMA_CheckFifoParam+0xb6>
 800317c:	2b03      	cmp	r3, #3
 800317e:	d003      	beq.n	8003188 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003180:	e018      	b.n	80031b4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	73fb      	strb	r3, [r7, #15]
        break;
 8003186:	e015      	b.n	80031b4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00e      	beq.n	80031b2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	73fb      	strb	r3, [r7, #15]
    break;
 8003198:	e00b      	b.n	80031b2 <DMA_CheckFifoParam+0xe6>
        break;
 800319a:	bf00      	nop
 800319c:	e00a      	b.n	80031b4 <DMA_CheckFifoParam+0xe8>
        break;
 800319e:	bf00      	nop
 80031a0:	e008      	b.n	80031b4 <DMA_CheckFifoParam+0xe8>
        break;
 80031a2:	bf00      	nop
 80031a4:	e006      	b.n	80031b4 <DMA_CheckFifoParam+0xe8>
        break;
 80031a6:	bf00      	nop
 80031a8:	e004      	b.n	80031b4 <DMA_CheckFifoParam+0xe8>
        break;
 80031aa:	bf00      	nop
 80031ac:	e002      	b.n	80031b4 <DMA_CheckFifoParam+0xe8>
        break;
 80031ae:	bf00      	nop
 80031b0:	e000      	b.n	80031b4 <DMA_CheckFifoParam+0xe8>
    break;
 80031b2:	bf00      	nop
    }
  }

  return status;
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop

080031c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a38      	ldr	r2, [pc, #224]	; (80032b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d022      	beq.n	8003222 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a36      	ldr	r2, [pc, #216]	; (80032bc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d01d      	beq.n	8003222 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a35      	ldr	r2, [pc, #212]	; (80032c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d018      	beq.n	8003222 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a33      	ldr	r2, [pc, #204]	; (80032c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d013      	beq.n	8003222 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a32      	ldr	r2, [pc, #200]	; (80032c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d00e      	beq.n	8003222 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a30      	ldr	r2, [pc, #192]	; (80032cc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d009      	beq.n	8003222 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a2f      	ldr	r2, [pc, #188]	; (80032d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d004      	beq.n	8003222 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a2d      	ldr	r2, [pc, #180]	; (80032d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d101      	bne.n	8003226 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003222:	2301      	movs	r3, #1
 8003224:	e000      	b.n	8003228 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003226:	2300      	movs	r3, #0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d01a      	beq.n	8003262 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	b2db      	uxtb	r3, r3
 8003232:	3b08      	subs	r3, #8
 8003234:	4a28      	ldr	r2, [pc, #160]	; (80032d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003236:	fba2 2303 	umull	r2, r3, r2, r3
 800323a:	091b      	lsrs	r3, r3, #4
 800323c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	4b26      	ldr	r3, [pc, #152]	; (80032dc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003242:	4413      	add	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	461a      	mov	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a24      	ldr	r2, [pc, #144]	; (80032e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003250:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f003 031f 	and.w	r3, r3, #31
 8003258:	2201      	movs	r2, #1
 800325a:	409a      	lsls	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003260:	e024      	b.n	80032ac <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	b2db      	uxtb	r3, r3
 8003268:	3b10      	subs	r3, #16
 800326a:	4a1e      	ldr	r2, [pc, #120]	; (80032e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800326c:	fba2 2303 	umull	r2, r3, r2, r3
 8003270:	091b      	lsrs	r3, r3, #4
 8003272:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	4a1c      	ldr	r2, [pc, #112]	; (80032e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d806      	bhi.n	800328a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	4a1b      	ldr	r2, [pc, #108]	; (80032ec <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d902      	bls.n	800328a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	3308      	adds	r3, #8
 8003288:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	4b18      	ldr	r3, [pc, #96]	; (80032f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800328e:	4413      	add	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	461a      	mov	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a16      	ldr	r2, [pc, #88]	; (80032f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800329c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f003 031f 	and.w	r3, r3, #31
 80032a4:	2201      	movs	r2, #1
 80032a6:	409a      	lsls	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	669a      	str	r2, [r3, #104]	; 0x68
}
 80032ac:	bf00      	nop
 80032ae:	3714      	adds	r7, #20
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	58025408 	.word	0x58025408
 80032bc:	5802541c 	.word	0x5802541c
 80032c0:	58025430 	.word	0x58025430
 80032c4:	58025444 	.word	0x58025444
 80032c8:	58025458 	.word	0x58025458
 80032cc:	5802546c 	.word	0x5802546c
 80032d0:	58025480 	.word	0x58025480
 80032d4:	58025494 	.word	0x58025494
 80032d8:	cccccccd 	.word	0xcccccccd
 80032dc:	16009600 	.word	0x16009600
 80032e0:	58025880 	.word	0x58025880
 80032e4:	aaaaaaab 	.word	0xaaaaaaab
 80032e8:	400204b8 	.word	0x400204b8
 80032ec:	4002040f 	.word	0x4002040f
 80032f0:	10008200 	.word	0x10008200
 80032f4:	40020880 	.word	0x40020880

080032f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	b2db      	uxtb	r3, r3
 8003306:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d04a      	beq.n	80033a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2b08      	cmp	r3, #8
 8003312:	d847      	bhi.n	80033a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a25      	ldr	r2, [pc, #148]	; (80033b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d022      	beq.n	8003364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a24      	ldr	r2, [pc, #144]	; (80033b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d01d      	beq.n	8003364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a22      	ldr	r2, [pc, #136]	; (80033b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d018      	beq.n	8003364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a21      	ldr	r2, [pc, #132]	; (80033bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d013      	beq.n	8003364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a1f      	ldr	r2, [pc, #124]	; (80033c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d00e      	beq.n	8003364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a1e      	ldr	r2, [pc, #120]	; (80033c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d009      	beq.n	8003364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a1c      	ldr	r2, [pc, #112]	; (80033c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d004      	beq.n	8003364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a1b      	ldr	r2, [pc, #108]	; (80033cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d101      	bne.n	8003368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003364:	2301      	movs	r3, #1
 8003366:	e000      	b.n	800336a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003368:	2300      	movs	r3, #0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00a      	beq.n	8003384 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	4b17      	ldr	r3, [pc, #92]	; (80033d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003372:	4413      	add	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	461a      	mov	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a15      	ldr	r2, [pc, #84]	; (80033d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003380:	671a      	str	r2, [r3, #112]	; 0x70
 8003382:	e009      	b.n	8003398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	4b14      	ldr	r3, [pc, #80]	; (80033d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003388:	4413      	add	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	461a      	mov	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a11      	ldr	r2, [pc, #68]	; (80033dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003396:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	3b01      	subs	r3, #1
 800339c:	2201      	movs	r2, #1
 800339e:	409a      	lsls	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80033a4:	bf00      	nop
 80033a6:	3714      	adds	r7, #20
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	58025408 	.word	0x58025408
 80033b4:	5802541c 	.word	0x5802541c
 80033b8:	58025430 	.word	0x58025430
 80033bc:	58025444 	.word	0x58025444
 80033c0:	58025458 	.word	0x58025458
 80033c4:	5802546c 	.word	0x5802546c
 80033c8:	58025480 	.word	0x58025480
 80033cc:	58025494 	.word	0x58025494
 80033d0:	1600963f 	.word	0x1600963f
 80033d4:	58025940 	.word	0x58025940
 80033d8:	1000823f 	.word	0x1000823f
 80033dc:	40020940 	.word	0x40020940

080033e0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b098      	sub	sp, #96	; 0x60
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80033e8:	4a84      	ldr	r2, [pc, #528]	; (80035fc <HAL_FDCAN_Init+0x21c>)
 80033ea:	f107 030c 	add.w	r3, r7, #12
 80033ee:	4611      	mov	r1, r2
 80033f0:	224c      	movs	r2, #76	; 0x4c
 80033f2:	4618      	mov	r0, r3
 80033f4:	f00d fe9a 	bl	801112c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e1ca      	b.n	8003798 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a7e      	ldr	r2, [pc, #504]	; (8003600 <HAL_FDCAN_Init+0x220>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d106      	bne.n	800341a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003414:	461a      	mov	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d106      	bne.n	8003434 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7fd fd9c 	bl	8000f6c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699a      	ldr	r2, [r3, #24]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 0210 	bic.w	r2, r2, #16
 8003442:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003444:	f7fe f9c0 	bl	80017c8 <HAL_GetTick>
 8003448:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800344a:	e014      	b.n	8003476 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800344c:	f7fe f9bc 	bl	80017c8 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b0a      	cmp	r3, #10
 8003458:	d90d      	bls.n	8003476 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003460:	f043 0201 	orr.w	r2, r3, #1
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2203      	movs	r2, #3
 800346e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e190      	b.n	8003798 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	f003 0308 	and.w	r3, r3, #8
 8003480:	2b08      	cmp	r3, #8
 8003482:	d0e3      	beq.n	800344c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	699a      	ldr	r2, [r3, #24]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f042 0201 	orr.w	r2, r2, #1
 8003492:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003494:	f7fe f998 	bl	80017c8 <HAL_GetTick>
 8003498:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800349a:	e014      	b.n	80034c6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800349c:	f7fe f994 	bl	80017c8 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b0a      	cmp	r3, #10
 80034a8:	d90d      	bls.n	80034c6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034b0:	f043 0201 	orr.w	r2, r3, #1
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2203      	movs	r2, #3
 80034be:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e168      	b.n	8003798 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0e3      	beq.n	800349c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	699a      	ldr	r2, [r3, #24]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0202 	orr.w	r2, r2, #2
 80034e2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	7c1b      	ldrb	r3, [r3, #16]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d108      	bne.n	80034fe <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	699a      	ldr	r2, [r3, #24]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034fa:	619a      	str	r2, [r3, #24]
 80034fc:	e007      	b.n	800350e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	699a      	ldr	r2, [r3, #24]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800350c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	7c5b      	ldrb	r3, [r3, #17]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d108      	bne.n	8003528 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	699a      	ldr	r2, [r3, #24]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003524:	619a      	str	r2, [r3, #24]
 8003526:	e007      	b.n	8003538 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	699a      	ldr	r2, [r3, #24]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003536:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	7c9b      	ldrb	r3, [r3, #18]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d108      	bne.n	8003552 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	699a      	ldr	r2, [r3, #24]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800354e:	619a      	str	r2, [r3, #24]
 8003550:	e007      	b.n	8003562 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	699a      	ldr	r2, [r3, #24]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003560:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	699a      	ldr	r2, [r3, #24]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003586:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	691a      	ldr	r2, [r3, #16]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0210 	bic.w	r2, r2, #16
 8003596:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d108      	bne.n	80035b2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	699a      	ldr	r2, [r3, #24]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f042 0204 	orr.w	r2, r2, #4
 80035ae:	619a      	str	r2, [r3, #24]
 80035b0:	e030      	b.n	8003614 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d02c      	beq.n	8003614 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d020      	beq.n	8003604 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	699a      	ldr	r2, [r3, #24]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035d0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	691a      	ldr	r2, [r3, #16]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f042 0210 	orr.w	r2, r2, #16
 80035e0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	2b03      	cmp	r3, #3
 80035e8:	d114      	bne.n	8003614 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	699a      	ldr	r2, [r3, #24]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f042 0220 	orr.w	r2, r2, #32
 80035f8:	619a      	str	r2, [r3, #24]
 80035fa:	e00b      	b.n	8003614 <HAL_FDCAN_Init+0x234>
 80035fc:	08011f48 	.word	0x08011f48
 8003600:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	699a      	ldr	r2, [r3, #24]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f042 0220 	orr.w	r2, r2, #32
 8003612:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	3b01      	subs	r3, #1
 800361a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	69db      	ldr	r3, [r3, #28]
 8003620:	3b01      	subs	r3, #1
 8003622:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003624:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800362c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	3b01      	subs	r3, #1
 8003636:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800363c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800363e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003648:	d115      	bne.n	8003676 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003654:	3b01      	subs	r3, #1
 8003656:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003658:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365e:	3b01      	subs	r3, #1
 8003660:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003662:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	3b01      	subs	r3, #1
 800366c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003672:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003674:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00a      	beq.n	8003694 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800369c:	4413      	add	r3, r2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d012      	beq.n	80036c8 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80036aa:	f023 0107 	bic.w	r1, r3, #7
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80036b8:	4413      	add	r3, r2
 80036ba:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d012      	beq.n	80036f6 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80036d8:	f023 0107 	bic.w	r1, r3, #7
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80036e6:	4413      	add	r3, r2
 80036e8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d013      	beq.n	8003726 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003706:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003714:	4413      	add	r3, r2
 8003716:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800371a:	011a      	lsls	r2, r3, #4
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800372a:	2b00      	cmp	r3, #0
 800372c:	d013      	beq.n	8003756 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003736:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003744:	4413      	add	r3, r2
 8003746:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800374a:	021a      	lsls	r2, r3, #8
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a11      	ldr	r2, [pc, #68]	; (80037a0 <HAL_FDCAN_Init+0x3c0>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d107      	bne.n	8003770 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	689a      	ldr	r2, [r3, #8]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f022 0203 	bic.w	r2, r2, #3
 800376e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 fddf 	bl	800434c <FDCAN_CalcultateRamBlockAddresses>
 800378e:	4603      	mov	r3, r0
 8003790:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8003794:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8003798:	4618      	mov	r0, r3
 800379a:	3760      	adds	r7, #96	; 0x60
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	4000a000 	.word	0x4000a000

080037a4 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b087      	sub	sp, #28
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80037b4:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d002      	beq.n	80037c2 <HAL_FDCAN_ConfigFilter+0x1e>
 80037bc:	7bfb      	ldrb	r3, [r7, #15]
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d157      	bne.n	8003872 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d12b      	bne.n	8003822 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	2b07      	cmp	r3, #7
 80037d0:	d10d      	bne.n	80037ee <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	69db      	ldr	r3, [r3, #28]
 80037dc:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 80037de:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80037e4:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 80037e6:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 80037ea:	617b      	str	r3, [r7, #20]
 80037ec:	e00e      	b.n	800380c <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80037fa:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8003802:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003808:	4313      	orrs	r3, r2
 800380a:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4413      	add	r3, r2
 8003818:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	e025      	b.n	800386e <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	075a      	lsls	r2, r3, #29
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	4313      	orrs	r3, r2
 800382e:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	2b07      	cmp	r3, #7
 8003836:	d103      	bne.n	8003840 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	613b      	str	r3, [r7, #16]
 800383e:	e006      	b.n	800384e <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	079a      	lsls	r2, r3, #30
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	4313      	orrs	r3, r2
 800384c:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	4413      	add	r3, r2
 800385a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	3304      	adds	r3, #4
 8003866:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800386e:	2300      	movs	r3, #0
 8003870:	e008      	b.n	8003884 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003878:	f043 0202 	orr.w	r2, r3, #2
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
  }
}
 8003884:	4618      	mov	r0, r3
 8003886:	371c      	adds	r7, #28
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
 800389c:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d110      	bne.n	80038cc <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80038b2:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 80038b8:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80038c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 80038c8:	2300      	movs	r3, #0
 80038ca:	e008      	b.n	80038de <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038d2:	f043 0204 	orr.w	r2, r3, #4
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
  }
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3714      	adds	r7, #20
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr

080038ea <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 80038ea:	b480      	push	{r7}
 80038ec:	b083      	sub	sp, #12
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d109      	bne.n	8003912 <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68da      	ldr	r2, [r3, #12]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800390c:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 800390e:	2300      	movs	r3, #0
 8003910:	e008      	b.n	8003924 <HAL_FDCAN_EnableTxDelayCompensation+0x3a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003918:	f043 0204 	orr.w	r2, r3, #4
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
  }
}
 8003924:	4618      	mov	r0, r3
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b01      	cmp	r3, #1
 8003942:	d111      	bne.n	8003968 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2202      	movs	r2, #2
 8003948:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	699a      	ldr	r2, [r3, #24]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 0201 	bic.w	r2, r2, #1
 800395a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8003964:	2300      	movs	r3, #0
 8003966:	e008      	b.n	800397a <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800396e:	f043 0204 	orr.w	r2, r3, #4
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
  }
}
 800397a:	4618      	mov	r0, r3
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
	...

08003988 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8003988:	b480      	push	{r7}
 800398a:	b08b      	sub	sp, #44	; 0x2c
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
 8003994:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8003996:	2300      	movs	r3, #0
 8003998:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80039a0:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80039a2:	7efb      	ldrb	r3, [r7, #27]
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	f040 813b 	bne.w	8003c20 <HAL_FDCAN_GetRxMessage+0x298>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	2b40      	cmp	r3, #64	; 0x40
 80039ae:	d145      	bne.n	8003a3c <HAL_FDCAN_GetRxMessage+0xb4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80039b8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d109      	bne.n	80039d4 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039c6:	f043 0220 	orr.w	r2, r3, #32
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e12e      	b.n	8003c32 <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80039dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d109      	bne.n	80039f8 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e11c      	b.n	8003c32 <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003a00:	0e1b      	lsrs	r3, r3, #24
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d103      	bne.n	8003a12 <HAL_FDCAN_GetRxMessage+0x8a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003a1a:	0a1b      	lsrs	r3, r3, #8
 8003a1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a20:	69fa      	ldr	r2, [r7, #28]
 8003a22:	4413      	add	r3, r2
 8003a24:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2e:	69f9      	ldr	r1, [r7, #28]
 8003a30:	fb01 f303 	mul.w	r3, r1, r3
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4413      	add	r3, r2
 8003a38:	627b      	str	r3, [r7, #36]	; 0x24
 8003a3a:	e061      	b.n	8003b00 <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	2b41      	cmp	r3, #65	; 0x41
 8003a40:	d145      	bne.n	8003ace <HAL_FDCAN_GetRxMessage+0x146>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a4a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d109      	bne.n	8003a66 <HAL_FDCAN_GetRxMessage+0xde>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a58:	f043 0220 	orr.w	r2, r3, #32
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e0e5      	b.n	8003c32 <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003a6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d109      	bne.n	8003a8a <HAL_FDCAN_GetRxMessage+0x102>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e0d3      	b.n	8003c32 <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003a92:	0e1b      	lsrs	r3, r3, #24
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d103      	bne.n	8003aa4 <HAL_FDCAN_GetRxMessage+0x11c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003aac:	0a1b      	lsrs	r3, r3, #8
 8003aae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ab2:	69fa      	ldr	r2, [r7, #28]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ac0:	69f9      	ldr	r1, [r7, #28]
 8003ac2:	fb01 f303 	mul.w	r3, r1, r3
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	627b      	str	r3, [r7, #36]	; 0x24
 8003acc:	e018      	b.n	8003b00 <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d309      	bcc.n	8003aec <HAL_FDCAN_GetRxMessage+0x164>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ade:	f043 0220 	orr.w	r2, r3, #32
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e0a2      	b.n	8003c32 <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af4:	68b9      	ldr	r1, [r7, #8]
 8003af6:	fb01 f303 	mul.w	r3, r1, r3
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d107      	bne.n	8003b24 <HAL_FDCAN_GetRxMessage+0x19c>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8003b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	0c9b      	lsrs	r3, r3, #18
 8003b1a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	601a      	str	r2, [r3, #0]
 8003b22:	e005      	b.n	8003b30 <HAL_FDCAN_GetRxMessage+0x1a8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	3304      	adds	r3, #4
 8003b4c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	0e1b      	lsrs	r3, r3, #24
 8003b82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	0fda      	lsrs	r2, r3, #31
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b96:	3304      	adds	r3, #4
 8003b98:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	623b      	str	r3, [r7, #32]
 8003ba2:	e00a      	b.n	8003bba <HAL_FDCAN_GetRxMessage+0x232>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	6a3b      	ldr	r3, [r7, #32]
 8003ba8:	441a      	add	r2, r3
 8003baa:	6839      	ldr	r1, [r7, #0]
 8003bac:	6a3b      	ldr	r3, [r7, #32]
 8003bae:	440b      	add	r3, r1
 8003bb0:	7812      	ldrb	r2, [r2, #0]
 8003bb2:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	623b      	str	r3, [r7, #32]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	0c1b      	lsrs	r3, r3, #16
 8003bc0:	4a1f      	ldr	r2, [pc, #124]	; (8003c40 <HAL_FDCAN_GetRxMessage+0x2b8>)
 8003bc2:	5cd3      	ldrb	r3, [r2, r3]
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	6a3b      	ldr	r3, [r7, #32]
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d3eb      	bcc.n	8003ba4 <HAL_FDCAN_GetRxMessage+0x21c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	2b40      	cmp	r3, #64	; 0x40
 8003bd0:	d105      	bne.n	8003bde <HAL_FDCAN_GetRxMessage+0x256>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	69fa      	ldr	r2, [r7, #28]
 8003bd8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8003bdc:	e01e      	b.n	8003c1c <HAL_FDCAN_GetRxMessage+0x294>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	2b41      	cmp	r3, #65	; 0x41
 8003be2:	d105      	bne.n	8003bf0 <HAL_FDCAN_GetRxMessage+0x268>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	69fa      	ldr	r2, [r7, #28]
 8003bea:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8003bee:	e015      	b.n	8003c1c <HAL_FDCAN_GetRxMessage+0x294>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	2b1f      	cmp	r3, #31
 8003bf4:	d808      	bhi.n	8003c08 <HAL_FDCAN_GetRxMessage+0x280>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2101      	movs	r1, #1
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	fa01 f202 	lsl.w	r2, r1, r2
 8003c02:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8003c06:	e009      	b.n	8003c1c <HAL_FDCAN_GetRxMessage+0x294>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	f003 021f 	and.w	r2, r3, #31
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2101      	movs	r1, #1
 8003c14:	fa01 f202 	lsl.w	r2, r1, r2
 8003c18:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	e008      	b.n	8003c32 <HAL_FDCAN_GetRxMessage+0x2aa>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c26:	f043 0208 	orr.w	r2, r3, #8
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
  }
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	372c      	adds	r7, #44	; 0x2c
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	08012000 	.word	0x08012000

08003c44 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b087      	sub	sp, #28
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003c56:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003c58:	7dfb      	ldrb	r3, [r7, #23]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d002      	beq.n	8003c64 <HAL_FDCAN_ActivateNotification+0x20>
 8003c5e:	7dfb      	ldrb	r3, [r7, #23]
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d155      	bne.n	8003d10 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d108      	bne.n	8003c84 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f042 0201 	orr.w	r2, r2, #1
 8003c80:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c82:	e014      	b.n	8003cae <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	68ba      	ldr	r2, [r7, #8]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d108      	bne.n	8003ca6 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f042 0202 	orr.w	r2, r2, #2
 8003ca2:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ca4:	e003      	b.n	8003cae <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2203      	movs	r2, #3
 8003cac:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d009      	beq.n	8003ccc <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d009      	beq.n	8003cea <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	4b0f      	ldr	r3, [pc, #60]	; (8003d30 <HAL_FDCAN_ActivateNotification+0xec>)
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	6812      	ldr	r2, [r2, #0]
 8003cfa:	430b      	orrs	r3, r1
 8003cfc:	6553      	str	r3, [r2, #84]	; 0x54
 8003cfe:	4b0d      	ldr	r3, [pc, #52]	; (8003d34 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003d00:	695a      	ldr	r2, [r3, #20]
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	0f9b      	lsrs	r3, r3, #30
 8003d06:	490b      	ldr	r1, [pc, #44]	; (8003d34 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	e008      	b.n	8003d22 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d16:	f043 0202 	orr.w	r2, r3, #2
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
  }
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	371c      	adds	r7, #28
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	3fcfffff 	.word	0x3fcfffff
 8003d34:	4000a800 	.word	0x4000a800

08003d38 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b092      	sub	sp, #72	; 0x48
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8003d40:	4b90      	ldr	r3, [pc, #576]	; (8003f84 <HAL_FDCAN_IRQHandler+0x24c>)
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	079b      	lsls	r3, r3, #30
 8003d46:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8003d48:	4b8e      	ldr	r3, [pc, #568]	; (8003f84 <HAL_FDCAN_IRQHandler+0x24c>)
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	079b      	lsls	r3, r3, #30
 8003d4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d50:	4013      	ands	r3, r2
 8003d52:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d5a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003d5e:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d68:	4013      	ands	r3, r2
 8003d6a:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d72:	f003 030f 	and.w	r3, r3, #15
 8003d76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d80:	4013      	ands	r3, r2
 8003d82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d8e:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d98:	4013      	ands	r3, r2
 8003d9a:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da2:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8003da6:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003db0:	4013      	ands	r3, r2
 8003db2:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dba:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8003dbe:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dc8:	4013      	ands	r3, r2
 8003dca:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d011      	beq.n	8003dfe <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00a      	beq.n	8003dfe <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003df0:	651a      	str	r2, [r3, #80]	; 0x50
 8003df2:	4b64      	ldr	r3, [pc, #400]	; (8003f84 <HAL_FDCAN_IRQHandler+0x24c>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 fa5a 	bl	80042b2 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d01e      	beq.n	8003e4a <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d017      	beq.n	8003e4a <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003e22:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003e2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e2e:	4013      	ands	r3, r2
 8003e30:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e3a:	651a      	str	r2, [r3, #80]	; 0x50
 8003e3c:	4b51      	ldr	r3, [pc, #324]	; (8003f84 <HAL_FDCAN_IRQHandler+0x24c>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003e42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 fa0b 	bl	8004260 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8003e4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00d      	beq.n	8003e6c <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e56:	4b4c      	ldr	r3, [pc, #304]	; (8003f88 <HAL_FDCAN_IRQHandler+0x250>)
 8003e58:	400b      	ands	r3, r1
 8003e5a:	6513      	str	r3, [r2, #80]	; 0x50
 8003e5c:	4a49      	ldr	r2, [pc, #292]	; (8003f84 <HAL_FDCAN_IRQHandler+0x24c>)
 8003e5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e60:	0f9b      	lsrs	r3, r3, #30
 8003e62:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8003e64:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 f9c4 	bl	80041f4 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00d      	beq.n	8003e8e <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e78:	4b43      	ldr	r3, [pc, #268]	; (8003f88 <HAL_FDCAN_IRQHandler+0x250>)
 8003e7a:	400b      	ands	r3, r1
 8003e7c:	6513      	str	r3, [r2, #80]	; 0x50
 8003e7e:	4a41      	ldr	r2, [pc, #260]	; (8003f84 <HAL_FDCAN_IRQHandler+0x24c>)
 8003e80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e82:	0f9b      	lsrs	r3, r3, #30
 8003e84:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003e86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 f9be 	bl	800420a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8003e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00d      	beq.n	8003eb0 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e9a:	4b3b      	ldr	r3, [pc, #236]	; (8003f88 <HAL_FDCAN_IRQHandler+0x250>)
 8003e9c:	400b      	ands	r3, r1
 8003e9e:	6513      	str	r3, [r2, #80]	; 0x50
 8003ea0:	4a38      	ldr	r2, [pc, #224]	; (8003f84 <HAL_FDCAN_IRQHandler+0x24c>)
 8003ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ea4:	0f9b      	lsrs	r3, r3, #30
 8003ea6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003ea8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7fd f824 	bl	8000ef8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00d      	beq.n	8003ed2 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ebc:	4b32      	ldr	r3, [pc, #200]	; (8003f88 <HAL_FDCAN_IRQHandler+0x250>)
 8003ebe:	400b      	ands	r3, r1
 8003ec0:	6513      	str	r3, [r2, #80]	; 0x50
 8003ec2:	4a30      	ldr	r2, [pc, #192]	; (8003f84 <HAL_FDCAN_IRQHandler+0x24c>)
 8003ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec6:	0f9b      	lsrs	r3, r3, #30
 8003ec8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8003eca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f9a7 	bl	8004220 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d011      	beq.n	8003f04 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00a      	beq.n	8003f04 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ef6:	651a      	str	r2, [r3, #80]	; 0x50
 8003ef8:	4b22      	ldr	r3, [pc, #136]	; (8003f84 <HAL_FDCAN_IRQHandler+0x24c>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f999 	bl	8004236 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d01e      	beq.n	8003f50 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d017      	beq.n	8003f50 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003f28:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f34:	4013      	ands	r3, r2
 8003f36:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f40:	651a      	str	r2, [r3, #80]	; 0x50
 8003f42:	4b10      	ldr	r3, [pc, #64]	; (8003f84 <HAL_FDCAN_IRQHandler+0x24c>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003f48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 f97d 	bl	800424a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d016      	beq.n	8003f8c <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00f      	beq.n	8003f8c <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003f74:	651a      	str	r2, [r3, #80]	; 0x50
 8003f76:	4b03      	ldr	r3, [pc, #12]	; (8003f84 <HAL_FDCAN_IRQHandler+0x24c>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 f97a 	bl	8004276 <HAL_FDCAN_RxBufferNewMessageCallback>
 8003f82:	e003      	b.n	8003f8c <HAL_FDCAN_IRQHandler+0x254>
 8003f84:	4000a800 	.word	0x4000a800
 8003f88:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d011      	beq.n	8003fbe <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00a      	beq.n	8003fbe <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003fb0:	651a      	str	r2, [r3, #80]	; 0x50
 8003fb2:	4b8d      	ldr	r3, [pc, #564]	; (80041e8 <HAL_FDCAN_IRQHandler+0x4b0>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 f966 	bl	800428a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d011      	beq.n	8003ff0 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00a      	beq.n	8003ff0 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003fe2:	651a      	str	r2, [r3, #80]	; 0x50
 8003fe4:	4b80      	ldr	r3, [pc, #512]	; (80041e8 <HAL_FDCAN_IRQHandler+0x4b0>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f957 	bl	800429e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d016      	beq.n	800402c <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00f      	beq.n	800402c <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004014:	651a      	str	r2, [r3, #80]	; 0x50
 8004016:	4b74      	ldr	r3, [pc, #464]	; (80041e8 <HAL_FDCAN_IRQHandler+0x4b0>)
 8004018:	2200      	movs	r2, #0
 800401a:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004022:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800402c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00d      	beq.n	800404e <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004038:	4b6c      	ldr	r3, [pc, #432]	; (80041ec <HAL_FDCAN_IRQHandler+0x4b4>)
 800403a:	400b      	ands	r3, r1
 800403c:	6513      	str	r3, [r2, #80]	; 0x50
 800403e:	4a6a      	ldr	r2, [pc, #424]	; (80041e8 <HAL_FDCAN_IRQHandler+0x4b0>)
 8004040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004042:	0f9b      	lsrs	r3, r3, #30
 8004044:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004046:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 f946 	bl	80042da <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800404e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004050:	2b00      	cmp	r3, #0
 8004052:	d011      	beq.n	8004078 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800405a:	4b64      	ldr	r3, [pc, #400]	; (80041ec <HAL_FDCAN_IRQHandler+0x4b4>)
 800405c:	400b      	ands	r3, r1
 800405e:	6513      	str	r3, [r2, #80]	; 0x50
 8004060:	4a61      	ldr	r2, [pc, #388]	; (80041e8 <HAL_FDCAN_IRQHandler+0x4b0>)
 8004062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004064:	0f9b      	lsrs	r3, r3, #30
 8004066:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800406e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004070:	431a      	orrs	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a5c      	ldr	r2, [pc, #368]	; (80041f0 <HAL_FDCAN_IRQHandler+0x4b8>)
 800407e:	4293      	cmp	r3, r2
 8004080:	f040 80a6 	bne.w	80041d0 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 0303 	and.w	r3, r3, #3
 800408e:	2b00      	cmp	r3, #0
 8004090:	f000 809e 	beq.w	80041d0 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	f003 030f 	and.w	r3, r3, #15
 800409e:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040a8:	4013      	ands	r3, r2
 80040aa:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80040b6:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	6a3a      	ldr	r2, [r7, #32]
 80040c0:	4013      	ands	r3, r2
 80040c2:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80040ce:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d6:	69fa      	ldr	r2, [r7, #28]
 80040d8:	4013      	ands	r3, r2
 80040da:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 80040e6:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	4013      	ands	r3, r2
 80040f2:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 80040fe:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	4013      	ands	r3, r2
 800410a:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	2b00      	cmp	r3, #0
 8004110:	d007      	beq.n	8004122 <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004118:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 800411a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 f8e7 	bl	80042f0 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d007      	beq.n	8004138 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	6a3a      	ldr	r2, [r7, #32]
 800412e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8004130:	6a39      	ldr	r1, [r7, #32]
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f8e7 	bl	8004306 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004142:	2b00      	cmp	r3, #0
 8004144:	d01b      	beq.n	800417e <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004150:	2b00      	cmp	r3, #0
 8004152:	d014      	beq.n	800417e <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415a:	0c1b      	lsrs	r3, r3, #16
 800415c:	b29b      	uxth	r3, r3
 800415e:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004166:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800416a:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	2240      	movs	r2, #64	; 0x40
 8004172:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	6939      	ldr	r1, [r7, #16]
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 f8cf 	bl	800431c <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d007      	beq.n	8004194 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	69fa      	ldr	r2, [r7, #28]
 800418a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 800418c:	69f9      	ldr	r1, [r7, #28]
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 f8d0 	bl	8004334 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00b      	beq.n	80041b2 <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	69ba      	ldr	r2, [r7, #24]
 80041a0:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	431a      	orrs	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00b      	beq.n	80041d0 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	431a      	orrs	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d002      	beq.n	80041e0 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f873 	bl	80042c6 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80041e0:	bf00      	nop
 80041e2:	3748      	adds	r7, #72	; 0x48
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	4000a800 	.word	0x4000a800
 80041ec:	3fcfffff 	.word	0x3fcfffff
 80041f0:	4000a000 	.word	0x4000a000

080041f4 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80041fe:	bf00      	nop
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800420a:	b480      	push	{r7}
 800420c:	b083      	sub	sp, #12
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
 8004212:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800422a:	bf00      	nop
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004236:	b480      	push	{r7}
 8004238:	b083      	sub	sp, #12
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800423e:	bf00      	nop
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800424a:	b480      	push	{r7}
 800424c:	b083      	sub	sp, #12
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
 8004252:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800426a:	bf00      	nop
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004276:	b480      	push	{r7}
 8004278:	b083      	sub	sp, #12
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800427e:	bf00      	nop
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr

0800428a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800428a:	b480      	push	{r7}
 800428c:	b083      	sub	sp, #12
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004292:	bf00      	nop
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800429e:	b480      	push	{r7}
 80042a0:	b083      	sub	sp, #12
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80042a6:	bf00      	nop
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80042b2:	b480      	push	{r7}
 80042b4:	b083      	sub	sp, #12
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80042ba:	bf00      	nop
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80042ce:	bf00      	nop
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
 80042e2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80042fa:	bf00      	nop
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
 800430e:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8004328:	bf00      	nop
 800432a:	3714      	adds	r7, #20
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800433e:	bf00      	nop
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
	...

0800434c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004358:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004362:	4ba7      	ldr	r3, [pc, #668]	; (8004600 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004364:	4013      	ands	r3, r2
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	0091      	lsls	r1, r2, #2
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	6812      	ldr	r2, [r2, #0]
 800436e:	430b      	orrs	r3, r1
 8004370:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800437c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004384:	041a      	lsls	r2, r3, #16
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004394:	68ba      	ldr	r2, [r7, #8]
 8004396:	4413      	add	r3, r2
 8004398:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80043a2:	4b97      	ldr	r3, [pc, #604]	; (8004600 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80043a4:	4013      	ands	r3, r2
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	0091      	lsls	r1, r2, #2
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	6812      	ldr	r2, [r2, #0]
 80043ae:	430b      	orrs	r3, r1
 80043b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043bc:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c4:	041a      	lsls	r2, r3, #16
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	4413      	add	r3, r2
 80043da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80043e4:	4b86      	ldr	r3, [pc, #536]	; (8004600 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80043e6:	4013      	ands	r3, r2
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	0091      	lsls	r1, r2, #2
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	6812      	ldr	r2, [r2, #0]
 80043f0:	430b      	orrs	r3, r1
 80043f2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80043fe:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004406:	041a      	lsls	r2, r3, #16
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	430a      	orrs	r2, r1
 800440e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800441a:	fb02 f303 	mul.w	r3, r2, r3
 800441e:	68ba      	ldr	r2, [r7, #8]
 8004420:	4413      	add	r3, r2
 8004422:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800442c:	4b74      	ldr	r3, [pc, #464]	; (8004600 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800442e:	4013      	ands	r3, r2
 8004430:	68ba      	ldr	r2, [r7, #8]
 8004432:	0091      	lsls	r1, r2, #2
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	6812      	ldr	r2, [r2, #0]
 8004438:	430b      	orrs	r3, r1
 800443a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004446:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800444e:	041a      	lsls	r2, r3, #16
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	430a      	orrs	r2, r1
 8004456:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004462:	fb02 f303 	mul.w	r3, r2, r3
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	4413      	add	r3, r2
 800446a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004474:	4b62      	ldr	r3, [pc, #392]	; (8004600 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004476:	4013      	ands	r3, r2
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	0091      	lsls	r1, r2, #2
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	6812      	ldr	r2, [r2, #0]
 8004480:	430b      	orrs	r3, r1
 8004482:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800448e:	fb02 f303 	mul.w	r3, r2, r3
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	4413      	add	r3, r2
 8004496:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80044a0:	4b57      	ldr	r3, [pc, #348]	; (8004600 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80044a2:	4013      	ands	r3, r2
 80044a4:	68ba      	ldr	r2, [r7, #8]
 80044a6:	0091      	lsls	r1, r2, #2
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6812      	ldr	r2, [r2, #0]
 80044ac:	430b      	orrs	r3, r1
 80044ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80044ba:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c2:	041a      	lsls	r2, r3, #16
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	430a      	orrs	r2, r1
 80044ca:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d2:	005b      	lsls	r3, r3, #1
 80044d4:	68ba      	ldr	r2, [r7, #8]
 80044d6:	4413      	add	r3, r2
 80044d8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80044e2:	4b47      	ldr	r3, [pc, #284]	; (8004600 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80044e4:	4013      	ands	r3, r2
 80044e6:	68ba      	ldr	r2, [r7, #8]
 80044e8:	0091      	lsls	r1, r2, #2
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	6812      	ldr	r2, [r2, #0]
 80044ee:	430b      	orrs	r3, r1
 80044f0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80044fc:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004504:	041a      	lsls	r2, r3, #16
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	430a      	orrs	r2, r1
 800450c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004518:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004520:	061a      	lsls	r2, r3, #24
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	430a      	orrs	r2, r1
 8004528:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004530:	4b34      	ldr	r3, [pc, #208]	; (8004604 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004532:	4413      	add	r3, r2
 8004534:	009a      	lsls	r2, r3, #2
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	441a      	add	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004552:	00db      	lsls	r3, r3, #3
 8004554:	441a      	add	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004562:	6879      	ldr	r1, [r7, #4]
 8004564:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8004566:	fb01 f303 	mul.w	r3, r1, r3
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	441a      	add	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800457a:	6879      	ldr	r1, [r7, #4]
 800457c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800457e:	fb01 f303 	mul.w	r3, r1, r3
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	441a      	add	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004592:	6879      	ldr	r1, [r7, #4]
 8004594:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8004596:	fb01 f303 	mul.w	r3, r1, r3
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	441a      	add	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	441a      	add	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045c2:	6879      	ldr	r1, [r7, #4]
 80045c4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80045c6:	fb01 f303 	mul.w	r3, r1, r3
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	441a      	add	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045de:	6879      	ldr	r1, [r7, #4]
 80045e0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80045e2:	fb01 f303 	mul.w	r3, r1, r3
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	441a      	add	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f6:	4a04      	ldr	r2, [pc, #16]	; (8004608 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d915      	bls.n	8004628 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80045fc:	e006      	b.n	800460c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80045fe:	bf00      	nop
 8004600:	ffff0003 	.word	0xffff0003
 8004604:	10002b00 	.word	0x10002b00
 8004608:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004612:	f043 0220 	orr.w	r2, r3, #32
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2203      	movs	r2, #3
 8004620:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e010      	b.n	800464a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800462c:	60fb      	str	r3, [r7, #12]
 800462e:	e005      	b.n	800463c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	3304      	adds	r3, #4
 800463a:	60fb      	str	r3, [r7, #12]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	429a      	cmp	r2, r3
 8004646:	d3f3      	bcc.n	8004630 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3714      	adds	r7, #20
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop

08004658 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004658:	b480      	push	{r7}
 800465a:	b089      	sub	sp, #36	; 0x24
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004662:	2300      	movs	r3, #0
 8004664:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004666:	4b89      	ldr	r3, [pc, #548]	; (800488c <HAL_GPIO_Init+0x234>)
 8004668:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800466a:	e194      	b.n	8004996 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	2101      	movs	r1, #1
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	fa01 f303 	lsl.w	r3, r1, r3
 8004678:	4013      	ands	r3, r2
 800467a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	2b00      	cmp	r3, #0
 8004680:	f000 8186 	beq.w	8004990 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d00b      	beq.n	80046a4 <HAL_GPIO_Init+0x4c>
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	2b02      	cmp	r3, #2
 8004692:	d007      	beq.n	80046a4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004698:	2b11      	cmp	r3, #17
 800469a:	d003      	beq.n	80046a4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2b12      	cmp	r3, #18
 80046a2:	d130      	bne.n	8004706 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	2203      	movs	r2, #3
 80046b0:	fa02 f303 	lsl.w	r3, r2, r3
 80046b4:	43db      	mvns	r3, r3
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	4013      	ands	r3, r2
 80046ba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	68da      	ldr	r2, [r3, #12]
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	005b      	lsls	r3, r3, #1
 80046c4:	fa02 f303 	lsl.w	r3, r2, r3
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80046da:	2201      	movs	r2, #1
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	fa02 f303 	lsl.w	r3, r2, r3
 80046e2:	43db      	mvns	r3, r3
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	4013      	ands	r3, r2
 80046e8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	091b      	lsrs	r3, r3, #4
 80046f0:	f003 0201 	and.w	r2, r3, #1
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	fa02 f303 	lsl.w	r3, r2, r3
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	005b      	lsls	r3, r3, #1
 8004710:	2203      	movs	r2, #3
 8004712:	fa02 f303 	lsl.w	r3, r2, r3
 8004716:	43db      	mvns	r3, r3
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	4013      	ands	r3, r2
 800471c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	689a      	ldr	r2, [r3, #8]
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	fa02 f303 	lsl.w	r3, r2, r3
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	4313      	orrs	r3, r2
 800472e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	69ba      	ldr	r2, [r7, #24]
 8004734:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	2b02      	cmp	r3, #2
 800473c:	d003      	beq.n	8004746 <HAL_GPIO_Init+0xee>
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	2b12      	cmp	r3, #18
 8004744:	d123      	bne.n	800478e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	08da      	lsrs	r2, r3, #3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	3208      	adds	r2, #8
 800474e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004752:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	f003 0307 	and.w	r3, r3, #7
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	220f      	movs	r2, #15
 800475e:	fa02 f303 	lsl.w	r3, r2, r3
 8004762:	43db      	mvns	r3, r3
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	4013      	ands	r3, r2
 8004768:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	691a      	ldr	r2, [r3, #16]
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	f003 0307 	and.w	r3, r3, #7
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	fa02 f303 	lsl.w	r3, r2, r3
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	4313      	orrs	r3, r2
 800477e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	08da      	lsrs	r2, r3, #3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	3208      	adds	r2, #8
 8004788:	69b9      	ldr	r1, [r7, #24]
 800478a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	2203      	movs	r2, #3
 800479a:	fa02 f303 	lsl.w	r3, r2, r3
 800479e:	43db      	mvns	r3, r3
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	4013      	ands	r3, r2
 80047a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f003 0203 	and.w	r2, r3, #3
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	005b      	lsls	r3, r3, #1
 80047b2:	fa02 f303 	lsl.w	r3, r2, r3
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f000 80e0 	beq.w	8004990 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047d0:	4b2f      	ldr	r3, [pc, #188]	; (8004890 <HAL_GPIO_Init+0x238>)
 80047d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80047d6:	4a2e      	ldr	r2, [pc, #184]	; (8004890 <HAL_GPIO_Init+0x238>)
 80047d8:	f043 0302 	orr.w	r3, r3, #2
 80047dc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80047e0:	4b2b      	ldr	r3, [pc, #172]	; (8004890 <HAL_GPIO_Init+0x238>)
 80047e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	60fb      	str	r3, [r7, #12]
 80047ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047ee:	4a29      	ldr	r2, [pc, #164]	; (8004894 <HAL_GPIO_Init+0x23c>)
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	089b      	lsrs	r3, r3, #2
 80047f4:	3302      	adds	r3, #2
 80047f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	f003 0303 	and.w	r3, r3, #3
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	220f      	movs	r2, #15
 8004806:	fa02 f303 	lsl.w	r3, r2, r3
 800480a:	43db      	mvns	r3, r3
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	4013      	ands	r3, r2
 8004810:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a20      	ldr	r2, [pc, #128]	; (8004898 <HAL_GPIO_Init+0x240>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d052      	beq.n	80048c0 <HAL_GPIO_Init+0x268>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a1f      	ldr	r2, [pc, #124]	; (800489c <HAL_GPIO_Init+0x244>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d031      	beq.n	8004886 <HAL_GPIO_Init+0x22e>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a1e      	ldr	r2, [pc, #120]	; (80048a0 <HAL_GPIO_Init+0x248>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d02b      	beq.n	8004882 <HAL_GPIO_Init+0x22a>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a1d      	ldr	r2, [pc, #116]	; (80048a4 <HAL_GPIO_Init+0x24c>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d025      	beq.n	800487e <HAL_GPIO_Init+0x226>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a1c      	ldr	r2, [pc, #112]	; (80048a8 <HAL_GPIO_Init+0x250>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d01f      	beq.n	800487a <HAL_GPIO_Init+0x222>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a1b      	ldr	r2, [pc, #108]	; (80048ac <HAL_GPIO_Init+0x254>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d019      	beq.n	8004876 <HAL_GPIO_Init+0x21e>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a1a      	ldr	r2, [pc, #104]	; (80048b0 <HAL_GPIO_Init+0x258>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d013      	beq.n	8004872 <HAL_GPIO_Init+0x21a>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a19      	ldr	r2, [pc, #100]	; (80048b4 <HAL_GPIO_Init+0x25c>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d00d      	beq.n	800486e <HAL_GPIO_Init+0x216>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a18      	ldr	r2, [pc, #96]	; (80048b8 <HAL_GPIO_Init+0x260>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d007      	beq.n	800486a <HAL_GPIO_Init+0x212>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a17      	ldr	r2, [pc, #92]	; (80048bc <HAL_GPIO_Init+0x264>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d101      	bne.n	8004866 <HAL_GPIO_Init+0x20e>
 8004862:	2309      	movs	r3, #9
 8004864:	e02d      	b.n	80048c2 <HAL_GPIO_Init+0x26a>
 8004866:	230a      	movs	r3, #10
 8004868:	e02b      	b.n	80048c2 <HAL_GPIO_Init+0x26a>
 800486a:	2308      	movs	r3, #8
 800486c:	e029      	b.n	80048c2 <HAL_GPIO_Init+0x26a>
 800486e:	2307      	movs	r3, #7
 8004870:	e027      	b.n	80048c2 <HAL_GPIO_Init+0x26a>
 8004872:	2306      	movs	r3, #6
 8004874:	e025      	b.n	80048c2 <HAL_GPIO_Init+0x26a>
 8004876:	2305      	movs	r3, #5
 8004878:	e023      	b.n	80048c2 <HAL_GPIO_Init+0x26a>
 800487a:	2304      	movs	r3, #4
 800487c:	e021      	b.n	80048c2 <HAL_GPIO_Init+0x26a>
 800487e:	2303      	movs	r3, #3
 8004880:	e01f      	b.n	80048c2 <HAL_GPIO_Init+0x26a>
 8004882:	2302      	movs	r3, #2
 8004884:	e01d      	b.n	80048c2 <HAL_GPIO_Init+0x26a>
 8004886:	2301      	movs	r3, #1
 8004888:	e01b      	b.n	80048c2 <HAL_GPIO_Init+0x26a>
 800488a:	bf00      	nop
 800488c:	58000080 	.word	0x58000080
 8004890:	58024400 	.word	0x58024400
 8004894:	58000400 	.word	0x58000400
 8004898:	58020000 	.word	0x58020000
 800489c:	58020400 	.word	0x58020400
 80048a0:	58020800 	.word	0x58020800
 80048a4:	58020c00 	.word	0x58020c00
 80048a8:	58021000 	.word	0x58021000
 80048ac:	58021400 	.word	0x58021400
 80048b0:	58021800 	.word	0x58021800
 80048b4:	58021c00 	.word	0x58021c00
 80048b8:	58022000 	.word	0x58022000
 80048bc:	58022400 	.word	0x58022400
 80048c0:	2300      	movs	r3, #0
 80048c2:	69fa      	ldr	r2, [r7, #28]
 80048c4:	f002 0203 	and.w	r2, r2, #3
 80048c8:	0092      	lsls	r2, r2, #2
 80048ca:	4093      	lsls	r3, r2
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048d2:	4938      	ldr	r1, [pc, #224]	; (80049b4 <HAL_GPIO_Init+0x35c>)
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	089b      	lsrs	r3, r3, #2
 80048d8:	3302      	adds	r3, #2
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	43db      	mvns	r3, r3
 80048ea:	69ba      	ldr	r2, [r7, #24]
 80048ec:	4013      	ands	r3, r2
 80048ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d003      	beq.n	8004904 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80048fc:	69ba      	ldr	r2, [r7, #24]
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	4313      	orrs	r3, r2
 8004902:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	43db      	mvns	r3, r3
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	4013      	ands	r3, r2
 8004918:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	4313      	orrs	r3, r2
 800492c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004934:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	43db      	mvns	r3, r3
 8004940:	69ba      	ldr	r2, [r7, #24]
 8004942:	4013      	ands	r3, r2
 8004944:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	4313      	orrs	r3, r2
 8004958:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800495a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	43db      	mvns	r3, r3
 800496e:	69ba      	ldr	r2, [r7, #24]
 8004970:	4013      	ands	r3, r2
 8004972:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d003      	beq.n	8004988 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	4313      	orrs	r3, r2
 8004986:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004988:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	3301      	adds	r3, #1
 8004994:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	fa22 f303 	lsr.w	r3, r2, r3
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f47f ae63 	bne.w	800466c <HAL_GPIO_Init+0x14>
  }
}
 80049a6:	bf00      	nop
 80049a8:	3724      	adds	r7, #36	; 0x24
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	58000400 	.word	0x58000400

080049b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	460b      	mov	r3, r1
 80049c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	691a      	ldr	r2, [r3, #16]
 80049c8:	887b      	ldrh	r3, [r7, #2]
 80049ca:	4013      	ands	r3, r2
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d002      	beq.n	80049d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80049d0:	2301      	movs	r3, #1
 80049d2:	73fb      	strb	r3, [r7, #15]
 80049d4:	e001      	b.n	80049da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049d6:	2300      	movs	r3, #0
 80049d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80049da:	7bfb      	ldrb	r3, [r7, #15]
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3714      	adds	r7, #20
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	460b      	mov	r3, r1
 80049f2:	807b      	strh	r3, [r7, #2]
 80049f4:	4613      	mov	r3, r2
 80049f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049f8:	787b      	ldrb	r3, [r7, #1]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d003      	beq.n	8004a06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049fe:	887a      	ldrh	r2, [r7, #2]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004a04:	e003      	b.n	8004a0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004a06:	887b      	ldrh	r3, [r7, #2]
 8004a08:	041a      	lsls	r2, r3, #16
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	619a      	str	r2, [r3, #24]
}
 8004a0e:	bf00      	nop
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b083      	sub	sp, #12
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
 8004a22:	460b      	mov	r3, r1
 8004a24:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	695a      	ldr	r2, [r3, #20]
 8004a2a:	887b      	ldrh	r3, [r7, #2]
 8004a2c:	401a      	ands	r2, r3
 8004a2e:	887b      	ldrh	r3, [r7, #2]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d104      	bne.n	8004a3e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004a34:	887b      	ldrh	r3, [r7, #2]
 8004a36:	041a      	lsls	r2, r3, #16
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004a3c:	e002      	b.n	8004a44 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004a3e:	887a      	ldrh	r2, [r7, #2]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	619a      	str	r2, [r3, #24]
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a52:	b08f      	sub	sp, #60	; 0x3c
 8004a54:	af0a      	add	r7, sp, #40	; 0x28
 8004a56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e116      	b.n	8004c90 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d106      	bne.n	8004a82 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f00b fffd 	bl	8010a7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2203      	movs	r2, #3
 8004a86:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d102      	bne.n	8004a9c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f007 fcd8 	bl	800c456 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	603b      	str	r3, [r7, #0]
 8004aac:	687e      	ldr	r6, [r7, #4]
 8004aae:	466d      	mov	r5, sp
 8004ab0:	f106 0410 	add.w	r4, r6, #16
 8004ab4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ab6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ab8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004aba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004abc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ac0:	e885 0003 	stmia.w	r5, {r0, r1}
 8004ac4:	1d33      	adds	r3, r6, #4
 8004ac6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ac8:	6838      	ldr	r0, [r7, #0]
 8004aca:	f007 fbaf 	bl	800c22c <USB_CoreInit>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d005      	beq.n	8004ae0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e0d7      	b.n	8004c90 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f007 fcc6 	bl	800c478 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004aec:	2300      	movs	r3, #0
 8004aee:	73fb      	strb	r3, [r7, #15]
 8004af0:	e04a      	b.n	8004b88 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004af2:	7bfa      	ldrb	r2, [r7, #15]
 8004af4:	6879      	ldr	r1, [r7, #4]
 8004af6:	4613      	mov	r3, r2
 8004af8:	00db      	lsls	r3, r3, #3
 8004afa:	1a9b      	subs	r3, r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	440b      	add	r3, r1
 8004b00:	333d      	adds	r3, #61	; 0x3d
 8004b02:	2201      	movs	r2, #1
 8004b04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004b06:	7bfa      	ldrb	r2, [r7, #15]
 8004b08:	6879      	ldr	r1, [r7, #4]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	00db      	lsls	r3, r3, #3
 8004b0e:	1a9b      	subs	r3, r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	440b      	add	r3, r1
 8004b14:	333c      	adds	r3, #60	; 0x3c
 8004b16:	7bfa      	ldrb	r2, [r7, #15]
 8004b18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004b1a:	7bfa      	ldrb	r2, [r7, #15]
 8004b1c:	7bfb      	ldrb	r3, [r7, #15]
 8004b1e:	b298      	uxth	r0, r3
 8004b20:	6879      	ldr	r1, [r7, #4]
 8004b22:	4613      	mov	r3, r2
 8004b24:	00db      	lsls	r3, r3, #3
 8004b26:	1a9b      	subs	r3, r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	440b      	add	r3, r1
 8004b2c:	3342      	adds	r3, #66	; 0x42
 8004b2e:	4602      	mov	r2, r0
 8004b30:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004b32:	7bfa      	ldrb	r2, [r7, #15]
 8004b34:	6879      	ldr	r1, [r7, #4]
 8004b36:	4613      	mov	r3, r2
 8004b38:	00db      	lsls	r3, r3, #3
 8004b3a:	1a9b      	subs	r3, r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	440b      	add	r3, r1
 8004b40:	333f      	adds	r3, #63	; 0x3f
 8004b42:	2200      	movs	r2, #0
 8004b44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004b46:	7bfa      	ldrb	r2, [r7, #15]
 8004b48:	6879      	ldr	r1, [r7, #4]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	00db      	lsls	r3, r3, #3
 8004b4e:	1a9b      	subs	r3, r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	440b      	add	r3, r1
 8004b54:	3344      	adds	r3, #68	; 0x44
 8004b56:	2200      	movs	r2, #0
 8004b58:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004b5a:	7bfa      	ldrb	r2, [r7, #15]
 8004b5c:	6879      	ldr	r1, [r7, #4]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	00db      	lsls	r3, r3, #3
 8004b62:	1a9b      	subs	r3, r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	440b      	add	r3, r1
 8004b68:	3348      	adds	r3, #72	; 0x48
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004b6e:	7bfa      	ldrb	r2, [r7, #15]
 8004b70:	6879      	ldr	r1, [r7, #4]
 8004b72:	4613      	mov	r3, r2
 8004b74:	00db      	lsls	r3, r3, #3
 8004b76:	1a9b      	subs	r3, r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	440b      	add	r3, r1
 8004b7c:	3350      	adds	r3, #80	; 0x50
 8004b7e:	2200      	movs	r2, #0
 8004b80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b82:	7bfb      	ldrb	r3, [r7, #15]
 8004b84:	3301      	adds	r3, #1
 8004b86:	73fb      	strb	r3, [r7, #15]
 8004b88:	7bfa      	ldrb	r2, [r7, #15]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d3af      	bcc.n	8004af2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b92:	2300      	movs	r3, #0
 8004b94:	73fb      	strb	r3, [r7, #15]
 8004b96:	e044      	b.n	8004c22 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004b98:	7bfa      	ldrb	r2, [r7, #15]
 8004b9a:	6879      	ldr	r1, [r7, #4]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	1a9b      	subs	r3, r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	440b      	add	r3, r1
 8004ba6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004baa:	2200      	movs	r2, #0
 8004bac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004bae:	7bfa      	ldrb	r2, [r7, #15]
 8004bb0:	6879      	ldr	r1, [r7, #4]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	00db      	lsls	r3, r3, #3
 8004bb6:	1a9b      	subs	r3, r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	440b      	add	r3, r1
 8004bbc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004bc0:	7bfa      	ldrb	r2, [r7, #15]
 8004bc2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004bc4:	7bfa      	ldrb	r2, [r7, #15]
 8004bc6:	6879      	ldr	r1, [r7, #4]
 8004bc8:	4613      	mov	r3, r2
 8004bca:	00db      	lsls	r3, r3, #3
 8004bcc:	1a9b      	subs	r3, r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	440b      	add	r3, r1
 8004bd2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004bda:	7bfa      	ldrb	r2, [r7, #15]
 8004bdc:	6879      	ldr	r1, [r7, #4]
 8004bde:	4613      	mov	r3, r2
 8004be0:	00db      	lsls	r3, r3, #3
 8004be2:	1a9b      	subs	r3, r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	440b      	add	r3, r1
 8004be8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004bec:	2200      	movs	r2, #0
 8004bee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004bf0:	7bfa      	ldrb	r2, [r7, #15]
 8004bf2:	6879      	ldr	r1, [r7, #4]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	00db      	lsls	r3, r3, #3
 8004bf8:	1a9b      	subs	r3, r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	440b      	add	r3, r1
 8004bfe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004c02:	2200      	movs	r2, #0
 8004c04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004c06:	7bfa      	ldrb	r2, [r7, #15]
 8004c08:	6879      	ldr	r1, [r7, #4]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	00db      	lsls	r3, r3, #3
 8004c0e:	1a9b      	subs	r3, r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	440b      	add	r3, r1
 8004c14:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004c18:	2200      	movs	r2, #0
 8004c1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
 8004c1e:	3301      	adds	r3, #1
 8004c20:	73fb      	strb	r3, [r7, #15]
 8004c22:	7bfa      	ldrb	r2, [r7, #15]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d3b5      	bcc.n	8004b98 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	603b      	str	r3, [r7, #0]
 8004c32:	687e      	ldr	r6, [r7, #4]
 8004c34:	466d      	mov	r5, sp
 8004c36:	f106 0410 	add.w	r4, r6, #16
 8004c3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c42:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004c46:	e885 0003 	stmia.w	r5, {r0, r1}
 8004c4a:	1d33      	adds	r3, r6, #4
 8004c4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c4e:	6838      	ldr	r0, [r7, #0]
 8004c50:	f007 fc3c 	bl	800c4cc <USB_DevInit>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d005      	beq.n	8004c66 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2202      	movs	r2, #2
 8004c5e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e014      	b.n	8004c90 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d102      	bne.n	8004c84 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f001 f8be 	bl	8005e00 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f008 fc7b 	bl	800d584 <USB_DevDisconnect>

  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3714      	adds	r7, #20
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004c98 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d101      	bne.n	8004cb4 <HAL_PCD_Start+0x1c>
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	e020      	b.n	8004cf6 <HAL_PCD_Start+0x5e>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d109      	bne.n	8004cd8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d005      	beq.n	8004cd8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f008 fc39 	bl	800d554 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f007 fba4 	bl	800c434 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004cfe:	b590      	push	{r4, r7, lr}
 8004d00:	b08d      	sub	sp, #52	; 0x34
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d0c:	6a3b      	ldr	r3, [r7, #32]
 8004d0e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4618      	mov	r0, r3
 8004d16:	f008 fce0 	bl	800d6da <USB_GetMode>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f040 83ca 	bne.w	80054b6 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f008 fc44 	bl	800d5b4 <USB_ReadInterrupts>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f000 83c0 	beq.w	80054b4 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f008 fc3b 	bl	800d5b4 <USB_ReadInterrupts>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	f003 0302 	and.w	r3, r3, #2
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d107      	bne.n	8004d58 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	695a      	ldr	r2, [r3, #20]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f002 0202 	and.w	r2, r2, #2
 8004d56:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f008 fc29 	bl	800d5b4 <USB_ReadInterrupts>
 8004d62:	4603      	mov	r3, r0
 8004d64:	f003 0310 	and.w	r3, r3, #16
 8004d68:	2b10      	cmp	r3, #16
 8004d6a:	d161      	bne.n	8004e30 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	699a      	ldr	r2, [r3, #24]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f022 0210 	bic.w	r2, r2, #16
 8004d7a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004d7c:	6a3b      	ldr	r3, [r7, #32]
 8004d7e:	6a1b      	ldr	r3, [r3, #32]
 8004d80:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	f003 020f 	and.w	r2, r3, #15
 8004d88:	4613      	mov	r3, r2
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	1a9b      	subs	r3, r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	4413      	add	r3, r2
 8004d98:	3304      	adds	r3, #4
 8004d9a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	0c5b      	lsrs	r3, r3, #17
 8004da0:	f003 030f 	and.w	r3, r3, #15
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d124      	bne.n	8004df2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004da8:	69ba      	ldr	r2, [r7, #24]
 8004daa:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004dae:	4013      	ands	r3, r2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d035      	beq.n	8004e20 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	091b      	lsrs	r3, r3, #4
 8004dbc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004dbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	6a38      	ldr	r0, [r7, #32]
 8004dc8:	f008 faa1 	bl	800d30e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	68da      	ldr	r2, [r3, #12]
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	091b      	lsrs	r3, r3, #4
 8004dd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004dd8:	441a      	add	r2, r3
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	699a      	ldr	r2, [r3, #24]
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	091b      	lsrs	r3, r3, #4
 8004de6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004dea:	441a      	add	r2, r3
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	619a      	str	r2, [r3, #24]
 8004df0:	e016      	b.n	8004e20 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	0c5b      	lsrs	r3, r3, #17
 8004df6:	f003 030f 	and.w	r3, r3, #15
 8004dfa:	2b06      	cmp	r3, #6
 8004dfc:	d110      	bne.n	8004e20 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004e04:	2208      	movs	r2, #8
 8004e06:	4619      	mov	r1, r3
 8004e08:	6a38      	ldr	r0, [r7, #32]
 8004e0a:	f008 fa80 	bl	800d30e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	699a      	ldr	r2, [r3, #24]
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	091b      	lsrs	r3, r3, #4
 8004e16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e1a:	441a      	add	r2, r3
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	699a      	ldr	r2, [r3, #24]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f042 0210 	orr.w	r2, r2, #16
 8004e2e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4618      	mov	r0, r3
 8004e36:	f008 fbbd 	bl	800d5b4 <USB_ReadInterrupts>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e40:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e44:	d16e      	bne.n	8004f24 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004e46:	2300      	movs	r3, #0
 8004e48:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f008 fbc3 	bl	800d5da <USB_ReadDevAllOutEpInterrupt>
 8004e54:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004e56:	e062      	b.n	8004f1e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d057      	beq.n	8004f12 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e68:	b2d2      	uxtb	r2, r2
 8004e6a:	4611      	mov	r1, r2
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f008 fbe8 	bl	800d642 <USB_ReadDevOutEPInterrupt>
 8004e72:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00c      	beq.n	8004e98 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	015a      	lsls	r2, r3, #5
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	4413      	add	r3, r2
 8004e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004e90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 fe0a 	bl	8005aac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	f003 0308 	and.w	r3, r3, #8
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00c      	beq.n	8004ebc <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	015a      	lsls	r2, r3, #5
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eae:	461a      	mov	r2, r3
 8004eb0:	2308      	movs	r3, #8
 8004eb2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004eb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 ff04 	bl	8005cc4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	f003 0310 	and.w	r3, r3, #16
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d008      	beq.n	8004ed8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	015a      	lsls	r2, r3, #5
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	4413      	add	r3, r2
 8004ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	2310      	movs	r3, #16
 8004ed6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	f003 0320 	and.w	r3, r3, #32
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d008      	beq.n	8004ef4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee4:	015a      	lsls	r2, r3, #5
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eee:	461a      	mov	r2, r3
 8004ef0:	2320      	movs	r3, #32
 8004ef2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d009      	beq.n	8004f12 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f00:	015a      	lsls	r2, r3, #5
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	4413      	add	r3, r2
 8004f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f10:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	3301      	adds	r3, #1
 8004f16:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1a:	085b      	lsrs	r3, r3, #1
 8004f1c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d199      	bne.n	8004e58 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f008 fb43 	bl	800d5b4 <USB_ReadInterrupts>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f38:	f040 80c0 	bne.w	80050bc <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f008 fb64 	bl	800d60e <USB_ReadDevAllInEpInterrupt>
 8004f46:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004f4c:	e0b2      	b.n	80050b4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 80a7 	beq.w	80050a8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f60:	b2d2      	uxtb	r2, r2
 8004f62:	4611      	mov	r1, r2
 8004f64:	4618      	mov	r0, r3
 8004f66:	f008 fb8a 	bl	800d67e <USB_ReadDevInEPInterrupt>
 8004f6a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d057      	beq.n	8005026 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	f003 030f 	and.w	r3, r3, #15
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f82:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	43db      	mvns	r3, r3
 8004f90:	69f9      	ldr	r1, [r7, #28]
 8004f92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f96:	4013      	ands	r3, r2
 8004f98:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9c:	015a      	lsls	r2, r3, #5
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	2301      	movs	r3, #1
 8004faa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d132      	bne.n	800501a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004fb4:	6879      	ldr	r1, [r7, #4]
 8004fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fb8:	4613      	mov	r3, r2
 8004fba:	00db      	lsls	r3, r3, #3
 8004fbc:	1a9b      	subs	r3, r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	440b      	add	r3, r1
 8004fc2:	3348      	adds	r3, #72	; 0x48
 8004fc4:	6819      	ldr	r1, [r3, #0]
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fca:	4613      	mov	r3, r2
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	1a9b      	subs	r3, r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4403      	add	r3, r0
 8004fd4:	3344      	adds	r3, #68	; 0x44
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4419      	add	r1, r3
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fde:	4613      	mov	r3, r2
 8004fe0:	00db      	lsls	r3, r3, #3
 8004fe2:	1a9b      	subs	r3, r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4403      	add	r3, r0
 8004fe8:	3348      	adds	r3, #72	; 0x48
 8004fea:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d113      	bne.n	800501a <HAL_PCD_IRQHandler+0x31c>
 8004ff2:	6879      	ldr	r1, [r7, #4]
 8004ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	00db      	lsls	r3, r3, #3
 8004ffa:	1a9b      	subs	r3, r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	440b      	add	r3, r1
 8005000:	3350      	adds	r3, #80	; 0x50
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d108      	bne.n	800501a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6818      	ldr	r0, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005012:	461a      	mov	r2, r3
 8005014:	2101      	movs	r1, #1
 8005016:	f008 fb93 	bl	800d740 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800501a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501c:	b2db      	uxtb	r3, r3
 800501e:	4619      	mov	r1, r3
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f00b fdaa 	bl	8010b7a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	f003 0308 	and.w	r3, r3, #8
 800502c:	2b00      	cmp	r3, #0
 800502e:	d008      	beq.n	8005042 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005032:	015a      	lsls	r2, r3, #5
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	4413      	add	r3, r2
 8005038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800503c:	461a      	mov	r2, r3
 800503e:	2308      	movs	r3, #8
 8005040:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	f003 0310 	and.w	r3, r3, #16
 8005048:	2b00      	cmp	r3, #0
 800504a:	d008      	beq.n	800505e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504e:	015a      	lsls	r2, r3, #5
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	4413      	add	r3, r2
 8005054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005058:	461a      	mov	r2, r3
 800505a:	2310      	movs	r3, #16
 800505c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005064:	2b00      	cmp	r3, #0
 8005066:	d008      	beq.n	800507a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506a:	015a      	lsls	r2, r3, #5
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	4413      	add	r3, r2
 8005070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005074:	461a      	mov	r2, r3
 8005076:	2340      	movs	r3, #64	; 0x40
 8005078:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	f003 0302 	and.w	r3, r3, #2
 8005080:	2b00      	cmp	r3, #0
 8005082:	d008      	beq.n	8005096 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005086:	015a      	lsls	r2, r3, #5
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	4413      	add	r3, r2
 800508c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005090:	461a      	mov	r2, r3
 8005092:	2302      	movs	r3, #2
 8005094:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800509c:	2b00      	cmp	r3, #0
 800509e:	d003      	beq.n	80050a8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80050a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 fc75 	bl	8005992 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80050a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050aa:	3301      	adds	r3, #1
 80050ac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80050ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b0:	085b      	lsrs	r3, r3, #1
 80050b2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80050b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f47f af49 	bne.w	8004f4e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4618      	mov	r0, r3
 80050c2:	f008 fa77 	bl	800d5b4 <USB_ReadInterrupts>
 80050c6:	4603      	mov	r3, r0
 80050c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050d0:	d122      	bne.n	8005118 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	69fa      	ldr	r2, [r7, #28]
 80050dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050e0:	f023 0301 	bic.w	r3, r3, #1
 80050e4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d108      	bne.n	8005102 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80050f8:	2100      	movs	r1, #0
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 fea4 	bl	8005e48 <HAL_PCDEx_LPM_Callback>
 8005100:	e002      	b.n	8005108 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f00b fdb0 	bl	8010c68 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	695a      	ldr	r2, [r3, #20]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005116:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4618      	mov	r0, r3
 800511e:	f008 fa49 	bl	800d5b4 <USB_ReadInterrupts>
 8005122:	4603      	mov	r3, r0
 8005124:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005128:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800512c:	d112      	bne.n	8005154 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b01      	cmp	r3, #1
 800513c:	d102      	bne.n	8005144 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f00b fd6c 	bl	8010c1c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	695a      	ldr	r2, [r3, #20]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005152:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4618      	mov	r0, r3
 800515a:	f008 fa2b 	bl	800d5b4 <USB_ReadInterrupts>
 800515e:	4603      	mov	r3, r0
 8005160:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005164:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005168:	d121      	bne.n	80051ae <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	695a      	ldr	r2, [r3, #20]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005178:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005180:	2b00      	cmp	r3, #0
 8005182:	d111      	bne.n	80051a8 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005192:	089b      	lsrs	r3, r3, #2
 8005194:	f003 020f 	and.w	r2, r3, #15
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800519e:	2101      	movs	r1, #1
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 fe51 	bl	8005e48 <HAL_PCDEx_LPM_Callback>
 80051a6:	e002      	b.n	80051ae <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f00b fd37 	bl	8010c1c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f008 f9fe 	bl	800d5b4 <USB_ReadInterrupts>
 80051b8:	4603      	mov	r3, r0
 80051ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051c2:	f040 80c7 	bne.w	8005354 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	69fa      	ldr	r2, [r7, #28]
 80051d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051d4:	f023 0301 	bic.w	r3, r3, #1
 80051d8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2110      	movs	r1, #16
 80051e0:	4618      	mov	r0, r3
 80051e2:	f007 fad1 	bl	800c788 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051e6:	2300      	movs	r3, #0
 80051e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051ea:	e056      	b.n	800529a <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80051ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ee:	015a      	lsls	r2, r3, #5
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	4413      	add	r3, r2
 80051f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f8:	461a      	mov	r2, r3
 80051fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051fe:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	4413      	add	r3, r2
 8005208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005210:	0151      	lsls	r1, r2, #5
 8005212:	69fa      	ldr	r2, [r7, #28]
 8005214:	440a      	add	r2, r1
 8005216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800521a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800521e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	4413      	add	r3, r2
 8005228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005230:	0151      	lsls	r1, r2, #5
 8005232:	69fa      	ldr	r2, [r7, #28]
 8005234:	440a      	add	r2, r1
 8005236:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800523a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800523e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	4413      	add	r3, r2
 8005248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800524c:	461a      	mov	r2, r3
 800524e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005252:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005256:	015a      	lsls	r2, r3, #5
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	4413      	add	r3, r2
 800525c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005264:	0151      	lsls	r1, r2, #5
 8005266:	69fa      	ldr	r2, [r7, #28]
 8005268:	440a      	add	r2, r1
 800526a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800526e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005272:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005276:	015a      	lsls	r2, r3, #5
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	4413      	add	r3, r2
 800527c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005284:	0151      	lsls	r1, r2, #5
 8005286:	69fa      	ldr	r2, [r7, #28]
 8005288:	440a      	add	r2, r1
 800528a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800528e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005292:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005296:	3301      	adds	r3, #1
 8005298:	62fb      	str	r3, [r7, #44]	; 0x2c
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d3a3      	bcc.n	80051ec <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052aa:	69db      	ldr	r3, [r3, #28]
 80052ac:	69fa      	ldr	r2, [r7, #28]
 80052ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052b2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80052b6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d016      	beq.n	80052ee <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052ca:	69fa      	ldr	r2, [r7, #28]
 80052cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052d0:	f043 030b 	orr.w	r3, r3, #11
 80052d4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e0:	69fa      	ldr	r2, [r7, #28]
 80052e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052e6:	f043 030b 	orr.w	r3, r3, #11
 80052ea:	6453      	str	r3, [r2, #68]	; 0x44
 80052ec:	e015      	b.n	800531a <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f4:	695a      	ldr	r2, [r3, #20]
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052fc:	4619      	mov	r1, r3
 80052fe:	f242 032b 	movw	r3, #8235	; 0x202b
 8005302:	4313      	orrs	r3, r2
 8005304:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	69fa      	ldr	r2, [r7, #28]
 8005310:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005314:	f043 030b 	orr.w	r3, r3, #11
 8005318:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	69fa      	ldr	r2, [r7, #28]
 8005324:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005328:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800532c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6818      	ldr	r0, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800533e:	461a      	mov	r2, r3
 8005340:	f008 f9fe 	bl	800d740 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	695a      	ldr	r2, [r3, #20]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005352:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4618      	mov	r0, r3
 800535a:	f008 f92b 	bl	800d5b4 <USB_ReadInterrupts>
 800535e:	4603      	mov	r3, r0
 8005360:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005364:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005368:	d124      	bne.n	80053b4 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4618      	mov	r0, r3
 8005370:	f008 f9c2 	bl	800d6f8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4618      	mov	r0, r3
 800537a:	f007 fa66 	bl	800c84a <USB_GetDevSpeed>
 800537e:	4603      	mov	r3, r0
 8005380:	461a      	mov	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681c      	ldr	r4, [r3, #0]
 800538a:	f001 fceb 	bl	8006d64 <HAL_RCC_GetHCLKFreq>
 800538e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005394:	b2db      	uxtb	r3, r3
 8005396:	461a      	mov	r2, r3
 8005398:	4620      	mov	r0, r4
 800539a:	f006 ffa9 	bl	800c2f0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f00b fc13 	bl	8010bca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	695a      	ldr	r2, [r3, #20]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80053b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4618      	mov	r0, r3
 80053ba:	f008 f8fb 	bl	800d5b4 <USB_ReadInterrupts>
 80053be:	4603      	mov	r3, r0
 80053c0:	f003 0308 	and.w	r3, r3, #8
 80053c4:	2b08      	cmp	r3, #8
 80053c6:	d10a      	bne.n	80053de <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f00b fbf0 	bl	8010bae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	695a      	ldr	r2, [r3, #20]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f002 0208 	and.w	r2, r2, #8
 80053dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f008 f8e6 	bl	800d5b4 <USB_ReadInterrupts>
 80053e8:	4603      	mov	r3, r0
 80053ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053f2:	d10f      	bne.n	8005414 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80053f4:	2300      	movs	r3, #0
 80053f6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80053f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	4619      	mov	r1, r3
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f00b fc52 	bl	8010ca8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	695a      	ldr	r2, [r3, #20]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005412:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4618      	mov	r0, r3
 800541a:	f008 f8cb 	bl	800d5b4 <USB_ReadInterrupts>
 800541e:	4603      	mov	r3, r0
 8005420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005424:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005428:	d10f      	bne.n	800544a <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800542a:	2300      	movs	r3, #0
 800542c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800542e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005430:	b2db      	uxtb	r3, r3
 8005432:	4619      	mov	r1, r3
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f00b fc25 	bl	8010c84 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	695a      	ldr	r2, [r3, #20]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005448:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4618      	mov	r0, r3
 8005450:	f008 f8b0 	bl	800d5b4 <USB_ReadInterrupts>
 8005454:	4603      	mov	r3, r0
 8005456:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800545a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800545e:	d10a      	bne.n	8005476 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f00b fc33 	bl	8010ccc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	695a      	ldr	r2, [r3, #20]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005474:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4618      	mov	r0, r3
 800547c:	f008 f89a 	bl	800d5b4 <USB_ReadInterrupts>
 8005480:	4603      	mov	r3, r0
 8005482:	f003 0304 	and.w	r3, r3, #4
 8005486:	2b04      	cmp	r3, #4
 8005488:	d115      	bne.n	80054b6 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	f003 0304 	and.w	r3, r3, #4
 8005498:	2b00      	cmp	r3, #0
 800549a:	d002      	beq.n	80054a2 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f00b fc23 	bl	8010ce8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	6859      	ldr	r1, [r3, #4]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	69ba      	ldr	r2, [r7, #24]
 80054ae:	430a      	orrs	r2, r1
 80054b0:	605a      	str	r2, [r3, #4]
 80054b2:	e000      	b.n	80054b6 <HAL_PCD_IRQHandler+0x7b8>
      return;
 80054b4:	bf00      	nop
    }
  }
}
 80054b6:	3734      	adds	r7, #52	; 0x34
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd90      	pop	{r4, r7, pc}

080054bc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	460b      	mov	r3, r1
 80054c6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d101      	bne.n	80054d6 <HAL_PCD_SetAddress+0x1a>
 80054d2:	2302      	movs	r3, #2
 80054d4:	e013      	b.n	80054fe <HAL_PCD_SetAddress+0x42>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	78fa      	ldrb	r2, [r7, #3]
 80054e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	78fa      	ldrb	r2, [r7, #3]
 80054ec:	4611      	mov	r1, r2
 80054ee:	4618      	mov	r0, r3
 80054f0:	f008 f80a 	bl	800d508 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3708      	adds	r7, #8
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b084      	sub	sp, #16
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
 800550e:	4608      	mov	r0, r1
 8005510:	4611      	mov	r1, r2
 8005512:	461a      	mov	r2, r3
 8005514:	4603      	mov	r3, r0
 8005516:	70fb      	strb	r3, [r7, #3]
 8005518:	460b      	mov	r3, r1
 800551a:	803b      	strh	r3, [r7, #0]
 800551c:	4613      	mov	r3, r2
 800551e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005520:	2300      	movs	r3, #0
 8005522:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005524:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005528:	2b00      	cmp	r3, #0
 800552a:	da0f      	bge.n	800554c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800552c:	78fb      	ldrb	r3, [r7, #3]
 800552e:	f003 020f 	and.w	r2, r3, #15
 8005532:	4613      	mov	r3, r2
 8005534:	00db      	lsls	r3, r3, #3
 8005536:	1a9b      	subs	r3, r3, r2
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	3338      	adds	r3, #56	; 0x38
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	4413      	add	r3, r2
 8005540:	3304      	adds	r3, #4
 8005542:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2201      	movs	r2, #1
 8005548:	705a      	strb	r2, [r3, #1]
 800554a:	e00f      	b.n	800556c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800554c:	78fb      	ldrb	r3, [r7, #3]
 800554e:	f003 020f 	and.w	r2, r3, #15
 8005552:	4613      	mov	r3, r2
 8005554:	00db      	lsls	r3, r3, #3
 8005556:	1a9b      	subs	r3, r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	4413      	add	r3, r2
 8005562:	3304      	adds	r3, #4
 8005564:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800556c:	78fb      	ldrb	r3, [r7, #3]
 800556e:	f003 030f 	and.w	r3, r3, #15
 8005572:	b2da      	uxtb	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005578:	883a      	ldrh	r2, [r7, #0]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	78ba      	ldrb	r2, [r7, #2]
 8005582:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	785b      	ldrb	r3, [r3, #1]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d004      	beq.n	8005596 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	b29a      	uxth	r2, r3
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005596:	78bb      	ldrb	r3, [r7, #2]
 8005598:	2b02      	cmp	r3, #2
 800559a:	d102      	bne.n	80055a2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d101      	bne.n	80055b0 <HAL_PCD_EP_Open+0xaa>
 80055ac:	2302      	movs	r3, #2
 80055ae:	e00e      	b.n	80055ce <HAL_PCD_EP_Open+0xc8>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68f9      	ldr	r1, [r7, #12]
 80055be:	4618      	mov	r0, r3
 80055c0:	f007 f968 	bl	800c894 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80055cc:	7afb      	ldrb	r3, [r7, #11]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3710      	adds	r7, #16
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b084      	sub	sp, #16
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
 80055de:	460b      	mov	r3, r1
 80055e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80055e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	da0f      	bge.n	800560a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055ea:	78fb      	ldrb	r3, [r7, #3]
 80055ec:	f003 020f 	and.w	r2, r3, #15
 80055f0:	4613      	mov	r3, r2
 80055f2:	00db      	lsls	r3, r3, #3
 80055f4:	1a9b      	subs	r3, r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	3338      	adds	r3, #56	; 0x38
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	4413      	add	r3, r2
 80055fe:	3304      	adds	r3, #4
 8005600:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2201      	movs	r2, #1
 8005606:	705a      	strb	r2, [r3, #1]
 8005608:	e00f      	b.n	800562a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800560a:	78fb      	ldrb	r3, [r7, #3]
 800560c:	f003 020f 	and.w	r2, r3, #15
 8005610:	4613      	mov	r3, r2
 8005612:	00db      	lsls	r3, r3, #3
 8005614:	1a9b      	subs	r3, r3, r2
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	4413      	add	r3, r2
 8005620:	3304      	adds	r3, #4
 8005622:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800562a:	78fb      	ldrb	r3, [r7, #3]
 800562c:	f003 030f 	and.w	r3, r3, #15
 8005630:	b2da      	uxtb	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800563c:	2b01      	cmp	r3, #1
 800563e:	d101      	bne.n	8005644 <HAL_PCD_EP_Close+0x6e>
 8005640:	2302      	movs	r3, #2
 8005642:	e00e      	b.n	8005662 <HAL_PCD_EP_Close+0x8c>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68f9      	ldr	r1, [r7, #12]
 8005652:	4618      	mov	r0, r3
 8005654:	f007 f9a6 	bl	800c9a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b086      	sub	sp, #24
 800566e:	af00      	add	r7, sp, #0
 8005670:	60f8      	str	r0, [r7, #12]
 8005672:	607a      	str	r2, [r7, #4]
 8005674:	603b      	str	r3, [r7, #0]
 8005676:	460b      	mov	r3, r1
 8005678:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800567a:	7afb      	ldrb	r3, [r7, #11]
 800567c:	f003 020f 	and.w	r2, r3, #15
 8005680:	4613      	mov	r3, r2
 8005682:	00db      	lsls	r3, r3, #3
 8005684:	1a9b      	subs	r3, r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	4413      	add	r3, r2
 8005690:	3304      	adds	r3, #4
 8005692:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	683a      	ldr	r2, [r7, #0]
 800569e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	2200      	movs	r2, #0
 80056a4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	2200      	movs	r2, #0
 80056aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80056ac:	7afb      	ldrb	r3, [r7, #11]
 80056ae:	f003 030f 	and.w	r3, r3, #15
 80056b2:	b2da      	uxtb	r2, r3
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d102      	bne.n	80056c6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80056c6:	7afb      	ldrb	r3, [r7, #11]
 80056c8:	f003 030f 	and.w	r3, r3, #15
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d109      	bne.n	80056e4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6818      	ldr	r0, [r3, #0]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	461a      	mov	r2, r3
 80056dc:	6979      	ldr	r1, [r7, #20]
 80056de:	f007 fc89 	bl	800cff4 <USB_EP0StartXfer>
 80056e2:	e008      	b.n	80056f6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6818      	ldr	r0, [r3, #0]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	461a      	mov	r2, r3
 80056f0:	6979      	ldr	r1, [r7, #20]
 80056f2:	f007 fa33 	bl	800cb5c <USB_EPStartXfer>
  }

  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3718      	adds	r7, #24
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	460b      	mov	r3, r1
 800570a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800570c:	78fb      	ldrb	r3, [r7, #3]
 800570e:	f003 020f 	and.w	r2, r3, #15
 8005712:	6879      	ldr	r1, [r7, #4]
 8005714:	4613      	mov	r3, r2
 8005716:	00db      	lsls	r3, r3, #3
 8005718:	1a9b      	subs	r3, r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	440b      	add	r3, r1
 800571e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005722:	681b      	ldr	r3, [r3, #0]
}
 8005724:	4618      	mov	r0, r3
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b086      	sub	sp, #24
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	607a      	str	r2, [r7, #4]
 800573a:	603b      	str	r3, [r7, #0]
 800573c:	460b      	mov	r3, r1
 800573e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005740:	7afb      	ldrb	r3, [r7, #11]
 8005742:	f003 020f 	and.w	r2, r3, #15
 8005746:	4613      	mov	r3, r2
 8005748:	00db      	lsls	r3, r3, #3
 800574a:	1a9b      	subs	r3, r3, r2
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	3338      	adds	r3, #56	; 0x38
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	4413      	add	r3, r2
 8005754:	3304      	adds	r3, #4
 8005756:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	683a      	ldr	r2, [r7, #0]
 8005762:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	2200      	movs	r2, #0
 8005768:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	2201      	movs	r2, #1
 800576e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005770:	7afb      	ldrb	r3, [r7, #11]
 8005772:	f003 030f 	and.w	r3, r3, #15
 8005776:	b2da      	uxtb	r2, r3
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d102      	bne.n	800578a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800578a:	7afb      	ldrb	r3, [r7, #11]
 800578c:	f003 030f 	and.w	r3, r3, #15
 8005790:	2b00      	cmp	r3, #0
 8005792:	d109      	bne.n	80057a8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6818      	ldr	r0, [r3, #0]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	b2db      	uxtb	r3, r3
 800579e:	461a      	mov	r2, r3
 80057a0:	6979      	ldr	r1, [r7, #20]
 80057a2:	f007 fc27 	bl	800cff4 <USB_EP0StartXfer>
 80057a6:	e008      	b.n	80057ba <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6818      	ldr	r0, [r3, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	461a      	mov	r2, r3
 80057b4:	6979      	ldr	r1, [r7, #20]
 80057b6:	f007 f9d1 	bl	800cb5c <USB_EPStartXfer>
  }

  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3718      	adds	r7, #24
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	460b      	mov	r3, r1
 80057ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80057d0:	78fb      	ldrb	r3, [r7, #3]
 80057d2:	f003 020f 	and.w	r2, r3, #15
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d901      	bls.n	80057e2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e050      	b.n	8005884 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80057e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	da0f      	bge.n	800580a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057ea:	78fb      	ldrb	r3, [r7, #3]
 80057ec:	f003 020f 	and.w	r2, r3, #15
 80057f0:	4613      	mov	r3, r2
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	1a9b      	subs	r3, r3, r2
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	3338      	adds	r3, #56	; 0x38
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	4413      	add	r3, r2
 80057fe:	3304      	adds	r3, #4
 8005800:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2201      	movs	r2, #1
 8005806:	705a      	strb	r2, [r3, #1]
 8005808:	e00d      	b.n	8005826 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800580a:	78fa      	ldrb	r2, [r7, #3]
 800580c:	4613      	mov	r3, r2
 800580e:	00db      	lsls	r3, r3, #3
 8005810:	1a9b      	subs	r3, r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	4413      	add	r3, r2
 800581c:	3304      	adds	r3, #4
 800581e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2201      	movs	r2, #1
 800582a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800582c:	78fb      	ldrb	r3, [r7, #3]
 800582e:	f003 030f 	and.w	r3, r3, #15
 8005832:	b2da      	uxtb	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800583e:	2b01      	cmp	r3, #1
 8005840:	d101      	bne.n	8005846 <HAL_PCD_EP_SetStall+0x82>
 8005842:	2302      	movs	r3, #2
 8005844:	e01e      	b.n	8005884 <HAL_PCD_EP_SetStall+0xc0>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2201      	movs	r2, #1
 800584a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68f9      	ldr	r1, [r7, #12]
 8005854:	4618      	mov	r0, r3
 8005856:	f007 fd83 	bl	800d360 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800585a:	78fb      	ldrb	r3, [r7, #3]
 800585c:	f003 030f 	and.w	r3, r3, #15
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10a      	bne.n	800587a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6818      	ldr	r0, [r3, #0]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	b2d9      	uxtb	r1, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005874:	461a      	mov	r2, r3
 8005876:	f007 ff63 	bl	800d740 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	3710      	adds	r7, #16
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	460b      	mov	r3, r1
 8005896:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005898:	78fb      	ldrb	r3, [r7, #3]
 800589a:	f003 020f 	and.w	r2, r3, #15
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d901      	bls.n	80058aa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e042      	b.n	8005930 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80058aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	da0f      	bge.n	80058d2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058b2:	78fb      	ldrb	r3, [r7, #3]
 80058b4:	f003 020f 	and.w	r2, r3, #15
 80058b8:	4613      	mov	r3, r2
 80058ba:	00db      	lsls	r3, r3, #3
 80058bc:	1a9b      	subs	r3, r3, r2
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	3338      	adds	r3, #56	; 0x38
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	4413      	add	r3, r2
 80058c6:	3304      	adds	r3, #4
 80058c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2201      	movs	r2, #1
 80058ce:	705a      	strb	r2, [r3, #1]
 80058d0:	e00f      	b.n	80058f2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058d2:	78fb      	ldrb	r3, [r7, #3]
 80058d4:	f003 020f 	and.w	r2, r3, #15
 80058d8:	4613      	mov	r3, r2
 80058da:	00db      	lsls	r3, r3, #3
 80058dc:	1a9b      	subs	r3, r3, r2
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	4413      	add	r3, r2
 80058e8:	3304      	adds	r3, #4
 80058ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80058f8:	78fb      	ldrb	r3, [r7, #3]
 80058fa:	f003 030f 	and.w	r3, r3, #15
 80058fe:	b2da      	uxtb	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800590a:	2b01      	cmp	r3, #1
 800590c:	d101      	bne.n	8005912 <HAL_PCD_EP_ClrStall+0x86>
 800590e:	2302      	movs	r3, #2
 8005910:	e00e      	b.n	8005930 <HAL_PCD_EP_ClrStall+0xa4>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68f9      	ldr	r1, [r7, #12]
 8005920:	4618      	mov	r0, r3
 8005922:	f007 fd8b 	bl	800d43c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	3710      	adds	r7, #16
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	460b      	mov	r3, r1
 8005942:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800594a:	2b01      	cmp	r3, #1
 800594c:	d101      	bne.n	8005952 <HAL_PCD_EP_Flush+0x1a>
 800594e:	2302      	movs	r3, #2
 8005950:	e01b      	b.n	800598a <HAL_PCD_EP_Flush+0x52>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 800595a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800595e:	2b00      	cmp	r3, #0
 8005960:	da09      	bge.n	8005976 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	78fb      	ldrb	r3, [r7, #3]
 8005968:	f003 030f 	and.w	r3, r3, #15
 800596c:	4619      	mov	r1, r3
 800596e:	4610      	mov	r0, r2
 8005970:	f006 ff0a 	bl	800c788 <USB_FlushTxFifo>
 8005974:	e004      	b.n	8005980 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4618      	mov	r0, r3
 800597c:	f006 ff2a 	bl	800c7d4 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005992:	b580      	push	{r7, lr}
 8005994:	b08a      	sub	sp, #40	; 0x28
 8005996:	af02      	add	r7, sp, #8
 8005998:	6078      	str	r0, [r7, #4]
 800599a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80059a6:	683a      	ldr	r2, [r7, #0]
 80059a8:	4613      	mov	r3, r2
 80059aa:	00db      	lsls	r3, r3, #3
 80059ac:	1a9b      	subs	r3, r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	3338      	adds	r3, #56	; 0x38
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	4413      	add	r3, r2
 80059b6:	3304      	adds	r3, #4
 80059b8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	699a      	ldr	r2, [r3, #24]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d901      	bls.n	80059ca <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e06c      	b.n	8005aa4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	695a      	ldr	r2, [r3, #20]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	69fa      	ldr	r2, [r7, #28]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d902      	bls.n	80059e6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	3303      	adds	r3, #3
 80059ea:	089b      	lsrs	r3, r3, #2
 80059ec:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80059ee:	e02b      	b.n	8005a48 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	695a      	ldr	r2, [r3, #20]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	69fa      	ldr	r2, [r7, #28]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d902      	bls.n	8005a0c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	3303      	adds	r3, #3
 8005a10:	089b      	lsrs	r3, r3, #2
 8005a12:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	68d9      	ldr	r1, [r3, #12]
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	b2da      	uxtb	r2, r3
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	9300      	str	r3, [sp, #0]
 8005a28:	4603      	mov	r3, r0
 8005a2a:	6978      	ldr	r0, [r7, #20]
 8005a2c:	f007 fc3a 	bl	800d2a4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	68da      	ldr	r2, [r3, #12]
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	441a      	add	r2, r3
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	699a      	ldr	r2, [r3, #24]
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	441a      	add	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	015a      	lsls	r2, r3, #5
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	4413      	add	r3, r2
 8005a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	69ba      	ldr	r2, [r7, #24]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d809      	bhi.n	8005a72 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	699a      	ldr	r2, [r3, #24]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d203      	bcs.n	8005a72 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1be      	bne.n	80059f0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	695a      	ldr	r2, [r3, #20]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d811      	bhi.n	8005aa2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	f003 030f 	and.w	r3, r3, #15
 8005a84:	2201      	movs	r2, #1
 8005a86:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	43db      	mvns	r3, r3
 8005a98:	6939      	ldr	r1, [r7, #16]
 8005a9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3720      	adds	r7, #32
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b086      	sub	sp, #24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	333c      	adds	r3, #60	; 0x3c
 8005ac4:	3304      	adds	r3, #4
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	015a      	lsls	r2, r3, #5
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	f040 80a0 	bne.w	8005c24 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	f003 0308 	and.w	r3, r3, #8
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d015      	beq.n	8005b1a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	4a72      	ldr	r2, [pc, #456]	; (8005cbc <PCD_EP_OutXfrComplete_int+0x210>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	f240 80dd 	bls.w	8005cb2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f000 80d7 	beq.w	8005cb2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	015a      	lsls	r2, r3, #5
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b10:	461a      	mov	r2, r3
 8005b12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b16:	6093      	str	r3, [r2, #8]
 8005b18:	e0cb      	b.n	8005cb2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	f003 0320 	and.w	r3, r3, #32
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d009      	beq.n	8005b38 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	015a      	lsls	r2, r3, #5
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b30:	461a      	mov	r2, r3
 8005b32:	2320      	movs	r3, #32
 8005b34:	6093      	str	r3, [r2, #8]
 8005b36:	e0bc      	b.n	8005cb2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f040 80b7 	bne.w	8005cb2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	4a5d      	ldr	r2, [pc, #372]	; (8005cbc <PCD_EP_OutXfrComplete_int+0x210>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d90f      	bls.n	8005b6c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00a      	beq.n	8005b6c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	015a      	lsls	r2, r3, #5
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b62:	461a      	mov	r2, r3
 8005b64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b68:	6093      	str	r3, [r2, #8]
 8005b6a:	e0a2      	b.n	8005cb2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005b6c:	6879      	ldr	r1, [r7, #4]
 8005b6e:	683a      	ldr	r2, [r7, #0]
 8005b70:	4613      	mov	r3, r2
 8005b72:	00db      	lsls	r3, r3, #3
 8005b74:	1a9b      	subs	r3, r3, r2
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	440b      	add	r3, r1
 8005b7a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005b7e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	0159      	lsls	r1, r3, #5
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	440b      	add	r3, r1
 8005b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005b92:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	683a      	ldr	r2, [r7, #0]
 8005b98:	4613      	mov	r3, r2
 8005b9a:	00db      	lsls	r3, r3, #3
 8005b9c:	1a9b      	subs	r3, r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	4403      	add	r3, r0
 8005ba2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005ba6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005ba8:	6879      	ldr	r1, [r7, #4]
 8005baa:	683a      	ldr	r2, [r7, #0]
 8005bac:	4613      	mov	r3, r2
 8005bae:	00db      	lsls	r3, r3, #3
 8005bb0:	1a9b      	subs	r3, r3, r2
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	440b      	add	r3, r1
 8005bb6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005bba:	6819      	ldr	r1, [r3, #0]
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	683a      	ldr	r2, [r7, #0]
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	00db      	lsls	r3, r3, #3
 8005bc4:	1a9b      	subs	r3, r3, r2
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	4403      	add	r3, r0
 8005bca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4419      	add	r1, r3
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	683a      	ldr	r2, [r7, #0]
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	00db      	lsls	r3, r3, #3
 8005bda:	1a9b      	subs	r3, r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4403      	add	r3, r0
 8005be0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005be4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d114      	bne.n	8005c16 <PCD_EP_OutXfrComplete_int+0x16a>
 8005bec:	6879      	ldr	r1, [r7, #4]
 8005bee:	683a      	ldr	r2, [r7, #0]
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	00db      	lsls	r3, r3, #3
 8005bf4:	1a9b      	subs	r3, r3, r2
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	440b      	add	r3, r1
 8005bfa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d108      	bne.n	8005c16 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6818      	ldr	r0, [r3, #0]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005c0e:	461a      	mov	r2, r3
 8005c10:	2101      	movs	r1, #1
 8005c12:	f007 fd95 	bl	800d740 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f00a ff91 	bl	8010b44 <HAL_PCD_DataOutStageCallback>
 8005c22:	e046      	b.n	8005cb2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	4a26      	ldr	r2, [pc, #152]	; (8005cc0 <PCD_EP_OutXfrComplete_int+0x214>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d124      	bne.n	8005c76 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00a      	beq.n	8005c4c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c42:	461a      	mov	r2, r3
 8005c44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c48:	6093      	str	r3, [r2, #8]
 8005c4a:	e032      	b.n	8005cb2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	f003 0320 	and.w	r3, r3, #32
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d008      	beq.n	8005c68 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c62:	461a      	mov	r2, r3
 8005c64:	2320      	movs	r3, #32
 8005c66:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f00a ff68 	bl	8010b44 <HAL_PCD_DataOutStageCallback>
 8005c74:	e01d      	b.n	8005cb2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d114      	bne.n	8005ca6 <PCD_EP_OutXfrComplete_int+0x1fa>
 8005c7c:	6879      	ldr	r1, [r7, #4]
 8005c7e:	683a      	ldr	r2, [r7, #0]
 8005c80:	4613      	mov	r3, r2
 8005c82:	00db      	lsls	r3, r3, #3
 8005c84:	1a9b      	subs	r3, r3, r2
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	440b      	add	r3, r1
 8005c8a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d108      	bne.n	8005ca6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6818      	ldr	r0, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	2100      	movs	r1, #0
 8005ca2:	f007 fd4d 	bl	800d740 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	4619      	mov	r1, r3
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f00a ff49 	bl	8010b44 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3718      	adds	r7, #24
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	4f54300a 	.word	0x4f54300a
 8005cc0:	4f54310a 	.word	0x4f54310a

08005cc4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	333c      	adds	r3, #60	; 0x3c
 8005cdc:	3304      	adds	r3, #4
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	015a      	lsls	r2, r3, #5
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	4413      	add	r3, r2
 8005cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	4a15      	ldr	r2, [pc, #84]	; (8005d4c <PCD_EP_OutSetupPacket_int+0x88>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d90e      	bls.n	8005d18 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d009      	beq.n	8005d18 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	015a      	lsls	r2, r3, #5
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d10:	461a      	mov	r2, r3
 8005d12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d16:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f00a ff01 	bl	8010b20 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	4a0a      	ldr	r2, [pc, #40]	; (8005d4c <PCD_EP_OutSetupPacket_int+0x88>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d90c      	bls.n	8005d40 <PCD_EP_OutSetupPacket_int+0x7c>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d108      	bne.n	8005d40 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6818      	ldr	r0, [r3, #0]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005d38:	461a      	mov	r2, r3
 8005d3a:	2101      	movs	r1, #1
 8005d3c:	f007 fd00 	bl	800d740 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3718      	adds	r7, #24
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	4f54300a 	.word	0x4f54300a

08005d50 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	460b      	mov	r3, r1
 8005d5a:	70fb      	strb	r3, [r7, #3]
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d66:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005d68:	78fb      	ldrb	r3, [r7, #3]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d107      	bne.n	8005d7e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005d6e:	883b      	ldrh	r3, [r7, #0]
 8005d70:	0419      	lsls	r1, r3, #16
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	430a      	orrs	r2, r1
 8005d7a:	629a      	str	r2, [r3, #40]	; 0x28
 8005d7c:	e028      	b.n	8005dd0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d84:	0c1b      	lsrs	r3, r3, #16
 8005d86:	68ba      	ldr	r2, [r7, #8]
 8005d88:	4413      	add	r3, r2
 8005d8a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	73fb      	strb	r3, [r7, #15]
 8005d90:	e00d      	b.n	8005dae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	7bfb      	ldrb	r3, [r7, #15]
 8005d98:	3340      	adds	r3, #64	; 0x40
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	4413      	add	r3, r2
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	0c1b      	lsrs	r3, r3, #16
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	4413      	add	r3, r2
 8005da6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005da8:	7bfb      	ldrb	r3, [r7, #15]
 8005daa:	3301      	adds	r3, #1
 8005dac:	73fb      	strb	r3, [r7, #15]
 8005dae:	7bfa      	ldrb	r2, [r7, #15]
 8005db0:	78fb      	ldrb	r3, [r7, #3]
 8005db2:	3b01      	subs	r3, #1
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d3ec      	bcc.n	8005d92 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005db8:	883b      	ldrh	r3, [r7, #0]
 8005dba:	0418      	lsls	r0, r3, #16
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6819      	ldr	r1, [r3, #0]
 8005dc0:	78fb      	ldrb	r3, [r7, #3]
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	68ba      	ldr	r2, [r7, #8]
 8005dc6:	4302      	orrs	r2, r0
 8005dc8:	3340      	adds	r3, #64	; 0x40
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	440b      	add	r3, r1
 8005dce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3714      	adds	r7, #20
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005dde:	b480      	push	{r7}
 8005de0:	b083      	sub	sp, #12
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
 8005de6:	460b      	mov	r3, r1
 8005de8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	887a      	ldrh	r2, [r7, #2]
 8005df0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e2e:	4b05      	ldr	r3, [pc, #20]	; (8005e44 <HAL_PCDEx_ActivateLPM+0x44>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3714      	adds	r7, #20
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr
 8005e44:	10000003 	.word	0x10000003

08005e48 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	460b      	mov	r3, r1
 8005e52:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005e68:	4b19      	ldr	r3, [pc, #100]	; (8005ed0 <HAL_PWREx_ConfigSupply+0x70>)
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	f003 0304 	and.w	r3, r3, #4
 8005e70:	2b04      	cmp	r3, #4
 8005e72:	d00a      	beq.n	8005e8a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005e74:	4b16      	ldr	r3, [pc, #88]	; (8005ed0 <HAL_PWREx_ConfigSupply+0x70>)
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	f003 0307 	and.w	r3, r3, #7
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d001      	beq.n	8005e86 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e01f      	b.n	8005ec6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005e86:	2300      	movs	r3, #0
 8005e88:	e01d      	b.n	8005ec6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005e8a:	4b11      	ldr	r3, [pc, #68]	; (8005ed0 <HAL_PWREx_ConfigSupply+0x70>)
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	f023 0207 	bic.w	r2, r3, #7
 8005e92:	490f      	ldr	r1, [pc, #60]	; (8005ed0 <HAL_PWREx_ConfigSupply+0x70>)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005e9a:	f7fb fc95 	bl	80017c8 <HAL_GetTick>
 8005e9e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005ea0:	e009      	b.n	8005eb6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005ea2:	f7fb fc91 	bl	80017c8 <HAL_GetTick>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005eb0:	d901      	bls.n	8005eb6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e007      	b.n	8005ec6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005eb6:	4b06      	ldr	r3, [pc, #24]	; (8005ed0 <HAL_PWREx_ConfigSupply+0x70>)
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ec2:	d1ee      	bne.n	8005ea2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	58024800 	.word	0x58024800

08005ed4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005ed8:	4b05      	ldr	r3, [pc, #20]	; (8005ef0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	4a04      	ldr	r2, [pc, #16]	; (8005ef0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005ede:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ee2:	60d3      	str	r3, [r2, #12]
}
 8005ee4:	bf00      	nop
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	58024800 	.word	0x58024800

08005ef4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b08c      	sub	sp, #48	; 0x30
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d101      	bne.n	8005f06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e3ff      	b.n	8006706 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0301 	and.w	r3, r3, #1
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f000 8087 	beq.w	8006022 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f14:	4b99      	ldr	r3, [pc, #612]	; (800617c <HAL_RCC_OscConfig+0x288>)
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f1e:	4b97      	ldr	r3, [pc, #604]	; (800617c <HAL_RCC_OscConfig+0x288>)
 8005f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f22:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f26:	2b10      	cmp	r3, #16
 8005f28:	d007      	beq.n	8005f3a <HAL_RCC_OscConfig+0x46>
 8005f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2c:	2b18      	cmp	r3, #24
 8005f2e:	d110      	bne.n	8005f52 <HAL_RCC_OscConfig+0x5e>
 8005f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f32:	f003 0303 	and.w	r3, r3, #3
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d10b      	bne.n	8005f52 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f3a:	4b90      	ldr	r3, [pc, #576]	; (800617c <HAL_RCC_OscConfig+0x288>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d06c      	beq.n	8006020 <HAL_RCC_OscConfig+0x12c>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d168      	bne.n	8006020 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e3d9      	b.n	8006706 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f5a:	d106      	bne.n	8005f6a <HAL_RCC_OscConfig+0x76>
 8005f5c:	4b87      	ldr	r3, [pc, #540]	; (800617c <HAL_RCC_OscConfig+0x288>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a86      	ldr	r2, [pc, #536]	; (800617c <HAL_RCC_OscConfig+0x288>)
 8005f62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f66:	6013      	str	r3, [r2, #0]
 8005f68:	e02e      	b.n	8005fc8 <HAL_RCC_OscConfig+0xd4>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d10c      	bne.n	8005f8c <HAL_RCC_OscConfig+0x98>
 8005f72:	4b82      	ldr	r3, [pc, #520]	; (800617c <HAL_RCC_OscConfig+0x288>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a81      	ldr	r2, [pc, #516]	; (800617c <HAL_RCC_OscConfig+0x288>)
 8005f78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f7c:	6013      	str	r3, [r2, #0]
 8005f7e:	4b7f      	ldr	r3, [pc, #508]	; (800617c <HAL_RCC_OscConfig+0x288>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a7e      	ldr	r2, [pc, #504]	; (800617c <HAL_RCC_OscConfig+0x288>)
 8005f84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f88:	6013      	str	r3, [r2, #0]
 8005f8a:	e01d      	b.n	8005fc8 <HAL_RCC_OscConfig+0xd4>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f94:	d10c      	bne.n	8005fb0 <HAL_RCC_OscConfig+0xbc>
 8005f96:	4b79      	ldr	r3, [pc, #484]	; (800617c <HAL_RCC_OscConfig+0x288>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a78      	ldr	r2, [pc, #480]	; (800617c <HAL_RCC_OscConfig+0x288>)
 8005f9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fa0:	6013      	str	r3, [r2, #0]
 8005fa2:	4b76      	ldr	r3, [pc, #472]	; (800617c <HAL_RCC_OscConfig+0x288>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a75      	ldr	r2, [pc, #468]	; (800617c <HAL_RCC_OscConfig+0x288>)
 8005fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fac:	6013      	str	r3, [r2, #0]
 8005fae:	e00b      	b.n	8005fc8 <HAL_RCC_OscConfig+0xd4>
 8005fb0:	4b72      	ldr	r3, [pc, #456]	; (800617c <HAL_RCC_OscConfig+0x288>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a71      	ldr	r2, [pc, #452]	; (800617c <HAL_RCC_OscConfig+0x288>)
 8005fb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fba:	6013      	str	r3, [r2, #0]
 8005fbc:	4b6f      	ldr	r3, [pc, #444]	; (800617c <HAL_RCC_OscConfig+0x288>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a6e      	ldr	r2, [pc, #440]	; (800617c <HAL_RCC_OscConfig+0x288>)
 8005fc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d013      	beq.n	8005ff8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fd0:	f7fb fbfa 	bl	80017c8 <HAL_GetTick>
 8005fd4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005fd6:	e008      	b.n	8005fea <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fd8:	f7fb fbf6 	bl	80017c8 <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	2b64      	cmp	r3, #100	; 0x64
 8005fe4:	d901      	bls.n	8005fea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e38d      	b.n	8006706 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005fea:	4b64      	ldr	r3, [pc, #400]	; (800617c <HAL_RCC_OscConfig+0x288>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d0f0      	beq.n	8005fd8 <HAL_RCC_OscConfig+0xe4>
 8005ff6:	e014      	b.n	8006022 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ff8:	f7fb fbe6 	bl	80017c8 <HAL_GetTick>
 8005ffc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005ffe:	e008      	b.n	8006012 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006000:	f7fb fbe2 	bl	80017c8 <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	2b64      	cmp	r3, #100	; 0x64
 800600c:	d901      	bls.n	8006012 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e379      	b.n	8006706 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006012:	4b5a      	ldr	r3, [pc, #360]	; (800617c <HAL_RCC_OscConfig+0x288>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1f0      	bne.n	8006000 <HAL_RCC_OscConfig+0x10c>
 800601e:	e000      	b.n	8006022 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006020:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0302 	and.w	r3, r3, #2
 800602a:	2b00      	cmp	r3, #0
 800602c:	f000 80ae 	beq.w	800618c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006030:	4b52      	ldr	r3, [pc, #328]	; (800617c <HAL_RCC_OscConfig+0x288>)
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006038:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800603a:	4b50      	ldr	r3, [pc, #320]	; (800617c <HAL_RCC_OscConfig+0x288>)
 800603c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006040:	6a3b      	ldr	r3, [r7, #32]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d007      	beq.n	8006056 <HAL_RCC_OscConfig+0x162>
 8006046:	6a3b      	ldr	r3, [r7, #32]
 8006048:	2b18      	cmp	r3, #24
 800604a:	d13a      	bne.n	80060c2 <HAL_RCC_OscConfig+0x1ce>
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	f003 0303 	and.w	r3, r3, #3
 8006052:	2b00      	cmp	r3, #0
 8006054:	d135      	bne.n	80060c2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006056:	4b49      	ldr	r3, [pc, #292]	; (800617c <HAL_RCC_OscConfig+0x288>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0304 	and.w	r3, r3, #4
 800605e:	2b00      	cmp	r3, #0
 8006060:	d005      	beq.n	800606e <HAL_RCC_OscConfig+0x17a>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e34b      	b.n	8006706 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800606e:	f7fb fbd9 	bl	8001824 <HAL_GetREVID>
 8006072:	4602      	mov	r2, r0
 8006074:	f241 0303 	movw	r3, #4099	; 0x1003
 8006078:	429a      	cmp	r2, r3
 800607a:	d817      	bhi.n	80060ac <HAL_RCC_OscConfig+0x1b8>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	2b40      	cmp	r3, #64	; 0x40
 8006082:	d108      	bne.n	8006096 <HAL_RCC_OscConfig+0x1a2>
 8006084:	4b3d      	ldr	r3, [pc, #244]	; (800617c <HAL_RCC_OscConfig+0x288>)
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800608c:	4a3b      	ldr	r2, [pc, #236]	; (800617c <HAL_RCC_OscConfig+0x288>)
 800608e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006092:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006094:	e07a      	b.n	800618c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006096:	4b39      	ldr	r3, [pc, #228]	; (800617c <HAL_RCC_OscConfig+0x288>)
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	031b      	lsls	r3, r3, #12
 80060a4:	4935      	ldr	r1, [pc, #212]	; (800617c <HAL_RCC_OscConfig+0x288>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060aa:	e06f      	b.n	800618c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060ac:	4b33      	ldr	r3, [pc, #204]	; (800617c <HAL_RCC_OscConfig+0x288>)
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	061b      	lsls	r3, r3, #24
 80060ba:	4930      	ldr	r1, [pc, #192]	; (800617c <HAL_RCC_OscConfig+0x288>)
 80060bc:	4313      	orrs	r3, r2
 80060be:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060c0:	e064      	b.n	800618c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d045      	beq.n	8006156 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80060ca:	4b2c      	ldr	r3, [pc, #176]	; (800617c <HAL_RCC_OscConfig+0x288>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f023 0219 	bic.w	r2, r3, #25
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	4929      	ldr	r1, [pc, #164]	; (800617c <HAL_RCC_OscConfig+0x288>)
 80060d8:	4313      	orrs	r3, r2
 80060da:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060dc:	f7fb fb74 	bl	80017c8 <HAL_GetTick>
 80060e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060e2:	e008      	b.n	80060f6 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060e4:	f7fb fb70 	bl	80017c8 <HAL_GetTick>
 80060e8:	4602      	mov	r2, r0
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d901      	bls.n	80060f6 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e307      	b.n	8006706 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060f6:	4b21      	ldr	r3, [pc, #132]	; (800617c <HAL_RCC_OscConfig+0x288>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0304 	and.w	r3, r3, #4
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d0f0      	beq.n	80060e4 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006102:	f7fb fb8f 	bl	8001824 <HAL_GetREVID>
 8006106:	4602      	mov	r2, r0
 8006108:	f241 0303 	movw	r3, #4099	; 0x1003
 800610c:	429a      	cmp	r2, r3
 800610e:	d817      	bhi.n	8006140 <HAL_RCC_OscConfig+0x24c>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	2b40      	cmp	r3, #64	; 0x40
 8006116:	d108      	bne.n	800612a <HAL_RCC_OscConfig+0x236>
 8006118:	4b18      	ldr	r3, [pc, #96]	; (800617c <HAL_RCC_OscConfig+0x288>)
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006120:	4a16      	ldr	r2, [pc, #88]	; (800617c <HAL_RCC_OscConfig+0x288>)
 8006122:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006126:	6053      	str	r3, [r2, #4]
 8006128:	e030      	b.n	800618c <HAL_RCC_OscConfig+0x298>
 800612a:	4b14      	ldr	r3, [pc, #80]	; (800617c <HAL_RCC_OscConfig+0x288>)
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	031b      	lsls	r3, r3, #12
 8006138:	4910      	ldr	r1, [pc, #64]	; (800617c <HAL_RCC_OscConfig+0x288>)
 800613a:	4313      	orrs	r3, r2
 800613c:	604b      	str	r3, [r1, #4]
 800613e:	e025      	b.n	800618c <HAL_RCC_OscConfig+0x298>
 8006140:	4b0e      	ldr	r3, [pc, #56]	; (800617c <HAL_RCC_OscConfig+0x288>)
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	061b      	lsls	r3, r3, #24
 800614e:	490b      	ldr	r1, [pc, #44]	; (800617c <HAL_RCC_OscConfig+0x288>)
 8006150:	4313      	orrs	r3, r2
 8006152:	604b      	str	r3, [r1, #4]
 8006154:	e01a      	b.n	800618c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006156:	4b09      	ldr	r3, [pc, #36]	; (800617c <HAL_RCC_OscConfig+0x288>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a08      	ldr	r2, [pc, #32]	; (800617c <HAL_RCC_OscConfig+0x288>)
 800615c:	f023 0301 	bic.w	r3, r3, #1
 8006160:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006162:	f7fb fb31 	bl	80017c8 <HAL_GetTick>
 8006166:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006168:	e00a      	b.n	8006180 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800616a:	f7fb fb2d 	bl	80017c8 <HAL_GetTick>
 800616e:	4602      	mov	r2, r0
 8006170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	2b02      	cmp	r3, #2
 8006176:	d903      	bls.n	8006180 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e2c4      	b.n	8006706 <HAL_RCC_OscConfig+0x812>
 800617c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006180:	4ba4      	ldr	r3, [pc, #656]	; (8006414 <HAL_RCC_OscConfig+0x520>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0304 	and.w	r3, r3, #4
 8006188:	2b00      	cmp	r3, #0
 800618a:	d1ee      	bne.n	800616a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0310 	and.w	r3, r3, #16
 8006194:	2b00      	cmp	r3, #0
 8006196:	f000 80a9 	beq.w	80062ec <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800619a:	4b9e      	ldr	r3, [pc, #632]	; (8006414 <HAL_RCC_OscConfig+0x520>)
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061a2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80061a4:	4b9b      	ldr	r3, [pc, #620]	; (8006414 <HAL_RCC_OscConfig+0x520>)
 80061a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	2b08      	cmp	r3, #8
 80061ae:	d007      	beq.n	80061c0 <HAL_RCC_OscConfig+0x2cc>
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	2b18      	cmp	r3, #24
 80061b4:	d13a      	bne.n	800622c <HAL_RCC_OscConfig+0x338>
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	f003 0303 	and.w	r3, r3, #3
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d135      	bne.n	800622c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80061c0:	4b94      	ldr	r3, [pc, #592]	; (8006414 <HAL_RCC_OscConfig+0x520>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d005      	beq.n	80061d8 <HAL_RCC_OscConfig+0x2e4>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	69db      	ldr	r3, [r3, #28]
 80061d0:	2b80      	cmp	r3, #128	; 0x80
 80061d2:	d001      	beq.n	80061d8 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e296      	b.n	8006706 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80061d8:	f7fb fb24 	bl	8001824 <HAL_GetREVID>
 80061dc:	4602      	mov	r2, r0
 80061de:	f241 0303 	movw	r3, #4099	; 0x1003
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d817      	bhi.n	8006216 <HAL_RCC_OscConfig+0x322>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	2b20      	cmp	r3, #32
 80061ec:	d108      	bne.n	8006200 <HAL_RCC_OscConfig+0x30c>
 80061ee:	4b89      	ldr	r3, [pc, #548]	; (8006414 <HAL_RCC_OscConfig+0x520>)
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80061f6:	4a87      	ldr	r2, [pc, #540]	; (8006414 <HAL_RCC_OscConfig+0x520>)
 80061f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061fc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80061fe:	e075      	b.n	80062ec <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006200:	4b84      	ldr	r3, [pc, #528]	; (8006414 <HAL_RCC_OscConfig+0x520>)
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a1b      	ldr	r3, [r3, #32]
 800620c:	069b      	lsls	r3, r3, #26
 800620e:	4981      	ldr	r1, [pc, #516]	; (8006414 <HAL_RCC_OscConfig+0x520>)
 8006210:	4313      	orrs	r3, r2
 8006212:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006214:	e06a      	b.n	80062ec <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006216:	4b7f      	ldr	r3, [pc, #508]	; (8006414 <HAL_RCC_OscConfig+0x520>)
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	061b      	lsls	r3, r3, #24
 8006224:	497b      	ldr	r1, [pc, #492]	; (8006414 <HAL_RCC_OscConfig+0x520>)
 8006226:	4313      	orrs	r3, r2
 8006228:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800622a:	e05f      	b.n	80062ec <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	69db      	ldr	r3, [r3, #28]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d042      	beq.n	80062ba <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006234:	4b77      	ldr	r3, [pc, #476]	; (8006414 <HAL_RCC_OscConfig+0x520>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a76      	ldr	r2, [pc, #472]	; (8006414 <HAL_RCC_OscConfig+0x520>)
 800623a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800623e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006240:	f7fb fac2 	bl	80017c8 <HAL_GetTick>
 8006244:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006246:	e008      	b.n	800625a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006248:	f7fb fabe 	bl	80017c8 <HAL_GetTick>
 800624c:	4602      	mov	r2, r0
 800624e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	2b02      	cmp	r3, #2
 8006254:	d901      	bls.n	800625a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	e255      	b.n	8006706 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800625a:	4b6e      	ldr	r3, [pc, #440]	; (8006414 <HAL_RCC_OscConfig+0x520>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006262:	2b00      	cmp	r3, #0
 8006264:	d0f0      	beq.n	8006248 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006266:	f7fb fadd 	bl	8001824 <HAL_GetREVID>
 800626a:	4602      	mov	r2, r0
 800626c:	f241 0303 	movw	r3, #4099	; 0x1003
 8006270:	429a      	cmp	r2, r3
 8006272:	d817      	bhi.n	80062a4 <HAL_RCC_OscConfig+0x3b0>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6a1b      	ldr	r3, [r3, #32]
 8006278:	2b20      	cmp	r3, #32
 800627a:	d108      	bne.n	800628e <HAL_RCC_OscConfig+0x39a>
 800627c:	4b65      	ldr	r3, [pc, #404]	; (8006414 <HAL_RCC_OscConfig+0x520>)
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006284:	4a63      	ldr	r2, [pc, #396]	; (8006414 <HAL_RCC_OscConfig+0x520>)
 8006286:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800628a:	6053      	str	r3, [r2, #4]
 800628c:	e02e      	b.n	80062ec <HAL_RCC_OscConfig+0x3f8>
 800628e:	4b61      	ldr	r3, [pc, #388]	; (8006414 <HAL_RCC_OscConfig+0x520>)
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	069b      	lsls	r3, r3, #26
 800629c:	495d      	ldr	r1, [pc, #372]	; (8006414 <HAL_RCC_OscConfig+0x520>)
 800629e:	4313      	orrs	r3, r2
 80062a0:	604b      	str	r3, [r1, #4]
 80062a2:	e023      	b.n	80062ec <HAL_RCC_OscConfig+0x3f8>
 80062a4:	4b5b      	ldr	r3, [pc, #364]	; (8006414 <HAL_RCC_OscConfig+0x520>)
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6a1b      	ldr	r3, [r3, #32]
 80062b0:	061b      	lsls	r3, r3, #24
 80062b2:	4958      	ldr	r1, [pc, #352]	; (8006414 <HAL_RCC_OscConfig+0x520>)
 80062b4:	4313      	orrs	r3, r2
 80062b6:	60cb      	str	r3, [r1, #12]
 80062b8:	e018      	b.n	80062ec <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80062ba:	4b56      	ldr	r3, [pc, #344]	; (8006414 <HAL_RCC_OscConfig+0x520>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a55      	ldr	r2, [pc, #340]	; (8006414 <HAL_RCC_OscConfig+0x520>)
 80062c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062c6:	f7fb fa7f 	bl	80017c8 <HAL_GetTick>
 80062ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80062cc:	e008      	b.n	80062e0 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80062ce:	f7fb fa7b 	bl	80017c8 <HAL_GetTick>
 80062d2:	4602      	mov	r2, r0
 80062d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d901      	bls.n	80062e0 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	e212      	b.n	8006706 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80062e0:	4b4c      	ldr	r3, [pc, #304]	; (8006414 <HAL_RCC_OscConfig+0x520>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1f0      	bne.n	80062ce <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0308 	and.w	r3, r3, #8
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d036      	beq.n	8006366 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	695b      	ldr	r3, [r3, #20]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d019      	beq.n	8006334 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006300:	4b44      	ldr	r3, [pc, #272]	; (8006414 <HAL_RCC_OscConfig+0x520>)
 8006302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006304:	4a43      	ldr	r2, [pc, #268]	; (8006414 <HAL_RCC_OscConfig+0x520>)
 8006306:	f043 0301 	orr.w	r3, r3, #1
 800630a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800630c:	f7fb fa5c 	bl	80017c8 <HAL_GetTick>
 8006310:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006312:	e008      	b.n	8006326 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006314:	f7fb fa58 	bl	80017c8 <HAL_GetTick>
 8006318:	4602      	mov	r2, r0
 800631a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	2b02      	cmp	r3, #2
 8006320:	d901      	bls.n	8006326 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8006322:	2303      	movs	r3, #3
 8006324:	e1ef      	b.n	8006706 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006326:	4b3b      	ldr	r3, [pc, #236]	; (8006414 <HAL_RCC_OscConfig+0x520>)
 8006328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800632a:	f003 0302 	and.w	r3, r3, #2
 800632e:	2b00      	cmp	r3, #0
 8006330:	d0f0      	beq.n	8006314 <HAL_RCC_OscConfig+0x420>
 8006332:	e018      	b.n	8006366 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006334:	4b37      	ldr	r3, [pc, #220]	; (8006414 <HAL_RCC_OscConfig+0x520>)
 8006336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006338:	4a36      	ldr	r2, [pc, #216]	; (8006414 <HAL_RCC_OscConfig+0x520>)
 800633a:	f023 0301 	bic.w	r3, r3, #1
 800633e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006340:	f7fb fa42 	bl	80017c8 <HAL_GetTick>
 8006344:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006346:	e008      	b.n	800635a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006348:	f7fb fa3e 	bl	80017c8 <HAL_GetTick>
 800634c:	4602      	mov	r2, r0
 800634e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	2b02      	cmp	r3, #2
 8006354:	d901      	bls.n	800635a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	e1d5      	b.n	8006706 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800635a:	4b2e      	ldr	r3, [pc, #184]	; (8006414 <HAL_RCC_OscConfig+0x520>)
 800635c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800635e:	f003 0302 	and.w	r3, r3, #2
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1f0      	bne.n	8006348 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 0320 	and.w	r3, r3, #32
 800636e:	2b00      	cmp	r3, #0
 8006370:	d036      	beq.n	80063e0 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	699b      	ldr	r3, [r3, #24]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d019      	beq.n	80063ae <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800637a:	4b26      	ldr	r3, [pc, #152]	; (8006414 <HAL_RCC_OscConfig+0x520>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a25      	ldr	r2, [pc, #148]	; (8006414 <HAL_RCC_OscConfig+0x520>)
 8006380:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006384:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006386:	f7fb fa1f 	bl	80017c8 <HAL_GetTick>
 800638a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800638c:	e008      	b.n	80063a0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800638e:	f7fb fa1b 	bl	80017c8 <HAL_GetTick>
 8006392:	4602      	mov	r2, r0
 8006394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	2b02      	cmp	r3, #2
 800639a:	d901      	bls.n	80063a0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800639c:	2303      	movs	r3, #3
 800639e:	e1b2      	b.n	8006706 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80063a0:	4b1c      	ldr	r3, [pc, #112]	; (8006414 <HAL_RCC_OscConfig+0x520>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d0f0      	beq.n	800638e <HAL_RCC_OscConfig+0x49a>
 80063ac:	e018      	b.n	80063e0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80063ae:	4b19      	ldr	r3, [pc, #100]	; (8006414 <HAL_RCC_OscConfig+0x520>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a18      	ldr	r2, [pc, #96]	; (8006414 <HAL_RCC_OscConfig+0x520>)
 80063b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80063ba:	f7fb fa05 	bl	80017c8 <HAL_GetTick>
 80063be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80063c0:	e008      	b.n	80063d4 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80063c2:	f7fb fa01 	bl	80017c8 <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d901      	bls.n	80063d4 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e198      	b.n	8006706 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80063d4:	4b0f      	ldr	r3, [pc, #60]	; (8006414 <HAL_RCC_OscConfig+0x520>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d1f0      	bne.n	80063c2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0304 	and.w	r3, r3, #4
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f000 8085 	beq.w	80064f8 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80063ee:	4b0a      	ldr	r3, [pc, #40]	; (8006418 <HAL_RCC_OscConfig+0x524>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a09      	ldr	r2, [pc, #36]	; (8006418 <HAL_RCC_OscConfig+0x524>)
 80063f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80063fa:	f7fb f9e5 	bl	80017c8 <HAL_GetTick>
 80063fe:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006400:	e00c      	b.n	800641c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006402:	f7fb f9e1 	bl	80017c8 <HAL_GetTick>
 8006406:	4602      	mov	r2, r0
 8006408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	2b64      	cmp	r3, #100	; 0x64
 800640e:	d905      	bls.n	800641c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	e178      	b.n	8006706 <HAL_RCC_OscConfig+0x812>
 8006414:	58024400 	.word	0x58024400
 8006418:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800641c:	4b96      	ldr	r3, [pc, #600]	; (8006678 <HAL_RCC_OscConfig+0x784>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006424:	2b00      	cmp	r3, #0
 8006426:	d0ec      	beq.n	8006402 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	2b01      	cmp	r3, #1
 800642e:	d106      	bne.n	800643e <HAL_RCC_OscConfig+0x54a>
 8006430:	4b92      	ldr	r3, [pc, #584]	; (800667c <HAL_RCC_OscConfig+0x788>)
 8006432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006434:	4a91      	ldr	r2, [pc, #580]	; (800667c <HAL_RCC_OscConfig+0x788>)
 8006436:	f043 0301 	orr.w	r3, r3, #1
 800643a:	6713      	str	r3, [r2, #112]	; 0x70
 800643c:	e02d      	b.n	800649a <HAL_RCC_OscConfig+0x5a6>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d10c      	bne.n	8006460 <HAL_RCC_OscConfig+0x56c>
 8006446:	4b8d      	ldr	r3, [pc, #564]	; (800667c <HAL_RCC_OscConfig+0x788>)
 8006448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800644a:	4a8c      	ldr	r2, [pc, #560]	; (800667c <HAL_RCC_OscConfig+0x788>)
 800644c:	f023 0301 	bic.w	r3, r3, #1
 8006450:	6713      	str	r3, [r2, #112]	; 0x70
 8006452:	4b8a      	ldr	r3, [pc, #552]	; (800667c <HAL_RCC_OscConfig+0x788>)
 8006454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006456:	4a89      	ldr	r2, [pc, #548]	; (800667c <HAL_RCC_OscConfig+0x788>)
 8006458:	f023 0304 	bic.w	r3, r3, #4
 800645c:	6713      	str	r3, [r2, #112]	; 0x70
 800645e:	e01c      	b.n	800649a <HAL_RCC_OscConfig+0x5a6>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	2b05      	cmp	r3, #5
 8006466:	d10c      	bne.n	8006482 <HAL_RCC_OscConfig+0x58e>
 8006468:	4b84      	ldr	r3, [pc, #528]	; (800667c <HAL_RCC_OscConfig+0x788>)
 800646a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800646c:	4a83      	ldr	r2, [pc, #524]	; (800667c <HAL_RCC_OscConfig+0x788>)
 800646e:	f043 0304 	orr.w	r3, r3, #4
 8006472:	6713      	str	r3, [r2, #112]	; 0x70
 8006474:	4b81      	ldr	r3, [pc, #516]	; (800667c <HAL_RCC_OscConfig+0x788>)
 8006476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006478:	4a80      	ldr	r2, [pc, #512]	; (800667c <HAL_RCC_OscConfig+0x788>)
 800647a:	f043 0301 	orr.w	r3, r3, #1
 800647e:	6713      	str	r3, [r2, #112]	; 0x70
 8006480:	e00b      	b.n	800649a <HAL_RCC_OscConfig+0x5a6>
 8006482:	4b7e      	ldr	r3, [pc, #504]	; (800667c <HAL_RCC_OscConfig+0x788>)
 8006484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006486:	4a7d      	ldr	r2, [pc, #500]	; (800667c <HAL_RCC_OscConfig+0x788>)
 8006488:	f023 0301 	bic.w	r3, r3, #1
 800648c:	6713      	str	r3, [r2, #112]	; 0x70
 800648e:	4b7b      	ldr	r3, [pc, #492]	; (800667c <HAL_RCC_OscConfig+0x788>)
 8006490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006492:	4a7a      	ldr	r2, [pc, #488]	; (800667c <HAL_RCC_OscConfig+0x788>)
 8006494:	f023 0304 	bic.w	r3, r3, #4
 8006498:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d015      	beq.n	80064ce <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064a2:	f7fb f991 	bl	80017c8 <HAL_GetTick>
 80064a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064a8:	e00a      	b.n	80064c0 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064aa:	f7fb f98d 	bl	80017c8 <HAL_GetTick>
 80064ae:	4602      	mov	r2, r0
 80064b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d901      	bls.n	80064c0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80064bc:	2303      	movs	r3, #3
 80064be:	e122      	b.n	8006706 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064c0:	4b6e      	ldr	r3, [pc, #440]	; (800667c <HAL_RCC_OscConfig+0x788>)
 80064c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064c4:	f003 0302 	and.w	r3, r3, #2
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d0ee      	beq.n	80064aa <HAL_RCC_OscConfig+0x5b6>
 80064cc:	e014      	b.n	80064f8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064ce:	f7fb f97b 	bl	80017c8 <HAL_GetTick>
 80064d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80064d4:	e00a      	b.n	80064ec <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064d6:	f7fb f977 	bl	80017c8 <HAL_GetTick>
 80064da:	4602      	mov	r2, r0
 80064dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d901      	bls.n	80064ec <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80064e8:	2303      	movs	r3, #3
 80064ea:	e10c      	b.n	8006706 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80064ec:	4b63      	ldr	r3, [pc, #396]	; (800667c <HAL_RCC_OscConfig+0x788>)
 80064ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f0:	f003 0302 	and.w	r3, r3, #2
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d1ee      	bne.n	80064d6 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f000 8101 	beq.w	8006704 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006502:	4b5e      	ldr	r3, [pc, #376]	; (800667c <HAL_RCC_OscConfig+0x788>)
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800650a:	2b18      	cmp	r3, #24
 800650c:	f000 80bc 	beq.w	8006688 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006514:	2b02      	cmp	r3, #2
 8006516:	f040 8095 	bne.w	8006644 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800651a:	4b58      	ldr	r3, [pc, #352]	; (800667c <HAL_RCC_OscConfig+0x788>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a57      	ldr	r2, [pc, #348]	; (800667c <HAL_RCC_OscConfig+0x788>)
 8006520:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006524:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006526:	f7fb f94f 	bl	80017c8 <HAL_GetTick>
 800652a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800652c:	e008      	b.n	8006540 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800652e:	f7fb f94b 	bl	80017c8 <HAL_GetTick>
 8006532:	4602      	mov	r2, r0
 8006534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	2b02      	cmp	r3, #2
 800653a:	d901      	bls.n	8006540 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	e0e2      	b.n	8006706 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006540:	4b4e      	ldr	r3, [pc, #312]	; (800667c <HAL_RCC_OscConfig+0x788>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006548:	2b00      	cmp	r3, #0
 800654a:	d1f0      	bne.n	800652e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800654c:	4b4b      	ldr	r3, [pc, #300]	; (800667c <HAL_RCC_OscConfig+0x788>)
 800654e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006550:	4b4b      	ldr	r3, [pc, #300]	; (8006680 <HAL_RCC_OscConfig+0x78c>)
 8006552:	4013      	ands	r3, r2
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800655c:	0112      	lsls	r2, r2, #4
 800655e:	430a      	orrs	r2, r1
 8006560:	4946      	ldr	r1, [pc, #280]	; (800667c <HAL_RCC_OscConfig+0x788>)
 8006562:	4313      	orrs	r3, r2
 8006564:	628b      	str	r3, [r1, #40]	; 0x28
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800656a:	3b01      	subs	r3, #1
 800656c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006574:	3b01      	subs	r3, #1
 8006576:	025b      	lsls	r3, r3, #9
 8006578:	b29b      	uxth	r3, r3
 800657a:	431a      	orrs	r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006580:	3b01      	subs	r3, #1
 8006582:	041b      	lsls	r3, r3, #16
 8006584:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006588:	431a      	orrs	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800658e:	3b01      	subs	r3, #1
 8006590:	061b      	lsls	r3, r3, #24
 8006592:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006596:	4939      	ldr	r1, [pc, #228]	; (800667c <HAL_RCC_OscConfig+0x788>)
 8006598:	4313      	orrs	r3, r2
 800659a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800659c:	4b37      	ldr	r3, [pc, #220]	; (800667c <HAL_RCC_OscConfig+0x788>)
 800659e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a0:	4a36      	ldr	r2, [pc, #216]	; (800667c <HAL_RCC_OscConfig+0x788>)
 80065a2:	f023 0301 	bic.w	r3, r3, #1
 80065a6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80065a8:	4b34      	ldr	r3, [pc, #208]	; (800667c <HAL_RCC_OscConfig+0x788>)
 80065aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065ac:	4b35      	ldr	r3, [pc, #212]	; (8006684 <HAL_RCC_OscConfig+0x790>)
 80065ae:	4013      	ands	r3, r2
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80065b4:	00d2      	lsls	r2, r2, #3
 80065b6:	4931      	ldr	r1, [pc, #196]	; (800667c <HAL_RCC_OscConfig+0x788>)
 80065b8:	4313      	orrs	r3, r2
 80065ba:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80065bc:	4b2f      	ldr	r3, [pc, #188]	; (800667c <HAL_RCC_OscConfig+0x788>)
 80065be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c0:	f023 020c 	bic.w	r2, r3, #12
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c8:	492c      	ldr	r1, [pc, #176]	; (800667c <HAL_RCC_OscConfig+0x788>)
 80065ca:	4313      	orrs	r3, r2
 80065cc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80065ce:	4b2b      	ldr	r3, [pc, #172]	; (800667c <HAL_RCC_OscConfig+0x788>)
 80065d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d2:	f023 0202 	bic.w	r2, r3, #2
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065da:	4928      	ldr	r1, [pc, #160]	; (800667c <HAL_RCC_OscConfig+0x788>)
 80065dc:	4313      	orrs	r3, r2
 80065de:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80065e0:	4b26      	ldr	r3, [pc, #152]	; (800667c <HAL_RCC_OscConfig+0x788>)
 80065e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e4:	4a25      	ldr	r2, [pc, #148]	; (800667c <HAL_RCC_OscConfig+0x788>)
 80065e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065ec:	4b23      	ldr	r3, [pc, #140]	; (800667c <HAL_RCC_OscConfig+0x788>)
 80065ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f0:	4a22      	ldr	r2, [pc, #136]	; (800667c <HAL_RCC_OscConfig+0x788>)
 80065f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80065f8:	4b20      	ldr	r3, [pc, #128]	; (800667c <HAL_RCC_OscConfig+0x788>)
 80065fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fc:	4a1f      	ldr	r2, [pc, #124]	; (800667c <HAL_RCC_OscConfig+0x788>)
 80065fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006602:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006604:	4b1d      	ldr	r3, [pc, #116]	; (800667c <HAL_RCC_OscConfig+0x788>)
 8006606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006608:	4a1c      	ldr	r2, [pc, #112]	; (800667c <HAL_RCC_OscConfig+0x788>)
 800660a:	f043 0301 	orr.w	r3, r3, #1
 800660e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006610:	4b1a      	ldr	r3, [pc, #104]	; (800667c <HAL_RCC_OscConfig+0x788>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a19      	ldr	r2, [pc, #100]	; (800667c <HAL_RCC_OscConfig+0x788>)
 8006616:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800661a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800661c:	f7fb f8d4 	bl	80017c8 <HAL_GetTick>
 8006620:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006622:	e008      	b.n	8006636 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006624:	f7fb f8d0 	bl	80017c8 <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	2b02      	cmp	r3, #2
 8006630:	d901      	bls.n	8006636 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e067      	b.n	8006706 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006636:	4b11      	ldr	r3, [pc, #68]	; (800667c <HAL_RCC_OscConfig+0x788>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d0f0      	beq.n	8006624 <HAL_RCC_OscConfig+0x730>
 8006642:	e05f      	b.n	8006704 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006644:	4b0d      	ldr	r3, [pc, #52]	; (800667c <HAL_RCC_OscConfig+0x788>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a0c      	ldr	r2, [pc, #48]	; (800667c <HAL_RCC_OscConfig+0x788>)
 800664a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800664e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006650:	f7fb f8ba 	bl	80017c8 <HAL_GetTick>
 8006654:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006656:	e008      	b.n	800666a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006658:	f7fb f8b6 	bl	80017c8 <HAL_GetTick>
 800665c:	4602      	mov	r2, r0
 800665e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	2b02      	cmp	r3, #2
 8006664:	d901      	bls.n	800666a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e04d      	b.n	8006706 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800666a:	4b04      	ldr	r3, [pc, #16]	; (800667c <HAL_RCC_OscConfig+0x788>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1f0      	bne.n	8006658 <HAL_RCC_OscConfig+0x764>
 8006676:	e045      	b.n	8006704 <HAL_RCC_OscConfig+0x810>
 8006678:	58024800 	.word	0x58024800
 800667c:	58024400 	.word	0x58024400
 8006680:	fffffc0c 	.word	0xfffffc0c
 8006684:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006688:	4b21      	ldr	r3, [pc, #132]	; (8006710 <HAL_RCC_OscConfig+0x81c>)
 800668a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800668c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800668e:	4b20      	ldr	r3, [pc, #128]	; (8006710 <HAL_RCC_OscConfig+0x81c>)
 8006690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006692:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006698:	2b01      	cmp	r3, #1
 800669a:	d031      	beq.n	8006700 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	f003 0203 	and.w	r2, r3, #3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d12a      	bne.n	8006700 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	091b      	lsrs	r3, r3, #4
 80066ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d122      	bne.n	8006700 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d11a      	bne.n	8006700 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	0a5b      	lsrs	r3, r3, #9
 80066ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066d6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80066d8:	429a      	cmp	r2, r3
 80066da:	d111      	bne.n	8006700 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	0c1b      	lsrs	r3, r3, #16
 80066e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d108      	bne.n	8006700 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	0e1b      	lsrs	r3, r3, #24
 80066f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066fa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d001      	beq.n	8006704 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e000      	b.n	8006706 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3730      	adds	r7, #48	; 0x30
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	58024400 	.word	0x58024400

08006714 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b086      	sub	sp, #24
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d101      	bne.n	8006728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	e19c      	b.n	8006a62 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006728:	4b8a      	ldr	r3, [pc, #552]	; (8006954 <HAL_RCC_ClockConfig+0x240>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 030f 	and.w	r3, r3, #15
 8006730:	683a      	ldr	r2, [r7, #0]
 8006732:	429a      	cmp	r2, r3
 8006734:	d910      	bls.n	8006758 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006736:	4b87      	ldr	r3, [pc, #540]	; (8006954 <HAL_RCC_ClockConfig+0x240>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f023 020f 	bic.w	r2, r3, #15
 800673e:	4985      	ldr	r1, [pc, #532]	; (8006954 <HAL_RCC_ClockConfig+0x240>)
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	4313      	orrs	r3, r2
 8006744:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006746:	4b83      	ldr	r3, [pc, #524]	; (8006954 <HAL_RCC_ClockConfig+0x240>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 030f 	and.w	r3, r3, #15
 800674e:	683a      	ldr	r2, [r7, #0]
 8006750:	429a      	cmp	r2, r3
 8006752:	d001      	beq.n	8006758 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e184      	b.n	8006a62 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 0304 	and.w	r3, r3, #4
 8006760:	2b00      	cmp	r3, #0
 8006762:	d010      	beq.n	8006786 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	691a      	ldr	r2, [r3, #16]
 8006768:	4b7b      	ldr	r3, [pc, #492]	; (8006958 <HAL_RCC_ClockConfig+0x244>)
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006770:	429a      	cmp	r2, r3
 8006772:	d908      	bls.n	8006786 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006774:	4b78      	ldr	r3, [pc, #480]	; (8006958 <HAL_RCC_ClockConfig+0x244>)
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	4975      	ldr	r1, [pc, #468]	; (8006958 <HAL_RCC_ClockConfig+0x244>)
 8006782:	4313      	orrs	r3, r2
 8006784:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 0308 	and.w	r3, r3, #8
 800678e:	2b00      	cmp	r3, #0
 8006790:	d010      	beq.n	80067b4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	695a      	ldr	r2, [r3, #20]
 8006796:	4b70      	ldr	r3, [pc, #448]	; (8006958 <HAL_RCC_ClockConfig+0x244>)
 8006798:	69db      	ldr	r3, [r3, #28]
 800679a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800679e:	429a      	cmp	r2, r3
 80067a0:	d908      	bls.n	80067b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80067a2:	4b6d      	ldr	r3, [pc, #436]	; (8006958 <HAL_RCC_ClockConfig+0x244>)
 80067a4:	69db      	ldr	r3, [r3, #28]
 80067a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	496a      	ldr	r1, [pc, #424]	; (8006958 <HAL_RCC_ClockConfig+0x244>)
 80067b0:	4313      	orrs	r3, r2
 80067b2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 0310 	and.w	r3, r3, #16
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d010      	beq.n	80067e2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	699a      	ldr	r2, [r3, #24]
 80067c4:	4b64      	ldr	r3, [pc, #400]	; (8006958 <HAL_RCC_ClockConfig+0x244>)
 80067c6:	69db      	ldr	r3, [r3, #28]
 80067c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d908      	bls.n	80067e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80067d0:	4b61      	ldr	r3, [pc, #388]	; (8006958 <HAL_RCC_ClockConfig+0x244>)
 80067d2:	69db      	ldr	r3, [r3, #28]
 80067d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	699b      	ldr	r3, [r3, #24]
 80067dc:	495e      	ldr	r1, [pc, #376]	; (8006958 <HAL_RCC_ClockConfig+0x244>)
 80067de:	4313      	orrs	r3, r2
 80067e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 0320 	and.w	r3, r3, #32
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d010      	beq.n	8006810 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	69da      	ldr	r2, [r3, #28]
 80067f2:	4b59      	ldr	r3, [pc, #356]	; (8006958 <HAL_RCC_ClockConfig+0x244>)
 80067f4:	6a1b      	ldr	r3, [r3, #32]
 80067f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d908      	bls.n	8006810 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80067fe:	4b56      	ldr	r3, [pc, #344]	; (8006958 <HAL_RCC_ClockConfig+0x244>)
 8006800:	6a1b      	ldr	r3, [r3, #32]
 8006802:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	69db      	ldr	r3, [r3, #28]
 800680a:	4953      	ldr	r1, [pc, #332]	; (8006958 <HAL_RCC_ClockConfig+0x244>)
 800680c:	4313      	orrs	r3, r2
 800680e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0302 	and.w	r3, r3, #2
 8006818:	2b00      	cmp	r3, #0
 800681a:	d010      	beq.n	800683e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	68da      	ldr	r2, [r3, #12]
 8006820:	4b4d      	ldr	r3, [pc, #308]	; (8006958 <HAL_RCC_ClockConfig+0x244>)
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	f003 030f 	and.w	r3, r3, #15
 8006828:	429a      	cmp	r2, r3
 800682a:	d908      	bls.n	800683e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800682c:	4b4a      	ldr	r3, [pc, #296]	; (8006958 <HAL_RCC_ClockConfig+0x244>)
 800682e:	699b      	ldr	r3, [r3, #24]
 8006830:	f023 020f 	bic.w	r2, r3, #15
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	4947      	ldr	r1, [pc, #284]	; (8006958 <HAL_RCC_ClockConfig+0x244>)
 800683a:	4313      	orrs	r3, r2
 800683c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	2b00      	cmp	r3, #0
 8006848:	d055      	beq.n	80068f6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800684a:	4b43      	ldr	r3, [pc, #268]	; (8006958 <HAL_RCC_ClockConfig+0x244>)
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	4940      	ldr	r1, [pc, #256]	; (8006958 <HAL_RCC_ClockConfig+0x244>)
 8006858:	4313      	orrs	r3, r2
 800685a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	2b02      	cmp	r3, #2
 8006862:	d107      	bne.n	8006874 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006864:	4b3c      	ldr	r3, [pc, #240]	; (8006958 <HAL_RCC_ClockConfig+0x244>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800686c:	2b00      	cmp	r3, #0
 800686e:	d121      	bne.n	80068b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e0f6      	b.n	8006a62 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	2b03      	cmp	r3, #3
 800687a:	d107      	bne.n	800688c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800687c:	4b36      	ldr	r3, [pc, #216]	; (8006958 <HAL_RCC_ClockConfig+0x244>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006884:	2b00      	cmp	r3, #0
 8006886:	d115      	bne.n	80068b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e0ea      	b.n	8006a62 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d107      	bne.n	80068a4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006894:	4b30      	ldr	r3, [pc, #192]	; (8006958 <HAL_RCC_ClockConfig+0x244>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800689c:	2b00      	cmp	r3, #0
 800689e:	d109      	bne.n	80068b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e0de      	b.n	8006a62 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80068a4:	4b2c      	ldr	r3, [pc, #176]	; (8006958 <HAL_RCC_ClockConfig+0x244>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0304 	and.w	r3, r3, #4
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d101      	bne.n	80068b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e0d6      	b.n	8006a62 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80068b4:	4b28      	ldr	r3, [pc, #160]	; (8006958 <HAL_RCC_ClockConfig+0x244>)
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	f023 0207 	bic.w	r2, r3, #7
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	4925      	ldr	r1, [pc, #148]	; (8006958 <HAL_RCC_ClockConfig+0x244>)
 80068c2:	4313      	orrs	r3, r2
 80068c4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068c6:	f7fa ff7f 	bl	80017c8 <HAL_GetTick>
 80068ca:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068cc:	e00a      	b.n	80068e4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068ce:	f7fa ff7b 	bl	80017c8 <HAL_GetTick>
 80068d2:	4602      	mov	r2, r0
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80068dc:	4293      	cmp	r3, r2
 80068de:	d901      	bls.n	80068e4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80068e0:	2303      	movs	r3, #3
 80068e2:	e0be      	b.n	8006a62 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068e4:	4b1c      	ldr	r3, [pc, #112]	; (8006958 <HAL_RCC_ClockConfig+0x244>)
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	00db      	lsls	r3, r3, #3
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d1eb      	bne.n	80068ce <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0302 	and.w	r3, r3, #2
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d010      	beq.n	8006924 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	68da      	ldr	r2, [r3, #12]
 8006906:	4b14      	ldr	r3, [pc, #80]	; (8006958 <HAL_RCC_ClockConfig+0x244>)
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	f003 030f 	and.w	r3, r3, #15
 800690e:	429a      	cmp	r2, r3
 8006910:	d208      	bcs.n	8006924 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006912:	4b11      	ldr	r3, [pc, #68]	; (8006958 <HAL_RCC_ClockConfig+0x244>)
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	f023 020f 	bic.w	r2, r3, #15
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	490e      	ldr	r1, [pc, #56]	; (8006958 <HAL_RCC_ClockConfig+0x244>)
 8006920:	4313      	orrs	r3, r2
 8006922:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006924:	4b0b      	ldr	r3, [pc, #44]	; (8006954 <HAL_RCC_ClockConfig+0x240>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 030f 	and.w	r3, r3, #15
 800692c:	683a      	ldr	r2, [r7, #0]
 800692e:	429a      	cmp	r2, r3
 8006930:	d214      	bcs.n	800695c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006932:	4b08      	ldr	r3, [pc, #32]	; (8006954 <HAL_RCC_ClockConfig+0x240>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f023 020f 	bic.w	r2, r3, #15
 800693a:	4906      	ldr	r1, [pc, #24]	; (8006954 <HAL_RCC_ClockConfig+0x240>)
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	4313      	orrs	r3, r2
 8006940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006942:	4b04      	ldr	r3, [pc, #16]	; (8006954 <HAL_RCC_ClockConfig+0x240>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 030f 	and.w	r3, r3, #15
 800694a:	683a      	ldr	r2, [r7, #0]
 800694c:	429a      	cmp	r2, r3
 800694e:	d005      	beq.n	800695c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	e086      	b.n	8006a62 <HAL_RCC_ClockConfig+0x34e>
 8006954:	52002000 	.word	0x52002000
 8006958:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0304 	and.w	r3, r3, #4
 8006964:	2b00      	cmp	r3, #0
 8006966:	d010      	beq.n	800698a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	691a      	ldr	r2, [r3, #16]
 800696c:	4b3f      	ldr	r3, [pc, #252]	; (8006a6c <HAL_RCC_ClockConfig+0x358>)
 800696e:	699b      	ldr	r3, [r3, #24]
 8006970:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006974:	429a      	cmp	r2, r3
 8006976:	d208      	bcs.n	800698a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006978:	4b3c      	ldr	r3, [pc, #240]	; (8006a6c <HAL_RCC_ClockConfig+0x358>)
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	4939      	ldr	r1, [pc, #228]	; (8006a6c <HAL_RCC_ClockConfig+0x358>)
 8006986:	4313      	orrs	r3, r2
 8006988:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 0308 	and.w	r3, r3, #8
 8006992:	2b00      	cmp	r3, #0
 8006994:	d010      	beq.n	80069b8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	695a      	ldr	r2, [r3, #20]
 800699a:	4b34      	ldr	r3, [pc, #208]	; (8006a6c <HAL_RCC_ClockConfig+0x358>)
 800699c:	69db      	ldr	r3, [r3, #28]
 800699e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d208      	bcs.n	80069b8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80069a6:	4b31      	ldr	r3, [pc, #196]	; (8006a6c <HAL_RCC_ClockConfig+0x358>)
 80069a8:	69db      	ldr	r3, [r3, #28]
 80069aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	695b      	ldr	r3, [r3, #20]
 80069b2:	492e      	ldr	r1, [pc, #184]	; (8006a6c <HAL_RCC_ClockConfig+0x358>)
 80069b4:	4313      	orrs	r3, r2
 80069b6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 0310 	and.w	r3, r3, #16
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d010      	beq.n	80069e6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	699a      	ldr	r2, [r3, #24]
 80069c8:	4b28      	ldr	r3, [pc, #160]	; (8006a6c <HAL_RCC_ClockConfig+0x358>)
 80069ca:	69db      	ldr	r3, [r3, #28]
 80069cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d208      	bcs.n	80069e6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80069d4:	4b25      	ldr	r3, [pc, #148]	; (8006a6c <HAL_RCC_ClockConfig+0x358>)
 80069d6:	69db      	ldr	r3, [r3, #28]
 80069d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	4922      	ldr	r1, [pc, #136]	; (8006a6c <HAL_RCC_ClockConfig+0x358>)
 80069e2:	4313      	orrs	r3, r2
 80069e4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 0320 	and.w	r3, r3, #32
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d010      	beq.n	8006a14 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	69da      	ldr	r2, [r3, #28]
 80069f6:	4b1d      	ldr	r3, [pc, #116]	; (8006a6c <HAL_RCC_ClockConfig+0x358>)
 80069f8:	6a1b      	ldr	r3, [r3, #32]
 80069fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d208      	bcs.n	8006a14 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006a02:	4b1a      	ldr	r3, [pc, #104]	; (8006a6c <HAL_RCC_ClockConfig+0x358>)
 8006a04:	6a1b      	ldr	r3, [r3, #32]
 8006a06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	69db      	ldr	r3, [r3, #28]
 8006a0e:	4917      	ldr	r1, [pc, #92]	; (8006a6c <HAL_RCC_ClockConfig+0x358>)
 8006a10:	4313      	orrs	r3, r2
 8006a12:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006a14:	f000 f834 	bl	8006a80 <HAL_RCC_GetSysClockFreq>
 8006a18:	4601      	mov	r1, r0
 8006a1a:	4b14      	ldr	r3, [pc, #80]	; (8006a6c <HAL_RCC_ClockConfig+0x358>)
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	0a1b      	lsrs	r3, r3, #8
 8006a20:	f003 030f 	and.w	r3, r3, #15
 8006a24:	4a12      	ldr	r2, [pc, #72]	; (8006a70 <HAL_RCC_ClockConfig+0x35c>)
 8006a26:	5cd3      	ldrb	r3, [r2, r3]
 8006a28:	f003 031f 	and.w	r3, r3, #31
 8006a2c:	fa21 f303 	lsr.w	r3, r1, r3
 8006a30:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006a32:	4b0e      	ldr	r3, [pc, #56]	; (8006a6c <HAL_RCC_ClockConfig+0x358>)
 8006a34:	699b      	ldr	r3, [r3, #24]
 8006a36:	f003 030f 	and.w	r3, r3, #15
 8006a3a:	4a0d      	ldr	r2, [pc, #52]	; (8006a70 <HAL_RCC_ClockConfig+0x35c>)
 8006a3c:	5cd3      	ldrb	r3, [r2, r3]
 8006a3e:	f003 031f 	and.w	r3, r3, #31
 8006a42:	693a      	ldr	r2, [r7, #16]
 8006a44:	fa22 f303 	lsr.w	r3, r2, r3
 8006a48:	4a0a      	ldr	r2, [pc, #40]	; (8006a74 <HAL_RCC_ClockConfig+0x360>)
 8006a4a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a4c:	4a0a      	ldr	r2, [pc, #40]	; (8006a78 <HAL_RCC_ClockConfig+0x364>)
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006a52:	4b0a      	ldr	r3, [pc, #40]	; (8006a7c <HAL_RCC_ClockConfig+0x368>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4618      	mov	r0, r3
 8006a58:	f7fa fe6c 	bl	8001734 <HAL_InitTick>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3718      	adds	r7, #24
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	58024400 	.word	0x58024400
 8006a70:	08011fe8 	.word	0x08011fe8
 8006a74:	24000004 	.word	0x24000004
 8006a78:	24000000 	.word	0x24000000
 8006a7c:	24000008 	.word	0x24000008

08006a80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b089      	sub	sp, #36	; 0x24
 8006a84:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a86:	4baf      	ldr	r3, [pc, #700]	; (8006d44 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a8e:	2b18      	cmp	r3, #24
 8006a90:	f200 814e 	bhi.w	8006d30 <HAL_RCC_GetSysClockFreq+0x2b0>
 8006a94:	a201      	add	r2, pc, #4	; (adr r2, 8006a9c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a9a:	bf00      	nop
 8006a9c:	08006b01 	.word	0x08006b01
 8006aa0:	08006d31 	.word	0x08006d31
 8006aa4:	08006d31 	.word	0x08006d31
 8006aa8:	08006d31 	.word	0x08006d31
 8006aac:	08006d31 	.word	0x08006d31
 8006ab0:	08006d31 	.word	0x08006d31
 8006ab4:	08006d31 	.word	0x08006d31
 8006ab8:	08006d31 	.word	0x08006d31
 8006abc:	08006b27 	.word	0x08006b27
 8006ac0:	08006d31 	.word	0x08006d31
 8006ac4:	08006d31 	.word	0x08006d31
 8006ac8:	08006d31 	.word	0x08006d31
 8006acc:	08006d31 	.word	0x08006d31
 8006ad0:	08006d31 	.word	0x08006d31
 8006ad4:	08006d31 	.word	0x08006d31
 8006ad8:	08006d31 	.word	0x08006d31
 8006adc:	08006b2d 	.word	0x08006b2d
 8006ae0:	08006d31 	.word	0x08006d31
 8006ae4:	08006d31 	.word	0x08006d31
 8006ae8:	08006d31 	.word	0x08006d31
 8006aec:	08006d31 	.word	0x08006d31
 8006af0:	08006d31 	.word	0x08006d31
 8006af4:	08006d31 	.word	0x08006d31
 8006af8:	08006d31 	.word	0x08006d31
 8006afc:	08006b33 	.word	0x08006b33
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b00:	4b90      	ldr	r3, [pc, #576]	; (8006d44 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 0320 	and.w	r3, r3, #32
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d009      	beq.n	8006b20 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b0c:	4b8d      	ldr	r3, [pc, #564]	; (8006d44 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	08db      	lsrs	r3, r3, #3
 8006b12:	f003 0303 	and.w	r3, r3, #3
 8006b16:	4a8c      	ldr	r2, [pc, #560]	; (8006d48 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006b18:	fa22 f303 	lsr.w	r3, r2, r3
 8006b1c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006b1e:	e10a      	b.n	8006d36 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006b20:	4b89      	ldr	r3, [pc, #548]	; (8006d48 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006b22:	61bb      	str	r3, [r7, #24]
    break;
 8006b24:	e107      	b.n	8006d36 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006b26:	4b89      	ldr	r3, [pc, #548]	; (8006d4c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006b28:	61bb      	str	r3, [r7, #24]
    break;
 8006b2a:	e104      	b.n	8006d36 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006b2c:	4b88      	ldr	r3, [pc, #544]	; (8006d50 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8006b2e:	61bb      	str	r3, [r7, #24]
    break;
 8006b30:	e101      	b.n	8006d36 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b32:	4b84      	ldr	r3, [pc, #528]	; (8006d44 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b36:	f003 0303 	and.w	r3, r3, #3
 8006b3a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006b3c:	4b81      	ldr	r3, [pc, #516]	; (8006d44 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b40:	091b      	lsrs	r3, r3, #4
 8006b42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b46:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006b48:	4b7e      	ldr	r3, [pc, #504]	; (8006d44 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b4c:	f003 0301 	and.w	r3, r3, #1
 8006b50:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006b52:	4b7c      	ldr	r3, [pc, #496]	; (8006d44 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b56:	08db      	lsrs	r3, r3, #3
 8006b58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	fb02 f303 	mul.w	r3, r2, r3
 8006b62:	ee07 3a90 	vmov	s15, r3
 8006b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b6a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f000 80da 	beq.w	8006d2a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d05a      	beq.n	8006c32 <HAL_RCC_GetSysClockFreq+0x1b2>
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d302      	bcc.n	8006b86 <HAL_RCC_GetSysClockFreq+0x106>
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	d078      	beq.n	8006c76 <HAL_RCC_GetSysClockFreq+0x1f6>
 8006b84:	e099      	b.n	8006cba <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b86:	4b6f      	ldr	r3, [pc, #444]	; (8006d44 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 0320 	and.w	r3, r3, #32
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d02d      	beq.n	8006bee <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b92:	4b6c      	ldr	r3, [pc, #432]	; (8006d44 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	08db      	lsrs	r3, r3, #3
 8006b98:	f003 0303 	and.w	r3, r3, #3
 8006b9c:	4a6a      	ldr	r2, [pc, #424]	; (8006d48 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8006ba2:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	ee07 3a90 	vmov	s15, r3
 8006baa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	ee07 3a90 	vmov	s15, r3
 8006bb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bbc:	4b61      	ldr	r3, [pc, #388]	; (8006d44 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bc4:	ee07 3a90 	vmov	s15, r3
 8006bc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bcc:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bd0:	eddf 5a60 	vldr	s11, [pc, #384]	; 8006d54 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006bd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bdc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006be0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006be4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006be8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006bec:	e087      	b.n	8006cfe <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	ee07 3a90 	vmov	s15, r3
 8006bf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bf8:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006d58 <HAL_RCC_GetSysClockFreq+0x2d8>
 8006bfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c00:	4b50      	ldr	r3, [pc, #320]	; (8006d44 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c08:	ee07 3a90 	vmov	s15, r3
 8006c0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c10:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c14:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8006d54 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006c18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c2c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c30:	e065      	b.n	8006cfe <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	ee07 3a90 	vmov	s15, r3
 8006c38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c3c:	eddf 6a47 	vldr	s13, [pc, #284]	; 8006d5c <HAL_RCC_GetSysClockFreq+0x2dc>
 8006c40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c44:	4b3f      	ldr	r3, [pc, #252]	; (8006d44 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c4c:	ee07 3a90 	vmov	s15, r3
 8006c50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c54:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c58:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006d54 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006c5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c70:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c74:	e043      	b.n	8006cfe <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	ee07 3a90 	vmov	s15, r3
 8006c7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c80:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006d60 <HAL_RCC_GetSysClockFreq+0x2e0>
 8006c84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c88:	4b2e      	ldr	r3, [pc, #184]	; (8006d44 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c90:	ee07 3a90 	vmov	s15, r3
 8006c94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c98:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c9c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006d54 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006ca0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ca4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ca8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cb4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cb8:	e021      	b.n	8006cfe <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	ee07 3a90 	vmov	s15, r3
 8006cc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cc4:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006d5c <HAL_RCC_GetSysClockFreq+0x2dc>
 8006cc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ccc:	4b1d      	ldr	r3, [pc, #116]	; (8006d44 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cd4:	ee07 3a90 	vmov	s15, r3
 8006cd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cdc:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ce0:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8006d54 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006ce4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ce8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cf8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cfc:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006cfe:	4b11      	ldr	r3, [pc, #68]	; (8006d44 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d02:	0a5b      	lsrs	r3, r3, #9
 8006d04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d08:	3301      	adds	r3, #1
 8006d0a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	ee07 3a90 	vmov	s15, r3
 8006d12:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006d16:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d22:	ee17 3a90 	vmov	r3, s15
 8006d26:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006d28:	e005      	b.n	8006d36 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	61bb      	str	r3, [r7, #24]
    break;
 8006d2e:	e002      	b.n	8006d36 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8006d30:	4b06      	ldr	r3, [pc, #24]	; (8006d4c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006d32:	61bb      	str	r3, [r7, #24]
    break;
 8006d34:	bf00      	nop
  }

  return sysclockfreq;
 8006d36:	69bb      	ldr	r3, [r7, #24]
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3724      	adds	r7, #36	; 0x24
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr
 8006d44:	58024400 	.word	0x58024400
 8006d48:	03d09000 	.word	0x03d09000
 8006d4c:	003d0900 	.word	0x003d0900
 8006d50:	017d7840 	.word	0x017d7840
 8006d54:	46000000 	.word	0x46000000
 8006d58:	4c742400 	.word	0x4c742400
 8006d5c:	4a742400 	.word	0x4a742400
 8006d60:	4bbebc20 	.word	0x4bbebc20

08006d64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006d6a:	f7ff fe89 	bl	8006a80 <HAL_RCC_GetSysClockFreq>
 8006d6e:	4601      	mov	r1, r0
 8006d70:	4b10      	ldr	r3, [pc, #64]	; (8006db4 <HAL_RCC_GetHCLKFreq+0x50>)
 8006d72:	699b      	ldr	r3, [r3, #24]
 8006d74:	0a1b      	lsrs	r3, r3, #8
 8006d76:	f003 030f 	and.w	r3, r3, #15
 8006d7a:	4a0f      	ldr	r2, [pc, #60]	; (8006db8 <HAL_RCC_GetHCLKFreq+0x54>)
 8006d7c:	5cd3      	ldrb	r3, [r2, r3]
 8006d7e:	f003 031f 	and.w	r3, r3, #31
 8006d82:	fa21 f303 	lsr.w	r3, r1, r3
 8006d86:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d88:	4b0a      	ldr	r3, [pc, #40]	; (8006db4 <HAL_RCC_GetHCLKFreq+0x50>)
 8006d8a:	699b      	ldr	r3, [r3, #24]
 8006d8c:	f003 030f 	and.w	r3, r3, #15
 8006d90:	4a09      	ldr	r2, [pc, #36]	; (8006db8 <HAL_RCC_GetHCLKFreq+0x54>)
 8006d92:	5cd3      	ldrb	r3, [r2, r3]
 8006d94:	f003 031f 	and.w	r3, r3, #31
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d9e:	4a07      	ldr	r2, [pc, #28]	; (8006dbc <HAL_RCC_GetHCLKFreq+0x58>)
 8006da0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006da2:	4a07      	ldr	r2, [pc, #28]	; (8006dc0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006da8:	4b04      	ldr	r3, [pc, #16]	; (8006dbc <HAL_RCC_GetHCLKFreq+0x58>)
 8006daa:	681b      	ldr	r3, [r3, #0]
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3708      	adds	r7, #8
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	58024400 	.word	0x58024400
 8006db8:	08011fe8 	.word	0x08011fe8
 8006dbc:	24000004 	.word	0x24000004
 8006dc0:	24000000 	.word	0x24000000

08006dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006dc8:	f7ff ffcc 	bl	8006d64 <HAL_RCC_GetHCLKFreq>
 8006dcc:	4601      	mov	r1, r0
 8006dce:	4b06      	ldr	r3, [pc, #24]	; (8006de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006dd0:	69db      	ldr	r3, [r3, #28]
 8006dd2:	091b      	lsrs	r3, r3, #4
 8006dd4:	f003 0307 	and.w	r3, r3, #7
 8006dd8:	4a04      	ldr	r2, [pc, #16]	; (8006dec <HAL_RCC_GetPCLK1Freq+0x28>)
 8006dda:	5cd3      	ldrb	r3, [r2, r3]
 8006ddc:	f003 031f 	and.w	r3, r3, #31
 8006de0:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	58024400 	.word	0x58024400
 8006dec:	08011fe8 	.word	0x08011fe8

08006df0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006df4:	f7ff ffb6 	bl	8006d64 <HAL_RCC_GetHCLKFreq>
 8006df8:	4601      	mov	r1, r0
 8006dfa:	4b06      	ldr	r3, [pc, #24]	; (8006e14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006dfc:	69db      	ldr	r3, [r3, #28]
 8006dfe:	0a1b      	lsrs	r3, r3, #8
 8006e00:	f003 0307 	and.w	r3, r3, #7
 8006e04:	4a04      	ldr	r2, [pc, #16]	; (8006e18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006e06:	5cd3      	ldrb	r3, [r2, r3]
 8006e08:	f003 031f 	and.w	r3, r3, #31
 8006e0c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	58024400 	.word	0x58024400
 8006e18:	08011fe8 	.word	0x08011fe8

08006e1c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b086      	sub	sp, #24
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006e24:	2300      	movs	r3, #0
 8006e26:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e28:	2300      	movs	r3, #0
 8006e2a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d03d      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e40:	d013      	beq.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006e42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e46:	d802      	bhi.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d007      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006e4c:	e01f      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006e4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e52:	d013      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006e54:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e58:	d01c      	beq.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006e5a:	e018      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e5c:	4baf      	ldr	r3, [pc, #700]	; (800711c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e60:	4aae      	ldr	r2, [pc, #696]	; (800711c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006e68:	e015      	b.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	3304      	adds	r3, #4
 8006e6e:	2102      	movs	r1, #2
 8006e70:	4618      	mov	r0, r3
 8006e72:	f001 fd33 	bl	80088dc <RCCEx_PLL2_Config>
 8006e76:	4603      	mov	r3, r0
 8006e78:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006e7a:	e00c      	b.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	3324      	adds	r3, #36	; 0x24
 8006e80:	2102      	movs	r1, #2
 8006e82:	4618      	mov	r0, r3
 8006e84:	f001 fddc 	bl	8008a40 <RCCEx_PLL3_Config>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006e8c:	e003      	b.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	75fb      	strb	r3, [r7, #23]
      break;
 8006e92:	e000      	b.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006e94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e96:	7dfb      	ldrb	r3, [r7, #23]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d109      	bne.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006e9c:	4b9f      	ldr	r3, [pc, #636]	; (800711c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ea0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ea8:	499c      	ldr	r1, [pc, #624]	; (800711c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	650b      	str	r3, [r1, #80]	; 0x50
 8006eae:	e001      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eb0:	7dfb      	ldrb	r3, [r7, #23]
 8006eb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d03d      	beq.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ec4:	2b04      	cmp	r3, #4
 8006ec6:	d826      	bhi.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006ec8:	a201      	add	r2, pc, #4	; (adr r2, 8006ed0 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8006eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ece:	bf00      	nop
 8006ed0:	08006ee5 	.word	0x08006ee5
 8006ed4:	08006ef3 	.word	0x08006ef3
 8006ed8:	08006f05 	.word	0x08006f05
 8006edc:	08006f1d 	.word	0x08006f1d
 8006ee0:	08006f1d 	.word	0x08006f1d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ee4:	4b8d      	ldr	r3, [pc, #564]	; (800711c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee8:	4a8c      	ldr	r2, [pc, #560]	; (800711c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006eea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006eee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006ef0:	e015      	b.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	3304      	adds	r3, #4
 8006ef6:	2100      	movs	r1, #0
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f001 fcef 	bl	80088dc <RCCEx_PLL2_Config>
 8006efe:	4603      	mov	r3, r0
 8006f00:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f02:	e00c      	b.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	3324      	adds	r3, #36	; 0x24
 8006f08:	2100      	movs	r1, #0
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f001 fd98 	bl	8008a40 <RCCEx_PLL3_Config>
 8006f10:	4603      	mov	r3, r0
 8006f12:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f14:	e003      	b.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	75fb      	strb	r3, [r7, #23]
      break;
 8006f1a:	e000      	b.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006f1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f1e:	7dfb      	ldrb	r3, [r7, #23]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d109      	bne.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f24:	4b7d      	ldr	r3, [pc, #500]	; (800711c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f28:	f023 0207 	bic.w	r2, r3, #7
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f30:	497a      	ldr	r1, [pc, #488]	; (800711c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f32:	4313      	orrs	r3, r2
 8006f34:	650b      	str	r3, [r1, #80]	; 0x50
 8006f36:	e001      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f38:	7dfb      	ldrb	r3, [r7, #23]
 8006f3a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d03e      	beq.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f4c:	2b80      	cmp	r3, #128	; 0x80
 8006f4e:	d01c      	beq.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8006f50:	2b80      	cmp	r3, #128	; 0x80
 8006f52:	d804      	bhi.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d008      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006f58:	2b40      	cmp	r3, #64	; 0x40
 8006f5a:	d00d      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006f5c:	e01e      	b.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006f5e:	2bc0      	cmp	r3, #192	; 0xc0
 8006f60:	d01f      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f66:	d01e      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006f68:	e018      	b.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f6a:	4b6c      	ldr	r3, [pc, #432]	; (800711c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6e:	4a6b      	ldr	r2, [pc, #428]	; (800711c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006f76:	e017      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	3304      	adds	r3, #4
 8006f7c:	2100      	movs	r1, #0
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f001 fcac 	bl	80088dc <RCCEx_PLL2_Config>
 8006f84:	4603      	mov	r3, r0
 8006f86:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006f88:	e00e      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	3324      	adds	r3, #36	; 0x24
 8006f8e:	2100      	movs	r1, #0
 8006f90:	4618      	mov	r0, r3
 8006f92:	f001 fd55 	bl	8008a40 <RCCEx_PLL3_Config>
 8006f96:	4603      	mov	r3, r0
 8006f98:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006f9a:	e005      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	75fb      	strb	r3, [r7, #23]
      break;
 8006fa0:	e002      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006fa2:	bf00      	nop
 8006fa4:	e000      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006fa6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fa8:	7dfb      	ldrb	r3, [r7, #23]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d109      	bne.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006fae:	4b5b      	ldr	r3, [pc, #364]	; (800711c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fb2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fba:	4958      	ldr	r1, [pc, #352]	; (800711c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	650b      	str	r3, [r1, #80]	; 0x50
 8006fc0:	e001      	b.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fc2:	7dfb      	ldrb	r3, [r7, #23]
 8006fc4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d044      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006fd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fdc:	d01f      	beq.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006fde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fe2:	d805      	bhi.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d00a      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006fe8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006fec:	d00e      	beq.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8006fee:	e01f      	b.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8006ff0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006ff4:	d01f      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8006ff6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ffa:	d01e      	beq.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006ffc:	e018      	b.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ffe:	4b47      	ldr	r3, [pc, #284]	; (800711c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007002:	4a46      	ldr	r2, [pc, #280]	; (800711c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007008:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800700a:	e017      	b.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	3304      	adds	r3, #4
 8007010:	2100      	movs	r1, #0
 8007012:	4618      	mov	r0, r3
 8007014:	f001 fc62 	bl	80088dc <RCCEx_PLL2_Config>
 8007018:	4603      	mov	r3, r0
 800701a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800701c:	e00e      	b.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	3324      	adds	r3, #36	; 0x24
 8007022:	2100      	movs	r1, #0
 8007024:	4618      	mov	r0, r3
 8007026:	f001 fd0b 	bl	8008a40 <RCCEx_PLL3_Config>
 800702a:	4603      	mov	r3, r0
 800702c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800702e:	e005      	b.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	75fb      	strb	r3, [r7, #23]
      break;
 8007034:	e002      	b.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8007036:	bf00      	nop
 8007038:	e000      	b.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800703a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800703c:	7dfb      	ldrb	r3, [r7, #23]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d10a      	bne.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007042:	4b36      	ldr	r3, [pc, #216]	; (800711c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007046:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007050:	4932      	ldr	r1, [pc, #200]	; (800711c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007052:	4313      	orrs	r3, r2
 8007054:	658b      	str	r3, [r1, #88]	; 0x58
 8007056:	e001      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007058:	7dfb      	ldrb	r3, [r7, #23]
 800705a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007064:	2b00      	cmp	r3, #0
 8007066:	d044      	beq.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800706e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007072:	d01f      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007074:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007078:	d805      	bhi.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00a      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800707e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007082:	d00e      	beq.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8007084:	e01f      	b.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8007086:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800708a:	d01f      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800708c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007090:	d01e      	beq.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007092:	e018      	b.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007094:	4b21      	ldr	r3, [pc, #132]	; (800711c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007098:	4a20      	ldr	r2, [pc, #128]	; (800711c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800709a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800709e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80070a0:	e017      	b.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	3304      	adds	r3, #4
 80070a6:	2100      	movs	r1, #0
 80070a8:	4618      	mov	r0, r3
 80070aa:	f001 fc17 	bl	80088dc <RCCEx_PLL2_Config>
 80070ae:	4603      	mov	r3, r0
 80070b0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80070b2:	e00e      	b.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	3324      	adds	r3, #36	; 0x24
 80070b8:	2100      	movs	r1, #0
 80070ba:	4618      	mov	r0, r3
 80070bc:	f001 fcc0 	bl	8008a40 <RCCEx_PLL3_Config>
 80070c0:	4603      	mov	r3, r0
 80070c2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80070c4:	e005      	b.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	75fb      	strb	r3, [r7, #23]
      break;
 80070ca:	e002      	b.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80070cc:	bf00      	nop
 80070ce:	e000      	b.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80070d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070d2:	7dfb      	ldrb	r3, [r7, #23]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d10a      	bne.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80070d8:	4b10      	ldr	r3, [pc, #64]	; (800711c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80070da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070dc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80070e6:	490d      	ldr	r1, [pc, #52]	; (800711c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80070e8:	4313      	orrs	r3, r2
 80070ea:	658b      	str	r3, [r1, #88]	; 0x58
 80070ec:	e001      	b.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070ee:	7dfb      	ldrb	r3, [r7, #23]
 80070f0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d035      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007102:	2b10      	cmp	r3, #16
 8007104:	d00c      	beq.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8007106:	2b10      	cmp	r3, #16
 8007108:	d802      	bhi.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800710a:	2b00      	cmp	r3, #0
 800710c:	d01b      	beq.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800710e:	e017      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8007110:	2b20      	cmp	r3, #32
 8007112:	d00c      	beq.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8007114:	2b30      	cmp	r3, #48	; 0x30
 8007116:	d018      	beq.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8007118:	e012      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800711a:	bf00      	nop
 800711c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007120:	4baf      	ldr	r3, [pc, #700]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007124:	4aae      	ldr	r2, [pc, #696]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007126:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800712a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800712c:	e00e      	b.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	3304      	adds	r3, #4
 8007132:	2102      	movs	r1, #2
 8007134:	4618      	mov	r0, r3
 8007136:	f001 fbd1 	bl	80088dc <RCCEx_PLL2_Config>
 800713a:	4603      	mov	r3, r0
 800713c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800713e:	e005      	b.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	75fb      	strb	r3, [r7, #23]
      break;
 8007144:	e002      	b.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8007146:	bf00      	nop
 8007148:	e000      	b.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800714a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800714c:	7dfb      	ldrb	r3, [r7, #23]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d109      	bne.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007152:	4ba3      	ldr	r3, [pc, #652]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007156:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800715e:	49a0      	ldr	r1, [pc, #640]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007160:	4313      	orrs	r3, r2
 8007162:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007164:	e001      	b.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007166:	7dfb      	ldrb	r3, [r7, #23]
 8007168:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007172:	2b00      	cmp	r3, #0
 8007174:	d042      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800717a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800717e:	d01f      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8007180:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007184:	d805      	bhi.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00a      	beq.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800718a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800718e:	d00e      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x392>
 8007190:	e01f      	b.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8007192:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007196:	d01f      	beq.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007198:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800719c:	d01e      	beq.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800719e:	e018      	b.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071a0:	4b8f      	ldr	r3, [pc, #572]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80071a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a4:	4a8e      	ldr	r2, [pc, #568]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80071a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80071ac:	e017      	b.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	3304      	adds	r3, #4
 80071b2:	2100      	movs	r1, #0
 80071b4:	4618      	mov	r0, r3
 80071b6:	f001 fb91 	bl	80088dc <RCCEx_PLL2_Config>
 80071ba:	4603      	mov	r3, r0
 80071bc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80071be:	e00e      	b.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	3324      	adds	r3, #36	; 0x24
 80071c4:	2100      	movs	r1, #0
 80071c6:	4618      	mov	r0, r3
 80071c8:	f001 fc3a 	bl	8008a40 <RCCEx_PLL3_Config>
 80071cc:	4603      	mov	r3, r0
 80071ce:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80071d0:	e005      	b.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	75fb      	strb	r3, [r7, #23]
      break;
 80071d6:	e002      	b.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80071d8:	bf00      	nop
 80071da:	e000      	b.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80071dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071de:	7dfb      	ldrb	r3, [r7, #23]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d109      	bne.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80071e4:	4b7e      	ldr	r3, [pc, #504]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80071e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071e8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071f0:	497b      	ldr	r1, [pc, #492]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80071f2:	4313      	orrs	r3, r2
 80071f4:	650b      	str	r3, [r1, #80]	; 0x50
 80071f6:	e001      	b.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071f8:	7dfb      	ldrb	r3, [r7, #23]
 80071fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007204:	2b00      	cmp	r3, #0
 8007206:	d042      	beq.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800720c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007210:	d01b      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007212:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007216:	d805      	bhi.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007218:	2b00      	cmp	r3, #0
 800721a:	d022      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x446>
 800721c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007220:	d00a      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007222:	e01b      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8007224:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007228:	d01d      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800722a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800722e:	d01c      	beq.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8007230:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007234:	d01b      	beq.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8007236:	e011      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	3304      	adds	r3, #4
 800723c:	2101      	movs	r1, #1
 800723e:	4618      	mov	r0, r3
 8007240:	f001 fb4c 	bl	80088dc <RCCEx_PLL2_Config>
 8007244:	4603      	mov	r3, r0
 8007246:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007248:	e012      	b.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	3324      	adds	r3, #36	; 0x24
 800724e:	2101      	movs	r1, #1
 8007250:	4618      	mov	r0, r3
 8007252:	f001 fbf5 	bl	8008a40 <RCCEx_PLL3_Config>
 8007256:	4603      	mov	r3, r0
 8007258:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800725a:	e009      	b.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	75fb      	strb	r3, [r7, #23]
      break;
 8007260:	e006      	b.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007262:	bf00      	nop
 8007264:	e004      	b.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007266:	bf00      	nop
 8007268:	e002      	b.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800726a:	bf00      	nop
 800726c:	e000      	b.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800726e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007270:	7dfb      	ldrb	r3, [r7, #23]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d109      	bne.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007276:	4b5a      	ldr	r3, [pc, #360]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800727a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007282:	4957      	ldr	r1, [pc, #348]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007284:	4313      	orrs	r3, r2
 8007286:	650b      	str	r3, [r1, #80]	; 0x50
 8007288:	e001      	b.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800728a:	7dfb      	ldrb	r3, [r7, #23]
 800728c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007296:	2b00      	cmp	r3, #0
 8007298:	d044      	beq.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80072a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072a4:	d01b      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80072a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072aa:	d805      	bhi.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d022      	beq.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80072b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072b4:	d00a      	beq.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80072b6:	e01b      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80072b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072bc:	d01d      	beq.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80072be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072c2:	d01c      	beq.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80072c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80072c8:	d01b      	beq.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80072ca:	e011      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	3304      	adds	r3, #4
 80072d0:	2101      	movs	r1, #1
 80072d2:	4618      	mov	r0, r3
 80072d4:	f001 fb02 	bl	80088dc <RCCEx_PLL2_Config>
 80072d8:	4603      	mov	r3, r0
 80072da:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80072dc:	e012      	b.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	3324      	adds	r3, #36	; 0x24
 80072e2:	2101      	movs	r1, #1
 80072e4:	4618      	mov	r0, r3
 80072e6:	f001 fbab 	bl	8008a40 <RCCEx_PLL3_Config>
 80072ea:	4603      	mov	r3, r0
 80072ec:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80072ee:	e009      	b.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	75fb      	strb	r3, [r7, #23]
      break;
 80072f4:	e006      	b.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80072f6:	bf00      	nop
 80072f8:	e004      	b.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80072fa:	bf00      	nop
 80072fc:	e002      	b.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80072fe:	bf00      	nop
 8007300:	e000      	b.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007302:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007304:	7dfb      	ldrb	r3, [r7, #23]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d10a      	bne.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800730a:	4b35      	ldr	r3, [pc, #212]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800730c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800730e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007318:	4931      	ldr	r1, [pc, #196]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800731a:	4313      	orrs	r3, r2
 800731c:	658b      	str	r3, [r1, #88]	; 0x58
 800731e:	e001      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007320:	7dfb      	ldrb	r3, [r7, #23]
 8007322:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d02d      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007334:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007338:	d005      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800733a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800733e:	d009      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8007340:	2b00      	cmp	r3, #0
 8007342:	d013      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007344:	e00f      	b.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007346:	4b26      	ldr	r3, [pc, #152]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734a:	4a25      	ldr	r2, [pc, #148]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800734c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007350:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007352:	e00c      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	3304      	adds	r3, #4
 8007358:	2101      	movs	r1, #1
 800735a:	4618      	mov	r0, r3
 800735c:	f001 fabe 	bl	80088dc <RCCEx_PLL2_Config>
 8007360:	4603      	mov	r3, r0
 8007362:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007364:	e003      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	75fb      	strb	r3, [r7, #23]
      break;
 800736a:	e000      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 800736c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800736e:	7dfb      	ldrb	r3, [r7, #23]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d109      	bne.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007374:	4b1a      	ldr	r3, [pc, #104]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007378:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007380:	4917      	ldr	r1, [pc, #92]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007382:	4313      	orrs	r3, r2
 8007384:	650b      	str	r3, [r1, #80]	; 0x50
 8007386:	e001      	b.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007388:	7dfb      	ldrb	r3, [r7, #23]
 800738a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007394:	2b00      	cmp	r3, #0
 8007396:	d035      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800739c:	2b03      	cmp	r3, #3
 800739e:	d81b      	bhi.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80073a0:	a201      	add	r2, pc, #4	; (adr r2, 80073a8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80073a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a6:	bf00      	nop
 80073a8:	080073e5 	.word	0x080073e5
 80073ac:	080073b9 	.word	0x080073b9
 80073b0:	080073c7 	.word	0x080073c7
 80073b4:	080073e5 	.word	0x080073e5
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073b8:	4b09      	ldr	r3, [pc, #36]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80073ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073bc:	4a08      	ldr	r2, [pc, #32]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80073be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80073c4:	e00f      	b.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	3304      	adds	r3, #4
 80073ca:	2102      	movs	r1, #2
 80073cc:	4618      	mov	r0, r3
 80073ce:	f001 fa85 	bl	80088dc <RCCEx_PLL2_Config>
 80073d2:	4603      	mov	r3, r0
 80073d4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80073d6:	e006      	b.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	75fb      	strb	r3, [r7, #23]
      break;
 80073dc:	e003      	b.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80073de:	bf00      	nop
 80073e0:	58024400 	.word	0x58024400
      break;
 80073e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073e6:	7dfb      	ldrb	r3, [r7, #23]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d109      	bne.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80073ec:	4bba      	ldr	r3, [pc, #744]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80073ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073f0:	f023 0203 	bic.w	r2, r3, #3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073f8:	49b7      	ldr	r1, [pc, #732]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80073fa:	4313      	orrs	r3, r2
 80073fc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80073fe:	e001      	b.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007400:	7dfb      	ldrb	r3, [r7, #23]
 8007402:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800740c:	2b00      	cmp	r3, #0
 800740e:	f000 8086 	beq.w	800751e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007412:	4bb2      	ldr	r3, [pc, #712]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4ab1      	ldr	r2, [pc, #708]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800741c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800741e:	f7fa f9d3 	bl	80017c8 <HAL_GetTick>
 8007422:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007424:	e009      	b.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007426:	f7fa f9cf 	bl	80017c8 <HAL_GetTick>
 800742a:	4602      	mov	r2, r0
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	1ad3      	subs	r3, r2, r3
 8007430:	2b64      	cmp	r3, #100	; 0x64
 8007432:	d902      	bls.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8007434:	2303      	movs	r3, #3
 8007436:	75fb      	strb	r3, [r7, #23]
        break;
 8007438:	e005      	b.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800743a:	4ba8      	ldr	r3, [pc, #672]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007442:	2b00      	cmp	r3, #0
 8007444:	d0ef      	beq.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8007446:	7dfb      	ldrb	r3, [r7, #23]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d166      	bne.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800744c:	4ba2      	ldr	r3, [pc, #648]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800744e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007456:	4053      	eors	r3, r2
 8007458:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800745c:	2b00      	cmp	r3, #0
 800745e:	d013      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007460:	4b9d      	ldr	r3, [pc, #628]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007468:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800746a:	4b9b      	ldr	r3, [pc, #620]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800746c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800746e:	4a9a      	ldr	r2, [pc, #616]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007474:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007476:	4b98      	ldr	r3, [pc, #608]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800747a:	4a97      	ldr	r2, [pc, #604]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800747c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007480:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007482:	4a95      	ldr	r2, [pc, #596]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800748e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007492:	d115      	bne.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007494:	f7fa f998 	bl	80017c8 <HAL_GetTick>
 8007498:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800749a:	e00b      	b.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800749c:	f7fa f994 	bl	80017c8 <HAL_GetTick>
 80074a0:	4602      	mov	r2, r0
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	1ad3      	subs	r3, r2, r3
 80074a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d902      	bls.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80074ae:	2303      	movs	r3, #3
 80074b0:	75fb      	strb	r3, [r7, #23]
            break;
 80074b2:	e005      	b.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80074b4:	4b88      	ldr	r3, [pc, #544]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80074b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074b8:	f003 0302 	and.w	r3, r3, #2
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d0ed      	beq.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80074c0:	7dfb      	ldrb	r3, [r7, #23]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d126      	bne.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80074cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074d4:	d10d      	bne.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80074d6:	4b80      	ldr	r3, [pc, #512]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80074e4:	0919      	lsrs	r1, r3, #4
 80074e6:	4b7e      	ldr	r3, [pc, #504]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80074e8:	400b      	ands	r3, r1
 80074ea:	497b      	ldr	r1, [pc, #492]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80074ec:	4313      	orrs	r3, r2
 80074ee:	610b      	str	r3, [r1, #16]
 80074f0:	e005      	b.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80074f2:	4b79      	ldr	r3, [pc, #484]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80074f4:	691b      	ldr	r3, [r3, #16]
 80074f6:	4a78      	ldr	r2, [pc, #480]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80074f8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80074fc:	6113      	str	r3, [r2, #16]
 80074fe:	4b76      	ldr	r3, [pc, #472]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007500:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800750c:	4972      	ldr	r1, [pc, #456]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800750e:	4313      	orrs	r3, r2
 8007510:	670b      	str	r3, [r1, #112]	; 0x70
 8007512:	e004      	b.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007514:	7dfb      	ldrb	r3, [r7, #23]
 8007516:	75bb      	strb	r3, [r7, #22]
 8007518:	e001      	b.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800751a:	7dfb      	ldrb	r3, [r7, #23]
 800751c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 0301 	and.w	r3, r3, #1
 8007526:	2b00      	cmp	r3, #0
 8007528:	d07d      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800752e:	2b28      	cmp	r3, #40	; 0x28
 8007530:	d866      	bhi.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8007532:	a201      	add	r2, pc, #4	; (adr r2, 8007538 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007538:	08007607 	.word	0x08007607
 800753c:	08007601 	.word	0x08007601
 8007540:	08007601 	.word	0x08007601
 8007544:	08007601 	.word	0x08007601
 8007548:	08007601 	.word	0x08007601
 800754c:	08007601 	.word	0x08007601
 8007550:	08007601 	.word	0x08007601
 8007554:	08007601 	.word	0x08007601
 8007558:	080075dd 	.word	0x080075dd
 800755c:	08007601 	.word	0x08007601
 8007560:	08007601 	.word	0x08007601
 8007564:	08007601 	.word	0x08007601
 8007568:	08007601 	.word	0x08007601
 800756c:	08007601 	.word	0x08007601
 8007570:	08007601 	.word	0x08007601
 8007574:	08007601 	.word	0x08007601
 8007578:	080075ef 	.word	0x080075ef
 800757c:	08007601 	.word	0x08007601
 8007580:	08007601 	.word	0x08007601
 8007584:	08007601 	.word	0x08007601
 8007588:	08007601 	.word	0x08007601
 800758c:	08007601 	.word	0x08007601
 8007590:	08007601 	.word	0x08007601
 8007594:	08007601 	.word	0x08007601
 8007598:	08007607 	.word	0x08007607
 800759c:	08007601 	.word	0x08007601
 80075a0:	08007601 	.word	0x08007601
 80075a4:	08007601 	.word	0x08007601
 80075a8:	08007601 	.word	0x08007601
 80075ac:	08007601 	.word	0x08007601
 80075b0:	08007601 	.word	0x08007601
 80075b4:	08007601 	.word	0x08007601
 80075b8:	08007607 	.word	0x08007607
 80075bc:	08007601 	.word	0x08007601
 80075c0:	08007601 	.word	0x08007601
 80075c4:	08007601 	.word	0x08007601
 80075c8:	08007601 	.word	0x08007601
 80075cc:	08007601 	.word	0x08007601
 80075d0:	08007601 	.word	0x08007601
 80075d4:	08007601 	.word	0x08007601
 80075d8:	08007607 	.word	0x08007607
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	3304      	adds	r3, #4
 80075e0:	2101      	movs	r1, #1
 80075e2:	4618      	mov	r0, r3
 80075e4:	f001 f97a 	bl	80088dc <RCCEx_PLL2_Config>
 80075e8:	4603      	mov	r3, r0
 80075ea:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80075ec:	e00c      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	3324      	adds	r3, #36	; 0x24
 80075f2:	2101      	movs	r1, #1
 80075f4:	4618      	mov	r0, r3
 80075f6:	f001 fa23 	bl	8008a40 <RCCEx_PLL3_Config>
 80075fa:	4603      	mov	r3, r0
 80075fc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80075fe:	e003      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	75fb      	strb	r3, [r7, #23]
      break;
 8007604:	e000      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8007606:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007608:	7dfb      	ldrb	r3, [r7, #23]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d109      	bne.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800760e:	4b32      	ldr	r3, [pc, #200]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007612:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800761a:	492f      	ldr	r1, [pc, #188]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800761c:	4313      	orrs	r3, r2
 800761e:	654b      	str	r3, [r1, #84]	; 0x54
 8007620:	e001      	b.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007622:	7dfb      	ldrb	r3, [r7, #23]
 8007624:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 0302 	and.w	r3, r3, #2
 800762e:	2b00      	cmp	r3, #0
 8007630:	d037      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007636:	2b05      	cmp	r3, #5
 8007638:	d820      	bhi.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x860>
 800763a:	a201      	add	r2, pc, #4	; (adr r2, 8007640 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800763c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007640:	08007683 	.word	0x08007683
 8007644:	08007659 	.word	0x08007659
 8007648:	0800766b 	.word	0x0800766b
 800764c:	08007683 	.word	0x08007683
 8007650:	08007683 	.word	0x08007683
 8007654:	08007683 	.word	0x08007683
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	3304      	adds	r3, #4
 800765c:	2101      	movs	r1, #1
 800765e:	4618      	mov	r0, r3
 8007660:	f001 f93c 	bl	80088dc <RCCEx_PLL2_Config>
 8007664:	4603      	mov	r3, r0
 8007666:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007668:	e00c      	b.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	3324      	adds	r3, #36	; 0x24
 800766e:	2101      	movs	r1, #1
 8007670:	4618      	mov	r0, r3
 8007672:	f001 f9e5 	bl	8008a40 <RCCEx_PLL3_Config>
 8007676:	4603      	mov	r3, r0
 8007678:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800767a:	e003      	b.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	75fb      	strb	r3, [r7, #23]
      break;
 8007680:	e000      	b.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8007682:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007684:	7dfb      	ldrb	r3, [r7, #23]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d109      	bne.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800768a:	4b13      	ldr	r3, [pc, #76]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800768c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800768e:	f023 0207 	bic.w	r2, r3, #7
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007696:	4910      	ldr	r1, [pc, #64]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007698:	4313      	orrs	r3, r2
 800769a:	654b      	str	r3, [r1, #84]	; 0x54
 800769c:	e001      	b.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800769e:	7dfb      	ldrb	r3, [r7, #23]
 80076a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 0304 	and.w	r3, r3, #4
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d040      	beq.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076b4:	2b05      	cmp	r3, #5
 80076b6:	d827      	bhi.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80076b8:	a201      	add	r2, pc, #4	; (adr r2, 80076c0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80076ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076be:	bf00      	nop
 80076c0:	0800770f 	.word	0x0800770f
 80076c4:	080076e5 	.word	0x080076e5
 80076c8:	080076f7 	.word	0x080076f7
 80076cc:	0800770f 	.word	0x0800770f
 80076d0:	0800770f 	.word	0x0800770f
 80076d4:	0800770f 	.word	0x0800770f
 80076d8:	58024400 	.word	0x58024400
 80076dc:	58024800 	.word	0x58024800
 80076e0:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	3304      	adds	r3, #4
 80076e8:	2101      	movs	r1, #1
 80076ea:	4618      	mov	r0, r3
 80076ec:	f001 f8f6 	bl	80088dc <RCCEx_PLL2_Config>
 80076f0:	4603      	mov	r3, r0
 80076f2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80076f4:	e00c      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	3324      	adds	r3, #36	; 0x24
 80076fa:	2101      	movs	r1, #1
 80076fc:	4618      	mov	r0, r3
 80076fe:	f001 f99f 	bl	8008a40 <RCCEx_PLL3_Config>
 8007702:	4603      	mov	r3, r0
 8007704:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007706:	e003      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	75fb      	strb	r3, [r7, #23]
      break;
 800770c:	e000      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800770e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007710:	7dfb      	ldrb	r3, [r7, #23]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d10a      	bne.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007716:	4bb2      	ldr	r3, [pc, #712]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800771a:	f023 0207 	bic.w	r2, r3, #7
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007724:	49ae      	ldr	r1, [pc, #696]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007726:	4313      	orrs	r3, r2
 8007728:	658b      	str	r3, [r1, #88]	; 0x58
 800772a:	e001      	b.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800772c:	7dfb      	ldrb	r3, [r7, #23]
 800772e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f003 0320 	and.w	r3, r3, #32
 8007738:	2b00      	cmp	r3, #0
 800773a:	d044      	beq.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007742:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007746:	d01b      	beq.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8007748:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800774c:	d805      	bhi.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800774e:	2b00      	cmp	r3, #0
 8007750:	d022      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8007752:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007756:	d00a      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8007758:	e01b      	b.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800775a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800775e:	d01d      	beq.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x980>
 8007760:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007764:	d01c      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8007766:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800776a:	d01b      	beq.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800776c:	e011      	b.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	3304      	adds	r3, #4
 8007772:	2100      	movs	r1, #0
 8007774:	4618      	mov	r0, r3
 8007776:	f001 f8b1 	bl	80088dc <RCCEx_PLL2_Config>
 800777a:	4603      	mov	r3, r0
 800777c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800777e:	e012      	b.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	3324      	adds	r3, #36	; 0x24
 8007784:	2102      	movs	r1, #2
 8007786:	4618      	mov	r0, r3
 8007788:	f001 f95a 	bl	8008a40 <RCCEx_PLL3_Config>
 800778c:	4603      	mov	r3, r0
 800778e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007790:	e009      	b.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	75fb      	strb	r3, [r7, #23]
      break;
 8007796:	e006      	b.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007798:	bf00      	nop
 800779a:	e004      	b.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800779c:	bf00      	nop
 800779e:	e002      	b.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80077a0:	bf00      	nop
 80077a2:	e000      	b.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80077a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077a6:	7dfb      	ldrb	r3, [r7, #23]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d10a      	bne.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80077ac:	4b8c      	ldr	r3, [pc, #560]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80077ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077b0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077ba:	4989      	ldr	r1, [pc, #548]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80077bc:	4313      	orrs	r3, r2
 80077be:	654b      	str	r3, [r1, #84]	; 0x54
 80077c0:	e001      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077c2:	7dfb      	ldrb	r3, [r7, #23]
 80077c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d044      	beq.n	800785c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80077d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077dc:	d01b      	beq.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80077de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077e2:	d805      	bhi.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d022      	beq.n	800782e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80077e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077ec:	d00a      	beq.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80077ee:	e01b      	b.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80077f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077f4:	d01d      	beq.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80077f6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80077fa:	d01c      	beq.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80077fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007800:	d01b      	beq.n	800783a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8007802:	e011      	b.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	3304      	adds	r3, #4
 8007808:	2100      	movs	r1, #0
 800780a:	4618      	mov	r0, r3
 800780c:	f001 f866 	bl	80088dc <RCCEx_PLL2_Config>
 8007810:	4603      	mov	r3, r0
 8007812:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007814:	e012      	b.n	800783c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	3324      	adds	r3, #36	; 0x24
 800781a:	2102      	movs	r1, #2
 800781c:	4618      	mov	r0, r3
 800781e:	f001 f90f 	bl	8008a40 <RCCEx_PLL3_Config>
 8007822:	4603      	mov	r3, r0
 8007824:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007826:	e009      	b.n	800783c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	75fb      	strb	r3, [r7, #23]
      break;
 800782c:	e006      	b.n	800783c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800782e:	bf00      	nop
 8007830:	e004      	b.n	800783c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007832:	bf00      	nop
 8007834:	e002      	b.n	800783c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007836:	bf00      	nop
 8007838:	e000      	b.n	800783c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800783a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800783c:	7dfb      	ldrb	r3, [r7, #23]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d10a      	bne.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007842:	4b67      	ldr	r3, [pc, #412]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007846:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007850:	4963      	ldr	r1, [pc, #396]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007852:	4313      	orrs	r3, r2
 8007854:	658b      	str	r3, [r1, #88]	; 0x58
 8007856:	e001      	b.n	800785c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007858:	7dfb      	ldrb	r3, [r7, #23]
 800785a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007864:	2b00      	cmp	r3, #0
 8007866:	d044      	beq.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800786e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007872:	d01b      	beq.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8007874:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007878:	d805      	bhi.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800787a:	2b00      	cmp	r3, #0
 800787c:	d022      	beq.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800787e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007882:	d00a      	beq.n	800789a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007884:	e01b      	b.n	80078be <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8007886:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800788a:	d01d      	beq.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800788c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007890:	d01c      	beq.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8007892:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007896:	d01b      	beq.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8007898:	e011      	b.n	80078be <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	3304      	adds	r3, #4
 800789e:	2100      	movs	r1, #0
 80078a0:	4618      	mov	r0, r3
 80078a2:	f001 f81b 	bl	80088dc <RCCEx_PLL2_Config>
 80078a6:	4603      	mov	r3, r0
 80078a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80078aa:	e012      	b.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	3324      	adds	r3, #36	; 0x24
 80078b0:	2102      	movs	r1, #2
 80078b2:	4618      	mov	r0, r3
 80078b4:	f001 f8c4 	bl	8008a40 <RCCEx_PLL3_Config>
 80078b8:	4603      	mov	r3, r0
 80078ba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80078bc:	e009      	b.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	75fb      	strb	r3, [r7, #23]
      break;
 80078c2:	e006      	b.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80078c4:	bf00      	nop
 80078c6:	e004      	b.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80078c8:	bf00      	nop
 80078ca:	e002      	b.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80078cc:	bf00      	nop
 80078ce:	e000      	b.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80078d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078d2:	7dfb      	ldrb	r3, [r7, #23]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d10a      	bne.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80078d8:	4b41      	ldr	r3, [pc, #260]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80078da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078dc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80078e6:	493e      	ldr	r1, [pc, #248]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80078e8:	4313      	orrs	r3, r2
 80078ea:	658b      	str	r3, [r1, #88]	; 0x58
 80078ec:	e001      	b.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078ee:	7dfb      	ldrb	r3, [r7, #23]
 80078f0:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 0308 	and.w	r3, r3, #8
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d01a      	beq.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007908:	d10a      	bne.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	3324      	adds	r3, #36	; 0x24
 800790e:	2102      	movs	r1, #2
 8007910:	4618      	mov	r0, r3
 8007912:	f001 f895 	bl	8008a40 <RCCEx_PLL3_Config>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d001      	beq.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007920:	4b2f      	ldr	r3, [pc, #188]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007924:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800792e:	492c      	ldr	r1, [pc, #176]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007930:	4313      	orrs	r3, r2
 8007932:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f003 0310 	and.w	r3, r3, #16
 800793c:	2b00      	cmp	r3, #0
 800793e:	d01a      	beq.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800794a:	d10a      	bne.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	3324      	adds	r3, #36	; 0x24
 8007950:	2102      	movs	r1, #2
 8007952:	4618      	mov	r0, r3
 8007954:	f001 f874 	bl	8008a40 <RCCEx_PLL3_Config>
 8007958:	4603      	mov	r3, r0
 800795a:	2b00      	cmp	r3, #0
 800795c:	d001      	beq.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007962:	4b1f      	ldr	r3, [pc, #124]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007966:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007970:	491b      	ldr	r1, [pc, #108]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007972:	4313      	orrs	r3, r2
 8007974:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800797e:	2b00      	cmp	r3, #0
 8007980:	d032      	beq.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800798c:	d00d      	beq.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800798e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007992:	d016      	beq.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8007994:	2b00      	cmp	r3, #0
 8007996:	d111      	bne.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	3304      	adds	r3, #4
 800799c:	2100      	movs	r1, #0
 800799e:	4618      	mov	r0, r3
 80079a0:	f000 ff9c 	bl	80088dc <RCCEx_PLL2_Config>
 80079a4:	4603      	mov	r3, r0
 80079a6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80079a8:	e00c      	b.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	3324      	adds	r3, #36	; 0x24
 80079ae:	2102      	movs	r1, #2
 80079b0:	4618      	mov	r0, r3
 80079b2:	f001 f845 	bl	8008a40 <RCCEx_PLL3_Config>
 80079b6:	4603      	mov	r3, r0
 80079b8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80079ba:	e003      	b.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	75fb      	strb	r3, [r7, #23]
      break;
 80079c0:	e000      	b.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80079c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079c4:	7dfb      	ldrb	r3, [r7, #23]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d10c      	bne.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80079ca:	4b05      	ldr	r3, [pc, #20]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80079cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80079d8:	4901      	ldr	r1, [pc, #4]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80079da:	4313      	orrs	r3, r2
 80079dc:	658b      	str	r3, [r1, #88]	; 0x58
 80079de:	e003      	b.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80079e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079e4:	7dfb      	ldrb	r3, [r7, #23]
 80079e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d02f      	beq.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079fe:	d00c      	beq.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007a00:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007a04:	d015      	beq.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8007a06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a0a:	d10f      	bne.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a0c:	4b79      	ldr	r3, [pc, #484]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a10:	4a78      	ldr	r2, [pc, #480]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007a18:	e00c      	b.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	3324      	adds	r3, #36	; 0x24
 8007a1e:	2101      	movs	r1, #1
 8007a20:	4618      	mov	r0, r3
 8007a22:	f001 f80d 	bl	8008a40 <RCCEx_PLL3_Config>
 8007a26:	4603      	mov	r3, r0
 8007a28:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007a2a:	e003      	b.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	75fb      	strb	r3, [r7, #23]
      break;
 8007a30:	e000      	b.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8007a32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a34:	7dfb      	ldrb	r3, [r7, #23]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d10a      	bne.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007a3a:	4b6e      	ldr	r3, [pc, #440]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a48:	496a      	ldr	r1, [pc, #424]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	654b      	str	r3, [r1, #84]	; 0x54
 8007a4e:	e001      	b.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a50:	7dfb      	ldrb	r3, [r7, #23]
 8007a52:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d029      	beq.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d003      	beq.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8007a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a6c:	d007      	beq.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8007a6e:	e00f      	b.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a70:	4b60      	ldr	r3, [pc, #384]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a74:	4a5f      	ldr	r2, [pc, #380]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007a7c:	e00b      	b.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	3304      	adds	r3, #4
 8007a82:	2102      	movs	r1, #2
 8007a84:	4618      	mov	r0, r3
 8007a86:	f000 ff29 	bl	80088dc <RCCEx_PLL2_Config>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007a8e:	e002      	b.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	75fb      	strb	r3, [r7, #23]
      break;
 8007a94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a96:	7dfb      	ldrb	r3, [r7, #23]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d109      	bne.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007a9c:	4b55      	ldr	r3, [pc, #340]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aa0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aa8:	4952      	ldr	r1, [pc, #328]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007aae:	e001      	b.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ab0:	7dfb      	ldrb	r3, [r7, #23]
 8007ab2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00a      	beq.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	3324      	adds	r3, #36	; 0x24
 8007ac4:	2102      	movs	r1, #2
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f000 ffba 	bl	8008a40 <RCCEx_PLL3_Config>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d001      	beq.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d02f      	beq.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007aea:	d00c      	beq.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007aec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007af0:	d802      	bhi.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d011      	beq.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8007af6:	e00d      	b.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8007af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007afc:	d00f      	beq.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8007afe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b02:	d00e      	beq.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8007b04:	e006      	b.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b06:	4b3b      	ldr	r3, [pc, #236]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b0a:	4a3a      	ldr	r2, [pc, #232]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b10:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007b12:	e007      	b.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	75fb      	strb	r3, [r7, #23]
      break;
 8007b18:	e004      	b.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007b1a:	bf00      	nop
 8007b1c:	e002      	b.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007b1e:	bf00      	nop
 8007b20:	e000      	b.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007b22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b24:	7dfb      	ldrb	r3, [r7, #23]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d109      	bne.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007b2a:	4b32      	ldr	r3, [pc, #200]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b36:	492f      	ldr	r1, [pc, #188]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	654b      	str	r3, [r1, #84]	; 0x54
 8007b3c:	e001      	b.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b3e:	7dfb      	ldrb	r3, [r7, #23]
 8007b40:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d008      	beq.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007b4e:	4b29      	ldr	r3, [pc, #164]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b5a:	4926      	ldr	r1, [pc, #152]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d009      	beq.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007b6c:	4b21      	ldr	r3, [pc, #132]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007b7a:	491e      	ldr	r1, [pc, #120]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d008      	beq.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007b8c:	4b19      	ldr	r3, [pc, #100]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b90:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b98:	4916      	ldr	r1, [pc, #88]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d00d      	beq.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007baa:	4b12      	ldr	r3, [pc, #72]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	4a11      	ldr	r2, [pc, #68]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007bb0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007bb4:	6113      	str	r3, [r2, #16]
 8007bb6:	4b0f      	ldr	r3, [pc, #60]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007bb8:	691a      	ldr	r2, [r3, #16]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007bc0:	490c      	ldr	r1, [pc, #48]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	da08      	bge.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007bce:	4b09      	ldr	r3, [pc, #36]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bd2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bda:	4906      	ldr	r1, [pc, #24]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8007be0:	7dbb      	ldrb	r3, [r7, #22]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d101      	bne.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8007be6:	2300      	movs	r3, #0
 8007be8:	e000      	b.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3718      	adds	r7, #24
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}
 8007bf4:	58024400 	.word	0x58024400

08007bf8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b090      	sub	sp, #64	; 0x40
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c06:	d150      	bne.n	8007caa <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007c08:	4ba1      	ldr	r3, [pc, #644]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c0c:	f003 0307 	and.w	r3, r3, #7
 8007c10:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c14:	2b04      	cmp	r3, #4
 8007c16:	d844      	bhi.n	8007ca2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8007c18:	a201      	add	r2, pc, #4	; (adr r2, 8007c20 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8007c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c1e:	bf00      	nop
 8007c20:	08007c35 	.word	0x08007c35
 8007c24:	08007c45 	.word	0x08007c45
 8007c28:	08007c55 	.word	0x08007c55
 8007c2c:	08007c9d 	.word	0x08007c9d
 8007c30:	08007c65 	.word	0x08007c65
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f000 fd03 	bl	8008644 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c42:	e241      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c44:	f107 0318 	add.w	r3, r7, #24
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f000 fa63 	bl	8008114 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c52:	e239      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c54:	f107 030c 	add.w	r3, r7, #12
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f000 fba7 	bl	80083ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c62:	e231      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007c64:	4b8a      	ldr	r3, [pc, #552]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c6c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d102      	bne.n	8007c7a <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007c74:	4b87      	ldr	r3, [pc, #540]	; (8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007c76:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007c78:	e226      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c80:	d102      	bne.n	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8007c82:	4b85      	ldr	r3, [pc, #532]	; (8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007c84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c86:	e21f      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c8e:	d102      	bne.n	8007c96 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8007c90:	4b82      	ldr	r3, [pc, #520]	; (8007e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007c92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c94:	e218      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007c96:	2300      	movs	r3, #0
 8007c98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c9a:	e215      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007c9c:	4b80      	ldr	r3, [pc, #512]	; (8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ca0:	e212      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ca6:	bf00      	nop
 8007ca8:	e20e      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cb0:	d14f      	bne.n	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8007cb2:	4b77      	ldr	r3, [pc, #476]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cb6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007cba:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cbe:	2b80      	cmp	r3, #128	; 0x80
 8007cc0:	d01c      	beq.n	8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8007cc2:	2b80      	cmp	r3, #128	; 0x80
 8007cc4:	d804      	bhi.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d008      	beq.n	8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8007cca:	2b40      	cmp	r3, #64	; 0x40
 8007ccc:	d00e      	beq.n	8007cec <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8007cce:	e03c      	b.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8007cd0:	2bc0      	cmp	r3, #192	; 0xc0
 8007cd2:	d037      	beq.n	8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8007cd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cd8:	d018      	beq.n	8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8007cda:	e036      	b.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f000 fcaf 	bl	8008644 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cea:	e1ed      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cec:	f107 0318 	add.w	r3, r7, #24
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f000 fa0f 	bl	8008114 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007cf6:	69bb      	ldr	r3, [r7, #24]
 8007cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cfa:	e1e5      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cfc:	f107 030c 	add.w	r3, r7, #12
 8007d00:	4618      	mov	r0, r3
 8007d02:	f000 fb53 	bl	80083ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d0a:	e1dd      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007d0c:	4b60      	ldr	r3, [pc, #384]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d14:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d102      	bne.n	8007d22 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007d1c:	4b5d      	ldr	r3, [pc, #372]	; (8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007d20:	e1d2      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d28:	d102      	bne.n	8007d30 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8007d2a:	4b5b      	ldr	r3, [pc, #364]	; (8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d2e:	e1cb      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d36:	d102      	bne.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8007d38:	4b58      	ldr	r3, [pc, #352]	; (8007e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d3c:	e1c4      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d42:	e1c1      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007d44:	4b56      	ldr	r3, [pc, #344]	; (8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007d46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d48:	e1be      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d4e:	bf00      	nop
 8007d50:	e1ba      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d58:	d153      	bne.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007d5a:	4b4d      	ldr	r3, [pc, #308]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d5e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007d62:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d6a:	d01f      	beq.n	8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8007d6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d70:	d805      	bhi.n	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00a      	beq.n	8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8007d76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d7a:	d00f      	beq.n	8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8007d7c:	e03d      	b.n	8007dfa <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8007d7e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007d82:	d037      	beq.n	8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8007d84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007d88:	d018      	beq.n	8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8007d8a:	e036      	b.n	8007dfa <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d90:	4618      	mov	r0, r3
 8007d92:	f000 fc57 	bl	8008644 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d9a:	e195      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d9c:	f107 0318 	add.w	r3, r7, #24
 8007da0:	4618      	mov	r0, r3
 8007da2:	f000 f9b7 	bl	8008114 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007daa:	e18d      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dac:	f107 030c 	add.w	r3, r7, #12
 8007db0:	4618      	mov	r0, r3
 8007db2:	f000 fafb 	bl	80083ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dba:	e185      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007dbc:	4b34      	ldr	r3, [pc, #208]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dc0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007dc4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d102      	bne.n	8007dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007dcc:	4b31      	ldr	r3, [pc, #196]	; (8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007dce:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007dd0:	e17a      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007dd8:	d102      	bne.n	8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8007dda:	4b2f      	ldr	r3, [pc, #188]	; (8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dde:	e173      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007de2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007de6:	d102      	bne.n	8007dee <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8007de8:	4b2c      	ldr	r3, [pc, #176]	; (8007e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007dea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dec:	e16c      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007dee:	2300      	movs	r3, #0
 8007df0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007df2:	e169      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007df4:	4b2a      	ldr	r3, [pc, #168]	; (8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007df6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007df8:	e166      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dfe:	bf00      	nop
 8007e00:	e162      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e08:	d15d      	bne.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007e0a:	4b21      	ldr	r3, [pc, #132]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e0e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007e12:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e1a:	d01f      	beq.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007e1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e20:	d805      	bhi.n	8007e2e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d00a      	beq.n	8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007e26:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007e2a:	d00f      	beq.n	8007e4c <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8007e2c:	e047      	b.n	8007ebe <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8007e2e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007e32:	d041      	beq.n	8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8007e34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e38:	d018      	beq.n	8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8007e3a:	e040      	b.n	8007ebe <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e40:	4618      	mov	r0, r3
 8007e42:	f000 fbff 	bl	8008644 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e4a:	e13d      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e4c:	f107 0318 	add.w	r3, r7, #24
 8007e50:	4618      	mov	r0, r3
 8007e52:	f000 f95f 	bl	8008114 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e5a:	e135      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e5c:	f107 030c 	add.w	r3, r7, #12
 8007e60:	4618      	mov	r0, r3
 8007e62:	f000 faa3 	bl	80083ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e6a:	e12d      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007e6c:	4b08      	ldr	r3, [pc, #32]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007e74:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d102      	bne.n	8007e82 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007e7c:	4b05      	ldr	r3, [pc, #20]	; (8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007e80:	e122      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e88:	d10c      	bne.n	8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8007e8a:	4b03      	ldr	r3, [pc, #12]	; (8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e8e:	e11b      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007e90:	58024400 	.word	0x58024400
 8007e94:	03d09000 	.word	0x03d09000
 8007e98:	003d0900 	.word	0x003d0900
 8007e9c:	017d7840 	.word	0x017d7840
 8007ea0:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ea6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007eaa:	d102      	bne.n	8007eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8007eac:	4b89      	ldr	r3, [pc, #548]	; (80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007eae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007eb0:	e10a      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007eb6:	e107      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007eb8:	4b87      	ldr	r3, [pc, #540]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007eba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ebc:	e104      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ec2:	bf00      	nop
 8007ec4:	e100      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ecc:	d153      	bne.n	8007f76 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007ece:	4b83      	ldr	r3, [pc, #524]	; (80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ed2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007ed6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ede:	d01f      	beq.n	8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8007ee0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ee4:	d805      	bhi.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00a      	beq.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8007eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eee:	d00f      	beq.n	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8007ef0:	e03d      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8007ef2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ef6:	d037      	beq.n	8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8007ef8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007efc:	d018      	beq.n	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8007efe:	e036      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f04:	4618      	mov	r0, r3
 8007f06:	f000 fb9d 	bl	8008644 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f0e:	e0db      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f10:	f107 0318 	add.w	r3, r7, #24
 8007f14:	4618      	mov	r0, r3
 8007f16:	f000 f8fd 	bl	8008114 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f1a:	69bb      	ldr	r3, [r7, #24]
 8007f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f1e:	e0d3      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f20:	f107 030c 	add.w	r3, r7, #12
 8007f24:	4618      	mov	r0, r3
 8007f26:	f000 fa41 	bl	80083ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f2e:	e0cb      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007f30:	4b6a      	ldr	r3, [pc, #424]	; (80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007f38:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d102      	bne.n	8007f46 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007f40:	4b67      	ldr	r3, [pc, #412]	; (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007f42:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007f44:	e0c0      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f4c:	d102      	bne.n	8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8007f4e:	4b65      	ldr	r3, [pc, #404]	; (80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007f50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f52:	e0b9      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f5a:	d102      	bne.n	8007f62 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8007f5c:	4b5d      	ldr	r3, [pc, #372]	; (80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f60:	e0b2      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007f62:	2300      	movs	r3, #0
 8007f64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f66:	e0af      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007f68:	4b5b      	ldr	r3, [pc, #364]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f6c:	e0ac      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f72:	bf00      	nop
 8007f74:	e0a8      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007f7c:	d13d      	bne.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007f7e:	4b57      	ldr	r3, [pc, #348]	; (80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007f86:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f8e:	d00c      	beq.n	8007faa <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007f90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f94:	d011      	beq.n	8007fba <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d12b      	bne.n	8007ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f9a:	f107 0318 	add.w	r3, r7, #24
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f000 f8b8 	bl	8008114 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fa8:	e08e      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007faa:	f107 030c 	add.w	r3, r7, #12
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f000 f9fc 	bl	80083ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fb8:	e086      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007fba:	4b48      	ldr	r3, [pc, #288]	; (80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fbe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007fc2:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d102      	bne.n	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007fca:	4b45      	ldr	r3, [pc, #276]	; (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007fce:	e07b      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fd6:	d102      	bne.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8007fd8:	4b42      	ldr	r3, [pc, #264]	; (80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007fda:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fdc:	e074      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fe0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fe4:	d102      	bne.n	8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8007fe6:	4b3b      	ldr	r3, [pc, #236]	; (80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fea:	e06d      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007fec:	2300      	movs	r3, #0
 8007fee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ff0:	e06a      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ff6:	bf00      	nop
 8007ff8:	e066      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008000:	d11f      	bne.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008002:	4b36      	ldr	r3, [pc, #216]	; (80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800800a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800800c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800800e:	2b00      	cmp	r3, #0
 8008010:	d003      	beq.n	800801a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008016:	d008      	beq.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8008018:	e00f      	b.n	800803a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800801a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800801e:	4618      	mov	r0, r3
 8008020:	f000 fb10 	bl	8008644 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008026:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008028:	e04e      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800802a:	f107 0318 	add.w	r3, r7, #24
 800802e:	4618      	mov	r0, r3
 8008030:	f000 f870 	bl	8008114 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008034:	6a3b      	ldr	r3, [r7, #32]
 8008036:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008038:	e046      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800803a:	2300      	movs	r3, #0
 800803c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800803e:	bf00      	nop
 8008040:	e042      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008048:	d13c      	bne.n	80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800804a:	4b24      	ldr	r3, [pc, #144]	; (80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800804c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800804e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008052:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008056:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800805a:	d01e      	beq.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 800805c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008060:	d805      	bhi.n	800806e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8008062:	2b00      	cmp	r3, #0
 8008064:	d00d      	beq.n	8008082 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008066:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800806a:	d00e      	beq.n	800808a <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 800806c:	e026      	b.n	80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800806e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008072:	d01d      	beq.n	80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8008074:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008078:	d01d      	beq.n	80080b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800807a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800807e:	d014      	beq.n	80080aa <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8008080:	e01c      	b.n	80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008082:	f000 f831 	bl	80080e8 <HAL_RCCEx_GetD3PCLK1Freq>
 8008086:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008088:	e01e      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800808a:	f107 0318 	add.w	r3, r7, #24
 800808e:	4618      	mov	r0, r3
 8008090:	f000 f840 	bl	8008114 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008094:	69fb      	ldr	r3, [r7, #28]
 8008096:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008098:	e016      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800809a:	f107 030c 	add.w	r3, r7, #12
 800809e:	4618      	mov	r0, r3
 80080a0:	f000 f984 	bl	80083ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080a8:	e00e      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 80080aa:	4b0d      	ldr	r3, [pc, #52]	; (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80080ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080ae:	e00b      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 80080b0:	4b0c      	ldr	r3, [pc, #48]	; (80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80080b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080b4:	e008      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 80080b6:	4b07      	ldr	r3, [pc, #28]	; (80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80080b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080ba:	e005      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80080bc:	2300      	movs	r3, #0
 80080be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080c0:	bf00      	nop
 80080c2:	e001      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 80080c4:	2300      	movs	r3, #0
 80080c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80080c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3740      	adds	r7, #64	; 0x40
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	017d7840 	.word	0x017d7840
 80080d8:	00bb8000 	.word	0x00bb8000
 80080dc:	58024400 	.word	0x58024400
 80080e0:	03d09000 	.word	0x03d09000
 80080e4:	003d0900 	.word	0x003d0900

080080e8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80080ec:	f7fe fe3a 	bl	8006d64 <HAL_RCC_GetHCLKFreq>
 80080f0:	4601      	mov	r1, r0
 80080f2:	4b06      	ldr	r3, [pc, #24]	; (800810c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80080f4:	6a1b      	ldr	r3, [r3, #32]
 80080f6:	091b      	lsrs	r3, r3, #4
 80080f8:	f003 0307 	and.w	r3, r3, #7
 80080fc:	4a04      	ldr	r2, [pc, #16]	; (8008110 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80080fe:	5cd3      	ldrb	r3, [r2, r3]
 8008100:	f003 031f 	and.w	r3, r3, #31
 8008104:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008108:	4618      	mov	r0, r3
 800810a:	bd80      	pop	{r7, pc}
 800810c:	58024400 	.word	0x58024400
 8008110:	08011fe8 	.word	0x08011fe8

08008114 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008114:	b480      	push	{r7}
 8008116:	b089      	sub	sp, #36	; 0x24
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800811c:	4b9d      	ldr	r3, [pc, #628]	; (8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800811e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008120:	f003 0303 	and.w	r3, r3, #3
 8008124:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008126:	4b9b      	ldr	r3, [pc, #620]	; (8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800812a:	0b1b      	lsrs	r3, r3, #12
 800812c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008130:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008132:	4b98      	ldr	r3, [pc, #608]	; (8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008136:	091b      	lsrs	r3, r3, #4
 8008138:	f003 0301 	and.w	r3, r3, #1
 800813c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800813e:	4b95      	ldr	r3, [pc, #596]	; (8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008142:	08db      	lsrs	r3, r3, #3
 8008144:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008148:	693a      	ldr	r2, [r7, #16]
 800814a:	fb02 f303 	mul.w	r3, r2, r3
 800814e:	ee07 3a90 	vmov	s15, r3
 8008152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008156:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	2b00      	cmp	r3, #0
 800815e:	f000 810a 	beq.w	8008376 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	2b01      	cmp	r3, #1
 8008166:	d05a      	beq.n	800821e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8008168:	2b01      	cmp	r3, #1
 800816a:	d302      	bcc.n	8008172 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800816c:	2b02      	cmp	r3, #2
 800816e:	d078      	beq.n	8008262 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8008170:	e099      	b.n	80082a6 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008172:	4b88      	ldr	r3, [pc, #544]	; (8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f003 0320 	and.w	r3, r3, #32
 800817a:	2b00      	cmp	r3, #0
 800817c:	d02d      	beq.n	80081da <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800817e:	4b85      	ldr	r3, [pc, #532]	; (8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	08db      	lsrs	r3, r3, #3
 8008184:	f003 0303 	and.w	r3, r3, #3
 8008188:	4a83      	ldr	r2, [pc, #524]	; (8008398 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800818a:	fa22 f303 	lsr.w	r3, r2, r3
 800818e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	ee07 3a90 	vmov	s15, r3
 8008196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	ee07 3a90 	vmov	s15, r3
 80081a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081a8:	4b7a      	ldr	r3, [pc, #488]	; (8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80081aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081b0:	ee07 3a90 	vmov	s15, r3
 80081b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80081bc:	eddf 5a77 	vldr	s11, [pc, #476]	; 800839c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80081c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081d4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80081d8:	e087      	b.n	80082ea <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	ee07 3a90 	vmov	s15, r3
 80081e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081e4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80083a0 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80081e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081ec:	4b69      	ldr	r3, [pc, #420]	; (8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80081ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081f4:	ee07 3a90 	vmov	s15, r3
 80081f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8008200:	eddf 5a66 	vldr	s11, [pc, #408]	; 800839c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008204:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008208:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800820c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008210:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008214:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008218:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800821c:	e065      	b.n	80082ea <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	ee07 3a90 	vmov	s15, r3
 8008224:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008228:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80083a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800822c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008230:	4b58      	ldr	r3, [pc, #352]	; (8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008238:	ee07 3a90 	vmov	s15, r3
 800823c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008240:	ed97 6a03 	vldr	s12, [r7, #12]
 8008244:	eddf 5a55 	vldr	s11, [pc, #340]	; 800839c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008248:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800824c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008250:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008254:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008258:	ee67 7a27 	vmul.f32	s15, s14, s15
 800825c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008260:	e043      	b.n	80082ea <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	ee07 3a90 	vmov	s15, r3
 8008268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800826c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80083a8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8008270:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008274:	4b47      	ldr	r3, [pc, #284]	; (8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800827c:	ee07 3a90 	vmov	s15, r3
 8008280:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008284:	ed97 6a03 	vldr	s12, [r7, #12]
 8008288:	eddf 5a44 	vldr	s11, [pc, #272]	; 800839c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800828c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008290:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008294:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008298:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800829c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082a4:	e021      	b.n	80082ea <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	ee07 3a90 	vmov	s15, r3
 80082ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082b0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80083a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80082b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082b8:	4b36      	ldr	r3, [pc, #216]	; (8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80082ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082c0:	ee07 3a90 	vmov	s15, r3
 80082c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80082cc:	eddf 5a33 	vldr	s11, [pc, #204]	; 800839c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80082d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082e8:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80082ea:	4b2a      	ldr	r3, [pc, #168]	; (8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80082ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ee:	0a5b      	lsrs	r3, r3, #9
 80082f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082f4:	ee07 3a90 	vmov	s15, r3
 80082f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008300:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008304:	edd7 6a07 	vldr	s13, [r7, #28]
 8008308:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800830c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008310:	ee17 2a90 	vmov	r2, s15
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008318:	4b1e      	ldr	r3, [pc, #120]	; (8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800831a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800831c:	0c1b      	lsrs	r3, r3, #16
 800831e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008322:	ee07 3a90 	vmov	s15, r3
 8008326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800832a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800832e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008332:	edd7 6a07 	vldr	s13, [r7, #28]
 8008336:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800833a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800833e:	ee17 2a90 	vmov	r2, s15
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008346:	4b13      	ldr	r3, [pc, #76]	; (8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800834a:	0e1b      	lsrs	r3, r3, #24
 800834c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008350:	ee07 3a90 	vmov	s15, r3
 8008354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008358:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800835c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008360:	edd7 6a07 	vldr	s13, [r7, #28]
 8008364:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008368:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800836c:	ee17 2a90 	vmov	r2, s15
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008374:	e008      	b.n	8008388 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2200      	movs	r2, #0
 800837a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	609a      	str	r2, [r3, #8]
}
 8008388:	bf00      	nop
 800838a:	3724      	adds	r7, #36	; 0x24
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr
 8008394:	58024400 	.word	0x58024400
 8008398:	03d09000 	.word	0x03d09000
 800839c:	46000000 	.word	0x46000000
 80083a0:	4c742400 	.word	0x4c742400
 80083a4:	4a742400 	.word	0x4a742400
 80083a8:	4bbebc20 	.word	0x4bbebc20

080083ac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b089      	sub	sp, #36	; 0x24
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80083b4:	4b9d      	ldr	r3, [pc, #628]	; (800862c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80083b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083b8:	f003 0303 	and.w	r3, r3, #3
 80083bc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80083be:	4b9b      	ldr	r3, [pc, #620]	; (800862c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80083c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c2:	0d1b      	lsrs	r3, r3, #20
 80083c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083c8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80083ca:	4b98      	ldr	r3, [pc, #608]	; (800862c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80083cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ce:	0a1b      	lsrs	r3, r3, #8
 80083d0:	f003 0301 	and.w	r3, r3, #1
 80083d4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80083d6:	4b95      	ldr	r3, [pc, #596]	; (800862c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80083d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083da:	08db      	lsrs	r3, r3, #3
 80083dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80083e0:	693a      	ldr	r2, [r7, #16]
 80083e2:	fb02 f303 	mul.w	r3, r2, r3
 80083e6:	ee07 3a90 	vmov	s15, r3
 80083ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f000 810a 	beq.w	800860e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80083fa:	69bb      	ldr	r3, [r7, #24]
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d05a      	beq.n	80084b6 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8008400:	2b01      	cmp	r3, #1
 8008402:	d302      	bcc.n	800840a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8008404:	2b02      	cmp	r3, #2
 8008406:	d078      	beq.n	80084fa <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8008408:	e099      	b.n	800853e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800840a:	4b88      	ldr	r3, [pc, #544]	; (800862c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f003 0320 	and.w	r3, r3, #32
 8008412:	2b00      	cmp	r3, #0
 8008414:	d02d      	beq.n	8008472 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008416:	4b85      	ldr	r3, [pc, #532]	; (800862c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	08db      	lsrs	r3, r3, #3
 800841c:	f003 0303 	and.w	r3, r3, #3
 8008420:	4a83      	ldr	r2, [pc, #524]	; (8008630 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8008422:	fa22 f303 	lsr.w	r3, r2, r3
 8008426:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	ee07 3a90 	vmov	s15, r3
 800842e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	ee07 3a90 	vmov	s15, r3
 8008438:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800843c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008440:	4b7a      	ldr	r3, [pc, #488]	; (800862c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008448:	ee07 3a90 	vmov	s15, r3
 800844c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008450:	ed97 6a03 	vldr	s12, [r7, #12]
 8008454:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008634 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008458:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800845c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008460:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008464:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008468:	ee67 7a27 	vmul.f32	s15, s14, s15
 800846c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008470:	e087      	b.n	8008582 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	ee07 3a90 	vmov	s15, r3
 8008478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800847c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008638 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8008480:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008484:	4b69      	ldr	r3, [pc, #420]	; (800862c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800848c:	ee07 3a90 	vmov	s15, r3
 8008490:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008494:	ed97 6a03 	vldr	s12, [r7, #12]
 8008498:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008634 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800849c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80084b4:	e065      	b.n	8008582 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	ee07 3a90 	vmov	s15, r3
 80084bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084c0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800863c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80084c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084c8:	4b58      	ldr	r3, [pc, #352]	; (800862c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80084ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084d0:	ee07 3a90 	vmov	s15, r3
 80084d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80084dc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008634 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80084e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80084f8:	e043      	b.n	8008582 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	ee07 3a90 	vmov	s15, r3
 8008500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008504:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008640 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8008508:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800850c:	4b47      	ldr	r3, [pc, #284]	; (800862c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800850e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008514:	ee07 3a90 	vmov	s15, r3
 8008518:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800851c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008520:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008634 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008524:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008528:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800852c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008530:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008534:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008538:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800853c:	e021      	b.n	8008582 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	ee07 3a90 	vmov	s15, r3
 8008544:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008548:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800863c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800854c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008550:	4b36      	ldr	r3, [pc, #216]	; (800862c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008558:	ee07 3a90 	vmov	s15, r3
 800855c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008560:	ed97 6a03 	vldr	s12, [r7, #12]
 8008564:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008634 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008568:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800856c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008570:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008574:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800857c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008580:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008582:	4b2a      	ldr	r3, [pc, #168]	; (800862c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008586:	0a5b      	lsrs	r3, r3, #9
 8008588:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800858c:	ee07 3a90 	vmov	s15, r3
 8008590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008594:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008598:	ee37 7a87 	vadd.f32	s14, s15, s14
 800859c:	edd7 6a07 	vldr	s13, [r7, #28]
 80085a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085a8:	ee17 2a90 	vmov	r2, s15
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80085b0:	4b1e      	ldr	r3, [pc, #120]	; (800862c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80085b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b4:	0c1b      	lsrs	r3, r3, #16
 80085b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085ba:	ee07 3a90 	vmov	s15, r3
 80085be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80085c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80085ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085d6:	ee17 2a90 	vmov	r2, s15
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80085de:	4b13      	ldr	r3, [pc, #76]	; (800862c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80085e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e2:	0e1b      	lsrs	r3, r3, #24
 80085e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085e8:	ee07 3a90 	vmov	s15, r3
 80085ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80085f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80085fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008600:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008604:	ee17 2a90 	vmov	r2, s15
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800860c:	e008      	b.n	8008620 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2200      	movs	r2, #0
 8008618:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	609a      	str	r2, [r3, #8]
}
 8008620:	bf00      	nop
 8008622:	3724      	adds	r7, #36	; 0x24
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr
 800862c:	58024400 	.word	0x58024400
 8008630:	03d09000 	.word	0x03d09000
 8008634:	46000000 	.word	0x46000000
 8008638:	4c742400 	.word	0x4c742400
 800863c:	4a742400 	.word	0x4a742400
 8008640:	4bbebc20 	.word	0x4bbebc20

08008644 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8008644:	b480      	push	{r7}
 8008646:	b089      	sub	sp, #36	; 0x24
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800864c:	4b9d      	ldr	r3, [pc, #628]	; (80088c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800864e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008650:	f003 0303 	and.w	r3, r3, #3
 8008654:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8008656:	4b9b      	ldr	r3, [pc, #620]	; (80088c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800865a:	091b      	lsrs	r3, r3, #4
 800865c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008660:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008662:	4b98      	ldr	r3, [pc, #608]	; (80088c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008666:	f003 0301 	and.w	r3, r3, #1
 800866a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800866c:	4b95      	ldr	r3, [pc, #596]	; (80088c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800866e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008670:	08db      	lsrs	r3, r3, #3
 8008672:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008676:	693a      	ldr	r2, [r7, #16]
 8008678:	fb02 f303 	mul.w	r3, r2, r3
 800867c:	ee07 3a90 	vmov	s15, r3
 8008680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008684:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	2b00      	cmp	r3, #0
 800868c:	f000 810a 	beq.w	80088a4 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8008690:	69bb      	ldr	r3, [r7, #24]
 8008692:	2b01      	cmp	r3, #1
 8008694:	d05a      	beq.n	800874c <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8008696:	2b01      	cmp	r3, #1
 8008698:	d302      	bcc.n	80086a0 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800869a:	2b02      	cmp	r3, #2
 800869c:	d078      	beq.n	8008790 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800869e:	e099      	b.n	80087d4 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086a0:	4b88      	ldr	r3, [pc, #544]	; (80088c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f003 0320 	and.w	r3, r3, #32
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d02d      	beq.n	8008708 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80086ac:	4b85      	ldr	r3, [pc, #532]	; (80088c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	08db      	lsrs	r3, r3, #3
 80086b2:	f003 0303 	and.w	r3, r3, #3
 80086b6:	4a84      	ldr	r2, [pc, #528]	; (80088c8 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 80086b8:	fa22 f303 	lsr.w	r3, r2, r3
 80086bc:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	ee07 3a90 	vmov	s15, r3
 80086c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	ee07 3a90 	vmov	s15, r3
 80086ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086d6:	4b7b      	ldr	r3, [pc, #492]	; (80088c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80086d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086de:	ee07 3a90 	vmov	s15, r3
 80086e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80086ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 80088cc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80086ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008702:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008706:	e087      	b.n	8008818 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	ee07 3a90 	vmov	s15, r3
 800870e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008712:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80088d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8008716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800871a:	4b6a      	ldr	r3, [pc, #424]	; (80088c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800871c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800871e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008722:	ee07 3a90 	vmov	s15, r3
 8008726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800872a:	ed97 6a03 	vldr	s12, [r7, #12]
 800872e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80088cc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800873a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800873e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008746:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800874a:	e065      	b.n	8008818 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	ee07 3a90 	vmov	s15, r3
 8008752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008756:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80088d4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800875a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800875e:	4b59      	ldr	r3, [pc, #356]	; (80088c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008766:	ee07 3a90 	vmov	s15, r3
 800876a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800876e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008772:	eddf 5a56 	vldr	s11, [pc, #344]	; 80088cc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800877a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800877e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800878a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800878e:	e043      	b.n	8008818 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	ee07 3a90 	vmov	s15, r3
 8008796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800879a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80088d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800879e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087a2:	4b48      	ldr	r3, [pc, #288]	; (80088c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80087a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087aa:	ee07 3a90 	vmov	s15, r3
 80087ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80087b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80088cc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80087ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80087d2:	e021      	b.n	8008818 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	ee07 3a90 	vmov	s15, r3
 80087da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80088d4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80087e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087e6:	4b37      	ldr	r3, [pc, #220]	; (80088c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80087e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087ee:	ee07 3a90 	vmov	s15, r3
 80087f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80087fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 80088cc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80087fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008806:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800880a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800880e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008812:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008816:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008818:	4b2a      	ldr	r3, [pc, #168]	; (80088c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800881a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800881c:	0a5b      	lsrs	r3, r3, #9
 800881e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008822:	ee07 3a90 	vmov	s15, r3
 8008826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800882a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800882e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008832:	edd7 6a07 	vldr	s13, [r7, #28]
 8008836:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800883a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800883e:	ee17 2a90 	vmov	r2, s15
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008846:	4b1f      	ldr	r3, [pc, #124]	; (80088c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800884a:	0c1b      	lsrs	r3, r3, #16
 800884c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008850:	ee07 3a90 	vmov	s15, r3
 8008854:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008858:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800885c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008860:	edd7 6a07 	vldr	s13, [r7, #28]
 8008864:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008868:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800886c:	ee17 2a90 	vmov	r2, s15
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008874:	4b13      	ldr	r3, [pc, #76]	; (80088c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008878:	0e1b      	lsrs	r3, r3, #24
 800887a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800887e:	ee07 3a90 	vmov	s15, r3
 8008882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008886:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800888a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800888e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008892:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008896:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800889a:	ee17 2a90 	vmov	r2, s15
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80088a2:	e008      	b.n	80088b6 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	609a      	str	r2, [r3, #8]
}
 80088b6:	bf00      	nop
 80088b8:	3724      	adds	r7, #36	; 0x24
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr
 80088c2:	bf00      	nop
 80088c4:	58024400 	.word	0x58024400
 80088c8:	03d09000 	.word	0x03d09000
 80088cc:	46000000 	.word	0x46000000
 80088d0:	4c742400 	.word	0x4c742400
 80088d4:	4a742400 	.word	0x4a742400
 80088d8:	4bbebc20 	.word	0x4bbebc20

080088dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80088e6:	2300      	movs	r3, #0
 80088e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80088ea:	4b53      	ldr	r3, [pc, #332]	; (8008a38 <RCCEx_PLL2_Config+0x15c>)
 80088ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ee:	f003 0303 	and.w	r3, r3, #3
 80088f2:	2b03      	cmp	r3, #3
 80088f4:	d101      	bne.n	80088fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80088f6:	2301      	movs	r3, #1
 80088f8:	e099      	b.n	8008a2e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80088fa:	4b4f      	ldr	r3, [pc, #316]	; (8008a38 <RCCEx_PLL2_Config+0x15c>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a4e      	ldr	r2, [pc, #312]	; (8008a38 <RCCEx_PLL2_Config+0x15c>)
 8008900:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008904:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008906:	f7f8 ff5f 	bl	80017c8 <HAL_GetTick>
 800890a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800890c:	e008      	b.n	8008920 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800890e:	f7f8 ff5b 	bl	80017c8 <HAL_GetTick>
 8008912:	4602      	mov	r2, r0
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	1ad3      	subs	r3, r2, r3
 8008918:	2b02      	cmp	r3, #2
 800891a:	d901      	bls.n	8008920 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800891c:	2303      	movs	r3, #3
 800891e:	e086      	b.n	8008a2e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008920:	4b45      	ldr	r3, [pc, #276]	; (8008a38 <RCCEx_PLL2_Config+0x15c>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008928:	2b00      	cmp	r3, #0
 800892a:	d1f0      	bne.n	800890e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800892c:	4b42      	ldr	r3, [pc, #264]	; (8008a38 <RCCEx_PLL2_Config+0x15c>)
 800892e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008930:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	031b      	lsls	r3, r3, #12
 800893a:	493f      	ldr	r1, [pc, #252]	; (8008a38 <RCCEx_PLL2_Config+0x15c>)
 800893c:	4313      	orrs	r3, r2
 800893e:	628b      	str	r3, [r1, #40]	; 0x28
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	3b01      	subs	r3, #1
 8008946:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	3b01      	subs	r3, #1
 8008950:	025b      	lsls	r3, r3, #9
 8008952:	b29b      	uxth	r3, r3
 8008954:	431a      	orrs	r2, r3
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	68db      	ldr	r3, [r3, #12]
 800895a:	3b01      	subs	r3, #1
 800895c:	041b      	lsls	r3, r3, #16
 800895e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008962:	431a      	orrs	r2, r3
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	691b      	ldr	r3, [r3, #16]
 8008968:	3b01      	subs	r3, #1
 800896a:	061b      	lsls	r3, r3, #24
 800896c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008970:	4931      	ldr	r1, [pc, #196]	; (8008a38 <RCCEx_PLL2_Config+0x15c>)
 8008972:	4313      	orrs	r3, r2
 8008974:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008976:	4b30      	ldr	r3, [pc, #192]	; (8008a38 <RCCEx_PLL2_Config+0x15c>)
 8008978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800897a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	695b      	ldr	r3, [r3, #20]
 8008982:	492d      	ldr	r1, [pc, #180]	; (8008a38 <RCCEx_PLL2_Config+0x15c>)
 8008984:	4313      	orrs	r3, r2
 8008986:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008988:	4b2b      	ldr	r3, [pc, #172]	; (8008a38 <RCCEx_PLL2_Config+0x15c>)
 800898a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800898c:	f023 0220 	bic.w	r2, r3, #32
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	699b      	ldr	r3, [r3, #24]
 8008994:	4928      	ldr	r1, [pc, #160]	; (8008a38 <RCCEx_PLL2_Config+0x15c>)
 8008996:	4313      	orrs	r3, r2
 8008998:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800899a:	4b27      	ldr	r3, [pc, #156]	; (8008a38 <RCCEx_PLL2_Config+0x15c>)
 800899c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800899e:	4a26      	ldr	r2, [pc, #152]	; (8008a38 <RCCEx_PLL2_Config+0x15c>)
 80089a0:	f023 0310 	bic.w	r3, r3, #16
 80089a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80089a6:	4b24      	ldr	r3, [pc, #144]	; (8008a38 <RCCEx_PLL2_Config+0x15c>)
 80089a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089aa:	4b24      	ldr	r3, [pc, #144]	; (8008a3c <RCCEx_PLL2_Config+0x160>)
 80089ac:	4013      	ands	r3, r2
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	69d2      	ldr	r2, [r2, #28]
 80089b2:	00d2      	lsls	r2, r2, #3
 80089b4:	4920      	ldr	r1, [pc, #128]	; (8008a38 <RCCEx_PLL2_Config+0x15c>)
 80089b6:	4313      	orrs	r3, r2
 80089b8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80089ba:	4b1f      	ldr	r3, [pc, #124]	; (8008a38 <RCCEx_PLL2_Config+0x15c>)
 80089bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089be:	4a1e      	ldr	r2, [pc, #120]	; (8008a38 <RCCEx_PLL2_Config+0x15c>)
 80089c0:	f043 0310 	orr.w	r3, r3, #16
 80089c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d106      	bne.n	80089da <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80089cc:	4b1a      	ldr	r3, [pc, #104]	; (8008a38 <RCCEx_PLL2_Config+0x15c>)
 80089ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d0:	4a19      	ldr	r2, [pc, #100]	; (8008a38 <RCCEx_PLL2_Config+0x15c>)
 80089d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80089d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80089d8:	e00f      	b.n	80089fa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d106      	bne.n	80089ee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80089e0:	4b15      	ldr	r3, [pc, #84]	; (8008a38 <RCCEx_PLL2_Config+0x15c>)
 80089e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e4:	4a14      	ldr	r2, [pc, #80]	; (8008a38 <RCCEx_PLL2_Config+0x15c>)
 80089e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80089ec:	e005      	b.n	80089fa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80089ee:	4b12      	ldr	r3, [pc, #72]	; (8008a38 <RCCEx_PLL2_Config+0x15c>)
 80089f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f2:	4a11      	ldr	r2, [pc, #68]	; (8008a38 <RCCEx_PLL2_Config+0x15c>)
 80089f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80089f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80089fa:	4b0f      	ldr	r3, [pc, #60]	; (8008a38 <RCCEx_PLL2_Config+0x15c>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a0e      	ldr	r2, [pc, #56]	; (8008a38 <RCCEx_PLL2_Config+0x15c>)
 8008a00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008a04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a06:	f7f8 fedf 	bl	80017c8 <HAL_GetTick>
 8008a0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008a0c:	e008      	b.n	8008a20 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008a0e:	f7f8 fedb 	bl	80017c8 <HAL_GetTick>
 8008a12:	4602      	mov	r2, r0
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	1ad3      	subs	r3, r2, r3
 8008a18:	2b02      	cmp	r3, #2
 8008a1a:	d901      	bls.n	8008a20 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008a1c:	2303      	movs	r3, #3
 8008a1e:	e006      	b.n	8008a2e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008a20:	4b05      	ldr	r3, [pc, #20]	; (8008a38 <RCCEx_PLL2_Config+0x15c>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d0f0      	beq.n	8008a0e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	58024400 	.word	0x58024400
 8008a3c:	ffff0007 	.word	0xffff0007

08008a40 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008a4e:	4b53      	ldr	r3, [pc, #332]	; (8008b9c <RCCEx_PLL3_Config+0x15c>)
 8008a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a52:	f003 0303 	and.w	r3, r3, #3
 8008a56:	2b03      	cmp	r3, #3
 8008a58:	d101      	bne.n	8008a5e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	e099      	b.n	8008b92 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008a5e:	4b4f      	ldr	r3, [pc, #316]	; (8008b9c <RCCEx_PLL3_Config+0x15c>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a4e      	ldr	r2, [pc, #312]	; (8008b9c <RCCEx_PLL3_Config+0x15c>)
 8008a64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a6a:	f7f8 fead 	bl	80017c8 <HAL_GetTick>
 8008a6e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a70:	e008      	b.n	8008a84 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008a72:	f7f8 fea9 	bl	80017c8 <HAL_GetTick>
 8008a76:	4602      	mov	r2, r0
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	1ad3      	subs	r3, r2, r3
 8008a7c:	2b02      	cmp	r3, #2
 8008a7e:	d901      	bls.n	8008a84 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008a80:	2303      	movs	r3, #3
 8008a82:	e086      	b.n	8008b92 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a84:	4b45      	ldr	r3, [pc, #276]	; (8008b9c <RCCEx_PLL3_Config+0x15c>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d1f0      	bne.n	8008a72 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008a90:	4b42      	ldr	r3, [pc, #264]	; (8008b9c <RCCEx_PLL3_Config+0x15c>)
 8008a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a94:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	051b      	lsls	r3, r3, #20
 8008a9e:	493f      	ldr	r1, [pc, #252]	; (8008b9c <RCCEx_PLL3_Config+0x15c>)
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	628b      	str	r3, [r1, #40]	; 0x28
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	3b01      	subs	r3, #1
 8008aaa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	689b      	ldr	r3, [r3, #8]
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	025b      	lsls	r3, r3, #9
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	431a      	orrs	r2, r3
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	68db      	ldr	r3, [r3, #12]
 8008abe:	3b01      	subs	r3, #1
 8008ac0:	041b      	lsls	r3, r3, #16
 8008ac2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008ac6:	431a      	orrs	r2, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	691b      	ldr	r3, [r3, #16]
 8008acc:	3b01      	subs	r3, #1
 8008ace:	061b      	lsls	r3, r3, #24
 8008ad0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008ad4:	4931      	ldr	r1, [pc, #196]	; (8008b9c <RCCEx_PLL3_Config+0x15c>)
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008ada:	4b30      	ldr	r3, [pc, #192]	; (8008b9c <RCCEx_PLL3_Config+0x15c>)
 8008adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ade:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	695b      	ldr	r3, [r3, #20]
 8008ae6:	492d      	ldr	r1, [pc, #180]	; (8008b9c <RCCEx_PLL3_Config+0x15c>)
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008aec:	4b2b      	ldr	r3, [pc, #172]	; (8008b9c <RCCEx_PLL3_Config+0x15c>)
 8008aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	699b      	ldr	r3, [r3, #24]
 8008af8:	4928      	ldr	r1, [pc, #160]	; (8008b9c <RCCEx_PLL3_Config+0x15c>)
 8008afa:	4313      	orrs	r3, r2
 8008afc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008afe:	4b27      	ldr	r3, [pc, #156]	; (8008b9c <RCCEx_PLL3_Config+0x15c>)
 8008b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b02:	4a26      	ldr	r2, [pc, #152]	; (8008b9c <RCCEx_PLL3_Config+0x15c>)
 8008b04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008b0a:	4b24      	ldr	r3, [pc, #144]	; (8008b9c <RCCEx_PLL3_Config+0x15c>)
 8008b0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b0e:	4b24      	ldr	r3, [pc, #144]	; (8008ba0 <RCCEx_PLL3_Config+0x160>)
 8008b10:	4013      	ands	r3, r2
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	69d2      	ldr	r2, [r2, #28]
 8008b16:	00d2      	lsls	r2, r2, #3
 8008b18:	4920      	ldr	r1, [pc, #128]	; (8008b9c <RCCEx_PLL3_Config+0x15c>)
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008b1e:	4b1f      	ldr	r3, [pc, #124]	; (8008b9c <RCCEx_PLL3_Config+0x15c>)
 8008b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b22:	4a1e      	ldr	r2, [pc, #120]	; (8008b9c <RCCEx_PLL3_Config+0x15c>)
 8008b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d106      	bne.n	8008b3e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008b30:	4b1a      	ldr	r3, [pc, #104]	; (8008b9c <RCCEx_PLL3_Config+0x15c>)
 8008b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b34:	4a19      	ldr	r2, [pc, #100]	; (8008b9c <RCCEx_PLL3_Config+0x15c>)
 8008b36:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008b3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008b3c:	e00f      	b.n	8008b5e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d106      	bne.n	8008b52 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008b44:	4b15      	ldr	r3, [pc, #84]	; (8008b9c <RCCEx_PLL3_Config+0x15c>)
 8008b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b48:	4a14      	ldr	r2, [pc, #80]	; (8008b9c <RCCEx_PLL3_Config+0x15c>)
 8008b4a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008b4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008b50:	e005      	b.n	8008b5e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008b52:	4b12      	ldr	r3, [pc, #72]	; (8008b9c <RCCEx_PLL3_Config+0x15c>)
 8008b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b56:	4a11      	ldr	r2, [pc, #68]	; (8008b9c <RCCEx_PLL3_Config+0x15c>)
 8008b58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008b5c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008b5e:	4b0f      	ldr	r3, [pc, #60]	; (8008b9c <RCCEx_PLL3_Config+0x15c>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a0e      	ldr	r2, [pc, #56]	; (8008b9c <RCCEx_PLL3_Config+0x15c>)
 8008b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b6a:	f7f8 fe2d 	bl	80017c8 <HAL_GetTick>
 8008b6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008b70:	e008      	b.n	8008b84 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008b72:	f7f8 fe29 	bl	80017c8 <HAL_GetTick>
 8008b76:	4602      	mov	r2, r0
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	1ad3      	subs	r3, r2, r3
 8008b7c:	2b02      	cmp	r3, #2
 8008b7e:	d901      	bls.n	8008b84 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008b80:	2303      	movs	r3, #3
 8008b82:	e006      	b.n	8008b92 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008b84:	4b05      	ldr	r3, [pc, #20]	; (8008b9c <RCCEx_PLL3_Config+0x15c>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d0f0      	beq.n	8008b72 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3710      	adds	r7, #16
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}
 8008b9a:	bf00      	nop
 8008b9c:	58024400 	.word	0x58024400
 8008ba0:	ffff0007 	.word	0xffff0007

08008ba4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b08a      	sub	sp, #40	; 0x28
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d101      	bne.n	8008bb6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e07c      	b.n	8008cb0 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d10c      	bne.n	8008bdc <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	699b      	ldr	r3, [r3, #24]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d102      	bne.n	8008bd6 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2202      	movs	r2, #2
 8008bd4:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f7f8 fa64 	bl	80010a4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2203      	movs	r2, #3
 8008be0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f000 f867 	bl	8008cb8 <HAL_SD_InitCard>
 8008bea:	4603      	mov	r3, r0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d001      	beq.n	8008bf4 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e05d      	b.n	8008cb0 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8008bf4:	f107 0308 	add.w	r3, r7, #8
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 fdbe 	bl	800977c <HAL_SD_GetCardStatus>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d001      	beq.n	8008c0a <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 8008c06:	2301      	movs	r3, #1
 8008c08:	e052      	b.n	8008cb0 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8008c0a:	7e3b      	ldrb	r3, [r7, #24]
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8008c10:	7e7b      	ldrb	r3, [r7, #25]
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d10a      	bne.n	8008c34 <HAL_SD_Init+0x90>
 8008c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d102      	bne.n	8008c2a <HAL_SD_Init+0x86>
 8008c24:	6a3b      	ldr	r3, [r7, #32]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d004      	beq.n	8008c34 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c30:	65da      	str	r2, [r3, #92]	; 0x5c
 8008c32:	e00b      	b.n	8008c4c <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d104      	bne.n	8008c46 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c42:	65da      	str	r2, [r3, #92]	; 0x5c
 8008c44:	e002      	b.n	8008c4c <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	68db      	ldr	r3, [r3, #12]
 8008c50:	4619      	mov	r1, r3
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 fe74 	bl	8009940 <HAL_SD_ConfigWideBusOperation>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d001      	beq.n	8008c62 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	e026      	b.n	8008cb0 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008c62:	f7f8 fdb1 	bl	80017c8 <HAL_GetTick>
 8008c66:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008c68:	e011      	b.n	8008c8e <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8008c6a:	f7f8 fdad 	bl	80017c8 <HAL_GetTick>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	1ad3      	subs	r3, r2, r3
 8008c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c78:	d109      	bne.n	8008c8e <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008c80:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2201      	movs	r2, #1
 8008c86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8008c8a:	2303      	movs	r3, #3
 8008c8c:	e010      	b.n	8008cb0 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 ff00 	bl	8009a94 <HAL_SD_GetCardState>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b04      	cmp	r3, #4
 8008c98:	d1e7      	bne.n	8008c6a <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2201      	movs	r2, #1
 8008caa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008cae:	2300      	movs	r3, #0
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3728      	adds	r7, #40	; 0x28
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008cb8:	b5b0      	push	{r4, r5, r7, lr}
 8008cba:	b08e      	sub	sp, #56	; 0x38
 8008cbc:	af04      	add	r7, sp, #16
 8008cbe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008cd0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008cd4:	f7fe ff90 	bl	8007bf8 <HAL_RCCEx_GetPeriphCLKFreq>
 8008cd8:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 8008cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cdc:	0a1b      	lsrs	r3, r3, #8
 8008cde:	4a40      	ldr	r2, [pc, #256]	; (8008de0 <HAL_SD_InitCard+0x128>)
 8008ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ce4:	091b      	lsrs	r3, r3, #4
 8008ce6:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	699b      	ldr	r3, [r3, #24]
 8008cec:	2b02      	cmp	r3, #2
 8008cee:	d107      	bne.n	8008d00 <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f042 0210 	orr.w	r2, r2, #16
 8008cfe:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681d      	ldr	r5, [r3, #0]
 8008d04:	466c      	mov	r4, sp
 8008d06:	f107 0314 	add.w	r3, r7, #20
 8008d0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008d0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008d12:	f107 0308 	add.w	r3, r7, #8
 8008d16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008d18:	4628      	mov	r0, r5
 8008d1a:	f002 fc9b 	bl	800b654 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4618      	mov	r0, r3
 8008d24:	f002 fcde 	bl	800b6e4 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8008d28:	69bb      	ldr	r3, [r7, #24]
 8008d2a:	005b      	lsls	r3, r3, #1
 8008d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d32:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 8008d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d008      	beq.n	8008d4c <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8008d3a:	4a2a      	ldr	r2, [pc, #168]	; (8008de4 <HAL_SD_InitCard+0x12c>)
 8008d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d42:	3301      	adds	r3, #1
 8008d44:	4618      	mov	r0, r3
 8008d46:	f7f8 fd4b 	bl	80017e0 <HAL_Delay>
 8008d4a:	e002      	b.n	8008d52 <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 8008d4c:	2002      	movs	r0, #2
 8008d4e:	f7f8 fd47 	bl	80017e0 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 ff7c 	bl	8009c50 <SD_PowerON>
 8008d58:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d5a:	6a3b      	ldr	r3, [r7, #32]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d00b      	beq.n	8008d78 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d6c:	6a3b      	ldr	r3, [r7, #32]
 8008d6e:	431a      	orrs	r2, r3
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008d74:	2301      	movs	r3, #1
 8008d76:	e02e      	b.n	8008dd6 <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 feab 	bl	8009ad4 <SD_InitCard>
 8008d7e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d80:	6a3b      	ldr	r3, [r7, #32]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d00b      	beq.n	8008d9e <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2201      	movs	r2, #1
 8008d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d92:	6a3b      	ldr	r3, [r7, #32]
 8008d94:	431a      	orrs	r2, r3
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e01b      	b.n	8008dd6 <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008da6:	4618      	mov	r0, r3
 8008da8:	f002 fd32 	bl	800b810 <SDMMC_CmdBlockLength>
 8008dac:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008dae:	6a3b      	ldr	r3, [r7, #32]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d00f      	beq.n	8008dd4 <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a0b      	ldr	r2, [pc, #44]	; (8008de8 <HAL_SD_InitCard+0x130>)
 8008dba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dc0:	6a3b      	ldr	r3, [r7, #32]
 8008dc2:	431a      	orrs	r2, r3
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e000      	b.n	8008dd6 <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3728      	adds	r7, #40	; 0x28
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bdb0      	pop	{r4, r5, r7, pc}
 8008dde:	bf00      	nop
 8008de0:	014f8b59 	.word	0x014f8b59
 8008de4:	00012110 	.word	0x00012110
 8008de8:	1fe00fff 	.word	0x1fe00fff

08008dec <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b092      	sub	sp, #72	; 0x48
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	60f8      	str	r0, [r7, #12]
 8008df4:	60b9      	str	r1, [r7, #8]
 8008df6:	607a      	str	r2, [r7, #4]
 8008df8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008dfa:	f7f8 fce5 	bl	80017c8 <HAL_GetTick>
 8008dfe:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d107      	bne.n	8008e1e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e12:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	e167      	b.n	80090ee <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	2b01      	cmp	r3, #1
 8008e28:	f040 815a 	bne.w	80090e0 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008e32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	441a      	add	r2, r3
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	d907      	bls.n	8008e50 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e44:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	e14e      	b.n	80090ee <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2203      	movs	r2, #3
 8008e54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d002      	beq.n	8008e6e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e6a:	025b      	lsls	r3, r3, #9
 8008e6c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8008e72:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	025b      	lsls	r3, r3, #9
 8008e78:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008e7a:	2390      	movs	r3, #144	; 0x90
 8008e7c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008e7e:	2302      	movs	r3, #2
 8008e80:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008e82:	2300      	movs	r3, #0
 8008e84:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008e86:	2300      	movs	r3, #0
 8008e88:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f107 0214 	add.w	r2, r7, #20
 8008e92:	4611      	mov	r1, r2
 8008e94:	4618      	mov	r0, r3
 8008e96:	f002 fc8f 	bl	800b7b8 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	68da      	ldr	r2, [r3, #12]
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ea8:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d90a      	bls.n	8008ec6 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2202      	movs	r2, #2
 8008eb4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f002 fced 	bl	800b89c <SDMMC_CmdReadMultiBlock>
 8008ec2:	6478      	str	r0, [r7, #68]	; 0x44
 8008ec4:	e009      	b.n	8008eda <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f002 fcbf 	bl	800b856 <SDMMC_CmdReadSingleBlock>
 8008ed8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008eda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d012      	beq.n	8008f06 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a84      	ldr	r2, [pc, #528]	; (80090f8 <HAL_SD_ReadBlocks+0x30c>)
 8008ee6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008eee:	431a      	orrs	r2, r3
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2200      	movs	r2, #0
 8008f00:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008f02:	2301      	movs	r3, #1
 8008f04:	e0f3      	b.n	80090ee <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8008f06:	69bb      	ldr	r3, [r7, #24]
 8008f08:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008f0a:	e058      	b.n	8008fbe <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d033      	beq.n	8008f82 <HAL_SD_ReadBlocks+0x196>
 8008f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f1c:	2b1f      	cmp	r3, #31
 8008f1e:	d930      	bls.n	8008f82 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8008f20:	2300      	movs	r3, #0
 8008f22:	643b      	str	r3, [r7, #64]	; 0x40
 8008f24:	e027      	b.n	8008f76 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f002 fbbc 	bl	800b6a8 <SDMMC_ReadFIFO>
 8008f30:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8008f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f34:	b2da      	uxtb	r2, r3
 8008f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f38:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f42:	0a1b      	lsrs	r3, r3, #8
 8008f44:	b2da      	uxtb	r2, r3
 8008f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f48:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f52:	0c1b      	lsrs	r3, r3, #16
 8008f54:	b2da      	uxtb	r2, r3
 8008f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f58:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f62:	0e1b      	lsrs	r3, r3, #24
 8008f64:	b2da      	uxtb	r2, r3
 8008f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f68:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 8008f70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f72:	3301      	adds	r3, #1
 8008f74:	643b      	str	r3, [r7, #64]	; 0x40
 8008f76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f78:	2b07      	cmp	r3, #7
 8008f7a:	d9d4      	bls.n	8008f26 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f7e:	3b20      	subs	r3, #32
 8008f80:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008f82:	f7f8 fc21 	bl	80017c8 <HAL_GetTick>
 8008f86:	4602      	mov	r2, r0
 8008f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f8a:	1ad3      	subs	r3, r2, r3
 8008f8c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d902      	bls.n	8008f98 <HAL_SD_ReadBlocks+0x1ac>
 8008f92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d112      	bne.n	8008fbe <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a56      	ldr	r2, [pc, #344]	; (80090f8 <HAL_SD_ReadBlocks+0x30c>)
 8008f9e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008fba:	2303      	movs	r3, #3
 8008fbc:	e097      	b.n	80090ee <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fc4:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d09f      	beq.n	8008f0c <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	68da      	ldr	r2, [r3, #12]
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fda:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d022      	beq.n	8009030 <HAL_SD_ReadBlocks+0x244>
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d91f      	bls.n	8009030 <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ff4:	2b03      	cmp	r3, #3
 8008ff6:	d01b      	beq.n	8009030 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f002 fcb7 	bl	800b970 <SDMMC_CmdStopTransfer>
 8009002:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009004:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009006:	2b00      	cmp	r3, #0
 8009008:	d012      	beq.n	8009030 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a3a      	ldr	r2, [pc, #232]	; (80090f8 <HAL_SD_ReadBlocks+0x30c>)
 8009010:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009016:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009018:	431a      	orrs	r2, r3
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2201      	movs	r2, #1
 8009022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2200      	movs	r2, #0
 800902a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800902c:	2301      	movs	r3, #1
 800902e:	e05e      	b.n	80090ee <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009036:	f003 0308 	and.w	r3, r3, #8
 800903a:	2b00      	cmp	r3, #0
 800903c:	d012      	beq.n	8009064 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4a2d      	ldr	r2, [pc, #180]	; (80090f8 <HAL_SD_ReadBlocks+0x30c>)
 8009044:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800904a:	f043 0208 	orr.w	r2, r3, #8
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2201      	movs	r2, #1
 8009056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2200      	movs	r2, #0
 800905e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009060:	2301      	movs	r3, #1
 8009062:	e044      	b.n	80090ee <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800906a:	f003 0302 	and.w	r3, r3, #2
 800906e:	2b00      	cmp	r3, #0
 8009070:	d012      	beq.n	8009098 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a20      	ldr	r2, [pc, #128]	; (80090f8 <HAL_SD_ReadBlocks+0x30c>)
 8009078:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800907e:	f043 0202 	orr.w	r2, r3, #2
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2201      	movs	r2, #1
 800908a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2200      	movs	r2, #0
 8009092:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009094:	2301      	movs	r3, #1
 8009096:	e02a      	b.n	80090ee <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800909e:	f003 0320 	and.w	r3, r3, #32
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d012      	beq.n	80090cc <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a13      	ldr	r2, [pc, #76]	; (80090f8 <HAL_SD_ReadBlocks+0x30c>)
 80090ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090b2:	f043 0220 	orr.w	r2, r3, #32
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2201      	movs	r2, #1
 80090be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	2200      	movs	r2, #0
 80090c6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80090c8:	2301      	movs	r3, #1
 80090ca:	e010      	b.n	80090ee <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a0a      	ldr	r2, [pc, #40]	; (80090fc <HAL_SD_ReadBlocks+0x310>)
 80090d2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2201      	movs	r2, #1
 80090d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80090dc:	2300      	movs	r3, #0
 80090de:	e006      	b.n	80090ee <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090e4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80090ec:	2301      	movs	r3, #1
  }
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3748      	adds	r7, #72	; 0x48
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	1fe00fff 	.word	0x1fe00fff
 80090fc:	18000f3a 	.word	0x18000f3a

08009100 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b092      	sub	sp, #72	; 0x48
 8009104:	af00      	add	r7, sp, #0
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	607a      	str	r2, [r7, #4]
 800910c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800910e:	f7f8 fb5b 	bl	80017c8 <HAL_GetTick>
 8009112:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d107      	bne.n	8009132 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009126:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800912e:	2301      	movs	r3, #1
 8009130:	e16b      	b.n	800940a <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009138:	b2db      	uxtb	r3, r3
 800913a:	2b01      	cmp	r3, #1
 800913c:	f040 815e 	bne.w	80093fc <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2200      	movs	r2, #0
 8009144:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009146:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	441a      	add	r2, r3
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009150:	429a      	cmp	r2, r3
 8009152:	d907      	bls.n	8009164 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009158:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009160:	2301      	movs	r3, #1
 8009162:	e152      	b.n	800940a <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2203      	movs	r2, #3
 8009168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2200      	movs	r2, #0
 8009172:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009178:	2b01      	cmp	r3, #1
 800917a:	d002      	beq.n	8009182 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800917c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800917e:	025b      	lsls	r3, r3, #9
 8009180:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009182:	f04f 33ff 	mov.w	r3, #4294967295
 8009186:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	025b      	lsls	r3, r3, #9
 800918c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800918e:	2390      	movs	r3, #144	; 0x90
 8009190:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009192:	2300      	movs	r3, #0
 8009194:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009196:	2300      	movs	r3, #0
 8009198:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800919a:	2300      	movs	r3, #0
 800919c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f107 0218 	add.w	r2, r7, #24
 80091a6:	4611      	mov	r1, r2
 80091a8:	4618      	mov	r0, r3
 80091aa:	f002 fb05 	bl	800b7b8 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	68da      	ldr	r2, [r3, #12]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091bc:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d90a      	bls.n	80091da <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2220      	movs	r2, #32
 80091c8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80091d0:	4618      	mov	r0, r3
 80091d2:	f002 fba9 	bl	800b928 <SDMMC_CmdWriteMultiBlock>
 80091d6:	6478      	str	r0, [r7, #68]	; 0x44
 80091d8:	e009      	b.n	80091ee <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2210      	movs	r2, #16
 80091de:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80091e6:	4618      	mov	r0, r3
 80091e8:	f002 fb7b 	bl	800b8e2 <SDMMC_CmdWriteSingleBlock>
 80091ec:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80091ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d012      	beq.n	800921a <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a86      	ldr	r2, [pc, #536]	; (8009414 <HAL_SD_WriteBlocks+0x314>)
 80091fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009200:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009202:	431a      	orrs	r2, r3
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2201      	movs	r2, #1
 800920c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2200      	movs	r2, #0
 8009214:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009216:	2301      	movs	r3, #1
 8009218:	e0f7      	b.n	800940a <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800921a:	69fb      	ldr	r3, [r7, #28]
 800921c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800921e:	e05c      	b.n	80092da <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800922a:	2b00      	cmp	r3, #0
 800922c:	d037      	beq.n	800929e <HAL_SD_WriteBlocks+0x19e>
 800922e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009230:	2b1f      	cmp	r3, #31
 8009232:	d934      	bls.n	800929e <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8009234:	2300      	movs	r3, #0
 8009236:	643b      	str	r3, [r7, #64]	; 0x40
 8009238:	e02b      	b.n	8009292 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800923a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009242:	3301      	adds	r3, #1
 8009244:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8009246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	021a      	lsls	r2, r3, #8
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	4313      	orrs	r3, r2
 8009250:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009254:	3301      	adds	r3, #1
 8009256:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8009258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	041a      	lsls	r2, r3, #16
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	4313      	orrs	r3, r2
 8009262:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009266:	3301      	adds	r3, #1
 8009268:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800926a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	061a      	lsls	r2, r3, #24
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	4313      	orrs	r3, r2
 8009274:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009278:	3301      	adds	r3, #1
 800927a:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f107 0214 	add.w	r2, r7, #20
 8009284:	4611      	mov	r1, r2
 8009286:	4618      	mov	r0, r3
 8009288:	f002 fa1b 	bl	800b6c2 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800928c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800928e:	3301      	adds	r3, #1
 8009290:	643b      	str	r3, [r7, #64]	; 0x40
 8009292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009294:	2b07      	cmp	r3, #7
 8009296:	d9d0      	bls.n	800923a <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8009298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800929a:	3b20      	subs	r3, #32
 800929c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800929e:	f7f8 fa93 	bl	80017c8 <HAL_GetTick>
 80092a2:	4602      	mov	r2, r0
 80092a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a6:	1ad3      	subs	r3, r2, r3
 80092a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d902      	bls.n	80092b4 <HAL_SD_WriteBlocks+0x1b4>
 80092ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d112      	bne.n	80092da <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a56      	ldr	r2, [pc, #344]	; (8009414 <HAL_SD_WriteBlocks+0x314>)
 80092ba:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092c2:	431a      	orrs	r2, r3
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2200      	movs	r2, #0
 80092d4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80092d6:	2303      	movs	r3, #3
 80092d8:	e097      	b.n	800940a <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092e0:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d09b      	beq.n	8009220 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	68da      	ldr	r2, [r3, #12]
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092f6:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009302:	2b00      	cmp	r3, #0
 8009304:	d022      	beq.n	800934c <HAL_SD_WriteBlocks+0x24c>
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	2b01      	cmp	r3, #1
 800930a:	d91f      	bls.n	800934c <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009310:	2b03      	cmp	r3, #3
 8009312:	d01b      	beq.n	800934c <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4618      	mov	r0, r3
 800931a:	f002 fb29 	bl	800b970 <SDMMC_CmdStopTransfer>
 800931e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009322:	2b00      	cmp	r3, #0
 8009324:	d012      	beq.n	800934c <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a3a      	ldr	r2, [pc, #232]	; (8009414 <HAL_SD_WriteBlocks+0x314>)
 800932c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009334:	431a      	orrs	r2, r3
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2201      	movs	r2, #1
 800933e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2200      	movs	r2, #0
 8009346:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8009348:	2301      	movs	r3, #1
 800934a:	e05e      	b.n	800940a <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009352:	f003 0308 	and.w	r3, r3, #8
 8009356:	2b00      	cmp	r3, #0
 8009358:	d012      	beq.n	8009380 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a2d      	ldr	r2, [pc, #180]	; (8009414 <HAL_SD_WriteBlocks+0x314>)
 8009360:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009366:	f043 0208 	orr.w	r2, r3, #8
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	2201      	movs	r2, #1
 8009372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2200      	movs	r2, #0
 800937a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800937c:	2301      	movs	r3, #1
 800937e:	e044      	b.n	800940a <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009386:	f003 0302 	and.w	r3, r3, #2
 800938a:	2b00      	cmp	r3, #0
 800938c:	d012      	beq.n	80093b4 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	4a20      	ldr	r2, [pc, #128]	; (8009414 <HAL_SD_WriteBlocks+0x314>)
 8009394:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800939a:	f043 0202 	orr.w	r2, r3, #2
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2201      	movs	r2, #1
 80093a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2200      	movs	r2, #0
 80093ae:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80093b0:	2301      	movs	r3, #1
 80093b2:	e02a      	b.n	800940a <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093ba:	f003 0310 	and.w	r3, r3, #16
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d012      	beq.n	80093e8 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4a13      	ldr	r2, [pc, #76]	; (8009414 <HAL_SD_WriteBlocks+0x314>)
 80093c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ce:	f043 0210 	orr.w	r2, r3, #16
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2201      	movs	r2, #1
 80093da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2200      	movs	r2, #0
 80093e2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80093e4:	2301      	movs	r3, #1
 80093e6:	e010      	b.n	800940a <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a0a      	ldr	r2, [pc, #40]	; (8009418 <HAL_SD_WriteBlocks+0x318>)
 80093ee:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2201      	movs	r2, #1
 80093f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80093f8:	2300      	movs	r3, #0
 80093fa:	e006      	b.n	800940a <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009400:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009408:	2301      	movs	r3, #1
  }
}
 800940a:	4618      	mov	r0, r3
 800940c:	3748      	adds	r7, #72	; 0x48
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop
 8009414:	1fe00fff 	.word	0x1fe00fff
 8009418:	18000f3a 	.word	0x18000f3a

0800941c <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800941c:	b480      	push	{r7}
 800941e:	b083      	sub	sp, #12
 8009420:	af00      	add	r7, sp, #0
 8009422:	4603      	mov	r3, r0
 8009424:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 8009426:	bf00      	nop
 8009428:	370c      	adds	r7, #12
 800942a:	46bd      	mov	sp, r7
 800942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009430:	4770      	bx	lr
	...

08009434 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009434:	b480      	push	{r7}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009442:	0f9b      	lsrs	r3, r3, #30
 8009444:	b2da      	uxtb	r2, r3
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800944e:	0e9b      	lsrs	r3, r3, #26
 8009450:	b2db      	uxtb	r3, r3
 8009452:	f003 030f 	and.w	r3, r3, #15
 8009456:	b2da      	uxtb	r2, r3
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009460:	0e1b      	lsrs	r3, r3, #24
 8009462:	b2db      	uxtb	r3, r3
 8009464:	f003 0303 	and.w	r3, r3, #3
 8009468:	b2da      	uxtb	r2, r3
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009472:	0c1b      	lsrs	r3, r3, #16
 8009474:	b2da      	uxtb	r2, r3
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800947e:	0a1b      	lsrs	r3, r3, #8
 8009480:	b2da      	uxtb	r2, r3
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800948a:	b2da      	uxtb	r2, r3
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009494:	0d1b      	lsrs	r3, r3, #20
 8009496:	b29a      	uxth	r2, r3
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094a0:	0c1b      	lsrs	r3, r3, #16
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	f003 030f 	and.w	r3, r3, #15
 80094a8:	b2da      	uxtb	r2, r3
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094b2:	0bdb      	lsrs	r3, r3, #15
 80094b4:	b2db      	uxtb	r3, r3
 80094b6:	f003 0301 	and.w	r3, r3, #1
 80094ba:	b2da      	uxtb	r2, r3
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094c4:	0b9b      	lsrs	r3, r3, #14
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	f003 0301 	and.w	r3, r3, #1
 80094cc:	b2da      	uxtb	r2, r3
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094d6:	0b5b      	lsrs	r3, r3, #13
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	f003 0301 	and.w	r3, r3, #1
 80094de:	b2da      	uxtb	r2, r3
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094e8:	0b1b      	lsrs	r3, r3, #12
 80094ea:	b2db      	uxtb	r3, r3
 80094ec:	f003 0301 	and.w	r3, r3, #1
 80094f0:	b2da      	uxtb	r2, r3
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	2200      	movs	r2, #0
 80094fa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009500:	2b00      	cmp	r3, #0
 8009502:	d163      	bne.n	80095cc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009508:	009a      	lsls	r2, r3, #2
 800950a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800950e:	4013      	ands	r3, r2
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009514:	0f92      	lsrs	r2, r2, #30
 8009516:	431a      	orrs	r2, r3
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009520:	0edb      	lsrs	r3, r3, #27
 8009522:	b2db      	uxtb	r3, r3
 8009524:	f003 0307 	and.w	r3, r3, #7
 8009528:	b2da      	uxtb	r2, r3
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009532:	0e1b      	lsrs	r3, r3, #24
 8009534:	b2db      	uxtb	r3, r3
 8009536:	f003 0307 	and.w	r3, r3, #7
 800953a:	b2da      	uxtb	r2, r3
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009544:	0d5b      	lsrs	r3, r3, #21
 8009546:	b2db      	uxtb	r3, r3
 8009548:	f003 0307 	and.w	r3, r3, #7
 800954c:	b2da      	uxtb	r2, r3
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009556:	0c9b      	lsrs	r3, r3, #18
 8009558:	b2db      	uxtb	r3, r3
 800955a:	f003 0307 	and.w	r3, r3, #7
 800955e:	b2da      	uxtb	r2, r3
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009568:	0bdb      	lsrs	r3, r3, #15
 800956a:	b2db      	uxtb	r3, r3
 800956c:	f003 0307 	and.w	r3, r3, #7
 8009570:	b2da      	uxtb	r2, r3
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	691b      	ldr	r3, [r3, #16]
 800957a:	1c5a      	adds	r2, r3, #1
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	7e1b      	ldrb	r3, [r3, #24]
 8009584:	b2db      	uxtb	r3, r3
 8009586:	f003 0307 	and.w	r3, r3, #7
 800958a:	3302      	adds	r3, #2
 800958c:	2201      	movs	r2, #1
 800958e:	fa02 f303 	lsl.w	r3, r2, r3
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009596:	fb02 f203 	mul.w	r2, r2, r3
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	7a1b      	ldrb	r3, [r3, #8]
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	f003 030f 	and.w	r3, r3, #15
 80095a8:	2201      	movs	r2, #1
 80095aa:	409a      	lsls	r2, r3
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80095b8:	0a52      	lsrs	r2, r2, #9
 80095ba:	fb02 f203 	mul.w	r2, r2, r3
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095c8:	659a      	str	r2, [r3, #88]	; 0x58
 80095ca:	e031      	b.n	8009630 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d11d      	bne.n	8009610 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095d8:	041b      	lsls	r3, r3, #16
 80095da:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095e2:	0c1b      	lsrs	r3, r3, #16
 80095e4:	431a      	orrs	r2, r3
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	691b      	ldr	r3, [r3, #16]
 80095ee:	3301      	adds	r3, #1
 80095f0:	029a      	lsls	r2, r3, #10
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009604:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	659a      	str	r2, [r3, #88]	; 0x58
 800960e:	e00f      	b.n	8009630 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a58      	ldr	r2, [pc, #352]	; (8009778 <HAL_SD_GetCardCSD+0x344>)
 8009616:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800961c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2201      	movs	r2, #1
 8009628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800962c:	2301      	movs	r3, #1
 800962e:	e09d      	b.n	800976c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009634:	0b9b      	lsrs	r3, r3, #14
 8009636:	b2db      	uxtb	r3, r3
 8009638:	f003 0301 	and.w	r3, r3, #1
 800963c:	b2da      	uxtb	r2, r3
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009646:	09db      	lsrs	r3, r3, #7
 8009648:	b2db      	uxtb	r3, r3
 800964a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800964e:	b2da      	uxtb	r2, r3
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009658:	b2db      	uxtb	r3, r3
 800965a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800965e:	b2da      	uxtb	r2, r3
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009668:	0fdb      	lsrs	r3, r3, #31
 800966a:	b2da      	uxtb	r2, r3
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009674:	0f5b      	lsrs	r3, r3, #29
 8009676:	b2db      	uxtb	r3, r3
 8009678:	f003 0303 	and.w	r3, r3, #3
 800967c:	b2da      	uxtb	r2, r3
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009686:	0e9b      	lsrs	r3, r3, #26
 8009688:	b2db      	uxtb	r3, r3
 800968a:	f003 0307 	and.w	r3, r3, #7
 800968e:	b2da      	uxtb	r2, r3
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009698:	0d9b      	lsrs	r3, r3, #22
 800969a:	b2db      	uxtb	r3, r3
 800969c:	f003 030f 	and.w	r3, r3, #15
 80096a0:	b2da      	uxtb	r2, r3
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096aa:	0d5b      	lsrs	r3, r3, #21
 80096ac:	b2db      	uxtb	r3, r3
 80096ae:	f003 0301 	and.w	r3, r3, #1
 80096b2:	b2da      	uxtb	r2, r3
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	2200      	movs	r2, #0
 80096be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096c6:	0c1b      	lsrs	r3, r3, #16
 80096c8:	b2db      	uxtb	r3, r3
 80096ca:	f003 0301 	and.w	r3, r3, #1
 80096ce:	b2da      	uxtb	r2, r3
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096da:	0bdb      	lsrs	r3, r3, #15
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	f003 0301 	and.w	r3, r3, #1
 80096e2:	b2da      	uxtb	r2, r3
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096ee:	0b9b      	lsrs	r3, r3, #14
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	f003 0301 	and.w	r3, r3, #1
 80096f6:	b2da      	uxtb	r2, r3
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009702:	0b5b      	lsrs	r3, r3, #13
 8009704:	b2db      	uxtb	r3, r3
 8009706:	f003 0301 	and.w	r3, r3, #1
 800970a:	b2da      	uxtb	r2, r3
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009716:	0b1b      	lsrs	r3, r3, #12
 8009718:	b2db      	uxtb	r3, r3
 800971a:	f003 0301 	and.w	r3, r3, #1
 800971e:	b2da      	uxtb	r2, r3
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800972a:	0a9b      	lsrs	r3, r3, #10
 800972c:	b2db      	uxtb	r3, r3
 800972e:	f003 0303 	and.w	r3, r3, #3
 8009732:	b2da      	uxtb	r2, r3
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800973e:	0a1b      	lsrs	r3, r3, #8
 8009740:	b2db      	uxtb	r3, r3
 8009742:	f003 0303 	and.w	r3, r3, #3
 8009746:	b2da      	uxtb	r2, r3
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009752:	085b      	lsrs	r3, r3, #1
 8009754:	b2db      	uxtb	r3, r3
 8009756:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800975a:	b2da      	uxtb	r2, r3
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	2201      	movs	r2, #1
 8009766:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800976a:	2300      	movs	r3, #0
}
 800976c:	4618      	mov	r0, r3
 800976e:	370c      	adds	r7, #12
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr
 8009778:	1fe00fff 	.word	0x1fe00fff

0800977c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b094      	sub	sp, #80	; 0x50
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009786:	2300      	movs	r3, #0
 8009788:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800978c:	f107 0308 	add.w	r3, r7, #8
 8009790:	4619      	mov	r1, r3
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 fb64 	bl	8009e60 <SD_SendSDStatus>
 8009798:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800979a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800979c:	2b00      	cmp	r3, #0
 800979e:	d011      	beq.n	80097c4 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4a4f      	ldr	r2, [pc, #316]	; (80098e4 <HAL_SD_GetCardStatus+0x168>)
 80097a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097ae:	431a      	orrs	r2, r3
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2201      	movs	r2, #1
 80097b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80097bc:	2301      	movs	r3, #1
 80097be:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80097c2:	e070      	b.n	80098a6 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	099b      	lsrs	r3, r3, #6
 80097c8:	b2db      	uxtb	r3, r3
 80097ca:	f003 0303 	and.w	r3, r3, #3
 80097ce:	b2da      	uxtb	r2, r3
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	095b      	lsrs	r3, r3, #5
 80097d8:	b2db      	uxtb	r3, r3
 80097da:	f003 0301 	and.w	r3, r3, #1
 80097de:	b2da      	uxtb	r2, r3
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	0a1b      	lsrs	r3, r3, #8
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80097ee:	b29a      	uxth	r2, r3
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	0e1b      	lsrs	r3, r3, #24
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	4313      	orrs	r3, r2
 80097f8:	b29a      	uxth	r2, r3
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	061a      	lsls	r2, r3, #24
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	021b      	lsls	r3, r3, #8
 8009806:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800980a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	0a1b      	lsrs	r3, r3, #8
 8009810:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009814:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	0e1b      	lsrs	r3, r3, #24
 800981a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	b2da      	uxtb	r2, r3
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	0a1b      	lsrs	r3, r3, #8
 800982c:	b2da      	uxtb	r2, r3
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	0d1b      	lsrs	r3, r3, #20
 8009836:	b2db      	uxtb	r3, r3
 8009838:	f003 030f 	and.w	r3, r3, #15
 800983c:	b2da      	uxtb	r2, r3
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	0c1b      	lsrs	r3, r3, #16
 8009846:	b29b      	uxth	r3, r3
 8009848:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800984c:	b29a      	uxth	r2, r3
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	b29b      	uxth	r3, r3
 8009852:	b2db      	uxtb	r3, r3
 8009854:	b29b      	uxth	r3, r3
 8009856:	4313      	orrs	r3, r2
 8009858:	b29a      	uxth	r2, r3
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	0a9b      	lsrs	r3, r3, #10
 8009862:	b2db      	uxtb	r3, r3
 8009864:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009868:	b2da      	uxtb	r2, r3
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	0a1b      	lsrs	r3, r3, #8
 8009872:	b2db      	uxtb	r3, r3
 8009874:	f003 0303 	and.w	r3, r3, #3
 8009878:	b2da      	uxtb	r2, r3
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	091b      	lsrs	r3, r3, #4
 8009882:	b2db      	uxtb	r3, r3
 8009884:	f003 030f 	and.w	r3, r3, #15
 8009888:	b2da      	uxtb	r2, r3
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	b2db      	uxtb	r3, r3
 8009892:	f003 030f 	and.w	r3, r3, #15
 8009896:	b2da      	uxtb	r2, r3
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800989c:	69bb      	ldr	r3, [r7, #24]
 800989e:	0e1b      	lsrs	r3, r3, #24
 80098a0:	b2da      	uxtb	r2, r3
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80098ae:	4618      	mov	r0, r3
 80098b0:	f001 ffae 	bl	800b810 <SDMMC_CmdBlockLength>
 80098b4:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80098b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d00d      	beq.n	80098d8 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4a08      	ldr	r2, [pc, #32]	; (80098e4 <HAL_SD_GetCardStatus+0x168>)
 80098c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80098c8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2201      	movs	r2, #1
 80098ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80098d2:	2301      	movs	r3, #1
 80098d4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 80098d8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80098dc:	4618      	mov	r0, r3
 80098de:	3750      	adds	r7, #80	; 0x50
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}
 80098e4:	1fe00fff 	.word	0x1fe00fff

080098e8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b083      	sub	sp, #12
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009932:	2300      	movs	r3, #0
}
 8009934:	4618      	mov	r0, r3
 8009936:	370c      	adds	r7, #12
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009940:	b5b0      	push	{r4, r5, r7, lr}
 8009942:	b08e      	sub	sp, #56	; 0x38
 8009944:	af04      	add	r7, sp, #16
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800994a:	2300      	movs	r3, #0
 800994c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2203      	movs	r2, #3
 8009954:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800995c:	2b03      	cmp	r3, #3
 800995e:	d02e      	beq.n	80099be <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009966:	d106      	bne.n	8009976 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800996c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	639a      	str	r2, [r3, #56]	; 0x38
 8009974:	e029      	b.n	80099ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800997c:	d10a      	bne.n	8009994 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f000 fb66 	bl	800a050 <SD_WideBus_Enable>
 8009984:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800998a:	6a3b      	ldr	r3, [r7, #32]
 800998c:	431a      	orrs	r2, r3
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	639a      	str	r2, [r3, #56]	; 0x38
 8009992:	e01a      	b.n	80099ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d10a      	bne.n	80099b0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f000 fba3 	bl	800a0e6 <SD_WideBus_Disable>
 80099a0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099a6:	6a3b      	ldr	r3, [r7, #32]
 80099a8:	431a      	orrs	r2, r3
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	639a      	str	r2, [r3, #56]	; 0x38
 80099ae:	e00c      	b.n	80099ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099b4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	639a      	str	r2, [r3, #56]	; 0x38
 80099bc:	e005      	b.n	80099ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d007      	beq.n	80099e2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a2e      	ldr	r2, [pc, #184]	; (8009a90 <HAL_SD_ConfigWideBusOperation+0x150>)
 80099d8:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80099da:	2301      	movs	r3, #1
 80099dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80099e0:	e034      	b.n	8009a4c <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	689b      	ldr	r3, [r3, #8]
 80099ec:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	691b      	ldr	r3, [r3, #16]
 80099f6:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	695b      	ldr	r3, [r3, #20]
 80099fc:	2b03      	cmp	r3, #3
 80099fe:	d903      	bls.n	8009a08 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	695b      	ldr	r3, [r3, #20]
 8009a04:	61bb      	str	r3, [r7, #24]
 8009a06:	e012      	b.n	8009a2e <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a10:	d103      	bne.n	8009a1a <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	695b      	ldr	r3, [r3, #20]
 8009a16:	61bb      	str	r3, [r7, #24]
 8009a18:	e009      	b.n	8009a2e <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a22:	d102      	bne.n	8009a2a <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 8009a24:	2302      	movs	r3, #2
 8009a26:	61bb      	str	r3, [r7, #24]
 8009a28:	e001      	b.n	8009a2e <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 8009a2a:	2304      	movs	r3, #4
 8009a2c:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681d      	ldr	r5, [r3, #0]
 8009a32:	466c      	mov	r4, sp
 8009a34:	f107 0314 	add.w	r3, r7, #20
 8009a38:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009a3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009a40:	f107 0308 	add.w	r3, r7, #8
 8009a44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009a46:	4628      	mov	r0, r5
 8009a48:	f001 fe04 	bl	800b654 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009a54:	4618      	mov	r0, r3
 8009a56:	f001 fedb 	bl	800b810 <SDMMC_CmdBlockLength>
 8009a5a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a5c:	6a3b      	ldr	r3, [r7, #32]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d00c      	beq.n	8009a7c <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a0a      	ldr	r2, [pc, #40]	; (8009a90 <HAL_SD_ConfigWideBusOperation+0x150>)
 8009a68:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a6e:	6a3b      	ldr	r3, [r7, #32]
 8009a70:	431a      	orrs	r2, r3
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009a76:	2301      	movs	r3, #1
 8009a78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2201      	movs	r2, #1
 8009a80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8009a84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3728      	adds	r7, #40	; 0x28
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bdb0      	pop	{r4, r5, r7, pc}
 8009a90:	1fe00fff 	.word	0x1fe00fff

08009a94 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b086      	sub	sp, #24
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009aa0:	f107 030c 	add.w	r3, r7, #12
 8009aa4:	4619      	mov	r1, r3
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f000 faaa 	bl	800a000 <SD_SendStatus>
 8009aac:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d005      	beq.n	8009ac0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	431a      	orrs	r2, r3
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	0a5b      	lsrs	r3, r3, #9
 8009ac4:	f003 030f 	and.w	r3, r3, #15
 8009ac8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009aca:	693b      	ldr	r3, [r7, #16]
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3718      	adds	r7, #24
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009ad4:	b590      	push	{r4, r7, lr}
 8009ad6:	b091      	sub	sp, #68	; 0x44
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009adc:	2301      	movs	r3, #1
 8009ade:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f001 fe0e 	bl	800b706 <SDMMC_GetPowerState>
 8009aea:	4603      	mov	r3, r0
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d102      	bne.n	8009af6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009af0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009af4:	e0a8      	b.n	8009c48 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009afa:	2b03      	cmp	r3, #3
 8009afc:	d02e      	beq.n	8009b5c <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4618      	mov	r0, r3
 8009b04:	f002 f85a 	bl	800bbbc <SDMMC_CmdSendCID>
 8009b08:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d001      	beq.n	8009b14 <SD_InitCard+0x40>
    {
      return errorstate;
 8009b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b12:	e099      	b.n	8009c48 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	2100      	movs	r1, #0
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f001 fe39 	bl	800b792 <SDMMC_GetResponse>
 8009b20:	4602      	mov	r2, r0
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	2104      	movs	r1, #4
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f001 fe30 	bl	800b792 <SDMMC_GetResponse>
 8009b32:	4602      	mov	r2, r0
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	2108      	movs	r1, #8
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f001 fe27 	bl	800b792 <SDMMC_GetResponse>
 8009b44:	4602      	mov	r2, r0
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	210c      	movs	r1, #12
 8009b50:	4618      	mov	r0, r3
 8009b52:	f001 fe1e 	bl	800b792 <SDMMC_GetResponse>
 8009b56:	4602      	mov	r2, r0
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b60:	2b03      	cmp	r3, #3
 8009b62:	d00d      	beq.n	8009b80 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f107 020e 	add.w	r2, r7, #14
 8009b6c:	4611      	mov	r1, r2
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f002 f863 	bl	800bc3a <SDMMC_CmdSetRelAdd>
 8009b74:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d001      	beq.n	8009b80 <SD_InitCard+0xac>
    {
      return errorstate;
 8009b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b7e:	e063      	b.n	8009c48 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b84:	2b03      	cmp	r3, #3
 8009b86:	d036      	beq.n	8009bf6 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009b88:	89fb      	ldrh	r3, [r7, #14]
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681a      	ldr	r2, [r3, #0]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b98:	041b      	lsls	r3, r3, #16
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	4610      	mov	r0, r2
 8009b9e:	f002 f82c 	bl	800bbfa <SDMMC_CmdSendCSD>
 8009ba2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d001      	beq.n	8009bae <SD_InitCard+0xda>
    {
      return errorstate;
 8009baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bac:	e04c      	b.n	8009c48 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	2100      	movs	r1, #0
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f001 fdec 	bl	800b792 <SDMMC_GetResponse>
 8009bba:	4602      	mov	r2, r0
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	2104      	movs	r1, #4
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f001 fde3 	bl	800b792 <SDMMC_GetResponse>
 8009bcc:	4602      	mov	r2, r0
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	2108      	movs	r1, #8
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f001 fdda 	bl	800b792 <SDMMC_GetResponse>
 8009bde:	4602      	mov	r2, r0
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	210c      	movs	r1, #12
 8009bea:	4618      	mov	r0, r3
 8009bec:	f001 fdd1 	bl	800b792 <SDMMC_GetResponse>
 8009bf0:	4602      	mov	r2, r0
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	2104      	movs	r1, #4
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f001 fdc8 	bl	800b792 <SDMMC_GetResponse>
 8009c02:	4603      	mov	r3, r0
 8009c04:	0d1a      	lsrs	r2, r3, #20
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009c0a:	f107 0310 	add.w	r3, r7, #16
 8009c0e:	4619      	mov	r1, r3
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f7ff fc0f 	bl	8009434 <HAL_SD_GetCardCSD>
 8009c16:	4603      	mov	r3, r0
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d002      	beq.n	8009c22 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c1c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009c20:	e012      	b.n	8009c48 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6819      	ldr	r1, [r3, #0]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c2a:	041b      	lsls	r3, r3, #16
 8009c2c:	f04f 0400 	mov.w	r4, #0
 8009c30:	461a      	mov	r2, r3
 8009c32:	4623      	mov	r3, r4
 8009c34:	4608      	mov	r0, r1
 8009c36:	f001 fed7 	bl	800b9e8 <SDMMC_CmdSelDesel>
 8009c3a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d001      	beq.n	8009c46 <SD_InitCard+0x172>
  {
    return errorstate;
 8009c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c44:	e000      	b.n	8009c48 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009c46:	2300      	movs	r3, #0
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3744      	adds	r7, #68	; 0x44
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd90      	pop	{r4, r7, pc}

08009c50 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b088      	sub	sp, #32
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	61fb      	str	r3, [r7, #28]
 8009c60:	2300      	movs	r3, #0
 8009c62:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 8009c64:	f7f7 fdb0 	bl	80017c8 <HAL_GetTick>
 8009c68:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f001 fede 	bl	800ba30 <SDMMC_CmdGoIdleState>
 8009c74:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d001      	beq.n	8009c80 <SD_PowerON+0x30>
  {
    return errorstate;
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	e0e9      	b.n	8009e54 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4618      	mov	r0, r3
 8009c86:	f001 fef1 	bl	800ba6c <SDMMC_CmdOperCond>
 8009c8a:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d00d      	beq.n	8009cae <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2200      	movs	r2, #0
 8009c96:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f001 fec7 	bl	800ba30 <SDMMC_CmdGoIdleState>
 8009ca2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d004      	beq.n	8009cb4 <SD_PowerON+0x64>
    {
      return errorstate;
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	e0d2      	b.n	8009e54 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	d137      	bne.n	8009d2c <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	2100      	movs	r1, #0
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f001 fef2 	bl	800baac <SDMMC_CmdAppCommand>
 8009cc8:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d02d      	beq.n	8009d2c <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009cd0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009cd4:	e0be      	b.n	8009e54 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	2100      	movs	r1, #0
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f001 fee5 	bl	800baac <SDMMC_CmdAppCommand>
 8009ce2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d001      	beq.n	8009cee <SD_PowerON+0x9e>
    {
      return errorstate;
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	e0b2      	b.n	8009e54 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	495a      	ldr	r1, [pc, #360]	; (8009e5c <SD_PowerON+0x20c>)
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f001 fefc 	bl	800baf2 <SDMMC_CmdAppOperCommand>
 8009cfa:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d002      	beq.n	8009d08 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d02:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009d06:	e0a5      	b.n	8009e54 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	2100      	movs	r1, #0
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f001 fd3f 	bl	800b792 <SDMMC_GetResponse>
 8009d14:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009d16:	69fb      	ldr	r3, [r7, #28]
 8009d18:	0fdb      	lsrs	r3, r3, #31
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	d101      	bne.n	8009d22 <SD_PowerON+0xd2>
 8009d1e:	2301      	movs	r3, #1
 8009d20:	e000      	b.n	8009d24 <SD_PowerON+0xd4>
 8009d22:	2300      	movs	r3, #0
 8009d24:	61bb      	str	r3, [r7, #24]

    count++;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	3301      	adds	r3, #1
 8009d2a:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d802      	bhi.n	8009d3c <SD_PowerON+0xec>
 8009d36:	69bb      	ldr	r3, [r7, #24]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d0cc      	beq.n	8009cd6 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d902      	bls.n	8009d4c <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009d46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009d4a:	e083      	b.n	8009e54 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009d4c:	69fb      	ldr	r3, [r7, #28]
 8009d4e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d07d      	beq.n	8009e52 <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2201      	movs	r2, #1
 8009d5a:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	699b      	ldr	r3, [r3, #24]
 8009d60:	2b02      	cmp	r3, #2
 8009d62:	d176      	bne.n	8009e52 <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8009d64:	69fb      	ldr	r3, [r7, #28]
 8009d66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d071      	beq.n	8009e52 <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d74:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	681a      	ldr	r2, [r3, #0]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f042 0208 	orr.w	r2, r2, #8
 8009d84:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f001 ffbc 	bl	800bd08 <SDMMC_CmdVoltageSwitch>
 8009d90:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d00c      	beq.n	8009db2 <SD_PowerON+0x162>
        {
          return errorstate;
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	e05b      	b.n	8009e54 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009d9c:	f7f7 fd14 	bl	80017c8 <HAL_GetTick>
 8009da0:	4602      	mov	r2, r0
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	1ad3      	subs	r3, r2, r3
 8009da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009daa:	d102      	bne.n	8009db2 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8009dac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009db0:	e050      	b.n	8009e54 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009db8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009dbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009dc0:	d1ec      	bne.n	8009d9c <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009dca:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009dd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009dda:	d002      	beq.n	8009de2 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8009ddc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009de0:	e038      	b.n	8009e54 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8009de2:	2001      	movs	r0, #1
 8009de4:	f7ff fb1a 	bl	800941c <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	681a      	ldr	r2, [r3, #0]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f042 0204 	orr.w	r2, r2, #4
 8009df6:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8009df8:	e00a      	b.n	8009e10 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009dfa:	f7f7 fce5 	bl	80017c8 <HAL_GetTick>
 8009dfe:	4602      	mov	r2, r0
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	1ad3      	subs	r3, r2, r3
 8009e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e08:	d102      	bne.n	8009e10 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8009e0a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009e0e:	e021      	b.n	8009e54 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e1e:	d1ec      	bne.n	8009dfa <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009e28:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e38:	d102      	bne.n	8009e40 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009e3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009e3e:	e009      	b.n	8009e54 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	2213      	movs	r2, #19
 8009e46:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8009e50:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8009e52:	2300      	movs	r3, #0
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3720      	adds	r7, #32
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}
 8009e5c:	c1100000 	.word	0xc1100000

08009e60 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b08c      	sub	sp, #48	; 0x30
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009e6a:	f7f7 fcad 	bl	80017c8 <HAL_GetTick>
 8009e6e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	2100      	movs	r1, #0
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f001 fc89 	bl	800b792 <SDMMC_GetResponse>
 8009e80:	4603      	mov	r3, r0
 8009e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e8a:	d102      	bne.n	8009e92 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009e8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009e90:	e0b0      	b.n	8009ff4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	2140      	movs	r1, #64	; 0x40
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f001 fcb9 	bl	800b810 <SDMMC_CmdBlockLength>
 8009e9e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ea0:	6a3b      	ldr	r3, [r7, #32]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d005      	beq.n	8009eb2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009eae:	6a3b      	ldr	r3, [r7, #32]
 8009eb0:	e0a0      	b.n	8009ff4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681a      	ldr	r2, [r3, #0]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009eba:	041b      	lsls	r3, r3, #16
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	4610      	mov	r0, r2
 8009ec0:	f001 fdf4 	bl	800baac <SDMMC_CmdAppCommand>
 8009ec4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ec6:	6a3b      	ldr	r3, [r7, #32]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d005      	beq.n	8009ed8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009ed4:	6a3b      	ldr	r3, [r7, #32]
 8009ed6:	e08d      	b.n	8009ff4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8009edc:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8009ede:	2340      	movs	r3, #64	; 0x40
 8009ee0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009ee2:	2360      	movs	r3, #96	; 0x60
 8009ee4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009ee6:	2302      	movs	r3, #2
 8009ee8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009eea:	2300      	movs	r3, #0
 8009eec:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f107 0208 	add.w	r2, r7, #8
 8009efa:	4611      	mov	r1, r2
 8009efc:	4618      	mov	r0, r3
 8009efe:	f001 fc5b 	bl	800b7b8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4618      	mov	r0, r3
 8009f08:	f001 fedc 	bl	800bcc4 <SDMMC_CmdStatusRegister>
 8009f0c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f0e:	6a3b      	ldr	r3, [r7, #32]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d02b      	beq.n	8009f6c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009f1c:	6a3b      	ldr	r3, [r7, #32]
 8009f1e:	e069      	b.n	8009ff4 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d013      	beq.n	8009f56 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8009f2e:	2300      	movs	r3, #0
 8009f30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f32:	e00d      	b.n	8009f50 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f001 fbb5 	bl	800b6a8 <SDMMC_ReadFIFO>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f42:	601a      	str	r2, [r3, #0]
        pData++;
 8009f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f46:	3304      	adds	r3, #4
 8009f48:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8009f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f4c:	3301      	adds	r3, #1
 8009f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f52:	2b07      	cmp	r3, #7
 8009f54:	d9ee      	bls.n	8009f34 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009f56:	f7f7 fc37 	bl	80017c8 <HAL_GetTick>
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5e:	1ad3      	subs	r3, r2, r3
 8009f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f64:	d102      	bne.n	8009f6c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009f66:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f6a:	e043      	b.n	8009ff4 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f72:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d0d2      	beq.n	8009f20 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f80:	f003 0308 	and.w	r3, r3, #8
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d001      	beq.n	8009f8c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009f88:	2308      	movs	r3, #8
 8009f8a:	e033      	b.n	8009ff4 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f92:	f003 0302 	and.w	r3, r3, #2
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d001      	beq.n	8009f9e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009f9a:	2302      	movs	r3, #2
 8009f9c:	e02a      	b.n	8009ff4 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fa4:	f003 0320 	and.w	r3, r3, #32
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d017      	beq.n	8009fdc <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009fac:	2320      	movs	r3, #32
 8009fae:	e021      	b.n	8009ff4 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f001 fb77 	bl	800b6a8 <SDMMC_ReadFIFO>
 8009fba:	4602      	mov	r2, r0
 8009fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fbe:	601a      	str	r2, [r3, #0]
    pData++;
 8009fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc2:	3304      	adds	r3, #4
 8009fc4:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009fc6:	f7f7 fbff 	bl	80017c8 <HAL_GetTick>
 8009fca:	4602      	mov	r2, r0
 8009fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fce:	1ad3      	subs	r3, r2, r3
 8009fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fd4:	d102      	bne.n	8009fdc <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009fd6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009fda:	e00b      	b.n	8009ff4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fe2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d1e2      	bne.n	8009fb0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	4a03      	ldr	r2, [pc, #12]	; (8009ffc <SD_SendSDStatus+0x19c>)
 8009ff0:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8009ff2:	2300      	movs	r3, #0
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3730      	adds	r7, #48	; 0x30
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}
 8009ffc:	18000f3a 	.word	0x18000f3a

0800a000 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b084      	sub	sp, #16
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d102      	bne.n	800a016 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a010:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a014:	e018      	b.n	800a048 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681a      	ldr	r2, [r3, #0]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a01e:	041b      	lsls	r3, r3, #16
 800a020:	4619      	mov	r1, r3
 800a022:	4610      	mov	r0, r2
 800a024:	f001 fe2b 	bl	800bc7e <SDMMC_CmdSendStatus>
 800a028:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d001      	beq.n	800a034 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	e009      	b.n	800a048 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	2100      	movs	r1, #0
 800a03a:	4618      	mov	r0, r3
 800a03c:	f001 fba9 	bl	800b792 <SDMMC_GetResponse>
 800a040:	4602      	mov	r2, r0
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a046:	2300      	movs	r3, #0
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3710      	adds	r7, #16
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b086      	sub	sp, #24
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a058:	2300      	movs	r3, #0
 800a05a:	60fb      	str	r3, [r7, #12]
 800a05c:	2300      	movs	r3, #0
 800a05e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	2100      	movs	r1, #0
 800a066:	4618      	mov	r0, r3
 800a068:	f001 fb93 	bl	800b792 <SDMMC_GetResponse>
 800a06c:	4603      	mov	r3, r0
 800a06e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a072:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a076:	d102      	bne.n	800a07e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a078:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a07c:	e02f      	b.n	800a0de <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a07e:	f107 030c 	add.w	r3, r7, #12
 800a082:	4619      	mov	r1, r3
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f000 f879 	bl	800a17c <SD_FindSCR>
 800a08a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d001      	beq.n	800a096 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	e023      	b.n	800a0de <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d01c      	beq.n	800a0da <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0a8:	041b      	lsls	r3, r3, #16
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	4610      	mov	r0, r2
 800a0ae:	f001 fcfd 	bl	800baac <SDMMC_CmdAppCommand>
 800a0b2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d001      	beq.n	800a0be <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	e00f      	b.n	800a0de <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	2102      	movs	r1, #2
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f001 fd34 	bl	800bb32 <SDMMC_CmdBusWidth>
 800a0ca:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d001      	beq.n	800a0d6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	e003      	b.n	800a0de <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	e001      	b.n	800a0de <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a0da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3718      	adds	r7, #24
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}

0800a0e6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a0e6:	b580      	push	{r7, lr}
 800a0e8:	b086      	sub	sp, #24
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	60fb      	str	r3, [r7, #12]
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	2100      	movs	r1, #0
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f001 fb48 	bl	800b792 <SDMMC_GetResponse>
 800a102:	4603      	mov	r3, r0
 800a104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a108:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a10c:	d102      	bne.n	800a114 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a10e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a112:	e02f      	b.n	800a174 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a114:	f107 030c 	add.w	r3, r7, #12
 800a118:	4619      	mov	r1, r3
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f000 f82e 	bl	800a17c <SD_FindSCR>
 800a120:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d001      	beq.n	800a12c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	e023      	b.n	800a174 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a132:	2b00      	cmp	r3, #0
 800a134:	d01c      	beq.n	800a170 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681a      	ldr	r2, [r3, #0]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a13e:	041b      	lsls	r3, r3, #16
 800a140:	4619      	mov	r1, r3
 800a142:	4610      	mov	r0, r2
 800a144:	f001 fcb2 	bl	800baac <SDMMC_CmdAppCommand>
 800a148:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d001      	beq.n	800a154 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	e00f      	b.n	800a174 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	2100      	movs	r1, #0
 800a15a:	4618      	mov	r0, r3
 800a15c:	f001 fce9 	bl	800bb32 <SDMMC_CmdBusWidth>
 800a160:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d001      	beq.n	800a16c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	e003      	b.n	800a174 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a16c:	2300      	movs	r3, #0
 800a16e:	e001      	b.n	800a174 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a170:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a174:	4618      	mov	r0, r3
 800a176:	3718      	adds	r7, #24
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b08e      	sub	sp, #56	; 0x38
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a186:	f7f7 fb1f 	bl	80017c8 <HAL_GetTick>
 800a18a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800a18c:	2300      	movs	r3, #0
 800a18e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800a190:	2300      	movs	r3, #0
 800a192:	60bb      	str	r3, [r7, #8]
 800a194:	2300      	movs	r3, #0
 800a196:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	2108      	movs	r1, #8
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f001 fb34 	bl	800b810 <SDMMC_CmdBlockLength>
 800a1a8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d001      	beq.n	800a1b4 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b2:	e0ad      	b.n	800a310 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681a      	ldr	r2, [r3, #0]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1bc:	041b      	lsls	r3, r3, #16
 800a1be:	4619      	mov	r1, r3
 800a1c0:	4610      	mov	r0, r2
 800a1c2:	f001 fc73 	bl	800baac <SDMMC_CmdAppCommand>
 800a1c6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d001      	beq.n	800a1d2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800a1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d0:	e09e      	b.n	800a310 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a1d2:	f04f 33ff 	mov.w	r3, #4294967295
 800a1d6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a1d8:	2308      	movs	r3, #8
 800a1da:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a1dc:	2330      	movs	r3, #48	; 0x30
 800a1de:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a1e0:	2302      	movs	r3, #2
 800a1e2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f107 0210 	add.w	r2, r7, #16
 800a1f4:	4611      	mov	r1, r2
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f001 fade 	bl	800b7b8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4618      	mov	r0, r3
 800a202:	f001 fcb9 	bl	800bb78 <SDMMC_CmdSendSCR>
 800a206:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d027      	beq.n	800a25e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800a20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a210:	e07e      	b.n	800a310 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a218:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d113      	bne.n	800a248 <SD_FindSCR+0xcc>
 800a220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a222:	2b00      	cmp	r3, #0
 800a224:	d110      	bne.n	800a248 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4618      	mov	r0, r3
 800a22c:	f001 fa3c 	bl	800b6a8 <SDMMC_ReadFIFO>
 800a230:	4603      	mov	r3, r0
 800a232:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4618      	mov	r0, r3
 800a23a:	f001 fa35 	bl	800b6a8 <SDMMC_ReadFIFO>
 800a23e:	4603      	mov	r3, r0
 800a240:	60fb      	str	r3, [r7, #12]
      index++;
 800a242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a244:	3301      	adds	r3, #1
 800a246:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a248:	f7f7 fabe 	bl	80017c8 <HAL_GetTick>
 800a24c:	4602      	mov	r2, r0
 800a24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a250:	1ad3      	subs	r3, r2, r3
 800a252:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a256:	d102      	bne.n	800a25e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a258:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a25c:	e058      	b.n	800a310 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a264:	f240 532a 	movw	r3, #1322	; 0x52a
 800a268:	4013      	ands	r3, r2
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d0d1      	beq.n	800a212 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a274:	f003 0308 	and.w	r3, r3, #8
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d005      	beq.n	800a288 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	2208      	movs	r2, #8
 800a282:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a284:	2308      	movs	r3, #8
 800a286:	e043      	b.n	800a310 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a28e:	f003 0302 	and.w	r3, r3, #2
 800a292:	2b00      	cmp	r3, #0
 800a294:	d005      	beq.n	800a2a2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	2202      	movs	r2, #2
 800a29c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a29e:	2302      	movs	r3, #2
 800a2a0:	e036      	b.n	800a310 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2a8:	f003 0320 	and.w	r3, r3, #32
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d005      	beq.n	800a2bc <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	2220      	movs	r2, #32
 800a2b6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a2b8:	2320      	movs	r3, #32
 800a2ba:	e029      	b.n	800a310 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4a15      	ldr	r2, [pc, #84]	; (800a318 <SD_FindSCR+0x19c>)
 800a2c2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	061a      	lsls	r2, r3, #24
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	021b      	lsls	r3, r3, #8
 800a2cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a2d0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	0a1b      	lsrs	r3, r3, #8
 800a2d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a2da:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	0e1b      	lsrs	r3, r3, #24
 800a2e0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a2e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2e4:	601a      	str	r2, [r3, #0]
    scr++;
 800a2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2e8:	3304      	adds	r3, #4
 800a2ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	061a      	lsls	r2, r3, #24
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	021b      	lsls	r3, r3, #8
 800a2f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a2f8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	0a1b      	lsrs	r3, r3, #8
 800a2fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a302:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	0e1b      	lsrs	r3, r3, #24
 800a308:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a30c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a30e:	2300      	movs	r3, #0
}
 800a310:	4618      	mov	r0, r3
 800a312:	3738      	adds	r7, #56	; 0x38
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}
 800a318:	18000f3a 	.word	0x18000f3a

0800a31c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b084      	sub	sp, #16
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 800a324:	2300      	movs	r3, #0
 800a326:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d101      	bne.n	800a332 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800a32e:	2301      	movs	r3, #1
 800a330:	e0e2      	b.n	800a4f8 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2200      	movs	r2, #0
 800a336:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4a70      	ldr	r2, [pc, #448]	; (800a500 <HAL_SPI_Init+0x1e4>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d00f      	beq.n	800a362 <HAL_SPI_Init+0x46>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4a6f      	ldr	r2, [pc, #444]	; (800a504 <HAL_SPI_Init+0x1e8>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d00a      	beq.n	800a362 <HAL_SPI_Init+0x46>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a6d      	ldr	r2, [pc, #436]	; (800a508 <HAL_SPI_Init+0x1ec>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d005      	beq.n	800a362 <HAL_SPI_Init+0x46>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	68db      	ldr	r3, [r3, #12]
 800a35a:	2b0f      	cmp	r3, #15
 800a35c:	d901      	bls.n	800a362 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800a35e:	2301      	movs	r3, #1
 800a360:	e0ca      	b.n	800a4f8 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f000 f8d2 	bl	800a50c <SPI_GetPacketSize>
 800a368:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	4a64      	ldr	r2, [pc, #400]	; (800a500 <HAL_SPI_Init+0x1e4>)
 800a370:	4293      	cmp	r3, r2
 800a372:	d00c      	beq.n	800a38e <HAL_SPI_Init+0x72>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4a62      	ldr	r2, [pc, #392]	; (800a504 <HAL_SPI_Init+0x1e8>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d007      	beq.n	800a38e <HAL_SPI_Init+0x72>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	4a61      	ldr	r2, [pc, #388]	; (800a508 <HAL_SPI_Init+0x1ec>)
 800a384:	4293      	cmp	r3, r2
 800a386:	d002      	beq.n	800a38e <HAL_SPI_Init+0x72>
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	2b08      	cmp	r3, #8
 800a38c:	d811      	bhi.n	800a3b2 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a392:	4a5b      	ldr	r2, [pc, #364]	; (800a500 <HAL_SPI_Init+0x1e4>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d009      	beq.n	800a3ac <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4a59      	ldr	r2, [pc, #356]	; (800a504 <HAL_SPI_Init+0x1e8>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d004      	beq.n	800a3ac <HAL_SPI_Init+0x90>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4a58      	ldr	r2, [pc, #352]	; (800a508 <HAL_SPI_Init+0x1ec>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d104      	bne.n	800a3b6 <HAL_SPI_Init+0x9a>
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	2b10      	cmp	r3, #16
 800a3b0:	d901      	bls.n	800a3b6 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	e0a0      	b.n	800a4f8 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a3bc:	b2db      	uxtb	r3, r3
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d106      	bne.n	800a3d0 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f7f6 fed6 	bl	800117c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2202      	movs	r2, #2
 800a3d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	681a      	ldr	r2, [r3, #0]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f022 0201 	bic.w	r2, r2, #1
 800a3e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	699b      	ldr	r3, [r3, #24]
 800a3ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a3f0:	d110      	bne.n	800a414 <HAL_SPI_Init+0xf8>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	685b      	ldr	r3, [r3, #4]
 800a3f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a3fa:	d10b      	bne.n	800a414 <HAL_SPI_Init+0xf8>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a400:	2b00      	cmp	r3, #0
 800a402:	d107      	bne.n	800a414 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	681a      	ldr	r2, [r3, #0]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a412:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	69da      	ldr	r2, [r3, #28]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a41c:	431a      	orrs	r2, r3
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	431a      	orrs	r2, r3
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a426:	ea42 0103 	orr.w	r1, r2, r3
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	68da      	ldr	r2, [r3, #12]
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	430a      	orrs	r2, r1
 800a434:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a43e:	431a      	orrs	r2, r3
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a444:	431a      	orrs	r2, r3
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	699b      	ldr	r3, [r3, #24]
 800a44a:	431a      	orrs	r2, r3
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	691b      	ldr	r3, [r3, #16]
 800a450:	431a      	orrs	r2, r3
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	695b      	ldr	r3, [r3, #20]
 800a456:	431a      	orrs	r2, r3
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6a1b      	ldr	r3, [r3, #32]
 800a45c:	431a      	orrs	r2, r3
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	685b      	ldr	r3, [r3, #4]
 800a462:	431a      	orrs	r2, r3
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a468:	431a      	orrs	r2, r3
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	689b      	ldr	r3, [r3, #8]
 800a46e:	431a      	orrs	r2, r3
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a474:	ea42 0103 	orr.w	r1, r2, r3
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	430a      	orrs	r2, r1
 800a482:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d113      	bne.n	800a4b4 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	689b      	ldr	r3, [r3, #8]
 800a492:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a49e:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	689b      	ldr	r3, [r3, #8]
 800a4a6:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a4b2:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f022 0201 	bic.w	r2, r2, #1
 800a4c2:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d00a      	beq.n	800a4e6 <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	68db      	ldr	r3, [r3, #12]
 800a4d6:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	430a      	orrs	r2, r1
 800a4e4:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2201      	movs	r2, #1
 800a4f2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a4f6:	2300      	movs	r3, #0
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3710      	adds	r7, #16
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}
 800a500:	40013000 	.word	0x40013000
 800a504:	40003800 	.word	0x40003800
 800a508:	40003c00 	.word	0x40003c00

0800a50c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b085      	sub	sp, #20
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a518:	095b      	lsrs	r3, r3, #5
 800a51a:	3301      	adds	r3, #1
 800a51c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	68db      	ldr	r3, [r3, #12]
 800a522:	3301      	adds	r3, #1
 800a524:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	3307      	adds	r3, #7
 800a52a:	08db      	lsrs	r3, r3, #3
 800a52c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	68fa      	ldr	r2, [r7, #12]
 800a532:	fb02 f303 	mul.w	r3, r2, r3
}
 800a536:	4618      	mov	r0, r3
 800a538:	3714      	adds	r7, #20
 800a53a:	46bd      	mov	sp, r7
 800a53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a540:	4770      	bx	lr

0800a542 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a542:	b580      	push	{r7, lr}
 800a544:	b082      	sub	sp, #8
 800a546:	af00      	add	r7, sp, #0
 800a548:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d101      	bne.n	800a554 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a550:	2301      	movs	r3, #1
 800a552:	e042      	b.n	800a5da <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d106      	bne.n	800a56c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2200      	movs	r2, #0
 800a562:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f7f6 fe52 	bl	8001210 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2224      	movs	r2, #36	; 0x24
 800a570:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	681a      	ldr	r2, [r3, #0]
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f022 0201 	bic.w	r2, r2, #1
 800a582:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f000 f82d 	bl	800a5e4 <UART_SetConfig>
 800a58a:	4603      	mov	r3, r0
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	d101      	bne.n	800a594 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a590:	2301      	movs	r3, #1
 800a592:	e022      	b.n	800a5da <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d002      	beq.n	800a5a2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f000 fdd1 	bl	800b144 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	685a      	ldr	r2, [r3, #4]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a5b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	689a      	ldr	r2, [r3, #8]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a5c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f042 0201 	orr.w	r2, r2, #1
 800a5d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f000 fe58 	bl	800b288 <UART_CheckIdleState>
 800a5d8:	4603      	mov	r3, r0
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3708      	adds	r7, #8
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}
	...

0800a5e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a5e4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800a5e8:	b08e      	sub	sp, #56	; 0x38
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	689a      	ldr	r2, [r3, #8]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	691b      	ldr	r3, [r3, #16]
 800a5fc:	431a      	orrs	r2, r3
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	695b      	ldr	r3, [r3, #20]
 800a602:	431a      	orrs	r2, r3
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	69db      	ldr	r3, [r3, #28]
 800a608:	4313      	orrs	r3, r2
 800a60a:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a610:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a612:	4313      	orrs	r3, r2
 800a614:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	681a      	ldr	r2, [r3, #0]
 800a61c:	4bc1      	ldr	r3, [pc, #772]	; (800a924 <UART_SetConfig+0x340>)
 800a61e:	4013      	ands	r3, r2
 800a620:	687a      	ldr	r2, [r7, #4]
 800a622:	6812      	ldr	r2, [r2, #0]
 800a624:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a626:	430b      	orrs	r3, r1
 800a628:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	685b      	ldr	r3, [r3, #4]
 800a630:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	68da      	ldr	r2, [r3, #12]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	430a      	orrs	r2, r1
 800a63e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	699b      	ldr	r3, [r3, #24]
 800a644:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	4ab7      	ldr	r2, [pc, #732]	; (800a928 <UART_SetConfig+0x344>)
 800a64c:	4293      	cmp	r3, r2
 800a64e:	d004      	beq.n	800a65a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6a1b      	ldr	r3, [r3, #32]
 800a654:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a656:	4313      	orrs	r3, r2
 800a658:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	689a      	ldr	r2, [r3, #8]
 800a660:	4bb2      	ldr	r3, [pc, #712]	; (800a92c <UART_SetConfig+0x348>)
 800a662:	4013      	ands	r3, r2
 800a664:	687a      	ldr	r2, [r7, #4]
 800a666:	6812      	ldr	r2, [r2, #0]
 800a668:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a66a:	430b      	orrs	r3, r1
 800a66c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a674:	f023 010f 	bic.w	r1, r3, #15
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	430a      	orrs	r2, r1
 800a682:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4aa9      	ldr	r2, [pc, #676]	; (800a930 <UART_SetConfig+0x34c>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d177      	bne.n	800a77e <UART_SetConfig+0x19a>
 800a68e:	4ba9      	ldr	r3, [pc, #676]	; (800a934 <UART_SetConfig+0x350>)
 800a690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a692:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a696:	2b28      	cmp	r3, #40	; 0x28
 800a698:	d86c      	bhi.n	800a774 <UART_SetConfig+0x190>
 800a69a:	a201      	add	r2, pc, #4	; (adr r2, 800a6a0 <UART_SetConfig+0xbc>)
 800a69c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6a0:	0800a745 	.word	0x0800a745
 800a6a4:	0800a775 	.word	0x0800a775
 800a6a8:	0800a775 	.word	0x0800a775
 800a6ac:	0800a775 	.word	0x0800a775
 800a6b0:	0800a775 	.word	0x0800a775
 800a6b4:	0800a775 	.word	0x0800a775
 800a6b8:	0800a775 	.word	0x0800a775
 800a6bc:	0800a775 	.word	0x0800a775
 800a6c0:	0800a74d 	.word	0x0800a74d
 800a6c4:	0800a775 	.word	0x0800a775
 800a6c8:	0800a775 	.word	0x0800a775
 800a6cc:	0800a775 	.word	0x0800a775
 800a6d0:	0800a775 	.word	0x0800a775
 800a6d4:	0800a775 	.word	0x0800a775
 800a6d8:	0800a775 	.word	0x0800a775
 800a6dc:	0800a775 	.word	0x0800a775
 800a6e0:	0800a755 	.word	0x0800a755
 800a6e4:	0800a775 	.word	0x0800a775
 800a6e8:	0800a775 	.word	0x0800a775
 800a6ec:	0800a775 	.word	0x0800a775
 800a6f0:	0800a775 	.word	0x0800a775
 800a6f4:	0800a775 	.word	0x0800a775
 800a6f8:	0800a775 	.word	0x0800a775
 800a6fc:	0800a775 	.word	0x0800a775
 800a700:	0800a75d 	.word	0x0800a75d
 800a704:	0800a775 	.word	0x0800a775
 800a708:	0800a775 	.word	0x0800a775
 800a70c:	0800a775 	.word	0x0800a775
 800a710:	0800a775 	.word	0x0800a775
 800a714:	0800a775 	.word	0x0800a775
 800a718:	0800a775 	.word	0x0800a775
 800a71c:	0800a775 	.word	0x0800a775
 800a720:	0800a765 	.word	0x0800a765
 800a724:	0800a775 	.word	0x0800a775
 800a728:	0800a775 	.word	0x0800a775
 800a72c:	0800a775 	.word	0x0800a775
 800a730:	0800a775 	.word	0x0800a775
 800a734:	0800a775 	.word	0x0800a775
 800a738:	0800a775 	.word	0x0800a775
 800a73c:	0800a775 	.word	0x0800a775
 800a740:	0800a76d 	.word	0x0800a76d
 800a744:	2301      	movs	r3, #1
 800a746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a74a:	e233      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800a74c:	2304      	movs	r3, #4
 800a74e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a752:	e22f      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800a754:	2308      	movs	r3, #8
 800a756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a75a:	e22b      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800a75c:	2310      	movs	r3, #16
 800a75e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a762:	e227      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800a764:	2320      	movs	r3, #32
 800a766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a76a:	e223      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800a76c:	2340      	movs	r3, #64	; 0x40
 800a76e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a772:	e21f      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800a774:	2380      	movs	r3, #128	; 0x80
 800a776:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a77a:	bf00      	nop
 800a77c:	e21a      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	4a6d      	ldr	r2, [pc, #436]	; (800a938 <UART_SetConfig+0x354>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d132      	bne.n	800a7ee <UART_SetConfig+0x20a>
 800a788:	4b6a      	ldr	r3, [pc, #424]	; (800a934 <UART_SetConfig+0x350>)
 800a78a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a78c:	f003 0307 	and.w	r3, r3, #7
 800a790:	2b05      	cmp	r3, #5
 800a792:	d827      	bhi.n	800a7e4 <UART_SetConfig+0x200>
 800a794:	a201      	add	r2, pc, #4	; (adr r2, 800a79c <UART_SetConfig+0x1b8>)
 800a796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a79a:	bf00      	nop
 800a79c:	0800a7b5 	.word	0x0800a7b5
 800a7a0:	0800a7bd 	.word	0x0800a7bd
 800a7a4:	0800a7c5 	.word	0x0800a7c5
 800a7a8:	0800a7cd 	.word	0x0800a7cd
 800a7ac:	0800a7d5 	.word	0x0800a7d5
 800a7b0:	0800a7dd 	.word	0x0800a7dd
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7ba:	e1fb      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800a7bc:	2304      	movs	r3, #4
 800a7be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7c2:	e1f7      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800a7c4:	2308      	movs	r3, #8
 800a7c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7ca:	e1f3      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800a7cc:	2310      	movs	r3, #16
 800a7ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7d2:	e1ef      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800a7d4:	2320      	movs	r3, #32
 800a7d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7da:	e1eb      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800a7dc:	2340      	movs	r3, #64	; 0x40
 800a7de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7e2:	e1e7      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800a7e4:	2380      	movs	r3, #128	; 0x80
 800a7e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7ea:	bf00      	nop
 800a7ec:	e1e2      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	4a52      	ldr	r2, [pc, #328]	; (800a93c <UART_SetConfig+0x358>)
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d132      	bne.n	800a85e <UART_SetConfig+0x27a>
 800a7f8:	4b4e      	ldr	r3, [pc, #312]	; (800a934 <UART_SetConfig+0x350>)
 800a7fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7fc:	f003 0307 	and.w	r3, r3, #7
 800a800:	2b05      	cmp	r3, #5
 800a802:	d827      	bhi.n	800a854 <UART_SetConfig+0x270>
 800a804:	a201      	add	r2, pc, #4	; (adr r2, 800a80c <UART_SetConfig+0x228>)
 800a806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a80a:	bf00      	nop
 800a80c:	0800a825 	.word	0x0800a825
 800a810:	0800a82d 	.word	0x0800a82d
 800a814:	0800a835 	.word	0x0800a835
 800a818:	0800a83d 	.word	0x0800a83d
 800a81c:	0800a845 	.word	0x0800a845
 800a820:	0800a84d 	.word	0x0800a84d
 800a824:	2300      	movs	r3, #0
 800a826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a82a:	e1c3      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800a82c:	2304      	movs	r3, #4
 800a82e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a832:	e1bf      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800a834:	2308      	movs	r3, #8
 800a836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a83a:	e1bb      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800a83c:	2310      	movs	r3, #16
 800a83e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a842:	e1b7      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800a844:	2320      	movs	r3, #32
 800a846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a84a:	e1b3      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800a84c:	2340      	movs	r3, #64	; 0x40
 800a84e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a852:	e1af      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800a854:	2380      	movs	r3, #128	; 0x80
 800a856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a85a:	bf00      	nop
 800a85c:	e1aa      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4a37      	ldr	r2, [pc, #220]	; (800a940 <UART_SetConfig+0x35c>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d132      	bne.n	800a8ce <UART_SetConfig+0x2ea>
 800a868:	4b32      	ldr	r3, [pc, #200]	; (800a934 <UART_SetConfig+0x350>)
 800a86a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a86c:	f003 0307 	and.w	r3, r3, #7
 800a870:	2b05      	cmp	r3, #5
 800a872:	d827      	bhi.n	800a8c4 <UART_SetConfig+0x2e0>
 800a874:	a201      	add	r2, pc, #4	; (adr r2, 800a87c <UART_SetConfig+0x298>)
 800a876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a87a:	bf00      	nop
 800a87c:	0800a895 	.word	0x0800a895
 800a880:	0800a89d 	.word	0x0800a89d
 800a884:	0800a8a5 	.word	0x0800a8a5
 800a888:	0800a8ad 	.word	0x0800a8ad
 800a88c:	0800a8b5 	.word	0x0800a8b5
 800a890:	0800a8bd 	.word	0x0800a8bd
 800a894:	2300      	movs	r3, #0
 800a896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a89a:	e18b      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800a89c:	2304      	movs	r3, #4
 800a89e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8a2:	e187      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800a8a4:	2308      	movs	r3, #8
 800a8a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8aa:	e183      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800a8ac:	2310      	movs	r3, #16
 800a8ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8b2:	e17f      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800a8b4:	2320      	movs	r3, #32
 800a8b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8ba:	e17b      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800a8bc:	2340      	movs	r3, #64	; 0x40
 800a8be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8c2:	e177      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800a8c4:	2380      	movs	r3, #128	; 0x80
 800a8c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8ca:	bf00      	nop
 800a8cc:	e172      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	4a1c      	ldr	r2, [pc, #112]	; (800a944 <UART_SetConfig+0x360>)
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d144      	bne.n	800a962 <UART_SetConfig+0x37e>
 800a8d8:	4b16      	ldr	r3, [pc, #88]	; (800a934 <UART_SetConfig+0x350>)
 800a8da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8dc:	f003 0307 	and.w	r3, r3, #7
 800a8e0:	2b05      	cmp	r3, #5
 800a8e2:	d839      	bhi.n	800a958 <UART_SetConfig+0x374>
 800a8e4:	a201      	add	r2, pc, #4	; (adr r2, 800a8ec <UART_SetConfig+0x308>)
 800a8e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ea:	bf00      	nop
 800a8ec:	0800a905 	.word	0x0800a905
 800a8f0:	0800a90d 	.word	0x0800a90d
 800a8f4:	0800a915 	.word	0x0800a915
 800a8f8:	0800a91d 	.word	0x0800a91d
 800a8fc:	0800a949 	.word	0x0800a949
 800a900:	0800a951 	.word	0x0800a951
 800a904:	2300      	movs	r3, #0
 800a906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a90a:	e153      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800a90c:	2304      	movs	r3, #4
 800a90e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a912:	e14f      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800a914:	2308      	movs	r3, #8
 800a916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a91a:	e14b      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800a91c:	2310      	movs	r3, #16
 800a91e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a922:	e147      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800a924:	cfff69f3 	.word	0xcfff69f3
 800a928:	58000c00 	.word	0x58000c00
 800a92c:	11fff4ff 	.word	0x11fff4ff
 800a930:	40011000 	.word	0x40011000
 800a934:	58024400 	.word	0x58024400
 800a938:	40004400 	.word	0x40004400
 800a93c:	40004800 	.word	0x40004800
 800a940:	40004c00 	.word	0x40004c00
 800a944:	40005000 	.word	0x40005000
 800a948:	2320      	movs	r3, #32
 800a94a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a94e:	e131      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800a950:	2340      	movs	r3, #64	; 0x40
 800a952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a956:	e12d      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800a958:	2380      	movs	r3, #128	; 0x80
 800a95a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a95e:	bf00      	nop
 800a960:	e128      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	4ab6      	ldr	r2, [pc, #728]	; (800ac40 <UART_SetConfig+0x65c>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d178      	bne.n	800aa5e <UART_SetConfig+0x47a>
 800a96c:	4bb5      	ldr	r3, [pc, #724]	; (800ac44 <UART_SetConfig+0x660>)
 800a96e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a970:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a974:	2b28      	cmp	r3, #40	; 0x28
 800a976:	d86d      	bhi.n	800aa54 <UART_SetConfig+0x470>
 800a978:	a201      	add	r2, pc, #4	; (adr r2, 800a980 <UART_SetConfig+0x39c>)
 800a97a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a97e:	bf00      	nop
 800a980:	0800aa25 	.word	0x0800aa25
 800a984:	0800aa55 	.word	0x0800aa55
 800a988:	0800aa55 	.word	0x0800aa55
 800a98c:	0800aa55 	.word	0x0800aa55
 800a990:	0800aa55 	.word	0x0800aa55
 800a994:	0800aa55 	.word	0x0800aa55
 800a998:	0800aa55 	.word	0x0800aa55
 800a99c:	0800aa55 	.word	0x0800aa55
 800a9a0:	0800aa2d 	.word	0x0800aa2d
 800a9a4:	0800aa55 	.word	0x0800aa55
 800a9a8:	0800aa55 	.word	0x0800aa55
 800a9ac:	0800aa55 	.word	0x0800aa55
 800a9b0:	0800aa55 	.word	0x0800aa55
 800a9b4:	0800aa55 	.word	0x0800aa55
 800a9b8:	0800aa55 	.word	0x0800aa55
 800a9bc:	0800aa55 	.word	0x0800aa55
 800a9c0:	0800aa35 	.word	0x0800aa35
 800a9c4:	0800aa55 	.word	0x0800aa55
 800a9c8:	0800aa55 	.word	0x0800aa55
 800a9cc:	0800aa55 	.word	0x0800aa55
 800a9d0:	0800aa55 	.word	0x0800aa55
 800a9d4:	0800aa55 	.word	0x0800aa55
 800a9d8:	0800aa55 	.word	0x0800aa55
 800a9dc:	0800aa55 	.word	0x0800aa55
 800a9e0:	0800aa3d 	.word	0x0800aa3d
 800a9e4:	0800aa55 	.word	0x0800aa55
 800a9e8:	0800aa55 	.word	0x0800aa55
 800a9ec:	0800aa55 	.word	0x0800aa55
 800a9f0:	0800aa55 	.word	0x0800aa55
 800a9f4:	0800aa55 	.word	0x0800aa55
 800a9f8:	0800aa55 	.word	0x0800aa55
 800a9fc:	0800aa55 	.word	0x0800aa55
 800aa00:	0800aa45 	.word	0x0800aa45
 800aa04:	0800aa55 	.word	0x0800aa55
 800aa08:	0800aa55 	.word	0x0800aa55
 800aa0c:	0800aa55 	.word	0x0800aa55
 800aa10:	0800aa55 	.word	0x0800aa55
 800aa14:	0800aa55 	.word	0x0800aa55
 800aa18:	0800aa55 	.word	0x0800aa55
 800aa1c:	0800aa55 	.word	0x0800aa55
 800aa20:	0800aa4d 	.word	0x0800aa4d
 800aa24:	2301      	movs	r3, #1
 800aa26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa2a:	e0c3      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800aa2c:	2304      	movs	r3, #4
 800aa2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa32:	e0bf      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800aa34:	2308      	movs	r3, #8
 800aa36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa3a:	e0bb      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800aa3c:	2310      	movs	r3, #16
 800aa3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa42:	e0b7      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800aa44:	2320      	movs	r3, #32
 800aa46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa4a:	e0b3      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800aa4c:	2340      	movs	r3, #64	; 0x40
 800aa4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa52:	e0af      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800aa54:	2380      	movs	r3, #128	; 0x80
 800aa56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa5a:	bf00      	nop
 800aa5c:	e0aa      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	4a79      	ldr	r2, [pc, #484]	; (800ac48 <UART_SetConfig+0x664>)
 800aa64:	4293      	cmp	r3, r2
 800aa66:	d132      	bne.n	800aace <UART_SetConfig+0x4ea>
 800aa68:	4b76      	ldr	r3, [pc, #472]	; (800ac44 <UART_SetConfig+0x660>)
 800aa6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa6c:	f003 0307 	and.w	r3, r3, #7
 800aa70:	2b05      	cmp	r3, #5
 800aa72:	d827      	bhi.n	800aac4 <UART_SetConfig+0x4e0>
 800aa74:	a201      	add	r2, pc, #4	; (adr r2, 800aa7c <UART_SetConfig+0x498>)
 800aa76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa7a:	bf00      	nop
 800aa7c:	0800aa95 	.word	0x0800aa95
 800aa80:	0800aa9d 	.word	0x0800aa9d
 800aa84:	0800aaa5 	.word	0x0800aaa5
 800aa88:	0800aaad 	.word	0x0800aaad
 800aa8c:	0800aab5 	.word	0x0800aab5
 800aa90:	0800aabd 	.word	0x0800aabd
 800aa94:	2300      	movs	r3, #0
 800aa96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa9a:	e08b      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800aa9c:	2304      	movs	r3, #4
 800aa9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aaa2:	e087      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800aaa4:	2308      	movs	r3, #8
 800aaa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aaaa:	e083      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800aaac:	2310      	movs	r3, #16
 800aaae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aab2:	e07f      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800aab4:	2320      	movs	r3, #32
 800aab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aaba:	e07b      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800aabc:	2340      	movs	r3, #64	; 0x40
 800aabe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aac2:	e077      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800aac4:	2380      	movs	r3, #128	; 0x80
 800aac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aaca:	bf00      	nop
 800aacc:	e072      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	4a5e      	ldr	r2, [pc, #376]	; (800ac4c <UART_SetConfig+0x668>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d132      	bne.n	800ab3e <UART_SetConfig+0x55a>
 800aad8:	4b5a      	ldr	r3, [pc, #360]	; (800ac44 <UART_SetConfig+0x660>)
 800aada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aadc:	f003 0307 	and.w	r3, r3, #7
 800aae0:	2b05      	cmp	r3, #5
 800aae2:	d827      	bhi.n	800ab34 <UART_SetConfig+0x550>
 800aae4:	a201      	add	r2, pc, #4	; (adr r2, 800aaec <UART_SetConfig+0x508>)
 800aae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaea:	bf00      	nop
 800aaec:	0800ab05 	.word	0x0800ab05
 800aaf0:	0800ab0d 	.word	0x0800ab0d
 800aaf4:	0800ab15 	.word	0x0800ab15
 800aaf8:	0800ab1d 	.word	0x0800ab1d
 800aafc:	0800ab25 	.word	0x0800ab25
 800ab00:	0800ab2d 	.word	0x0800ab2d
 800ab04:	2300      	movs	r3, #0
 800ab06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab0a:	e053      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800ab0c:	2304      	movs	r3, #4
 800ab0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab12:	e04f      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800ab14:	2308      	movs	r3, #8
 800ab16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab1a:	e04b      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800ab1c:	2310      	movs	r3, #16
 800ab1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab22:	e047      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800ab24:	2320      	movs	r3, #32
 800ab26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab2a:	e043      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800ab2c:	2340      	movs	r3, #64	; 0x40
 800ab2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab32:	e03f      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800ab34:	2380      	movs	r3, #128	; 0x80
 800ab36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab3a:	bf00      	nop
 800ab3c:	e03a      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	4a43      	ldr	r2, [pc, #268]	; (800ac50 <UART_SetConfig+0x66c>)
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d132      	bne.n	800abae <UART_SetConfig+0x5ca>
 800ab48:	4b3e      	ldr	r3, [pc, #248]	; (800ac44 <UART_SetConfig+0x660>)
 800ab4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab4c:	f003 0307 	and.w	r3, r3, #7
 800ab50:	2b05      	cmp	r3, #5
 800ab52:	d827      	bhi.n	800aba4 <UART_SetConfig+0x5c0>
 800ab54:	a201      	add	r2, pc, #4	; (adr r2, 800ab5c <UART_SetConfig+0x578>)
 800ab56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab5a:	bf00      	nop
 800ab5c:	0800ab75 	.word	0x0800ab75
 800ab60:	0800ab7d 	.word	0x0800ab7d
 800ab64:	0800ab85 	.word	0x0800ab85
 800ab68:	0800ab8d 	.word	0x0800ab8d
 800ab6c:	0800ab95 	.word	0x0800ab95
 800ab70:	0800ab9d 	.word	0x0800ab9d
 800ab74:	2302      	movs	r3, #2
 800ab76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab7a:	e01b      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800ab7c:	2304      	movs	r3, #4
 800ab7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab82:	e017      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800ab84:	2308      	movs	r3, #8
 800ab86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab8a:	e013      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800ab8c:	2310      	movs	r3, #16
 800ab8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab92:	e00f      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800ab94:	2320      	movs	r3, #32
 800ab96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab9a:	e00b      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800ab9c:	2340      	movs	r3, #64	; 0x40
 800ab9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aba2:	e007      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800aba4:	2380      	movs	r3, #128	; 0x80
 800aba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abaa:	bf00      	nop
 800abac:	e002      	b.n	800abb4 <UART_SetConfig+0x5d0>
 800abae:	2380      	movs	r3, #128	; 0x80
 800abb0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4a25      	ldr	r2, [pc, #148]	; (800ac50 <UART_SetConfig+0x66c>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	f040 80b8 	bne.w	800ad30 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800abc0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800abc4:	2b08      	cmp	r3, #8
 800abc6:	d019      	beq.n	800abfc <UART_SetConfig+0x618>
 800abc8:	2b08      	cmp	r3, #8
 800abca:	dc04      	bgt.n	800abd6 <UART_SetConfig+0x5f2>
 800abcc:	2b02      	cmp	r3, #2
 800abce:	d009      	beq.n	800abe4 <UART_SetConfig+0x600>
 800abd0:	2b04      	cmp	r3, #4
 800abd2:	d00b      	beq.n	800abec <UART_SetConfig+0x608>
 800abd4:	e042      	b.n	800ac5c <UART_SetConfig+0x678>
 800abd6:	2b20      	cmp	r3, #32
 800abd8:	d02b      	beq.n	800ac32 <UART_SetConfig+0x64e>
 800abda:	2b40      	cmp	r3, #64	; 0x40
 800abdc:	d02c      	beq.n	800ac38 <UART_SetConfig+0x654>
 800abde:	2b10      	cmp	r3, #16
 800abe0:	d014      	beq.n	800ac0c <UART_SetConfig+0x628>
 800abe2:	e03b      	b.n	800ac5c <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800abe4:	f7fd fa80 	bl	80080e8 <HAL_RCCEx_GetD3PCLK1Freq>
 800abe8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800abea:	e03d      	b.n	800ac68 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abec:	f107 0314 	add.w	r3, r7, #20
 800abf0:	4618      	mov	r0, r3
 800abf2:	f7fd fa8f 	bl	8008114 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800abf6:	69bb      	ldr	r3, [r7, #24]
 800abf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800abfa:	e035      	b.n	800ac68 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abfc:	f107 0308 	add.w	r3, r7, #8
 800ac00:	4618      	mov	r0, r3
 800ac02:	f7fd fbd3 	bl	80083ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac0a:	e02d      	b.n	800ac68 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac0c:	4b0d      	ldr	r3, [pc, #52]	; (800ac44 <UART_SetConfig+0x660>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f003 0320 	and.w	r3, r3, #32
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d009      	beq.n	800ac2c <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ac18:	4b0a      	ldr	r3, [pc, #40]	; (800ac44 <UART_SetConfig+0x660>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	08db      	lsrs	r3, r3, #3
 800ac1e:	f003 0303 	and.w	r3, r3, #3
 800ac22:	4a0c      	ldr	r2, [pc, #48]	; (800ac54 <UART_SetConfig+0x670>)
 800ac24:	fa22 f303 	lsr.w	r3, r2, r3
 800ac28:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ac2a:	e01d      	b.n	800ac68 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800ac2c:	4b09      	ldr	r3, [pc, #36]	; (800ac54 <UART_SetConfig+0x670>)
 800ac2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac30:	e01a      	b.n	800ac68 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ac32:	4b09      	ldr	r3, [pc, #36]	; (800ac58 <UART_SetConfig+0x674>)
 800ac34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac36:	e017      	b.n	800ac68 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac3e:	e013      	b.n	800ac68 <UART_SetConfig+0x684>
 800ac40:	40011400 	.word	0x40011400
 800ac44:	58024400 	.word	0x58024400
 800ac48:	40007800 	.word	0x40007800
 800ac4c:	40007c00 	.word	0x40007c00
 800ac50:	58000c00 	.word	0x58000c00
 800ac54:	03d09000 	.word	0x03d09000
 800ac58:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ac60:	2301      	movs	r3, #1
 800ac62:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ac66:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ac68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	f000 824d 	beq.w	800b10a <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac74:	4aad      	ldr	r2, [pc, #692]	; (800af2c <UART_SetConfig+0x948>)
 800ac76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac7a:	461a      	mov	r2, r3
 800ac7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac7e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac82:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	685a      	ldr	r2, [r3, #4]
 800ac88:	4613      	mov	r3, r2
 800ac8a:	005b      	lsls	r3, r3, #1
 800ac8c:	4413      	add	r3, r2
 800ac8e:	6a3a      	ldr	r2, [r7, #32]
 800ac90:	429a      	cmp	r2, r3
 800ac92:	d305      	bcc.n	800aca0 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	685b      	ldr	r3, [r3, #4]
 800ac98:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac9a:	6a3a      	ldr	r2, [r7, #32]
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	d903      	bls.n	800aca8 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800aca0:	2301      	movs	r3, #1
 800aca2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800aca6:	e230      	b.n	800b10a <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acaa:	4618      	mov	r0, r3
 800acac:	f04f 0100 	mov.w	r1, #0
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb4:	4a9d      	ldr	r2, [pc, #628]	; (800af2c <UART_SetConfig+0x948>)
 800acb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800acba:	b29b      	uxth	r3, r3
 800acbc:	f04f 0400 	mov.w	r4, #0
 800acc0:	461a      	mov	r2, r3
 800acc2:	4623      	mov	r3, r4
 800acc4:	f7f5 fb5c 	bl	8000380 <__aeabi_uldivmod>
 800acc8:	4603      	mov	r3, r0
 800acca:	460c      	mov	r4, r1
 800accc:	4619      	mov	r1, r3
 800acce:	4622      	mov	r2, r4
 800acd0:	f04f 0300 	mov.w	r3, #0
 800acd4:	f04f 0400 	mov.w	r4, #0
 800acd8:	0214      	lsls	r4, r2, #8
 800acda:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800acde:	020b      	lsls	r3, r1, #8
 800ace0:	687a      	ldr	r2, [r7, #4]
 800ace2:	6852      	ldr	r2, [r2, #4]
 800ace4:	0852      	lsrs	r2, r2, #1
 800ace6:	4611      	mov	r1, r2
 800ace8:	f04f 0200 	mov.w	r2, #0
 800acec:	eb13 0b01 	adds.w	fp, r3, r1
 800acf0:	eb44 0c02 	adc.w	ip, r4, r2
 800acf4:	4658      	mov	r0, fp
 800acf6:	4661      	mov	r1, ip
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	685b      	ldr	r3, [r3, #4]
 800acfc:	f04f 0400 	mov.w	r4, #0
 800ad00:	461a      	mov	r2, r3
 800ad02:	4623      	mov	r3, r4
 800ad04:	f7f5 fb3c 	bl	8000380 <__aeabi_uldivmod>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	460c      	mov	r4, r1
 800ad0c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ad0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad14:	d308      	bcc.n	800ad28 <UART_SetConfig+0x744>
 800ad16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad1c:	d204      	bcs.n	800ad28 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad24:	60da      	str	r2, [r3, #12]
 800ad26:	e1f0      	b.n	800b10a <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800ad28:	2301      	movs	r3, #1
 800ad2a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ad2e:	e1ec      	b.n	800b10a <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	69db      	ldr	r3, [r3, #28]
 800ad34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad38:	f040 8100 	bne.w	800af3c <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800ad3c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ad40:	2b40      	cmp	r3, #64	; 0x40
 800ad42:	f200 80b7 	bhi.w	800aeb4 <UART_SetConfig+0x8d0>
 800ad46:	a201      	add	r2, pc, #4	; (adr r2, 800ad4c <UART_SetConfig+0x768>)
 800ad48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad4c:	0800ae51 	.word	0x0800ae51
 800ad50:	0800ae59 	.word	0x0800ae59
 800ad54:	0800aeb5 	.word	0x0800aeb5
 800ad58:	0800aeb5 	.word	0x0800aeb5
 800ad5c:	0800ae61 	.word	0x0800ae61
 800ad60:	0800aeb5 	.word	0x0800aeb5
 800ad64:	0800aeb5 	.word	0x0800aeb5
 800ad68:	0800aeb5 	.word	0x0800aeb5
 800ad6c:	0800ae71 	.word	0x0800ae71
 800ad70:	0800aeb5 	.word	0x0800aeb5
 800ad74:	0800aeb5 	.word	0x0800aeb5
 800ad78:	0800aeb5 	.word	0x0800aeb5
 800ad7c:	0800aeb5 	.word	0x0800aeb5
 800ad80:	0800aeb5 	.word	0x0800aeb5
 800ad84:	0800aeb5 	.word	0x0800aeb5
 800ad88:	0800aeb5 	.word	0x0800aeb5
 800ad8c:	0800ae81 	.word	0x0800ae81
 800ad90:	0800aeb5 	.word	0x0800aeb5
 800ad94:	0800aeb5 	.word	0x0800aeb5
 800ad98:	0800aeb5 	.word	0x0800aeb5
 800ad9c:	0800aeb5 	.word	0x0800aeb5
 800ada0:	0800aeb5 	.word	0x0800aeb5
 800ada4:	0800aeb5 	.word	0x0800aeb5
 800ada8:	0800aeb5 	.word	0x0800aeb5
 800adac:	0800aeb5 	.word	0x0800aeb5
 800adb0:	0800aeb5 	.word	0x0800aeb5
 800adb4:	0800aeb5 	.word	0x0800aeb5
 800adb8:	0800aeb5 	.word	0x0800aeb5
 800adbc:	0800aeb5 	.word	0x0800aeb5
 800adc0:	0800aeb5 	.word	0x0800aeb5
 800adc4:	0800aeb5 	.word	0x0800aeb5
 800adc8:	0800aeb5 	.word	0x0800aeb5
 800adcc:	0800aea7 	.word	0x0800aea7
 800add0:	0800aeb5 	.word	0x0800aeb5
 800add4:	0800aeb5 	.word	0x0800aeb5
 800add8:	0800aeb5 	.word	0x0800aeb5
 800addc:	0800aeb5 	.word	0x0800aeb5
 800ade0:	0800aeb5 	.word	0x0800aeb5
 800ade4:	0800aeb5 	.word	0x0800aeb5
 800ade8:	0800aeb5 	.word	0x0800aeb5
 800adec:	0800aeb5 	.word	0x0800aeb5
 800adf0:	0800aeb5 	.word	0x0800aeb5
 800adf4:	0800aeb5 	.word	0x0800aeb5
 800adf8:	0800aeb5 	.word	0x0800aeb5
 800adfc:	0800aeb5 	.word	0x0800aeb5
 800ae00:	0800aeb5 	.word	0x0800aeb5
 800ae04:	0800aeb5 	.word	0x0800aeb5
 800ae08:	0800aeb5 	.word	0x0800aeb5
 800ae0c:	0800aeb5 	.word	0x0800aeb5
 800ae10:	0800aeb5 	.word	0x0800aeb5
 800ae14:	0800aeb5 	.word	0x0800aeb5
 800ae18:	0800aeb5 	.word	0x0800aeb5
 800ae1c:	0800aeb5 	.word	0x0800aeb5
 800ae20:	0800aeb5 	.word	0x0800aeb5
 800ae24:	0800aeb5 	.word	0x0800aeb5
 800ae28:	0800aeb5 	.word	0x0800aeb5
 800ae2c:	0800aeb5 	.word	0x0800aeb5
 800ae30:	0800aeb5 	.word	0x0800aeb5
 800ae34:	0800aeb5 	.word	0x0800aeb5
 800ae38:	0800aeb5 	.word	0x0800aeb5
 800ae3c:	0800aeb5 	.word	0x0800aeb5
 800ae40:	0800aeb5 	.word	0x0800aeb5
 800ae44:	0800aeb5 	.word	0x0800aeb5
 800ae48:	0800aeb5 	.word	0x0800aeb5
 800ae4c:	0800aead 	.word	0x0800aead
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae50:	f7fb ffb8 	bl	8006dc4 <HAL_RCC_GetPCLK1Freq>
 800ae54:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ae56:	e033      	b.n	800aec0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae58:	f7fb ffca 	bl	8006df0 <HAL_RCC_GetPCLK2Freq>
 800ae5c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ae5e:	e02f      	b.n	800aec0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae60:	f107 0314 	add.w	r3, r7, #20
 800ae64:	4618      	mov	r0, r3
 800ae66:	f7fd f955 	bl	8008114 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ae6a:	69bb      	ldr	r3, [r7, #24]
 800ae6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ae6e:	e027      	b.n	800aec0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae70:	f107 0308 	add.w	r3, r7, #8
 800ae74:	4618      	mov	r0, r3
 800ae76:	f7fd fa99 	bl	80083ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ae7e:	e01f      	b.n	800aec0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae80:	4b2b      	ldr	r3, [pc, #172]	; (800af30 <UART_SetConfig+0x94c>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f003 0320 	and.w	r3, r3, #32
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d009      	beq.n	800aea0 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ae8c:	4b28      	ldr	r3, [pc, #160]	; (800af30 <UART_SetConfig+0x94c>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	08db      	lsrs	r3, r3, #3
 800ae92:	f003 0303 	and.w	r3, r3, #3
 800ae96:	4a27      	ldr	r2, [pc, #156]	; (800af34 <UART_SetConfig+0x950>)
 800ae98:	fa22 f303 	lsr.w	r3, r2, r3
 800ae9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ae9e:	e00f      	b.n	800aec0 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800aea0:	4b24      	ldr	r3, [pc, #144]	; (800af34 <UART_SetConfig+0x950>)
 800aea2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aea4:	e00c      	b.n	800aec0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aea6:	4b24      	ldr	r3, [pc, #144]	; (800af38 <UART_SetConfig+0x954>)
 800aea8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aeaa:	e009      	b.n	800aec0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aeac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aeb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aeb2:	e005      	b.n	800aec0 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800aeb8:	2301      	movs	r3, #1
 800aeba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800aebe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	f000 8121 	beq.w	800b10a <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aecc:	4a17      	ldr	r2, [pc, #92]	; (800af2c <UART_SetConfig+0x948>)
 800aece:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aed2:	461a      	mov	r2, r3
 800aed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aed6:	fbb3 f3f2 	udiv	r3, r3, r2
 800aeda:	005a      	lsls	r2, r3, #1
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	085b      	lsrs	r3, r3, #1
 800aee2:	441a      	add	r2, r3
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	fbb2 f3f3 	udiv	r3, r2, r3
 800aeec:	b29b      	uxth	r3, r3
 800aeee:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aef2:	2b0f      	cmp	r3, #15
 800aef4:	d916      	bls.n	800af24 <UART_SetConfig+0x940>
 800aef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aefc:	d212      	bcs.n	800af24 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aefe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af00:	b29b      	uxth	r3, r3
 800af02:	f023 030f 	bic.w	r3, r3, #15
 800af06:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800af08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af0a:	085b      	lsrs	r3, r3, #1
 800af0c:	b29b      	uxth	r3, r3
 800af0e:	f003 0307 	and.w	r3, r3, #7
 800af12:	b29a      	uxth	r2, r3
 800af14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800af16:	4313      	orrs	r3, r2
 800af18:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800af20:	60da      	str	r2, [r3, #12]
 800af22:	e0f2      	b.n	800b10a <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800af24:	2301      	movs	r3, #1
 800af26:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800af2a:	e0ee      	b.n	800b10a <UART_SetConfig+0xb26>
 800af2c:	08012010 	.word	0x08012010
 800af30:	58024400 	.word	0x58024400
 800af34:	03d09000 	.word	0x03d09000
 800af38:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800af3c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800af40:	2b40      	cmp	r3, #64	; 0x40
 800af42:	f200 80b7 	bhi.w	800b0b4 <UART_SetConfig+0xad0>
 800af46:	a201      	add	r2, pc, #4	; (adr r2, 800af4c <UART_SetConfig+0x968>)
 800af48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af4c:	0800b051 	.word	0x0800b051
 800af50:	0800b059 	.word	0x0800b059
 800af54:	0800b0b5 	.word	0x0800b0b5
 800af58:	0800b0b5 	.word	0x0800b0b5
 800af5c:	0800b061 	.word	0x0800b061
 800af60:	0800b0b5 	.word	0x0800b0b5
 800af64:	0800b0b5 	.word	0x0800b0b5
 800af68:	0800b0b5 	.word	0x0800b0b5
 800af6c:	0800b071 	.word	0x0800b071
 800af70:	0800b0b5 	.word	0x0800b0b5
 800af74:	0800b0b5 	.word	0x0800b0b5
 800af78:	0800b0b5 	.word	0x0800b0b5
 800af7c:	0800b0b5 	.word	0x0800b0b5
 800af80:	0800b0b5 	.word	0x0800b0b5
 800af84:	0800b0b5 	.word	0x0800b0b5
 800af88:	0800b0b5 	.word	0x0800b0b5
 800af8c:	0800b081 	.word	0x0800b081
 800af90:	0800b0b5 	.word	0x0800b0b5
 800af94:	0800b0b5 	.word	0x0800b0b5
 800af98:	0800b0b5 	.word	0x0800b0b5
 800af9c:	0800b0b5 	.word	0x0800b0b5
 800afa0:	0800b0b5 	.word	0x0800b0b5
 800afa4:	0800b0b5 	.word	0x0800b0b5
 800afa8:	0800b0b5 	.word	0x0800b0b5
 800afac:	0800b0b5 	.word	0x0800b0b5
 800afb0:	0800b0b5 	.word	0x0800b0b5
 800afb4:	0800b0b5 	.word	0x0800b0b5
 800afb8:	0800b0b5 	.word	0x0800b0b5
 800afbc:	0800b0b5 	.word	0x0800b0b5
 800afc0:	0800b0b5 	.word	0x0800b0b5
 800afc4:	0800b0b5 	.word	0x0800b0b5
 800afc8:	0800b0b5 	.word	0x0800b0b5
 800afcc:	0800b0a7 	.word	0x0800b0a7
 800afd0:	0800b0b5 	.word	0x0800b0b5
 800afd4:	0800b0b5 	.word	0x0800b0b5
 800afd8:	0800b0b5 	.word	0x0800b0b5
 800afdc:	0800b0b5 	.word	0x0800b0b5
 800afe0:	0800b0b5 	.word	0x0800b0b5
 800afe4:	0800b0b5 	.word	0x0800b0b5
 800afe8:	0800b0b5 	.word	0x0800b0b5
 800afec:	0800b0b5 	.word	0x0800b0b5
 800aff0:	0800b0b5 	.word	0x0800b0b5
 800aff4:	0800b0b5 	.word	0x0800b0b5
 800aff8:	0800b0b5 	.word	0x0800b0b5
 800affc:	0800b0b5 	.word	0x0800b0b5
 800b000:	0800b0b5 	.word	0x0800b0b5
 800b004:	0800b0b5 	.word	0x0800b0b5
 800b008:	0800b0b5 	.word	0x0800b0b5
 800b00c:	0800b0b5 	.word	0x0800b0b5
 800b010:	0800b0b5 	.word	0x0800b0b5
 800b014:	0800b0b5 	.word	0x0800b0b5
 800b018:	0800b0b5 	.word	0x0800b0b5
 800b01c:	0800b0b5 	.word	0x0800b0b5
 800b020:	0800b0b5 	.word	0x0800b0b5
 800b024:	0800b0b5 	.word	0x0800b0b5
 800b028:	0800b0b5 	.word	0x0800b0b5
 800b02c:	0800b0b5 	.word	0x0800b0b5
 800b030:	0800b0b5 	.word	0x0800b0b5
 800b034:	0800b0b5 	.word	0x0800b0b5
 800b038:	0800b0b5 	.word	0x0800b0b5
 800b03c:	0800b0b5 	.word	0x0800b0b5
 800b040:	0800b0b5 	.word	0x0800b0b5
 800b044:	0800b0b5 	.word	0x0800b0b5
 800b048:	0800b0b5 	.word	0x0800b0b5
 800b04c:	0800b0ad 	.word	0x0800b0ad
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b050:	f7fb feb8 	bl	8006dc4 <HAL_RCC_GetPCLK1Freq>
 800b054:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b056:	e033      	b.n	800b0c0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b058:	f7fb feca 	bl	8006df0 <HAL_RCC_GetPCLK2Freq>
 800b05c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b05e:	e02f      	b.n	800b0c0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b060:	f107 0314 	add.w	r3, r7, #20
 800b064:	4618      	mov	r0, r3
 800b066:	f7fd f855 	bl	8008114 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b06a:	69bb      	ldr	r3, [r7, #24]
 800b06c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b06e:	e027      	b.n	800b0c0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b070:	f107 0308 	add.w	r3, r7, #8
 800b074:	4618      	mov	r0, r3
 800b076:	f7fd f999 	bl	80083ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b07e:	e01f      	b.n	800b0c0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b080:	4b2c      	ldr	r3, [pc, #176]	; (800b134 <UART_SetConfig+0xb50>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f003 0320 	and.w	r3, r3, #32
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d009      	beq.n	800b0a0 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b08c:	4b29      	ldr	r3, [pc, #164]	; (800b134 <UART_SetConfig+0xb50>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	08db      	lsrs	r3, r3, #3
 800b092:	f003 0303 	and.w	r3, r3, #3
 800b096:	4a28      	ldr	r2, [pc, #160]	; (800b138 <UART_SetConfig+0xb54>)
 800b098:	fa22 f303 	lsr.w	r3, r2, r3
 800b09c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b09e:	e00f      	b.n	800b0c0 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800b0a0:	4b25      	ldr	r3, [pc, #148]	; (800b138 <UART_SetConfig+0xb54>)
 800b0a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b0a4:	e00c      	b.n	800b0c0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b0a6:	4b25      	ldr	r3, [pc, #148]	; (800b13c <UART_SetConfig+0xb58>)
 800b0a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b0aa:	e009      	b.n	800b0c0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b0ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b0b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b0b2:	e005      	b.n	800b0c0 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b0be:	bf00      	nop
    }

    if (pclk != 0U)
 800b0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d021      	beq.n	800b10a <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ca:	4a1d      	ldr	r2, [pc, #116]	; (800b140 <UART_SetConfig+0xb5c>)
 800b0cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b0d0:	461a      	mov	r2, r3
 800b0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0d4:	fbb3 f2f2 	udiv	r2, r3, r2
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	685b      	ldr	r3, [r3, #4]
 800b0dc:	085b      	lsrs	r3, r3, #1
 800b0de:	441a      	add	r2, r3
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	685b      	ldr	r3, [r3, #4]
 800b0e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0e8:	b29b      	uxth	r3, r3
 800b0ea:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ee:	2b0f      	cmp	r3, #15
 800b0f0:	d908      	bls.n	800b104 <UART_SetConfig+0xb20>
 800b0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0f8:	d204      	bcs.n	800b104 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b100:	60da      	str	r2, [r3, #12]
 800b102:	e002      	b.n	800b10a <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800b104:	2301      	movs	r3, #1
 800b106:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2201      	movs	r2, #1
 800b10e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2201      	movs	r2, #1
 800b116:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2200      	movs	r2, #0
 800b11e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2200      	movs	r2, #0
 800b124:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800b126:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	3738      	adds	r7, #56	; 0x38
 800b12e:	46bd      	mov	sp, r7
 800b130:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800b134:	58024400 	.word	0x58024400
 800b138:	03d09000 	.word	0x03d09000
 800b13c:	003d0900 	.word	0x003d0900
 800b140:	08012010 	.word	0x08012010

0800b144 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b144:	b480      	push	{r7}
 800b146:	b083      	sub	sp, #12
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b150:	f003 0301 	and.w	r3, r3, #1
 800b154:	2b00      	cmp	r3, #0
 800b156:	d00a      	beq.n	800b16e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	430a      	orrs	r2, r1
 800b16c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b172:	f003 0302 	and.w	r3, r3, #2
 800b176:	2b00      	cmp	r3, #0
 800b178:	d00a      	beq.n	800b190 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	685b      	ldr	r3, [r3, #4]
 800b180:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	430a      	orrs	r2, r1
 800b18e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b194:	f003 0304 	and.w	r3, r3, #4
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d00a      	beq.n	800b1b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	430a      	orrs	r2, r1
 800b1b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1b6:	f003 0308 	and.w	r3, r3, #8
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d00a      	beq.n	800b1d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	685b      	ldr	r3, [r3, #4]
 800b1c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	430a      	orrs	r2, r1
 800b1d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1d8:	f003 0310 	and.w	r3, r3, #16
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d00a      	beq.n	800b1f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	689b      	ldr	r3, [r3, #8]
 800b1e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	430a      	orrs	r2, r1
 800b1f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1fa:	f003 0320 	and.w	r3, r3, #32
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d00a      	beq.n	800b218 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	689b      	ldr	r3, [r3, #8]
 800b208:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	430a      	orrs	r2, r1
 800b216:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b21c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b220:	2b00      	cmp	r3, #0
 800b222:	d01a      	beq.n	800b25a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	685b      	ldr	r3, [r3, #4]
 800b22a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	430a      	orrs	r2, r1
 800b238:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b23e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b242:	d10a      	bne.n	800b25a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	685b      	ldr	r3, [r3, #4]
 800b24a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	430a      	orrs	r2, r1
 800b258:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b25e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b262:	2b00      	cmp	r3, #0
 800b264:	d00a      	beq.n	800b27c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	685b      	ldr	r3, [r3, #4]
 800b26c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	430a      	orrs	r2, r1
 800b27a:	605a      	str	r2, [r3, #4]
  }
}
 800b27c:	bf00      	nop
 800b27e:	370c      	adds	r7, #12
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr

0800b288 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b086      	sub	sp, #24
 800b28c:	af02      	add	r7, sp, #8
 800b28e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2200      	movs	r2, #0
 800b294:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b298:	f7f6 fa96 	bl	80017c8 <HAL_GetTick>
 800b29c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f003 0308 	and.w	r3, r3, #8
 800b2a8:	2b08      	cmp	r3, #8
 800b2aa:	d10e      	bne.n	800b2ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b2ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b2b0:	9300      	str	r3, [sp, #0]
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f000 f82c 	bl	800b318 <UART_WaitOnFlagUntilTimeout>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d001      	beq.n	800b2ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b2c6:	2303      	movs	r3, #3
 800b2c8:	e022      	b.n	800b310 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f003 0304 	and.w	r3, r3, #4
 800b2d4:	2b04      	cmp	r3, #4
 800b2d6:	d10e      	bne.n	800b2f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b2d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b2dc:	9300      	str	r3, [sp, #0]
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f000 f816 	bl	800b318 <UART_WaitOnFlagUntilTimeout>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d001      	beq.n	800b2f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b2f2:	2303      	movs	r3, #3
 800b2f4:	e00c      	b.n	800b310 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2220      	movs	r2, #32
 800b2fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2220      	movs	r2, #32
 800b302:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2200      	movs	r2, #0
 800b30a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b30e:	2300      	movs	r3, #0
}
 800b310:	4618      	mov	r0, r3
 800b312:	3710      	adds	r7, #16
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}

0800b318 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b084      	sub	sp, #16
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	60f8      	str	r0, [r7, #12]
 800b320:	60b9      	str	r1, [r7, #8]
 800b322:	603b      	str	r3, [r7, #0]
 800b324:	4613      	mov	r3, r2
 800b326:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b328:	e062      	b.n	800b3f0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b32a:	69bb      	ldr	r3, [r7, #24]
 800b32c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b330:	d05e      	beq.n	800b3f0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b332:	f7f6 fa49 	bl	80017c8 <HAL_GetTick>
 800b336:	4602      	mov	r2, r0
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	1ad3      	subs	r3, r2, r3
 800b33c:	69ba      	ldr	r2, [r7, #24]
 800b33e:	429a      	cmp	r2, r3
 800b340:	d302      	bcc.n	800b348 <UART_WaitOnFlagUntilTimeout+0x30>
 800b342:	69bb      	ldr	r3, [r7, #24]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d11d      	bne.n	800b384 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	681a      	ldr	r2, [r3, #0]
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b356:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	689a      	ldr	r2, [r3, #8]
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	f022 0201 	bic.w	r2, r2, #1
 800b366:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	2220      	movs	r2, #32
 800b36c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	2220      	movs	r2, #32
 800b374:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	2200      	movs	r2, #0
 800b37c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800b380:	2303      	movs	r3, #3
 800b382:	e045      	b.n	800b410 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f003 0304 	and.w	r3, r3, #4
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d02e      	beq.n	800b3f0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	69db      	ldr	r3, [r3, #28]
 800b398:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b39c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b3a0:	d126      	bne.n	800b3f0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b3aa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	681a      	ldr	r2, [r3, #0]
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b3ba:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	689a      	ldr	r2, [r3, #8]
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f022 0201 	bic.w	r2, r2, #1
 800b3ca:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	2220      	movs	r2, #32
 800b3d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	2220      	movs	r2, #32
 800b3d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	2220      	movs	r2, #32
 800b3e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800b3ec:	2303      	movs	r3, #3
 800b3ee:	e00f      	b.n	800b410 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	69da      	ldr	r2, [r3, #28]
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	4013      	ands	r3, r2
 800b3fa:	68ba      	ldr	r2, [r7, #8]
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	bf0c      	ite	eq
 800b400:	2301      	moveq	r3, #1
 800b402:	2300      	movne	r3, #0
 800b404:	b2db      	uxtb	r3, r3
 800b406:	461a      	mov	r2, r3
 800b408:	79fb      	ldrb	r3, [r7, #7]
 800b40a:	429a      	cmp	r2, r3
 800b40c:	d08d      	beq.n	800b32a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b40e:	2300      	movs	r3, #0
}
 800b410:	4618      	mov	r0, r3
 800b412:	3710      	adds	r7, #16
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b418:	b480      	push	{r7}
 800b41a:	b085      	sub	sp, #20
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b426:	2b01      	cmp	r3, #1
 800b428:	d101      	bne.n	800b42e <HAL_UARTEx_DisableFifoMode+0x16>
 800b42a:	2302      	movs	r3, #2
 800b42c:	e027      	b.n	800b47e <HAL_UARTEx_DisableFifoMode+0x66>
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2201      	movs	r2, #1
 800b432:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2224      	movs	r2, #36	; 0x24
 800b43a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	681a      	ldr	r2, [r3, #0]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f022 0201 	bic.w	r2, r2, #1
 800b454:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b45c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2200      	movs	r2, #0
 800b462:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	68fa      	ldr	r2, [r7, #12]
 800b46a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2220      	movs	r2, #32
 800b470:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2200      	movs	r2, #0
 800b478:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b47c:	2300      	movs	r3, #0
}
 800b47e:	4618      	mov	r0, r3
 800b480:	3714      	adds	r7, #20
 800b482:	46bd      	mov	sp, r7
 800b484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b488:	4770      	bx	lr

0800b48a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b48a:	b580      	push	{r7, lr}
 800b48c:	b084      	sub	sp, #16
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
 800b492:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b49a:	2b01      	cmp	r3, #1
 800b49c:	d101      	bne.n	800b4a2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b49e:	2302      	movs	r3, #2
 800b4a0:	e02d      	b.n	800b4fe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2201      	movs	r2, #1
 800b4a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2224      	movs	r2, #36	; 0x24
 800b4ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	681a      	ldr	r2, [r3, #0]
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f022 0201 	bic.w	r2, r2, #1
 800b4c8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	689b      	ldr	r3, [r3, #8]
 800b4d0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	683a      	ldr	r2, [r7, #0]
 800b4da:	430a      	orrs	r2, r1
 800b4dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f000 f850 	bl	800b584 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	68fa      	ldr	r2, [r7, #12]
 800b4ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2220      	movs	r2, #32
 800b4f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b4fc:	2300      	movs	r3, #0
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3710      	adds	r7, #16
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}

0800b506 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b506:	b580      	push	{r7, lr}
 800b508:	b084      	sub	sp, #16
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	6078      	str	r0, [r7, #4]
 800b50e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b516:	2b01      	cmp	r3, #1
 800b518:	d101      	bne.n	800b51e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b51a:	2302      	movs	r3, #2
 800b51c:	e02d      	b.n	800b57a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2201      	movs	r2, #1
 800b522:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2224      	movs	r2, #36	; 0x24
 800b52a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f022 0201 	bic.w	r2, r2, #1
 800b544:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	689b      	ldr	r3, [r3, #8]
 800b54c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	683a      	ldr	r2, [r7, #0]
 800b556:	430a      	orrs	r2, r1
 800b558:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f000 f812 	bl	800b584 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	68fa      	ldr	r2, [r7, #12]
 800b566:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2220      	movs	r2, #32
 800b56c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2200      	movs	r2, #0
 800b574:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b578:	2300      	movs	r3, #0
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	3710      	adds	r7, #16
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}
	...

0800b584 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b584:	b480      	push	{r7}
 800b586:	b089      	sub	sp, #36	; 0x24
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800b58c:	4a2f      	ldr	r2, [pc, #188]	; (800b64c <UARTEx_SetNbDataToProcess+0xc8>)
 800b58e:	f107 0314 	add.w	r3, r7, #20
 800b592:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b596:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800b59a:	4a2d      	ldr	r2, [pc, #180]	; (800b650 <UARTEx_SetNbDataToProcess+0xcc>)
 800b59c:	f107 030c 	add.w	r3, r7, #12
 800b5a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b5a4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d108      	bne.n	800b5c2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2201      	movs	r2, #1
 800b5b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b5c0:	e03d      	b.n	800b63e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b5c2:	2310      	movs	r3, #16
 800b5c4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b5c6:	2310      	movs	r3, #16
 800b5c8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	689b      	ldr	r3, [r3, #8]
 800b5d0:	0e5b      	lsrs	r3, r3, #25
 800b5d2:	b2db      	uxtb	r3, r3
 800b5d4:	f003 0307 	and.w	r3, r3, #7
 800b5d8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	689b      	ldr	r3, [r3, #8]
 800b5e0:	0f5b      	lsrs	r3, r3, #29
 800b5e2:	b2db      	uxtb	r3, r3
 800b5e4:	f003 0307 	and.w	r3, r3, #7
 800b5e8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800b5ea:	7fbb      	ldrb	r3, [r7, #30]
 800b5ec:	7f3a      	ldrb	r2, [r7, #28]
 800b5ee:	f107 0120 	add.w	r1, r7, #32
 800b5f2:	440a      	add	r2, r1
 800b5f4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800b5f8:	fb02 f303 	mul.w	r3, r2, r3
 800b5fc:	7f3a      	ldrb	r2, [r7, #28]
 800b5fe:	f107 0120 	add.w	r1, r7, #32
 800b602:	440a      	add	r2, r1
 800b604:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800b608:	fb93 f3f2 	sdiv	r3, r3, r2
 800b60c:	b29a      	uxth	r2, r3
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800b614:	7ffb      	ldrb	r3, [r7, #31]
 800b616:	7f7a      	ldrb	r2, [r7, #29]
 800b618:	f107 0120 	add.w	r1, r7, #32
 800b61c:	440a      	add	r2, r1
 800b61e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800b622:	fb02 f303 	mul.w	r3, r2, r3
 800b626:	7f7a      	ldrb	r2, [r7, #29]
 800b628:	f107 0120 	add.w	r1, r7, #32
 800b62c:	440a      	add	r2, r1
 800b62e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800b632:	fb93 f3f2 	sdiv	r3, r3, r2
 800b636:	b29a      	uxth	r2, r3
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b63e:	bf00      	nop
 800b640:	3724      	adds	r7, #36	; 0x24
 800b642:	46bd      	mov	sp, r7
 800b644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b648:	4770      	bx	lr
 800b64a:	bf00      	nop
 800b64c:	08011f94 	.word	0x08011f94
 800b650:	08011f9c 	.word	0x08011f9c

0800b654 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b654:	b084      	sub	sp, #16
 800b656:	b480      	push	{r7}
 800b658:	b085      	sub	sp, #20
 800b65a:	af00      	add	r7, sp, #0
 800b65c:	6078      	str	r0, [r7, #4]
 800b65e:	f107 001c 	add.w	r0, r7, #28
 800b662:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b666:	2300      	movs	r3, #0
 800b668:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b66a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800b66c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b66e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800b672:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b674:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800b676:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800b67a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b67c:	68fa      	ldr	r2, [r7, #12]
 800b67e:	4313      	orrs	r3, r2
 800b680:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	685a      	ldr	r2, [r3, #4]
 800b686:	4b07      	ldr	r3, [pc, #28]	; (800b6a4 <SDMMC_Init+0x50>)
 800b688:	4013      	ands	r3, r2
 800b68a:	68fa      	ldr	r2, [r7, #12]
 800b68c:	431a      	orrs	r2, r3
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b692:	2300      	movs	r3, #0
}
 800b694:	4618      	mov	r0, r3
 800b696:	3714      	adds	r7, #20
 800b698:	46bd      	mov	sp, r7
 800b69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69e:	b004      	add	sp, #16
 800b6a0:	4770      	bx	lr
 800b6a2:	bf00      	nop
 800b6a4:	ffc02c00 	.word	0xffc02c00

0800b6a8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b083      	sub	sp, #12
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	370c      	adds	r7, #12
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c0:	4770      	bx	lr

0800b6c2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b6c2:	b480      	push	{r7}
 800b6c4:	b083      	sub	sp, #12
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	6078      	str	r0, [r7, #4]
 800b6ca:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	681a      	ldr	r2, [r3, #0]
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b6d6:	2300      	movs	r3, #0
}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	370c      	adds	r7, #12
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e2:	4770      	bx	lr

0800b6e4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b083      	sub	sp, #12
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f043 0203 	orr.w	r2, r3, #3
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b6f8:	2300      	movs	r3, #0
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	370c      	adds	r7, #12
 800b6fe:	46bd      	mov	sp, r7
 800b700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b704:	4770      	bx	lr

0800b706 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b706:	b480      	push	{r7}
 800b708:	b083      	sub	sp, #12
 800b70a:	af00      	add	r7, sp, #0
 800b70c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f003 0303 	and.w	r3, r3, #3
}
 800b716:	4618      	mov	r0, r3
 800b718:	370c      	adds	r7, #12
 800b71a:	46bd      	mov	sp, r7
 800b71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b720:	4770      	bx	lr
	...

0800b724 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b724:	b480      	push	{r7}
 800b726:	b085      	sub	sp, #20
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b72e:	2300      	movs	r3, #0
 800b730:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	681a      	ldr	r2, [r3, #0]
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b742:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b748:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b74e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b750:	68fa      	ldr	r2, [r7, #12]
 800b752:	4313      	orrs	r3, r2
 800b754:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	68da      	ldr	r2, [r3, #12]
 800b75a:	4b06      	ldr	r3, [pc, #24]	; (800b774 <SDMMC_SendCommand+0x50>)
 800b75c:	4013      	ands	r3, r2
 800b75e:	68fa      	ldr	r2, [r7, #12]
 800b760:	431a      	orrs	r2, r3
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b766:	2300      	movs	r3, #0
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3714      	adds	r7, #20
 800b76c:	46bd      	mov	sp, r7
 800b76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b772:	4770      	bx	lr
 800b774:	fffee0c0 	.word	0xfffee0c0

0800b778 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b778:	b480      	push	{r7}
 800b77a:	b083      	sub	sp, #12
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	691b      	ldr	r3, [r3, #16]
 800b784:	b2db      	uxtb	r3, r3
}
 800b786:	4618      	mov	r0, r3
 800b788:	370c      	adds	r7, #12
 800b78a:	46bd      	mov	sp, r7
 800b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b790:	4770      	bx	lr

0800b792 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b792:	b480      	push	{r7}
 800b794:	b085      	sub	sp, #20
 800b796:	af00      	add	r7, sp, #0
 800b798:	6078      	str	r0, [r7, #4]
 800b79a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	3314      	adds	r3, #20
 800b7a0:	461a      	mov	r2, r3
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	4413      	add	r3, r2
 800b7a6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	681b      	ldr	r3, [r3, #0]
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3714      	adds	r7, #20
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b6:	4770      	bx	lr

0800b7b8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b085      	sub	sp, #20
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	681a      	ldr	r2, [r3, #0]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	685a      	ldr	r2, [r3, #4]
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b7de:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b7e4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b7ea:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b7ec:	68fa      	ldr	r2, [r7, #12]
 800b7ee:	4313      	orrs	r3, r2
 800b7f0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	431a      	orrs	r2, r3
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b802:	2300      	movs	r3, #0

}
 800b804:	4618      	mov	r0, r3
 800b806:	3714      	adds	r7, #20
 800b808:	46bd      	mov	sp, r7
 800b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80e:	4770      	bx	lr

0800b810 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b088      	sub	sp, #32
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b81e:	2310      	movs	r3, #16
 800b820:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b822:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b826:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b828:	2300      	movs	r3, #0
 800b82a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b82c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b830:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b832:	f107 0308 	add.w	r3, r7, #8
 800b836:	4619      	mov	r1, r3
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f7ff ff73 	bl	800b724 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b83e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b842:	2110      	movs	r1, #16
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f000 faaf 	bl	800bda8 <SDMMC_GetCmdResp1>
 800b84a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b84c:	69fb      	ldr	r3, [r7, #28]
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3720      	adds	r7, #32
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}

0800b856 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b856:	b580      	push	{r7, lr}
 800b858:	b088      	sub	sp, #32
 800b85a:	af00      	add	r7, sp, #0
 800b85c:	6078      	str	r0, [r7, #4]
 800b85e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b864:	2311      	movs	r3, #17
 800b866:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b868:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b86c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b86e:	2300      	movs	r3, #0
 800b870:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b872:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b876:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b878:	f107 0308 	add.w	r3, r7, #8
 800b87c:	4619      	mov	r1, r3
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f7ff ff50 	bl	800b724 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b884:	f241 3288 	movw	r2, #5000	; 0x1388
 800b888:	2111      	movs	r1, #17
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f000 fa8c 	bl	800bda8 <SDMMC_GetCmdResp1>
 800b890:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b892:	69fb      	ldr	r3, [r7, #28]
}
 800b894:	4618      	mov	r0, r3
 800b896:	3720      	adds	r7, #32
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b088      	sub	sp, #32
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b8aa:	2312      	movs	r3, #18
 800b8ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b8ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b8b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b8bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8be:	f107 0308 	add.w	r3, r7, #8
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f7ff ff2d 	bl	800b724 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b8ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8ce:	2112      	movs	r1, #18
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f000 fa69 	bl	800bda8 <SDMMC_GetCmdResp1>
 800b8d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8d8:	69fb      	ldr	r3, [r7, #28]
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3720      	adds	r7, #32
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}

0800b8e2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b8e2:	b580      	push	{r7, lr}
 800b8e4:	b088      	sub	sp, #32
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	6078      	str	r0, [r7, #4]
 800b8ea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b8f0:	2318      	movs	r3, #24
 800b8f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b8f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b8f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b902:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b904:	f107 0308 	add.w	r3, r7, #8
 800b908:	4619      	mov	r1, r3
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f7ff ff0a 	bl	800b724 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b910:	f241 3288 	movw	r2, #5000	; 0x1388
 800b914:	2118      	movs	r1, #24
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f000 fa46 	bl	800bda8 <SDMMC_GetCmdResp1>
 800b91c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b91e:	69fb      	ldr	r3, [r7, #28]
}
 800b920:	4618      	mov	r0, r3
 800b922:	3720      	adds	r7, #32
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}

0800b928 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b088      	sub	sp, #32
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b936:	2319      	movs	r3, #25
 800b938:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b93a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b93e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b940:	2300      	movs	r3, #0
 800b942:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b948:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b94a:	f107 0308 	add.w	r3, r7, #8
 800b94e:	4619      	mov	r1, r3
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f7ff fee7 	bl	800b724 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b956:	f241 3288 	movw	r2, #5000	; 0x1388
 800b95a:	2119      	movs	r1, #25
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f000 fa23 	bl	800bda8 <SDMMC_GetCmdResp1>
 800b962:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b964:	69fb      	ldr	r3, [r7, #28]
}
 800b966:	4618      	mov	r0, r3
 800b968:	3720      	adds	r7, #32
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}
	...

0800b970 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b088      	sub	sp, #32
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b978:	2300      	movs	r3, #0
 800b97a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b97c:	230c      	movs	r3, #12
 800b97e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b980:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b984:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b986:	2300      	movs	r3, #0
 800b988:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b98a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b98e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	68db      	ldr	r3, [r3, #12]
 800b994:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	68db      	ldr	r3, [r3, #12]
 800b9a0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b9a8:	f107 0308 	add.w	r3, r7, #8
 800b9ac:	4619      	mov	r1, r3
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f7ff feb8 	bl	800b724 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b9b4:	4a0b      	ldr	r2, [pc, #44]	; (800b9e4 <SDMMC_CmdStopTransfer+0x74>)
 800b9b6:	210c      	movs	r1, #12
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f000 f9f5 	bl	800bda8 <SDMMC_GetCmdResp1>
 800b9be:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	68db      	ldr	r3, [r3, #12]
 800b9c4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800b9cc:	69fb      	ldr	r3, [r7, #28]
 800b9ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b9d2:	d101      	bne.n	800b9d8 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800b9d8:	69fb      	ldr	r3, [r7, #28]
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3720      	adds	r7, #32
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}
 800b9e2:	bf00      	nop
 800b9e4:	05f5e100 	.word	0x05f5e100

0800b9e8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b08a      	sub	sp, #40	; 0x28
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	60f8      	str	r0, [r7, #12]
 800b9f0:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b9f8:	2307      	movs	r3, #7
 800b9fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b9fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba00:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba02:	2300      	movs	r3, #0
 800ba04:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba0a:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba0c:	f107 0310 	add.w	r3, r7, #16
 800ba10:	4619      	mov	r1, r3
 800ba12:	68f8      	ldr	r0, [r7, #12]
 800ba14:	f7ff fe86 	bl	800b724 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ba18:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba1c:	2107      	movs	r1, #7
 800ba1e:	68f8      	ldr	r0, [r7, #12]
 800ba20:	f000 f9c2 	bl	800bda8 <SDMMC_GetCmdResp1>
 800ba24:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ba26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3728      	adds	r7, #40	; 0x28
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}

0800ba30 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b088      	sub	sp, #32
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ba40:	2300      	movs	r3, #0
 800ba42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba44:	2300      	movs	r3, #0
 800ba46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba4c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba4e:	f107 0308 	add.w	r3, r7, #8
 800ba52:	4619      	mov	r1, r3
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f7ff fe65 	bl	800b724 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f000 f976 	bl	800bd4c <SDMMC_GetCmdError>
 800ba60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba62:	69fb      	ldr	r3, [r7, #28]
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	3720      	adds	r7, #32
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}

0800ba6c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b088      	sub	sp, #32
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ba74:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ba78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ba7a:	2308      	movs	r3, #8
 800ba7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba84:	2300      	movs	r3, #0
 800ba86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba8c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba8e:	f107 0308 	add.w	r3, r7, #8
 800ba92:	4619      	mov	r1, r3
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f7ff fe45 	bl	800b724 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f000 fb78 	bl	800c190 <SDMMC_GetCmdResp7>
 800baa0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800baa2:	69fb      	ldr	r3, [r7, #28]
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	3720      	adds	r7, #32
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}

0800baac <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b088      	sub	sp, #32
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
 800bab4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800baba:	2337      	movs	r3, #55	; 0x37
 800babc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800babe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bac2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bac4:	2300      	movs	r3, #0
 800bac6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bac8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bacc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bace:	f107 0308 	add.w	r3, r7, #8
 800bad2:	4619      	mov	r1, r3
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f7ff fe25 	bl	800b724 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800bada:	f241 3288 	movw	r2, #5000	; 0x1388
 800bade:	2137      	movs	r1, #55	; 0x37
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f000 f961 	bl	800bda8 <SDMMC_GetCmdResp1>
 800bae6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bae8:	69fb      	ldr	r3, [r7, #28]
}
 800baea:	4618      	mov	r0, r3
 800baec:	3720      	adds	r7, #32
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}

0800baf2 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800baf2:	b580      	push	{r7, lr}
 800baf4:	b088      	sub	sp, #32
 800baf6:	af00      	add	r7, sp, #0
 800baf8:	6078      	str	r0, [r7, #4]
 800bafa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800bb00:	2329      	movs	r3, #41	; 0x29
 800bb02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb04:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb12:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb14:	f107 0308 	add.w	r3, r7, #8
 800bb18:	4619      	mov	r1, r3
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f7ff fe02 	bl	800b724 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	f000 fa7d 	bl	800c020 <SDMMC_GetCmdResp3>
 800bb26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb28:	69fb      	ldr	r3, [r7, #28]
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3720      	adds	r7, #32
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}

0800bb32 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800bb32:	b580      	push	{r7, lr}
 800bb34:	b088      	sub	sp, #32
 800bb36:	af00      	add	r7, sp, #0
 800bb38:	6078      	str	r0, [r7, #4]
 800bb3a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800bb40:	2306      	movs	r3, #6
 800bb42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb44:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb52:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb54:	f107 0308 	add.w	r3, r7, #8
 800bb58:	4619      	mov	r1, r3
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f7ff fde2 	bl	800b724 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800bb60:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb64:	2106      	movs	r1, #6
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f000 f91e 	bl	800bda8 <SDMMC_GetCmdResp1>
 800bb6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb6e:	69fb      	ldr	r3, [r7, #28]
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	3720      	adds	r7, #32
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}

0800bb78 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b088      	sub	sp, #32
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800bb80:	2300      	movs	r3, #0
 800bb82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800bb84:	2333      	movs	r3, #51	; 0x33
 800bb86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb88:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb98:	f107 0308 	add.w	r3, r7, #8
 800bb9c:	4619      	mov	r1, r3
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f7ff fdc0 	bl	800b724 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800bba4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bba8:	2133      	movs	r1, #51	; 0x33
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f000 f8fc 	bl	800bda8 <SDMMC_GetCmdResp1>
 800bbb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bbb2:	69fb      	ldr	r3, [r7, #28]
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3720      	adds	r7, #32
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}

0800bbbc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b088      	sub	sp, #32
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800bbc8:	2302      	movs	r3, #2
 800bbca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800bbcc:	f44f 7340 	mov.w	r3, #768	; 0x300
 800bbd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bbd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bbda:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bbdc:	f107 0308 	add.w	r3, r7, #8
 800bbe0:	4619      	mov	r1, r3
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f7ff fd9e 	bl	800b724 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f000 f9cf 	bl	800bf8c <SDMMC_GetCmdResp2>
 800bbee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bbf0:	69fb      	ldr	r3, [r7, #28]
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3720      	adds	r7, #32
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}

0800bbfa <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bbfa:	b580      	push	{r7, lr}
 800bbfc:	b088      	sub	sp, #32
 800bbfe:	af00      	add	r7, sp, #0
 800bc00:	6078      	str	r0, [r7, #4]
 800bc02:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800bc08:	2309      	movs	r3, #9
 800bc0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800bc0c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800bc10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc12:	2300      	movs	r3, #0
 800bc14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc1c:	f107 0308 	add.w	r3, r7, #8
 800bc20:	4619      	mov	r1, r3
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f7ff fd7e 	bl	800b724 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	f000 f9af 	bl	800bf8c <SDMMC_GetCmdResp2>
 800bc2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc30:	69fb      	ldr	r3, [r7, #28]
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3720      	adds	r7, #32
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}

0800bc3a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800bc3a:	b580      	push	{r7, lr}
 800bc3c:	b088      	sub	sp, #32
 800bc3e:	af00      	add	r7, sp, #0
 800bc40:	6078      	str	r0, [r7, #4]
 800bc42:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800bc44:	2300      	movs	r3, #0
 800bc46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800bc48:	2303      	movs	r3, #3
 800bc4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bc50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc52:	2300      	movs	r3, #0
 800bc54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc5c:	f107 0308 	add.w	r3, r7, #8
 800bc60:	4619      	mov	r1, r3
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f7ff fd5e 	bl	800b724 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800bc68:	683a      	ldr	r2, [r7, #0]
 800bc6a:	2103      	movs	r1, #3
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f000 fa17 	bl	800c0a0 <SDMMC_GetCmdResp6>
 800bc72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc74:	69fb      	ldr	r3, [r7, #28]
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	3720      	adds	r7, #32
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}

0800bc7e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bc7e:	b580      	push	{r7, lr}
 800bc80:	b088      	sub	sp, #32
 800bc82:	af00      	add	r7, sp, #0
 800bc84:	6078      	str	r0, [r7, #4]
 800bc86:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800bc8c:	230d      	movs	r3, #13
 800bc8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc90:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bc94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc96:	2300      	movs	r3, #0
 800bc98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bca0:	f107 0308 	add.w	r3, r7, #8
 800bca4:	4619      	mov	r1, r3
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f7ff fd3c 	bl	800b724 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800bcac:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcb0:	210d      	movs	r1, #13
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f000 f878 	bl	800bda8 <SDMMC_GetCmdResp1>
 800bcb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bcba:	69fb      	ldr	r3, [r7, #28]
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3720      	adds	r7, #32
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b088      	sub	sp, #32
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800bccc:	2300      	movs	r3, #0
 800bcce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800bcd0:	230d      	movs	r3, #13
 800bcd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bcd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bcd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bcde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bce2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bce4:	f107 0308 	add.w	r3, r7, #8
 800bce8:	4619      	mov	r1, r3
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f7ff fd1a 	bl	800b724 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800bcf0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcf4:	210d      	movs	r1, #13
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f000 f856 	bl	800bda8 <SDMMC_GetCmdResp1>
 800bcfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bcfe:	69fb      	ldr	r3, [r7, #28]
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3720      	adds	r7, #32
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}

0800bd08 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b088      	sub	sp, #32
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800bd10:	2300      	movs	r3, #0
 800bd12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800bd14:	230b      	movs	r3, #11
 800bd16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd18:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd28:	f107 0308 	add.w	r3, r7, #8
 800bd2c:	4619      	mov	r1, r3
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f7ff fcf8 	bl	800b724 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800bd34:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd38:	210b      	movs	r1, #11
 800bd3a:	6878      	ldr	r0, [r7, #4]
 800bd3c:	f000 f834 	bl	800bda8 <SDMMC_GetCmdResp1>
 800bd40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd42:	69fb      	ldr	r3, [r7, #28]
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	3720      	adds	r7, #32
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}

0800bd4c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b085      	sub	sp, #20
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bd54:	4b11      	ldr	r3, [pc, #68]	; (800bd9c <SDMMC_GetCmdError+0x50>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	4a11      	ldr	r2, [pc, #68]	; (800bda0 <SDMMC_GetCmdError+0x54>)
 800bd5a:	fba2 2303 	umull	r2, r3, r2, r3
 800bd5e:	0a5b      	lsrs	r3, r3, #9
 800bd60:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd64:	fb02 f303 	mul.w	r3, r2, r3
 800bd68:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	1e5a      	subs	r2, r3, #1
 800bd6e:	60fa      	str	r2, [r7, #12]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d102      	bne.n	800bd7a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd78:	e009      	b.n	800bd8e <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d0f1      	beq.n	800bd6a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	4a06      	ldr	r2, [pc, #24]	; (800bda4 <SDMMC_GetCmdError+0x58>)
 800bd8a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800bd8c:	2300      	movs	r3, #0
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3714      	adds	r7, #20
 800bd92:	46bd      	mov	sp, r7
 800bd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd98:	4770      	bx	lr
 800bd9a:	bf00      	nop
 800bd9c:	24000000 	.word	0x24000000
 800bda0:	10624dd3 	.word	0x10624dd3
 800bda4:	002000c5 	.word	0x002000c5

0800bda8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b088      	sub	sp, #32
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	60f8      	str	r0, [r7, #12]
 800bdb0:	460b      	mov	r3, r1
 800bdb2:	607a      	str	r2, [r7, #4]
 800bdb4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bdb6:	4b70      	ldr	r3, [pc, #448]	; (800bf78 <SDMMC_GetCmdResp1+0x1d0>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	4a70      	ldr	r2, [pc, #448]	; (800bf7c <SDMMC_GetCmdResp1+0x1d4>)
 800bdbc:	fba2 2303 	umull	r2, r3, r2, r3
 800bdc0:	0a5a      	lsrs	r2, r3, #9
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	fb02 f303 	mul.w	r3, r2, r3
 800bdc8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800bdca:	69fb      	ldr	r3, [r7, #28]
 800bdcc:	1e5a      	subs	r2, r3, #1
 800bdce:	61fa      	str	r2, [r7, #28]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d102      	bne.n	800bdda <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bdd4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bdd8:	e0c9      	b.n	800bf6e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdde:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800bde0:	69ba      	ldr	r2, [r7, #24]
 800bde2:	4b67      	ldr	r3, [pc, #412]	; (800bf80 <SDMMC_GetCmdResp1+0x1d8>)
 800bde4:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d0ef      	beq.n	800bdca <SDMMC_GetCmdResp1+0x22>
 800bdea:	69bb      	ldr	r3, [r7, #24]
 800bdec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d1ea      	bne.n	800bdca <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdf8:	f003 0304 	and.w	r3, r3, #4
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d004      	beq.n	800be0a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	2204      	movs	r2, #4
 800be04:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800be06:	2304      	movs	r3, #4
 800be08:	e0b1      	b.n	800bf6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be0e:	f003 0301 	and.w	r3, r3, #1
 800be12:	2b00      	cmp	r3, #0
 800be14:	d004      	beq.n	800be20 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	2201      	movs	r2, #1
 800be1a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800be1c:	2301      	movs	r3, #1
 800be1e:	e0a6      	b.n	800bf6e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	4a58      	ldr	r2, [pc, #352]	; (800bf84 <SDMMC_GetCmdResp1+0x1dc>)
 800be24:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800be26:	68f8      	ldr	r0, [r7, #12]
 800be28:	f7ff fca6 	bl	800b778 <SDMMC_GetCommandResponse>
 800be2c:	4603      	mov	r3, r0
 800be2e:	461a      	mov	r2, r3
 800be30:	7afb      	ldrb	r3, [r7, #11]
 800be32:	4293      	cmp	r3, r2
 800be34:	d001      	beq.n	800be3a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800be36:	2301      	movs	r3, #1
 800be38:	e099      	b.n	800bf6e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800be3a:	2100      	movs	r1, #0
 800be3c:	68f8      	ldr	r0, [r7, #12]
 800be3e:	f7ff fca8 	bl	800b792 <SDMMC_GetResponse>
 800be42:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800be44:	697a      	ldr	r2, [r7, #20]
 800be46:	4b50      	ldr	r3, [pc, #320]	; (800bf88 <SDMMC_GetCmdResp1+0x1e0>)
 800be48:	4013      	ands	r3, r2
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d101      	bne.n	800be52 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800be4e:	2300      	movs	r3, #0
 800be50:	e08d      	b.n	800bf6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	2b00      	cmp	r3, #0
 800be56:	da02      	bge.n	800be5e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800be58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800be5c:	e087      	b.n	800bf6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800be64:	2b00      	cmp	r3, #0
 800be66:	d001      	beq.n	800be6c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800be68:	2340      	movs	r3, #64	; 0x40
 800be6a:	e080      	b.n	800bf6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800be6c:	697b      	ldr	r3, [r7, #20]
 800be6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be72:	2b00      	cmp	r3, #0
 800be74:	d001      	beq.n	800be7a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800be76:	2380      	movs	r3, #128	; 0x80
 800be78:	e079      	b.n	800bf6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be80:	2b00      	cmp	r3, #0
 800be82:	d002      	beq.n	800be8a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800be84:	f44f 7380 	mov.w	r3, #256	; 0x100
 800be88:	e071      	b.n	800bf6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be90:	2b00      	cmp	r3, #0
 800be92:	d002      	beq.n	800be9a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800be94:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be98:	e069      	b.n	800bf6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800be9a:	697b      	ldr	r3, [r7, #20]
 800be9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d002      	beq.n	800beaa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bea4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bea8:	e061      	b.n	800bf6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d002      	beq.n	800beba <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800beb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800beb8:	e059      	b.n	800bf6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800beba:	697b      	ldr	r3, [r7, #20]
 800bebc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d002      	beq.n	800beca <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bec4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bec8:	e051      	b.n	800bf6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d002      	beq.n	800beda <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bed4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bed8:	e049      	b.n	800bf6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800beda:	697b      	ldr	r3, [r7, #20]
 800bedc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d002      	beq.n	800beea <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bee4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bee8:	e041      	b.n	800bf6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800beea:	697b      	ldr	r3, [r7, #20]
 800beec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d002      	beq.n	800befa <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800bef4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bef8:	e039      	b.n	800bf6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800befa:	697b      	ldr	r3, [r7, #20]
 800befc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d002      	beq.n	800bf0a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bf04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bf08:	e031      	b.n	800bf6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bf0a:	697b      	ldr	r3, [r7, #20]
 800bf0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d002      	beq.n	800bf1a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bf14:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bf18:	e029      	b.n	800bf6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bf1a:	697b      	ldr	r3, [r7, #20]
 800bf1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d002      	beq.n	800bf2a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bf24:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bf28:	e021      	b.n	800bf6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bf2a:	697b      	ldr	r3, [r7, #20]
 800bf2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d002      	beq.n	800bf3a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bf34:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bf38:	e019      	b.n	800bf6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bf3a:	697b      	ldr	r3, [r7, #20]
 800bf3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d002      	beq.n	800bf4a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bf44:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bf48:	e011      	b.n	800bf6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bf4a:	697b      	ldr	r3, [r7, #20]
 800bf4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d002      	beq.n	800bf5a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800bf54:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bf58:	e009      	b.n	800bf6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	f003 0308 	and.w	r3, r3, #8
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d002      	beq.n	800bf6a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bf64:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800bf68:	e001      	b.n	800bf6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bf6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	3720      	adds	r7, #32
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}
 800bf76:	bf00      	nop
 800bf78:	24000000 	.word	0x24000000
 800bf7c:	10624dd3 	.word	0x10624dd3
 800bf80:	00200045 	.word	0x00200045
 800bf84:	002000c5 	.word	0x002000c5
 800bf88:	fdffe008 	.word	0xfdffe008

0800bf8c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b085      	sub	sp, #20
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bf94:	4b1f      	ldr	r3, [pc, #124]	; (800c014 <SDMMC_GetCmdResp2+0x88>)
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	4a1f      	ldr	r2, [pc, #124]	; (800c018 <SDMMC_GetCmdResp2+0x8c>)
 800bf9a:	fba2 2303 	umull	r2, r3, r2, r3
 800bf9e:	0a5b      	lsrs	r3, r3, #9
 800bfa0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfa4:	fb02 f303 	mul.w	r3, r2, r3
 800bfa8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	1e5a      	subs	r2, r3, #1
 800bfae:	60fa      	str	r2, [r7, #12]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d102      	bne.n	800bfba <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bfb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bfb8:	e026      	b.n	800c008 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfbe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d0ef      	beq.n	800bfaa <SDMMC_GetCmdResp2+0x1e>
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d1ea      	bne.n	800bfaa <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfd8:	f003 0304 	and.w	r3, r3, #4
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d004      	beq.n	800bfea <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2204      	movs	r2, #4
 800bfe4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bfe6:	2304      	movs	r3, #4
 800bfe8:	e00e      	b.n	800c008 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfee:	f003 0301 	and.w	r3, r3, #1
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d004      	beq.n	800c000 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2201      	movs	r2, #1
 800bffa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bffc:	2301      	movs	r3, #1
 800bffe:	e003      	b.n	800c008 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	4a06      	ldr	r2, [pc, #24]	; (800c01c <SDMMC_GetCmdResp2+0x90>)
 800c004:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c006:	2300      	movs	r3, #0
}
 800c008:	4618      	mov	r0, r3
 800c00a:	3714      	adds	r7, #20
 800c00c:	46bd      	mov	sp, r7
 800c00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c012:	4770      	bx	lr
 800c014:	24000000 	.word	0x24000000
 800c018:	10624dd3 	.word	0x10624dd3
 800c01c:	002000c5 	.word	0x002000c5

0800c020 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c020:	b480      	push	{r7}
 800c022:	b085      	sub	sp, #20
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c028:	4b1a      	ldr	r3, [pc, #104]	; (800c094 <SDMMC_GetCmdResp3+0x74>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	4a1a      	ldr	r2, [pc, #104]	; (800c098 <SDMMC_GetCmdResp3+0x78>)
 800c02e:	fba2 2303 	umull	r2, r3, r2, r3
 800c032:	0a5b      	lsrs	r3, r3, #9
 800c034:	f241 3288 	movw	r2, #5000	; 0x1388
 800c038:	fb02 f303 	mul.w	r3, r2, r3
 800c03c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	1e5a      	subs	r2, r3, #1
 800c042:	60fa      	str	r2, [r7, #12]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d102      	bne.n	800c04e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c048:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c04c:	e01b      	b.n	800c086 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c052:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d0ef      	beq.n	800c03e <SDMMC_GetCmdResp3+0x1e>
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c064:	2b00      	cmp	r3, #0
 800c066:	d1ea      	bne.n	800c03e <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c06c:	f003 0304 	and.w	r3, r3, #4
 800c070:	2b00      	cmp	r3, #0
 800c072:	d004      	beq.n	800c07e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2204      	movs	r2, #4
 800c078:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c07a:	2304      	movs	r3, #4
 800c07c:	e003      	b.n	800c086 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	4a06      	ldr	r2, [pc, #24]	; (800c09c <SDMMC_GetCmdResp3+0x7c>)
 800c082:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c084:	2300      	movs	r3, #0
}
 800c086:	4618      	mov	r0, r3
 800c088:	3714      	adds	r7, #20
 800c08a:	46bd      	mov	sp, r7
 800c08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c090:	4770      	bx	lr
 800c092:	bf00      	nop
 800c094:	24000000 	.word	0x24000000
 800c098:	10624dd3 	.word	0x10624dd3
 800c09c:	002000c5 	.word	0x002000c5

0800c0a0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b088      	sub	sp, #32
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	60f8      	str	r0, [r7, #12]
 800c0a8:	460b      	mov	r3, r1
 800c0aa:	607a      	str	r2, [r7, #4]
 800c0ac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c0ae:	4b35      	ldr	r3, [pc, #212]	; (800c184 <SDMMC_GetCmdResp6+0xe4>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	4a35      	ldr	r2, [pc, #212]	; (800c188 <SDMMC_GetCmdResp6+0xe8>)
 800c0b4:	fba2 2303 	umull	r2, r3, r2, r3
 800c0b8:	0a5b      	lsrs	r3, r3, #9
 800c0ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0be:	fb02 f303 	mul.w	r3, r2, r3
 800c0c2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c0c4:	69fb      	ldr	r3, [r7, #28]
 800c0c6:	1e5a      	subs	r2, r3, #1
 800c0c8:	61fa      	str	r2, [r7, #28]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d102      	bne.n	800c0d4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c0ce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c0d2:	e052      	b.n	800c17a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0d8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c0da:	69bb      	ldr	r3, [r7, #24]
 800c0dc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d0ef      	beq.n	800c0c4 <SDMMC_GetCmdResp6+0x24>
 800c0e4:	69bb      	ldr	r3, [r7, #24]
 800c0e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d1ea      	bne.n	800c0c4 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0f2:	f003 0304 	and.w	r3, r3, #4
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d004      	beq.n	800c104 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	2204      	movs	r2, #4
 800c0fe:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c100:	2304      	movs	r3, #4
 800c102:	e03a      	b.n	800c17a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c108:	f003 0301 	and.w	r3, r3, #1
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d004      	beq.n	800c11a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	2201      	movs	r2, #1
 800c114:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c116:	2301      	movs	r3, #1
 800c118:	e02f      	b.n	800c17a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c11a:	68f8      	ldr	r0, [r7, #12]
 800c11c:	f7ff fb2c 	bl	800b778 <SDMMC_GetCommandResponse>
 800c120:	4603      	mov	r3, r0
 800c122:	461a      	mov	r2, r3
 800c124:	7afb      	ldrb	r3, [r7, #11]
 800c126:	4293      	cmp	r3, r2
 800c128:	d001      	beq.n	800c12e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c12a:	2301      	movs	r3, #1
 800c12c:	e025      	b.n	800c17a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	4a16      	ldr	r2, [pc, #88]	; (800c18c <SDMMC_GetCmdResp6+0xec>)
 800c132:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c134:	2100      	movs	r1, #0
 800c136:	68f8      	ldr	r0, [r7, #12]
 800c138:	f7ff fb2b 	bl	800b792 <SDMMC_GetResponse>
 800c13c:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c13e:	697b      	ldr	r3, [r7, #20]
 800c140:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c144:	2b00      	cmp	r3, #0
 800c146:	d106      	bne.n	800c156 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c148:	697b      	ldr	r3, [r7, #20]
 800c14a:	0c1b      	lsrs	r3, r3, #16
 800c14c:	b29a      	uxth	r2, r3
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800c152:	2300      	movs	r3, #0
 800c154:	e011      	b.n	800c17a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d002      	beq.n	800c166 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c160:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c164:	e009      	b.n	800c17a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d002      	beq.n	800c176 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c170:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c174:	e001      	b.n	800c17a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c176:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	3720      	adds	r7, #32
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}
 800c182:	bf00      	nop
 800c184:	24000000 	.word	0x24000000
 800c188:	10624dd3 	.word	0x10624dd3
 800c18c:	002000c5 	.word	0x002000c5

0800c190 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c190:	b480      	push	{r7}
 800c192:	b085      	sub	sp, #20
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c198:	4b22      	ldr	r3, [pc, #136]	; (800c224 <SDMMC_GetCmdResp7+0x94>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	4a22      	ldr	r2, [pc, #136]	; (800c228 <SDMMC_GetCmdResp7+0x98>)
 800c19e:	fba2 2303 	umull	r2, r3, r2, r3
 800c1a2:	0a5b      	lsrs	r3, r3, #9
 800c1a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1a8:	fb02 f303 	mul.w	r3, r2, r3
 800c1ac:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	1e5a      	subs	r2, r3, #1
 800c1b2:	60fa      	str	r2, [r7, #12]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d102      	bne.n	800c1be <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c1b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c1bc:	e02c      	b.n	800c218 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1c2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d0ef      	beq.n	800c1ae <SDMMC_GetCmdResp7+0x1e>
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d1ea      	bne.n	800c1ae <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1dc:	f003 0304 	and.w	r3, r3, #4
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d004      	beq.n	800c1ee <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2204      	movs	r2, #4
 800c1e8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c1ea:	2304      	movs	r3, #4
 800c1ec:	e014      	b.n	800c218 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1f2:	f003 0301 	and.w	r3, r3, #1
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d004      	beq.n	800c204 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2201      	movs	r2, #1
 800c1fe:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c200:	2301      	movs	r3, #1
 800c202:	e009      	b.n	800c218 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d002      	beq.n	800c216 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2240      	movs	r2, #64	; 0x40
 800c214:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c216:	2300      	movs	r3, #0

}
 800c218:	4618      	mov	r0, r3
 800c21a:	3714      	adds	r7, #20
 800c21c:	46bd      	mov	sp, r7
 800c21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c222:	4770      	bx	lr
 800c224:	24000000 	.word	0x24000000
 800c228:	10624dd3 	.word	0x10624dd3

0800c22c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c22c:	b084      	sub	sp, #16
 800c22e:	b580      	push	{r7, lr}
 800c230:	b084      	sub	sp, #16
 800c232:	af00      	add	r7, sp, #0
 800c234:	6078      	str	r0, [r7, #4]
 800c236:	f107 001c 	add.w	r0, r7, #28
 800c23a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c240:	2b01      	cmp	r3, #1
 800c242:	d120      	bne.n	800c286 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c248:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	68da      	ldr	r2, [r3, #12]
 800c254:	4b25      	ldr	r3, [pc, #148]	; (800c2ec <USB_CoreInit+0xc0>)
 800c256:	4013      	ands	r3, r2
 800c258:	687a      	ldr	r2, [r7, #4]
 800c25a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	68db      	ldr	r3, [r3, #12]
 800c260:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c26a:	2b01      	cmp	r3, #1
 800c26c:	d105      	bne.n	800c27a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	68db      	ldr	r3, [r3, #12]
 800c272:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f001 fabe 	bl	800d7fc <USB_CoreReset>
 800c280:	4603      	mov	r3, r0
 800c282:	73fb      	strb	r3, [r7, #15]
 800c284:	e01a      	b.n	800c2bc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	68db      	ldr	r3, [r3, #12]
 800c28a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	f001 fab2 	bl	800d7fc <USB_CoreReset>
 800c298:	4603      	mov	r3, r0
 800c29a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c29c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d106      	bne.n	800c2b0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	639a      	str	r2, [r3, #56]	; 0x38
 800c2ae:	e005      	b.n	800c2bc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2be:	2b01      	cmp	r3, #1
 800c2c0:	d10b      	bne.n	800c2da <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	689b      	ldr	r3, [r3, #8]
 800c2c6:	f043 0206 	orr.w	r2, r3, #6
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	689b      	ldr	r3, [r3, #8]
 800c2d2:	f043 0220 	orr.w	r2, r3, #32
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c2da:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3710      	adds	r7, #16
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c2e6:	b004      	add	sp, #16
 800c2e8:	4770      	bx	lr
 800c2ea:	bf00      	nop
 800c2ec:	ffbdffbf 	.word	0xffbdffbf

0800c2f0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	b087      	sub	sp, #28
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	60f8      	str	r0, [r7, #12]
 800c2f8:	60b9      	str	r1, [r7, #8]
 800c2fa:	4613      	mov	r3, r2
 800c2fc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c2fe:	79fb      	ldrb	r3, [r7, #7]
 800c300:	2b02      	cmp	r3, #2
 800c302:	d165      	bne.n	800c3d0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	4a41      	ldr	r2, [pc, #260]	; (800c40c <USB_SetTurnaroundTime+0x11c>)
 800c308:	4293      	cmp	r3, r2
 800c30a:	d906      	bls.n	800c31a <USB_SetTurnaroundTime+0x2a>
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	4a40      	ldr	r2, [pc, #256]	; (800c410 <USB_SetTurnaroundTime+0x120>)
 800c310:	4293      	cmp	r3, r2
 800c312:	d802      	bhi.n	800c31a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c314:	230f      	movs	r3, #15
 800c316:	617b      	str	r3, [r7, #20]
 800c318:	e062      	b.n	800c3e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	4a3c      	ldr	r2, [pc, #240]	; (800c410 <USB_SetTurnaroundTime+0x120>)
 800c31e:	4293      	cmp	r3, r2
 800c320:	d906      	bls.n	800c330 <USB_SetTurnaroundTime+0x40>
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	4a3b      	ldr	r2, [pc, #236]	; (800c414 <USB_SetTurnaroundTime+0x124>)
 800c326:	4293      	cmp	r3, r2
 800c328:	d802      	bhi.n	800c330 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c32a:	230e      	movs	r3, #14
 800c32c:	617b      	str	r3, [r7, #20]
 800c32e:	e057      	b.n	800c3e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	4a38      	ldr	r2, [pc, #224]	; (800c414 <USB_SetTurnaroundTime+0x124>)
 800c334:	4293      	cmp	r3, r2
 800c336:	d906      	bls.n	800c346 <USB_SetTurnaroundTime+0x56>
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	4a37      	ldr	r2, [pc, #220]	; (800c418 <USB_SetTurnaroundTime+0x128>)
 800c33c:	4293      	cmp	r3, r2
 800c33e:	d802      	bhi.n	800c346 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c340:	230d      	movs	r3, #13
 800c342:	617b      	str	r3, [r7, #20]
 800c344:	e04c      	b.n	800c3e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c346:	68bb      	ldr	r3, [r7, #8]
 800c348:	4a33      	ldr	r2, [pc, #204]	; (800c418 <USB_SetTurnaroundTime+0x128>)
 800c34a:	4293      	cmp	r3, r2
 800c34c:	d906      	bls.n	800c35c <USB_SetTurnaroundTime+0x6c>
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	4a32      	ldr	r2, [pc, #200]	; (800c41c <USB_SetTurnaroundTime+0x12c>)
 800c352:	4293      	cmp	r3, r2
 800c354:	d802      	bhi.n	800c35c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c356:	230c      	movs	r3, #12
 800c358:	617b      	str	r3, [r7, #20]
 800c35a:	e041      	b.n	800c3e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	4a2f      	ldr	r2, [pc, #188]	; (800c41c <USB_SetTurnaroundTime+0x12c>)
 800c360:	4293      	cmp	r3, r2
 800c362:	d906      	bls.n	800c372 <USB_SetTurnaroundTime+0x82>
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	4a2e      	ldr	r2, [pc, #184]	; (800c420 <USB_SetTurnaroundTime+0x130>)
 800c368:	4293      	cmp	r3, r2
 800c36a:	d802      	bhi.n	800c372 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c36c:	230b      	movs	r3, #11
 800c36e:	617b      	str	r3, [r7, #20]
 800c370:	e036      	b.n	800c3e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	4a2a      	ldr	r2, [pc, #168]	; (800c420 <USB_SetTurnaroundTime+0x130>)
 800c376:	4293      	cmp	r3, r2
 800c378:	d906      	bls.n	800c388 <USB_SetTurnaroundTime+0x98>
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	4a29      	ldr	r2, [pc, #164]	; (800c424 <USB_SetTurnaroundTime+0x134>)
 800c37e:	4293      	cmp	r3, r2
 800c380:	d802      	bhi.n	800c388 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c382:	230a      	movs	r3, #10
 800c384:	617b      	str	r3, [r7, #20]
 800c386:	e02b      	b.n	800c3e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	4a26      	ldr	r2, [pc, #152]	; (800c424 <USB_SetTurnaroundTime+0x134>)
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d906      	bls.n	800c39e <USB_SetTurnaroundTime+0xae>
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	4a25      	ldr	r2, [pc, #148]	; (800c428 <USB_SetTurnaroundTime+0x138>)
 800c394:	4293      	cmp	r3, r2
 800c396:	d802      	bhi.n	800c39e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c398:	2309      	movs	r3, #9
 800c39a:	617b      	str	r3, [r7, #20]
 800c39c:	e020      	b.n	800c3e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	4a21      	ldr	r2, [pc, #132]	; (800c428 <USB_SetTurnaroundTime+0x138>)
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	d906      	bls.n	800c3b4 <USB_SetTurnaroundTime+0xc4>
 800c3a6:	68bb      	ldr	r3, [r7, #8]
 800c3a8:	4a20      	ldr	r2, [pc, #128]	; (800c42c <USB_SetTurnaroundTime+0x13c>)
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	d802      	bhi.n	800c3b4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c3ae:	2308      	movs	r3, #8
 800c3b0:	617b      	str	r3, [r7, #20]
 800c3b2:	e015      	b.n	800c3e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	4a1d      	ldr	r2, [pc, #116]	; (800c42c <USB_SetTurnaroundTime+0x13c>)
 800c3b8:	4293      	cmp	r3, r2
 800c3ba:	d906      	bls.n	800c3ca <USB_SetTurnaroundTime+0xda>
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	4a1c      	ldr	r2, [pc, #112]	; (800c430 <USB_SetTurnaroundTime+0x140>)
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	d802      	bhi.n	800c3ca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c3c4:	2307      	movs	r3, #7
 800c3c6:	617b      	str	r3, [r7, #20]
 800c3c8:	e00a      	b.n	800c3e0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c3ca:	2306      	movs	r3, #6
 800c3cc:	617b      	str	r3, [r7, #20]
 800c3ce:	e007      	b.n	800c3e0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c3d0:	79fb      	ldrb	r3, [r7, #7]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d102      	bne.n	800c3dc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c3d6:	2309      	movs	r3, #9
 800c3d8:	617b      	str	r3, [r7, #20]
 800c3da:	e001      	b.n	800c3e0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c3dc:	2309      	movs	r3, #9
 800c3de:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	68db      	ldr	r3, [r3, #12]
 800c3e4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	68da      	ldr	r2, [r3, #12]
 800c3f0:	697b      	ldr	r3, [r7, #20]
 800c3f2:	029b      	lsls	r3, r3, #10
 800c3f4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800c3f8:	431a      	orrs	r2, r3
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c3fe:	2300      	movs	r3, #0
}
 800c400:	4618      	mov	r0, r3
 800c402:	371c      	adds	r7, #28
 800c404:	46bd      	mov	sp, r7
 800c406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40a:	4770      	bx	lr
 800c40c:	00d8acbf 	.word	0x00d8acbf
 800c410:	00e4e1bf 	.word	0x00e4e1bf
 800c414:	00f423ff 	.word	0x00f423ff
 800c418:	0106737f 	.word	0x0106737f
 800c41c:	011a499f 	.word	0x011a499f
 800c420:	01312cff 	.word	0x01312cff
 800c424:	014ca43f 	.word	0x014ca43f
 800c428:	016e35ff 	.word	0x016e35ff
 800c42c:	01a6ab1f 	.word	0x01a6ab1f
 800c430:	01e847ff 	.word	0x01e847ff

0800c434 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c434:	b480      	push	{r7}
 800c436:	b083      	sub	sp, #12
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	689b      	ldr	r3, [r3, #8]
 800c440:	f043 0201 	orr.w	r2, r3, #1
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c448:	2300      	movs	r3, #0
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	370c      	adds	r7, #12
 800c44e:	46bd      	mov	sp, r7
 800c450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c454:	4770      	bx	lr

0800c456 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c456:	b480      	push	{r7}
 800c458:	b083      	sub	sp, #12
 800c45a:	af00      	add	r7, sp, #0
 800c45c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	689b      	ldr	r3, [r3, #8]
 800c462:	f023 0201 	bic.w	r2, r3, #1
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c46a:	2300      	movs	r3, #0
}
 800c46c:	4618      	mov	r0, r3
 800c46e:	370c      	adds	r7, #12
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	4770      	bx	lr

0800c478 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b082      	sub	sp, #8
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
 800c480:	460b      	mov	r3, r1
 800c482:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	68db      	ldr	r3, [r3, #12]
 800c488:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c490:	78fb      	ldrb	r3, [r7, #3]
 800c492:	2b01      	cmp	r3, #1
 800c494:	d106      	bne.n	800c4a4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	68db      	ldr	r3, [r3, #12]
 800c49a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	60da      	str	r2, [r3, #12]
 800c4a2:	e00b      	b.n	800c4bc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c4a4:	78fb      	ldrb	r3, [r7, #3]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d106      	bne.n	800c4b8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	68db      	ldr	r3, [r3, #12]
 800c4ae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	60da      	str	r2, [r3, #12]
 800c4b6:	e001      	b.n	800c4bc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c4b8:	2301      	movs	r3, #1
 800c4ba:	e003      	b.n	800c4c4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c4bc:	2032      	movs	r0, #50	; 0x32
 800c4be:	f7f5 f98f 	bl	80017e0 <HAL_Delay>

  return HAL_OK;
 800c4c2:	2300      	movs	r3, #0
}
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	3708      	adds	r7, #8
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}

0800c4cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c4cc:	b084      	sub	sp, #16
 800c4ce:	b580      	push	{r7, lr}
 800c4d0:	b086      	sub	sp, #24
 800c4d2:	af00      	add	r7, sp, #0
 800c4d4:	6078      	str	r0, [r7, #4]
 800c4d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c4da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c4de:	2300      	movs	r3, #0
 800c4e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	613b      	str	r3, [r7, #16]
 800c4ea:	e009      	b.n	800c500 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c4ec:	687a      	ldr	r2, [r7, #4]
 800c4ee:	693b      	ldr	r3, [r7, #16]
 800c4f0:	3340      	adds	r3, #64	; 0x40
 800c4f2:	009b      	lsls	r3, r3, #2
 800c4f4:	4413      	add	r3, r2
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c4fa:	693b      	ldr	r3, [r7, #16]
 800c4fc:	3301      	adds	r3, #1
 800c4fe:	613b      	str	r3, [r7, #16]
 800c500:	693b      	ldr	r3, [r7, #16]
 800c502:	2b0e      	cmp	r3, #14
 800c504:	d9f2      	bls.n	800c4ec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c506:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d11c      	bne.n	800c546 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c512:	685b      	ldr	r3, [r3, #4]
 800c514:	68fa      	ldr	r2, [r7, #12]
 800c516:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c51a:	f043 0302 	orr.w	r3, r3, #2
 800c51e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c524:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	601a      	str	r2, [r3, #0]
 800c544:	e005      	b.n	800c552 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c54a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c558:	461a      	mov	r2, r3
 800c55a:	2300      	movs	r3, #0
 800c55c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c564:	4619      	mov	r1, r3
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c56c:	461a      	mov	r2, r3
 800c56e:	680b      	ldr	r3, [r1, #0]
 800c570:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c574:	2b01      	cmp	r3, #1
 800c576:	d10c      	bne.n	800c592 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d104      	bne.n	800c588 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c57e:	2100      	movs	r1, #0
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f000 f949 	bl	800c818 <USB_SetDevSpeed>
 800c586:	e008      	b.n	800c59a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c588:	2101      	movs	r1, #1
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f000 f944 	bl	800c818 <USB_SetDevSpeed>
 800c590:	e003      	b.n	800c59a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c592:	2103      	movs	r1, #3
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f000 f93f 	bl	800c818 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c59a:	2110      	movs	r1, #16
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f000 f8f3 	bl	800c788 <USB_FlushTxFifo>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d001      	beq.n	800c5ac <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c5ac:	6878      	ldr	r0, [r7, #4]
 800c5ae:	f000 f911 	bl	800c7d4 <USB_FlushRxFifo>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d001      	beq.n	800c5bc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c5b8:	2301      	movs	r3, #1
 800c5ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5c2:	461a      	mov	r2, r3
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5ce:	461a      	mov	r2, r3
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5da:	461a      	mov	r2, r3
 800c5dc:	2300      	movs	r3, #0
 800c5de:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	613b      	str	r3, [r7, #16]
 800c5e4:	e043      	b.n	800c66e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c5e6:	693b      	ldr	r3, [r7, #16]
 800c5e8:	015a      	lsls	r2, r3, #5
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	4413      	add	r3, r2
 800c5ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c5f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c5fc:	d118      	bne.n	800c630 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c5fe:	693b      	ldr	r3, [r7, #16]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d10a      	bne.n	800c61a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c604:	693b      	ldr	r3, [r7, #16]
 800c606:	015a      	lsls	r2, r3, #5
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	4413      	add	r3, r2
 800c60c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c610:	461a      	mov	r2, r3
 800c612:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c616:	6013      	str	r3, [r2, #0]
 800c618:	e013      	b.n	800c642 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	015a      	lsls	r2, r3, #5
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	4413      	add	r3, r2
 800c622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c626:	461a      	mov	r2, r3
 800c628:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c62c:	6013      	str	r3, [r2, #0]
 800c62e:	e008      	b.n	800c642 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c630:	693b      	ldr	r3, [r7, #16]
 800c632:	015a      	lsls	r2, r3, #5
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	4413      	add	r3, r2
 800c638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c63c:	461a      	mov	r2, r3
 800c63e:	2300      	movs	r3, #0
 800c640:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c642:	693b      	ldr	r3, [r7, #16]
 800c644:	015a      	lsls	r2, r3, #5
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	4413      	add	r3, r2
 800c64a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c64e:	461a      	mov	r2, r3
 800c650:	2300      	movs	r3, #0
 800c652:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	015a      	lsls	r2, r3, #5
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	4413      	add	r3, r2
 800c65c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c660:	461a      	mov	r2, r3
 800c662:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c666:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c668:	693b      	ldr	r3, [r7, #16]
 800c66a:	3301      	adds	r3, #1
 800c66c:	613b      	str	r3, [r7, #16]
 800c66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c670:	693a      	ldr	r2, [r7, #16]
 800c672:	429a      	cmp	r2, r3
 800c674:	d3b7      	bcc.n	800c5e6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c676:	2300      	movs	r3, #0
 800c678:	613b      	str	r3, [r7, #16]
 800c67a:	e043      	b.n	800c704 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	015a      	lsls	r2, r3, #5
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	4413      	add	r3, r2
 800c684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c68e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c692:	d118      	bne.n	800c6c6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d10a      	bne.n	800c6b0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c69a:	693b      	ldr	r3, [r7, #16]
 800c69c:	015a      	lsls	r2, r3, #5
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	4413      	add	r3, r2
 800c6a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6a6:	461a      	mov	r2, r3
 800c6a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c6ac:	6013      	str	r3, [r2, #0]
 800c6ae:	e013      	b.n	800c6d8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c6b0:	693b      	ldr	r3, [r7, #16]
 800c6b2:	015a      	lsls	r2, r3, #5
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	4413      	add	r3, r2
 800c6b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6bc:	461a      	mov	r2, r3
 800c6be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c6c2:	6013      	str	r3, [r2, #0]
 800c6c4:	e008      	b.n	800c6d8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c6c6:	693b      	ldr	r3, [r7, #16]
 800c6c8:	015a      	lsls	r2, r3, #5
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	4413      	add	r3, r2
 800c6ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6d2:	461a      	mov	r2, r3
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c6d8:	693b      	ldr	r3, [r7, #16]
 800c6da:	015a      	lsls	r2, r3, #5
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	4413      	add	r3, r2
 800c6e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6e4:	461a      	mov	r2, r3
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c6ea:	693b      	ldr	r3, [r7, #16]
 800c6ec:	015a      	lsls	r2, r3, #5
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	4413      	add	r3, r2
 800c6f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6f6:	461a      	mov	r2, r3
 800c6f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c6fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c6fe:	693b      	ldr	r3, [r7, #16]
 800c700:	3301      	adds	r3, #1
 800c702:	613b      	str	r3, [r7, #16]
 800c704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c706:	693a      	ldr	r2, [r7, #16]
 800c708:	429a      	cmp	r2, r3
 800c70a:	d3b7      	bcc.n	800c67c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c712:	691b      	ldr	r3, [r3, #16]
 800c714:	68fa      	ldr	r2, [r7, #12]
 800c716:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c71a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c71e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2200      	movs	r2, #0
 800c724:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c72c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c730:	2b00      	cmp	r3, #0
 800c732:	d105      	bne.n	800c740 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	699b      	ldr	r3, [r3, #24]
 800c738:	f043 0210 	orr.w	r2, r3, #16
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	699a      	ldr	r2, [r3, #24]
 800c744:	4b0e      	ldr	r3, [pc, #56]	; (800c780 <USB_DevInit+0x2b4>)
 800c746:	4313      	orrs	r3, r2
 800c748:	687a      	ldr	r2, [r7, #4]
 800c74a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c74c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d005      	beq.n	800c75e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	699b      	ldr	r3, [r3, #24]
 800c756:	f043 0208 	orr.w	r2, r3, #8
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c75e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c760:	2b01      	cmp	r3, #1
 800c762:	d105      	bne.n	800c770 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	699a      	ldr	r2, [r3, #24]
 800c768:	4b06      	ldr	r3, [pc, #24]	; (800c784 <USB_DevInit+0x2b8>)
 800c76a:	4313      	orrs	r3, r2
 800c76c:	687a      	ldr	r2, [r7, #4]
 800c76e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c770:	7dfb      	ldrb	r3, [r7, #23]
}
 800c772:	4618      	mov	r0, r3
 800c774:	3718      	adds	r7, #24
 800c776:	46bd      	mov	sp, r7
 800c778:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c77c:	b004      	add	sp, #16
 800c77e:	4770      	bx	lr
 800c780:	803c3800 	.word	0x803c3800
 800c784:	40000004 	.word	0x40000004

0800c788 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c788:	b480      	push	{r7}
 800c78a:	b085      	sub	sp, #20
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
 800c790:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c792:	2300      	movs	r3, #0
 800c794:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	019b      	lsls	r3, r3, #6
 800c79a:	f043 0220 	orr.w	r2, r3, #32
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	3301      	adds	r3, #1
 800c7a6:	60fb      	str	r3, [r7, #12]
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	4a09      	ldr	r2, [pc, #36]	; (800c7d0 <USB_FlushTxFifo+0x48>)
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	d901      	bls.n	800c7b4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c7b0:	2303      	movs	r3, #3
 800c7b2:	e006      	b.n	800c7c2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	691b      	ldr	r3, [r3, #16]
 800c7b8:	f003 0320 	and.w	r3, r3, #32
 800c7bc:	2b20      	cmp	r3, #32
 800c7be:	d0f0      	beq.n	800c7a2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c7c0:	2300      	movs	r3, #0
}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	3714      	adds	r7, #20
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7cc:	4770      	bx	lr
 800c7ce:	bf00      	nop
 800c7d0:	00030d40 	.word	0x00030d40

0800c7d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c7d4:	b480      	push	{r7}
 800c7d6:	b085      	sub	sp, #20
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c7dc:	2300      	movs	r3, #0
 800c7de:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2210      	movs	r2, #16
 800c7e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	3301      	adds	r3, #1
 800c7ea:	60fb      	str	r3, [r7, #12]
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	4a09      	ldr	r2, [pc, #36]	; (800c814 <USB_FlushRxFifo+0x40>)
 800c7f0:	4293      	cmp	r3, r2
 800c7f2:	d901      	bls.n	800c7f8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c7f4:	2303      	movs	r3, #3
 800c7f6:	e006      	b.n	800c806 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	691b      	ldr	r3, [r3, #16]
 800c7fc:	f003 0310 	and.w	r3, r3, #16
 800c800:	2b10      	cmp	r3, #16
 800c802:	d0f0      	beq.n	800c7e6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c804:	2300      	movs	r3, #0
}
 800c806:	4618      	mov	r0, r3
 800c808:	3714      	adds	r7, #20
 800c80a:	46bd      	mov	sp, r7
 800c80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c810:	4770      	bx	lr
 800c812:	bf00      	nop
 800c814:	00030d40 	.word	0x00030d40

0800c818 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c818:	b480      	push	{r7}
 800c81a:	b085      	sub	sp, #20
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
 800c820:	460b      	mov	r3, r1
 800c822:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c82e:	681a      	ldr	r2, [r3, #0]
 800c830:	78fb      	ldrb	r3, [r7, #3]
 800c832:	68f9      	ldr	r1, [r7, #12]
 800c834:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c838:	4313      	orrs	r3, r2
 800c83a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c83c:	2300      	movs	r3, #0
}
 800c83e:	4618      	mov	r0, r3
 800c840:	3714      	adds	r7, #20
 800c842:	46bd      	mov	sp, r7
 800c844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c848:	4770      	bx	lr

0800c84a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c84a:	b480      	push	{r7}
 800c84c:	b087      	sub	sp, #28
 800c84e:	af00      	add	r7, sp, #0
 800c850:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c856:	693b      	ldr	r3, [r7, #16]
 800c858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c85c:	689b      	ldr	r3, [r3, #8]
 800c85e:	f003 0306 	and.w	r3, r3, #6
 800c862:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d102      	bne.n	800c870 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c86a:	2300      	movs	r3, #0
 800c86c:	75fb      	strb	r3, [r7, #23]
 800c86e:	e00a      	b.n	800c886 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	2b02      	cmp	r3, #2
 800c874:	d002      	beq.n	800c87c <USB_GetDevSpeed+0x32>
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	2b06      	cmp	r3, #6
 800c87a:	d102      	bne.n	800c882 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c87c:	2302      	movs	r3, #2
 800c87e:	75fb      	strb	r3, [r7, #23]
 800c880:	e001      	b.n	800c886 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c882:	230f      	movs	r3, #15
 800c884:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c886:	7dfb      	ldrb	r3, [r7, #23]
}
 800c888:	4618      	mov	r0, r3
 800c88a:	371c      	adds	r7, #28
 800c88c:	46bd      	mov	sp, r7
 800c88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c892:	4770      	bx	lr

0800c894 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c894:	b480      	push	{r7}
 800c896:	b085      	sub	sp, #20
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
 800c89c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	781b      	ldrb	r3, [r3, #0]
 800c8a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	785b      	ldrb	r3, [r3, #1]
 800c8ac:	2b01      	cmp	r3, #1
 800c8ae:	d139      	bne.n	800c924 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8b6:	69da      	ldr	r2, [r3, #28]
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	781b      	ldrb	r3, [r3, #0]
 800c8bc:	f003 030f 	and.w	r3, r3, #15
 800c8c0:	2101      	movs	r1, #1
 800c8c2:	fa01 f303 	lsl.w	r3, r1, r3
 800c8c6:	b29b      	uxth	r3, r3
 800c8c8:	68f9      	ldr	r1, [r7, #12]
 800c8ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c8ce:	4313      	orrs	r3, r2
 800c8d0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c8d2:	68bb      	ldr	r3, [r7, #8]
 800c8d4:	015a      	lsls	r2, r3, #5
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	4413      	add	r3, r2
 800c8da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d153      	bne.n	800c990 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	015a      	lsls	r2, r3, #5
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	4413      	add	r3, r2
 800c8f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8f4:	681a      	ldr	r2, [r3, #0]
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	689b      	ldr	r3, [r3, #8]
 800c8fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	78db      	ldrb	r3, [r3, #3]
 800c902:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c904:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	059b      	lsls	r3, r3, #22
 800c90a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c90c:	431a      	orrs	r2, r3
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	0159      	lsls	r1, r3, #5
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	440b      	add	r3, r1
 800c916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c91a:	4619      	mov	r1, r3
 800c91c:	4b20      	ldr	r3, [pc, #128]	; (800c9a0 <USB_ActivateEndpoint+0x10c>)
 800c91e:	4313      	orrs	r3, r2
 800c920:	600b      	str	r3, [r1, #0]
 800c922:	e035      	b.n	800c990 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c92a:	69da      	ldr	r2, [r3, #28]
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	781b      	ldrb	r3, [r3, #0]
 800c930:	f003 030f 	and.w	r3, r3, #15
 800c934:	2101      	movs	r1, #1
 800c936:	fa01 f303 	lsl.w	r3, r1, r3
 800c93a:	041b      	lsls	r3, r3, #16
 800c93c:	68f9      	ldr	r1, [r7, #12]
 800c93e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c942:	4313      	orrs	r3, r2
 800c944:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c946:	68bb      	ldr	r3, [r7, #8]
 800c948:	015a      	lsls	r2, r3, #5
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	4413      	add	r3, r2
 800c94e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d119      	bne.n	800c990 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c95c:	68bb      	ldr	r3, [r7, #8]
 800c95e:	015a      	lsls	r2, r3, #5
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	4413      	add	r3, r2
 800c964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c968:	681a      	ldr	r2, [r3, #0]
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	689b      	ldr	r3, [r3, #8]
 800c96e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	78db      	ldrb	r3, [r3, #3]
 800c976:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c978:	430b      	orrs	r3, r1
 800c97a:	431a      	orrs	r2, r3
 800c97c:	68bb      	ldr	r3, [r7, #8]
 800c97e:	0159      	lsls	r1, r3, #5
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	440b      	add	r3, r1
 800c984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c988:	4619      	mov	r1, r3
 800c98a:	4b05      	ldr	r3, [pc, #20]	; (800c9a0 <USB_ActivateEndpoint+0x10c>)
 800c98c:	4313      	orrs	r3, r2
 800c98e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c990:	2300      	movs	r3, #0
}
 800c992:	4618      	mov	r0, r3
 800c994:	3714      	adds	r7, #20
 800c996:	46bd      	mov	sp, r7
 800c998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99c:	4770      	bx	lr
 800c99e:	bf00      	nop
 800c9a0:	10008000 	.word	0x10008000

0800c9a4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b085      	sub	sp, #20
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
 800c9ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	781b      	ldrb	r3, [r3, #0]
 800c9b6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	785b      	ldrb	r3, [r3, #1]
 800c9bc:	2b01      	cmp	r3, #1
 800c9be:	d161      	bne.n	800ca84 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	015a      	lsls	r2, r3, #5
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	4413      	add	r3, r2
 800c9c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c9d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c9d6:	d11f      	bne.n	800ca18 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	015a      	lsls	r2, r3, #5
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	4413      	add	r3, r2
 800c9e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	68ba      	ldr	r2, [r7, #8]
 800c9e8:	0151      	lsls	r1, r2, #5
 800c9ea:	68fa      	ldr	r2, [r7, #12]
 800c9ec:	440a      	add	r2, r1
 800c9ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c9f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c9f6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	015a      	lsls	r2, r3, #5
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	4413      	add	r3, r2
 800ca00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	68ba      	ldr	r2, [r7, #8]
 800ca08:	0151      	lsls	r1, r2, #5
 800ca0a:	68fa      	ldr	r2, [r7, #12]
 800ca0c:	440a      	add	r2, r1
 800ca0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ca16:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	781b      	ldrb	r3, [r3, #0]
 800ca24:	f003 030f 	and.w	r3, r3, #15
 800ca28:	2101      	movs	r1, #1
 800ca2a:	fa01 f303 	lsl.w	r3, r1, r3
 800ca2e:	b29b      	uxth	r3, r3
 800ca30:	43db      	mvns	r3, r3
 800ca32:	68f9      	ldr	r1, [r7, #12]
 800ca34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ca38:	4013      	ands	r3, r2
 800ca3a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca42:	69da      	ldr	r2, [r3, #28]
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	f003 030f 	and.w	r3, r3, #15
 800ca4c:	2101      	movs	r1, #1
 800ca4e:	fa01 f303 	lsl.w	r3, r1, r3
 800ca52:	b29b      	uxth	r3, r3
 800ca54:	43db      	mvns	r3, r3
 800ca56:	68f9      	ldr	r1, [r7, #12]
 800ca58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ca5c:	4013      	ands	r3, r2
 800ca5e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	015a      	lsls	r2, r3, #5
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	4413      	add	r3, r2
 800ca68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca6c:	681a      	ldr	r2, [r3, #0]
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	0159      	lsls	r1, r3, #5
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	440b      	add	r3, r1
 800ca76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca7a:	4619      	mov	r1, r3
 800ca7c:	4b35      	ldr	r3, [pc, #212]	; (800cb54 <USB_DeactivateEndpoint+0x1b0>)
 800ca7e:	4013      	ands	r3, r2
 800ca80:	600b      	str	r3, [r1, #0]
 800ca82:	e060      	b.n	800cb46 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	015a      	lsls	r2, r3, #5
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	4413      	add	r3, r2
 800ca8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca9a:	d11f      	bne.n	800cadc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	015a      	lsls	r2, r3, #5
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	4413      	add	r3, r2
 800caa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	68ba      	ldr	r2, [r7, #8]
 800caac:	0151      	lsls	r1, r2, #5
 800caae:	68fa      	ldr	r2, [r7, #12]
 800cab0:	440a      	add	r2, r1
 800cab2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cab6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800caba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	015a      	lsls	r2, r3, #5
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	4413      	add	r3, r2
 800cac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	68ba      	ldr	r2, [r7, #8]
 800cacc:	0151      	lsls	r1, r2, #5
 800cace:	68fa      	ldr	r2, [r7, #12]
 800cad0:	440a      	add	r2, r1
 800cad2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cad6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cada:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cae2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	781b      	ldrb	r3, [r3, #0]
 800cae8:	f003 030f 	and.w	r3, r3, #15
 800caec:	2101      	movs	r1, #1
 800caee:	fa01 f303 	lsl.w	r3, r1, r3
 800caf2:	041b      	lsls	r3, r3, #16
 800caf4:	43db      	mvns	r3, r3
 800caf6:	68f9      	ldr	r1, [r7, #12]
 800caf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cafc:	4013      	ands	r3, r2
 800cafe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb06:	69da      	ldr	r2, [r3, #28]
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	f003 030f 	and.w	r3, r3, #15
 800cb10:	2101      	movs	r1, #1
 800cb12:	fa01 f303 	lsl.w	r3, r1, r3
 800cb16:	041b      	lsls	r3, r3, #16
 800cb18:	43db      	mvns	r3, r3
 800cb1a:	68f9      	ldr	r1, [r7, #12]
 800cb1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cb20:	4013      	ands	r3, r2
 800cb22:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	015a      	lsls	r2, r3, #5
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	4413      	add	r3, r2
 800cb2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb30:	681a      	ldr	r2, [r3, #0]
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	0159      	lsls	r1, r3, #5
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	440b      	add	r3, r1
 800cb3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb3e:	4619      	mov	r1, r3
 800cb40:	4b05      	ldr	r3, [pc, #20]	; (800cb58 <USB_DeactivateEndpoint+0x1b4>)
 800cb42:	4013      	ands	r3, r2
 800cb44:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800cb46:	2300      	movs	r3, #0
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3714      	adds	r7, #20
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb52:	4770      	bx	lr
 800cb54:	ec337800 	.word	0xec337800
 800cb58:	eff37800 	.word	0xeff37800

0800cb5c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b08a      	sub	sp, #40	; 0x28
 800cb60:	af02      	add	r7, sp, #8
 800cb62:	60f8      	str	r0, [r7, #12]
 800cb64:	60b9      	str	r1, [r7, #8]
 800cb66:	4613      	mov	r3, r2
 800cb68:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800cb6e:	68bb      	ldr	r3, [r7, #8]
 800cb70:	781b      	ldrb	r3, [r3, #0]
 800cb72:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cb74:	68bb      	ldr	r3, [r7, #8]
 800cb76:	785b      	ldrb	r3, [r3, #1]
 800cb78:	2b01      	cmp	r3, #1
 800cb7a:	f040 8163 	bne.w	800ce44 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cb7e:	68bb      	ldr	r3, [r7, #8]
 800cb80:	695b      	ldr	r3, [r3, #20]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d132      	bne.n	800cbec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cb86:	69bb      	ldr	r3, [r7, #24]
 800cb88:	015a      	lsls	r2, r3, #5
 800cb8a:	69fb      	ldr	r3, [r7, #28]
 800cb8c:	4413      	add	r3, r2
 800cb8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb92:	691a      	ldr	r2, [r3, #16]
 800cb94:	69bb      	ldr	r3, [r7, #24]
 800cb96:	0159      	lsls	r1, r3, #5
 800cb98:	69fb      	ldr	r3, [r7, #28]
 800cb9a:	440b      	add	r3, r1
 800cb9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cba0:	4619      	mov	r1, r3
 800cba2:	4ba5      	ldr	r3, [pc, #660]	; (800ce38 <USB_EPStartXfer+0x2dc>)
 800cba4:	4013      	ands	r3, r2
 800cba6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cba8:	69bb      	ldr	r3, [r7, #24]
 800cbaa:	015a      	lsls	r2, r3, #5
 800cbac:	69fb      	ldr	r3, [r7, #28]
 800cbae:	4413      	add	r3, r2
 800cbb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbb4:	691b      	ldr	r3, [r3, #16]
 800cbb6:	69ba      	ldr	r2, [r7, #24]
 800cbb8:	0151      	lsls	r1, r2, #5
 800cbba:	69fa      	ldr	r2, [r7, #28]
 800cbbc:	440a      	add	r2, r1
 800cbbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cbc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cbc6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cbc8:	69bb      	ldr	r3, [r7, #24]
 800cbca:	015a      	lsls	r2, r3, #5
 800cbcc:	69fb      	ldr	r3, [r7, #28]
 800cbce:	4413      	add	r3, r2
 800cbd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbd4:	691a      	ldr	r2, [r3, #16]
 800cbd6:	69bb      	ldr	r3, [r7, #24]
 800cbd8:	0159      	lsls	r1, r3, #5
 800cbda:	69fb      	ldr	r3, [r7, #28]
 800cbdc:	440b      	add	r3, r1
 800cbde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbe2:	4619      	mov	r1, r3
 800cbe4:	4b95      	ldr	r3, [pc, #596]	; (800ce3c <USB_EPStartXfer+0x2e0>)
 800cbe6:	4013      	ands	r3, r2
 800cbe8:	610b      	str	r3, [r1, #16]
 800cbea:	e074      	b.n	800ccd6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cbec:	69bb      	ldr	r3, [r7, #24]
 800cbee:	015a      	lsls	r2, r3, #5
 800cbf0:	69fb      	ldr	r3, [r7, #28]
 800cbf2:	4413      	add	r3, r2
 800cbf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbf8:	691a      	ldr	r2, [r3, #16]
 800cbfa:	69bb      	ldr	r3, [r7, #24]
 800cbfc:	0159      	lsls	r1, r3, #5
 800cbfe:	69fb      	ldr	r3, [r7, #28]
 800cc00:	440b      	add	r3, r1
 800cc02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc06:	4619      	mov	r1, r3
 800cc08:	4b8c      	ldr	r3, [pc, #560]	; (800ce3c <USB_EPStartXfer+0x2e0>)
 800cc0a:	4013      	ands	r3, r2
 800cc0c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cc0e:	69bb      	ldr	r3, [r7, #24]
 800cc10:	015a      	lsls	r2, r3, #5
 800cc12:	69fb      	ldr	r3, [r7, #28]
 800cc14:	4413      	add	r3, r2
 800cc16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc1a:	691a      	ldr	r2, [r3, #16]
 800cc1c:	69bb      	ldr	r3, [r7, #24]
 800cc1e:	0159      	lsls	r1, r3, #5
 800cc20:	69fb      	ldr	r3, [r7, #28]
 800cc22:	440b      	add	r3, r1
 800cc24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc28:	4619      	mov	r1, r3
 800cc2a:	4b83      	ldr	r3, [pc, #524]	; (800ce38 <USB_EPStartXfer+0x2dc>)
 800cc2c:	4013      	ands	r3, r2
 800cc2e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800cc30:	69bb      	ldr	r3, [r7, #24]
 800cc32:	015a      	lsls	r2, r3, #5
 800cc34:	69fb      	ldr	r3, [r7, #28]
 800cc36:	4413      	add	r3, r2
 800cc38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc3c:	691a      	ldr	r2, [r3, #16]
 800cc3e:	68bb      	ldr	r3, [r7, #8]
 800cc40:	6959      	ldr	r1, [r3, #20]
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	689b      	ldr	r3, [r3, #8]
 800cc46:	440b      	add	r3, r1
 800cc48:	1e59      	subs	r1, r3, #1
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	689b      	ldr	r3, [r3, #8]
 800cc4e:	fbb1 f3f3 	udiv	r3, r1, r3
 800cc52:	04d9      	lsls	r1, r3, #19
 800cc54:	4b7a      	ldr	r3, [pc, #488]	; (800ce40 <USB_EPStartXfer+0x2e4>)
 800cc56:	400b      	ands	r3, r1
 800cc58:	69b9      	ldr	r1, [r7, #24]
 800cc5a:	0148      	lsls	r0, r1, #5
 800cc5c:	69f9      	ldr	r1, [r7, #28]
 800cc5e:	4401      	add	r1, r0
 800cc60:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cc64:	4313      	orrs	r3, r2
 800cc66:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800cc68:	69bb      	ldr	r3, [r7, #24]
 800cc6a:	015a      	lsls	r2, r3, #5
 800cc6c:	69fb      	ldr	r3, [r7, #28]
 800cc6e:	4413      	add	r3, r2
 800cc70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc74:	691a      	ldr	r2, [r3, #16]
 800cc76:	68bb      	ldr	r3, [r7, #8]
 800cc78:	695b      	ldr	r3, [r3, #20]
 800cc7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cc7e:	69b9      	ldr	r1, [r7, #24]
 800cc80:	0148      	lsls	r0, r1, #5
 800cc82:	69f9      	ldr	r1, [r7, #28]
 800cc84:	4401      	add	r1, r0
 800cc86:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cc8a:	4313      	orrs	r3, r2
 800cc8c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800cc8e:	68bb      	ldr	r3, [r7, #8]
 800cc90:	78db      	ldrb	r3, [r3, #3]
 800cc92:	2b01      	cmp	r3, #1
 800cc94:	d11f      	bne.n	800ccd6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800cc96:	69bb      	ldr	r3, [r7, #24]
 800cc98:	015a      	lsls	r2, r3, #5
 800cc9a:	69fb      	ldr	r3, [r7, #28]
 800cc9c:	4413      	add	r3, r2
 800cc9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cca2:	691b      	ldr	r3, [r3, #16]
 800cca4:	69ba      	ldr	r2, [r7, #24]
 800cca6:	0151      	lsls	r1, r2, #5
 800cca8:	69fa      	ldr	r2, [r7, #28]
 800ccaa:	440a      	add	r2, r1
 800ccac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ccb0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ccb4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ccb6:	69bb      	ldr	r3, [r7, #24]
 800ccb8:	015a      	lsls	r2, r3, #5
 800ccba:	69fb      	ldr	r3, [r7, #28]
 800ccbc:	4413      	add	r3, r2
 800ccbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccc2:	691b      	ldr	r3, [r3, #16]
 800ccc4:	69ba      	ldr	r2, [r7, #24]
 800ccc6:	0151      	lsls	r1, r2, #5
 800ccc8:	69fa      	ldr	r2, [r7, #28]
 800ccca:	440a      	add	r2, r1
 800cccc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ccd0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ccd4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ccd6:	79fb      	ldrb	r3, [r7, #7]
 800ccd8:	2b01      	cmp	r3, #1
 800ccda:	d14b      	bne.n	800cd74 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ccdc:	68bb      	ldr	r3, [r7, #8]
 800ccde:	691b      	ldr	r3, [r3, #16]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d009      	beq.n	800ccf8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800cce4:	69bb      	ldr	r3, [r7, #24]
 800cce6:	015a      	lsls	r2, r3, #5
 800cce8:	69fb      	ldr	r3, [r7, #28]
 800ccea:	4413      	add	r3, r2
 800ccec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccf0:	461a      	mov	r2, r3
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	691b      	ldr	r3, [r3, #16]
 800ccf6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ccf8:	68bb      	ldr	r3, [r7, #8]
 800ccfa:	78db      	ldrb	r3, [r3, #3]
 800ccfc:	2b01      	cmp	r3, #1
 800ccfe:	d128      	bne.n	800cd52 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cd00:	69fb      	ldr	r3, [r7, #28]
 800cd02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd06:	689b      	ldr	r3, [r3, #8]
 800cd08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d110      	bne.n	800cd32 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800cd10:	69bb      	ldr	r3, [r7, #24]
 800cd12:	015a      	lsls	r2, r3, #5
 800cd14:	69fb      	ldr	r3, [r7, #28]
 800cd16:	4413      	add	r3, r2
 800cd18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	69ba      	ldr	r2, [r7, #24]
 800cd20:	0151      	lsls	r1, r2, #5
 800cd22:	69fa      	ldr	r2, [r7, #28]
 800cd24:	440a      	add	r2, r1
 800cd26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cd2e:	6013      	str	r3, [r2, #0]
 800cd30:	e00f      	b.n	800cd52 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800cd32:	69bb      	ldr	r3, [r7, #24]
 800cd34:	015a      	lsls	r2, r3, #5
 800cd36:	69fb      	ldr	r3, [r7, #28]
 800cd38:	4413      	add	r3, r2
 800cd3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	69ba      	ldr	r2, [r7, #24]
 800cd42:	0151      	lsls	r1, r2, #5
 800cd44:	69fa      	ldr	r2, [r7, #28]
 800cd46:	440a      	add	r2, r1
 800cd48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd50:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cd52:	69bb      	ldr	r3, [r7, #24]
 800cd54:	015a      	lsls	r2, r3, #5
 800cd56:	69fb      	ldr	r3, [r7, #28]
 800cd58:	4413      	add	r3, r2
 800cd5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	69ba      	ldr	r2, [r7, #24]
 800cd62:	0151      	lsls	r1, r2, #5
 800cd64:	69fa      	ldr	r2, [r7, #28]
 800cd66:	440a      	add	r2, r1
 800cd68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd6c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cd70:	6013      	str	r3, [r2, #0]
 800cd72:	e133      	b.n	800cfdc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cd74:	69bb      	ldr	r3, [r7, #24]
 800cd76:	015a      	lsls	r2, r3, #5
 800cd78:	69fb      	ldr	r3, [r7, #28]
 800cd7a:	4413      	add	r3, r2
 800cd7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	69ba      	ldr	r2, [r7, #24]
 800cd84:	0151      	lsls	r1, r2, #5
 800cd86:	69fa      	ldr	r2, [r7, #28]
 800cd88:	440a      	add	r2, r1
 800cd8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cd92:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cd94:	68bb      	ldr	r3, [r7, #8]
 800cd96:	78db      	ldrb	r3, [r3, #3]
 800cd98:	2b01      	cmp	r3, #1
 800cd9a:	d015      	beq.n	800cdc8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800cd9c:	68bb      	ldr	r3, [r7, #8]
 800cd9e:	695b      	ldr	r3, [r3, #20]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	f000 811b 	beq.w	800cfdc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800cda6:	69fb      	ldr	r3, [r7, #28]
 800cda8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cdae:	68bb      	ldr	r3, [r7, #8]
 800cdb0:	781b      	ldrb	r3, [r3, #0]
 800cdb2:	f003 030f 	and.w	r3, r3, #15
 800cdb6:	2101      	movs	r1, #1
 800cdb8:	fa01 f303 	lsl.w	r3, r1, r3
 800cdbc:	69f9      	ldr	r1, [r7, #28]
 800cdbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cdc2:	4313      	orrs	r3, r2
 800cdc4:	634b      	str	r3, [r1, #52]	; 0x34
 800cdc6:	e109      	b.n	800cfdc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cdc8:	69fb      	ldr	r3, [r7, #28]
 800cdca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdce:	689b      	ldr	r3, [r3, #8]
 800cdd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d110      	bne.n	800cdfa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800cdd8:	69bb      	ldr	r3, [r7, #24]
 800cdda:	015a      	lsls	r2, r3, #5
 800cddc:	69fb      	ldr	r3, [r7, #28]
 800cdde:	4413      	add	r3, r2
 800cde0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	69ba      	ldr	r2, [r7, #24]
 800cde8:	0151      	lsls	r1, r2, #5
 800cdea:	69fa      	ldr	r2, [r7, #28]
 800cdec:	440a      	add	r2, r1
 800cdee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cdf2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cdf6:	6013      	str	r3, [r2, #0]
 800cdf8:	e00f      	b.n	800ce1a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800cdfa:	69bb      	ldr	r3, [r7, #24]
 800cdfc:	015a      	lsls	r2, r3, #5
 800cdfe:	69fb      	ldr	r3, [r7, #28]
 800ce00:	4413      	add	r3, r2
 800ce02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	69ba      	ldr	r2, [r7, #24]
 800ce0a:	0151      	lsls	r1, r2, #5
 800ce0c:	69fa      	ldr	r2, [r7, #28]
 800ce0e:	440a      	add	r2, r1
 800ce10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ce18:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ce1a:	68bb      	ldr	r3, [r7, #8]
 800ce1c:	68d9      	ldr	r1, [r3, #12]
 800ce1e:	68bb      	ldr	r3, [r7, #8]
 800ce20:	781a      	ldrb	r2, [r3, #0]
 800ce22:	68bb      	ldr	r3, [r7, #8]
 800ce24:	695b      	ldr	r3, [r3, #20]
 800ce26:	b298      	uxth	r0, r3
 800ce28:	79fb      	ldrb	r3, [r7, #7]
 800ce2a:	9300      	str	r3, [sp, #0]
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	68f8      	ldr	r0, [r7, #12]
 800ce30:	f000 fa38 	bl	800d2a4 <USB_WritePacket>
 800ce34:	e0d2      	b.n	800cfdc <USB_EPStartXfer+0x480>
 800ce36:	bf00      	nop
 800ce38:	e007ffff 	.word	0xe007ffff
 800ce3c:	fff80000 	.word	0xfff80000
 800ce40:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ce44:	69bb      	ldr	r3, [r7, #24]
 800ce46:	015a      	lsls	r2, r3, #5
 800ce48:	69fb      	ldr	r3, [r7, #28]
 800ce4a:	4413      	add	r3, r2
 800ce4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce50:	691a      	ldr	r2, [r3, #16]
 800ce52:	69bb      	ldr	r3, [r7, #24]
 800ce54:	0159      	lsls	r1, r3, #5
 800ce56:	69fb      	ldr	r3, [r7, #28]
 800ce58:	440b      	add	r3, r1
 800ce5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce5e:	4619      	mov	r1, r3
 800ce60:	4b61      	ldr	r3, [pc, #388]	; (800cfe8 <USB_EPStartXfer+0x48c>)
 800ce62:	4013      	ands	r3, r2
 800ce64:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ce66:	69bb      	ldr	r3, [r7, #24]
 800ce68:	015a      	lsls	r2, r3, #5
 800ce6a:	69fb      	ldr	r3, [r7, #28]
 800ce6c:	4413      	add	r3, r2
 800ce6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce72:	691a      	ldr	r2, [r3, #16]
 800ce74:	69bb      	ldr	r3, [r7, #24]
 800ce76:	0159      	lsls	r1, r3, #5
 800ce78:	69fb      	ldr	r3, [r7, #28]
 800ce7a:	440b      	add	r3, r1
 800ce7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce80:	4619      	mov	r1, r3
 800ce82:	4b5a      	ldr	r3, [pc, #360]	; (800cfec <USB_EPStartXfer+0x490>)
 800ce84:	4013      	ands	r3, r2
 800ce86:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	695b      	ldr	r3, [r3, #20]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d123      	bne.n	800ced8 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ce90:	69bb      	ldr	r3, [r7, #24]
 800ce92:	015a      	lsls	r2, r3, #5
 800ce94:	69fb      	ldr	r3, [r7, #28]
 800ce96:	4413      	add	r3, r2
 800ce98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce9c:	691a      	ldr	r2, [r3, #16]
 800ce9e:	68bb      	ldr	r3, [r7, #8]
 800cea0:	689b      	ldr	r3, [r3, #8]
 800cea2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cea6:	69b9      	ldr	r1, [r7, #24]
 800cea8:	0148      	lsls	r0, r1, #5
 800ceaa:	69f9      	ldr	r1, [r7, #28]
 800ceac:	4401      	add	r1, r0
 800ceae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ceb2:	4313      	orrs	r3, r2
 800ceb4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ceb6:	69bb      	ldr	r3, [r7, #24]
 800ceb8:	015a      	lsls	r2, r3, #5
 800ceba:	69fb      	ldr	r3, [r7, #28]
 800cebc:	4413      	add	r3, r2
 800cebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cec2:	691b      	ldr	r3, [r3, #16]
 800cec4:	69ba      	ldr	r2, [r7, #24]
 800cec6:	0151      	lsls	r1, r2, #5
 800cec8:	69fa      	ldr	r2, [r7, #28]
 800ceca:	440a      	add	r2, r1
 800cecc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ced0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ced4:	6113      	str	r3, [r2, #16]
 800ced6:	e033      	b.n	800cf40 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ced8:	68bb      	ldr	r3, [r7, #8]
 800ceda:	695a      	ldr	r2, [r3, #20]
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	689b      	ldr	r3, [r3, #8]
 800cee0:	4413      	add	r3, r2
 800cee2:	1e5a      	subs	r2, r3, #1
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	689b      	ldr	r3, [r3, #8]
 800cee8:	fbb2 f3f3 	udiv	r3, r2, r3
 800ceec:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ceee:	69bb      	ldr	r3, [r7, #24]
 800cef0:	015a      	lsls	r2, r3, #5
 800cef2:	69fb      	ldr	r3, [r7, #28]
 800cef4:	4413      	add	r3, r2
 800cef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cefa:	691a      	ldr	r2, [r3, #16]
 800cefc:	8afb      	ldrh	r3, [r7, #22]
 800cefe:	04d9      	lsls	r1, r3, #19
 800cf00:	4b3b      	ldr	r3, [pc, #236]	; (800cff0 <USB_EPStartXfer+0x494>)
 800cf02:	400b      	ands	r3, r1
 800cf04:	69b9      	ldr	r1, [r7, #24]
 800cf06:	0148      	lsls	r0, r1, #5
 800cf08:	69f9      	ldr	r1, [r7, #28]
 800cf0a:	4401      	add	r1, r0
 800cf0c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cf10:	4313      	orrs	r3, r2
 800cf12:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800cf14:	69bb      	ldr	r3, [r7, #24]
 800cf16:	015a      	lsls	r2, r3, #5
 800cf18:	69fb      	ldr	r3, [r7, #28]
 800cf1a:	4413      	add	r3, r2
 800cf1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf20:	691a      	ldr	r2, [r3, #16]
 800cf22:	68bb      	ldr	r3, [r7, #8]
 800cf24:	689b      	ldr	r3, [r3, #8]
 800cf26:	8af9      	ldrh	r1, [r7, #22]
 800cf28:	fb01 f303 	mul.w	r3, r1, r3
 800cf2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cf30:	69b9      	ldr	r1, [r7, #24]
 800cf32:	0148      	lsls	r0, r1, #5
 800cf34:	69f9      	ldr	r1, [r7, #28]
 800cf36:	4401      	add	r1, r0
 800cf38:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cf3c:	4313      	orrs	r3, r2
 800cf3e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800cf40:	79fb      	ldrb	r3, [r7, #7]
 800cf42:	2b01      	cmp	r3, #1
 800cf44:	d10d      	bne.n	800cf62 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	68db      	ldr	r3, [r3, #12]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d009      	beq.n	800cf62 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	68d9      	ldr	r1, [r3, #12]
 800cf52:	69bb      	ldr	r3, [r7, #24]
 800cf54:	015a      	lsls	r2, r3, #5
 800cf56:	69fb      	ldr	r3, [r7, #28]
 800cf58:	4413      	add	r3, r2
 800cf5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf5e:	460a      	mov	r2, r1
 800cf60:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	78db      	ldrb	r3, [r3, #3]
 800cf66:	2b01      	cmp	r3, #1
 800cf68:	d128      	bne.n	800cfbc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cf6a:	69fb      	ldr	r3, [r7, #28]
 800cf6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf70:	689b      	ldr	r3, [r3, #8]
 800cf72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d110      	bne.n	800cf9c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800cf7a:	69bb      	ldr	r3, [r7, #24]
 800cf7c:	015a      	lsls	r2, r3, #5
 800cf7e:	69fb      	ldr	r3, [r7, #28]
 800cf80:	4413      	add	r3, r2
 800cf82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	69ba      	ldr	r2, [r7, #24]
 800cf8a:	0151      	lsls	r1, r2, #5
 800cf8c:	69fa      	ldr	r2, [r7, #28]
 800cf8e:	440a      	add	r2, r1
 800cf90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf94:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cf98:	6013      	str	r3, [r2, #0]
 800cf9a:	e00f      	b.n	800cfbc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800cf9c:	69bb      	ldr	r3, [r7, #24]
 800cf9e:	015a      	lsls	r2, r3, #5
 800cfa0:	69fb      	ldr	r3, [r7, #28]
 800cfa2:	4413      	add	r3, r2
 800cfa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	69ba      	ldr	r2, [r7, #24]
 800cfac:	0151      	lsls	r1, r2, #5
 800cfae:	69fa      	ldr	r2, [r7, #28]
 800cfb0:	440a      	add	r2, r1
 800cfb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cfb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cfba:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cfbc:	69bb      	ldr	r3, [r7, #24]
 800cfbe:	015a      	lsls	r2, r3, #5
 800cfc0:	69fb      	ldr	r3, [r7, #28]
 800cfc2:	4413      	add	r3, r2
 800cfc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	69ba      	ldr	r2, [r7, #24]
 800cfcc:	0151      	lsls	r1, r2, #5
 800cfce:	69fa      	ldr	r2, [r7, #28]
 800cfd0:	440a      	add	r2, r1
 800cfd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cfd6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cfda:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cfdc:	2300      	movs	r3, #0
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3720      	adds	r7, #32
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}
 800cfe6:	bf00      	nop
 800cfe8:	fff80000 	.word	0xfff80000
 800cfec:	e007ffff 	.word	0xe007ffff
 800cff0:	1ff80000 	.word	0x1ff80000

0800cff4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800cff4:	b480      	push	{r7}
 800cff6:	b087      	sub	sp, #28
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	60f8      	str	r0, [r7, #12]
 800cffc:	60b9      	str	r1, [r7, #8]
 800cffe:	4613      	mov	r3, r2
 800d000:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800d006:	68bb      	ldr	r3, [r7, #8]
 800d008:	781b      	ldrb	r3, [r3, #0]
 800d00a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d00c:	68bb      	ldr	r3, [r7, #8]
 800d00e:	785b      	ldrb	r3, [r3, #1]
 800d010:	2b01      	cmp	r3, #1
 800d012:	f040 80cd 	bne.w	800d1b0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	695b      	ldr	r3, [r3, #20]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d132      	bne.n	800d084 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d01e:	693b      	ldr	r3, [r7, #16]
 800d020:	015a      	lsls	r2, r3, #5
 800d022:	697b      	ldr	r3, [r7, #20]
 800d024:	4413      	add	r3, r2
 800d026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d02a:	691a      	ldr	r2, [r3, #16]
 800d02c:	693b      	ldr	r3, [r7, #16]
 800d02e:	0159      	lsls	r1, r3, #5
 800d030:	697b      	ldr	r3, [r7, #20]
 800d032:	440b      	add	r3, r1
 800d034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d038:	4619      	mov	r1, r3
 800d03a:	4b98      	ldr	r3, [pc, #608]	; (800d29c <USB_EP0StartXfer+0x2a8>)
 800d03c:	4013      	ands	r3, r2
 800d03e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d040:	693b      	ldr	r3, [r7, #16]
 800d042:	015a      	lsls	r2, r3, #5
 800d044:	697b      	ldr	r3, [r7, #20]
 800d046:	4413      	add	r3, r2
 800d048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d04c:	691b      	ldr	r3, [r3, #16]
 800d04e:	693a      	ldr	r2, [r7, #16]
 800d050:	0151      	lsls	r1, r2, #5
 800d052:	697a      	ldr	r2, [r7, #20]
 800d054:	440a      	add	r2, r1
 800d056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d05a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d05e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d060:	693b      	ldr	r3, [r7, #16]
 800d062:	015a      	lsls	r2, r3, #5
 800d064:	697b      	ldr	r3, [r7, #20]
 800d066:	4413      	add	r3, r2
 800d068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d06c:	691a      	ldr	r2, [r3, #16]
 800d06e:	693b      	ldr	r3, [r7, #16]
 800d070:	0159      	lsls	r1, r3, #5
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	440b      	add	r3, r1
 800d076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d07a:	4619      	mov	r1, r3
 800d07c:	4b88      	ldr	r3, [pc, #544]	; (800d2a0 <USB_EP0StartXfer+0x2ac>)
 800d07e:	4013      	ands	r3, r2
 800d080:	610b      	str	r3, [r1, #16]
 800d082:	e04e      	b.n	800d122 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d084:	693b      	ldr	r3, [r7, #16]
 800d086:	015a      	lsls	r2, r3, #5
 800d088:	697b      	ldr	r3, [r7, #20]
 800d08a:	4413      	add	r3, r2
 800d08c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d090:	691a      	ldr	r2, [r3, #16]
 800d092:	693b      	ldr	r3, [r7, #16]
 800d094:	0159      	lsls	r1, r3, #5
 800d096:	697b      	ldr	r3, [r7, #20]
 800d098:	440b      	add	r3, r1
 800d09a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d09e:	4619      	mov	r1, r3
 800d0a0:	4b7f      	ldr	r3, [pc, #508]	; (800d2a0 <USB_EP0StartXfer+0x2ac>)
 800d0a2:	4013      	ands	r3, r2
 800d0a4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d0a6:	693b      	ldr	r3, [r7, #16]
 800d0a8:	015a      	lsls	r2, r3, #5
 800d0aa:	697b      	ldr	r3, [r7, #20]
 800d0ac:	4413      	add	r3, r2
 800d0ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0b2:	691a      	ldr	r2, [r3, #16]
 800d0b4:	693b      	ldr	r3, [r7, #16]
 800d0b6:	0159      	lsls	r1, r3, #5
 800d0b8:	697b      	ldr	r3, [r7, #20]
 800d0ba:	440b      	add	r3, r1
 800d0bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0c0:	4619      	mov	r1, r3
 800d0c2:	4b76      	ldr	r3, [pc, #472]	; (800d29c <USB_EP0StartXfer+0x2a8>)
 800d0c4:	4013      	ands	r3, r2
 800d0c6:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	695a      	ldr	r2, [r3, #20]
 800d0cc:	68bb      	ldr	r3, [r7, #8]
 800d0ce:	689b      	ldr	r3, [r3, #8]
 800d0d0:	429a      	cmp	r2, r3
 800d0d2:	d903      	bls.n	800d0dc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800d0d4:	68bb      	ldr	r3, [r7, #8]
 800d0d6:	689a      	ldr	r2, [r3, #8]
 800d0d8:	68bb      	ldr	r3, [r7, #8]
 800d0da:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d0dc:	693b      	ldr	r3, [r7, #16]
 800d0de:	015a      	lsls	r2, r3, #5
 800d0e0:	697b      	ldr	r3, [r7, #20]
 800d0e2:	4413      	add	r3, r2
 800d0e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0e8:	691b      	ldr	r3, [r3, #16]
 800d0ea:	693a      	ldr	r2, [r7, #16]
 800d0ec:	0151      	lsls	r1, r2, #5
 800d0ee:	697a      	ldr	r2, [r7, #20]
 800d0f0:	440a      	add	r2, r1
 800d0f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d0fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d0fc:	693b      	ldr	r3, [r7, #16]
 800d0fe:	015a      	lsls	r2, r3, #5
 800d100:	697b      	ldr	r3, [r7, #20]
 800d102:	4413      	add	r3, r2
 800d104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d108:	691a      	ldr	r2, [r3, #16]
 800d10a:	68bb      	ldr	r3, [r7, #8]
 800d10c:	695b      	ldr	r3, [r3, #20]
 800d10e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d112:	6939      	ldr	r1, [r7, #16]
 800d114:	0148      	lsls	r0, r1, #5
 800d116:	6979      	ldr	r1, [r7, #20]
 800d118:	4401      	add	r1, r0
 800d11a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d11e:	4313      	orrs	r3, r2
 800d120:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d122:	79fb      	ldrb	r3, [r7, #7]
 800d124:	2b01      	cmp	r3, #1
 800d126:	d11e      	bne.n	800d166 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d128:	68bb      	ldr	r3, [r7, #8]
 800d12a:	691b      	ldr	r3, [r3, #16]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d009      	beq.n	800d144 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d130:	693b      	ldr	r3, [r7, #16]
 800d132:	015a      	lsls	r2, r3, #5
 800d134:	697b      	ldr	r3, [r7, #20]
 800d136:	4413      	add	r3, r2
 800d138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d13c:	461a      	mov	r2, r3
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	691b      	ldr	r3, [r3, #16]
 800d142:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d144:	693b      	ldr	r3, [r7, #16]
 800d146:	015a      	lsls	r2, r3, #5
 800d148:	697b      	ldr	r3, [r7, #20]
 800d14a:	4413      	add	r3, r2
 800d14c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	693a      	ldr	r2, [r7, #16]
 800d154:	0151      	lsls	r1, r2, #5
 800d156:	697a      	ldr	r2, [r7, #20]
 800d158:	440a      	add	r2, r1
 800d15a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d15e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d162:	6013      	str	r3, [r2, #0]
 800d164:	e092      	b.n	800d28c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d166:	693b      	ldr	r3, [r7, #16]
 800d168:	015a      	lsls	r2, r3, #5
 800d16a:	697b      	ldr	r3, [r7, #20]
 800d16c:	4413      	add	r3, r2
 800d16e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	693a      	ldr	r2, [r7, #16]
 800d176:	0151      	lsls	r1, r2, #5
 800d178:	697a      	ldr	r2, [r7, #20]
 800d17a:	440a      	add	r2, r1
 800d17c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d180:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d184:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d186:	68bb      	ldr	r3, [r7, #8]
 800d188:	695b      	ldr	r3, [r3, #20]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d07e      	beq.n	800d28c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d194:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d196:	68bb      	ldr	r3, [r7, #8]
 800d198:	781b      	ldrb	r3, [r3, #0]
 800d19a:	f003 030f 	and.w	r3, r3, #15
 800d19e:	2101      	movs	r1, #1
 800d1a0:	fa01 f303 	lsl.w	r3, r1, r3
 800d1a4:	6979      	ldr	r1, [r7, #20]
 800d1a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d1aa:	4313      	orrs	r3, r2
 800d1ac:	634b      	str	r3, [r1, #52]	; 0x34
 800d1ae:	e06d      	b.n	800d28c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d1b0:	693b      	ldr	r3, [r7, #16]
 800d1b2:	015a      	lsls	r2, r3, #5
 800d1b4:	697b      	ldr	r3, [r7, #20]
 800d1b6:	4413      	add	r3, r2
 800d1b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1bc:	691a      	ldr	r2, [r3, #16]
 800d1be:	693b      	ldr	r3, [r7, #16]
 800d1c0:	0159      	lsls	r1, r3, #5
 800d1c2:	697b      	ldr	r3, [r7, #20]
 800d1c4:	440b      	add	r3, r1
 800d1c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1ca:	4619      	mov	r1, r3
 800d1cc:	4b34      	ldr	r3, [pc, #208]	; (800d2a0 <USB_EP0StartXfer+0x2ac>)
 800d1ce:	4013      	ands	r3, r2
 800d1d0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d1d2:	693b      	ldr	r3, [r7, #16]
 800d1d4:	015a      	lsls	r2, r3, #5
 800d1d6:	697b      	ldr	r3, [r7, #20]
 800d1d8:	4413      	add	r3, r2
 800d1da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1de:	691a      	ldr	r2, [r3, #16]
 800d1e0:	693b      	ldr	r3, [r7, #16]
 800d1e2:	0159      	lsls	r1, r3, #5
 800d1e4:	697b      	ldr	r3, [r7, #20]
 800d1e6:	440b      	add	r3, r1
 800d1e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1ec:	4619      	mov	r1, r3
 800d1ee:	4b2b      	ldr	r3, [pc, #172]	; (800d29c <USB_EP0StartXfer+0x2a8>)
 800d1f0:	4013      	ands	r3, r2
 800d1f2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	695b      	ldr	r3, [r3, #20]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d003      	beq.n	800d204 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800d1fc:	68bb      	ldr	r3, [r7, #8]
 800d1fe:	689a      	ldr	r2, [r3, #8]
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d204:	693b      	ldr	r3, [r7, #16]
 800d206:	015a      	lsls	r2, r3, #5
 800d208:	697b      	ldr	r3, [r7, #20]
 800d20a:	4413      	add	r3, r2
 800d20c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d210:	691b      	ldr	r3, [r3, #16]
 800d212:	693a      	ldr	r2, [r7, #16]
 800d214:	0151      	lsls	r1, r2, #5
 800d216:	697a      	ldr	r2, [r7, #20]
 800d218:	440a      	add	r2, r1
 800d21a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d21e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d222:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800d224:	693b      	ldr	r3, [r7, #16]
 800d226:	015a      	lsls	r2, r3, #5
 800d228:	697b      	ldr	r3, [r7, #20]
 800d22a:	4413      	add	r3, r2
 800d22c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d230:	691a      	ldr	r2, [r3, #16]
 800d232:	68bb      	ldr	r3, [r7, #8]
 800d234:	689b      	ldr	r3, [r3, #8]
 800d236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d23a:	6939      	ldr	r1, [r7, #16]
 800d23c:	0148      	lsls	r0, r1, #5
 800d23e:	6979      	ldr	r1, [r7, #20]
 800d240:	4401      	add	r1, r0
 800d242:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d246:	4313      	orrs	r3, r2
 800d248:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800d24a:	79fb      	ldrb	r3, [r7, #7]
 800d24c:	2b01      	cmp	r3, #1
 800d24e:	d10d      	bne.n	800d26c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	68db      	ldr	r3, [r3, #12]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d009      	beq.n	800d26c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	68d9      	ldr	r1, [r3, #12]
 800d25c:	693b      	ldr	r3, [r7, #16]
 800d25e:	015a      	lsls	r2, r3, #5
 800d260:	697b      	ldr	r3, [r7, #20]
 800d262:	4413      	add	r3, r2
 800d264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d268:	460a      	mov	r2, r1
 800d26a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d26c:	693b      	ldr	r3, [r7, #16]
 800d26e:	015a      	lsls	r2, r3, #5
 800d270:	697b      	ldr	r3, [r7, #20]
 800d272:	4413      	add	r3, r2
 800d274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	693a      	ldr	r2, [r7, #16]
 800d27c:	0151      	lsls	r1, r2, #5
 800d27e:	697a      	ldr	r2, [r7, #20]
 800d280:	440a      	add	r2, r1
 800d282:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d286:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d28a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d28c:	2300      	movs	r3, #0
}
 800d28e:	4618      	mov	r0, r3
 800d290:	371c      	adds	r7, #28
 800d292:	46bd      	mov	sp, r7
 800d294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d298:	4770      	bx	lr
 800d29a:	bf00      	nop
 800d29c:	e007ffff 	.word	0xe007ffff
 800d2a0:	fff80000 	.word	0xfff80000

0800d2a4 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d2a4:	b480      	push	{r7}
 800d2a6:	b089      	sub	sp, #36	; 0x24
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	60f8      	str	r0, [r7, #12]
 800d2ac:	60b9      	str	r1, [r7, #8]
 800d2ae:	4611      	mov	r1, r2
 800d2b0:	461a      	mov	r2, r3
 800d2b2:	460b      	mov	r3, r1
 800d2b4:	71fb      	strb	r3, [r7, #7]
 800d2b6:	4613      	mov	r3, r2
 800d2b8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800d2be:	68bb      	ldr	r3, [r7, #8]
 800d2c0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800d2c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d11a      	bne.n	800d300 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d2ca:	88bb      	ldrh	r3, [r7, #4]
 800d2cc:	3303      	adds	r3, #3
 800d2ce:	089b      	lsrs	r3, r3, #2
 800d2d0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	61bb      	str	r3, [r7, #24]
 800d2d6:	e00f      	b.n	800d2f8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d2d8:	79fb      	ldrb	r3, [r7, #7]
 800d2da:	031a      	lsls	r2, r3, #12
 800d2dc:	697b      	ldr	r3, [r7, #20]
 800d2de:	4413      	add	r3, r2
 800d2e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2e4:	461a      	mov	r2, r3
 800d2e6:	69fb      	ldr	r3, [r7, #28]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d2ec:	69fb      	ldr	r3, [r7, #28]
 800d2ee:	3304      	adds	r3, #4
 800d2f0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d2f2:	69bb      	ldr	r3, [r7, #24]
 800d2f4:	3301      	adds	r3, #1
 800d2f6:	61bb      	str	r3, [r7, #24]
 800d2f8:	69ba      	ldr	r2, [r7, #24]
 800d2fa:	693b      	ldr	r3, [r7, #16]
 800d2fc:	429a      	cmp	r2, r3
 800d2fe:	d3eb      	bcc.n	800d2d8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d300:	2300      	movs	r3, #0
}
 800d302:	4618      	mov	r0, r3
 800d304:	3724      	adds	r7, #36	; 0x24
 800d306:	46bd      	mov	sp, r7
 800d308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30c:	4770      	bx	lr

0800d30e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d30e:	b480      	push	{r7}
 800d310:	b089      	sub	sp, #36	; 0x24
 800d312:	af00      	add	r7, sp, #0
 800d314:	60f8      	str	r0, [r7, #12]
 800d316:	60b9      	str	r1, [r7, #8]
 800d318:	4613      	mov	r3, r2
 800d31a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800d320:	68bb      	ldr	r3, [r7, #8]
 800d322:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800d324:	88fb      	ldrh	r3, [r7, #6]
 800d326:	3303      	adds	r3, #3
 800d328:	089b      	lsrs	r3, r3, #2
 800d32a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800d32c:	2300      	movs	r3, #0
 800d32e:	61bb      	str	r3, [r7, #24]
 800d330:	e00b      	b.n	800d34a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d332:	697b      	ldr	r3, [r7, #20]
 800d334:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d338:	681a      	ldr	r2, [r3, #0]
 800d33a:	69fb      	ldr	r3, [r7, #28]
 800d33c:	601a      	str	r2, [r3, #0]
    pDest++;
 800d33e:	69fb      	ldr	r3, [r7, #28]
 800d340:	3304      	adds	r3, #4
 800d342:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800d344:	69bb      	ldr	r3, [r7, #24]
 800d346:	3301      	adds	r3, #1
 800d348:	61bb      	str	r3, [r7, #24]
 800d34a:	69ba      	ldr	r2, [r7, #24]
 800d34c:	693b      	ldr	r3, [r7, #16]
 800d34e:	429a      	cmp	r2, r3
 800d350:	d3ef      	bcc.n	800d332 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800d352:	69fb      	ldr	r3, [r7, #28]
}
 800d354:	4618      	mov	r0, r3
 800d356:	3724      	adds	r7, #36	; 0x24
 800d358:	46bd      	mov	sp, r7
 800d35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35e:	4770      	bx	lr

0800d360 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d360:	b480      	push	{r7}
 800d362:	b085      	sub	sp, #20
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
 800d368:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	781b      	ldrb	r3, [r3, #0]
 800d372:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d374:	683b      	ldr	r3, [r7, #0]
 800d376:	785b      	ldrb	r3, [r3, #1]
 800d378:	2b01      	cmp	r3, #1
 800d37a:	d12c      	bne.n	800d3d6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d37c:	68bb      	ldr	r3, [r7, #8]
 800d37e:	015a      	lsls	r2, r3, #5
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	4413      	add	r3, r2
 800d384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	db12      	blt.n	800d3b4 <USB_EPSetStall+0x54>
 800d38e:	68bb      	ldr	r3, [r7, #8]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d00f      	beq.n	800d3b4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d394:	68bb      	ldr	r3, [r7, #8]
 800d396:	015a      	lsls	r2, r3, #5
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	4413      	add	r3, r2
 800d39c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	68ba      	ldr	r2, [r7, #8]
 800d3a4:	0151      	lsls	r1, r2, #5
 800d3a6:	68fa      	ldr	r2, [r7, #12]
 800d3a8:	440a      	add	r2, r1
 800d3aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d3b2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d3b4:	68bb      	ldr	r3, [r7, #8]
 800d3b6:	015a      	lsls	r2, r3, #5
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	4413      	add	r3, r2
 800d3bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	68ba      	ldr	r2, [r7, #8]
 800d3c4:	0151      	lsls	r1, r2, #5
 800d3c6:	68fa      	ldr	r2, [r7, #12]
 800d3c8:	440a      	add	r2, r1
 800d3ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d3d2:	6013      	str	r3, [r2, #0]
 800d3d4:	e02b      	b.n	800d42e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	015a      	lsls	r2, r3, #5
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	4413      	add	r3, r2
 800d3de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	db12      	blt.n	800d40e <USB_EPSetStall+0xae>
 800d3e8:	68bb      	ldr	r3, [r7, #8]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d00f      	beq.n	800d40e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d3ee:	68bb      	ldr	r3, [r7, #8]
 800d3f0:	015a      	lsls	r2, r3, #5
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	4413      	add	r3, r2
 800d3f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	68ba      	ldr	r2, [r7, #8]
 800d3fe:	0151      	lsls	r1, r2, #5
 800d400:	68fa      	ldr	r2, [r7, #12]
 800d402:	440a      	add	r2, r1
 800d404:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d408:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d40c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	015a      	lsls	r2, r3, #5
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	4413      	add	r3, r2
 800d416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	68ba      	ldr	r2, [r7, #8]
 800d41e:	0151      	lsls	r1, r2, #5
 800d420:	68fa      	ldr	r2, [r7, #12]
 800d422:	440a      	add	r2, r1
 800d424:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d428:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d42c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d42e:	2300      	movs	r3, #0
}
 800d430:	4618      	mov	r0, r3
 800d432:	3714      	adds	r7, #20
 800d434:	46bd      	mov	sp, r7
 800d436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43a:	4770      	bx	lr

0800d43c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d43c:	b480      	push	{r7}
 800d43e:	b085      	sub	sp, #20
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
 800d444:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	781b      	ldrb	r3, [r3, #0]
 800d44e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	785b      	ldrb	r3, [r3, #1]
 800d454:	2b01      	cmp	r3, #1
 800d456:	d128      	bne.n	800d4aa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	015a      	lsls	r2, r3, #5
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	4413      	add	r3, r2
 800d460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	68ba      	ldr	r2, [r7, #8]
 800d468:	0151      	lsls	r1, r2, #5
 800d46a:	68fa      	ldr	r2, [r7, #12]
 800d46c:	440a      	add	r2, r1
 800d46e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d472:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d476:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	78db      	ldrb	r3, [r3, #3]
 800d47c:	2b03      	cmp	r3, #3
 800d47e:	d003      	beq.n	800d488 <USB_EPClearStall+0x4c>
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	78db      	ldrb	r3, [r3, #3]
 800d484:	2b02      	cmp	r3, #2
 800d486:	d138      	bne.n	800d4fa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d488:	68bb      	ldr	r3, [r7, #8]
 800d48a:	015a      	lsls	r2, r3, #5
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	4413      	add	r3, r2
 800d490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	68ba      	ldr	r2, [r7, #8]
 800d498:	0151      	lsls	r1, r2, #5
 800d49a:	68fa      	ldr	r2, [r7, #12]
 800d49c:	440a      	add	r2, r1
 800d49e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d4a6:	6013      	str	r3, [r2, #0]
 800d4a8:	e027      	b.n	800d4fa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	015a      	lsls	r2, r3, #5
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	4413      	add	r3, r2
 800d4b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	68ba      	ldr	r2, [r7, #8]
 800d4ba:	0151      	lsls	r1, r2, #5
 800d4bc:	68fa      	ldr	r2, [r7, #12]
 800d4be:	440a      	add	r2, r1
 800d4c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d4c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d4c8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	78db      	ldrb	r3, [r3, #3]
 800d4ce:	2b03      	cmp	r3, #3
 800d4d0:	d003      	beq.n	800d4da <USB_EPClearStall+0x9e>
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	78db      	ldrb	r3, [r3, #3]
 800d4d6:	2b02      	cmp	r3, #2
 800d4d8:	d10f      	bne.n	800d4fa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d4da:	68bb      	ldr	r3, [r7, #8]
 800d4dc:	015a      	lsls	r2, r3, #5
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	4413      	add	r3, r2
 800d4e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	68ba      	ldr	r2, [r7, #8]
 800d4ea:	0151      	lsls	r1, r2, #5
 800d4ec:	68fa      	ldr	r2, [r7, #12]
 800d4ee:	440a      	add	r2, r1
 800d4f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d4f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d4f8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d4fa:	2300      	movs	r3, #0
}
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	3714      	adds	r7, #20
 800d500:	46bd      	mov	sp, r7
 800d502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d506:	4770      	bx	lr

0800d508 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d508:	b480      	push	{r7}
 800d50a:	b085      	sub	sp, #20
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
 800d510:	460b      	mov	r3, r1
 800d512:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	68fa      	ldr	r2, [r7, #12]
 800d522:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d526:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d52a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d532:	681a      	ldr	r2, [r3, #0]
 800d534:	78fb      	ldrb	r3, [r7, #3]
 800d536:	011b      	lsls	r3, r3, #4
 800d538:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d53c:	68f9      	ldr	r1, [r7, #12]
 800d53e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d542:	4313      	orrs	r3, r2
 800d544:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d546:	2300      	movs	r3, #0
}
 800d548:	4618      	mov	r0, r3
 800d54a:	3714      	adds	r7, #20
 800d54c:	46bd      	mov	sp, r7
 800d54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d552:	4770      	bx	lr

0800d554 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b084      	sub	sp, #16
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d566:	685b      	ldr	r3, [r3, #4]
 800d568:	68fa      	ldr	r2, [r7, #12]
 800d56a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d56e:	f023 0302 	bic.w	r3, r3, #2
 800d572:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800d574:	2003      	movs	r0, #3
 800d576:	f7f4 f933 	bl	80017e0 <HAL_Delay>

  return HAL_OK;
 800d57a:	2300      	movs	r3, #0
}
 800d57c:	4618      	mov	r0, r3
 800d57e:	3710      	adds	r7, #16
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}

0800d584 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b084      	sub	sp, #16
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d596:	685b      	ldr	r3, [r3, #4]
 800d598:	68fa      	ldr	r2, [r7, #12]
 800d59a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d59e:	f043 0302 	orr.w	r3, r3, #2
 800d5a2:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800d5a4:	2003      	movs	r0, #3
 800d5a6:	f7f4 f91b 	bl	80017e0 <HAL_Delay>

  return HAL_OK;
 800d5aa:	2300      	movs	r3, #0
}
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	3710      	adds	r7, #16
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	bd80      	pop	{r7, pc}

0800d5b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d5b4:	b480      	push	{r7}
 800d5b6:	b085      	sub	sp, #20
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	695b      	ldr	r3, [r3, #20]
 800d5c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	699b      	ldr	r3, [r3, #24]
 800d5c6:	68fa      	ldr	r2, [r7, #12]
 800d5c8:	4013      	ands	r3, r2
 800d5ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
}
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	3714      	adds	r7, #20
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d8:	4770      	bx	lr

0800d5da <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d5da:	b480      	push	{r7}
 800d5dc:	b085      	sub	sp, #20
 800d5de:	af00      	add	r7, sp, #0
 800d5e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5ec:	699b      	ldr	r3, [r3, #24]
 800d5ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5f6:	69db      	ldr	r3, [r3, #28]
 800d5f8:	68ba      	ldr	r2, [r7, #8]
 800d5fa:	4013      	ands	r3, r2
 800d5fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	0c1b      	lsrs	r3, r3, #16
}
 800d602:	4618      	mov	r0, r3
 800d604:	3714      	adds	r7, #20
 800d606:	46bd      	mov	sp, r7
 800d608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60c:	4770      	bx	lr

0800d60e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d60e:	b480      	push	{r7}
 800d610:	b085      	sub	sp, #20
 800d612:	af00      	add	r7, sp, #0
 800d614:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d620:	699b      	ldr	r3, [r3, #24]
 800d622:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d62a:	69db      	ldr	r3, [r3, #28]
 800d62c:	68ba      	ldr	r2, [r7, #8]
 800d62e:	4013      	ands	r3, r2
 800d630:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d632:	68bb      	ldr	r3, [r7, #8]
 800d634:	b29b      	uxth	r3, r3
}
 800d636:	4618      	mov	r0, r3
 800d638:	3714      	adds	r7, #20
 800d63a:	46bd      	mov	sp, r7
 800d63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d640:	4770      	bx	lr

0800d642 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d642:	b480      	push	{r7}
 800d644:	b085      	sub	sp, #20
 800d646:	af00      	add	r7, sp, #0
 800d648:	6078      	str	r0, [r7, #4]
 800d64a:	460b      	mov	r3, r1
 800d64c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d652:	78fb      	ldrb	r3, [r7, #3]
 800d654:	015a      	lsls	r2, r3, #5
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	4413      	add	r3, r2
 800d65a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d65e:	689b      	ldr	r3, [r3, #8]
 800d660:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d668:	695b      	ldr	r3, [r3, #20]
 800d66a:	68ba      	ldr	r2, [r7, #8]
 800d66c:	4013      	ands	r3, r2
 800d66e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d670:	68bb      	ldr	r3, [r7, #8]
}
 800d672:	4618      	mov	r0, r3
 800d674:	3714      	adds	r7, #20
 800d676:	46bd      	mov	sp, r7
 800d678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67c:	4770      	bx	lr

0800d67e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d67e:	b480      	push	{r7}
 800d680:	b087      	sub	sp, #28
 800d682:	af00      	add	r7, sp, #0
 800d684:	6078      	str	r0, [r7, #4]
 800d686:	460b      	mov	r3, r1
 800d688:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d694:	691b      	ldr	r3, [r3, #16]
 800d696:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d698:	697b      	ldr	r3, [r7, #20]
 800d69a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d69e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6a0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d6a2:	78fb      	ldrb	r3, [r7, #3]
 800d6a4:	f003 030f 	and.w	r3, r3, #15
 800d6a8:	68fa      	ldr	r2, [r7, #12]
 800d6aa:	fa22 f303 	lsr.w	r3, r2, r3
 800d6ae:	01db      	lsls	r3, r3, #7
 800d6b0:	b2db      	uxtb	r3, r3
 800d6b2:	693a      	ldr	r2, [r7, #16]
 800d6b4:	4313      	orrs	r3, r2
 800d6b6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d6b8:	78fb      	ldrb	r3, [r7, #3]
 800d6ba:	015a      	lsls	r2, r3, #5
 800d6bc:	697b      	ldr	r3, [r7, #20]
 800d6be:	4413      	add	r3, r2
 800d6c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6c4:	689b      	ldr	r3, [r3, #8]
 800d6c6:	693a      	ldr	r2, [r7, #16]
 800d6c8:	4013      	ands	r3, r2
 800d6ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d6cc:	68bb      	ldr	r3, [r7, #8]
}
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	371c      	adds	r7, #28
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d8:	4770      	bx	lr

0800d6da <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d6da:	b480      	push	{r7}
 800d6dc:	b083      	sub	sp, #12
 800d6de:	af00      	add	r7, sp, #0
 800d6e0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	695b      	ldr	r3, [r3, #20]
 800d6e6:	f003 0301 	and.w	r3, r3, #1
}
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	370c      	adds	r7, #12
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f4:	4770      	bx	lr
	...

0800d6f8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d6f8:	b480      	push	{r7}
 800d6fa:	b085      	sub	sp, #20
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d70a:	681a      	ldr	r2, [r3, #0]
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d712:	4619      	mov	r1, r3
 800d714:	4b09      	ldr	r3, [pc, #36]	; (800d73c <USB_ActivateSetup+0x44>)
 800d716:	4013      	ands	r3, r2
 800d718:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d720:	685b      	ldr	r3, [r3, #4]
 800d722:	68fa      	ldr	r2, [r7, #12]
 800d724:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d72c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d72e:	2300      	movs	r3, #0
}
 800d730:	4618      	mov	r0, r3
 800d732:	3714      	adds	r7, #20
 800d734:	46bd      	mov	sp, r7
 800d736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73a:	4770      	bx	lr
 800d73c:	fffff800 	.word	0xfffff800

0800d740 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800d740:	b480      	push	{r7}
 800d742:	b087      	sub	sp, #28
 800d744:	af00      	add	r7, sp, #0
 800d746:	60f8      	str	r0, [r7, #12]
 800d748:	460b      	mov	r3, r1
 800d74a:	607a      	str	r2, [r7, #4]
 800d74c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	333c      	adds	r3, #60	; 0x3c
 800d756:	3304      	adds	r3, #4
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d75c:	693b      	ldr	r3, [r7, #16]
 800d75e:	4a26      	ldr	r2, [pc, #152]	; (800d7f8 <USB_EP0_OutStart+0xb8>)
 800d760:	4293      	cmp	r3, r2
 800d762:	d90a      	bls.n	800d77a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d764:	697b      	ldr	r3, [r7, #20]
 800d766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d770:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d774:	d101      	bne.n	800d77a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d776:	2300      	movs	r3, #0
 800d778:	e037      	b.n	800d7ea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d77a:	697b      	ldr	r3, [r7, #20]
 800d77c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d780:	461a      	mov	r2, r3
 800d782:	2300      	movs	r3, #0
 800d784:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d786:	697b      	ldr	r3, [r7, #20]
 800d788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d78c:	691b      	ldr	r3, [r3, #16]
 800d78e:	697a      	ldr	r2, [r7, #20]
 800d790:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d794:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d798:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d79a:	697b      	ldr	r3, [r7, #20]
 800d79c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7a0:	691b      	ldr	r3, [r3, #16]
 800d7a2:	697a      	ldr	r2, [r7, #20]
 800d7a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d7a8:	f043 0318 	orr.w	r3, r3, #24
 800d7ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d7ae:	697b      	ldr	r3, [r7, #20]
 800d7b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7b4:	691b      	ldr	r3, [r3, #16]
 800d7b6:	697a      	ldr	r2, [r7, #20]
 800d7b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d7bc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d7c0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d7c2:	7afb      	ldrb	r3, [r7, #11]
 800d7c4:	2b01      	cmp	r3, #1
 800d7c6:	d10f      	bne.n	800d7e8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d7c8:	697b      	ldr	r3, [r7, #20]
 800d7ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7ce:	461a      	mov	r2, r3
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d7d4:	697b      	ldr	r3, [r7, #20]
 800d7d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	697a      	ldr	r2, [r7, #20]
 800d7de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d7e2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d7e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d7e8:	2300      	movs	r3, #0
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	371c      	adds	r7, #28
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f4:	4770      	bx	lr
 800d7f6:	bf00      	nop
 800d7f8:	4f54300a 	.word	0x4f54300a

0800d7fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d7fc:	b480      	push	{r7}
 800d7fe:	b085      	sub	sp, #20
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800d804:	2300      	movs	r3, #0
 800d806:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	3301      	adds	r3, #1
 800d80c:	60fb      	str	r3, [r7, #12]
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	4a13      	ldr	r2, [pc, #76]	; (800d860 <USB_CoreReset+0x64>)
 800d812:	4293      	cmp	r3, r2
 800d814:	d901      	bls.n	800d81a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d816:	2303      	movs	r3, #3
 800d818:	e01b      	b.n	800d852 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	691b      	ldr	r3, [r3, #16]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	daf2      	bge.n	800d808 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d822:	2300      	movs	r3, #0
 800d824:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	691b      	ldr	r3, [r3, #16]
 800d82a:	f043 0201 	orr.w	r2, r3, #1
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	3301      	adds	r3, #1
 800d836:	60fb      	str	r3, [r7, #12]
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	4a09      	ldr	r2, [pc, #36]	; (800d860 <USB_CoreReset+0x64>)
 800d83c:	4293      	cmp	r3, r2
 800d83e:	d901      	bls.n	800d844 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d840:	2303      	movs	r3, #3
 800d842:	e006      	b.n	800d852 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	691b      	ldr	r3, [r3, #16]
 800d848:	f003 0301 	and.w	r3, r3, #1
 800d84c:	2b01      	cmp	r3, #1
 800d84e:	d0f0      	beq.n	800d832 <USB_CoreReset+0x36>

  return HAL_OK;
 800d850:	2300      	movs	r3, #0
}
 800d852:	4618      	mov	r0, r3
 800d854:	3714      	adds	r7, #20
 800d856:	46bd      	mov	sp, r7
 800d858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85c:	4770      	bx	lr
 800d85e:	bf00      	nop
 800d860:	00030d40 	.word	0x00030d40

0800d864 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d864:	b580      	push	{r7, lr}
 800d866:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d868:	4904      	ldr	r1, [pc, #16]	; (800d87c <MX_FATFS_Init+0x18>)
 800d86a:	4805      	ldr	r0, [pc, #20]	; (800d880 <MX_FATFS_Init+0x1c>)
 800d86c:	f002 ff52 	bl	8010714 <FATFS_LinkDriver>
 800d870:	4603      	mov	r3, r0
 800d872:	461a      	mov	r2, r3
 800d874:	4b03      	ldr	r3, [pc, #12]	; (800d884 <MX_FATFS_Init+0x20>)
 800d876:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d878:	bf00      	nop
 800d87a:	bd80      	pop	{r7, pc}
 800d87c:	24000650 	.word	0x24000650
 800d880:	08012028 	.word	0x08012028
 800d884:	2400064c 	.word	0x2400064c

0800d888 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b082      	sub	sp, #8
 800d88c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d88e:	2300      	movs	r3, #0
 800d890:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d892:	f000 f879 	bl	800d988 <BSP_SD_IsDetected>
 800d896:	4603      	mov	r3, r0
 800d898:	2b01      	cmp	r3, #1
 800d89a:	d001      	beq.n	800d8a0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800d89c:	2302      	movs	r3, #2
 800d89e:	e012      	b.n	800d8c6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800d8a0:	480b      	ldr	r0, [pc, #44]	; (800d8d0 <BSP_SD_Init+0x48>)
 800d8a2:	f7fb f97f 	bl	8008ba4 <HAL_SD_Init>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d8aa:	79fb      	ldrb	r3, [r7, #7]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d109      	bne.n	800d8c4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800d8b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800d8b4:	4806      	ldr	r0, [pc, #24]	; (800d8d0 <BSP_SD_Init+0x48>)
 800d8b6:	f7fc f843 	bl	8009940 <HAL_SD_ConfigWideBusOperation>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d001      	beq.n	800d8c4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d8c0:	2301      	movs	r3, #1
 800d8c2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d8c4:	79fb      	ldrb	r3, [r7, #7]
}
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	3708      	adds	r7, #8
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	bd80      	pop	{r7, pc}
 800d8ce:	bf00      	nop
 800d8d0:	2400030c 	.word	0x2400030c

0800d8d4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b088      	sub	sp, #32
 800d8d8:	af02      	add	r7, sp, #8
 800d8da:	60f8      	str	r0, [r7, #12]
 800d8dc:	60b9      	str	r1, [r7, #8]
 800d8de:	607a      	str	r2, [r7, #4]
 800d8e0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	9300      	str	r3, [sp, #0]
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	68ba      	ldr	r2, [r7, #8]
 800d8ee:	68f9      	ldr	r1, [r7, #12]
 800d8f0:	4806      	ldr	r0, [pc, #24]	; (800d90c <BSP_SD_ReadBlocks+0x38>)
 800d8f2:	f7fb fa7b 	bl	8008dec <HAL_SD_ReadBlocks>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d001      	beq.n	800d900 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d900:	7dfb      	ldrb	r3, [r7, #23]
}
 800d902:	4618      	mov	r0, r3
 800d904:	3718      	adds	r7, #24
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}
 800d90a:	bf00      	nop
 800d90c:	2400030c 	.word	0x2400030c

0800d910 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b088      	sub	sp, #32
 800d914:	af02      	add	r7, sp, #8
 800d916:	60f8      	str	r0, [r7, #12]
 800d918:	60b9      	str	r1, [r7, #8]
 800d91a:	607a      	str	r2, [r7, #4]
 800d91c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d91e:	2300      	movs	r3, #0
 800d920:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	9300      	str	r3, [sp, #0]
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	68ba      	ldr	r2, [r7, #8]
 800d92a:	68f9      	ldr	r1, [r7, #12]
 800d92c:	4806      	ldr	r0, [pc, #24]	; (800d948 <BSP_SD_WriteBlocks+0x38>)
 800d92e:	f7fb fbe7 	bl	8009100 <HAL_SD_WriteBlocks>
 800d932:	4603      	mov	r3, r0
 800d934:	2b00      	cmp	r3, #0
 800d936:	d001      	beq.n	800d93c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d938:	2301      	movs	r3, #1
 800d93a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d93c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d93e:	4618      	mov	r0, r3
 800d940:	3718      	adds	r7, #24
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}
 800d946:	bf00      	nop
 800d948:	2400030c 	.word	0x2400030c

0800d94c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d950:	4805      	ldr	r0, [pc, #20]	; (800d968 <BSP_SD_GetCardState+0x1c>)
 800d952:	f7fc f89f 	bl	8009a94 <HAL_SD_GetCardState>
 800d956:	4603      	mov	r3, r0
 800d958:	2b04      	cmp	r3, #4
 800d95a:	bf14      	ite	ne
 800d95c:	2301      	movne	r3, #1
 800d95e:	2300      	moveq	r3, #0
 800d960:	b2db      	uxtb	r3, r3
}
 800d962:	4618      	mov	r0, r3
 800d964:	bd80      	pop	{r7, pc}
 800d966:	bf00      	nop
 800d968:	2400030c 	.word	0x2400030c

0800d96c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b082      	sub	sp, #8
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800d974:	6879      	ldr	r1, [r7, #4]
 800d976:	4803      	ldr	r0, [pc, #12]	; (800d984 <BSP_SD_GetCardInfo+0x18>)
 800d978:	f7fb ffb6 	bl	80098e8 <HAL_SD_GetCardInfo>
}
 800d97c:	bf00      	nop
 800d97e:	3708      	adds	r7, #8
 800d980:	46bd      	mov	sp, r7
 800d982:	bd80      	pop	{r7, pc}
 800d984:	2400030c 	.word	0x2400030c

0800d988 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b082      	sub	sp, #8
 800d98c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d98e:	2301      	movs	r3, #1
 800d990:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d992:	f000 f80b 	bl	800d9ac <BSP_PlatformIsDetected>
 800d996:	4603      	mov	r3, r0
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d101      	bne.n	800d9a0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d99c:	2300      	movs	r3, #0
 800d99e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d9a0:	79fb      	ldrb	r3, [r7, #7]
 800d9a2:	b2db      	uxtb	r3, r3
}
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	3708      	adds	r7, #8
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	bd80      	pop	{r7, pc}

0800d9ac <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b082      	sub	sp, #8
 800d9b0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d9b2:	2301      	movs	r3, #1
 800d9b4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d9b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d9ba:	4806      	ldr	r0, [pc, #24]	; (800d9d4 <BSP_PlatformIsDetected+0x28>)
 800d9bc:	f7f6 fffc 	bl	80049b8 <HAL_GPIO_ReadPin>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d001      	beq.n	800d9ca <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d9ca:	79fb      	ldrb	r3, [r7, #7]
}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	3708      	adds	r7, #8
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bd80      	pop	{r7, pc}
 800d9d4:	58020000 	.word	0x58020000

0800d9d8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b082      	sub	sp, #8
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	4603      	mov	r3, r0
 800d9e0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d9e2:	4b0b      	ldr	r3, [pc, #44]	; (800da10 <SD_CheckStatus+0x38>)
 800d9e4:	2201      	movs	r2, #1
 800d9e6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d9e8:	f7ff ffb0 	bl	800d94c <BSP_SD_GetCardState>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d107      	bne.n	800da02 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d9f2:	4b07      	ldr	r3, [pc, #28]	; (800da10 <SD_CheckStatus+0x38>)
 800d9f4:	781b      	ldrb	r3, [r3, #0]
 800d9f6:	b2db      	uxtb	r3, r3
 800d9f8:	f023 0301 	bic.w	r3, r3, #1
 800d9fc:	b2da      	uxtb	r2, r3
 800d9fe:	4b04      	ldr	r3, [pc, #16]	; (800da10 <SD_CheckStatus+0x38>)
 800da00:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800da02:	4b03      	ldr	r3, [pc, #12]	; (800da10 <SD_CheckStatus+0x38>)
 800da04:	781b      	ldrb	r3, [r3, #0]
 800da06:	b2db      	uxtb	r3, r3
}
 800da08:	4618      	mov	r0, r3
 800da0a:	3708      	adds	r7, #8
 800da0c:	46bd      	mov	sp, r7
 800da0e:	bd80      	pop	{r7, pc}
 800da10:	2400000d 	.word	0x2400000d

0800da14 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b082      	sub	sp, #8
 800da18:	af00      	add	r7, sp, #0
 800da1a:	4603      	mov	r3, r0
 800da1c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800da1e:	4b0b      	ldr	r3, [pc, #44]	; (800da4c <SD_initialize+0x38>)
 800da20:	2201      	movs	r2, #1
 800da22:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800da24:	f7ff ff30 	bl	800d888 <BSP_SD_Init>
 800da28:	4603      	mov	r3, r0
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d107      	bne.n	800da3e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800da2e:	79fb      	ldrb	r3, [r7, #7]
 800da30:	4618      	mov	r0, r3
 800da32:	f7ff ffd1 	bl	800d9d8 <SD_CheckStatus>
 800da36:	4603      	mov	r3, r0
 800da38:	461a      	mov	r2, r3
 800da3a:	4b04      	ldr	r3, [pc, #16]	; (800da4c <SD_initialize+0x38>)
 800da3c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800da3e:	4b03      	ldr	r3, [pc, #12]	; (800da4c <SD_initialize+0x38>)
 800da40:	781b      	ldrb	r3, [r3, #0]
 800da42:	b2db      	uxtb	r3, r3
}
 800da44:	4618      	mov	r0, r3
 800da46:	3708      	adds	r7, #8
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}
 800da4c:	2400000d 	.word	0x2400000d

0800da50 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b082      	sub	sp, #8
 800da54:	af00      	add	r7, sp, #0
 800da56:	4603      	mov	r3, r0
 800da58:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800da5a:	79fb      	ldrb	r3, [r7, #7]
 800da5c:	4618      	mov	r0, r3
 800da5e:	f7ff ffbb 	bl	800d9d8 <SD_CheckStatus>
 800da62:	4603      	mov	r3, r0
}
 800da64:	4618      	mov	r0, r3
 800da66:	3708      	adds	r7, #8
 800da68:	46bd      	mov	sp, r7
 800da6a:	bd80      	pop	{r7, pc}

0800da6c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b086      	sub	sp, #24
 800da70:	af00      	add	r7, sp, #0
 800da72:	60b9      	str	r1, [r7, #8]
 800da74:	607a      	str	r2, [r7, #4]
 800da76:	603b      	str	r3, [r7, #0]
 800da78:	4603      	mov	r3, r0
 800da7a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800da7c:	2301      	movs	r3, #1
 800da7e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800da80:	f04f 33ff 	mov.w	r3, #4294967295
 800da84:	683a      	ldr	r2, [r7, #0]
 800da86:	6879      	ldr	r1, [r7, #4]
 800da88:	68b8      	ldr	r0, [r7, #8]
 800da8a:	f7ff ff23 	bl	800d8d4 <BSP_SD_ReadBlocks>
 800da8e:	4603      	mov	r3, r0
 800da90:	2b00      	cmp	r3, #0
 800da92:	d107      	bne.n	800daa4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800da94:	bf00      	nop
 800da96:	f7ff ff59 	bl	800d94c <BSP_SD_GetCardState>
 800da9a:	4603      	mov	r3, r0
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d1fa      	bne.n	800da96 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800daa0:	2300      	movs	r3, #0
 800daa2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800daa4:	7dfb      	ldrb	r3, [r7, #23]
}
 800daa6:	4618      	mov	r0, r3
 800daa8:	3718      	adds	r7, #24
 800daaa:	46bd      	mov	sp, r7
 800daac:	bd80      	pop	{r7, pc}

0800daae <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800daae:	b580      	push	{r7, lr}
 800dab0:	b086      	sub	sp, #24
 800dab2:	af00      	add	r7, sp, #0
 800dab4:	60b9      	str	r1, [r7, #8]
 800dab6:	607a      	str	r2, [r7, #4]
 800dab8:	603b      	str	r3, [r7, #0]
 800daba:	4603      	mov	r3, r0
 800dabc:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800dabe:	2301      	movs	r3, #1
 800dac0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800dac2:	f04f 33ff 	mov.w	r3, #4294967295
 800dac6:	683a      	ldr	r2, [r7, #0]
 800dac8:	6879      	ldr	r1, [r7, #4]
 800daca:	68b8      	ldr	r0, [r7, #8]
 800dacc:	f7ff ff20 	bl	800d910 <BSP_SD_WriteBlocks>
 800dad0:	4603      	mov	r3, r0
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d107      	bne.n	800dae6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800dad6:	bf00      	nop
 800dad8:	f7ff ff38 	bl	800d94c <BSP_SD_GetCardState>
 800dadc:	4603      	mov	r3, r0
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d1fa      	bne.n	800dad8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800dae2:	2300      	movs	r3, #0
 800dae4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800dae6:	7dfb      	ldrb	r3, [r7, #23]
}
 800dae8:	4618      	mov	r0, r3
 800daea:	3718      	adds	r7, #24
 800daec:	46bd      	mov	sp, r7
 800daee:	bd80      	pop	{r7, pc}

0800daf0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b08c      	sub	sp, #48	; 0x30
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	4603      	mov	r3, r0
 800daf8:	603a      	str	r2, [r7, #0]
 800dafa:	71fb      	strb	r3, [r7, #7]
 800dafc:	460b      	mov	r3, r1
 800dafe:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800db00:	2301      	movs	r3, #1
 800db02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800db06:	4b25      	ldr	r3, [pc, #148]	; (800db9c <SD_ioctl+0xac>)
 800db08:	781b      	ldrb	r3, [r3, #0]
 800db0a:	b2db      	uxtb	r3, r3
 800db0c:	f003 0301 	and.w	r3, r3, #1
 800db10:	2b00      	cmp	r3, #0
 800db12:	d001      	beq.n	800db18 <SD_ioctl+0x28>
 800db14:	2303      	movs	r3, #3
 800db16:	e03c      	b.n	800db92 <SD_ioctl+0xa2>

  switch (cmd)
 800db18:	79bb      	ldrb	r3, [r7, #6]
 800db1a:	2b03      	cmp	r3, #3
 800db1c:	d834      	bhi.n	800db88 <SD_ioctl+0x98>
 800db1e:	a201      	add	r2, pc, #4	; (adr r2, 800db24 <SD_ioctl+0x34>)
 800db20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db24:	0800db35 	.word	0x0800db35
 800db28:	0800db3d 	.word	0x0800db3d
 800db2c:	0800db55 	.word	0x0800db55
 800db30:	0800db6f 	.word	0x0800db6f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800db34:	2300      	movs	r3, #0
 800db36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800db3a:	e028      	b.n	800db8e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800db3c:	f107 0308 	add.w	r3, r7, #8
 800db40:	4618      	mov	r0, r3
 800db42:	f7ff ff13 	bl	800d96c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800db46:	6a3a      	ldr	r2, [r7, #32]
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800db4c:	2300      	movs	r3, #0
 800db4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800db52:	e01c      	b.n	800db8e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800db54:	f107 0308 	add.w	r3, r7, #8
 800db58:	4618      	mov	r0, r3
 800db5a:	f7ff ff07 	bl	800d96c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800db5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db60:	b29a      	uxth	r2, r3
 800db62:	683b      	ldr	r3, [r7, #0]
 800db64:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800db66:	2300      	movs	r3, #0
 800db68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800db6c:	e00f      	b.n	800db8e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800db6e:	f107 0308 	add.w	r3, r7, #8
 800db72:	4618      	mov	r0, r3
 800db74:	f7ff fefa 	bl	800d96c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800db78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db7a:	0a5a      	lsrs	r2, r3, #9
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800db80:	2300      	movs	r3, #0
 800db82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800db86:	e002      	b.n	800db8e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800db88:	2304      	movs	r3, #4
 800db8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800db8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800db92:	4618      	mov	r0, r3
 800db94:	3730      	adds	r7, #48	; 0x30
 800db96:	46bd      	mov	sp, r7
 800db98:	bd80      	pop	{r7, pc}
 800db9a:	bf00      	nop
 800db9c:	2400000d 	.word	0x2400000d

0800dba0 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b084      	sub	sp, #16
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
 800dba8:	460b      	mov	r3, r1
 800dbaa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800dbac:	f44f 701d 	mov.w	r0, #628	; 0x274
 800dbb0:	f003 faac 	bl	801110c <malloc>
 800dbb4:	4603      	mov	r3, r0
 800dbb6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d105      	bne.n	800dbca <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800dbc6:	2302      	movs	r3, #2
 800dbc8:	e034      	b.n	800dc34 <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	68fa      	ldr	r2, [r7, #12]
 800dbce:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	7c1b      	ldrb	r3, [r3, #16]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d115      	bne.n	800dc06 <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800dbda:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dbde:	2202      	movs	r2, #2
 800dbe0:	2101      	movs	r1, #1
 800dbe2:	6878      	ldr	r0, [r7, #4]
 800dbe4:	f003 f8f9 	bl	8010dda <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2201      	movs	r2, #1
 800dbec:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800dbf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dbf4:	2202      	movs	r2, #2
 800dbf6:	2181      	movs	r1, #129	; 0x81
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	f003 f8ee 	bl	8010dda <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2201      	movs	r2, #1
 800dc02:	871a      	strh	r2, [r3, #56]	; 0x38
 800dc04:	e012      	b.n	800dc2c <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800dc06:	2340      	movs	r3, #64	; 0x40
 800dc08:	2202      	movs	r2, #2
 800dc0a:	2101      	movs	r1, #1
 800dc0c:	6878      	ldr	r0, [r7, #4]
 800dc0e:	f003 f8e4 	bl	8010dda <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	2201      	movs	r2, #1
 800dc16:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800dc1a:	2340      	movs	r3, #64	; 0x40
 800dc1c:	2202      	movs	r2, #2
 800dc1e:	2181      	movs	r1, #129	; 0x81
 800dc20:	6878      	ldr	r0, [r7, #4]
 800dc22:	f003 f8da 	bl	8010dda <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	2201      	movs	r2, #1
 800dc2a:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	f000 f98e 	bl	800df4e <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800dc32:	2300      	movs	r3, #0
}
 800dc34:	4618      	mov	r0, r3
 800dc36:	3710      	adds	r7, #16
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}

0800dc3c <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b082      	sub	sp, #8
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
 800dc44:	460b      	mov	r3, r1
 800dc46:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800dc48:	2101      	movs	r1, #1
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f003 f8eb 	bl	8010e26 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2200      	movs	r2, #0
 800dc54:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800dc58:	2181      	movs	r1, #129	; 0x81
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f003 f8e3 	bl	8010e26 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2200      	movs	r2, #0
 800dc64:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	f000 f9c7 	bl	800dffa <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d009      	beq.n	800dc8a <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	f003 fa4d 	bl	801111c <free>
    pdev->pClassData = NULL;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	2200      	movs	r2, #0
 800dc86:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800dc8a:	2300      	movs	r3, #0
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3708      	adds	r7, #8
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}

0800dc94 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b086      	sub	sp, #24
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
 800dc9c:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dca4:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800dca6:	2300      	movs	r3, #0
 800dca8:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800dcaa:	2300      	movs	r3, #0
 800dcac:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	781b      	ldrb	r3, [r3, #0]
 800dcb2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d04d      	beq.n	800dd56 <USBD_MSC_Setup+0xc2>
 800dcba:	2b20      	cmp	r3, #32
 800dcbc:	f040 80c6 	bne.w	800de4c <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	785b      	ldrb	r3, [r3, #1]
 800dcc4:	2bfe      	cmp	r3, #254	; 0xfe
 800dcc6:	d002      	beq.n	800dcce <USBD_MSC_Setup+0x3a>
 800dcc8:	2bff      	cmp	r3, #255	; 0xff
 800dcca:	d024      	beq.n	800dd16 <USBD_MSC_Setup+0x82>
 800dccc:	e03b      	b.n	800dd46 <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800dcce:	683b      	ldr	r3, [r7, #0]
 800dcd0:	885b      	ldrh	r3, [r3, #2]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d118      	bne.n	800dd08 <USBD_MSC_Setup+0x74>
 800dcd6:	683b      	ldr	r3, [r7, #0]
 800dcd8:	88db      	ldrh	r3, [r3, #6]
 800dcda:	2b01      	cmp	r3, #1
 800dcdc:	d114      	bne.n	800dd08 <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	781b      	ldrb	r3, [r3, #0]
 800dce2:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	da0f      	bge.n	800dd08 <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dcee:	699b      	ldr	r3, [r3, #24]
 800dcf0:	4798      	blx	r3
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	461a      	mov	r2, r3
 800dcf6:	693b      	ldr	r3, [r7, #16]
 800dcf8:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800dcfa:	693b      	ldr	r3, [r7, #16]
 800dcfc:	2201      	movs	r2, #1
 800dcfe:	4619      	mov	r1, r3
 800dd00:	6878      	ldr	r0, [r7, #4]
 800dd02:	f002 fc58 	bl	80105b6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800dd06:	e025      	b.n	800dd54 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800dd08:	6839      	ldr	r1, [r7, #0]
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f002 fbe2 	bl	80104d4 <USBD_CtlError>
        ret = USBD_FAIL;
 800dd10:	2303      	movs	r3, #3
 800dd12:	75fb      	strb	r3, [r7, #23]
      break;
 800dd14:	e01e      	b.n	800dd54 <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800dd16:	683b      	ldr	r3, [r7, #0]
 800dd18:	885b      	ldrh	r3, [r3, #2]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d10c      	bne.n	800dd38 <USBD_MSC_Setup+0xa4>
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	88db      	ldrh	r3, [r3, #6]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d108      	bne.n	800dd38 <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	781b      	ldrb	r3, [r3, #0]
 800dd2a:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	db03      	blt.n	800dd38 <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 800dd30:	6878      	ldr	r0, [r7, #4]
 800dd32:	f000 f940 	bl	800dfb6 <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800dd36:	e00d      	b.n	800dd54 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800dd38:	6839      	ldr	r1, [r7, #0]
 800dd3a:	6878      	ldr	r0, [r7, #4]
 800dd3c:	f002 fbca 	bl	80104d4 <USBD_CtlError>
        ret = USBD_FAIL;
 800dd40:	2303      	movs	r3, #3
 800dd42:	75fb      	strb	r3, [r7, #23]
      break;
 800dd44:	e006      	b.n	800dd54 <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 800dd46:	6839      	ldr	r1, [r7, #0]
 800dd48:	6878      	ldr	r0, [r7, #4]
 800dd4a:	f002 fbc3 	bl	80104d4 <USBD_CtlError>
      ret = USBD_FAIL;
 800dd4e:	2303      	movs	r3, #3
 800dd50:	75fb      	strb	r3, [r7, #23]
      break;
 800dd52:	bf00      	nop
    }
    break;
 800dd54:	e081      	b.n	800de5a <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800dd56:	683b      	ldr	r3, [r7, #0]
 800dd58:	785b      	ldrb	r3, [r3, #1]
 800dd5a:	2b0b      	cmp	r3, #11
 800dd5c:	d86d      	bhi.n	800de3a <USBD_MSC_Setup+0x1a6>
 800dd5e:	a201      	add	r2, pc, #4	; (adr r2, 800dd64 <USBD_MSC_Setup+0xd0>)
 800dd60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd64:	0800dd95 	.word	0x0800dd95
 800dd68:	0800de0b 	.word	0x0800de0b
 800dd6c:	0800de3b 	.word	0x0800de3b
 800dd70:	0800de3b 	.word	0x0800de3b
 800dd74:	0800de3b 	.word	0x0800de3b
 800dd78:	0800de3b 	.word	0x0800de3b
 800dd7c:	0800de3b 	.word	0x0800de3b
 800dd80:	0800de3b 	.word	0x0800de3b
 800dd84:	0800de3b 	.word	0x0800de3b
 800dd88:	0800de3b 	.word	0x0800de3b
 800dd8c:	0800ddbd 	.word	0x0800ddbd
 800dd90:	0800dde5 	.word	0x0800dde5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd9a:	2b03      	cmp	r3, #3
 800dd9c:	d107      	bne.n	800ddae <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800dd9e:	f107 030e 	add.w	r3, r7, #14
 800dda2:	2202      	movs	r2, #2
 800dda4:	4619      	mov	r1, r3
 800dda6:	6878      	ldr	r0, [r7, #4]
 800dda8:	f002 fc05 	bl	80105b6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ddac:	e04d      	b.n	800de4a <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800ddae:	6839      	ldr	r1, [r7, #0]
 800ddb0:	6878      	ldr	r0, [r7, #4]
 800ddb2:	f002 fb8f 	bl	80104d4 <USBD_CtlError>
        ret = USBD_FAIL;
 800ddb6:	2303      	movs	r3, #3
 800ddb8:	75fb      	strb	r3, [r7, #23]
      break;
 800ddba:	e046      	b.n	800de4a <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddc2:	2b03      	cmp	r3, #3
 800ddc4:	d107      	bne.n	800ddd6 <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800ddc6:	693b      	ldr	r3, [r7, #16]
 800ddc8:	3304      	adds	r3, #4
 800ddca:	2201      	movs	r2, #1
 800ddcc:	4619      	mov	r1, r3
 800ddce:	6878      	ldr	r0, [r7, #4]
 800ddd0:	f002 fbf1 	bl	80105b6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ddd4:	e039      	b.n	800de4a <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800ddd6:	6839      	ldr	r1, [r7, #0]
 800ddd8:	6878      	ldr	r0, [r7, #4]
 800ddda:	f002 fb7b 	bl	80104d4 <USBD_CtlError>
        ret = USBD_FAIL;
 800ddde:	2303      	movs	r3, #3
 800dde0:	75fb      	strb	r3, [r7, #23]
      break;
 800dde2:	e032      	b.n	800de4a <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddea:	2b03      	cmp	r3, #3
 800ddec:	d106      	bne.n	800ddfc <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	885b      	ldrh	r3, [r3, #2]
 800ddf2:	b2db      	uxtb	r3, r3
 800ddf4:	461a      	mov	r2, r3
 800ddf6:	693b      	ldr	r3, [r7, #16]
 800ddf8:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ddfa:	e026      	b.n	800de4a <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800ddfc:	6839      	ldr	r1, [r7, #0]
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	f002 fb68 	bl	80104d4 <USBD_CtlError>
        ret = USBD_FAIL;
 800de04:	2303      	movs	r3, #3
 800de06:	75fb      	strb	r3, [r7, #23]
      break;
 800de08:	e01f      	b.n	800de4a <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de10:	2b03      	cmp	r3, #3
 800de12:	d119      	bne.n	800de48 <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	885b      	ldrh	r3, [r3, #2]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d115      	bne.n	800de48 <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	889b      	ldrh	r3, [r3, #4]
 800de20:	b2db      	uxtb	r3, r3
 800de22:	4619      	mov	r1, r3
 800de24:	6878      	ldr	r0, [r7, #4]
 800de26:	f003 f81d 	bl	8010e64 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	889b      	ldrh	r3, [r3, #4]
 800de2e:	b2db      	uxtb	r3, r3
 800de30:	4619      	mov	r1, r3
 800de32:	6878      	ldr	r0, [r7, #4]
 800de34:	f000 fa5a 	bl	800e2ec <MSC_BOT_CplClrFeature>
        }
      }
      break;
 800de38:	e006      	b.n	800de48 <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 800de3a:	6839      	ldr	r1, [r7, #0]
 800de3c:	6878      	ldr	r0, [r7, #4]
 800de3e:	f002 fb49 	bl	80104d4 <USBD_CtlError>
      ret = USBD_FAIL;
 800de42:	2303      	movs	r3, #3
 800de44:	75fb      	strb	r3, [r7, #23]
      break;
 800de46:	e000      	b.n	800de4a <USBD_MSC_Setup+0x1b6>
      break;
 800de48:	bf00      	nop
    }
    break;
 800de4a:	e006      	b.n	800de5a <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 800de4c:	6839      	ldr	r1, [r7, #0]
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	f002 fb40 	bl	80104d4 <USBD_CtlError>
    ret = USBD_FAIL;
 800de54:	2303      	movs	r3, #3
 800de56:	75fb      	strb	r3, [r7, #23]
    break;
 800de58:	bf00      	nop
  }

  return (uint8_t)ret;
 800de5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800de5c:	4618      	mov	r0, r3
 800de5e:	3718      	adds	r7, #24
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}

0800de64 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b082      	sub	sp, #8
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
 800de6c:	460b      	mov	r3, r1
 800de6e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800de70:	78fb      	ldrb	r3, [r7, #3]
 800de72:	4619      	mov	r1, r3
 800de74:	6878      	ldr	r0, [r7, #4]
 800de76:	f000 f8d1 	bl	800e01c <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800de7a:	2300      	movs	r3, #0
}
 800de7c:	4618      	mov	r0, r3
 800de7e:	3708      	adds	r7, #8
 800de80:	46bd      	mov	sp, r7
 800de82:	bd80      	pop	{r7, pc}

0800de84 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b082      	sub	sp, #8
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
 800de8c:	460b      	mov	r3, r1
 800de8e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800de90:	78fb      	ldrb	r3, [r7, #3]
 800de92:	4619      	mov	r1, r3
 800de94:	6878      	ldr	r0, [r7, #4]
 800de96:	f000 f8f2 	bl	800e07e <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800de9a:	2300      	movs	r3, #0
}
 800de9c:	4618      	mov	r0, r3
 800de9e:	3708      	adds	r7, #8
 800dea0:	46bd      	mov	sp, r7
 800dea2:	bd80      	pop	{r7, pc}

0800dea4 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800dea4:	b480      	push	{r7}
 800dea6:	b083      	sub	sp, #12
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2220      	movs	r2, #32
 800deb0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 800deb2:	4b03      	ldr	r3, [pc, #12]	; (800dec0 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 800deb4:	4618      	mov	r0, r3
 800deb6:	370c      	adds	r7, #12
 800deb8:	46bd      	mov	sp, r7
 800deba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800debe:	4770      	bx	lr
 800dec0:	24000048 	.word	0x24000048

0800dec4 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800dec4:	b480      	push	{r7}
 800dec6:	b083      	sub	sp, #12
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2220      	movs	r2, #32
 800ded0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 800ded2:	4b03      	ldr	r3, [pc, #12]	; (800dee0 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 800ded4:	4618      	mov	r0, r3
 800ded6:	370c      	adds	r7, #12
 800ded8:	46bd      	mov	sp, r7
 800deda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dede:	4770      	bx	lr
 800dee0:	24000068 	.word	0x24000068

0800dee4 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800dee4:	b480      	push	{r7}
 800dee6:	b083      	sub	sp, #12
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	2220      	movs	r2, #32
 800def0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 800def2:	4b03      	ldr	r3, [pc, #12]	; (800df00 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 800def4:	4618      	mov	r0, r3
 800def6:	370c      	adds	r7, #12
 800def8:	46bd      	mov	sp, r7
 800defa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defe:	4770      	bx	lr
 800df00:	24000088 	.word	0x24000088

0800df04 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800df04:	b480      	push	{r7}
 800df06:	b083      	sub	sp, #12
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	220a      	movs	r2, #10
 800df10:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800df12:	4b03      	ldr	r3, [pc, #12]	; (800df20 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800df14:	4618      	mov	r0, r3
 800df16:	370c      	adds	r7, #12
 800df18:	46bd      	mov	sp, r7
 800df1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1e:	4770      	bx	lr
 800df20:	240000a8 	.word	0x240000a8

0800df24 <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800df24:	b480      	push	{r7}
 800df26:	b083      	sub	sp, #12
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
 800df2c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d101      	bne.n	800df38 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800df34:	2303      	movs	r3, #3
 800df36:	e004      	b.n	800df42 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	683a      	ldr	r2, [r7, #0]
 800df3c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800df40:	2300      	movs	r3, #0
}
 800df42:	4618      	mov	r0, r3
 800df44:	370c      	adds	r7, #12
 800df46:	46bd      	mov	sp, r7
 800df48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4c:	4770      	bx	lr

0800df4e <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800df4e:	b580      	push	{r7, lr}
 800df50:	b084      	sub	sp, #16
 800df52:	af00      	add	r7, sp, #0
 800df54:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800df5c:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	2200      	movs	r2, #0
 800df62:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	2200      	movs	r2, #0
 800df68:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	2200      	movs	r2, #0
 800df6e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	2200      	movs	r2, #0
 800df76:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	2200      	movs	r2, #0
 800df7e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	2000      	movs	r0, #0
 800df8c:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 800df8e:	2101      	movs	r1, #1
 800df90:	6878      	ldr	r0, [r7, #4]
 800df92:	f002 ff67 	bl	8010e64 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800df96:	2181      	movs	r1, #129	; 0x81
 800df98:	6878      	ldr	r0, [r7, #4]
 800df9a:	f002 ff63 	bl	8010e64 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800dfa4:	231f      	movs	r3, #31
 800dfa6:	2101      	movs	r1, #1
 800dfa8:	6878      	ldr	r0, [r7, #4]
 800dfaa:	f003 f824 	bl	8010ff6 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800dfae:	bf00      	nop
 800dfb0:	3710      	adds	r7, #16
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}

0800dfb6 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800dfb6:	b580      	push	{r7, lr}
 800dfb8:	b084      	sub	sp, #16
 800dfba:	af00      	add	r7, sp, #0
 800dfbc:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dfc4:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	2200      	movs	r2, #0
 800dfca:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	2201      	movs	r2, #1
 800dfd0:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 800dfd2:	2181      	movs	r1, #129	; 0x81
 800dfd4:	6878      	ldr	r0, [r7, #4]
 800dfd6:	f002 ff83 	bl	8010ee0 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 800dfda:	2101      	movs	r1, #1
 800dfdc:	6878      	ldr	r0, [r7, #4]
 800dfde:	f002 ff7f 	bl	8010ee0 <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800dfe8:	231f      	movs	r3, #31
 800dfea:	2101      	movs	r1, #1
 800dfec:	6878      	ldr	r0, [r7, #4]
 800dfee:	f003 f802 	bl	8010ff6 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800dff2:	bf00      	nop
 800dff4:	3710      	adds	r7, #16
 800dff6:	46bd      	mov	sp, r7
 800dff8:	bd80      	pop	{r7, pc}

0800dffa <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800dffa:	b480      	push	{r7}
 800dffc:	b085      	sub	sp, #20
 800dffe:	af00      	add	r7, sp, #0
 800e000:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e008:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	2200      	movs	r2, #0
 800e00e:	721a      	strb	r2, [r3, #8]
}
 800e010:	bf00      	nop
 800e012:	3714      	adds	r7, #20
 800e014:	46bd      	mov	sp, r7
 800e016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01a:	4770      	bx	lr

0800e01c <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b084      	sub	sp, #16
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
 800e024:	460b      	mov	r3, r1
 800e026:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e02e:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	7a1b      	ldrb	r3, [r3, #8]
 800e034:	2b02      	cmp	r3, #2
 800e036:	d004      	beq.n	800e042 <MSC_BOT_DataIn+0x26>
 800e038:	2b02      	cmp	r3, #2
 800e03a:	db19      	blt.n	800e070 <MSC_BOT_DataIn+0x54>
 800e03c:	2b04      	cmp	r3, #4
 800e03e:	dc17      	bgt.n	800e070 <MSC_BOT_DataIn+0x54>
 800e040:	e011      	b.n	800e066 <MSC_BOT_DataIn+0x4a>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800e04e:	461a      	mov	r2, r3
 800e050:	6878      	ldr	r0, [r7, #4]
 800e052:	f000 f973 	bl	800e33c <SCSI_ProcessCmd>
 800e056:	4603      	mov	r3, r0
 800e058:	2b00      	cmp	r3, #0
 800e05a:	da0b      	bge.n	800e074 <MSC_BOT_DataIn+0x58>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800e05c:	2101      	movs	r1, #1
 800e05e:	6878      	ldr	r0, [r7, #4]
 800e060:	f000 f8ea 	bl	800e238 <MSC_BOT_SendCSW>
    }
    break;
 800e064:	e006      	b.n	800e074 <MSC_BOT_DataIn+0x58>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800e066:	2100      	movs	r1, #0
 800e068:	6878      	ldr	r0, [r7, #4]
 800e06a:	f000 f8e5 	bl	800e238 <MSC_BOT_SendCSW>
    break;
 800e06e:	e002      	b.n	800e076 <MSC_BOT_DataIn+0x5a>

  default:
    break;
 800e070:	bf00      	nop
 800e072:	e000      	b.n	800e076 <MSC_BOT_DataIn+0x5a>
    break;
 800e074:	bf00      	nop
  }
}
 800e076:	bf00      	nop
 800e078:	3710      	adds	r7, #16
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}

0800e07e <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e07e:	b580      	push	{r7, lr}
 800e080:	b084      	sub	sp, #16
 800e082:	af00      	add	r7, sp, #0
 800e084:	6078      	str	r0, [r7, #4]
 800e086:	460b      	mov	r3, r1
 800e088:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e090:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	7a1b      	ldrb	r3, [r3, #8]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d002      	beq.n	800e0a0 <MSC_BOT_DataOut+0x22>
 800e09a:	2b01      	cmp	r3, #1
 800e09c:	d004      	beq.n	800e0a8 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800e09e:	e015      	b.n	800e0cc <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 800e0a0:	6878      	ldr	r0, [r7, #4]
 800e0a2:	f000 f817 	bl	800e0d4 <MSC_BOT_CBW_Decode>
      break;
 800e0a6:	e011      	b.n	800e0cc <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800e0b4:	461a      	mov	r2, r3
 800e0b6:	6878      	ldr	r0, [r7, #4]
 800e0b8:	f000 f940 	bl	800e33c <SCSI_ProcessCmd>
 800e0bc:	4603      	mov	r3, r0
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	da03      	bge.n	800e0ca <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800e0c2:	2101      	movs	r1, #1
 800e0c4:	6878      	ldr	r0, [r7, #4]
 800e0c6:	f000 f8b7 	bl	800e238 <MSC_BOT_SendCSW>
      break;
 800e0ca:	bf00      	nop
  }
}
 800e0cc:	bf00      	nop
 800e0ce:	3710      	adds	r7, #16
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	bd80      	pop	{r7, pc}

0800e0d4 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b084      	sub	sp, #16
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e0e2:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800e0fc:	2101      	movs	r1, #1
 800e0fe:	6878      	ldr	r0, [r7, #4]
 800e100:	f002 ff9a 	bl	8011038 <USBD_LL_GetRxDataSize>
 800e104:	4603      	mov	r3, r0
 800e106:	2b1f      	cmp	r3, #31
 800e108:	d114      	bne.n	800e134 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800e110:	4a32      	ldr	r2, [pc, #200]	; (800e1dc <MSC_BOT_CBW_Decode+0x108>)
 800e112:	4293      	cmp	r3, r2
 800e114:	d10e      	bne.n	800e134 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800e11c:	2b01      	cmp	r3, #1
 800e11e:	d809      	bhi.n	800e134 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800e126:	2b00      	cmp	r3, #0
 800e128:	d004      	beq.n	800e134 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength > 16U))
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800e130:	2b10      	cmp	r3, #16
 800e132:	d90e      	bls.n	800e152 <MSC_BOT_CBW_Decode+0x7e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e13a:	2320      	movs	r3, #32
 800e13c:	2205      	movs	r2, #5
 800e13e:	6878      	ldr	r0, [r7, #4]
 800e140:	f000 fcc9 	bl	800ead6 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	2202      	movs	r2, #2
 800e148:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800e14a:	6878      	ldr	r0, [r7, #4]
 800e14c:	f000 f8a0 	bl	800e290 <MSC_BOT_Abort>
 800e150:	e041      	b.n	800e1d6 <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800e15e:	461a      	mov	r2, r3
 800e160:	6878      	ldr	r0, [r7, #4]
 800e162:	f000 f8eb 	bl	800e33c <SCSI_ProcessCmd>
 800e166:	4603      	mov	r3, r0
 800e168:	2b00      	cmp	r3, #0
 800e16a:	da0c      	bge.n	800e186 <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	7a1b      	ldrb	r3, [r3, #8]
 800e170:	2b05      	cmp	r3, #5
 800e172:	d104      	bne.n	800e17e <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800e174:	2101      	movs	r1, #1
 800e176:	6878      	ldr	r0, [r7, #4]
 800e178:	f000 f85e 	bl	800e238 <MSC_BOT_SendCSW>
 800e17c:	e02b      	b.n	800e1d6 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800e17e:	6878      	ldr	r0, [r7, #4]
 800e180:	f000 f886 	bl	800e290 <MSC_BOT_Abort>
 800e184:	e027      	b.n	800e1d6 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	7a1b      	ldrb	r3, [r3, #8]
 800e18a:	2b02      	cmp	r3, #2
 800e18c:	d022      	beq.n	800e1d4 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800e192:	2b01      	cmp	r3, #1
 800e194:	d01e      	beq.n	800e1d4 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800e19a:	2b03      	cmp	r3, #3
 800e19c:	d01a      	beq.n	800e1d4 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	68db      	ldr	r3, [r3, #12]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d009      	beq.n	800e1ba <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	f103 0110 	add.w	r1, r3, #16
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	68db      	ldr	r3, [r3, #12]
 800e1b0:	461a      	mov	r2, r3
 800e1b2:	6878      	ldr	r0, [r7, #4]
 800e1b4:	f000 f814 	bl	800e1e0 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800e1b8:	e00d      	b.n	800e1d6 <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	68db      	ldr	r3, [r3, #12]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d104      	bne.n	800e1cc <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800e1c2:	2100      	movs	r1, #0
 800e1c4:	6878      	ldr	r0, [r7, #4]
 800e1c6:	f000 f837 	bl	800e238 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800e1ca:	e004      	b.n	800e1d6 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800e1cc:	6878      	ldr	r0, [r7, #4]
 800e1ce:	f000 f85f 	bl	800e290 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800e1d2:	e000      	b.n	800e1d6 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 800e1d4:	bf00      	nop
    }
  }
}
 800e1d6:	3710      	adds	r7, #16
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	bd80      	pop	{r7, pc}
 800e1dc:	43425355 	.word	0x43425355

0800e1e0 <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b086      	sub	sp, #24
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	60f8      	str	r0, [r7, #12]
 800e1e8:	60b9      	str	r1, [r7, #8]
 800e1ea:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e1f2:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 800e1f4:	697b      	ldr	r3, [r7, #20]
 800e1f6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e1fa:	687a      	ldr	r2, [r7, #4]
 800e1fc:	4293      	cmp	r3, r2
 800e1fe:	bf28      	it	cs
 800e200:	4613      	movcs	r3, r2
 800e202:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800e204:	697b      	ldr	r3, [r7, #20]
 800e206:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	1ad2      	subs	r2, r2, r3
 800e20e:	697b      	ldr	r3, [r7, #20]
 800e210:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800e214:	697b      	ldr	r3, [r7, #20]
 800e216:	2200      	movs	r2, #0
 800e218:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800e21c:	697b      	ldr	r3, [r7, #20]
 800e21e:	2204      	movs	r2, #4
 800e220:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 800e222:	693b      	ldr	r3, [r7, #16]
 800e224:	68ba      	ldr	r2, [r7, #8]
 800e226:	2181      	movs	r1, #129	; 0x81
 800e228:	68f8      	ldr	r0, [r7, #12]
 800e22a:	f002 fec3 	bl	8010fb4 <USBD_LL_Transmit>
}
 800e22e:	bf00      	nop
 800e230:	3718      	adds	r7, #24
 800e232:	46bd      	mov	sp, r7
 800e234:	bd80      	pop	{r7, pc}
	...

0800e238 <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b084      	sub	sp, #16
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
 800e240:	460b      	mov	r3, r1
 800e242:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e24a:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	4a0f      	ldr	r2, [pc, #60]	; (800e28c <MSC_BOT_SendCSW+0x54>)
 800e250:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	78fa      	ldrb	r2, [r7, #3]
 800e258:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	2200      	movs	r2, #0
 800e260:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	f503 720c 	add.w	r2, r3, #560	; 0x230
 800e268:	230d      	movs	r3, #13
 800e26a:	2181      	movs	r1, #129	; 0x81
 800e26c:	6878      	ldr	r0, [r7, #4]
 800e26e:	f002 fea1 	bl	8010fb4 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800e278:	231f      	movs	r3, #31
 800e27a:	2101      	movs	r1, #1
 800e27c:	6878      	ldr	r0, [r7, #4]
 800e27e:	f002 feba 	bl	8010ff6 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800e282:	bf00      	nop
 800e284:	3710      	adds	r7, #16
 800e286:	46bd      	mov	sp, r7
 800e288:	bd80      	pop	{r7, pc}
 800e28a:	bf00      	nop
 800e28c:	53425355 	.word	0x53425355

0800e290 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b084      	sub	sp, #16
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e29e:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d10c      	bne.n	800e2c4 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d007      	beq.n	800e2c4 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d103      	bne.n	800e2c4 <MSC_BOT_Abort+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800e2bc:	2101      	movs	r1, #1
 800e2be:	6878      	ldr	r0, [r7, #4]
 800e2c0:	f002 fdef 	bl	8010ea2 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800e2c4:	2181      	movs	r1, #129	; 0x81
 800e2c6:	6878      	ldr	r0, [r7, #4]
 800e2c8:	f002 fdeb 	bl	8010ea2 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	7a5b      	ldrb	r3, [r3, #9]
 800e2d0:	2b02      	cmp	r3, #2
 800e2d2:	d107      	bne.n	800e2e4 <MSC_BOT_Abort+0x54>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800e2d4:	2181      	movs	r1, #129	; 0x81
 800e2d6:	6878      	ldr	r0, [r7, #4]
 800e2d8:	f002 fde3 	bl	8010ea2 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800e2dc:	2101      	movs	r1, #1
 800e2de:	6878      	ldr	r0, [r7, #4]
 800e2e0:	f002 fddf 	bl	8010ea2 <USBD_LL_StallEP>
  }
}
 800e2e4:	bf00      	nop
 800e2e6:	3710      	adds	r7, #16
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	bd80      	pop	{r7, pc}

0800e2ec <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b084      	sub	sp, #16
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
 800e2f4:	460b      	mov	r3, r1
 800e2f6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e2fe:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	7a5b      	ldrb	r3, [r3, #9]
 800e304:	2b02      	cmp	r3, #2
 800e306:	d108      	bne.n	800e31a <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800e308:	2181      	movs	r1, #129	; 0x81
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	f002 fdc9 	bl	8010ea2 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800e310:	2101      	movs	r1, #1
 800e312:	6878      	ldr	r0, [r7, #4]
 800e314:	f002 fdc5 	bl	8010ea2 <USBD_LL_StallEP>
 800e318:	e00d      	b.n	800e336 <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800e31a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	da08      	bge.n	800e334 <MSC_BOT_CplClrFeature+0x48>
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	7a5b      	ldrb	r3, [r3, #9]
 800e326:	2b01      	cmp	r3, #1
 800e328:	d004      	beq.n	800e334 <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800e32a:	2101      	movs	r1, #1
 800e32c:	6878      	ldr	r0, [r7, #4]
 800e32e:	f7ff ff83 	bl	800e238 <MSC_BOT_SendCSW>
 800e332:	e000      	b.n	800e336 <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 800e334:	bf00      	nop
  }
}
 800e336:	3710      	adds	r7, #16
 800e338:	46bd      	mov	sp, r7
 800e33a:	bd80      	pop	{r7, pc}

0800e33c <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b086      	sub	sp, #24
 800e340:	af00      	add	r7, sp, #0
 800e342:	60f8      	str	r0, [r7, #12]
 800e344:	460b      	mov	r3, r1
 800e346:	607a      	str	r2, [r7, #4]
 800e348:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e350:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	781b      	ldrb	r3, [r3, #0]
 800e356:	2b25      	cmp	r3, #37	; 0x25
 800e358:	d06e      	beq.n	800e438 <SCSI_ProcessCmd+0xfc>
 800e35a:	2b25      	cmp	r3, #37	; 0x25
 800e35c:	dc11      	bgt.n	800e382 <SCSI_ProcessCmd+0x46>
 800e35e:	2b1a      	cmp	r3, #26
 800e360:	d04f      	beq.n	800e402 <SCSI_ProcessCmd+0xc6>
 800e362:	2b1a      	cmp	r3, #26
 800e364:	dc06      	bgt.n	800e374 <SCSI_ProcessCmd+0x38>
 800e366:	2b03      	cmp	r3, #3
 800e368:	d027      	beq.n	800e3ba <SCSI_ProcessCmd+0x7e>
 800e36a:	2b12      	cmp	r3, #18
 800e36c:	d02e      	beq.n	800e3cc <SCSI_ProcessCmd+0x90>
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d01a      	beq.n	800e3a8 <SCSI_ProcessCmd+0x6c>
 800e372:	e0a0      	b.n	800e4b6 <SCSI_ProcessCmd+0x17a>
 800e374:	2b1e      	cmp	r3, #30
 800e376:	d03b      	beq.n	800e3f0 <SCSI_ProcessCmd+0xb4>
 800e378:	2b23      	cmp	r3, #35	; 0x23
 800e37a:	d054      	beq.n	800e426 <SCSI_ProcessCmd+0xea>
 800e37c:	2b1b      	cmp	r3, #27
 800e37e:	d02e      	beq.n	800e3de <SCSI_ProcessCmd+0xa2>
 800e380:	e099      	b.n	800e4b6 <SCSI_ProcessCmd+0x17a>
 800e382:	2b5a      	cmp	r3, #90	; 0x5a
 800e384:	d046      	beq.n	800e414 <SCSI_ProcessCmd+0xd8>
 800e386:	2b5a      	cmp	r3, #90	; 0x5a
 800e388:	dc07      	bgt.n	800e39a <SCSI_ProcessCmd+0x5e>
 800e38a:	2b2a      	cmp	r3, #42	; 0x2a
 800e38c:	d078      	beq.n	800e480 <SCSI_ProcessCmd+0x144>
 800e38e:	2b2f      	cmp	r3, #47	; 0x2f
 800e390:	f000 8088 	beq.w	800e4a4 <SCSI_ProcessCmd+0x168>
 800e394:	2b28      	cmp	r3, #40	; 0x28
 800e396:	d061      	beq.n	800e45c <SCSI_ProcessCmd+0x120>
 800e398:	e08d      	b.n	800e4b6 <SCSI_ProcessCmd+0x17a>
 800e39a:	2ba8      	cmp	r3, #168	; 0xa8
 800e39c:	d067      	beq.n	800e46e <SCSI_ProcessCmd+0x132>
 800e39e:	2baa      	cmp	r3, #170	; 0xaa
 800e3a0:	d077      	beq.n	800e492 <SCSI_ProcessCmd+0x156>
 800e3a2:	2b9e      	cmp	r3, #158	; 0x9e
 800e3a4:	d051      	beq.n	800e44a <SCSI_ProcessCmd+0x10e>
 800e3a6:	e086      	b.n	800e4b6 <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800e3a8:	7afb      	ldrb	r3, [r7, #11]
 800e3aa:	687a      	ldr	r2, [r7, #4]
 800e3ac:	4619      	mov	r1, r3
 800e3ae:	68f8      	ldr	r0, [r7, #12]
 800e3b0:	f000 f893 	bl	800e4da <SCSI_TestUnitReady>
 800e3b4:	4603      	mov	r3, r0
 800e3b6:	75fb      	strb	r3, [r7, #23]
    break;
 800e3b8:	e089      	b.n	800e4ce <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 800e3ba:	7afb      	ldrb	r3, [r7, #11]
 800e3bc:	687a      	ldr	r2, [r7, #4]
 800e3be:	4619      	mov	r1, r3
 800e3c0:	68f8      	ldr	r0, [r7, #12]
 800e3c2:	f000 fb0f 	bl	800e9e4 <SCSI_RequestSense>
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	75fb      	strb	r3, [r7, #23]
    break;
 800e3ca:	e080      	b.n	800e4ce <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 800e3cc:	7afb      	ldrb	r3, [r7, #11]
 800e3ce:	687a      	ldr	r2, [r7, #4]
 800e3d0:	4619      	mov	r1, r3
 800e3d2:	68f8      	ldr	r0, [r7, #12]
 800e3d4:	f000 f8cc 	bl	800e570 <SCSI_Inquiry>
 800e3d8:	4603      	mov	r3, r0
 800e3da:	75fb      	strb	r3, [r7, #23]
    break;
 800e3dc:	e077      	b.n	800e4ce <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800e3de:	7afb      	ldrb	r3, [r7, #11]
 800e3e0:	687a      	ldr	r2, [r7, #4]
 800e3e2:	4619      	mov	r1, r3
 800e3e4:	68f8      	ldr	r0, [r7, #12]
 800e3e6:	f000 fbb9 	bl	800eb5c <SCSI_StartStopUnit>
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	75fb      	strb	r3, [r7, #23]
    break;
 800e3ee:	e06e      	b.n	800e4ce <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800e3f0:	7afb      	ldrb	r3, [r7, #11]
 800e3f2:	687a      	ldr	r2, [r7, #4]
 800e3f4:	4619      	mov	r1, r3
 800e3f6:	68f8      	ldr	r0, [r7, #12]
 800e3f8:	f000 fbfb 	bl	800ebf2 <SCSI_AllowPreventRemovable>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	75fb      	strb	r3, [r7, #23]
    break;
 800e400:	e065      	b.n	800e4ce <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 800e402:	7afb      	ldrb	r3, [r7, #11]
 800e404:	687a      	ldr	r2, [r7, #4]
 800e406:	4619      	mov	r1, r3
 800e408:	68f8      	ldr	r0, [r7, #12]
 800e40a:	f000 fa9f 	bl	800e94c <SCSI_ModeSense6>
 800e40e:	4603      	mov	r3, r0
 800e410:	75fb      	strb	r3, [r7, #23]
    break;
 800e412:	e05c      	b.n	800e4ce <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 800e414:	7afb      	ldrb	r3, [r7, #11]
 800e416:	687a      	ldr	r2, [r7, #4]
 800e418:	4619      	mov	r1, r3
 800e41a:	68f8      	ldr	r0, [r7, #12]
 800e41c:	f000 fabc 	bl	800e998 <SCSI_ModeSense10>
 800e420:	4603      	mov	r3, r0
 800e422:	75fb      	strb	r3, [r7, #23]
    break;
 800e424:	e053      	b.n	800e4ce <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800e426:	7afb      	ldrb	r3, [r7, #11]
 800e428:	687a      	ldr	r2, [r7, #4]
 800e42a:	4619      	mov	r1, r3
 800e42c:	68f8      	ldr	r0, [r7, #12]
 800e42e:	f000 fa20 	bl	800e872 <SCSI_ReadFormatCapacity>
 800e432:	4603      	mov	r3, r0
 800e434:	75fb      	strb	r3, [r7, #23]
    break;
 800e436:	e04a      	b.n	800e4ce <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800e438:	7afb      	ldrb	r3, [r7, #11]
 800e43a:	687a      	ldr	r2, [r7, #4]
 800e43c:	4619      	mov	r1, r3
 800e43e:	68f8      	ldr	r0, [r7, #12]
 800e440:	f000 f904 	bl	800e64c <SCSI_ReadCapacity10>
 800e444:	4603      	mov	r3, r0
 800e446:	75fb      	strb	r3, [r7, #23]
    break;
 800e448:	e041      	b.n	800e4ce <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800e44a:	7afb      	ldrb	r3, [r7, #11]
 800e44c:	687a      	ldr	r2, [r7, #4]
 800e44e:	4619      	mov	r1, r3
 800e450:	68f8      	ldr	r0, [r7, #12]
 800e452:	f000 f96a 	bl	800e72a <SCSI_ReadCapacity16>
 800e456:	4603      	mov	r3, r0
 800e458:	75fb      	strb	r3, [r7, #23]
    break;
 800e45a:	e038      	b.n	800e4ce <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 800e45c:	7afb      	ldrb	r3, [r7, #11]
 800e45e:	687a      	ldr	r2, [r7, #4]
 800e460:	4619      	mov	r1, r3
 800e462:	68f8      	ldr	r0, [r7, #12]
 800e464:	f000 fbe8 	bl	800ec38 <SCSI_Read10>
 800e468:	4603      	mov	r3, r0
 800e46a:	75fb      	strb	r3, [r7, #23]
    break;
 800e46c:	e02f      	b.n	800e4ce <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 800e46e:	7afb      	ldrb	r3, [r7, #11]
 800e470:	687a      	ldr	r2, [r7, #4]
 800e472:	4619      	mov	r1, r3
 800e474:	68f8      	ldr	r0, [r7, #12]
 800e476:	f000 fc79 	bl	800ed6c <SCSI_Read12>
 800e47a:	4603      	mov	r3, r0
 800e47c:	75fb      	strb	r3, [r7, #23]
    break;
 800e47e:	e026      	b.n	800e4ce <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 800e480:	7afb      	ldrb	r3, [r7, #11]
 800e482:	687a      	ldr	r2, [r7, #4]
 800e484:	4619      	mov	r1, r3
 800e486:	68f8      	ldr	r0, [r7, #12]
 800e488:	f000 fd15 	bl	800eeb6 <SCSI_Write10>
 800e48c:	4603      	mov	r3, r0
 800e48e:	75fb      	strb	r3, [r7, #23]
    break;
 800e490:	e01d      	b.n	800e4ce <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 800e492:	7afb      	ldrb	r3, [r7, #11]
 800e494:	687a      	ldr	r2, [r7, #4]
 800e496:	4619      	mov	r1, r3
 800e498:	68f8      	ldr	r0, [r7, #12]
 800e49a:	f000 fdcb 	bl	800f034 <SCSI_Write12>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	75fb      	strb	r3, [r7, #23]
    break;
 800e4a2:	e014      	b.n	800e4ce <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 800e4a4:	7afb      	ldrb	r3, [r7, #11]
 800e4a6:	687a      	ldr	r2, [r7, #4]
 800e4a8:	4619      	mov	r1, r3
 800e4aa:	68f8      	ldr	r0, [r7, #12]
 800e4ac:	f000 fe91 	bl	800f1d2 <SCSI_Verify10>
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	75fb      	strb	r3, [r7, #23]
    break;
 800e4b4:	e00b      	b.n	800e4ce <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800e4b6:	7af9      	ldrb	r1, [r7, #11]
 800e4b8:	2320      	movs	r3, #32
 800e4ba:	2205      	movs	r2, #5
 800e4bc:	68f8      	ldr	r0, [r7, #12]
 800e4be:	f000 fb0a 	bl	800ead6 <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800e4c2:	693b      	ldr	r3, [r7, #16]
 800e4c4:	2202      	movs	r2, #2
 800e4c6:	725a      	strb	r2, [r3, #9]
    ret = -1;
 800e4c8:	23ff      	movs	r3, #255	; 0xff
 800e4ca:	75fb      	strb	r3, [r7, #23]
    break;
 800e4cc:	bf00      	nop
  }

  return ret;
 800e4ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	3718      	adds	r7, #24
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd80      	pop	{r7, pc}

0800e4da <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e4da:	b580      	push	{r7, lr}
 800e4dc:	b086      	sub	sp, #24
 800e4de:	af00      	add	r7, sp, #0
 800e4e0:	60f8      	str	r0, [r7, #12]
 800e4e2:	460b      	mov	r3, r1
 800e4e4:	607a      	str	r2, [r7, #4]
 800e4e6:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e4ee:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800e4f0:	697b      	ldr	r3, [r7, #20]
 800e4f2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d00a      	beq.n	800e510 <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e4fa:	697b      	ldr	r3, [r7, #20]
 800e4fc:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e500:	2320      	movs	r3, #32
 800e502:	2205      	movs	r2, #5
 800e504:	68f8      	ldr	r0, [r7, #12]
 800e506:	f000 fae6 	bl	800ead6 <SCSI_SenseCode>

    return -1;
 800e50a:	f04f 33ff 	mov.w	r3, #4294967295
 800e50e:	e02a      	b.n	800e566 <SCSI_TestUnitReady+0x8c>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800e510:	697b      	ldr	r3, [r7, #20]
 800e512:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800e516:	2b02      	cmp	r3, #2
 800e518:	d10b      	bne.n	800e532 <SCSI_TestUnitReady+0x58>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e51a:	7af9      	ldrb	r1, [r7, #11]
 800e51c:	233a      	movs	r3, #58	; 0x3a
 800e51e:	2202      	movs	r2, #2
 800e520:	68f8      	ldr	r0, [r7, #12]
 800e522:	f000 fad8 	bl	800ead6 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800e526:	697b      	ldr	r3, [r7, #20]
 800e528:	2205      	movs	r2, #5
 800e52a:	721a      	strb	r2, [r3, #8]
    return -1;
 800e52c:	f04f 33ff 	mov.w	r3, #4294967295
 800e530:	e019      	b.n	800e566 <SCSI_TestUnitReady+0x8c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e538:	689b      	ldr	r3, [r3, #8]
 800e53a:	7afa      	ldrb	r2, [r7, #11]
 800e53c:	4610      	mov	r0, r2
 800e53e:	4798      	blx	r3
 800e540:	4603      	mov	r3, r0
 800e542:	2b00      	cmp	r3, #0
 800e544:	d00b      	beq.n	800e55e <SCSI_TestUnitReady+0x84>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e546:	7af9      	ldrb	r1, [r7, #11]
 800e548:	233a      	movs	r3, #58	; 0x3a
 800e54a:	2202      	movs	r2, #2
 800e54c:	68f8      	ldr	r0, [r7, #12]
 800e54e:	f000 fac2 	bl	800ead6 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800e552:	697b      	ldr	r3, [r7, #20]
 800e554:	2205      	movs	r2, #5
 800e556:	721a      	strb	r2, [r3, #8]

    return -1;
 800e558:	f04f 33ff 	mov.w	r3, #4294967295
 800e55c:	e003      	b.n	800e566 <SCSI_TestUnitReady+0x8c>
  }
  hmsc->bot_data_length = 0U;
 800e55e:	697b      	ldr	r3, [r7, #20]
 800e560:	2200      	movs	r2, #0
 800e562:	60da      	str	r2, [r3, #12]

  return 0;
 800e564:	2300      	movs	r3, #0
}
 800e566:	4618      	mov	r0, r3
 800e568:	3718      	adds	r7, #24
 800e56a:	46bd      	mov	sp, r7
 800e56c:	bd80      	pop	{r7, pc}
	...

0800e570 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b088      	sub	sp, #32
 800e574:	af00      	add	r7, sp, #0
 800e576:	60f8      	str	r0, [r7, #12]
 800e578:	460b      	mov	r3, r1
 800e57a:	607a      	str	r2, [r7, #4]
 800e57c:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e584:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 800e586:	69bb      	ldr	r3, [r7, #24]
 800e588:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d10a      	bne.n	800e5a6 <SCSI_Inquiry+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e590:	69bb      	ldr	r3, [r7, #24]
 800e592:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e596:	2320      	movs	r3, #32
 800e598:	2205      	movs	r2, #5
 800e59a:	68f8      	ldr	r0, [r7, #12]
 800e59c:	f000 fa9b 	bl	800ead6 <SCSI_SenseCode>
    return -1;
 800e5a0:	f04f 33ff 	mov.w	r3, #4294967295
 800e5a4:	e04a      	b.n	800e63c <SCSI_Inquiry+0xcc>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	3301      	adds	r3, #1
 800e5aa:	781b      	ldrb	r3, [r3, #0]
 800e5ac:	f003 0301 	and.w	r3, r3, #1
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d020      	beq.n	800e5f6 <SCSI_Inquiry+0x86>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	3302      	adds	r3, #2
 800e5b8:	781b      	ldrb	r3, [r3, #0]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d105      	bne.n	800e5ca <SCSI_Inquiry+0x5a>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800e5be:	2206      	movs	r2, #6
 800e5c0:	4920      	ldr	r1, [pc, #128]	; (800e644 <SCSI_Inquiry+0xd4>)
 800e5c2:	69b8      	ldr	r0, [r7, #24]
 800e5c4:	f000 ff50 	bl	800f468 <SCSI_UpdateBotData>
 800e5c8:	e037      	b.n	800e63a <SCSI_Inquiry+0xca>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	3302      	adds	r3, #2
 800e5ce:	781b      	ldrb	r3, [r3, #0]
 800e5d0:	2b80      	cmp	r3, #128	; 0x80
 800e5d2:	d105      	bne.n	800e5e0 <SCSI_Inquiry+0x70>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800e5d4:	2208      	movs	r2, #8
 800e5d6:	491c      	ldr	r1, [pc, #112]	; (800e648 <SCSI_Inquiry+0xd8>)
 800e5d8:	69b8      	ldr	r0, [r7, #24]
 800e5da:	f000 ff45 	bl	800f468 <SCSI_UpdateBotData>
 800e5de:	e02c      	b.n	800e63a <SCSI_Inquiry+0xca>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800e5e0:	69bb      	ldr	r3, [r7, #24]
 800e5e2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e5e6:	2324      	movs	r3, #36	; 0x24
 800e5e8:	2205      	movs	r2, #5
 800e5ea:	68f8      	ldr	r0, [r7, #12]
 800e5ec:	f000 fa73 	bl	800ead6 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800e5f0:	f04f 33ff 	mov.w	r3, #4294967295
 800e5f4:	e022      	b.n	800e63c <SCSI_Inquiry+0xcc>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e5fc:	69d9      	ldr	r1, [r3, #28]
 800e5fe:	7afa      	ldrb	r2, [r7, #11]
 800e600:	4613      	mov	r3, r2
 800e602:	00db      	lsls	r3, r3, #3
 800e604:	4413      	add	r3, r2
 800e606:	009b      	lsls	r3, r3, #2
 800e608:	440b      	add	r3, r1
 800e60a:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800e60c:	697b      	ldr	r3, [r7, #20]
 800e60e:	3304      	adds	r3, #4
 800e610:	781b      	ldrb	r3, [r3, #0]
 800e612:	b29b      	uxth	r3, r3
 800e614:	3305      	adds	r3, #5
 800e616:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	3304      	adds	r3, #4
 800e61c:	781b      	ldrb	r3, [r3, #0]
 800e61e:	b29b      	uxth	r3, r3
 800e620:	8bfa      	ldrh	r2, [r7, #30]
 800e622:	429a      	cmp	r2, r3
 800e624:	d303      	bcc.n	800e62e <SCSI_Inquiry+0xbe>
    {
      len = params[4];
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	3304      	adds	r3, #4
 800e62a:	781b      	ldrb	r3, [r3, #0]
 800e62c:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800e62e:	8bfb      	ldrh	r3, [r7, #30]
 800e630:	461a      	mov	r2, r3
 800e632:	6979      	ldr	r1, [r7, #20]
 800e634:	69b8      	ldr	r0, [r7, #24]
 800e636:	f000 ff17 	bl	800f468 <SCSI_UpdateBotData>
  }

  return 0;
 800e63a:	2300      	movs	r3, #0
}
 800e63c:	4618      	mov	r0, r3
 800e63e:	3720      	adds	r7, #32
 800e640:	46bd      	mov	sp, r7
 800e642:	bd80      	pop	{r7, pc}
 800e644:	240000b4 	.word	0x240000b4
 800e648:	240000bc 	.word	0x240000bc

0800e64c <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b086      	sub	sp, #24
 800e650:	af00      	add	r7, sp, #0
 800e652:	60f8      	str	r0, [r7, #12]
 800e654:	460b      	mov	r3, r1
 800e656:	607a      	str	r2, [r7, #4]
 800e658:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e660:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e668:	685b      	ldr	r3, [r3, #4]
 800e66a:	697a      	ldr	r2, [r7, #20]
 800e66c:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800e670:	697a      	ldr	r2, [r7, #20]
 800e672:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800e676:	7af8      	ldrb	r0, [r7, #11]
 800e678:	4798      	blx	r3
 800e67a:	4603      	mov	r3, r0
 800e67c:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800e67e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d104      	bne.n	800e690 <SCSI_ReadCapacity10+0x44>
 800e686:	697b      	ldr	r3, [r7, #20]
 800e688:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800e68c:	2b02      	cmp	r3, #2
 800e68e:	d108      	bne.n	800e6a2 <SCSI_ReadCapacity10+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e690:	7af9      	ldrb	r1, [r7, #11]
 800e692:	233a      	movs	r3, #58	; 0x3a
 800e694:	2202      	movs	r2, #2
 800e696:	68f8      	ldr	r0, [r7, #12]
 800e698:	f000 fa1d 	bl	800ead6 <SCSI_SenseCode>
    return -1;
 800e69c:	f04f 33ff 	mov.w	r3, #4294967295
 800e6a0:	e03f      	b.n	800e722 <SCSI_ReadCapacity10+0xd6>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800e6a2:	697b      	ldr	r3, [r7, #20]
 800e6a4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e6a8:	3b01      	subs	r3, #1
 800e6aa:	0e1b      	lsrs	r3, r3, #24
 800e6ac:	b2da      	uxtb	r2, r3
 800e6ae:	697b      	ldr	r3, [r7, #20]
 800e6b0:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800e6b2:	697b      	ldr	r3, [r7, #20]
 800e6b4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e6b8:	3b01      	subs	r3, #1
 800e6ba:	0c1b      	lsrs	r3, r3, #16
 800e6bc:	b2da      	uxtb	r2, r3
 800e6be:	697b      	ldr	r3, [r7, #20]
 800e6c0:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800e6c2:	697b      	ldr	r3, [r7, #20]
 800e6c4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e6c8:	3b01      	subs	r3, #1
 800e6ca:	0a1b      	lsrs	r3, r3, #8
 800e6cc:	b2da      	uxtb	r2, r3
 800e6ce:	697b      	ldr	r3, [r7, #20]
 800e6d0:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800e6d2:	697b      	ldr	r3, [r7, #20]
 800e6d4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e6d8:	b2db      	uxtb	r3, r3
 800e6da:	3b01      	subs	r3, #1
 800e6dc:	b2da      	uxtb	r2, r3
 800e6de:	697b      	ldr	r3, [r7, #20]
 800e6e0:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800e6e2:	697b      	ldr	r3, [r7, #20]
 800e6e4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e6e8:	161b      	asrs	r3, r3, #24
 800e6ea:	b2da      	uxtb	r2, r3
 800e6ec:	697b      	ldr	r3, [r7, #20]
 800e6ee:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800e6f0:	697b      	ldr	r3, [r7, #20]
 800e6f2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e6f6:	141b      	asrs	r3, r3, #16
 800e6f8:	b2da      	uxtb	r2, r3
 800e6fa:	697b      	ldr	r3, [r7, #20]
 800e6fc:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800e6fe:	697b      	ldr	r3, [r7, #20]
 800e700:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e704:	0a1b      	lsrs	r3, r3, #8
 800e706:	b29b      	uxth	r3, r3
 800e708:	b2da      	uxtb	r2, r3
 800e70a:	697b      	ldr	r3, [r7, #20]
 800e70c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800e70e:	697b      	ldr	r3, [r7, #20]
 800e710:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e714:	b2da      	uxtb	r2, r3
 800e716:	697b      	ldr	r3, [r7, #20]
 800e718:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800e71a:	697b      	ldr	r3, [r7, #20]
 800e71c:	2208      	movs	r2, #8
 800e71e:	60da      	str	r2, [r3, #12]

  return 0;
 800e720:	2300      	movs	r3, #0

}
 800e722:	4618      	mov	r0, r3
 800e724:	3718      	adds	r7, #24
 800e726:	46bd      	mov	sp, r7
 800e728:	bd80      	pop	{r7, pc}

0800e72a <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e72a:	b580      	push	{r7, lr}
 800e72c:	b088      	sub	sp, #32
 800e72e:	af00      	add	r7, sp, #0
 800e730:	60f8      	str	r0, [r7, #12]
 800e732:	460b      	mov	r3, r1
 800e734:	607a      	str	r2, [r7, #4]
 800e736:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e73e:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e746:	685b      	ldr	r3, [r3, #4]
 800e748:	69ba      	ldr	r2, [r7, #24]
 800e74a:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800e74e:	69ba      	ldr	r2, [r7, #24]
 800e750:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800e754:	7af8      	ldrb	r0, [r7, #11]
 800e756:	4798      	blx	r3
 800e758:	4603      	mov	r3, r0
 800e75a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800e75c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d104      	bne.n	800e76e <SCSI_ReadCapacity16+0x44>
 800e764:	69bb      	ldr	r3, [r7, #24]
 800e766:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800e76a:	2b02      	cmp	r3, #2
 800e76c:	d108      	bne.n	800e780 <SCSI_ReadCapacity16+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e76e:	7af9      	ldrb	r1, [r7, #11]
 800e770:	233a      	movs	r3, #58	; 0x3a
 800e772:	2202      	movs	r2, #2
 800e774:	68f8      	ldr	r0, [r7, #12]
 800e776:	f000 f9ae 	bl	800ead6 <SCSI_SenseCode>
    return -1;
 800e77a:	f04f 33ff 	mov.w	r3, #4294967295
 800e77e:	e074      	b.n	800e86a <SCSI_ReadCapacity16+0x140>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	330a      	adds	r3, #10
 800e784:	781b      	ldrb	r3, [r3, #0]
 800e786:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	330b      	adds	r3, #11
 800e78c:	781b      	ldrb	r3, [r3, #0]
 800e78e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e790:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	330c      	adds	r3, #12
 800e796:	781b      	ldrb	r3, [r3, #0]
 800e798:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800e79a:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 800e79c:	687a      	ldr	r2, [r7, #4]
 800e79e:	320d      	adds	r2, #13
 800e7a0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800e7a2:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e7a4:	69bb      	ldr	r3, [r7, #24]
 800e7a6:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	77fb      	strb	r3, [r7, #31]
 800e7ac:	e007      	b.n	800e7be <SCSI_ReadCapacity16+0x94>
  {
    hmsc->bot_data[idx] = 0U;
 800e7ae:	7ffb      	ldrb	r3, [r7, #31]
 800e7b0:	69ba      	ldr	r2, [r7, #24]
 800e7b2:	4413      	add	r3, r2
 800e7b4:	2200      	movs	r2, #0
 800e7b6:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800e7b8:	7ffb      	ldrb	r3, [r7, #31]
 800e7ba:	3301      	adds	r3, #1
 800e7bc:	77fb      	strb	r3, [r7, #31]
 800e7be:	7ffa      	ldrb	r2, [r7, #31]
 800e7c0:	69bb      	ldr	r3, [r7, #24]
 800e7c2:	68db      	ldr	r3, [r3, #12]
 800e7c4:	429a      	cmp	r2, r3
 800e7c6:	d3f2      	bcc.n	800e7ae <SCSI_ReadCapacity16+0x84>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800e7c8:	69bb      	ldr	r3, [r7, #24]
 800e7ca:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e7ce:	3b01      	subs	r3, #1
 800e7d0:	0e1b      	lsrs	r3, r3, #24
 800e7d2:	b2da      	uxtb	r2, r3
 800e7d4:	69bb      	ldr	r3, [r7, #24]
 800e7d6:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800e7d8:	69bb      	ldr	r3, [r7, #24]
 800e7da:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e7de:	3b01      	subs	r3, #1
 800e7e0:	0c1b      	lsrs	r3, r3, #16
 800e7e2:	b2da      	uxtb	r2, r3
 800e7e4:	69bb      	ldr	r3, [r7, #24]
 800e7e6:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800e7e8:	69bb      	ldr	r3, [r7, #24]
 800e7ea:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e7ee:	3b01      	subs	r3, #1
 800e7f0:	0a1b      	lsrs	r3, r3, #8
 800e7f2:	b2da      	uxtb	r2, r3
 800e7f4:	69bb      	ldr	r3, [r7, #24]
 800e7f6:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800e7f8:	69bb      	ldr	r3, [r7, #24]
 800e7fa:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e7fe:	b2db      	uxtb	r3, r3
 800e800:	3b01      	subs	r3, #1
 800e802:	b2da      	uxtb	r2, r3
 800e804:	69bb      	ldr	r3, [r7, #24]
 800e806:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800e808:	69bb      	ldr	r3, [r7, #24]
 800e80a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e80e:	161b      	asrs	r3, r3, #24
 800e810:	b2da      	uxtb	r2, r3
 800e812:	69bb      	ldr	r3, [r7, #24]
 800e814:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800e816:	69bb      	ldr	r3, [r7, #24]
 800e818:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e81c:	141b      	asrs	r3, r3, #16
 800e81e:	b2da      	uxtb	r2, r3
 800e820:	69bb      	ldr	r3, [r7, #24]
 800e822:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800e824:	69bb      	ldr	r3, [r7, #24]
 800e826:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e82a:	0a1b      	lsrs	r3, r3, #8
 800e82c:	b29b      	uxth	r3, r3
 800e82e:	b2da      	uxtb	r2, r3
 800e830:	69bb      	ldr	r3, [r7, #24]
 800e832:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800e834:	69bb      	ldr	r3, [r7, #24]
 800e836:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e83a:	b2da      	uxtb	r2, r3
 800e83c:	69bb      	ldr	r3, [r7, #24]
 800e83e:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	330a      	adds	r3, #10
 800e844:	781b      	ldrb	r3, [r3, #0]
 800e846:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	330b      	adds	r3, #11
 800e84c:	781b      	ldrb	r3, [r3, #0]
 800e84e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e850:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	330c      	adds	r3, #12
 800e856:	781b      	ldrb	r3, [r3, #0]
 800e858:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800e85a:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 800e85c:	687a      	ldr	r2, [r7, #4]
 800e85e:	320d      	adds	r2, #13
 800e860:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800e862:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e864:	69bb      	ldr	r3, [r7, #24]
 800e866:	60da      	str	r2, [r3, #12]

  return 0;
 800e868:	2300      	movs	r3, #0
}
 800e86a:	4618      	mov	r0, r3
 800e86c:	3720      	adds	r7, #32
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}

0800e872 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e872:	b580      	push	{r7, lr}
 800e874:	b088      	sub	sp, #32
 800e876:	af00      	add	r7, sp, #0
 800e878:	60f8      	str	r0, [r7, #12]
 800e87a:	460b      	mov	r3, r1
 800e87c:	607a      	str	r2, [r7, #4]
 800e87e:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e886:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e88e:	685b      	ldr	r3, [r3, #4]
 800e890:	f107 0214 	add.w	r2, r7, #20
 800e894:	f107 0110 	add.w	r1, r7, #16
 800e898:	7af8      	ldrb	r0, [r7, #11]
 800e89a:	4798      	blx	r3
 800e89c:	4603      	mov	r3, r0
 800e89e:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800e8a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d104      	bne.n	800e8b2 <SCSI_ReadFormatCapacity+0x40>
 800e8a8:	69bb      	ldr	r3, [r7, #24]
 800e8aa:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800e8ae:	2b02      	cmp	r3, #2
 800e8b0:	d108      	bne.n	800e8c4 <SCSI_ReadFormatCapacity+0x52>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e8b2:	7af9      	ldrb	r1, [r7, #11]
 800e8b4:	233a      	movs	r3, #58	; 0x3a
 800e8b6:	2202      	movs	r2, #2
 800e8b8:	68f8      	ldr	r0, [r7, #12]
 800e8ba:	f000 f90c 	bl	800ead6 <SCSI_SenseCode>
    return -1;
 800e8be:	f04f 33ff 	mov.w	r3, #4294967295
 800e8c2:	e03e      	b.n	800e942 <SCSI_ReadFormatCapacity+0xd0>
  }

  for (i = 0U; i < 12U ; i++)
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	83fb      	strh	r3, [r7, #30]
 800e8c8:	e007      	b.n	800e8da <SCSI_ReadFormatCapacity+0x68>
  {
    hmsc->bot_data[i] = 0U;
 800e8ca:	8bfb      	ldrh	r3, [r7, #30]
 800e8cc:	69ba      	ldr	r2, [r7, #24]
 800e8ce:	4413      	add	r3, r2
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800e8d4:	8bfb      	ldrh	r3, [r7, #30]
 800e8d6:	3301      	adds	r3, #1
 800e8d8:	83fb      	strh	r3, [r7, #30]
 800e8da:	8bfb      	ldrh	r3, [r7, #30]
 800e8dc:	2b0b      	cmp	r3, #11
 800e8de:	d9f4      	bls.n	800e8ca <SCSI_ReadFormatCapacity+0x58>
  }

  hmsc->bot_data[3] = 0x08U;
 800e8e0:	69bb      	ldr	r3, [r7, #24]
 800e8e2:	2208      	movs	r2, #8
 800e8e4:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800e8e6:	693b      	ldr	r3, [r7, #16]
 800e8e8:	3b01      	subs	r3, #1
 800e8ea:	0e1b      	lsrs	r3, r3, #24
 800e8ec:	b2da      	uxtb	r2, r3
 800e8ee:	69bb      	ldr	r3, [r7, #24]
 800e8f0:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800e8f2:	693b      	ldr	r3, [r7, #16]
 800e8f4:	3b01      	subs	r3, #1
 800e8f6:	0c1b      	lsrs	r3, r3, #16
 800e8f8:	b2da      	uxtb	r2, r3
 800e8fa:	69bb      	ldr	r3, [r7, #24]
 800e8fc:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800e8fe:	693b      	ldr	r3, [r7, #16]
 800e900:	3b01      	subs	r3, #1
 800e902:	0a1b      	lsrs	r3, r3, #8
 800e904:	b2da      	uxtb	r2, r3
 800e906:	69bb      	ldr	r3, [r7, #24]
 800e908:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800e90a:	693b      	ldr	r3, [r7, #16]
 800e90c:	b2db      	uxtb	r3, r3
 800e90e:	3b01      	subs	r3, #1
 800e910:	b2da      	uxtb	r2, r3
 800e912:	69bb      	ldr	r3, [r7, #24]
 800e914:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800e916:	69bb      	ldr	r3, [r7, #24]
 800e918:	2202      	movs	r2, #2
 800e91a:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800e91c:	8abb      	ldrh	r3, [r7, #20]
 800e91e:	141b      	asrs	r3, r3, #16
 800e920:	b2da      	uxtb	r2, r3
 800e922:	69bb      	ldr	r3, [r7, #24]
 800e924:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800e926:	8abb      	ldrh	r3, [r7, #20]
 800e928:	0a1b      	lsrs	r3, r3, #8
 800e92a:	b29b      	uxth	r3, r3
 800e92c:	b2da      	uxtb	r2, r3
 800e92e:	69bb      	ldr	r3, [r7, #24]
 800e930:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800e932:	8abb      	ldrh	r3, [r7, #20]
 800e934:	b2da      	uxtb	r2, r3
 800e936:	69bb      	ldr	r3, [r7, #24]
 800e938:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800e93a:	69bb      	ldr	r3, [r7, #24]
 800e93c:	220c      	movs	r2, #12
 800e93e:	60da      	str	r2, [r3, #12]

  return 0;
 800e940:	2300      	movs	r3, #0
}
 800e942:	4618      	mov	r0, r3
 800e944:	3720      	adds	r7, #32
 800e946:	46bd      	mov	sp, r7
 800e948:	bd80      	pop	{r7, pc}
	...

0800e94c <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b086      	sub	sp, #24
 800e950:	af00      	add	r7, sp, #0
 800e952:	60f8      	str	r0, [r7, #12]
 800e954:	460b      	mov	r3, r1
 800e956:	607a      	str	r2, [r7, #4]
 800e958:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e960:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800e962:	2317      	movs	r3, #23
 800e964:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	3304      	adds	r3, #4
 800e96a:	781b      	ldrb	r3, [r3, #0]
 800e96c:	b29b      	uxth	r3, r3
 800e96e:	8afa      	ldrh	r2, [r7, #22]
 800e970:	429a      	cmp	r2, r3
 800e972:	d303      	bcc.n	800e97c <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	3304      	adds	r3, #4
 800e978:	781b      	ldrb	r3, [r3, #0]
 800e97a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800e97c:	8afb      	ldrh	r3, [r7, #22]
 800e97e:	461a      	mov	r2, r3
 800e980:	4904      	ldr	r1, [pc, #16]	; (800e994 <SCSI_ModeSense6+0x48>)
 800e982:	6938      	ldr	r0, [r7, #16]
 800e984:	f000 fd70 	bl	800f468 <SCSI_UpdateBotData>

  return 0;
 800e988:	2300      	movs	r3, #0
}
 800e98a:	4618      	mov	r0, r3
 800e98c:	3718      	adds	r7, #24
 800e98e:	46bd      	mov	sp, r7
 800e990:	bd80      	pop	{r7, pc}
 800e992:	bf00      	nop
 800e994:	240000c4 	.word	0x240000c4

0800e998 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b086      	sub	sp, #24
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	60f8      	str	r0, [r7, #12]
 800e9a0:	460b      	mov	r3, r1
 800e9a2:	607a      	str	r2, [r7, #4]
 800e9a4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e9ac:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800e9ae:	231b      	movs	r3, #27
 800e9b0:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	3308      	adds	r3, #8
 800e9b6:	781b      	ldrb	r3, [r3, #0]
 800e9b8:	b29b      	uxth	r3, r3
 800e9ba:	8afa      	ldrh	r2, [r7, #22]
 800e9bc:	429a      	cmp	r2, r3
 800e9be:	d303      	bcc.n	800e9c8 <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	3308      	adds	r3, #8
 800e9c4:	781b      	ldrb	r3, [r3, #0]
 800e9c6:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800e9c8:	8afb      	ldrh	r3, [r7, #22]
 800e9ca:	461a      	mov	r2, r3
 800e9cc:	4904      	ldr	r1, [pc, #16]	; (800e9e0 <SCSI_ModeSense10+0x48>)
 800e9ce:	6938      	ldr	r0, [r7, #16]
 800e9d0:	f000 fd4a 	bl	800f468 <SCSI_UpdateBotData>

  return 0;
 800e9d4:	2300      	movs	r3, #0
}
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	3718      	adds	r7, #24
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	bd80      	pop	{r7, pc}
 800e9de:	bf00      	nop
 800e9e0:	240000dc 	.word	0x240000dc

0800e9e4 <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b086      	sub	sp, #24
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	60f8      	str	r0, [r7, #12]
 800e9ec:	460b      	mov	r3, r1
 800e9ee:	607a      	str	r2, [r7, #4]
 800e9f0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e9f8:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 800e9fa:	693b      	ldr	r3, [r7, #16]
 800e9fc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d10a      	bne.n	800ea1a <SCSI_RequestSense+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ea04:	693b      	ldr	r3, [r7, #16]
 800ea06:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ea0a:	2320      	movs	r3, #32
 800ea0c:	2205      	movs	r2, #5
 800ea0e:	68f8      	ldr	r0, [r7, #12]
 800ea10:	f000 f861 	bl	800ead6 <SCSI_SenseCode>
    return -1;
 800ea14:	f04f 33ff 	mov.w	r3, #4294967295
 800ea18:	e059      	b.n	800eace <SCSI_RequestSense+0xea>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	75fb      	strb	r3, [r7, #23]
 800ea1e:	e007      	b.n	800ea30 <SCSI_RequestSense+0x4c>
  {
    hmsc->bot_data[i] = 0U;
 800ea20:	7dfb      	ldrb	r3, [r7, #23]
 800ea22:	693a      	ldr	r2, [r7, #16]
 800ea24:	4413      	add	r3, r2
 800ea26:	2200      	movs	r2, #0
 800ea28:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800ea2a:	7dfb      	ldrb	r3, [r7, #23]
 800ea2c:	3301      	adds	r3, #1
 800ea2e:	75fb      	strb	r3, [r7, #23]
 800ea30:	7dfb      	ldrb	r3, [r7, #23]
 800ea32:	2b11      	cmp	r3, #17
 800ea34:	d9f4      	bls.n	800ea20 <SCSI_RequestSense+0x3c>
  }

  hmsc->bot_data[0] = 0x70U;
 800ea36:	693b      	ldr	r3, [r7, #16]
 800ea38:	2270      	movs	r2, #112	; 0x70
 800ea3a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800ea3c:	693b      	ldr	r3, [r7, #16]
 800ea3e:	220c      	movs	r2, #12
 800ea40:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800ea42:	693b      	ldr	r3, [r7, #16]
 800ea44:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 800ea48:	693b      	ldr	r3, [r7, #16]
 800ea4a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800ea4e:	429a      	cmp	r2, r3
 800ea50:	d02e      	beq.n	800eab0 <SCSI_RequestSense+0xcc>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800ea52:	693b      	ldr	r3, [r7, #16]
 800ea54:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800ea58:	461a      	mov	r2, r3
 800ea5a:	693b      	ldr	r3, [r7, #16]
 800ea5c:	3248      	adds	r2, #72	; 0x48
 800ea5e:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800ea62:	693b      	ldr	r3, [r7, #16]
 800ea64:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800ea66:	693b      	ldr	r3, [r7, #16]
 800ea68:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800ea6c:	693a      	ldr	r2, [r7, #16]
 800ea6e:	3348      	adds	r3, #72	; 0x48
 800ea70:	00db      	lsls	r3, r3, #3
 800ea72:	4413      	add	r3, r2
 800ea74:	791a      	ldrb	r2, [r3, #4]
 800ea76:	693b      	ldr	r3, [r7, #16]
 800ea78:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800ea7a:	693b      	ldr	r3, [r7, #16]
 800ea7c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800ea80:	693a      	ldr	r2, [r7, #16]
 800ea82:	3348      	adds	r3, #72	; 0x48
 800ea84:	00db      	lsls	r3, r3, #3
 800ea86:	4413      	add	r3, r2
 800ea88:	795a      	ldrb	r2, [r3, #5]
 800ea8a:	693b      	ldr	r3, [r7, #16]
 800ea8c:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800ea8e:	693b      	ldr	r3, [r7, #16]
 800ea90:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800ea94:	3301      	adds	r3, #1
 800ea96:	b2da      	uxtb	r2, r3
 800ea98:	693b      	ldr	r3, [r7, #16]
 800ea9a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800ea9e:	693b      	ldr	r3, [r7, #16]
 800eaa0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800eaa4:	2b04      	cmp	r3, #4
 800eaa6:	d103      	bne.n	800eab0 <SCSI_RequestSense+0xcc>
    {
      hmsc->scsi_sense_head = 0U;
 800eaa8:	693b      	ldr	r3, [r7, #16]
 800eaaa:	2200      	movs	r2, #0
 800eaac:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800eab0:	693b      	ldr	r3, [r7, #16]
 800eab2:	2212      	movs	r2, #18
 800eab4:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	3304      	adds	r3, #4
 800eaba:	781b      	ldrb	r3, [r3, #0]
 800eabc:	2b12      	cmp	r3, #18
 800eabe:	d805      	bhi.n	800eacc <SCSI_RequestSense+0xe8>
  {
    hmsc->bot_data_length = params[4];
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	3304      	adds	r3, #4
 800eac4:	781b      	ldrb	r3, [r3, #0]
 800eac6:	461a      	mov	r2, r3
 800eac8:	693b      	ldr	r3, [r7, #16]
 800eaca:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800eacc:	2300      	movs	r3, #0
}
 800eace:	4618      	mov	r0, r3
 800ead0:	3718      	adds	r7, #24
 800ead2:	46bd      	mov	sp, r7
 800ead4:	bd80      	pop	{r7, pc}

0800ead6 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800ead6:	b480      	push	{r7}
 800ead8:	b085      	sub	sp, #20
 800eada:	af00      	add	r7, sp, #0
 800eadc:	6078      	str	r0, [r7, #4]
 800eade:	4608      	mov	r0, r1
 800eae0:	4611      	mov	r1, r2
 800eae2:	461a      	mov	r2, r3
 800eae4:	4603      	mov	r3, r0
 800eae6:	70fb      	strb	r3, [r7, #3]
 800eae8:	460b      	mov	r3, r1
 800eaea:	70bb      	strb	r3, [r7, #2]
 800eaec:	4613      	mov	r3, r2
 800eaee:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eaf6:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800eafe:	461a      	mov	r2, r3
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	3248      	adds	r2, #72	; 0x48
 800eb04:	78b9      	ldrb	r1, [r7, #2]
 800eb06:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800eb10:	68fa      	ldr	r2, [r7, #12]
 800eb12:	3348      	adds	r3, #72	; 0x48
 800eb14:	00db      	lsls	r3, r3, #3
 800eb16:	4413      	add	r3, r2
 800eb18:	787a      	ldrb	r2, [r7, #1]
 800eb1a:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800eb22:	68fa      	ldr	r2, [r7, #12]
 800eb24:	3348      	adds	r3, #72	; 0x48
 800eb26:	00db      	lsls	r3, r3, #3
 800eb28:	4413      	add	r3, r2
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800eb34:	3301      	adds	r3, #1
 800eb36:	b2da      	uxtb	r2, r3
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800eb44:	2b04      	cmp	r3, #4
 800eb46:	d103      	bne.n	800eb50 <SCSI_SenseCode+0x7a>
  {
    hmsc->scsi_sense_tail = 0U;
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  }
}
 800eb50:	bf00      	nop
 800eb52:	3714      	adds	r7, #20
 800eb54:	46bd      	mov	sp, r7
 800eb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5a:	4770      	bx	lr

0800eb5c <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b086      	sub	sp, #24
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	60f8      	str	r0, [r7, #12]
 800eb64:	460b      	mov	r3, r1
 800eb66:	607a      	str	r2, [r7, #4]
 800eb68:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eb70:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800eb72:	697b      	ldr	r3, [r7, #20]
 800eb74:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800eb78:	2b01      	cmp	r3, #1
 800eb7a:	d10f      	bne.n	800eb9c <SCSI_StartStopUnit+0x40>
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	3304      	adds	r3, #4
 800eb80:	781b      	ldrb	r3, [r3, #0]
 800eb82:	f003 0303 	and.w	r3, r3, #3
 800eb86:	2b02      	cmp	r3, #2
 800eb88:	d108      	bne.n	800eb9c <SCSI_StartStopUnit+0x40>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800eb8a:	7af9      	ldrb	r1, [r7, #11]
 800eb8c:	2324      	movs	r3, #36	; 0x24
 800eb8e:	2205      	movs	r2, #5
 800eb90:	68f8      	ldr	r0, [r7, #12]
 800eb92:	f7ff ffa0 	bl	800ead6 <SCSI_SenseCode>

    return -1;
 800eb96:	f04f 33ff 	mov.w	r3, #4294967295
 800eb9a:	e026      	b.n	800ebea <SCSI_StartStopUnit+0x8e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	3304      	adds	r3, #4
 800eba0:	781b      	ldrb	r3, [r3, #0]
 800eba2:	f003 0303 	and.w	r3, r3, #3
 800eba6:	2b01      	cmp	r3, #1
 800eba8:	d104      	bne.n	800ebb4 <SCSI_StartStopUnit+0x58>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800ebaa:	697b      	ldr	r3, [r7, #20]
 800ebac:	2200      	movs	r2, #0
 800ebae:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800ebb2:	e016      	b.n	800ebe2 <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	3304      	adds	r3, #4
 800ebb8:	781b      	ldrb	r3, [r3, #0]
 800ebba:	f003 0303 	and.w	r3, r3, #3
 800ebbe:	2b02      	cmp	r3, #2
 800ebc0:	d104      	bne.n	800ebcc <SCSI_StartStopUnit+0x70>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800ebc2:	697b      	ldr	r3, [r7, #20]
 800ebc4:	2202      	movs	r2, #2
 800ebc6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800ebca:	e00a      	b.n	800ebe2 <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	3304      	adds	r3, #4
 800ebd0:	781b      	ldrb	r3, [r3, #0]
 800ebd2:	f003 0303 	and.w	r3, r3, #3
 800ebd6:	2b03      	cmp	r3, #3
 800ebd8:	d103      	bne.n	800ebe2 <SCSI_StartStopUnit+0x86>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800ebda:	697b      	ldr	r3, [r7, #20]
 800ebdc:	2200      	movs	r2, #0
 800ebde:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800ebe2:	697b      	ldr	r3, [r7, #20]
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	60da      	str	r2, [r3, #12]

  return 0;
 800ebe8:	2300      	movs	r3, #0
}
 800ebea:	4618      	mov	r0, r3
 800ebec:	3718      	adds	r7, #24
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bd80      	pop	{r7, pc}

0800ebf2 <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ebf2:	b480      	push	{r7}
 800ebf4:	b087      	sub	sp, #28
 800ebf6:	af00      	add	r7, sp, #0
 800ebf8:	60f8      	str	r0, [r7, #12]
 800ebfa:	460b      	mov	r3, r1
 800ebfc:	607a      	str	r2, [r7, #4]
 800ebfe:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ec06:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	3304      	adds	r3, #4
 800ec0c:	781b      	ldrb	r3, [r3, #0]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d104      	bne.n	800ec1c <SCSI_AllowPreventRemovable+0x2a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800ec12:	697b      	ldr	r3, [r7, #20]
 800ec14:	2200      	movs	r2, #0
 800ec16:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800ec1a:	e003      	b.n	800ec24 <SCSI_AllowPreventRemovable+0x32>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800ec1c:	697b      	ldr	r3, [r7, #20]
 800ec1e:	2201      	movs	r2, #1
 800ec20:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 800ec24:	697b      	ldr	r3, [r7, #20]
 800ec26:	2200      	movs	r2, #0
 800ec28:	60da      	str	r2, [r3, #12]

  return 0;
 800ec2a:	2300      	movs	r3, #0
}
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	371c      	adds	r7, #28
 800ec30:	46bd      	mov	sp, r7
 800ec32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec36:	4770      	bx	lr

0800ec38 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b086      	sub	sp, #24
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	60f8      	str	r0, [r7, #12]
 800ec40:	460b      	mov	r3, r1
 800ec42:	607a      	str	r2, [r7, #4]
 800ec44:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ec4c:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800ec4e:	697b      	ldr	r3, [r7, #20]
 800ec50:	7a1b      	ldrb	r3, [r3, #8]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d17c      	bne.n	800ed50 <SCSI_Read10+0x118>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800ec56:	697b      	ldr	r3, [r7, #20]
 800ec58:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800ec5c:	b25b      	sxtb	r3, r3
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	db0a      	blt.n	800ec78 <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ec62:	697b      	ldr	r3, [r7, #20]
 800ec64:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ec68:	2320      	movs	r3, #32
 800ec6a:	2205      	movs	r2, #5
 800ec6c:	68f8      	ldr	r0, [r7, #12]
 800ec6e:	f7ff ff32 	bl	800ead6 <SCSI_SenseCode>
      return -1;
 800ec72:	f04f 33ff 	mov.w	r3, #4294967295
 800ec76:	e075      	b.n	800ed64 <SCSI_Read10+0x12c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800ec78:	697b      	ldr	r3, [r7, #20]
 800ec7a:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800ec7e:	2b02      	cmp	r3, #2
 800ec80:	d108      	bne.n	800ec94 <SCSI_Read10+0x5c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ec82:	7af9      	ldrb	r1, [r7, #11]
 800ec84:	233a      	movs	r3, #58	; 0x3a
 800ec86:	2202      	movs	r2, #2
 800ec88:	68f8      	ldr	r0, [r7, #12]
 800ec8a:	f7ff ff24 	bl	800ead6 <SCSI_SenseCode>

      return -1;
 800ec8e:	f04f 33ff 	mov.w	r3, #4294967295
 800ec92:	e067      	b.n	800ed64 <SCSI_Read10+0x12c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ec9a:	689b      	ldr	r3, [r3, #8]
 800ec9c:	7afa      	ldrb	r2, [r7, #11]
 800ec9e:	4610      	mov	r0, r2
 800eca0:	4798      	blx	r3
 800eca2:	4603      	mov	r3, r0
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d008      	beq.n	800ecba <SCSI_Read10+0x82>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800eca8:	7af9      	ldrb	r1, [r7, #11]
 800ecaa:	233a      	movs	r3, #58	; 0x3a
 800ecac:	2202      	movs	r2, #2
 800ecae:	68f8      	ldr	r0, [r7, #12]
 800ecb0:	f7ff ff11 	bl	800ead6 <SCSI_SenseCode>
      return -1;
 800ecb4:	f04f 33ff 	mov.w	r3, #4294967295
 800ecb8:	e054      	b.n	800ed64 <SCSI_Read10+0x12c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	3302      	adds	r3, #2
 800ecbe:	781b      	ldrb	r3, [r3, #0]
 800ecc0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	3303      	adds	r3, #3
 800ecc6:	781b      	ldrb	r3, [r3, #0]
 800ecc8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ecca:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	3304      	adds	r3, #4
 800ecd0:	781b      	ldrb	r3, [r3, #0]
 800ecd2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ecd4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800ecd6:	687a      	ldr	r2, [r7, #4]
 800ecd8:	3205      	adds	r2, #5
 800ecda:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800ecdc:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ecde:	697b      	ldr	r3, [r7, #20]
 800ece0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	3307      	adds	r3, #7
 800ece8:	781b      	ldrb	r3, [r3, #0]
 800ecea:	021b      	lsls	r3, r3, #8
 800ecec:	687a      	ldr	r2, [r7, #4]
 800ecee:	3208      	adds	r2, #8
 800ecf0:	7812      	ldrb	r2, [r2, #0]
 800ecf2:	431a      	orrs	r2, r3
 800ecf4:	697b      	ldr	r3, [r7, #20]
 800ecf6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800ecfa:	697b      	ldr	r3, [r7, #20]
 800ecfc:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800ed00:	697b      	ldr	r3, [r7, #20]
 800ed02:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ed06:	7af9      	ldrb	r1, [r7, #11]
 800ed08:	68f8      	ldr	r0, [r7, #12]
 800ed0a:	f000 fa95 	bl	800f238 <SCSI_CheckAddressRange>
 800ed0e:	4603      	mov	r3, r0
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	da02      	bge.n	800ed1a <SCSI_Read10+0xe2>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800ed14:	f04f 33ff 	mov.w	r3, #4294967295
 800ed18:	e024      	b.n	800ed64 <SCSI_Read10+0x12c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800ed1a:	697b      	ldr	r3, [r7, #20]
 800ed1c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800ed20:	697b      	ldr	r3, [r7, #20]
 800ed22:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ed26:	6979      	ldr	r1, [r7, #20]
 800ed28:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800ed2c:	fb01 f303 	mul.w	r3, r1, r3
 800ed30:	429a      	cmp	r2, r3
 800ed32:	d00a      	beq.n	800ed4a <SCSI_Read10+0x112>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ed34:	697b      	ldr	r3, [r7, #20]
 800ed36:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ed3a:	2320      	movs	r3, #32
 800ed3c:	2205      	movs	r2, #5
 800ed3e:	68f8      	ldr	r0, [r7, #12]
 800ed40:	f7ff fec9 	bl	800ead6 <SCSI_SenseCode>
      return -1;
 800ed44:	f04f 33ff 	mov.w	r3, #4294967295
 800ed48:	e00c      	b.n	800ed64 <SCSI_Read10+0x12c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800ed4a:	697b      	ldr	r3, [r7, #20]
 800ed4c:	2202      	movs	r2, #2
 800ed4e:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800ed50:	697b      	ldr	r3, [r7, #20]
 800ed52:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ed56:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800ed58:	7afb      	ldrb	r3, [r7, #11]
 800ed5a:	4619      	mov	r1, r3
 800ed5c:	68f8      	ldr	r0, [r7, #12]
 800ed5e:	f000 fa8d 	bl	800f27c <SCSI_ProcessRead>
 800ed62:	4603      	mov	r3, r0
}
 800ed64:	4618      	mov	r0, r3
 800ed66:	3718      	adds	r7, #24
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	bd80      	pop	{r7, pc}

0800ed6c <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b086      	sub	sp, #24
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	60f8      	str	r0, [r7, #12]
 800ed74:	460b      	mov	r3, r1
 800ed76:	607a      	str	r2, [r7, #4]
 800ed78:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ed80:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800ed82:	697b      	ldr	r3, [r7, #20]
 800ed84:	7a1b      	ldrb	r3, [r3, #8]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	f040 8087 	bne.w	800ee9a <SCSI_Read12+0x12e>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800ed8c:	697b      	ldr	r3, [r7, #20]
 800ed8e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800ed92:	b25b      	sxtb	r3, r3
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	db0a      	blt.n	800edae <SCSI_Read12+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ed98:	697b      	ldr	r3, [r7, #20]
 800ed9a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ed9e:	2320      	movs	r3, #32
 800eda0:	2205      	movs	r2, #5
 800eda2:	68f8      	ldr	r0, [r7, #12]
 800eda4:	f7ff fe97 	bl	800ead6 <SCSI_SenseCode>
      return -1;
 800eda8:	f04f 33ff 	mov.w	r3, #4294967295
 800edac:	e07f      	b.n	800eeae <SCSI_Read12+0x142>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800edae:	697b      	ldr	r3, [r7, #20]
 800edb0:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800edb4:	2b02      	cmp	r3, #2
 800edb6:	d108      	bne.n	800edca <SCSI_Read12+0x5e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800edb8:	7af9      	ldrb	r1, [r7, #11]
 800edba:	233a      	movs	r3, #58	; 0x3a
 800edbc:	2202      	movs	r2, #2
 800edbe:	68f8      	ldr	r0, [r7, #12]
 800edc0:	f7ff fe89 	bl	800ead6 <SCSI_SenseCode>
      return -1;
 800edc4:	f04f 33ff 	mov.w	r3, #4294967295
 800edc8:	e071      	b.n	800eeae <SCSI_Read12+0x142>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800edd0:	689b      	ldr	r3, [r3, #8]
 800edd2:	7afa      	ldrb	r2, [r7, #11]
 800edd4:	4610      	mov	r0, r2
 800edd6:	4798      	blx	r3
 800edd8:	4603      	mov	r3, r0
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d008      	beq.n	800edf0 <SCSI_Read12+0x84>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800edde:	7af9      	ldrb	r1, [r7, #11]
 800ede0:	233a      	movs	r3, #58	; 0x3a
 800ede2:	2202      	movs	r2, #2
 800ede4:	68f8      	ldr	r0, [r7, #12]
 800ede6:	f7ff fe76 	bl	800ead6 <SCSI_SenseCode>
      return -1;
 800edea:	f04f 33ff 	mov.w	r3, #4294967295
 800edee:	e05e      	b.n	800eeae <SCSI_Read12+0x142>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	3302      	adds	r3, #2
 800edf4:	781b      	ldrb	r3, [r3, #0]
 800edf6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	3303      	adds	r3, #3
 800edfc:	781b      	ldrb	r3, [r3, #0]
 800edfe:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ee00:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	3304      	adds	r3, #4
 800ee06:	781b      	ldrb	r3, [r3, #0]
 800ee08:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ee0a:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800ee0c:	687a      	ldr	r2, [r7, #4]
 800ee0e:	3205      	adds	r2, #5
 800ee10:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800ee12:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ee14:	697b      	ldr	r3, [r7, #20]
 800ee16:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	3306      	adds	r3, #6
 800ee1e:	781b      	ldrb	r3, [r3, #0]
 800ee20:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	3307      	adds	r3, #7
 800ee26:	781b      	ldrb	r3, [r3, #0]
 800ee28:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ee2a:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	3308      	adds	r3, #8
 800ee30:	781b      	ldrb	r3, [r3, #0]
 800ee32:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800ee34:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800ee36:	687a      	ldr	r2, [r7, #4]
 800ee38:	3209      	adds	r2, #9
 800ee3a:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800ee3c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ee3e:	697b      	ldr	r3, [r7, #20]
 800ee40:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800ee44:	697b      	ldr	r3, [r7, #20]
 800ee46:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800ee4a:	697b      	ldr	r3, [r7, #20]
 800ee4c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ee50:	7af9      	ldrb	r1, [r7, #11]
 800ee52:	68f8      	ldr	r0, [r7, #12]
 800ee54:	f000 f9f0 	bl	800f238 <SCSI_CheckAddressRange>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	da02      	bge.n	800ee64 <SCSI_Read12+0xf8>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800ee5e:	f04f 33ff 	mov.w	r3, #4294967295
 800ee62:	e024      	b.n	800eeae <SCSI_Read12+0x142>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800ee64:	697b      	ldr	r3, [r7, #20]
 800ee66:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800ee6a:	697b      	ldr	r3, [r7, #20]
 800ee6c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ee70:	6979      	ldr	r1, [r7, #20]
 800ee72:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800ee76:	fb01 f303 	mul.w	r3, r1, r3
 800ee7a:	429a      	cmp	r2, r3
 800ee7c:	d00a      	beq.n	800ee94 <SCSI_Read12+0x128>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ee7e:	697b      	ldr	r3, [r7, #20]
 800ee80:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ee84:	2320      	movs	r3, #32
 800ee86:	2205      	movs	r2, #5
 800ee88:	68f8      	ldr	r0, [r7, #12]
 800ee8a:	f7ff fe24 	bl	800ead6 <SCSI_SenseCode>
      return -1;
 800ee8e:	f04f 33ff 	mov.w	r3, #4294967295
 800ee92:	e00c      	b.n	800eeae <SCSI_Read12+0x142>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800ee94:	697b      	ldr	r3, [r7, #20]
 800ee96:	2202      	movs	r2, #2
 800ee98:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800ee9a:	697b      	ldr	r3, [r7, #20]
 800ee9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eea0:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800eea2:	7afb      	ldrb	r3, [r7, #11]
 800eea4:	4619      	mov	r1, r3
 800eea6:	68f8      	ldr	r0, [r7, #12]
 800eea8:	f000 f9e8 	bl	800f27c <SCSI_ProcessRead>
 800eeac:	4603      	mov	r3, r0
}
 800eeae:	4618      	mov	r0, r3
 800eeb0:	3718      	adds	r7, #24
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	bd80      	pop	{r7, pc}

0800eeb6 <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800eeb6:	b580      	push	{r7, lr}
 800eeb8:	b086      	sub	sp, #24
 800eeba:	af00      	add	r7, sp, #0
 800eebc:	60f8      	str	r0, [r7, #12]
 800eebe:	460b      	mov	r3, r1
 800eec0:	607a      	str	r2, [r7, #4]
 800eec2:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eeca:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800eecc:	697b      	ldr	r3, [r7, #20]
 800eece:	7a1b      	ldrb	r3, [r3, #8]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	f040 80a5 	bne.w	800f020 <SCSI_Write10+0x16a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800eed6:	697b      	ldr	r3, [r7, #20]
 800eed8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d10a      	bne.n	800eef6 <SCSI_Write10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800eee0:	697b      	ldr	r3, [r7, #20]
 800eee2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800eee6:	2320      	movs	r3, #32
 800eee8:	2205      	movs	r2, #5
 800eeea:	68f8      	ldr	r0, [r7, #12]
 800eeec:	f7ff fdf3 	bl	800ead6 <SCSI_SenseCode>
      return -1;
 800eef0:	f04f 33ff 	mov.w	r3, #4294967295
 800eef4:	e09a      	b.n	800f02c <SCSI_Write10+0x176>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800eef6:	697b      	ldr	r3, [r7, #20]
 800eef8:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800eefc:	b25b      	sxtb	r3, r3
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	da0a      	bge.n	800ef18 <SCSI_Write10+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ef02:	697b      	ldr	r3, [r7, #20]
 800ef04:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ef08:	2320      	movs	r3, #32
 800ef0a:	2205      	movs	r2, #5
 800ef0c:	68f8      	ldr	r0, [r7, #12]
 800ef0e:	f7ff fde2 	bl	800ead6 <SCSI_SenseCode>
      return -1;
 800ef12:	f04f 33ff 	mov.w	r3, #4294967295
 800ef16:	e089      	b.n	800f02c <SCSI_Write10+0x176>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ef1e:	689b      	ldr	r3, [r3, #8]
 800ef20:	7afa      	ldrb	r2, [r7, #11]
 800ef22:	4610      	mov	r0, r2
 800ef24:	4798      	blx	r3
 800ef26:	4603      	mov	r3, r0
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d008      	beq.n	800ef3e <SCSI_Write10+0x88>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ef2c:	7af9      	ldrb	r1, [r7, #11]
 800ef2e:	233a      	movs	r3, #58	; 0x3a
 800ef30:	2202      	movs	r2, #2
 800ef32:	68f8      	ldr	r0, [r7, #12]
 800ef34:	f7ff fdcf 	bl	800ead6 <SCSI_SenseCode>
      return -1;
 800ef38:	f04f 33ff 	mov.w	r3, #4294967295
 800ef3c:	e076      	b.n	800f02c <SCSI_Write10+0x176>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ef44:	68db      	ldr	r3, [r3, #12]
 800ef46:	7afa      	ldrb	r2, [r7, #11]
 800ef48:	4610      	mov	r0, r2
 800ef4a:	4798      	blx	r3
 800ef4c:	4603      	mov	r3, r0
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d008      	beq.n	800ef64 <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800ef52:	7af9      	ldrb	r1, [r7, #11]
 800ef54:	2327      	movs	r3, #39	; 0x27
 800ef56:	2202      	movs	r2, #2
 800ef58:	68f8      	ldr	r0, [r7, #12]
 800ef5a:	f7ff fdbc 	bl	800ead6 <SCSI_SenseCode>
      return -1;
 800ef5e:	f04f 33ff 	mov.w	r3, #4294967295
 800ef62:	e063      	b.n	800f02c <SCSI_Write10+0x176>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	3302      	adds	r3, #2
 800ef68:	781b      	ldrb	r3, [r3, #0]
 800ef6a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	3303      	adds	r3, #3
 800ef70:	781b      	ldrb	r3, [r3, #0]
 800ef72:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ef74:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	3304      	adds	r3, #4
 800ef7a:	781b      	ldrb	r3, [r3, #0]
 800ef7c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ef7e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800ef80:	687a      	ldr	r2, [r7, #4]
 800ef82:	3205      	adds	r2, #5
 800ef84:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800ef86:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ef88:	697b      	ldr	r3, [r7, #20]
 800ef8a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	3307      	adds	r3, #7
 800ef92:	781b      	ldrb	r3, [r3, #0]
 800ef94:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800ef96:	687a      	ldr	r2, [r7, #4]
 800ef98:	3208      	adds	r2, #8
 800ef9a:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800ef9c:	431a      	orrs	r2, r3
 800ef9e:	697b      	ldr	r3, [r7, #20]
 800efa0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800efa4:	697b      	ldr	r3, [r7, #20]
 800efa6:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800efaa:	697b      	ldr	r3, [r7, #20]
 800efac:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800efb0:	7af9      	ldrb	r1, [r7, #11]
 800efb2:	68f8      	ldr	r0, [r7, #12]
 800efb4:	f000 f940 	bl	800f238 <SCSI_CheckAddressRange>
 800efb8:	4603      	mov	r3, r0
 800efba:	2b00      	cmp	r3, #0
 800efbc:	da02      	bge.n	800efc4 <SCSI_Write10+0x10e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800efbe:	f04f 33ff 	mov.w	r3, #4294967295
 800efc2:	e033      	b.n	800f02c <SCSI_Write10+0x176>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800efc4:	697b      	ldr	r3, [r7, #20]
 800efc6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800efca:	697a      	ldr	r2, [r7, #20]
 800efcc:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800efd0:	fb02 f303 	mul.w	r3, r2, r3
 800efd4:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800efd6:	697b      	ldr	r3, [r7, #20]
 800efd8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800efdc:	693a      	ldr	r2, [r7, #16]
 800efde:	429a      	cmp	r2, r3
 800efe0:	d00a      	beq.n	800eff8 <SCSI_Write10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800efe2:	697b      	ldr	r3, [r7, #20]
 800efe4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800efe8:	2320      	movs	r3, #32
 800efea:	2205      	movs	r2, #5
 800efec:	68f8      	ldr	r0, [r7, #12]
 800efee:	f7ff fd72 	bl	800ead6 <SCSI_SenseCode>
      return -1;
 800eff2:	f04f 33ff 	mov.w	r3, #4294967295
 800eff6:	e019      	b.n	800f02c <SCSI_Write10+0x176>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800eff8:	693b      	ldr	r3, [r7, #16]
 800effa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800effe:	bf28      	it	cs
 800f000:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f004:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800f006:	697b      	ldr	r3, [r7, #20]
 800f008:	2201      	movs	r2, #1
 800f00a:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800f00c:	697b      	ldr	r3, [r7, #20]
 800f00e:	f103 0210 	add.w	r2, r3, #16
 800f012:	693b      	ldr	r3, [r7, #16]
 800f014:	2101      	movs	r1, #1
 800f016:	68f8      	ldr	r0, [r7, #12]
 800f018:	f001 ffed 	bl	8010ff6 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800f01c:	2300      	movs	r3, #0
 800f01e:	e005      	b.n	800f02c <SCSI_Write10+0x176>
    return SCSI_ProcessWrite(pdev, lun);
 800f020:	7afb      	ldrb	r3, [r7, #11]
 800f022:	4619      	mov	r1, r3
 800f024:	68f8      	ldr	r0, [r7, #12]
 800f026:	f000 f99c 	bl	800f362 <SCSI_ProcessWrite>
 800f02a:	4603      	mov	r3, r0
}
 800f02c:	4618      	mov	r0, r3
 800f02e:	3718      	adds	r7, #24
 800f030:	46bd      	mov	sp, r7
 800f032:	bd80      	pop	{r7, pc}

0800f034 <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f034:	b580      	push	{r7, lr}
 800f036:	b086      	sub	sp, #24
 800f038:	af00      	add	r7, sp, #0
 800f03a:	60f8      	str	r0, [r7, #12]
 800f03c:	460b      	mov	r3, r1
 800f03e:	607a      	str	r2, [r7, #4]
 800f040:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f048:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800f04a:	697b      	ldr	r3, [r7, #20]
 800f04c:	7a1b      	ldrb	r3, [r3, #8]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	f040 80b5 	bne.w	800f1be <SCSI_Write12+0x18a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800f054:	697b      	ldr	r3, [r7, #20]
 800f056:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d10a      	bne.n	800f074 <SCSI_Write12+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f05e:	697b      	ldr	r3, [r7, #20]
 800f060:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f064:	2320      	movs	r3, #32
 800f066:	2205      	movs	r2, #5
 800f068:	68f8      	ldr	r0, [r7, #12]
 800f06a:	f7ff fd34 	bl	800ead6 <SCSI_SenseCode>
      return -1;
 800f06e:	f04f 33ff 	mov.w	r3, #4294967295
 800f072:	e0aa      	b.n	800f1ca <SCSI_Write12+0x196>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800f074:	697b      	ldr	r3, [r7, #20]
 800f076:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800f07a:	b25b      	sxtb	r3, r3
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	da0a      	bge.n	800f096 <SCSI_Write12+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f080:	697b      	ldr	r3, [r7, #20]
 800f082:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f086:	2320      	movs	r3, #32
 800f088:	2205      	movs	r2, #5
 800f08a:	68f8      	ldr	r0, [r7, #12]
 800f08c:	f7ff fd23 	bl	800ead6 <SCSI_SenseCode>
      return -1;
 800f090:	f04f 33ff 	mov.w	r3, #4294967295
 800f094:	e099      	b.n	800f1ca <SCSI_Write12+0x196>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f09c:	689b      	ldr	r3, [r3, #8]
 800f09e:	7afa      	ldrb	r2, [r7, #11]
 800f0a0:	4610      	mov	r0, r2
 800f0a2:	4798      	blx	r3
 800f0a4:	4603      	mov	r3, r0
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d00b      	beq.n	800f0c2 <SCSI_Write12+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f0aa:	7af9      	ldrb	r1, [r7, #11]
 800f0ac:	233a      	movs	r3, #58	; 0x3a
 800f0ae:	2202      	movs	r2, #2
 800f0b0:	68f8      	ldr	r0, [r7, #12]
 800f0b2:	f7ff fd10 	bl	800ead6 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800f0b6:	697b      	ldr	r3, [r7, #20]
 800f0b8:	2205      	movs	r2, #5
 800f0ba:	721a      	strb	r2, [r3, #8]
      return -1;
 800f0bc:	f04f 33ff 	mov.w	r3, #4294967295
 800f0c0:	e083      	b.n	800f1ca <SCSI_Write12+0x196>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f0c8:	68db      	ldr	r3, [r3, #12]
 800f0ca:	7afa      	ldrb	r2, [r7, #11]
 800f0cc:	4610      	mov	r0, r2
 800f0ce:	4798      	blx	r3
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d00b      	beq.n	800f0ee <SCSI_Write12+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800f0d6:	7af9      	ldrb	r1, [r7, #11]
 800f0d8:	2327      	movs	r3, #39	; 0x27
 800f0da:	2202      	movs	r2, #2
 800f0dc:	68f8      	ldr	r0, [r7, #12]
 800f0de:	f7ff fcfa 	bl	800ead6 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800f0e2:	697b      	ldr	r3, [r7, #20]
 800f0e4:	2205      	movs	r2, #5
 800f0e6:	721a      	strb	r2, [r3, #8]
      return -1;
 800f0e8:	f04f 33ff 	mov.w	r3, #4294967295
 800f0ec:	e06d      	b.n	800f1ca <SCSI_Write12+0x196>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	3302      	adds	r3, #2
 800f0f2:	781b      	ldrb	r3, [r3, #0]
 800f0f4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	3303      	adds	r3, #3
 800f0fa:	781b      	ldrb	r3, [r3, #0]
 800f0fc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f0fe:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	3304      	adds	r3, #4
 800f104:	781b      	ldrb	r3, [r3, #0]
 800f106:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800f108:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800f10a:	687a      	ldr	r2, [r7, #4]
 800f10c:	3205      	adds	r2, #5
 800f10e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800f110:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f112:	697b      	ldr	r3, [r7, #20]
 800f114:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	3306      	adds	r3, #6
 800f11c:	781b      	ldrb	r3, [r3, #0]
 800f11e:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	3307      	adds	r3, #7
 800f124:	781b      	ldrb	r3, [r3, #0]
 800f126:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f128:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	3308      	adds	r3, #8
 800f12e:	781b      	ldrb	r3, [r3, #0]
 800f130:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800f132:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800f134:	687a      	ldr	r2, [r7, #4]
 800f136:	3209      	adds	r2, #9
 800f138:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800f13a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f13c:	697b      	ldr	r3, [r7, #20]
 800f13e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800f142:	697b      	ldr	r3, [r7, #20]
 800f144:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f148:	697b      	ldr	r3, [r7, #20]
 800f14a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f14e:	7af9      	ldrb	r1, [r7, #11]
 800f150:	68f8      	ldr	r0, [r7, #12]
 800f152:	f000 f871 	bl	800f238 <SCSI_CheckAddressRange>
 800f156:	4603      	mov	r3, r0
 800f158:	2b00      	cmp	r3, #0
 800f15a:	da02      	bge.n	800f162 <SCSI_Write12+0x12e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800f15c:	f04f 33ff 	mov.w	r3, #4294967295
 800f160:	e033      	b.n	800f1ca <SCSI_Write12+0x196>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f162:	697b      	ldr	r3, [r7, #20]
 800f164:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f168:	697a      	ldr	r2, [r7, #20]
 800f16a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800f16e:	fb02 f303 	mul.w	r3, r2, r3
 800f172:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800f174:	697b      	ldr	r3, [r7, #20]
 800f176:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f17a:	693a      	ldr	r2, [r7, #16]
 800f17c:	429a      	cmp	r2, r3
 800f17e:	d00a      	beq.n	800f196 <SCSI_Write12+0x162>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f180:	697b      	ldr	r3, [r7, #20]
 800f182:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f186:	2320      	movs	r3, #32
 800f188:	2205      	movs	r2, #5
 800f18a:	68f8      	ldr	r0, [r7, #12]
 800f18c:	f7ff fca3 	bl	800ead6 <SCSI_SenseCode>
      return -1;
 800f190:	f04f 33ff 	mov.w	r3, #4294967295
 800f194:	e019      	b.n	800f1ca <SCSI_Write12+0x196>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800f196:	693b      	ldr	r3, [r7, #16]
 800f198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f19c:	bf28      	it	cs
 800f19e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f1a2:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800f1a4:	697b      	ldr	r3, [r7, #20]
 800f1a6:	2201      	movs	r2, #1
 800f1a8:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800f1aa:	697b      	ldr	r3, [r7, #20]
 800f1ac:	f103 0210 	add.w	r2, r3, #16
 800f1b0:	693b      	ldr	r3, [r7, #16]
 800f1b2:	2101      	movs	r1, #1
 800f1b4:	68f8      	ldr	r0, [r7, #12]
 800f1b6:	f001 ff1e 	bl	8010ff6 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	e005      	b.n	800f1ca <SCSI_Write12+0x196>
    return SCSI_ProcessWrite(pdev, lun);
 800f1be:	7afb      	ldrb	r3, [r7, #11]
 800f1c0:	4619      	mov	r1, r3
 800f1c2:	68f8      	ldr	r0, [r7, #12]
 800f1c4:	f000 f8cd 	bl	800f362 <SCSI_ProcessWrite>
 800f1c8:	4603      	mov	r3, r0
}
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	3718      	adds	r7, #24
 800f1ce:	46bd      	mov	sp, r7
 800f1d0:	bd80      	pop	{r7, pc}

0800f1d2 <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f1d2:	b580      	push	{r7, lr}
 800f1d4:	b086      	sub	sp, #24
 800f1d6:	af00      	add	r7, sp, #0
 800f1d8:	60f8      	str	r0, [r7, #12]
 800f1da:	460b      	mov	r3, r1
 800f1dc:	607a      	str	r2, [r7, #4]
 800f1de:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f1e6:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	3301      	adds	r3, #1
 800f1ec:	781b      	ldrb	r3, [r3, #0]
 800f1ee:	f003 0302 	and.w	r3, r3, #2
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d008      	beq.n	800f208 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800f1f6:	7af9      	ldrb	r1, [r7, #11]
 800f1f8:	2324      	movs	r3, #36	; 0x24
 800f1fa:	2205      	movs	r2, #5
 800f1fc:	68f8      	ldr	r0, [r7, #12]
 800f1fe:	f7ff fc6a 	bl	800ead6 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800f202:	f04f 33ff 	mov.w	r3, #4294967295
 800f206:	e013      	b.n	800f230 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800f208:	697b      	ldr	r3, [r7, #20]
 800f20a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f20e:	697b      	ldr	r3, [r7, #20]
 800f210:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f214:	7af9      	ldrb	r1, [r7, #11]
 800f216:	68f8      	ldr	r0, [r7, #12]
 800f218:	f000 f80e 	bl	800f238 <SCSI_CheckAddressRange>
 800f21c:	4603      	mov	r3, r0
 800f21e:	2b00      	cmp	r3, #0
 800f220:	da02      	bge.n	800f228 <SCSI_Verify10+0x56>
  {
    return -1; /* error */
 800f222:	f04f 33ff 	mov.w	r3, #4294967295
 800f226:	e003      	b.n	800f230 <SCSI_Verify10+0x5e>
  }

  hmsc->bot_data_length = 0U;
 800f228:	697b      	ldr	r3, [r7, #20]
 800f22a:	2200      	movs	r2, #0
 800f22c:	60da      	str	r2, [r3, #12]

  return 0;
 800f22e:	2300      	movs	r3, #0
}
 800f230:	4618      	mov	r0, r3
 800f232:	3718      	adds	r7, #24
 800f234:	46bd      	mov	sp, r7
 800f236:	bd80      	pop	{r7, pc}

0800f238 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800f238:	b580      	push	{r7, lr}
 800f23a:	b086      	sub	sp, #24
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	60f8      	str	r0, [r7, #12]
 800f240:	607a      	str	r2, [r7, #4]
 800f242:	603b      	str	r3, [r7, #0]
 800f244:	460b      	mov	r3, r1
 800f246:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f24e:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800f250:	687a      	ldr	r2, [r7, #4]
 800f252:	683b      	ldr	r3, [r7, #0]
 800f254:	441a      	add	r2, r3
 800f256:	697b      	ldr	r3, [r7, #20]
 800f258:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800f25c:	429a      	cmp	r2, r3
 800f25e:	d908      	bls.n	800f272 <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800f260:	7af9      	ldrb	r1, [r7, #11]
 800f262:	2321      	movs	r3, #33	; 0x21
 800f264:	2205      	movs	r2, #5
 800f266:	68f8      	ldr	r0, [r7, #12]
 800f268:	f7ff fc35 	bl	800ead6 <SCSI_SenseCode>
    return -1;
 800f26c:	f04f 33ff 	mov.w	r3, #4294967295
 800f270:	e000      	b.n	800f274 <SCSI_CheckAddressRange+0x3c>
  }

  return 0;
 800f272:	2300      	movs	r3, #0
}
 800f274:	4618      	mov	r0, r3
 800f276:	3718      	adds	r7, #24
 800f278:	46bd      	mov	sp, r7
 800f27a:	bd80      	pop	{r7, pc}

0800f27c <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800f27c:	b590      	push	{r4, r7, lr}
 800f27e:	b085      	sub	sp, #20
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
 800f284:	460b      	mov	r3, r1
 800f286:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f28e:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f296:	68fa      	ldr	r2, [r7, #12]
 800f298:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800f29c:	fb02 f303 	mul.w	r3, r2, r3
 800f2a0:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800f2a2:	68bb      	ldr	r3, [r7, #8]
 800f2a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f2a8:	bf28      	it	cs
 800f2aa:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f2ae:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f2b6:	691c      	ldr	r4, [r3, #16]
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	f103 0110 	add.w	r1, r3, #16
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	68bb      	ldr	r3, [r7, #8]
 800f2ce:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800f2d2:	b29b      	uxth	r3, r3
 800f2d4:	78f8      	ldrb	r0, [r7, #3]
 800f2d6:	47a0      	blx	r4
 800f2d8:	4603      	mov	r3, r0
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	da08      	bge.n	800f2f0 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800f2de:	78f9      	ldrb	r1, [r7, #3]
 800f2e0:	2311      	movs	r3, #17
 800f2e2:	2204      	movs	r2, #4
 800f2e4:	6878      	ldr	r0, [r7, #4]
 800f2e6:	f7ff fbf6 	bl	800ead6 <SCSI_SenseCode>
    return -1;
 800f2ea:	f04f 33ff 	mov.w	r3, #4294967295
 800f2ee:	e034      	b.n	800f35a <SCSI_ProcessRead+0xde>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	f103 0210 	add.w	r2, r3, #16
 800f2f6:	68bb      	ldr	r3, [r7, #8]
 800f2f8:	2181      	movs	r1, #129	; 0x81
 800f2fa:	6878      	ldr	r0, [r7, #4]
 800f2fc:	f001 fe5a 	bl	8010fb4 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f30c:	4619      	mov	r1, r3
 800f30e:	68bb      	ldr	r3, [r7, #8]
 800f310:	fbb3 f3f1 	udiv	r3, r3, r1
 800f314:	441a      	add	r2, r3
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f328:	4619      	mov	r1, r3
 800f32a:	68bb      	ldr	r3, [r7, #8]
 800f32c:	fbb3 f3f1 	udiv	r3, r3, r1
 800f330:	1ad2      	subs	r2, r2, r3
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800f33e:	68bb      	ldr	r3, [r7, #8]
 800f340:	1ad2      	subs	r2, r2, r3
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d102      	bne.n	800f358 <SCSI_ProcessRead+0xdc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	2203      	movs	r2, #3
 800f356:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800f358:	2300      	movs	r3, #0
}
 800f35a:	4618      	mov	r0, r3
 800f35c:	3714      	adds	r7, #20
 800f35e:	46bd      	mov	sp, r7
 800f360:	bd90      	pop	{r4, r7, pc}

0800f362 <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800f362:	b590      	push	{r4, r7, lr}
 800f364:	b085      	sub	sp, #20
 800f366:	af00      	add	r7, sp, #0
 800f368:	6078      	str	r0, [r7, #4]
 800f36a:	460b      	mov	r3, r1
 800f36c:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f374:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f37c:	68fa      	ldr	r2, [r7, #12]
 800f37e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800f382:	fb02 f303 	mul.w	r3, r2, r3
 800f386:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800f388:	68bb      	ldr	r3, [r7, #8]
 800f38a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f38e:	bf28      	it	cs
 800f390:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f394:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f39c:	695c      	ldr	r4, [r3, #20]
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	f103 0110 	add.w	r1, r3, #16
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	68bb      	ldr	r3, [r7, #8]
 800f3b4:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800f3b8:	b29b      	uxth	r3, r3
 800f3ba:	78f8      	ldrb	r0, [r7, #3]
 800f3bc:	47a0      	blx	r4
 800f3be:	4603      	mov	r3, r0
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	da08      	bge.n	800f3d6 <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800f3c4:	78f9      	ldrb	r1, [r7, #3]
 800f3c6:	2303      	movs	r3, #3
 800f3c8:	2204      	movs	r2, #4
 800f3ca:	6878      	ldr	r0, [r7, #4]
 800f3cc:	f7ff fb83 	bl	800ead6 <SCSI_SenseCode>
    return -1;
 800f3d0:	f04f 33ff 	mov.w	r3, #4294967295
 800f3d4:	e044      	b.n	800f460 <SCSI_ProcessWrite+0xfe>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f3e2:	4619      	mov	r1, r3
 800f3e4:	68bb      	ldr	r3, [r7, #8]
 800f3e6:	fbb3 f3f1 	udiv	r3, r3, r1
 800f3ea:	441a      	add	r2, r3
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f3fe:	4619      	mov	r1, r3
 800f400:	68bb      	ldr	r3, [r7, #8]
 800f402:	fbb3 f3f1 	udiv	r3, r3, r1
 800f406:	1ad2      	subs	r2, r2, r3
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800f414:	68bb      	ldr	r3, [r7, #8]
 800f416:	1ad2      	subs	r2, r2, r3
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f424:	2b00      	cmp	r3, #0
 800f426:	d104      	bne.n	800f432 <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800f428:	2100      	movs	r1, #0
 800f42a:	6878      	ldr	r0, [r7, #4]
 800f42c:	f7fe ff04 	bl	800e238 <MSC_BOT_SendCSW>
 800f430:	e015      	b.n	800f45e <SCSI_ProcessWrite+0xfc>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f438:	68fa      	ldr	r2, [r7, #12]
 800f43a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800f43e:	fb02 f303 	mul.w	r3, r2, r3
 800f442:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f446:	bf28      	it	cs
 800f448:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f44c:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	f103 0210 	add.w	r2, r3, #16
 800f454:	68bb      	ldr	r3, [r7, #8]
 800f456:	2101      	movs	r1, #1
 800f458:	6878      	ldr	r0, [r7, #4]
 800f45a:	f001 fdcc 	bl	8010ff6 <USBD_LL_PrepareReceive>
  }

  return 0;
 800f45e:	2300      	movs	r3, #0
}
 800f460:	4618      	mov	r0, r3
 800f462:	3714      	adds	r7, #20
 800f464:	46bd      	mov	sp, r7
 800f466:	bd90      	pop	{r4, r7, pc}

0800f468 <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800f468:	b480      	push	{r7}
 800f46a:	b087      	sub	sp, #28
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	60f8      	str	r0, [r7, #12]
 800f470:	60b9      	str	r1, [r7, #8]
 800f472:	4613      	mov	r3, r2
 800f474:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800f476:	88fb      	ldrh	r3, [r7, #6]
 800f478:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 800f47a:	8afa      	ldrh	r2, [r7, #22]
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800f480:	e00b      	b.n	800f49a <SCSI_UpdateBotData+0x32>
  {
    len--;
 800f482:	8afb      	ldrh	r3, [r7, #22]
 800f484:	3b01      	subs	r3, #1
 800f486:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800f488:	8afb      	ldrh	r3, [r7, #22]
 800f48a:	68ba      	ldr	r2, [r7, #8]
 800f48c:	441a      	add	r2, r3
 800f48e:	8afb      	ldrh	r3, [r7, #22]
 800f490:	7811      	ldrb	r1, [r2, #0]
 800f492:	68fa      	ldr	r2, [r7, #12]
 800f494:	4413      	add	r3, r2
 800f496:	460a      	mov	r2, r1
 800f498:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800f49a:	8afb      	ldrh	r3, [r7, #22]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d1f0      	bne.n	800f482 <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 800f4a0:	2300      	movs	r3, #0
}
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	371c      	adds	r7, #28
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ac:	4770      	bx	lr

0800f4ae <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f4ae:	b580      	push	{r7, lr}
 800f4b0:	b086      	sub	sp, #24
 800f4b2:	af00      	add	r7, sp, #0
 800f4b4:	60f8      	str	r0, [r7, #12]
 800f4b6:	60b9      	str	r1, [r7, #8]
 800f4b8:	4613      	mov	r3, r2
 800f4ba:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d101      	bne.n	800f4c6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f4c2:	2303      	movs	r3, #3
 800f4c4:	e025      	b.n	800f512 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d003      	beq.n	800f4d8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d003      	beq.n	800f4ea <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	2200      	movs	r2, #0
 800f4e6:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f4ea:	68bb      	ldr	r3, [r7, #8]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d003      	beq.n	800f4f8 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	68ba      	ldr	r2, [r7, #8]
 800f4f4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	2201      	movs	r2, #1
 800f4fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	79fa      	ldrb	r2, [r7, #7]
 800f504:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f506:	68f8      	ldr	r0, [r7, #12]
 800f508:	f001 fbfc 	bl	8010d04 <USBD_LL_Init>
 800f50c:	4603      	mov	r3, r0
 800f50e:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f510:	7dfb      	ldrb	r3, [r7, #23]
}
 800f512:	4618      	mov	r0, r3
 800f514:	3718      	adds	r7, #24
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}

0800f51a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f51a:	b580      	push	{r7, lr}
 800f51c:	b084      	sub	sp, #16
 800f51e:	af00      	add	r7, sp, #0
 800f520:	6078      	str	r0, [r7, #4]
 800f522:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f524:	2300      	movs	r3, #0
 800f526:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f528:	683b      	ldr	r3, [r7, #0]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d101      	bne.n	800f532 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800f52e:	2303      	movs	r3, #3
 800f530:	e010      	b.n	800f554 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	683a      	ldr	r2, [r7, #0]
 800f536:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f542:	f107 020e 	add.w	r2, r7, #14
 800f546:	4610      	mov	r0, r2
 800f548:	4798      	blx	r3
 800f54a:	4602      	mov	r2, r0
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800f552:	2300      	movs	r3, #0
}
 800f554:	4618      	mov	r0, r3
 800f556:	3710      	adds	r7, #16
 800f558:	46bd      	mov	sp, r7
 800f55a:	bd80      	pop	{r7, pc}

0800f55c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b082      	sub	sp, #8
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f564:	6878      	ldr	r0, [r7, #4]
 800f566:	f001 fc1d 	bl	8010da4 <USBD_LL_Start>
 800f56a:	4603      	mov	r3, r0
}
 800f56c:	4618      	mov	r0, r3
 800f56e:	3708      	adds	r7, #8
 800f570:	46bd      	mov	sp, r7
 800f572:	bd80      	pop	{r7, pc}

0800f574 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f574:	b480      	push	{r7}
 800f576:	b083      	sub	sp, #12
 800f578:	af00      	add	r7, sp, #0
 800f57a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f57c:	2300      	movs	r3, #0
}
 800f57e:	4618      	mov	r0, r3
 800f580:	370c      	adds	r7, #12
 800f582:	46bd      	mov	sp, r7
 800f584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f588:	4770      	bx	lr

0800f58a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f58a:	b580      	push	{r7, lr}
 800f58c:	b084      	sub	sp, #16
 800f58e:	af00      	add	r7, sp, #0
 800f590:	6078      	str	r0, [r7, #4]
 800f592:	460b      	mov	r3, r1
 800f594:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f596:	2303      	movs	r3, #3
 800f598:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d009      	beq.n	800f5b8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	78fa      	ldrb	r2, [r7, #3]
 800f5ae:	4611      	mov	r1, r2
 800f5b0:	6878      	ldr	r0, [r7, #4]
 800f5b2:	4798      	blx	r3
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f5b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	3710      	adds	r7, #16
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	bd80      	pop	{r7, pc}

0800f5c2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f5c2:	b580      	push	{r7, lr}
 800f5c4:	b082      	sub	sp, #8
 800f5c6:	af00      	add	r7, sp, #0
 800f5c8:	6078      	str	r0, [r7, #4]
 800f5ca:	460b      	mov	r3, r1
 800f5cc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d007      	beq.n	800f5e8 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5de:	685b      	ldr	r3, [r3, #4]
 800f5e0:	78fa      	ldrb	r2, [r7, #3]
 800f5e2:	4611      	mov	r1, r2
 800f5e4:	6878      	ldr	r0, [r7, #4]
 800f5e6:	4798      	blx	r3
  }

  return USBD_OK;
 800f5e8:	2300      	movs	r3, #0
}
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	3708      	adds	r7, #8
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	bd80      	pop	{r7, pc}

0800f5f2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f5f2:	b580      	push	{r7, lr}
 800f5f4:	b084      	sub	sp, #16
 800f5f6:	af00      	add	r7, sp, #0
 800f5f8:	6078      	str	r0, [r7, #4]
 800f5fa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f602:	6839      	ldr	r1, [r7, #0]
 800f604:	4618      	mov	r0, r3
 800f606:	f000 ff2b 	bl	8010460 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	2201      	movs	r2, #1
 800f60e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800f618:	461a      	mov	r2, r3
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f626:	f003 031f 	and.w	r3, r3, #31
 800f62a:	2b01      	cmp	r3, #1
 800f62c:	d00e      	beq.n	800f64c <USBD_LL_SetupStage+0x5a>
 800f62e:	2b01      	cmp	r3, #1
 800f630:	d302      	bcc.n	800f638 <USBD_LL_SetupStage+0x46>
 800f632:	2b02      	cmp	r3, #2
 800f634:	d014      	beq.n	800f660 <USBD_LL_SetupStage+0x6e>
 800f636:	e01d      	b.n	800f674 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f63e:	4619      	mov	r1, r3
 800f640:	6878      	ldr	r0, [r7, #4]
 800f642:	f000 fa17 	bl	800fa74 <USBD_StdDevReq>
 800f646:	4603      	mov	r3, r0
 800f648:	73fb      	strb	r3, [r7, #15]
      break;
 800f64a:	e020      	b.n	800f68e <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f652:	4619      	mov	r1, r3
 800f654:	6878      	ldr	r0, [r7, #4]
 800f656:	f000 fa7b 	bl	800fb50 <USBD_StdItfReq>
 800f65a:	4603      	mov	r3, r0
 800f65c:	73fb      	strb	r3, [r7, #15]
      break;
 800f65e:	e016      	b.n	800f68e <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f666:	4619      	mov	r1, r3
 800f668:	6878      	ldr	r0, [r7, #4]
 800f66a:	f000 fab7 	bl	800fbdc <USBD_StdEPReq>
 800f66e:	4603      	mov	r3, r0
 800f670:	73fb      	strb	r3, [r7, #15]
      break;
 800f672:	e00c      	b.n	800f68e <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f67a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f67e:	b2db      	uxtb	r3, r3
 800f680:	4619      	mov	r1, r3
 800f682:	6878      	ldr	r0, [r7, #4]
 800f684:	f001 fc0d 	bl	8010ea2 <USBD_LL_StallEP>
 800f688:	4603      	mov	r3, r0
 800f68a:	73fb      	strb	r3, [r7, #15]
      break;
 800f68c:	bf00      	nop
  }

  return ret;
 800f68e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f690:	4618      	mov	r0, r3
 800f692:	3710      	adds	r7, #16
 800f694:	46bd      	mov	sp, r7
 800f696:	bd80      	pop	{r7, pc}

0800f698 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f698:	b580      	push	{r7, lr}
 800f69a:	b086      	sub	sp, #24
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	60f8      	str	r0, [r7, #12]
 800f6a0:	460b      	mov	r3, r1
 800f6a2:	607a      	str	r2, [r7, #4]
 800f6a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f6a6:	7afb      	ldrb	r3, [r7, #11]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d137      	bne.n	800f71c <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f6b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f6ba:	2b03      	cmp	r3, #3
 800f6bc:	d14a      	bne.n	800f754 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800f6be:	693b      	ldr	r3, [r7, #16]
 800f6c0:	689a      	ldr	r2, [r3, #8]
 800f6c2:	693b      	ldr	r3, [r7, #16]
 800f6c4:	68db      	ldr	r3, [r3, #12]
 800f6c6:	429a      	cmp	r2, r3
 800f6c8:	d913      	bls.n	800f6f2 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f6ca:	693b      	ldr	r3, [r7, #16]
 800f6cc:	689a      	ldr	r2, [r3, #8]
 800f6ce:	693b      	ldr	r3, [r7, #16]
 800f6d0:	68db      	ldr	r3, [r3, #12]
 800f6d2:	1ad2      	subs	r2, r2, r3
 800f6d4:	693b      	ldr	r3, [r7, #16]
 800f6d6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f6d8:	693b      	ldr	r3, [r7, #16]
 800f6da:	68da      	ldr	r2, [r3, #12]
 800f6dc:	693b      	ldr	r3, [r7, #16]
 800f6de:	689b      	ldr	r3, [r3, #8]
 800f6e0:	4293      	cmp	r3, r2
 800f6e2:	bf28      	it	cs
 800f6e4:	4613      	movcs	r3, r2
 800f6e6:	461a      	mov	r2, r3
 800f6e8:	6879      	ldr	r1, [r7, #4]
 800f6ea:	68f8      	ldr	r0, [r7, #12]
 800f6ec:	f000 ff8f 	bl	801060e <USBD_CtlContinueRx>
 800f6f0:	e030      	b.n	800f754 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f6f8:	691b      	ldr	r3, [r3, #16]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d00a      	beq.n	800f714 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800f704:	2b03      	cmp	r3, #3
 800f706:	d105      	bne.n	800f714 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f70e:	691b      	ldr	r3, [r3, #16]
 800f710:	68f8      	ldr	r0, [r7, #12]
 800f712:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800f714:	68f8      	ldr	r0, [r7, #12]
 800f716:	f000 ff8b 	bl	8010630 <USBD_CtlSendStatus>
 800f71a:	e01b      	b.n	800f754 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f722:	699b      	ldr	r3, [r3, #24]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d013      	beq.n	800f750 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800f72e:	2b03      	cmp	r3, #3
 800f730:	d10e      	bne.n	800f750 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f738:	699b      	ldr	r3, [r3, #24]
 800f73a:	7afa      	ldrb	r2, [r7, #11]
 800f73c:	4611      	mov	r1, r2
 800f73e:	68f8      	ldr	r0, [r7, #12]
 800f740:	4798      	blx	r3
 800f742:	4603      	mov	r3, r0
 800f744:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800f746:	7dfb      	ldrb	r3, [r7, #23]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d003      	beq.n	800f754 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800f74c:	7dfb      	ldrb	r3, [r7, #23]
 800f74e:	e002      	b.n	800f756 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f750:	2303      	movs	r3, #3
 800f752:	e000      	b.n	800f756 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800f754:	2300      	movs	r3, #0
}
 800f756:	4618      	mov	r0, r3
 800f758:	3718      	adds	r7, #24
 800f75a:	46bd      	mov	sp, r7
 800f75c:	bd80      	pop	{r7, pc}

0800f75e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f75e:	b580      	push	{r7, lr}
 800f760:	b086      	sub	sp, #24
 800f762:	af00      	add	r7, sp, #0
 800f764:	60f8      	str	r0, [r7, #12]
 800f766:	460b      	mov	r3, r1
 800f768:	607a      	str	r2, [r7, #4]
 800f76a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f76c:	7afb      	ldrb	r3, [r7, #11]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d16a      	bne.n	800f848 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	3314      	adds	r3, #20
 800f776:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f77e:	2b02      	cmp	r3, #2
 800f780:	d155      	bne.n	800f82e <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800f782:	693b      	ldr	r3, [r7, #16]
 800f784:	689a      	ldr	r2, [r3, #8]
 800f786:	693b      	ldr	r3, [r7, #16]
 800f788:	68db      	ldr	r3, [r3, #12]
 800f78a:	429a      	cmp	r2, r3
 800f78c:	d914      	bls.n	800f7b8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f78e:	693b      	ldr	r3, [r7, #16]
 800f790:	689a      	ldr	r2, [r3, #8]
 800f792:	693b      	ldr	r3, [r7, #16]
 800f794:	68db      	ldr	r3, [r3, #12]
 800f796:	1ad2      	subs	r2, r2, r3
 800f798:	693b      	ldr	r3, [r7, #16]
 800f79a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f79c:	693b      	ldr	r3, [r7, #16]
 800f79e:	689b      	ldr	r3, [r3, #8]
 800f7a0:	461a      	mov	r2, r3
 800f7a2:	6879      	ldr	r1, [r7, #4]
 800f7a4:	68f8      	ldr	r0, [r7, #12]
 800f7a6:	f000 ff21 	bl	80105ec <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	2200      	movs	r2, #0
 800f7ae:	2100      	movs	r1, #0
 800f7b0:	68f8      	ldr	r0, [r7, #12]
 800f7b2:	f001 fc20 	bl	8010ff6 <USBD_LL_PrepareReceive>
 800f7b6:	e03a      	b.n	800f82e <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f7b8:	693b      	ldr	r3, [r7, #16]
 800f7ba:	68da      	ldr	r2, [r3, #12]
 800f7bc:	693b      	ldr	r3, [r7, #16]
 800f7be:	689b      	ldr	r3, [r3, #8]
 800f7c0:	429a      	cmp	r2, r3
 800f7c2:	d11c      	bne.n	800f7fe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f7c4:	693b      	ldr	r3, [r7, #16]
 800f7c6:	685a      	ldr	r2, [r3, #4]
 800f7c8:	693b      	ldr	r3, [r7, #16]
 800f7ca:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f7cc:	429a      	cmp	r2, r3
 800f7ce:	d316      	bcc.n	800f7fe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f7d0:	693b      	ldr	r3, [r7, #16]
 800f7d2:	685a      	ldr	r2, [r3, #4]
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f7da:	429a      	cmp	r2, r3
 800f7dc:	d20f      	bcs.n	800f7fe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f7de:	2200      	movs	r2, #0
 800f7e0:	2100      	movs	r1, #0
 800f7e2:	68f8      	ldr	r0, [r7, #12]
 800f7e4:	f000 ff02 	bl	80105ec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	2100      	movs	r1, #0
 800f7f6:	68f8      	ldr	r0, [r7, #12]
 800f7f8:	f001 fbfd 	bl	8010ff6 <USBD_LL_PrepareReceive>
 800f7fc:	e017      	b.n	800f82e <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f804:	68db      	ldr	r3, [r3, #12]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d00a      	beq.n	800f820 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800f810:	2b03      	cmp	r3, #3
 800f812:	d105      	bne.n	800f820 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f81a:	68db      	ldr	r3, [r3, #12]
 800f81c:	68f8      	ldr	r0, [r7, #12]
 800f81e:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f820:	2180      	movs	r1, #128	; 0x80
 800f822:	68f8      	ldr	r0, [r7, #12]
 800f824:	f001 fb3d 	bl	8010ea2 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f828:	68f8      	ldr	r0, [r7, #12]
 800f82a:	f000 ff14 	bl	8010656 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f834:	2b01      	cmp	r3, #1
 800f836:	d123      	bne.n	800f880 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800f838:	68f8      	ldr	r0, [r7, #12]
 800f83a:	f7ff fe9b 	bl	800f574 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	2200      	movs	r2, #0
 800f842:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f846:	e01b      	b.n	800f880 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f84e:	695b      	ldr	r3, [r3, #20]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d013      	beq.n	800f87c <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800f85a:	2b03      	cmp	r3, #3
 800f85c:	d10e      	bne.n	800f87c <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f864:	695b      	ldr	r3, [r3, #20]
 800f866:	7afa      	ldrb	r2, [r7, #11]
 800f868:	4611      	mov	r1, r2
 800f86a:	68f8      	ldr	r0, [r7, #12]
 800f86c:	4798      	blx	r3
 800f86e:	4603      	mov	r3, r0
 800f870:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800f872:	7dfb      	ldrb	r3, [r7, #23]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d003      	beq.n	800f880 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800f878:	7dfb      	ldrb	r3, [r7, #23]
 800f87a:	e002      	b.n	800f882 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f87c:	2303      	movs	r3, #3
 800f87e:	e000      	b.n	800f882 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800f880:	2300      	movs	r3, #0
}
 800f882:	4618      	mov	r0, r3
 800f884:	3718      	adds	r7, #24
 800f886:	46bd      	mov	sp, r7
 800f888:	bd80      	pop	{r7, pc}

0800f88a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f88a:	b580      	push	{r7, lr}
 800f88c:	b082      	sub	sp, #8
 800f88e:	af00      	add	r7, sp, #0
 800f890:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	2201      	movs	r2, #1
 800f896:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	2200      	movs	r2, #0
 800f89e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	2200      	movs	r2, #0
 800f8a6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	2200      	movs	r2, #0
 800f8ac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d009      	beq.n	800f8ce <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f8c0:	685b      	ldr	r3, [r3, #4]
 800f8c2:	687a      	ldr	r2, [r7, #4]
 800f8c4:	6852      	ldr	r2, [r2, #4]
 800f8c6:	b2d2      	uxtb	r2, r2
 800f8c8:	4611      	mov	r1, r2
 800f8ca:	6878      	ldr	r0, [r7, #4]
 800f8cc:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f8ce:	2340      	movs	r3, #64	; 0x40
 800f8d0:	2200      	movs	r2, #0
 800f8d2:	2100      	movs	r1, #0
 800f8d4:	6878      	ldr	r0, [r7, #4]
 800f8d6:	f001 fa80 	bl	8010dda <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	2201      	movs	r2, #1
 800f8de:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	2240      	movs	r2, #64	; 0x40
 800f8e6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f8ea:	2340      	movs	r3, #64	; 0x40
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	2180      	movs	r1, #128	; 0x80
 800f8f0:	6878      	ldr	r0, [r7, #4]
 800f8f2:	f001 fa72 	bl	8010dda <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	2201      	movs	r2, #1
 800f8fa:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	2240      	movs	r2, #64	; 0x40
 800f900:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800f902:	2300      	movs	r3, #0
}
 800f904:	4618      	mov	r0, r3
 800f906:	3708      	adds	r7, #8
 800f908:	46bd      	mov	sp, r7
 800f90a:	bd80      	pop	{r7, pc}

0800f90c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f90c:	b480      	push	{r7}
 800f90e:	b083      	sub	sp, #12
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
 800f914:	460b      	mov	r3, r1
 800f916:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	78fa      	ldrb	r2, [r7, #3]
 800f91c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f91e:	2300      	movs	r3, #0
}
 800f920:	4618      	mov	r0, r3
 800f922:	370c      	adds	r7, #12
 800f924:	46bd      	mov	sp, r7
 800f926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92a:	4770      	bx	lr

0800f92c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f92c:	b480      	push	{r7}
 800f92e:	b083      	sub	sp, #12
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	2204      	movs	r2, #4
 800f944:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f948:	2300      	movs	r3, #0
}
 800f94a:	4618      	mov	r0, r3
 800f94c:	370c      	adds	r7, #12
 800f94e:	46bd      	mov	sp, r7
 800f950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f954:	4770      	bx	lr

0800f956 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f956:	b480      	push	{r7}
 800f958:	b083      	sub	sp, #12
 800f95a:	af00      	add	r7, sp, #0
 800f95c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f964:	2b04      	cmp	r3, #4
 800f966:	d105      	bne.n	800f974 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f974:	2300      	movs	r3, #0
}
 800f976:	4618      	mov	r0, r3
 800f978:	370c      	adds	r7, #12
 800f97a:	46bd      	mov	sp, r7
 800f97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f980:	4770      	bx	lr

0800f982 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f982:	b580      	push	{r7, lr}
 800f984:	b082      	sub	sp, #8
 800f986:	af00      	add	r7, sp, #0
 800f988:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f990:	2b03      	cmp	r3, #3
 800f992:	d10b      	bne.n	800f9ac <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f99a:	69db      	ldr	r3, [r3, #28]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d005      	beq.n	800f9ac <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f9a6:	69db      	ldr	r3, [r3, #28]
 800f9a8:	6878      	ldr	r0, [r7, #4]
 800f9aa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f9ac:	2300      	movs	r3, #0
}
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	3708      	adds	r7, #8
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	bd80      	pop	{r7, pc}

0800f9b6 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f9b6:	b480      	push	{r7}
 800f9b8:	b083      	sub	sp, #12
 800f9ba:	af00      	add	r7, sp, #0
 800f9bc:	6078      	str	r0, [r7, #4]
 800f9be:	460b      	mov	r3, r1
 800f9c0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800f9c2:	2300      	movs	r3, #0
}
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	370c      	adds	r7, #12
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ce:	4770      	bx	lr

0800f9d0 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f9d0:	b480      	push	{r7}
 800f9d2:	b083      	sub	sp, #12
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	6078      	str	r0, [r7, #4]
 800f9d8:	460b      	mov	r3, r1
 800f9da:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800f9dc:	2300      	movs	r3, #0
}
 800f9de:	4618      	mov	r0, r3
 800f9e0:	370c      	adds	r7, #12
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e8:	4770      	bx	lr

0800f9ea <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f9ea:	b480      	push	{r7}
 800f9ec:	b083      	sub	sp, #12
 800f9ee:	af00      	add	r7, sp, #0
 800f9f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f9f2:	2300      	movs	r3, #0
}
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	370c      	adds	r7, #12
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9fe:	4770      	bx	lr

0800fa00 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b082      	sub	sp, #8
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	2201      	movs	r2, #1
 800fa0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d009      	beq.n	800fa2e <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa20:	685b      	ldr	r3, [r3, #4]
 800fa22:	687a      	ldr	r2, [r7, #4]
 800fa24:	6852      	ldr	r2, [r2, #4]
 800fa26:	b2d2      	uxtb	r2, r2
 800fa28:	4611      	mov	r1, r2
 800fa2a:	6878      	ldr	r0, [r7, #4]
 800fa2c:	4798      	blx	r3
  }

  return USBD_OK;
 800fa2e:	2300      	movs	r3, #0
}
 800fa30:	4618      	mov	r0, r3
 800fa32:	3708      	adds	r7, #8
 800fa34:	46bd      	mov	sp, r7
 800fa36:	bd80      	pop	{r7, pc}

0800fa38 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800fa38:	b480      	push	{r7}
 800fa3a:	b087      	sub	sp, #28
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800fa44:	697b      	ldr	r3, [r7, #20]
 800fa46:	781b      	ldrb	r3, [r3, #0]
 800fa48:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800fa4a:	697b      	ldr	r3, [r7, #20]
 800fa4c:	3301      	adds	r3, #1
 800fa4e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800fa50:	697b      	ldr	r3, [r7, #20]
 800fa52:	781b      	ldrb	r3, [r3, #0]
 800fa54:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800fa56:	8a3b      	ldrh	r3, [r7, #16]
 800fa58:	021b      	lsls	r3, r3, #8
 800fa5a:	b21a      	sxth	r2, r3
 800fa5c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fa60:	4313      	orrs	r3, r2
 800fa62:	b21b      	sxth	r3, r3
 800fa64:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800fa66:	89fb      	ldrh	r3, [r7, #14]
}
 800fa68:	4618      	mov	r0, r3
 800fa6a:	371c      	adds	r7, #28
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa72:	4770      	bx	lr

0800fa74 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b084      	sub	sp, #16
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
 800fa7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fa7e:	2300      	movs	r3, #0
 800fa80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fa82:	683b      	ldr	r3, [r7, #0]
 800fa84:	781b      	ldrb	r3, [r3, #0]
 800fa86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fa8a:	2b20      	cmp	r3, #32
 800fa8c:	d004      	beq.n	800fa98 <USBD_StdDevReq+0x24>
 800fa8e:	2b40      	cmp	r3, #64	; 0x40
 800fa90:	d002      	beq.n	800fa98 <USBD_StdDevReq+0x24>
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d00a      	beq.n	800faac <USBD_StdDevReq+0x38>
 800fa96:	e050      	b.n	800fb3a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa9e:	689b      	ldr	r3, [r3, #8]
 800faa0:	6839      	ldr	r1, [r7, #0]
 800faa2:	6878      	ldr	r0, [r7, #4]
 800faa4:	4798      	blx	r3
 800faa6:	4603      	mov	r3, r0
 800faa8:	73fb      	strb	r3, [r7, #15]
    break;
 800faaa:	e04b      	b.n	800fb44 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800faac:	683b      	ldr	r3, [r7, #0]
 800faae:	785b      	ldrb	r3, [r3, #1]
 800fab0:	2b09      	cmp	r3, #9
 800fab2:	d83c      	bhi.n	800fb2e <USBD_StdDevReq+0xba>
 800fab4:	a201      	add	r2, pc, #4	; (adr r2, 800fabc <USBD_StdDevReq+0x48>)
 800fab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800faba:	bf00      	nop
 800fabc:	0800fb11 	.word	0x0800fb11
 800fac0:	0800fb25 	.word	0x0800fb25
 800fac4:	0800fb2f 	.word	0x0800fb2f
 800fac8:	0800fb1b 	.word	0x0800fb1b
 800facc:	0800fb2f 	.word	0x0800fb2f
 800fad0:	0800faef 	.word	0x0800faef
 800fad4:	0800fae5 	.word	0x0800fae5
 800fad8:	0800fb2f 	.word	0x0800fb2f
 800fadc:	0800fb07 	.word	0x0800fb07
 800fae0:	0800faf9 	.word	0x0800faf9
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800fae4:	6839      	ldr	r1, [r7, #0]
 800fae6:	6878      	ldr	r0, [r7, #4]
 800fae8:	f000 f9ce 	bl	800fe88 <USBD_GetDescriptor>
      break;
 800faec:	e024      	b.n	800fb38 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800faee:	6839      	ldr	r1, [r7, #0]
 800faf0:	6878      	ldr	r0, [r7, #4]
 800faf2:	f000 fb33 	bl	801015c <USBD_SetAddress>
      break;
 800faf6:	e01f      	b.n	800fb38 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800faf8:	6839      	ldr	r1, [r7, #0]
 800fafa:	6878      	ldr	r0, [r7, #4]
 800fafc:	f000 fb70 	bl	80101e0 <USBD_SetConfig>
 800fb00:	4603      	mov	r3, r0
 800fb02:	73fb      	strb	r3, [r7, #15]
      break;
 800fb04:	e018      	b.n	800fb38 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800fb06:	6839      	ldr	r1, [r7, #0]
 800fb08:	6878      	ldr	r0, [r7, #4]
 800fb0a:	f000 fc0d 	bl	8010328 <USBD_GetConfig>
      break;
 800fb0e:	e013      	b.n	800fb38 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800fb10:	6839      	ldr	r1, [r7, #0]
 800fb12:	6878      	ldr	r0, [r7, #4]
 800fb14:	f000 fc3c 	bl	8010390 <USBD_GetStatus>
      break;
 800fb18:	e00e      	b.n	800fb38 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800fb1a:	6839      	ldr	r1, [r7, #0]
 800fb1c:	6878      	ldr	r0, [r7, #4]
 800fb1e:	f000 fc6a 	bl	80103f6 <USBD_SetFeature>
      break;
 800fb22:	e009      	b.n	800fb38 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800fb24:	6839      	ldr	r1, [r7, #0]
 800fb26:	6878      	ldr	r0, [r7, #4]
 800fb28:	f000 fc79 	bl	801041e <USBD_ClrFeature>
      break;
 800fb2c:	e004      	b.n	800fb38 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800fb2e:	6839      	ldr	r1, [r7, #0]
 800fb30:	6878      	ldr	r0, [r7, #4]
 800fb32:	f000 fccf 	bl	80104d4 <USBD_CtlError>
      break;
 800fb36:	bf00      	nop
    }
    break;
 800fb38:	e004      	b.n	800fb44 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800fb3a:	6839      	ldr	r1, [r7, #0]
 800fb3c:	6878      	ldr	r0, [r7, #4]
 800fb3e:	f000 fcc9 	bl	80104d4 <USBD_CtlError>
    break;
 800fb42:	bf00      	nop
  }

  return ret;
 800fb44:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb46:	4618      	mov	r0, r3
 800fb48:	3710      	adds	r7, #16
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	bd80      	pop	{r7, pc}
 800fb4e:	bf00      	nop

0800fb50 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b084      	sub	sp, #16
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
 800fb58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fb5e:	683b      	ldr	r3, [r7, #0]
 800fb60:	781b      	ldrb	r3, [r3, #0]
 800fb62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fb66:	2b20      	cmp	r3, #32
 800fb68:	d003      	beq.n	800fb72 <USBD_StdItfReq+0x22>
 800fb6a:	2b40      	cmp	r3, #64	; 0x40
 800fb6c:	d001      	beq.n	800fb72 <USBD_StdItfReq+0x22>
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d12a      	bne.n	800fbc8 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb78:	3b01      	subs	r3, #1
 800fb7a:	2b02      	cmp	r3, #2
 800fb7c:	d81d      	bhi.n	800fbba <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800fb7e:	683b      	ldr	r3, [r7, #0]
 800fb80:	889b      	ldrh	r3, [r3, #4]
 800fb82:	b2db      	uxtb	r3, r3
 800fb84:	2b01      	cmp	r3, #1
 800fb86:	d813      	bhi.n	800fbb0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb8e:	689b      	ldr	r3, [r3, #8]
 800fb90:	6839      	ldr	r1, [r7, #0]
 800fb92:	6878      	ldr	r0, [r7, #4]
 800fb94:	4798      	blx	r3
 800fb96:	4603      	mov	r3, r0
 800fb98:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800fb9a:	683b      	ldr	r3, [r7, #0]
 800fb9c:	88db      	ldrh	r3, [r3, #6]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d110      	bne.n	800fbc4 <USBD_StdItfReq+0x74>
 800fba2:	7bfb      	ldrb	r3, [r7, #15]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d10d      	bne.n	800fbc4 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800fba8:	6878      	ldr	r0, [r7, #4]
 800fbaa:	f000 fd41 	bl	8010630 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800fbae:	e009      	b.n	800fbc4 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800fbb0:	6839      	ldr	r1, [r7, #0]
 800fbb2:	6878      	ldr	r0, [r7, #4]
 800fbb4:	f000 fc8e 	bl	80104d4 <USBD_CtlError>
      break;
 800fbb8:	e004      	b.n	800fbc4 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800fbba:	6839      	ldr	r1, [r7, #0]
 800fbbc:	6878      	ldr	r0, [r7, #4]
 800fbbe:	f000 fc89 	bl	80104d4 <USBD_CtlError>
      break;
 800fbc2:	e000      	b.n	800fbc6 <USBD_StdItfReq+0x76>
      break;
 800fbc4:	bf00      	nop
    }
    break;
 800fbc6:	e004      	b.n	800fbd2 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800fbc8:	6839      	ldr	r1, [r7, #0]
 800fbca:	6878      	ldr	r0, [r7, #4]
 800fbcc:	f000 fc82 	bl	80104d4 <USBD_CtlError>
    break;
 800fbd0:	bf00      	nop
  }

  return ret;
 800fbd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	3710      	adds	r7, #16
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	bd80      	pop	{r7, pc}

0800fbdc <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b084      	sub	sp, #16
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
 800fbe4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800fbea:	683b      	ldr	r3, [r7, #0]
 800fbec:	889b      	ldrh	r3, [r3, #4]
 800fbee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fbf0:	683b      	ldr	r3, [r7, #0]
 800fbf2:	781b      	ldrb	r3, [r3, #0]
 800fbf4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fbf8:	2b20      	cmp	r3, #32
 800fbfa:	d004      	beq.n	800fc06 <USBD_StdEPReq+0x2a>
 800fbfc:	2b40      	cmp	r3, #64	; 0x40
 800fbfe:	d002      	beq.n	800fc06 <USBD_StdEPReq+0x2a>
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d00a      	beq.n	800fc1a <USBD_StdEPReq+0x3e>
 800fc04:	e135      	b.n	800fe72 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc0c:	689b      	ldr	r3, [r3, #8]
 800fc0e:	6839      	ldr	r1, [r7, #0]
 800fc10:	6878      	ldr	r0, [r7, #4]
 800fc12:	4798      	blx	r3
 800fc14:	4603      	mov	r3, r0
 800fc16:	73fb      	strb	r3, [r7, #15]
    break;
 800fc18:	e130      	b.n	800fe7c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800fc1a:	683b      	ldr	r3, [r7, #0]
 800fc1c:	785b      	ldrb	r3, [r3, #1]
 800fc1e:	2b01      	cmp	r3, #1
 800fc20:	d03e      	beq.n	800fca0 <USBD_StdEPReq+0xc4>
 800fc22:	2b03      	cmp	r3, #3
 800fc24:	d002      	beq.n	800fc2c <USBD_StdEPReq+0x50>
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d077      	beq.n	800fd1a <USBD_StdEPReq+0x13e>
 800fc2a:	e11c      	b.n	800fe66 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fc32:	2b02      	cmp	r3, #2
 800fc34:	d002      	beq.n	800fc3c <USBD_StdEPReq+0x60>
 800fc36:	2b03      	cmp	r3, #3
 800fc38:	d015      	beq.n	800fc66 <USBD_StdEPReq+0x8a>
 800fc3a:	e02b      	b.n	800fc94 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fc3c:	7bbb      	ldrb	r3, [r7, #14]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d00c      	beq.n	800fc5c <USBD_StdEPReq+0x80>
 800fc42:	7bbb      	ldrb	r3, [r7, #14]
 800fc44:	2b80      	cmp	r3, #128	; 0x80
 800fc46:	d009      	beq.n	800fc5c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800fc48:	7bbb      	ldrb	r3, [r7, #14]
 800fc4a:	4619      	mov	r1, r3
 800fc4c:	6878      	ldr	r0, [r7, #4]
 800fc4e:	f001 f928 	bl	8010ea2 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800fc52:	2180      	movs	r1, #128	; 0x80
 800fc54:	6878      	ldr	r0, [r7, #4]
 800fc56:	f001 f924 	bl	8010ea2 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800fc5a:	e020      	b.n	800fc9e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800fc5c:	6839      	ldr	r1, [r7, #0]
 800fc5e:	6878      	ldr	r0, [r7, #4]
 800fc60:	f000 fc38 	bl	80104d4 <USBD_CtlError>
        break;
 800fc64:	e01b      	b.n	800fc9e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800fc66:	683b      	ldr	r3, [r7, #0]
 800fc68:	885b      	ldrh	r3, [r3, #2]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d10e      	bne.n	800fc8c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800fc6e:	7bbb      	ldrb	r3, [r7, #14]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d00b      	beq.n	800fc8c <USBD_StdEPReq+0xb0>
 800fc74:	7bbb      	ldrb	r3, [r7, #14]
 800fc76:	2b80      	cmp	r3, #128	; 0x80
 800fc78:	d008      	beq.n	800fc8c <USBD_StdEPReq+0xb0>
 800fc7a:	683b      	ldr	r3, [r7, #0]
 800fc7c:	88db      	ldrh	r3, [r3, #6]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d104      	bne.n	800fc8c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800fc82:	7bbb      	ldrb	r3, [r7, #14]
 800fc84:	4619      	mov	r1, r3
 800fc86:	6878      	ldr	r0, [r7, #4]
 800fc88:	f001 f90b 	bl	8010ea2 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800fc8c:	6878      	ldr	r0, [r7, #4]
 800fc8e:	f000 fccf 	bl	8010630 <USBD_CtlSendStatus>

        break;
 800fc92:	e004      	b.n	800fc9e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800fc94:	6839      	ldr	r1, [r7, #0]
 800fc96:	6878      	ldr	r0, [r7, #4]
 800fc98:	f000 fc1c 	bl	80104d4 <USBD_CtlError>
        break;
 800fc9c:	bf00      	nop
      }
      break;
 800fc9e:	e0e7      	b.n	800fe70 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fca6:	2b02      	cmp	r3, #2
 800fca8:	d002      	beq.n	800fcb0 <USBD_StdEPReq+0xd4>
 800fcaa:	2b03      	cmp	r3, #3
 800fcac:	d015      	beq.n	800fcda <USBD_StdEPReq+0xfe>
 800fcae:	e02d      	b.n	800fd0c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fcb0:	7bbb      	ldrb	r3, [r7, #14]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d00c      	beq.n	800fcd0 <USBD_StdEPReq+0xf4>
 800fcb6:	7bbb      	ldrb	r3, [r7, #14]
 800fcb8:	2b80      	cmp	r3, #128	; 0x80
 800fcba:	d009      	beq.n	800fcd0 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800fcbc:	7bbb      	ldrb	r3, [r7, #14]
 800fcbe:	4619      	mov	r1, r3
 800fcc0:	6878      	ldr	r0, [r7, #4]
 800fcc2:	f001 f8ee 	bl	8010ea2 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800fcc6:	2180      	movs	r1, #128	; 0x80
 800fcc8:	6878      	ldr	r0, [r7, #4]
 800fcca:	f001 f8ea 	bl	8010ea2 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800fcce:	e023      	b.n	800fd18 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800fcd0:	6839      	ldr	r1, [r7, #0]
 800fcd2:	6878      	ldr	r0, [r7, #4]
 800fcd4:	f000 fbfe 	bl	80104d4 <USBD_CtlError>
        break;
 800fcd8:	e01e      	b.n	800fd18 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800fcda:	683b      	ldr	r3, [r7, #0]
 800fcdc:	885b      	ldrh	r3, [r3, #2]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d119      	bne.n	800fd16 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800fce2:	7bbb      	ldrb	r3, [r7, #14]
 800fce4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d004      	beq.n	800fcf6 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800fcec:	7bbb      	ldrb	r3, [r7, #14]
 800fcee:	4619      	mov	r1, r3
 800fcf0:	6878      	ldr	r0, [r7, #4]
 800fcf2:	f001 f8f5 	bl	8010ee0 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800fcf6:	6878      	ldr	r0, [r7, #4]
 800fcf8:	f000 fc9a 	bl	8010630 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd02:	689b      	ldr	r3, [r3, #8]
 800fd04:	6839      	ldr	r1, [r7, #0]
 800fd06:	6878      	ldr	r0, [r7, #4]
 800fd08:	4798      	blx	r3
        }
        break;
 800fd0a:	e004      	b.n	800fd16 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800fd0c:	6839      	ldr	r1, [r7, #0]
 800fd0e:	6878      	ldr	r0, [r7, #4]
 800fd10:	f000 fbe0 	bl	80104d4 <USBD_CtlError>
        break;
 800fd14:	e000      	b.n	800fd18 <USBD_StdEPReq+0x13c>
        break;
 800fd16:	bf00      	nop
      }
      break;
 800fd18:	e0aa      	b.n	800fe70 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd20:	2b02      	cmp	r3, #2
 800fd22:	d002      	beq.n	800fd2a <USBD_StdEPReq+0x14e>
 800fd24:	2b03      	cmp	r3, #3
 800fd26:	d032      	beq.n	800fd8e <USBD_StdEPReq+0x1b2>
 800fd28:	e097      	b.n	800fe5a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fd2a:	7bbb      	ldrb	r3, [r7, #14]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d007      	beq.n	800fd40 <USBD_StdEPReq+0x164>
 800fd30:	7bbb      	ldrb	r3, [r7, #14]
 800fd32:	2b80      	cmp	r3, #128	; 0x80
 800fd34:	d004      	beq.n	800fd40 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800fd36:	6839      	ldr	r1, [r7, #0]
 800fd38:	6878      	ldr	r0, [r7, #4]
 800fd3a:	f000 fbcb 	bl	80104d4 <USBD_CtlError>
          break;
 800fd3e:	e091      	b.n	800fe64 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fd40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	da0b      	bge.n	800fd60 <USBD_StdEPReq+0x184>
 800fd48:	7bbb      	ldrb	r3, [r7, #14]
 800fd4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fd4e:	4613      	mov	r3, r2
 800fd50:	009b      	lsls	r3, r3, #2
 800fd52:	4413      	add	r3, r2
 800fd54:	009b      	lsls	r3, r3, #2
 800fd56:	3310      	adds	r3, #16
 800fd58:	687a      	ldr	r2, [r7, #4]
 800fd5a:	4413      	add	r3, r2
 800fd5c:	3304      	adds	r3, #4
 800fd5e:	e00b      	b.n	800fd78 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800fd60:	7bbb      	ldrb	r3, [r7, #14]
 800fd62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fd66:	4613      	mov	r3, r2
 800fd68:	009b      	lsls	r3, r3, #2
 800fd6a:	4413      	add	r3, r2
 800fd6c:	009b      	lsls	r3, r3, #2
 800fd6e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fd72:	687a      	ldr	r2, [r7, #4]
 800fd74:	4413      	add	r3, r2
 800fd76:	3304      	adds	r3, #4
 800fd78:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800fd7a:	68bb      	ldr	r3, [r7, #8]
 800fd7c:	2200      	movs	r2, #0
 800fd7e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fd80:	68bb      	ldr	r3, [r7, #8]
 800fd82:	2202      	movs	r2, #2
 800fd84:	4619      	mov	r1, r3
 800fd86:	6878      	ldr	r0, [r7, #4]
 800fd88:	f000 fc15 	bl	80105b6 <USBD_CtlSendData>
        break;
 800fd8c:	e06a      	b.n	800fe64 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800fd8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	da11      	bge.n	800fdba <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800fd96:	7bbb      	ldrb	r3, [r7, #14]
 800fd98:	f003 020f 	and.w	r2, r3, #15
 800fd9c:	6879      	ldr	r1, [r7, #4]
 800fd9e:	4613      	mov	r3, r2
 800fda0:	009b      	lsls	r3, r3, #2
 800fda2:	4413      	add	r3, r2
 800fda4:	009b      	lsls	r3, r3, #2
 800fda6:	440b      	add	r3, r1
 800fda8:	3324      	adds	r3, #36	; 0x24
 800fdaa:	881b      	ldrh	r3, [r3, #0]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d117      	bne.n	800fde0 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800fdb0:	6839      	ldr	r1, [r7, #0]
 800fdb2:	6878      	ldr	r0, [r7, #4]
 800fdb4:	f000 fb8e 	bl	80104d4 <USBD_CtlError>
            break;
 800fdb8:	e054      	b.n	800fe64 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800fdba:	7bbb      	ldrb	r3, [r7, #14]
 800fdbc:	f003 020f 	and.w	r2, r3, #15
 800fdc0:	6879      	ldr	r1, [r7, #4]
 800fdc2:	4613      	mov	r3, r2
 800fdc4:	009b      	lsls	r3, r3, #2
 800fdc6:	4413      	add	r3, r2
 800fdc8:	009b      	lsls	r3, r3, #2
 800fdca:	440b      	add	r3, r1
 800fdcc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800fdd0:	881b      	ldrh	r3, [r3, #0]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d104      	bne.n	800fde0 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800fdd6:	6839      	ldr	r1, [r7, #0]
 800fdd8:	6878      	ldr	r0, [r7, #4]
 800fdda:	f000 fb7b 	bl	80104d4 <USBD_CtlError>
            break;
 800fdde:	e041      	b.n	800fe64 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fde0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	da0b      	bge.n	800fe00 <USBD_StdEPReq+0x224>
 800fde8:	7bbb      	ldrb	r3, [r7, #14]
 800fdea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fdee:	4613      	mov	r3, r2
 800fdf0:	009b      	lsls	r3, r3, #2
 800fdf2:	4413      	add	r3, r2
 800fdf4:	009b      	lsls	r3, r3, #2
 800fdf6:	3310      	adds	r3, #16
 800fdf8:	687a      	ldr	r2, [r7, #4]
 800fdfa:	4413      	add	r3, r2
 800fdfc:	3304      	adds	r3, #4
 800fdfe:	e00b      	b.n	800fe18 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800fe00:	7bbb      	ldrb	r3, [r7, #14]
 800fe02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fe06:	4613      	mov	r3, r2
 800fe08:	009b      	lsls	r3, r3, #2
 800fe0a:	4413      	add	r3, r2
 800fe0c:	009b      	lsls	r3, r3, #2
 800fe0e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fe12:	687a      	ldr	r2, [r7, #4]
 800fe14:	4413      	add	r3, r2
 800fe16:	3304      	adds	r3, #4
 800fe18:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800fe1a:	7bbb      	ldrb	r3, [r7, #14]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d002      	beq.n	800fe26 <USBD_StdEPReq+0x24a>
 800fe20:	7bbb      	ldrb	r3, [r7, #14]
 800fe22:	2b80      	cmp	r3, #128	; 0x80
 800fe24:	d103      	bne.n	800fe2e <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800fe26:	68bb      	ldr	r3, [r7, #8]
 800fe28:	2200      	movs	r2, #0
 800fe2a:	601a      	str	r2, [r3, #0]
 800fe2c:	e00e      	b.n	800fe4c <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800fe2e:	7bbb      	ldrb	r3, [r7, #14]
 800fe30:	4619      	mov	r1, r3
 800fe32:	6878      	ldr	r0, [r7, #4]
 800fe34:	f001 f873 	bl	8010f1e <USBD_LL_IsStallEP>
 800fe38:	4603      	mov	r3, r0
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d003      	beq.n	800fe46 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800fe3e:	68bb      	ldr	r3, [r7, #8]
 800fe40:	2201      	movs	r2, #1
 800fe42:	601a      	str	r2, [r3, #0]
 800fe44:	e002      	b.n	800fe4c <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800fe46:	68bb      	ldr	r3, [r7, #8]
 800fe48:	2200      	movs	r2, #0
 800fe4a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fe4c:	68bb      	ldr	r3, [r7, #8]
 800fe4e:	2202      	movs	r2, #2
 800fe50:	4619      	mov	r1, r3
 800fe52:	6878      	ldr	r0, [r7, #4]
 800fe54:	f000 fbaf 	bl	80105b6 <USBD_CtlSendData>
          break;
 800fe58:	e004      	b.n	800fe64 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800fe5a:	6839      	ldr	r1, [r7, #0]
 800fe5c:	6878      	ldr	r0, [r7, #4]
 800fe5e:	f000 fb39 	bl	80104d4 <USBD_CtlError>
        break;
 800fe62:	bf00      	nop
      }
      break;
 800fe64:	e004      	b.n	800fe70 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800fe66:	6839      	ldr	r1, [r7, #0]
 800fe68:	6878      	ldr	r0, [r7, #4]
 800fe6a:	f000 fb33 	bl	80104d4 <USBD_CtlError>
      break;
 800fe6e:	bf00      	nop
    }
    break;
 800fe70:	e004      	b.n	800fe7c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800fe72:	6839      	ldr	r1, [r7, #0]
 800fe74:	6878      	ldr	r0, [r7, #4]
 800fe76:	f000 fb2d 	bl	80104d4 <USBD_CtlError>
    break;
 800fe7a:	bf00      	nop
  }

  return ret;
 800fe7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe7e:	4618      	mov	r0, r3
 800fe80:	3710      	adds	r7, #16
 800fe82:	46bd      	mov	sp, r7
 800fe84:	bd80      	pop	{r7, pc}
	...

0800fe88 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b084      	sub	sp, #16
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
 800fe90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fe92:	2300      	movs	r3, #0
 800fe94:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800fe96:	2300      	movs	r3, #0
 800fe98:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800fe9e:	683b      	ldr	r3, [r7, #0]
 800fea0:	885b      	ldrh	r3, [r3, #2]
 800fea2:	0a1b      	lsrs	r3, r3, #8
 800fea4:	b29b      	uxth	r3, r3
 800fea6:	3b01      	subs	r3, #1
 800fea8:	2b06      	cmp	r3, #6
 800feaa:	f200 8128 	bhi.w	80100fe <USBD_GetDescriptor+0x276>
 800feae:	a201      	add	r2, pc, #4	; (adr r2, 800feb4 <USBD_GetDescriptor+0x2c>)
 800feb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800feb4:	0800fed1 	.word	0x0800fed1
 800feb8:	0800fee9 	.word	0x0800fee9
 800febc:	0800ff29 	.word	0x0800ff29
 800fec0:	080100ff 	.word	0x080100ff
 800fec4:	080100ff 	.word	0x080100ff
 800fec8:	0801009f 	.word	0x0801009f
 800fecc:	080100cb 	.word	0x080100cb
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	687a      	ldr	r2, [r7, #4]
 800feda:	7c12      	ldrb	r2, [r2, #16]
 800fedc:	f107 0108 	add.w	r1, r7, #8
 800fee0:	4610      	mov	r0, r2
 800fee2:	4798      	blx	r3
 800fee4:	60f8      	str	r0, [r7, #12]
    break;
 800fee6:	e112      	b.n	801010e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	7c1b      	ldrb	r3, [r3, #16]
 800feec:	2b00      	cmp	r3, #0
 800feee:	d10d      	bne.n	800ff0c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fef8:	f107 0208 	add.w	r2, r7, #8
 800fefc:	4610      	mov	r0, r2
 800fefe:	4798      	blx	r3
 800ff00:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	3301      	adds	r3, #1
 800ff06:	2202      	movs	r2, #2
 800ff08:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800ff0a:	e100      	b.n	801010e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff14:	f107 0208 	add.w	r2, r7, #8
 800ff18:	4610      	mov	r0, r2
 800ff1a:	4798      	blx	r3
 800ff1c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	3301      	adds	r3, #1
 800ff22:	2202      	movs	r2, #2
 800ff24:	701a      	strb	r2, [r3, #0]
    break;
 800ff26:	e0f2      	b.n	801010e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800ff28:	683b      	ldr	r3, [r7, #0]
 800ff2a:	885b      	ldrh	r3, [r3, #2]
 800ff2c:	b2db      	uxtb	r3, r3
 800ff2e:	2b05      	cmp	r3, #5
 800ff30:	f200 80ac 	bhi.w	801008c <USBD_GetDescriptor+0x204>
 800ff34:	a201      	add	r2, pc, #4	; (adr r2, 800ff3c <USBD_GetDescriptor+0xb4>)
 800ff36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff3a:	bf00      	nop
 800ff3c:	0800ff55 	.word	0x0800ff55
 800ff40:	0800ff89 	.word	0x0800ff89
 800ff44:	0800ffbd 	.word	0x0800ffbd
 800ff48:	0800fff1 	.word	0x0800fff1
 800ff4c:	08010025 	.word	0x08010025
 800ff50:	08010059 	.word	0x08010059
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff5a:	685b      	ldr	r3, [r3, #4]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d00b      	beq.n	800ff78 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff66:	685b      	ldr	r3, [r3, #4]
 800ff68:	687a      	ldr	r2, [r7, #4]
 800ff6a:	7c12      	ldrb	r2, [r2, #16]
 800ff6c:	f107 0108 	add.w	r1, r7, #8
 800ff70:	4610      	mov	r0, r2
 800ff72:	4798      	blx	r3
 800ff74:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ff76:	e091      	b.n	801009c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ff78:	6839      	ldr	r1, [r7, #0]
 800ff7a:	6878      	ldr	r0, [r7, #4]
 800ff7c:	f000 faaa 	bl	80104d4 <USBD_CtlError>
        err++;
 800ff80:	7afb      	ldrb	r3, [r7, #11]
 800ff82:	3301      	adds	r3, #1
 800ff84:	72fb      	strb	r3, [r7, #11]
      break;
 800ff86:	e089      	b.n	801009c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff8e:	689b      	ldr	r3, [r3, #8]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d00b      	beq.n	800ffac <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff9a:	689b      	ldr	r3, [r3, #8]
 800ff9c:	687a      	ldr	r2, [r7, #4]
 800ff9e:	7c12      	ldrb	r2, [r2, #16]
 800ffa0:	f107 0108 	add.w	r1, r7, #8
 800ffa4:	4610      	mov	r0, r2
 800ffa6:	4798      	blx	r3
 800ffa8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ffaa:	e077      	b.n	801009c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ffac:	6839      	ldr	r1, [r7, #0]
 800ffae:	6878      	ldr	r0, [r7, #4]
 800ffb0:	f000 fa90 	bl	80104d4 <USBD_CtlError>
        err++;
 800ffb4:	7afb      	ldrb	r3, [r7, #11]
 800ffb6:	3301      	adds	r3, #1
 800ffb8:	72fb      	strb	r3, [r7, #11]
      break;
 800ffba:	e06f      	b.n	801009c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ffc2:	68db      	ldr	r3, [r3, #12]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d00b      	beq.n	800ffe0 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ffce:	68db      	ldr	r3, [r3, #12]
 800ffd0:	687a      	ldr	r2, [r7, #4]
 800ffd2:	7c12      	ldrb	r2, [r2, #16]
 800ffd4:	f107 0108 	add.w	r1, r7, #8
 800ffd8:	4610      	mov	r0, r2
 800ffda:	4798      	blx	r3
 800ffdc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ffde:	e05d      	b.n	801009c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ffe0:	6839      	ldr	r1, [r7, #0]
 800ffe2:	6878      	ldr	r0, [r7, #4]
 800ffe4:	f000 fa76 	bl	80104d4 <USBD_CtlError>
        err++;
 800ffe8:	7afb      	ldrb	r3, [r7, #11]
 800ffea:	3301      	adds	r3, #1
 800ffec:	72fb      	strb	r3, [r7, #11]
      break;
 800ffee:	e055      	b.n	801009c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fff6:	691b      	ldr	r3, [r3, #16]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d00b      	beq.n	8010014 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010002:	691b      	ldr	r3, [r3, #16]
 8010004:	687a      	ldr	r2, [r7, #4]
 8010006:	7c12      	ldrb	r2, [r2, #16]
 8010008:	f107 0108 	add.w	r1, r7, #8
 801000c:	4610      	mov	r0, r2
 801000e:	4798      	blx	r3
 8010010:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010012:	e043      	b.n	801009c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8010014:	6839      	ldr	r1, [r7, #0]
 8010016:	6878      	ldr	r0, [r7, #4]
 8010018:	f000 fa5c 	bl	80104d4 <USBD_CtlError>
        err++;
 801001c:	7afb      	ldrb	r3, [r7, #11]
 801001e:	3301      	adds	r3, #1
 8010020:	72fb      	strb	r3, [r7, #11]
      break;
 8010022:	e03b      	b.n	801009c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801002a:	695b      	ldr	r3, [r3, #20]
 801002c:	2b00      	cmp	r3, #0
 801002e:	d00b      	beq.n	8010048 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010036:	695b      	ldr	r3, [r3, #20]
 8010038:	687a      	ldr	r2, [r7, #4]
 801003a:	7c12      	ldrb	r2, [r2, #16]
 801003c:	f107 0108 	add.w	r1, r7, #8
 8010040:	4610      	mov	r0, r2
 8010042:	4798      	blx	r3
 8010044:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010046:	e029      	b.n	801009c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8010048:	6839      	ldr	r1, [r7, #0]
 801004a:	6878      	ldr	r0, [r7, #4]
 801004c:	f000 fa42 	bl	80104d4 <USBD_CtlError>
        err++;
 8010050:	7afb      	ldrb	r3, [r7, #11]
 8010052:	3301      	adds	r3, #1
 8010054:	72fb      	strb	r3, [r7, #11]
      break;
 8010056:	e021      	b.n	801009c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801005e:	699b      	ldr	r3, [r3, #24]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d00b      	beq.n	801007c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801006a:	699b      	ldr	r3, [r3, #24]
 801006c:	687a      	ldr	r2, [r7, #4]
 801006e:	7c12      	ldrb	r2, [r2, #16]
 8010070:	f107 0108 	add.w	r1, r7, #8
 8010074:	4610      	mov	r0, r2
 8010076:	4798      	blx	r3
 8010078:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801007a:	e00f      	b.n	801009c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 801007c:	6839      	ldr	r1, [r7, #0]
 801007e:	6878      	ldr	r0, [r7, #4]
 8010080:	f000 fa28 	bl	80104d4 <USBD_CtlError>
        err++;
 8010084:	7afb      	ldrb	r3, [r7, #11]
 8010086:	3301      	adds	r3, #1
 8010088:	72fb      	strb	r3, [r7, #11]
      break;
 801008a:	e007      	b.n	801009c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 801008c:	6839      	ldr	r1, [r7, #0]
 801008e:	6878      	ldr	r0, [r7, #4]
 8010090:	f000 fa20 	bl	80104d4 <USBD_CtlError>
      err++;
 8010094:	7afb      	ldrb	r3, [r7, #11]
 8010096:	3301      	adds	r3, #1
 8010098:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 801009a:	bf00      	nop
    }
    break;
 801009c:	e037      	b.n	801010e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	7c1b      	ldrb	r3, [r3, #16]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d109      	bne.n	80100ba <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80100ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80100ae:	f107 0208 	add.w	r2, r7, #8
 80100b2:	4610      	mov	r0, r2
 80100b4:	4798      	blx	r3
 80100b6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80100b8:	e029      	b.n	801010e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80100ba:	6839      	ldr	r1, [r7, #0]
 80100bc:	6878      	ldr	r0, [r7, #4]
 80100be:	f000 fa09 	bl	80104d4 <USBD_CtlError>
      err++;
 80100c2:	7afb      	ldrb	r3, [r7, #11]
 80100c4:	3301      	adds	r3, #1
 80100c6:	72fb      	strb	r3, [r7, #11]
    break;
 80100c8:	e021      	b.n	801010e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	7c1b      	ldrb	r3, [r3, #16]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d10d      	bne.n	80100ee <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80100d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100da:	f107 0208 	add.w	r2, r7, #8
 80100de:	4610      	mov	r0, r2
 80100e0:	4798      	blx	r3
 80100e2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	3301      	adds	r3, #1
 80100e8:	2207      	movs	r2, #7
 80100ea:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80100ec:	e00f      	b.n	801010e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80100ee:	6839      	ldr	r1, [r7, #0]
 80100f0:	6878      	ldr	r0, [r7, #4]
 80100f2:	f000 f9ef 	bl	80104d4 <USBD_CtlError>
      err++;
 80100f6:	7afb      	ldrb	r3, [r7, #11]
 80100f8:	3301      	adds	r3, #1
 80100fa:	72fb      	strb	r3, [r7, #11]
    break;
 80100fc:	e007      	b.n	801010e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 80100fe:	6839      	ldr	r1, [r7, #0]
 8010100:	6878      	ldr	r0, [r7, #4]
 8010102:	f000 f9e7 	bl	80104d4 <USBD_CtlError>
    err++;
 8010106:	7afb      	ldrb	r3, [r7, #11]
 8010108:	3301      	adds	r3, #1
 801010a:	72fb      	strb	r3, [r7, #11]
    break;
 801010c:	bf00      	nop
  }

  if (err != 0U)
 801010e:	7afb      	ldrb	r3, [r7, #11]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d11e      	bne.n	8010152 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8010114:	683b      	ldr	r3, [r7, #0]
 8010116:	88db      	ldrh	r3, [r3, #6]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d016      	beq.n	801014a <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 801011c:	893b      	ldrh	r3, [r7, #8]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d00e      	beq.n	8010140 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8010122:	683b      	ldr	r3, [r7, #0]
 8010124:	88da      	ldrh	r2, [r3, #6]
 8010126:	893b      	ldrh	r3, [r7, #8]
 8010128:	4293      	cmp	r3, r2
 801012a:	bf28      	it	cs
 801012c:	4613      	movcs	r3, r2
 801012e:	b29b      	uxth	r3, r3
 8010130:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8010132:	893b      	ldrh	r3, [r7, #8]
 8010134:	461a      	mov	r2, r3
 8010136:	68f9      	ldr	r1, [r7, #12]
 8010138:	6878      	ldr	r0, [r7, #4]
 801013a:	f000 fa3c 	bl	80105b6 <USBD_CtlSendData>
 801013e:	e009      	b.n	8010154 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8010140:	6839      	ldr	r1, [r7, #0]
 8010142:	6878      	ldr	r0, [r7, #4]
 8010144:	f000 f9c6 	bl	80104d4 <USBD_CtlError>
 8010148:	e004      	b.n	8010154 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 801014a:	6878      	ldr	r0, [r7, #4]
 801014c:	f000 fa70 	bl	8010630 <USBD_CtlSendStatus>
 8010150:	e000      	b.n	8010154 <USBD_GetDescriptor+0x2cc>
    return;
 8010152:	bf00      	nop
    }
  }
}
 8010154:	3710      	adds	r7, #16
 8010156:	46bd      	mov	sp, r7
 8010158:	bd80      	pop	{r7, pc}
 801015a:	bf00      	nop

0801015c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801015c:	b580      	push	{r7, lr}
 801015e:	b084      	sub	sp, #16
 8010160:	af00      	add	r7, sp, #0
 8010162:	6078      	str	r0, [r7, #4]
 8010164:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010166:	683b      	ldr	r3, [r7, #0]
 8010168:	889b      	ldrh	r3, [r3, #4]
 801016a:	2b00      	cmp	r3, #0
 801016c:	d130      	bne.n	80101d0 <USBD_SetAddress+0x74>
 801016e:	683b      	ldr	r3, [r7, #0]
 8010170:	88db      	ldrh	r3, [r3, #6]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d12c      	bne.n	80101d0 <USBD_SetAddress+0x74>
 8010176:	683b      	ldr	r3, [r7, #0]
 8010178:	885b      	ldrh	r3, [r3, #2]
 801017a:	2b7f      	cmp	r3, #127	; 0x7f
 801017c:	d828      	bhi.n	80101d0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801017e:	683b      	ldr	r3, [r7, #0]
 8010180:	885b      	ldrh	r3, [r3, #2]
 8010182:	b2db      	uxtb	r3, r3
 8010184:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010188:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010190:	2b03      	cmp	r3, #3
 8010192:	d104      	bne.n	801019e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8010194:	6839      	ldr	r1, [r7, #0]
 8010196:	6878      	ldr	r0, [r7, #4]
 8010198:	f000 f99c 	bl	80104d4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801019c:	e01c      	b.n	80101d8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	7bfa      	ldrb	r2, [r7, #15]
 80101a2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80101a6:	7bfb      	ldrb	r3, [r7, #15]
 80101a8:	4619      	mov	r1, r3
 80101aa:	6878      	ldr	r0, [r7, #4]
 80101ac:	f000 fee3 	bl	8010f76 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80101b0:	6878      	ldr	r0, [r7, #4]
 80101b2:	f000 fa3d 	bl	8010630 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80101b6:	7bfb      	ldrb	r3, [r7, #15]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d004      	beq.n	80101c6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	2202      	movs	r2, #2
 80101c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80101c4:	e008      	b.n	80101d8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	2201      	movs	r2, #1
 80101ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80101ce:	e003      	b.n	80101d8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80101d0:	6839      	ldr	r1, [r7, #0]
 80101d2:	6878      	ldr	r0, [r7, #4]
 80101d4:	f000 f97e 	bl	80104d4 <USBD_CtlError>
  }
}
 80101d8:	bf00      	nop
 80101da:	3710      	adds	r7, #16
 80101dc:	46bd      	mov	sp, r7
 80101de:	bd80      	pop	{r7, pc}

080101e0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b084      	sub	sp, #16
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
 80101e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80101ea:	2300      	movs	r3, #0
 80101ec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80101ee:	683b      	ldr	r3, [r7, #0]
 80101f0:	885b      	ldrh	r3, [r3, #2]
 80101f2:	b2da      	uxtb	r2, r3
 80101f4:	4b4b      	ldr	r3, [pc, #300]	; (8010324 <USBD_SetConfig+0x144>)
 80101f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80101f8:	4b4a      	ldr	r3, [pc, #296]	; (8010324 <USBD_SetConfig+0x144>)
 80101fa:	781b      	ldrb	r3, [r3, #0]
 80101fc:	2b01      	cmp	r3, #1
 80101fe:	d905      	bls.n	801020c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010200:	6839      	ldr	r1, [r7, #0]
 8010202:	6878      	ldr	r0, [r7, #4]
 8010204:	f000 f966 	bl	80104d4 <USBD_CtlError>
    return USBD_FAIL;
 8010208:	2303      	movs	r3, #3
 801020a:	e087      	b.n	801031c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010212:	2b02      	cmp	r3, #2
 8010214:	d002      	beq.n	801021c <USBD_SetConfig+0x3c>
 8010216:	2b03      	cmp	r3, #3
 8010218:	d025      	beq.n	8010266 <USBD_SetConfig+0x86>
 801021a:	e071      	b.n	8010300 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 801021c:	4b41      	ldr	r3, [pc, #260]	; (8010324 <USBD_SetConfig+0x144>)
 801021e:	781b      	ldrb	r3, [r3, #0]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d01c      	beq.n	801025e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8010224:	4b3f      	ldr	r3, [pc, #252]	; (8010324 <USBD_SetConfig+0x144>)
 8010226:	781b      	ldrb	r3, [r3, #0]
 8010228:	461a      	mov	r2, r3
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 801022e:	4b3d      	ldr	r3, [pc, #244]	; (8010324 <USBD_SetConfig+0x144>)
 8010230:	781b      	ldrb	r3, [r3, #0]
 8010232:	4619      	mov	r1, r3
 8010234:	6878      	ldr	r0, [r7, #4]
 8010236:	f7ff f9a8 	bl	800f58a <USBD_SetClassConfig>
 801023a:	4603      	mov	r3, r0
 801023c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 801023e:	7bfb      	ldrb	r3, [r7, #15]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d004      	beq.n	801024e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8010244:	6839      	ldr	r1, [r7, #0]
 8010246:	6878      	ldr	r0, [r7, #4]
 8010248:	f000 f944 	bl	80104d4 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 801024c:	e065      	b.n	801031a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 801024e:	6878      	ldr	r0, [r7, #4]
 8010250:	f000 f9ee 	bl	8010630 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	2203      	movs	r2, #3
 8010258:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 801025c:	e05d      	b.n	801031a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 801025e:	6878      	ldr	r0, [r7, #4]
 8010260:	f000 f9e6 	bl	8010630 <USBD_CtlSendStatus>
    break;
 8010264:	e059      	b.n	801031a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8010266:	4b2f      	ldr	r3, [pc, #188]	; (8010324 <USBD_SetConfig+0x144>)
 8010268:	781b      	ldrb	r3, [r3, #0]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d112      	bne.n	8010294 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	2202      	movs	r2, #2
 8010272:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8010276:	4b2b      	ldr	r3, [pc, #172]	; (8010324 <USBD_SetConfig+0x144>)
 8010278:	781b      	ldrb	r3, [r3, #0]
 801027a:	461a      	mov	r2, r3
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010280:	4b28      	ldr	r3, [pc, #160]	; (8010324 <USBD_SetConfig+0x144>)
 8010282:	781b      	ldrb	r3, [r3, #0]
 8010284:	4619      	mov	r1, r3
 8010286:	6878      	ldr	r0, [r7, #4]
 8010288:	f7ff f99b 	bl	800f5c2 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 801028c:	6878      	ldr	r0, [r7, #4]
 801028e:	f000 f9cf 	bl	8010630 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8010292:	e042      	b.n	801031a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8010294:	4b23      	ldr	r3, [pc, #140]	; (8010324 <USBD_SetConfig+0x144>)
 8010296:	781b      	ldrb	r3, [r3, #0]
 8010298:	461a      	mov	r2, r3
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	685b      	ldr	r3, [r3, #4]
 801029e:	429a      	cmp	r2, r3
 80102a0:	d02a      	beq.n	80102f8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	685b      	ldr	r3, [r3, #4]
 80102a6:	b2db      	uxtb	r3, r3
 80102a8:	4619      	mov	r1, r3
 80102aa:	6878      	ldr	r0, [r7, #4]
 80102ac:	f7ff f989 	bl	800f5c2 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80102b0:	4b1c      	ldr	r3, [pc, #112]	; (8010324 <USBD_SetConfig+0x144>)
 80102b2:	781b      	ldrb	r3, [r3, #0]
 80102b4:	461a      	mov	r2, r3
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80102ba:	4b1a      	ldr	r3, [pc, #104]	; (8010324 <USBD_SetConfig+0x144>)
 80102bc:	781b      	ldrb	r3, [r3, #0]
 80102be:	4619      	mov	r1, r3
 80102c0:	6878      	ldr	r0, [r7, #4]
 80102c2:	f7ff f962 	bl	800f58a <USBD_SetClassConfig>
 80102c6:	4603      	mov	r3, r0
 80102c8:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80102ca:	7bfb      	ldrb	r3, [r7, #15]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d00f      	beq.n	80102f0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80102d0:	6839      	ldr	r1, [r7, #0]
 80102d2:	6878      	ldr	r0, [r7, #4]
 80102d4:	f000 f8fe 	bl	80104d4 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	685b      	ldr	r3, [r3, #4]
 80102dc:	b2db      	uxtb	r3, r3
 80102de:	4619      	mov	r1, r3
 80102e0:	6878      	ldr	r0, [r7, #4]
 80102e2:	f7ff f96e 	bl	800f5c2 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	2202      	movs	r2, #2
 80102ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80102ee:	e014      	b.n	801031a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80102f0:	6878      	ldr	r0, [r7, #4]
 80102f2:	f000 f99d 	bl	8010630 <USBD_CtlSendStatus>
    break;
 80102f6:	e010      	b.n	801031a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80102f8:	6878      	ldr	r0, [r7, #4]
 80102fa:	f000 f999 	bl	8010630 <USBD_CtlSendStatus>
    break;
 80102fe:	e00c      	b.n	801031a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8010300:	6839      	ldr	r1, [r7, #0]
 8010302:	6878      	ldr	r0, [r7, #4]
 8010304:	f000 f8e6 	bl	80104d4 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010308:	4b06      	ldr	r3, [pc, #24]	; (8010324 <USBD_SetConfig+0x144>)
 801030a:	781b      	ldrb	r3, [r3, #0]
 801030c:	4619      	mov	r1, r3
 801030e:	6878      	ldr	r0, [r7, #4]
 8010310:	f7ff f957 	bl	800f5c2 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8010314:	2303      	movs	r3, #3
 8010316:	73fb      	strb	r3, [r7, #15]
    break;
 8010318:	bf00      	nop
  }

  return ret;
 801031a:	7bfb      	ldrb	r3, [r7, #15]
}
 801031c:	4618      	mov	r0, r3
 801031e:	3710      	adds	r7, #16
 8010320:	46bd      	mov	sp, r7
 8010322:	bd80      	pop	{r7, pc}
 8010324:	240001f0 	.word	0x240001f0

08010328 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010328:	b580      	push	{r7, lr}
 801032a:	b082      	sub	sp, #8
 801032c:	af00      	add	r7, sp, #0
 801032e:	6078      	str	r0, [r7, #4]
 8010330:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010332:	683b      	ldr	r3, [r7, #0]
 8010334:	88db      	ldrh	r3, [r3, #6]
 8010336:	2b01      	cmp	r3, #1
 8010338:	d004      	beq.n	8010344 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801033a:	6839      	ldr	r1, [r7, #0]
 801033c:	6878      	ldr	r0, [r7, #4]
 801033e:	f000 f8c9 	bl	80104d4 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8010342:	e021      	b.n	8010388 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801034a:	2b01      	cmp	r3, #1
 801034c:	db17      	blt.n	801037e <USBD_GetConfig+0x56>
 801034e:	2b02      	cmp	r3, #2
 8010350:	dd02      	ble.n	8010358 <USBD_GetConfig+0x30>
 8010352:	2b03      	cmp	r3, #3
 8010354:	d00b      	beq.n	801036e <USBD_GetConfig+0x46>
 8010356:	e012      	b.n	801037e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	2200      	movs	r2, #0
 801035c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	3308      	adds	r3, #8
 8010362:	2201      	movs	r2, #1
 8010364:	4619      	mov	r1, r3
 8010366:	6878      	ldr	r0, [r7, #4]
 8010368:	f000 f925 	bl	80105b6 <USBD_CtlSendData>
      break;
 801036c:	e00c      	b.n	8010388 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	3304      	adds	r3, #4
 8010372:	2201      	movs	r2, #1
 8010374:	4619      	mov	r1, r3
 8010376:	6878      	ldr	r0, [r7, #4]
 8010378:	f000 f91d 	bl	80105b6 <USBD_CtlSendData>
      break;
 801037c:	e004      	b.n	8010388 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 801037e:	6839      	ldr	r1, [r7, #0]
 8010380:	6878      	ldr	r0, [r7, #4]
 8010382:	f000 f8a7 	bl	80104d4 <USBD_CtlError>
      break;
 8010386:	bf00      	nop
}
 8010388:	bf00      	nop
 801038a:	3708      	adds	r7, #8
 801038c:	46bd      	mov	sp, r7
 801038e:	bd80      	pop	{r7, pc}

08010390 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b082      	sub	sp, #8
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
 8010398:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80103a0:	3b01      	subs	r3, #1
 80103a2:	2b02      	cmp	r3, #2
 80103a4:	d81e      	bhi.n	80103e4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80103a6:	683b      	ldr	r3, [r7, #0]
 80103a8:	88db      	ldrh	r3, [r3, #6]
 80103aa:	2b02      	cmp	r3, #2
 80103ac:	d004      	beq.n	80103b8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80103ae:	6839      	ldr	r1, [r7, #0]
 80103b0:	6878      	ldr	r0, [r7, #4]
 80103b2:	f000 f88f 	bl	80104d4 <USBD_CtlError>
      break;
 80103b6:	e01a      	b.n	80103ee <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	2201      	movs	r2, #1
 80103bc:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d005      	beq.n	80103d4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	68db      	ldr	r3, [r3, #12]
 80103cc:	f043 0202 	orr.w	r2, r3, #2
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	330c      	adds	r3, #12
 80103d8:	2202      	movs	r2, #2
 80103da:	4619      	mov	r1, r3
 80103dc:	6878      	ldr	r0, [r7, #4]
 80103de:	f000 f8ea 	bl	80105b6 <USBD_CtlSendData>
    break;
 80103e2:	e004      	b.n	80103ee <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80103e4:	6839      	ldr	r1, [r7, #0]
 80103e6:	6878      	ldr	r0, [r7, #4]
 80103e8:	f000 f874 	bl	80104d4 <USBD_CtlError>
    break;
 80103ec:	bf00      	nop
  }
}
 80103ee:	bf00      	nop
 80103f0:	3708      	adds	r7, #8
 80103f2:	46bd      	mov	sp, r7
 80103f4:	bd80      	pop	{r7, pc}

080103f6 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80103f6:	b580      	push	{r7, lr}
 80103f8:	b082      	sub	sp, #8
 80103fa:	af00      	add	r7, sp, #0
 80103fc:	6078      	str	r0, [r7, #4]
 80103fe:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010400:	683b      	ldr	r3, [r7, #0]
 8010402:	885b      	ldrh	r3, [r3, #2]
 8010404:	2b01      	cmp	r3, #1
 8010406:	d106      	bne.n	8010416 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	2201      	movs	r2, #1
 801040c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010410:	6878      	ldr	r0, [r7, #4]
 8010412:	f000 f90d 	bl	8010630 <USBD_CtlSendStatus>
  }
}
 8010416:	bf00      	nop
 8010418:	3708      	adds	r7, #8
 801041a:	46bd      	mov	sp, r7
 801041c:	bd80      	pop	{r7, pc}

0801041e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801041e:	b580      	push	{r7, lr}
 8010420:	b082      	sub	sp, #8
 8010422:	af00      	add	r7, sp, #0
 8010424:	6078      	str	r0, [r7, #4]
 8010426:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801042e:	3b01      	subs	r3, #1
 8010430:	2b02      	cmp	r3, #2
 8010432:	d80b      	bhi.n	801044c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010434:	683b      	ldr	r3, [r7, #0]
 8010436:	885b      	ldrh	r3, [r3, #2]
 8010438:	2b01      	cmp	r3, #1
 801043a:	d10c      	bne.n	8010456 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	2200      	movs	r2, #0
 8010440:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010444:	6878      	ldr	r0, [r7, #4]
 8010446:	f000 f8f3 	bl	8010630 <USBD_CtlSendStatus>
      }
      break;
 801044a:	e004      	b.n	8010456 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 801044c:	6839      	ldr	r1, [r7, #0]
 801044e:	6878      	ldr	r0, [r7, #4]
 8010450:	f000 f840 	bl	80104d4 <USBD_CtlError>
      break;
 8010454:	e000      	b.n	8010458 <USBD_ClrFeature+0x3a>
      break;
 8010456:	bf00      	nop
  }
}
 8010458:	bf00      	nop
 801045a:	3708      	adds	r7, #8
 801045c:	46bd      	mov	sp, r7
 801045e:	bd80      	pop	{r7, pc}

08010460 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b084      	sub	sp, #16
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
 8010468:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801046a:	683b      	ldr	r3, [r7, #0]
 801046c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	781a      	ldrb	r2, [r3, #0]
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	3301      	adds	r3, #1
 801047a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	781a      	ldrb	r2, [r3, #0]
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	3301      	adds	r3, #1
 8010488:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801048a:	68f8      	ldr	r0, [r7, #12]
 801048c:	f7ff fad4 	bl	800fa38 <SWAPBYTE>
 8010490:	4603      	mov	r3, r0
 8010492:	461a      	mov	r2, r3
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	3301      	adds	r3, #1
 801049c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	3301      	adds	r3, #1
 80104a2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80104a4:	68f8      	ldr	r0, [r7, #12]
 80104a6:	f7ff fac7 	bl	800fa38 <SWAPBYTE>
 80104aa:	4603      	mov	r3, r0
 80104ac:	461a      	mov	r2, r3
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	3301      	adds	r3, #1
 80104b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	3301      	adds	r3, #1
 80104bc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80104be:	68f8      	ldr	r0, [r7, #12]
 80104c0:	f7ff faba 	bl	800fa38 <SWAPBYTE>
 80104c4:	4603      	mov	r3, r0
 80104c6:	461a      	mov	r2, r3
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	80da      	strh	r2, [r3, #6]
}
 80104cc:	bf00      	nop
 80104ce:	3710      	adds	r7, #16
 80104d0:	46bd      	mov	sp, r7
 80104d2:	bd80      	pop	{r7, pc}

080104d4 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80104d4:	b580      	push	{r7, lr}
 80104d6:	b082      	sub	sp, #8
 80104d8:	af00      	add	r7, sp, #0
 80104da:	6078      	str	r0, [r7, #4]
 80104dc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80104de:	2180      	movs	r1, #128	; 0x80
 80104e0:	6878      	ldr	r0, [r7, #4]
 80104e2:	f000 fcde 	bl	8010ea2 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80104e6:	2100      	movs	r1, #0
 80104e8:	6878      	ldr	r0, [r7, #4]
 80104ea:	f000 fcda 	bl	8010ea2 <USBD_LL_StallEP>
}
 80104ee:	bf00      	nop
 80104f0:	3708      	adds	r7, #8
 80104f2:	46bd      	mov	sp, r7
 80104f4:	bd80      	pop	{r7, pc}

080104f6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80104f6:	b580      	push	{r7, lr}
 80104f8:	b086      	sub	sp, #24
 80104fa:	af00      	add	r7, sp, #0
 80104fc:	60f8      	str	r0, [r7, #12]
 80104fe:	60b9      	str	r1, [r7, #8]
 8010500:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010502:	2300      	movs	r3, #0
 8010504:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d036      	beq.n	801057a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010510:	6938      	ldr	r0, [r7, #16]
 8010512:	f000 f836 	bl	8010582 <USBD_GetLen>
 8010516:	4603      	mov	r3, r0
 8010518:	3301      	adds	r3, #1
 801051a:	b29b      	uxth	r3, r3
 801051c:	005b      	lsls	r3, r3, #1
 801051e:	b29a      	uxth	r2, r3
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010524:	7dfb      	ldrb	r3, [r7, #23]
 8010526:	68ba      	ldr	r2, [r7, #8]
 8010528:	4413      	add	r3, r2
 801052a:	687a      	ldr	r2, [r7, #4]
 801052c:	7812      	ldrb	r2, [r2, #0]
 801052e:	701a      	strb	r2, [r3, #0]
  idx++;
 8010530:	7dfb      	ldrb	r3, [r7, #23]
 8010532:	3301      	adds	r3, #1
 8010534:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010536:	7dfb      	ldrb	r3, [r7, #23]
 8010538:	68ba      	ldr	r2, [r7, #8]
 801053a:	4413      	add	r3, r2
 801053c:	2203      	movs	r2, #3
 801053e:	701a      	strb	r2, [r3, #0]
  idx++;
 8010540:	7dfb      	ldrb	r3, [r7, #23]
 8010542:	3301      	adds	r3, #1
 8010544:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010546:	e013      	b.n	8010570 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8010548:	7dfb      	ldrb	r3, [r7, #23]
 801054a:	68ba      	ldr	r2, [r7, #8]
 801054c:	4413      	add	r3, r2
 801054e:	693a      	ldr	r2, [r7, #16]
 8010550:	7812      	ldrb	r2, [r2, #0]
 8010552:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010554:	693b      	ldr	r3, [r7, #16]
 8010556:	3301      	adds	r3, #1
 8010558:	613b      	str	r3, [r7, #16]
    idx++;
 801055a:	7dfb      	ldrb	r3, [r7, #23]
 801055c:	3301      	adds	r3, #1
 801055e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010560:	7dfb      	ldrb	r3, [r7, #23]
 8010562:	68ba      	ldr	r2, [r7, #8]
 8010564:	4413      	add	r3, r2
 8010566:	2200      	movs	r2, #0
 8010568:	701a      	strb	r2, [r3, #0]
    idx++;
 801056a:	7dfb      	ldrb	r3, [r7, #23]
 801056c:	3301      	adds	r3, #1
 801056e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010570:	693b      	ldr	r3, [r7, #16]
 8010572:	781b      	ldrb	r3, [r3, #0]
 8010574:	2b00      	cmp	r3, #0
 8010576:	d1e7      	bne.n	8010548 <USBD_GetString+0x52>
 8010578:	e000      	b.n	801057c <USBD_GetString+0x86>
    return;
 801057a:	bf00      	nop
  }
}
 801057c:	3718      	adds	r7, #24
 801057e:	46bd      	mov	sp, r7
 8010580:	bd80      	pop	{r7, pc}

08010582 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010582:	b480      	push	{r7}
 8010584:	b085      	sub	sp, #20
 8010586:	af00      	add	r7, sp, #0
 8010588:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801058a:	2300      	movs	r3, #0
 801058c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010592:	e005      	b.n	80105a0 <USBD_GetLen+0x1e>
  {
    len++;
 8010594:	7bfb      	ldrb	r3, [r7, #15]
 8010596:	3301      	adds	r3, #1
 8010598:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801059a:	68bb      	ldr	r3, [r7, #8]
 801059c:	3301      	adds	r3, #1
 801059e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80105a0:	68bb      	ldr	r3, [r7, #8]
 80105a2:	781b      	ldrb	r3, [r3, #0]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d1f5      	bne.n	8010594 <USBD_GetLen+0x12>
  }

  return len;
 80105a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80105aa:	4618      	mov	r0, r3
 80105ac:	3714      	adds	r7, #20
 80105ae:	46bd      	mov	sp, r7
 80105b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b4:	4770      	bx	lr

080105b6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80105b6:	b580      	push	{r7, lr}
 80105b8:	b084      	sub	sp, #16
 80105ba:	af00      	add	r7, sp, #0
 80105bc:	60f8      	str	r0, [r7, #12]
 80105be:	60b9      	str	r1, [r7, #8]
 80105c0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	2202      	movs	r2, #2
 80105c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	687a      	ldr	r2, [r7, #4]
 80105ce:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	687a      	ldr	r2, [r7, #4]
 80105d4:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	68ba      	ldr	r2, [r7, #8]
 80105da:	2100      	movs	r1, #0
 80105dc:	68f8      	ldr	r0, [r7, #12]
 80105de:	f000 fce9 	bl	8010fb4 <USBD_LL_Transmit>

  return USBD_OK;
 80105e2:	2300      	movs	r3, #0
}
 80105e4:	4618      	mov	r0, r3
 80105e6:	3710      	adds	r7, #16
 80105e8:	46bd      	mov	sp, r7
 80105ea:	bd80      	pop	{r7, pc}

080105ec <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b084      	sub	sp, #16
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	60f8      	str	r0, [r7, #12]
 80105f4:	60b9      	str	r1, [r7, #8]
 80105f6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	68ba      	ldr	r2, [r7, #8]
 80105fc:	2100      	movs	r1, #0
 80105fe:	68f8      	ldr	r0, [r7, #12]
 8010600:	f000 fcd8 	bl	8010fb4 <USBD_LL_Transmit>

  return USBD_OK;
 8010604:	2300      	movs	r3, #0
}
 8010606:	4618      	mov	r0, r3
 8010608:	3710      	adds	r7, #16
 801060a:	46bd      	mov	sp, r7
 801060c:	bd80      	pop	{r7, pc}

0801060e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801060e:	b580      	push	{r7, lr}
 8010610:	b084      	sub	sp, #16
 8010612:	af00      	add	r7, sp, #0
 8010614:	60f8      	str	r0, [r7, #12]
 8010616:	60b9      	str	r1, [r7, #8]
 8010618:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	68ba      	ldr	r2, [r7, #8]
 801061e:	2100      	movs	r1, #0
 8010620:	68f8      	ldr	r0, [r7, #12]
 8010622:	f000 fce8 	bl	8010ff6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010626:	2300      	movs	r3, #0
}
 8010628:	4618      	mov	r0, r3
 801062a:	3710      	adds	r7, #16
 801062c:	46bd      	mov	sp, r7
 801062e:	bd80      	pop	{r7, pc}

08010630 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010630:	b580      	push	{r7, lr}
 8010632:	b082      	sub	sp, #8
 8010634:	af00      	add	r7, sp, #0
 8010636:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	2204      	movs	r2, #4
 801063c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010640:	2300      	movs	r3, #0
 8010642:	2200      	movs	r2, #0
 8010644:	2100      	movs	r1, #0
 8010646:	6878      	ldr	r0, [r7, #4]
 8010648:	f000 fcb4 	bl	8010fb4 <USBD_LL_Transmit>

  return USBD_OK;
 801064c:	2300      	movs	r3, #0
}
 801064e:	4618      	mov	r0, r3
 8010650:	3708      	adds	r7, #8
 8010652:	46bd      	mov	sp, r7
 8010654:	bd80      	pop	{r7, pc}

08010656 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010656:	b580      	push	{r7, lr}
 8010658:	b082      	sub	sp, #8
 801065a:	af00      	add	r7, sp, #0
 801065c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	2205      	movs	r2, #5
 8010662:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010666:	2300      	movs	r3, #0
 8010668:	2200      	movs	r2, #0
 801066a:	2100      	movs	r1, #0
 801066c:	6878      	ldr	r0, [r7, #4]
 801066e:	f000 fcc2 	bl	8010ff6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010672:	2300      	movs	r3, #0
}
 8010674:	4618      	mov	r0, r3
 8010676:	3708      	adds	r7, #8
 8010678:	46bd      	mov	sp, r7
 801067a:	bd80      	pop	{r7, pc}

0801067c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801067c:	b480      	push	{r7}
 801067e:	b087      	sub	sp, #28
 8010680:	af00      	add	r7, sp, #0
 8010682:	60f8      	str	r0, [r7, #12]
 8010684:	60b9      	str	r1, [r7, #8]
 8010686:	4613      	mov	r3, r2
 8010688:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801068a:	2301      	movs	r3, #1
 801068c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801068e:	2300      	movs	r3, #0
 8010690:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010692:	4b1f      	ldr	r3, [pc, #124]	; (8010710 <FATFS_LinkDriverEx+0x94>)
 8010694:	7a5b      	ldrb	r3, [r3, #9]
 8010696:	b2db      	uxtb	r3, r3
 8010698:	2b00      	cmp	r3, #0
 801069a:	d131      	bne.n	8010700 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801069c:	4b1c      	ldr	r3, [pc, #112]	; (8010710 <FATFS_LinkDriverEx+0x94>)
 801069e:	7a5b      	ldrb	r3, [r3, #9]
 80106a0:	b2db      	uxtb	r3, r3
 80106a2:	461a      	mov	r2, r3
 80106a4:	4b1a      	ldr	r3, [pc, #104]	; (8010710 <FATFS_LinkDriverEx+0x94>)
 80106a6:	2100      	movs	r1, #0
 80106a8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80106aa:	4b19      	ldr	r3, [pc, #100]	; (8010710 <FATFS_LinkDriverEx+0x94>)
 80106ac:	7a5b      	ldrb	r3, [r3, #9]
 80106ae:	b2db      	uxtb	r3, r3
 80106b0:	4a17      	ldr	r2, [pc, #92]	; (8010710 <FATFS_LinkDriverEx+0x94>)
 80106b2:	009b      	lsls	r3, r3, #2
 80106b4:	4413      	add	r3, r2
 80106b6:	68fa      	ldr	r2, [r7, #12]
 80106b8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80106ba:	4b15      	ldr	r3, [pc, #84]	; (8010710 <FATFS_LinkDriverEx+0x94>)
 80106bc:	7a5b      	ldrb	r3, [r3, #9]
 80106be:	b2db      	uxtb	r3, r3
 80106c0:	461a      	mov	r2, r3
 80106c2:	4b13      	ldr	r3, [pc, #76]	; (8010710 <FATFS_LinkDriverEx+0x94>)
 80106c4:	4413      	add	r3, r2
 80106c6:	79fa      	ldrb	r2, [r7, #7]
 80106c8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80106ca:	4b11      	ldr	r3, [pc, #68]	; (8010710 <FATFS_LinkDriverEx+0x94>)
 80106cc:	7a5b      	ldrb	r3, [r3, #9]
 80106ce:	b2db      	uxtb	r3, r3
 80106d0:	1c5a      	adds	r2, r3, #1
 80106d2:	b2d1      	uxtb	r1, r2
 80106d4:	4a0e      	ldr	r2, [pc, #56]	; (8010710 <FATFS_LinkDriverEx+0x94>)
 80106d6:	7251      	strb	r1, [r2, #9]
 80106d8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80106da:	7dbb      	ldrb	r3, [r7, #22]
 80106dc:	3330      	adds	r3, #48	; 0x30
 80106de:	b2da      	uxtb	r2, r3
 80106e0:	68bb      	ldr	r3, [r7, #8]
 80106e2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80106e4:	68bb      	ldr	r3, [r7, #8]
 80106e6:	3301      	adds	r3, #1
 80106e8:	223a      	movs	r2, #58	; 0x3a
 80106ea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80106ec:	68bb      	ldr	r3, [r7, #8]
 80106ee:	3302      	adds	r3, #2
 80106f0:	222f      	movs	r2, #47	; 0x2f
 80106f2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80106f4:	68bb      	ldr	r3, [r7, #8]
 80106f6:	3303      	adds	r3, #3
 80106f8:	2200      	movs	r2, #0
 80106fa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80106fc:	2300      	movs	r3, #0
 80106fe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010700:	7dfb      	ldrb	r3, [r7, #23]
}
 8010702:	4618      	mov	r0, r3
 8010704:	371c      	adds	r7, #28
 8010706:	46bd      	mov	sp, r7
 8010708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070c:	4770      	bx	lr
 801070e:	bf00      	nop
 8010710:	240001f4 	.word	0x240001f4

08010714 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010714:	b580      	push	{r7, lr}
 8010716:	b082      	sub	sp, #8
 8010718:	af00      	add	r7, sp, #0
 801071a:	6078      	str	r0, [r7, #4]
 801071c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801071e:	2200      	movs	r2, #0
 8010720:	6839      	ldr	r1, [r7, #0]
 8010722:	6878      	ldr	r0, [r7, #4]
 8010724:	f7ff ffaa 	bl	801067c <FATFS_LinkDriverEx>
 8010728:	4603      	mov	r3, r0
}
 801072a:	4618      	mov	r0, r3
 801072c:	3708      	adds	r7, #8
 801072e:	46bd      	mov	sp, r7
 8010730:	bd80      	pop	{r7, pc}
	...

08010734 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010734:	b580      	push	{r7, lr}
 8010736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010738:	2200      	movs	r2, #0
 801073a:	4913      	ldr	r1, [pc, #76]	; (8010788 <MX_USB_DEVICE_Init+0x54>)
 801073c:	4813      	ldr	r0, [pc, #76]	; (801078c <MX_USB_DEVICE_Init+0x58>)
 801073e:	f7fe feb6 	bl	800f4ae <USBD_Init>
 8010742:	4603      	mov	r3, r0
 8010744:	2b00      	cmp	r3, #0
 8010746:	d001      	beq.n	801074c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010748:	f7f0 fbf2 	bl	8000f30 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 801074c:	4910      	ldr	r1, [pc, #64]	; (8010790 <MX_USB_DEVICE_Init+0x5c>)
 801074e:	480f      	ldr	r0, [pc, #60]	; (801078c <MX_USB_DEVICE_Init+0x58>)
 8010750:	f7fe fee3 	bl	800f51a <USBD_RegisterClass>
 8010754:	4603      	mov	r3, r0
 8010756:	2b00      	cmp	r3, #0
 8010758:	d001      	beq.n	801075e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801075a:	f7f0 fbe9 	bl	8000f30 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 801075e:	490d      	ldr	r1, [pc, #52]	; (8010794 <MX_USB_DEVICE_Init+0x60>)
 8010760:	480a      	ldr	r0, [pc, #40]	; (801078c <MX_USB_DEVICE_Init+0x58>)
 8010762:	f7fd fbdf 	bl	800df24 <USBD_MSC_RegisterStorage>
 8010766:	4603      	mov	r3, r0
 8010768:	2b00      	cmp	r3, #0
 801076a:	d001      	beq.n	8010770 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801076c:	f7f0 fbe0 	bl	8000f30 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010770:	4806      	ldr	r0, [pc, #24]	; (801078c <MX_USB_DEVICE_Init+0x58>)
 8010772:	f7fe fef3 	bl	800f55c <USBD_Start>
 8010776:	4603      	mov	r3, r0
 8010778:	2b00      	cmp	r3, #0
 801077a:	d001      	beq.n	8010780 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801077c:	f7f0 fbd8 	bl	8000f30 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8010780:	f7f5 fba8 	bl	8005ed4 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010784:	bf00      	nop
 8010786:	bd80      	pop	{r7, pc}
 8010788:	240000f8 	.word	0x240000f8
 801078c:	24000ab4 	.word	0x24000ab4
 8010790:	24000010 	.word	0x24000010
 8010794:	24000148 	.word	0x24000148

08010798 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010798:	b480      	push	{r7}
 801079a:	b083      	sub	sp, #12
 801079c:	af00      	add	r7, sp, #0
 801079e:	4603      	mov	r3, r0
 80107a0:	6039      	str	r1, [r7, #0]
 80107a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80107a4:	683b      	ldr	r3, [r7, #0]
 80107a6:	2212      	movs	r2, #18
 80107a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80107aa:	4b03      	ldr	r3, [pc, #12]	; (80107b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80107ac:	4618      	mov	r0, r3
 80107ae:	370c      	adds	r7, #12
 80107b0:	46bd      	mov	sp, r7
 80107b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b6:	4770      	bx	lr
 80107b8:	24000114 	.word	0x24000114

080107bc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80107bc:	b480      	push	{r7}
 80107be:	b083      	sub	sp, #12
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	4603      	mov	r3, r0
 80107c4:	6039      	str	r1, [r7, #0]
 80107c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80107c8:	683b      	ldr	r3, [r7, #0]
 80107ca:	2204      	movs	r2, #4
 80107cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80107ce:	4b03      	ldr	r3, [pc, #12]	; (80107dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80107d0:	4618      	mov	r0, r3
 80107d2:	370c      	adds	r7, #12
 80107d4:	46bd      	mov	sp, r7
 80107d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107da:	4770      	bx	lr
 80107dc:	24000128 	.word	0x24000128

080107e0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b082      	sub	sp, #8
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	4603      	mov	r3, r0
 80107e8:	6039      	str	r1, [r7, #0]
 80107ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80107ec:	79fb      	ldrb	r3, [r7, #7]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d105      	bne.n	80107fe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80107f2:	683a      	ldr	r2, [r7, #0]
 80107f4:	4907      	ldr	r1, [pc, #28]	; (8010814 <USBD_FS_ProductStrDescriptor+0x34>)
 80107f6:	4808      	ldr	r0, [pc, #32]	; (8010818 <USBD_FS_ProductStrDescriptor+0x38>)
 80107f8:	f7ff fe7d 	bl	80104f6 <USBD_GetString>
 80107fc:	e004      	b.n	8010808 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80107fe:	683a      	ldr	r2, [r7, #0]
 8010800:	4904      	ldr	r1, [pc, #16]	; (8010814 <USBD_FS_ProductStrDescriptor+0x34>)
 8010802:	4805      	ldr	r0, [pc, #20]	; (8010818 <USBD_FS_ProductStrDescriptor+0x38>)
 8010804:	f7ff fe77 	bl	80104f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010808:	4b02      	ldr	r3, [pc, #8]	; (8010814 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801080a:	4618      	mov	r0, r3
 801080c:	3708      	adds	r7, #8
 801080e:	46bd      	mov	sp, r7
 8010810:	bd80      	pop	{r7, pc}
 8010812:	bf00      	nop
 8010814:	24000d84 	.word	0x24000d84
 8010818:	08011fa4 	.word	0x08011fa4

0801081c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801081c:	b580      	push	{r7, lr}
 801081e:	b082      	sub	sp, #8
 8010820:	af00      	add	r7, sp, #0
 8010822:	4603      	mov	r3, r0
 8010824:	6039      	str	r1, [r7, #0]
 8010826:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010828:	683a      	ldr	r2, [r7, #0]
 801082a:	4904      	ldr	r1, [pc, #16]	; (801083c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801082c:	4804      	ldr	r0, [pc, #16]	; (8010840 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801082e:	f7ff fe62 	bl	80104f6 <USBD_GetString>
  return USBD_StrDesc;
 8010832:	4b02      	ldr	r3, [pc, #8]	; (801083c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010834:	4618      	mov	r0, r3
 8010836:	3708      	adds	r7, #8
 8010838:	46bd      	mov	sp, r7
 801083a:	bd80      	pop	{r7, pc}
 801083c:	24000d84 	.word	0x24000d84
 8010840:	08011fb8 	.word	0x08011fb8

08010844 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010844:	b580      	push	{r7, lr}
 8010846:	b082      	sub	sp, #8
 8010848:	af00      	add	r7, sp, #0
 801084a:	4603      	mov	r3, r0
 801084c:	6039      	str	r1, [r7, #0]
 801084e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010850:	683b      	ldr	r3, [r7, #0]
 8010852:	221a      	movs	r2, #26
 8010854:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010856:	f000 f843 	bl	80108e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801085a:	4b02      	ldr	r3, [pc, #8]	; (8010864 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801085c:	4618      	mov	r0, r3
 801085e:	3708      	adds	r7, #8
 8010860:	46bd      	mov	sp, r7
 8010862:	bd80      	pop	{r7, pc}
 8010864:	2400012c 	.word	0x2400012c

08010868 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010868:	b580      	push	{r7, lr}
 801086a:	b082      	sub	sp, #8
 801086c:	af00      	add	r7, sp, #0
 801086e:	4603      	mov	r3, r0
 8010870:	6039      	str	r1, [r7, #0]
 8010872:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010874:	79fb      	ldrb	r3, [r7, #7]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d105      	bne.n	8010886 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801087a:	683a      	ldr	r2, [r7, #0]
 801087c:	4907      	ldr	r1, [pc, #28]	; (801089c <USBD_FS_ConfigStrDescriptor+0x34>)
 801087e:	4808      	ldr	r0, [pc, #32]	; (80108a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010880:	f7ff fe39 	bl	80104f6 <USBD_GetString>
 8010884:	e004      	b.n	8010890 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010886:	683a      	ldr	r2, [r7, #0]
 8010888:	4904      	ldr	r1, [pc, #16]	; (801089c <USBD_FS_ConfigStrDescriptor+0x34>)
 801088a:	4805      	ldr	r0, [pc, #20]	; (80108a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 801088c:	f7ff fe33 	bl	80104f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010890:	4b02      	ldr	r3, [pc, #8]	; (801089c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010892:	4618      	mov	r0, r3
 8010894:	3708      	adds	r7, #8
 8010896:	46bd      	mov	sp, r7
 8010898:	bd80      	pop	{r7, pc}
 801089a:	bf00      	nop
 801089c:	24000d84 	.word	0x24000d84
 80108a0:	08011fcc 	.word	0x08011fcc

080108a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b082      	sub	sp, #8
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	4603      	mov	r3, r0
 80108ac:	6039      	str	r1, [r7, #0]
 80108ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80108b0:	79fb      	ldrb	r3, [r7, #7]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d105      	bne.n	80108c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80108b6:	683a      	ldr	r2, [r7, #0]
 80108b8:	4907      	ldr	r1, [pc, #28]	; (80108d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80108ba:	4808      	ldr	r0, [pc, #32]	; (80108dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80108bc:	f7ff fe1b 	bl	80104f6 <USBD_GetString>
 80108c0:	e004      	b.n	80108cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80108c2:	683a      	ldr	r2, [r7, #0]
 80108c4:	4904      	ldr	r1, [pc, #16]	; (80108d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80108c6:	4805      	ldr	r0, [pc, #20]	; (80108dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80108c8:	f7ff fe15 	bl	80104f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80108cc:	4b02      	ldr	r3, [pc, #8]	; (80108d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80108ce:	4618      	mov	r0, r3
 80108d0:	3708      	adds	r7, #8
 80108d2:	46bd      	mov	sp, r7
 80108d4:	bd80      	pop	{r7, pc}
 80108d6:	bf00      	nop
 80108d8:	24000d84 	.word	0x24000d84
 80108dc:	08011fd8 	.word	0x08011fd8

080108e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b084      	sub	sp, #16
 80108e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80108e6:	4b0f      	ldr	r3, [pc, #60]	; (8010924 <Get_SerialNum+0x44>)
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80108ec:	4b0e      	ldr	r3, [pc, #56]	; (8010928 <Get_SerialNum+0x48>)
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80108f2:	4b0e      	ldr	r3, [pc, #56]	; (801092c <Get_SerialNum+0x4c>)
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80108f8:	68fa      	ldr	r2, [r7, #12]
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	4413      	add	r3, r2
 80108fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d009      	beq.n	801091a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010906:	2208      	movs	r2, #8
 8010908:	4909      	ldr	r1, [pc, #36]	; (8010930 <Get_SerialNum+0x50>)
 801090a:	68f8      	ldr	r0, [r7, #12]
 801090c:	f000 f814 	bl	8010938 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010910:	2204      	movs	r2, #4
 8010912:	4908      	ldr	r1, [pc, #32]	; (8010934 <Get_SerialNum+0x54>)
 8010914:	68b8      	ldr	r0, [r7, #8]
 8010916:	f000 f80f 	bl	8010938 <IntToUnicode>
  }
}
 801091a:	bf00      	nop
 801091c:	3710      	adds	r7, #16
 801091e:	46bd      	mov	sp, r7
 8010920:	bd80      	pop	{r7, pc}
 8010922:	bf00      	nop
 8010924:	1ff1e800 	.word	0x1ff1e800
 8010928:	1ff1e804 	.word	0x1ff1e804
 801092c:	1ff1e808 	.word	0x1ff1e808
 8010930:	2400012e 	.word	0x2400012e
 8010934:	2400013e 	.word	0x2400013e

08010938 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010938:	b480      	push	{r7}
 801093a:	b087      	sub	sp, #28
 801093c:	af00      	add	r7, sp, #0
 801093e:	60f8      	str	r0, [r7, #12]
 8010940:	60b9      	str	r1, [r7, #8]
 8010942:	4613      	mov	r3, r2
 8010944:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010946:	2300      	movs	r3, #0
 8010948:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801094a:	2300      	movs	r3, #0
 801094c:	75fb      	strb	r3, [r7, #23]
 801094e:	e027      	b.n	80109a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	0f1b      	lsrs	r3, r3, #28
 8010954:	2b09      	cmp	r3, #9
 8010956:	d80b      	bhi.n	8010970 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	0f1b      	lsrs	r3, r3, #28
 801095c:	b2da      	uxtb	r2, r3
 801095e:	7dfb      	ldrb	r3, [r7, #23]
 8010960:	005b      	lsls	r3, r3, #1
 8010962:	4619      	mov	r1, r3
 8010964:	68bb      	ldr	r3, [r7, #8]
 8010966:	440b      	add	r3, r1
 8010968:	3230      	adds	r2, #48	; 0x30
 801096a:	b2d2      	uxtb	r2, r2
 801096c:	701a      	strb	r2, [r3, #0]
 801096e:	e00a      	b.n	8010986 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	0f1b      	lsrs	r3, r3, #28
 8010974:	b2da      	uxtb	r2, r3
 8010976:	7dfb      	ldrb	r3, [r7, #23]
 8010978:	005b      	lsls	r3, r3, #1
 801097a:	4619      	mov	r1, r3
 801097c:	68bb      	ldr	r3, [r7, #8]
 801097e:	440b      	add	r3, r1
 8010980:	3237      	adds	r2, #55	; 0x37
 8010982:	b2d2      	uxtb	r2, r2
 8010984:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	011b      	lsls	r3, r3, #4
 801098a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801098c:	7dfb      	ldrb	r3, [r7, #23]
 801098e:	005b      	lsls	r3, r3, #1
 8010990:	3301      	adds	r3, #1
 8010992:	68ba      	ldr	r2, [r7, #8]
 8010994:	4413      	add	r3, r2
 8010996:	2200      	movs	r2, #0
 8010998:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801099a:	7dfb      	ldrb	r3, [r7, #23]
 801099c:	3301      	adds	r3, #1
 801099e:	75fb      	strb	r3, [r7, #23]
 80109a0:	7dfa      	ldrb	r2, [r7, #23]
 80109a2:	79fb      	ldrb	r3, [r7, #7]
 80109a4:	429a      	cmp	r2, r3
 80109a6:	d3d3      	bcc.n	8010950 <IntToUnicode+0x18>
  }
}
 80109a8:	bf00      	nop
 80109aa:	371c      	adds	r7, #28
 80109ac:	46bd      	mov	sp, r7
 80109ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b2:	4770      	bx	lr

080109b4 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 80109b4:	b480      	push	{r7}
 80109b6:	b083      	sub	sp, #12
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	4603      	mov	r3, r0
 80109bc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 80109be:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80109c0:	4618      	mov	r0, r3
 80109c2:	370c      	adds	r7, #12
 80109c4:	46bd      	mov	sp, r7
 80109c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ca:	4770      	bx	lr

080109cc <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 80109cc:	b480      	push	{r7}
 80109ce:	b085      	sub	sp, #20
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	4603      	mov	r3, r0
 80109d4:	60b9      	str	r1, [r7, #8]
 80109d6:	607a      	str	r2, [r7, #4]
 80109d8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 80109da:	68bb      	ldr	r3, [r7, #8]
 80109dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80109e0:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80109e8:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 80109ea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80109ec:	4618      	mov	r0, r3
 80109ee:	3714      	adds	r7, #20
 80109f0:	46bd      	mov	sp, r7
 80109f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f6:	4770      	bx	lr

080109f8 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 80109f8:	b480      	push	{r7}
 80109fa:	b083      	sub	sp, #12
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	4603      	mov	r3, r0
 8010a00:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010a02:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010a04:	4618      	mov	r0, r3
 8010a06:	370c      	adds	r7, #12
 8010a08:	46bd      	mov	sp, r7
 8010a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0e:	4770      	bx	lr

08010a10 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8010a10:	b480      	push	{r7}
 8010a12:	b083      	sub	sp, #12
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	4603      	mov	r3, r0
 8010a18:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8010a1a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	370c      	adds	r7, #12
 8010a20:	46bd      	mov	sp, r7
 8010a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a26:	4770      	bx	lr

08010a28 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8010a28:	b480      	push	{r7}
 8010a2a:	b085      	sub	sp, #20
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	60b9      	str	r1, [r7, #8]
 8010a30:	607a      	str	r2, [r7, #4]
 8010a32:	461a      	mov	r2, r3
 8010a34:	4603      	mov	r3, r0
 8010a36:	73fb      	strb	r3, [r7, #15]
 8010a38:	4613      	mov	r3, r2
 8010a3a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8010a3c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010a3e:	4618      	mov	r0, r3
 8010a40:	3714      	adds	r7, #20
 8010a42:	46bd      	mov	sp, r7
 8010a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a48:	4770      	bx	lr

08010a4a <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8010a4a:	b480      	push	{r7}
 8010a4c:	b085      	sub	sp, #20
 8010a4e:	af00      	add	r7, sp, #0
 8010a50:	60b9      	str	r1, [r7, #8]
 8010a52:	607a      	str	r2, [r7, #4]
 8010a54:	461a      	mov	r2, r3
 8010a56:	4603      	mov	r3, r0
 8010a58:	73fb      	strb	r3, [r7, #15]
 8010a5a:	4613      	mov	r3, r2
 8010a5c:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 8010a5e:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 8010a60:	4618      	mov	r0, r3
 8010a62:	3714      	adds	r7, #20
 8010a64:	46bd      	mov	sp, r7
 8010a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a6a:	4770      	bx	lr

08010a6c <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8010a6c:	b480      	push	{r7}
 8010a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8010a70:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8010a72:	4618      	mov	r0, r3
 8010a74:	46bd      	mov	sp, r7
 8010a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a7a:	4770      	bx	lr

08010a7c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b08a      	sub	sp, #40	; 0x28
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010a84:	f107 0314 	add.w	r3, r7, #20
 8010a88:	2200      	movs	r2, #0
 8010a8a:	601a      	str	r2, [r3, #0]
 8010a8c:	605a      	str	r2, [r3, #4]
 8010a8e:	609a      	str	r2, [r3, #8]
 8010a90:	60da      	str	r2, [r3, #12]
 8010a92:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	4a1e      	ldr	r2, [pc, #120]	; (8010b14 <HAL_PCD_MspInit+0x98>)
 8010a9a:	4293      	cmp	r3, r2
 8010a9c:	d136      	bne.n	8010b0c <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010a9e:	4b1e      	ldr	r3, [pc, #120]	; (8010b18 <HAL_PCD_MspInit+0x9c>)
 8010aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010aa4:	4a1c      	ldr	r2, [pc, #112]	; (8010b18 <HAL_PCD_MspInit+0x9c>)
 8010aa6:	f043 0301 	orr.w	r3, r3, #1
 8010aaa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010aae:	4b1a      	ldr	r3, [pc, #104]	; (8010b18 <HAL_PCD_MspInit+0x9c>)
 8010ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010ab4:	f003 0301 	and.w	r3, r3, #1
 8010ab8:	613b      	str	r3, [r7, #16]
 8010aba:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010abc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010ac2:	2302      	movs	r3, #2
 8010ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010aca:	2300      	movs	r3, #0
 8010acc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8010ace:	230a      	movs	r3, #10
 8010ad0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010ad2:	f107 0314 	add.w	r3, r7, #20
 8010ad6:	4619      	mov	r1, r3
 8010ad8:	4810      	ldr	r0, [pc, #64]	; (8010b1c <HAL_PCD_MspInit+0xa0>)
 8010ada:	f7f3 fdbd 	bl	8004658 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010ade:	4b0e      	ldr	r3, [pc, #56]	; (8010b18 <HAL_PCD_MspInit+0x9c>)
 8010ae0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010ae4:	4a0c      	ldr	r2, [pc, #48]	; (8010b18 <HAL_PCD_MspInit+0x9c>)
 8010ae6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010aea:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8010aee:	4b0a      	ldr	r3, [pc, #40]	; (8010b18 <HAL_PCD_MspInit+0x9c>)
 8010af0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010af4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010af8:	60fb      	str	r3, [r7, #12]
 8010afa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010afc:	2200      	movs	r2, #0
 8010afe:	2100      	movs	r1, #0
 8010b00:	2065      	movs	r0, #101	; 0x65
 8010b02:	f7f0 ff76 	bl	80019f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010b06:	2065      	movs	r0, #101	; 0x65
 8010b08:	f7f0 ff8d 	bl	8001a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010b0c:	bf00      	nop
 8010b0e:	3728      	adds	r7, #40	; 0x28
 8010b10:	46bd      	mov	sp, r7
 8010b12:	bd80      	pop	{r7, pc}
 8010b14:	40080000 	.word	0x40080000
 8010b18:	58024400 	.word	0x58024400
 8010b1c:	58020000 	.word	0x58020000

08010b20 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b082      	sub	sp, #8
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010b34:	4619      	mov	r1, r3
 8010b36:	4610      	mov	r0, r2
 8010b38:	f7fe fd5b 	bl	800f5f2 <USBD_LL_SetupStage>
}
 8010b3c:	bf00      	nop
 8010b3e:	3708      	adds	r7, #8
 8010b40:	46bd      	mov	sp, r7
 8010b42:	bd80      	pop	{r7, pc}

08010b44 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010b44:	b580      	push	{r7, lr}
 8010b46:	b082      	sub	sp, #8
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	6078      	str	r0, [r7, #4]
 8010b4c:	460b      	mov	r3, r1
 8010b4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010b56:	78fa      	ldrb	r2, [r7, #3]
 8010b58:	6879      	ldr	r1, [r7, #4]
 8010b5a:	4613      	mov	r3, r2
 8010b5c:	00db      	lsls	r3, r3, #3
 8010b5e:	1a9b      	subs	r3, r3, r2
 8010b60:	009b      	lsls	r3, r3, #2
 8010b62:	440b      	add	r3, r1
 8010b64:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8010b68:	681a      	ldr	r2, [r3, #0]
 8010b6a:	78fb      	ldrb	r3, [r7, #3]
 8010b6c:	4619      	mov	r1, r3
 8010b6e:	f7fe fd93 	bl	800f698 <USBD_LL_DataOutStage>
}
 8010b72:	bf00      	nop
 8010b74:	3708      	adds	r7, #8
 8010b76:	46bd      	mov	sp, r7
 8010b78:	bd80      	pop	{r7, pc}

08010b7a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010b7a:	b580      	push	{r7, lr}
 8010b7c:	b082      	sub	sp, #8
 8010b7e:	af00      	add	r7, sp, #0
 8010b80:	6078      	str	r0, [r7, #4]
 8010b82:	460b      	mov	r3, r1
 8010b84:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010b8c:	78fa      	ldrb	r2, [r7, #3]
 8010b8e:	6879      	ldr	r1, [r7, #4]
 8010b90:	4613      	mov	r3, r2
 8010b92:	00db      	lsls	r3, r3, #3
 8010b94:	1a9b      	subs	r3, r3, r2
 8010b96:	009b      	lsls	r3, r3, #2
 8010b98:	440b      	add	r3, r1
 8010b9a:	3348      	adds	r3, #72	; 0x48
 8010b9c:	681a      	ldr	r2, [r3, #0]
 8010b9e:	78fb      	ldrb	r3, [r7, #3]
 8010ba0:	4619      	mov	r1, r3
 8010ba2:	f7fe fddc 	bl	800f75e <USBD_LL_DataInStage>
}
 8010ba6:	bf00      	nop
 8010ba8:	3708      	adds	r7, #8
 8010baa:	46bd      	mov	sp, r7
 8010bac:	bd80      	pop	{r7, pc}

08010bae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010bae:	b580      	push	{r7, lr}
 8010bb0:	b082      	sub	sp, #8
 8010bb2:	af00      	add	r7, sp, #0
 8010bb4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	f7fe fee0 	bl	800f982 <USBD_LL_SOF>
}
 8010bc2:	bf00      	nop
 8010bc4:	3708      	adds	r7, #8
 8010bc6:	46bd      	mov	sp, r7
 8010bc8:	bd80      	pop	{r7, pc}

08010bca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010bca:	b580      	push	{r7, lr}
 8010bcc:	b084      	sub	sp, #16
 8010bce:	af00      	add	r7, sp, #0
 8010bd0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010bd2:	2301      	movs	r3, #1
 8010bd4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	68db      	ldr	r3, [r3, #12]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d102      	bne.n	8010be4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8010bde:	2300      	movs	r3, #0
 8010be0:	73fb      	strb	r3, [r7, #15]
 8010be2:	e008      	b.n	8010bf6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	68db      	ldr	r3, [r3, #12]
 8010be8:	2b02      	cmp	r3, #2
 8010bea:	d102      	bne.n	8010bf2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8010bec:	2301      	movs	r3, #1
 8010bee:	73fb      	strb	r3, [r7, #15]
 8010bf0:	e001      	b.n	8010bf6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8010bf2:	f7f0 f99d 	bl	8000f30 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010bfc:	7bfa      	ldrb	r2, [r7, #15]
 8010bfe:	4611      	mov	r1, r2
 8010c00:	4618      	mov	r0, r3
 8010c02:	f7fe fe83 	bl	800f90c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	f7fe fe3c 	bl	800f88a <USBD_LL_Reset>
}
 8010c12:	bf00      	nop
 8010c14:	3710      	adds	r7, #16
 8010c16:	46bd      	mov	sp, r7
 8010c18:	bd80      	pop	{r7, pc}
	...

08010c1c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b082      	sub	sp, #8
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	f7fe fe7e 	bl	800f92c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	687a      	ldr	r2, [r7, #4]
 8010c3c:	6812      	ldr	r2, [r2, #0]
 8010c3e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010c42:	f043 0301 	orr.w	r3, r3, #1
 8010c46:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	6a1b      	ldr	r3, [r3, #32]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d005      	beq.n	8010c5c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010c50:	4b04      	ldr	r3, [pc, #16]	; (8010c64 <HAL_PCD_SuspendCallback+0x48>)
 8010c52:	691b      	ldr	r3, [r3, #16]
 8010c54:	4a03      	ldr	r2, [pc, #12]	; (8010c64 <HAL_PCD_SuspendCallback+0x48>)
 8010c56:	f043 0306 	orr.w	r3, r3, #6
 8010c5a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010c5c:	bf00      	nop
 8010c5e:	3708      	adds	r7, #8
 8010c60:	46bd      	mov	sp, r7
 8010c62:	bd80      	pop	{r7, pc}
 8010c64:	e000ed00 	.word	0xe000ed00

08010c68 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b082      	sub	sp, #8
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010c76:	4618      	mov	r0, r3
 8010c78:	f7fe fe6d 	bl	800f956 <USBD_LL_Resume>
}
 8010c7c:	bf00      	nop
 8010c7e:	3708      	adds	r7, #8
 8010c80:	46bd      	mov	sp, r7
 8010c82:	bd80      	pop	{r7, pc}

08010c84 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b082      	sub	sp, #8
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	6078      	str	r0, [r7, #4]
 8010c8c:	460b      	mov	r3, r1
 8010c8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010c96:	78fa      	ldrb	r2, [r7, #3]
 8010c98:	4611      	mov	r1, r2
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	f7fe fe98 	bl	800f9d0 <USBD_LL_IsoOUTIncomplete>
}
 8010ca0:	bf00      	nop
 8010ca2:	3708      	adds	r7, #8
 8010ca4:	46bd      	mov	sp, r7
 8010ca6:	bd80      	pop	{r7, pc}

08010ca8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b082      	sub	sp, #8
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
 8010cb0:	460b      	mov	r3, r1
 8010cb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010cba:	78fa      	ldrb	r2, [r7, #3]
 8010cbc:	4611      	mov	r1, r2
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	f7fe fe79 	bl	800f9b6 <USBD_LL_IsoINIncomplete>
}
 8010cc4:	bf00      	nop
 8010cc6:	3708      	adds	r7, #8
 8010cc8:	46bd      	mov	sp, r7
 8010cca:	bd80      	pop	{r7, pc}

08010ccc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ccc:	b580      	push	{r7, lr}
 8010cce:	b082      	sub	sp, #8
 8010cd0:	af00      	add	r7, sp, #0
 8010cd2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010cda:	4618      	mov	r0, r3
 8010cdc:	f7fe fe85 	bl	800f9ea <USBD_LL_DevConnected>
}
 8010ce0:	bf00      	nop
 8010ce2:	3708      	adds	r7, #8
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	bd80      	pop	{r7, pc}

08010ce8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b082      	sub	sp, #8
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	f7fe fe82 	bl	800fa00 <USBD_LL_DevDisconnected>
}
 8010cfc:	bf00      	nop
 8010cfe:	3708      	adds	r7, #8
 8010d00:	46bd      	mov	sp, r7
 8010d02:	bd80      	pop	{r7, pc}

08010d04 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b082      	sub	sp, #8
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	781b      	ldrb	r3, [r3, #0]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d13e      	bne.n	8010d92 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010d14:	4a21      	ldr	r2, [pc, #132]	; (8010d9c <USBD_LL_Init+0x98>)
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	4a1f      	ldr	r2, [pc, #124]	; (8010d9c <USBD_LL_Init+0x98>)
 8010d20:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010d24:	4b1d      	ldr	r3, [pc, #116]	; (8010d9c <USBD_LL_Init+0x98>)
 8010d26:	4a1e      	ldr	r2, [pc, #120]	; (8010da0 <USBD_LL_Init+0x9c>)
 8010d28:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8010d2a:	4b1c      	ldr	r3, [pc, #112]	; (8010d9c <USBD_LL_Init+0x98>)
 8010d2c:	2209      	movs	r2, #9
 8010d2e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010d30:	4b1a      	ldr	r3, [pc, #104]	; (8010d9c <USBD_LL_Init+0x98>)
 8010d32:	2202      	movs	r2, #2
 8010d34:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010d36:	4b19      	ldr	r3, [pc, #100]	; (8010d9c <USBD_LL_Init+0x98>)
 8010d38:	2200      	movs	r2, #0
 8010d3a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010d3c:	4b17      	ldr	r3, [pc, #92]	; (8010d9c <USBD_LL_Init+0x98>)
 8010d3e:	2202      	movs	r2, #2
 8010d40:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010d42:	4b16      	ldr	r3, [pc, #88]	; (8010d9c <USBD_LL_Init+0x98>)
 8010d44:	2200      	movs	r2, #0
 8010d46:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010d48:	4b14      	ldr	r3, [pc, #80]	; (8010d9c <USBD_LL_Init+0x98>)
 8010d4a:	2200      	movs	r2, #0
 8010d4c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010d4e:	4b13      	ldr	r3, [pc, #76]	; (8010d9c <USBD_LL_Init+0x98>)
 8010d50:	2200      	movs	r2, #0
 8010d52:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8010d54:	4b11      	ldr	r3, [pc, #68]	; (8010d9c <USBD_LL_Init+0x98>)
 8010d56:	2200      	movs	r2, #0
 8010d58:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010d5a:	4b10      	ldr	r3, [pc, #64]	; (8010d9c <USBD_LL_Init+0x98>)
 8010d5c:	2200      	movs	r2, #0
 8010d5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010d60:	4b0e      	ldr	r3, [pc, #56]	; (8010d9c <USBD_LL_Init+0x98>)
 8010d62:	2200      	movs	r2, #0
 8010d64:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010d66:	480d      	ldr	r0, [pc, #52]	; (8010d9c <USBD_LL_Init+0x98>)
 8010d68:	f7f3 fe72 	bl	8004a50 <HAL_PCD_Init>
 8010d6c:	4603      	mov	r3, r0
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d001      	beq.n	8010d76 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8010d72:	f7f0 f8dd 	bl	8000f30 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010d76:	2180      	movs	r1, #128	; 0x80
 8010d78:	4808      	ldr	r0, [pc, #32]	; (8010d9c <USBD_LL_Init+0x98>)
 8010d7a:	f7f5 f830 	bl	8005dde <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010d7e:	2240      	movs	r2, #64	; 0x40
 8010d80:	2100      	movs	r1, #0
 8010d82:	4806      	ldr	r0, [pc, #24]	; (8010d9c <USBD_LL_Init+0x98>)
 8010d84:	f7f4 ffe4 	bl	8005d50 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010d88:	2280      	movs	r2, #128	; 0x80
 8010d8a:	2101      	movs	r1, #1
 8010d8c:	4803      	ldr	r0, [pc, #12]	; (8010d9c <USBD_LL_Init+0x98>)
 8010d8e:	f7f4 ffdf 	bl	8005d50 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010d92:	2300      	movs	r3, #0
}
 8010d94:	4618      	mov	r0, r3
 8010d96:	3708      	adds	r7, #8
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	bd80      	pop	{r7, pc}
 8010d9c:	24000f84 	.word	0x24000f84
 8010da0:	40080000 	.word	0x40080000

08010da4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b084      	sub	sp, #16
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010dac:	2300      	movs	r3, #0
 8010dae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010db0:	2300      	movs	r3, #0
 8010db2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010dba:	4618      	mov	r0, r3
 8010dbc:	f7f3 ff6c 	bl	8004c98 <HAL_PCD_Start>
 8010dc0:	4603      	mov	r3, r0
 8010dc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010dc4:	7bfb      	ldrb	r3, [r7, #15]
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	f000 f94a 	bl	8011060 <USBD_Get_USB_Status>
 8010dcc:	4603      	mov	r3, r0
 8010dce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010dd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	3710      	adds	r7, #16
 8010dd6:	46bd      	mov	sp, r7
 8010dd8:	bd80      	pop	{r7, pc}

08010dda <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010dda:	b580      	push	{r7, lr}
 8010ddc:	b084      	sub	sp, #16
 8010dde:	af00      	add	r7, sp, #0
 8010de0:	6078      	str	r0, [r7, #4]
 8010de2:	4608      	mov	r0, r1
 8010de4:	4611      	mov	r1, r2
 8010de6:	461a      	mov	r2, r3
 8010de8:	4603      	mov	r3, r0
 8010dea:	70fb      	strb	r3, [r7, #3]
 8010dec:	460b      	mov	r3, r1
 8010dee:	70bb      	strb	r3, [r7, #2]
 8010df0:	4613      	mov	r3, r2
 8010df2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010df4:	2300      	movs	r3, #0
 8010df6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010df8:	2300      	movs	r3, #0
 8010dfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010e02:	78bb      	ldrb	r3, [r7, #2]
 8010e04:	883a      	ldrh	r2, [r7, #0]
 8010e06:	78f9      	ldrb	r1, [r7, #3]
 8010e08:	f7f4 fb7d 	bl	8005506 <HAL_PCD_EP_Open>
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010e10:	7bfb      	ldrb	r3, [r7, #15]
 8010e12:	4618      	mov	r0, r3
 8010e14:	f000 f924 	bl	8011060 <USBD_Get_USB_Status>
 8010e18:	4603      	mov	r3, r0
 8010e1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010e1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8010e1e:	4618      	mov	r0, r3
 8010e20:	3710      	adds	r7, #16
 8010e22:	46bd      	mov	sp, r7
 8010e24:	bd80      	pop	{r7, pc}

08010e26 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010e26:	b580      	push	{r7, lr}
 8010e28:	b084      	sub	sp, #16
 8010e2a:	af00      	add	r7, sp, #0
 8010e2c:	6078      	str	r0, [r7, #4]
 8010e2e:	460b      	mov	r3, r1
 8010e30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e32:	2300      	movs	r3, #0
 8010e34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e36:	2300      	movs	r3, #0
 8010e38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010e40:	78fa      	ldrb	r2, [r7, #3]
 8010e42:	4611      	mov	r1, r2
 8010e44:	4618      	mov	r0, r3
 8010e46:	f7f4 fbc6 	bl	80055d6 <HAL_PCD_EP_Close>
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010e4e:	7bfb      	ldrb	r3, [r7, #15]
 8010e50:	4618      	mov	r0, r3
 8010e52:	f000 f905 	bl	8011060 <USBD_Get_USB_Status>
 8010e56:	4603      	mov	r3, r0
 8010e58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010e5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	3710      	adds	r7, #16
 8010e60:	46bd      	mov	sp, r7
 8010e62:	bd80      	pop	{r7, pc}

08010e64 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010e64:	b580      	push	{r7, lr}
 8010e66:	b084      	sub	sp, #16
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	6078      	str	r0, [r7, #4]
 8010e6c:	460b      	mov	r3, r1
 8010e6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e70:	2300      	movs	r3, #0
 8010e72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e74:	2300      	movs	r3, #0
 8010e76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010e7e:	78fa      	ldrb	r2, [r7, #3]
 8010e80:	4611      	mov	r1, r2
 8010e82:	4618      	mov	r0, r3
 8010e84:	f7f4 fd58 	bl	8005938 <HAL_PCD_EP_Flush>
 8010e88:	4603      	mov	r3, r0
 8010e8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010e8c:	7bfb      	ldrb	r3, [r7, #15]
 8010e8e:	4618      	mov	r0, r3
 8010e90:	f000 f8e6 	bl	8011060 <USBD_Get_USB_Status>
 8010e94:	4603      	mov	r3, r0
 8010e96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010e98:	7bbb      	ldrb	r3, [r7, #14]
}
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	3710      	adds	r7, #16
 8010e9e:	46bd      	mov	sp, r7
 8010ea0:	bd80      	pop	{r7, pc}

08010ea2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010ea2:	b580      	push	{r7, lr}
 8010ea4:	b084      	sub	sp, #16
 8010ea6:	af00      	add	r7, sp, #0
 8010ea8:	6078      	str	r0, [r7, #4]
 8010eaa:	460b      	mov	r3, r1
 8010eac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010eae:	2300      	movs	r3, #0
 8010eb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010ebc:	78fa      	ldrb	r2, [r7, #3]
 8010ebe:	4611      	mov	r1, r2
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	f7f4 fc7f 	bl	80057c4 <HAL_PCD_EP_SetStall>
 8010ec6:	4603      	mov	r3, r0
 8010ec8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010eca:	7bfb      	ldrb	r3, [r7, #15]
 8010ecc:	4618      	mov	r0, r3
 8010ece:	f000 f8c7 	bl	8011060 <USBD_Get_USB_Status>
 8010ed2:	4603      	mov	r3, r0
 8010ed4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ed6:	7bbb      	ldrb	r3, [r7, #14]
}
 8010ed8:	4618      	mov	r0, r3
 8010eda:	3710      	adds	r7, #16
 8010edc:	46bd      	mov	sp, r7
 8010ede:	bd80      	pop	{r7, pc}

08010ee0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b084      	sub	sp, #16
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	6078      	str	r0, [r7, #4]
 8010ee8:	460b      	mov	r3, r1
 8010eea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010eec:	2300      	movs	r3, #0
 8010eee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010efa:	78fa      	ldrb	r2, [r7, #3]
 8010efc:	4611      	mov	r1, r2
 8010efe:	4618      	mov	r0, r3
 8010f00:	f7f4 fcc4 	bl	800588c <HAL_PCD_EP_ClrStall>
 8010f04:	4603      	mov	r3, r0
 8010f06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010f08:	7bfb      	ldrb	r3, [r7, #15]
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	f000 f8a8 	bl	8011060 <USBD_Get_USB_Status>
 8010f10:	4603      	mov	r3, r0
 8010f12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010f14:	7bbb      	ldrb	r3, [r7, #14]
}
 8010f16:	4618      	mov	r0, r3
 8010f18:	3710      	adds	r7, #16
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	bd80      	pop	{r7, pc}

08010f1e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010f1e:	b480      	push	{r7}
 8010f20:	b085      	sub	sp, #20
 8010f22:	af00      	add	r7, sp, #0
 8010f24:	6078      	str	r0, [r7, #4]
 8010f26:	460b      	mov	r3, r1
 8010f28:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010f30:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010f32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	da0b      	bge.n	8010f52 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010f3a:	78fb      	ldrb	r3, [r7, #3]
 8010f3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010f40:	68f9      	ldr	r1, [r7, #12]
 8010f42:	4613      	mov	r3, r2
 8010f44:	00db      	lsls	r3, r3, #3
 8010f46:	1a9b      	subs	r3, r3, r2
 8010f48:	009b      	lsls	r3, r3, #2
 8010f4a:	440b      	add	r3, r1
 8010f4c:	333e      	adds	r3, #62	; 0x3e
 8010f4e:	781b      	ldrb	r3, [r3, #0]
 8010f50:	e00b      	b.n	8010f6a <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010f52:	78fb      	ldrb	r3, [r7, #3]
 8010f54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010f58:	68f9      	ldr	r1, [r7, #12]
 8010f5a:	4613      	mov	r3, r2
 8010f5c:	00db      	lsls	r3, r3, #3
 8010f5e:	1a9b      	subs	r3, r3, r2
 8010f60:	009b      	lsls	r3, r3, #2
 8010f62:	440b      	add	r3, r1
 8010f64:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010f68:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	3714      	adds	r7, #20
 8010f6e:	46bd      	mov	sp, r7
 8010f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f74:	4770      	bx	lr

08010f76 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010f76:	b580      	push	{r7, lr}
 8010f78:	b084      	sub	sp, #16
 8010f7a:	af00      	add	r7, sp, #0
 8010f7c:	6078      	str	r0, [r7, #4]
 8010f7e:	460b      	mov	r3, r1
 8010f80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f82:	2300      	movs	r3, #0
 8010f84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010f86:	2300      	movs	r3, #0
 8010f88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010f90:	78fa      	ldrb	r2, [r7, #3]
 8010f92:	4611      	mov	r1, r2
 8010f94:	4618      	mov	r0, r3
 8010f96:	f7f4 fa91 	bl	80054bc <HAL_PCD_SetAddress>
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010f9e:	7bfb      	ldrb	r3, [r7, #15]
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	f000 f85d 	bl	8011060 <USBD_Get_USB_Status>
 8010fa6:	4603      	mov	r3, r0
 8010fa8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010faa:	7bbb      	ldrb	r3, [r7, #14]
}
 8010fac:	4618      	mov	r0, r3
 8010fae:	3710      	adds	r7, #16
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	bd80      	pop	{r7, pc}

08010fb4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	b086      	sub	sp, #24
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	60f8      	str	r0, [r7, #12]
 8010fbc:	607a      	str	r2, [r7, #4]
 8010fbe:	603b      	str	r3, [r7, #0]
 8010fc0:	460b      	mov	r3, r1
 8010fc2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010fc8:	2300      	movs	r3, #0
 8010fca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010fd2:	7af9      	ldrb	r1, [r7, #11]
 8010fd4:	683b      	ldr	r3, [r7, #0]
 8010fd6:	687a      	ldr	r2, [r7, #4]
 8010fd8:	f7f4 fbaa 	bl	8005730 <HAL_PCD_EP_Transmit>
 8010fdc:	4603      	mov	r3, r0
 8010fde:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010fe0:	7dfb      	ldrb	r3, [r7, #23]
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	f000 f83c 	bl	8011060 <USBD_Get_USB_Status>
 8010fe8:	4603      	mov	r3, r0
 8010fea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010fec:	7dbb      	ldrb	r3, [r7, #22]
}
 8010fee:	4618      	mov	r0, r3
 8010ff0:	3718      	adds	r7, #24
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	bd80      	pop	{r7, pc}

08010ff6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010ff6:	b580      	push	{r7, lr}
 8010ff8:	b086      	sub	sp, #24
 8010ffa:	af00      	add	r7, sp, #0
 8010ffc:	60f8      	str	r0, [r7, #12]
 8010ffe:	607a      	str	r2, [r7, #4]
 8011000:	603b      	str	r3, [r7, #0]
 8011002:	460b      	mov	r3, r1
 8011004:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011006:	2300      	movs	r3, #0
 8011008:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801100a:	2300      	movs	r3, #0
 801100c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011014:	7af9      	ldrb	r1, [r7, #11]
 8011016:	683b      	ldr	r3, [r7, #0]
 8011018:	687a      	ldr	r2, [r7, #4]
 801101a:	f7f4 fb26 	bl	800566a <HAL_PCD_EP_Receive>
 801101e:	4603      	mov	r3, r0
 8011020:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011022:	7dfb      	ldrb	r3, [r7, #23]
 8011024:	4618      	mov	r0, r3
 8011026:	f000 f81b 	bl	8011060 <USBD_Get_USB_Status>
 801102a:	4603      	mov	r3, r0
 801102c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801102e:	7dbb      	ldrb	r3, [r7, #22]
}
 8011030:	4618      	mov	r0, r3
 8011032:	3718      	adds	r7, #24
 8011034:	46bd      	mov	sp, r7
 8011036:	bd80      	pop	{r7, pc}

08011038 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011038:	b580      	push	{r7, lr}
 801103a:	b082      	sub	sp, #8
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
 8011040:	460b      	mov	r3, r1
 8011042:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801104a:	78fa      	ldrb	r2, [r7, #3]
 801104c:	4611      	mov	r1, r2
 801104e:	4618      	mov	r0, r3
 8011050:	f7f4 fb56 	bl	8005700 <HAL_PCD_EP_GetRxCount>
 8011054:	4603      	mov	r3, r0
}
 8011056:	4618      	mov	r0, r3
 8011058:	3708      	adds	r7, #8
 801105a:	46bd      	mov	sp, r7
 801105c:	bd80      	pop	{r7, pc}
	...

08011060 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011060:	b480      	push	{r7}
 8011062:	b085      	sub	sp, #20
 8011064:	af00      	add	r7, sp, #0
 8011066:	4603      	mov	r3, r0
 8011068:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801106a:	2300      	movs	r3, #0
 801106c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801106e:	79fb      	ldrb	r3, [r7, #7]
 8011070:	2b03      	cmp	r3, #3
 8011072:	d817      	bhi.n	80110a4 <USBD_Get_USB_Status+0x44>
 8011074:	a201      	add	r2, pc, #4	; (adr r2, 801107c <USBD_Get_USB_Status+0x1c>)
 8011076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801107a:	bf00      	nop
 801107c:	0801108d 	.word	0x0801108d
 8011080:	08011093 	.word	0x08011093
 8011084:	08011099 	.word	0x08011099
 8011088:	0801109f 	.word	0x0801109f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801108c:	2300      	movs	r3, #0
 801108e:	73fb      	strb	r3, [r7, #15]
    break;
 8011090:	e00b      	b.n	80110aa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011092:	2303      	movs	r3, #3
 8011094:	73fb      	strb	r3, [r7, #15]
    break;
 8011096:	e008      	b.n	80110aa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011098:	2301      	movs	r3, #1
 801109a:	73fb      	strb	r3, [r7, #15]
    break;
 801109c:	e005      	b.n	80110aa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801109e:	2303      	movs	r3, #3
 80110a0:	73fb      	strb	r3, [r7, #15]
    break;
 80110a2:	e002      	b.n	80110aa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80110a4:	2303      	movs	r3, #3
 80110a6:	73fb      	strb	r3, [r7, #15]
    break;
 80110a8:	bf00      	nop
  }
  return usb_status;
 80110aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80110ac:	4618      	mov	r0, r3
 80110ae:	3714      	adds	r7, #20
 80110b0:	46bd      	mov	sp, r7
 80110b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b6:	4770      	bx	lr

080110b8 <__errno>:
 80110b8:	4b01      	ldr	r3, [pc, #4]	; (80110c0 <__errno+0x8>)
 80110ba:	6818      	ldr	r0, [r3, #0]
 80110bc:	4770      	bx	lr
 80110be:	bf00      	nop
 80110c0:	24000168 	.word	0x24000168

080110c4 <__libc_init_array>:
 80110c4:	b570      	push	{r4, r5, r6, lr}
 80110c6:	4e0d      	ldr	r6, [pc, #52]	; (80110fc <__libc_init_array+0x38>)
 80110c8:	4c0d      	ldr	r4, [pc, #52]	; (8011100 <__libc_init_array+0x3c>)
 80110ca:	1ba4      	subs	r4, r4, r6
 80110cc:	10a4      	asrs	r4, r4, #2
 80110ce:	2500      	movs	r5, #0
 80110d0:	42a5      	cmp	r5, r4
 80110d2:	d109      	bne.n	80110e8 <__libc_init_array+0x24>
 80110d4:	4e0b      	ldr	r6, [pc, #44]	; (8011104 <__libc_init_array+0x40>)
 80110d6:	4c0c      	ldr	r4, [pc, #48]	; (8011108 <__libc_init_array+0x44>)
 80110d8:	f000 ff20 	bl	8011f1c <_init>
 80110dc:	1ba4      	subs	r4, r4, r6
 80110de:	10a4      	asrs	r4, r4, #2
 80110e0:	2500      	movs	r5, #0
 80110e2:	42a5      	cmp	r5, r4
 80110e4:	d105      	bne.n	80110f2 <__libc_init_array+0x2e>
 80110e6:	bd70      	pop	{r4, r5, r6, pc}
 80110e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80110ec:	4798      	blx	r3
 80110ee:	3501      	adds	r5, #1
 80110f0:	e7ee      	b.n	80110d0 <__libc_init_array+0xc>
 80110f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80110f6:	4798      	blx	r3
 80110f8:	3501      	adds	r5, #1
 80110fa:	e7f2      	b.n	80110e2 <__libc_init_array+0x1e>
 80110fc:	08012100 	.word	0x08012100
 8011100:	08012100 	.word	0x08012100
 8011104:	08012100 	.word	0x08012100
 8011108:	08012104 	.word	0x08012104

0801110c <malloc>:
 801110c:	4b02      	ldr	r3, [pc, #8]	; (8011118 <malloc+0xc>)
 801110e:	4601      	mov	r1, r0
 8011110:	6818      	ldr	r0, [r3, #0]
 8011112:	f000 b86d 	b.w	80111f0 <_malloc_r>
 8011116:	bf00      	nop
 8011118:	24000168 	.word	0x24000168

0801111c <free>:
 801111c:	4b02      	ldr	r3, [pc, #8]	; (8011128 <free+0xc>)
 801111e:	4601      	mov	r1, r0
 8011120:	6818      	ldr	r0, [r3, #0]
 8011122:	f000 b817 	b.w	8011154 <_free_r>
 8011126:	bf00      	nop
 8011128:	24000168 	.word	0x24000168

0801112c <memcpy>:
 801112c:	b510      	push	{r4, lr}
 801112e:	1e43      	subs	r3, r0, #1
 8011130:	440a      	add	r2, r1
 8011132:	4291      	cmp	r1, r2
 8011134:	d100      	bne.n	8011138 <memcpy+0xc>
 8011136:	bd10      	pop	{r4, pc}
 8011138:	f811 4b01 	ldrb.w	r4, [r1], #1
 801113c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011140:	e7f7      	b.n	8011132 <memcpy+0x6>

08011142 <memset>:
 8011142:	4402      	add	r2, r0
 8011144:	4603      	mov	r3, r0
 8011146:	4293      	cmp	r3, r2
 8011148:	d100      	bne.n	801114c <memset+0xa>
 801114a:	4770      	bx	lr
 801114c:	f803 1b01 	strb.w	r1, [r3], #1
 8011150:	e7f9      	b.n	8011146 <memset+0x4>
	...

08011154 <_free_r>:
 8011154:	b538      	push	{r3, r4, r5, lr}
 8011156:	4605      	mov	r5, r0
 8011158:	2900      	cmp	r1, #0
 801115a:	d045      	beq.n	80111e8 <_free_r+0x94>
 801115c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011160:	1f0c      	subs	r4, r1, #4
 8011162:	2b00      	cmp	r3, #0
 8011164:	bfb8      	it	lt
 8011166:	18e4      	addlt	r4, r4, r3
 8011168:	f000 f98e 	bl	8011488 <__malloc_lock>
 801116c:	4a1f      	ldr	r2, [pc, #124]	; (80111ec <_free_r+0x98>)
 801116e:	6813      	ldr	r3, [r2, #0]
 8011170:	4610      	mov	r0, r2
 8011172:	b933      	cbnz	r3, 8011182 <_free_r+0x2e>
 8011174:	6063      	str	r3, [r4, #4]
 8011176:	6014      	str	r4, [r2, #0]
 8011178:	4628      	mov	r0, r5
 801117a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801117e:	f000 b984 	b.w	801148a <__malloc_unlock>
 8011182:	42a3      	cmp	r3, r4
 8011184:	d90c      	bls.n	80111a0 <_free_r+0x4c>
 8011186:	6821      	ldr	r1, [r4, #0]
 8011188:	1862      	adds	r2, r4, r1
 801118a:	4293      	cmp	r3, r2
 801118c:	bf04      	itt	eq
 801118e:	681a      	ldreq	r2, [r3, #0]
 8011190:	685b      	ldreq	r3, [r3, #4]
 8011192:	6063      	str	r3, [r4, #4]
 8011194:	bf04      	itt	eq
 8011196:	1852      	addeq	r2, r2, r1
 8011198:	6022      	streq	r2, [r4, #0]
 801119a:	6004      	str	r4, [r0, #0]
 801119c:	e7ec      	b.n	8011178 <_free_r+0x24>
 801119e:	4613      	mov	r3, r2
 80111a0:	685a      	ldr	r2, [r3, #4]
 80111a2:	b10a      	cbz	r2, 80111a8 <_free_r+0x54>
 80111a4:	42a2      	cmp	r2, r4
 80111a6:	d9fa      	bls.n	801119e <_free_r+0x4a>
 80111a8:	6819      	ldr	r1, [r3, #0]
 80111aa:	1858      	adds	r0, r3, r1
 80111ac:	42a0      	cmp	r0, r4
 80111ae:	d10b      	bne.n	80111c8 <_free_r+0x74>
 80111b0:	6820      	ldr	r0, [r4, #0]
 80111b2:	4401      	add	r1, r0
 80111b4:	1858      	adds	r0, r3, r1
 80111b6:	4282      	cmp	r2, r0
 80111b8:	6019      	str	r1, [r3, #0]
 80111ba:	d1dd      	bne.n	8011178 <_free_r+0x24>
 80111bc:	6810      	ldr	r0, [r2, #0]
 80111be:	6852      	ldr	r2, [r2, #4]
 80111c0:	605a      	str	r2, [r3, #4]
 80111c2:	4401      	add	r1, r0
 80111c4:	6019      	str	r1, [r3, #0]
 80111c6:	e7d7      	b.n	8011178 <_free_r+0x24>
 80111c8:	d902      	bls.n	80111d0 <_free_r+0x7c>
 80111ca:	230c      	movs	r3, #12
 80111cc:	602b      	str	r3, [r5, #0]
 80111ce:	e7d3      	b.n	8011178 <_free_r+0x24>
 80111d0:	6820      	ldr	r0, [r4, #0]
 80111d2:	1821      	adds	r1, r4, r0
 80111d4:	428a      	cmp	r2, r1
 80111d6:	bf04      	itt	eq
 80111d8:	6811      	ldreq	r1, [r2, #0]
 80111da:	6852      	ldreq	r2, [r2, #4]
 80111dc:	6062      	str	r2, [r4, #4]
 80111de:	bf04      	itt	eq
 80111e0:	1809      	addeq	r1, r1, r0
 80111e2:	6021      	streq	r1, [r4, #0]
 80111e4:	605c      	str	r4, [r3, #4]
 80111e6:	e7c7      	b.n	8011178 <_free_r+0x24>
 80111e8:	bd38      	pop	{r3, r4, r5, pc}
 80111ea:	bf00      	nop
 80111ec:	24000200 	.word	0x24000200

080111f0 <_malloc_r>:
 80111f0:	b570      	push	{r4, r5, r6, lr}
 80111f2:	1ccd      	adds	r5, r1, #3
 80111f4:	f025 0503 	bic.w	r5, r5, #3
 80111f8:	3508      	adds	r5, #8
 80111fa:	2d0c      	cmp	r5, #12
 80111fc:	bf38      	it	cc
 80111fe:	250c      	movcc	r5, #12
 8011200:	2d00      	cmp	r5, #0
 8011202:	4606      	mov	r6, r0
 8011204:	db01      	blt.n	801120a <_malloc_r+0x1a>
 8011206:	42a9      	cmp	r1, r5
 8011208:	d903      	bls.n	8011212 <_malloc_r+0x22>
 801120a:	230c      	movs	r3, #12
 801120c:	6033      	str	r3, [r6, #0]
 801120e:	2000      	movs	r0, #0
 8011210:	bd70      	pop	{r4, r5, r6, pc}
 8011212:	f000 f939 	bl	8011488 <__malloc_lock>
 8011216:	4a21      	ldr	r2, [pc, #132]	; (801129c <_malloc_r+0xac>)
 8011218:	6814      	ldr	r4, [r2, #0]
 801121a:	4621      	mov	r1, r4
 801121c:	b991      	cbnz	r1, 8011244 <_malloc_r+0x54>
 801121e:	4c20      	ldr	r4, [pc, #128]	; (80112a0 <_malloc_r+0xb0>)
 8011220:	6823      	ldr	r3, [r4, #0]
 8011222:	b91b      	cbnz	r3, 801122c <_malloc_r+0x3c>
 8011224:	4630      	mov	r0, r6
 8011226:	f000 f855 	bl	80112d4 <_sbrk_r>
 801122a:	6020      	str	r0, [r4, #0]
 801122c:	4629      	mov	r1, r5
 801122e:	4630      	mov	r0, r6
 8011230:	f000 f850 	bl	80112d4 <_sbrk_r>
 8011234:	1c43      	adds	r3, r0, #1
 8011236:	d124      	bne.n	8011282 <_malloc_r+0x92>
 8011238:	230c      	movs	r3, #12
 801123a:	6033      	str	r3, [r6, #0]
 801123c:	4630      	mov	r0, r6
 801123e:	f000 f924 	bl	801148a <__malloc_unlock>
 8011242:	e7e4      	b.n	801120e <_malloc_r+0x1e>
 8011244:	680b      	ldr	r3, [r1, #0]
 8011246:	1b5b      	subs	r3, r3, r5
 8011248:	d418      	bmi.n	801127c <_malloc_r+0x8c>
 801124a:	2b0b      	cmp	r3, #11
 801124c:	d90f      	bls.n	801126e <_malloc_r+0x7e>
 801124e:	600b      	str	r3, [r1, #0]
 8011250:	50cd      	str	r5, [r1, r3]
 8011252:	18cc      	adds	r4, r1, r3
 8011254:	4630      	mov	r0, r6
 8011256:	f000 f918 	bl	801148a <__malloc_unlock>
 801125a:	f104 000b 	add.w	r0, r4, #11
 801125e:	1d23      	adds	r3, r4, #4
 8011260:	f020 0007 	bic.w	r0, r0, #7
 8011264:	1ac3      	subs	r3, r0, r3
 8011266:	d0d3      	beq.n	8011210 <_malloc_r+0x20>
 8011268:	425a      	negs	r2, r3
 801126a:	50e2      	str	r2, [r4, r3]
 801126c:	e7d0      	b.n	8011210 <_malloc_r+0x20>
 801126e:	428c      	cmp	r4, r1
 8011270:	684b      	ldr	r3, [r1, #4]
 8011272:	bf16      	itet	ne
 8011274:	6063      	strne	r3, [r4, #4]
 8011276:	6013      	streq	r3, [r2, #0]
 8011278:	460c      	movne	r4, r1
 801127a:	e7eb      	b.n	8011254 <_malloc_r+0x64>
 801127c:	460c      	mov	r4, r1
 801127e:	6849      	ldr	r1, [r1, #4]
 8011280:	e7cc      	b.n	801121c <_malloc_r+0x2c>
 8011282:	1cc4      	adds	r4, r0, #3
 8011284:	f024 0403 	bic.w	r4, r4, #3
 8011288:	42a0      	cmp	r0, r4
 801128a:	d005      	beq.n	8011298 <_malloc_r+0xa8>
 801128c:	1a21      	subs	r1, r4, r0
 801128e:	4630      	mov	r0, r6
 8011290:	f000 f820 	bl	80112d4 <_sbrk_r>
 8011294:	3001      	adds	r0, #1
 8011296:	d0cf      	beq.n	8011238 <_malloc_r+0x48>
 8011298:	6025      	str	r5, [r4, #0]
 801129a:	e7db      	b.n	8011254 <_malloc_r+0x64>
 801129c:	24000200 	.word	0x24000200
 80112a0:	24000204 	.word	0x24000204

080112a4 <iprintf>:
 80112a4:	b40f      	push	{r0, r1, r2, r3}
 80112a6:	4b0a      	ldr	r3, [pc, #40]	; (80112d0 <iprintf+0x2c>)
 80112a8:	b513      	push	{r0, r1, r4, lr}
 80112aa:	681c      	ldr	r4, [r3, #0]
 80112ac:	b124      	cbz	r4, 80112b8 <iprintf+0x14>
 80112ae:	69a3      	ldr	r3, [r4, #24]
 80112b0:	b913      	cbnz	r3, 80112b8 <iprintf+0x14>
 80112b2:	4620      	mov	r0, r4
 80112b4:	f000 f85e 	bl	8011374 <__sinit>
 80112b8:	ab05      	add	r3, sp, #20
 80112ba:	9a04      	ldr	r2, [sp, #16]
 80112bc:	68a1      	ldr	r1, [r4, #8]
 80112be:	9301      	str	r3, [sp, #4]
 80112c0:	4620      	mov	r0, r4
 80112c2:	f000 f90d 	bl	80114e0 <_vfiprintf_r>
 80112c6:	b002      	add	sp, #8
 80112c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80112cc:	b004      	add	sp, #16
 80112ce:	4770      	bx	lr
 80112d0:	24000168 	.word	0x24000168

080112d4 <_sbrk_r>:
 80112d4:	b538      	push	{r3, r4, r5, lr}
 80112d6:	4c06      	ldr	r4, [pc, #24]	; (80112f0 <_sbrk_r+0x1c>)
 80112d8:	2300      	movs	r3, #0
 80112da:	4605      	mov	r5, r0
 80112dc:	4608      	mov	r0, r1
 80112de:	6023      	str	r3, [r4, #0]
 80112e0:	f7f0 f900 	bl	80014e4 <_sbrk>
 80112e4:	1c43      	adds	r3, r0, #1
 80112e6:	d102      	bne.n	80112ee <_sbrk_r+0x1a>
 80112e8:	6823      	ldr	r3, [r4, #0]
 80112ea:	b103      	cbz	r3, 80112ee <_sbrk_r+0x1a>
 80112ec:	602b      	str	r3, [r5, #0]
 80112ee:	bd38      	pop	{r3, r4, r5, pc}
 80112f0:	2400138c 	.word	0x2400138c

080112f4 <std>:
 80112f4:	2300      	movs	r3, #0
 80112f6:	b510      	push	{r4, lr}
 80112f8:	4604      	mov	r4, r0
 80112fa:	e9c0 3300 	strd	r3, r3, [r0]
 80112fe:	6083      	str	r3, [r0, #8]
 8011300:	8181      	strh	r1, [r0, #12]
 8011302:	6643      	str	r3, [r0, #100]	; 0x64
 8011304:	81c2      	strh	r2, [r0, #14]
 8011306:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801130a:	6183      	str	r3, [r0, #24]
 801130c:	4619      	mov	r1, r3
 801130e:	2208      	movs	r2, #8
 8011310:	305c      	adds	r0, #92	; 0x5c
 8011312:	f7ff ff16 	bl	8011142 <memset>
 8011316:	4b05      	ldr	r3, [pc, #20]	; (801132c <std+0x38>)
 8011318:	6263      	str	r3, [r4, #36]	; 0x24
 801131a:	4b05      	ldr	r3, [pc, #20]	; (8011330 <std+0x3c>)
 801131c:	62a3      	str	r3, [r4, #40]	; 0x28
 801131e:	4b05      	ldr	r3, [pc, #20]	; (8011334 <std+0x40>)
 8011320:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011322:	4b05      	ldr	r3, [pc, #20]	; (8011338 <std+0x44>)
 8011324:	6224      	str	r4, [r4, #32]
 8011326:	6323      	str	r3, [r4, #48]	; 0x30
 8011328:	bd10      	pop	{r4, pc}
 801132a:	bf00      	nop
 801132c:	08011a1d 	.word	0x08011a1d
 8011330:	08011a3f 	.word	0x08011a3f
 8011334:	08011a77 	.word	0x08011a77
 8011338:	08011a9b 	.word	0x08011a9b

0801133c <_cleanup_r>:
 801133c:	4901      	ldr	r1, [pc, #4]	; (8011344 <_cleanup_r+0x8>)
 801133e:	f000 b885 	b.w	801144c <_fwalk_reent>
 8011342:	bf00      	nop
 8011344:	08011d75 	.word	0x08011d75

08011348 <__sfmoreglue>:
 8011348:	b570      	push	{r4, r5, r6, lr}
 801134a:	1e4a      	subs	r2, r1, #1
 801134c:	2568      	movs	r5, #104	; 0x68
 801134e:	4355      	muls	r5, r2
 8011350:	460e      	mov	r6, r1
 8011352:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011356:	f7ff ff4b 	bl	80111f0 <_malloc_r>
 801135a:	4604      	mov	r4, r0
 801135c:	b140      	cbz	r0, 8011370 <__sfmoreglue+0x28>
 801135e:	2100      	movs	r1, #0
 8011360:	e9c0 1600 	strd	r1, r6, [r0]
 8011364:	300c      	adds	r0, #12
 8011366:	60a0      	str	r0, [r4, #8]
 8011368:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801136c:	f7ff fee9 	bl	8011142 <memset>
 8011370:	4620      	mov	r0, r4
 8011372:	bd70      	pop	{r4, r5, r6, pc}

08011374 <__sinit>:
 8011374:	6983      	ldr	r3, [r0, #24]
 8011376:	b510      	push	{r4, lr}
 8011378:	4604      	mov	r4, r0
 801137a:	bb33      	cbnz	r3, 80113ca <__sinit+0x56>
 801137c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8011380:	6503      	str	r3, [r0, #80]	; 0x50
 8011382:	4b12      	ldr	r3, [pc, #72]	; (80113cc <__sinit+0x58>)
 8011384:	4a12      	ldr	r2, [pc, #72]	; (80113d0 <__sinit+0x5c>)
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	6282      	str	r2, [r0, #40]	; 0x28
 801138a:	4298      	cmp	r0, r3
 801138c:	bf04      	itt	eq
 801138e:	2301      	moveq	r3, #1
 8011390:	6183      	streq	r3, [r0, #24]
 8011392:	f000 f81f 	bl	80113d4 <__sfp>
 8011396:	6060      	str	r0, [r4, #4]
 8011398:	4620      	mov	r0, r4
 801139a:	f000 f81b 	bl	80113d4 <__sfp>
 801139e:	60a0      	str	r0, [r4, #8]
 80113a0:	4620      	mov	r0, r4
 80113a2:	f000 f817 	bl	80113d4 <__sfp>
 80113a6:	2200      	movs	r2, #0
 80113a8:	60e0      	str	r0, [r4, #12]
 80113aa:	2104      	movs	r1, #4
 80113ac:	6860      	ldr	r0, [r4, #4]
 80113ae:	f7ff ffa1 	bl	80112f4 <std>
 80113b2:	2201      	movs	r2, #1
 80113b4:	2109      	movs	r1, #9
 80113b6:	68a0      	ldr	r0, [r4, #8]
 80113b8:	f7ff ff9c 	bl	80112f4 <std>
 80113bc:	2202      	movs	r2, #2
 80113be:	2112      	movs	r1, #18
 80113c0:	68e0      	ldr	r0, [r4, #12]
 80113c2:	f7ff ff97 	bl	80112f4 <std>
 80113c6:	2301      	movs	r3, #1
 80113c8:	61a3      	str	r3, [r4, #24]
 80113ca:	bd10      	pop	{r4, pc}
 80113cc:	08012060 	.word	0x08012060
 80113d0:	0801133d 	.word	0x0801133d

080113d4 <__sfp>:
 80113d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113d6:	4b1b      	ldr	r3, [pc, #108]	; (8011444 <__sfp+0x70>)
 80113d8:	681e      	ldr	r6, [r3, #0]
 80113da:	69b3      	ldr	r3, [r6, #24]
 80113dc:	4607      	mov	r7, r0
 80113de:	b913      	cbnz	r3, 80113e6 <__sfp+0x12>
 80113e0:	4630      	mov	r0, r6
 80113e2:	f7ff ffc7 	bl	8011374 <__sinit>
 80113e6:	3648      	adds	r6, #72	; 0x48
 80113e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80113ec:	3b01      	subs	r3, #1
 80113ee:	d503      	bpl.n	80113f8 <__sfp+0x24>
 80113f0:	6833      	ldr	r3, [r6, #0]
 80113f2:	b133      	cbz	r3, 8011402 <__sfp+0x2e>
 80113f4:	6836      	ldr	r6, [r6, #0]
 80113f6:	e7f7      	b.n	80113e8 <__sfp+0x14>
 80113f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80113fc:	b16d      	cbz	r5, 801141a <__sfp+0x46>
 80113fe:	3468      	adds	r4, #104	; 0x68
 8011400:	e7f4      	b.n	80113ec <__sfp+0x18>
 8011402:	2104      	movs	r1, #4
 8011404:	4638      	mov	r0, r7
 8011406:	f7ff ff9f 	bl	8011348 <__sfmoreglue>
 801140a:	6030      	str	r0, [r6, #0]
 801140c:	2800      	cmp	r0, #0
 801140e:	d1f1      	bne.n	80113f4 <__sfp+0x20>
 8011410:	230c      	movs	r3, #12
 8011412:	603b      	str	r3, [r7, #0]
 8011414:	4604      	mov	r4, r0
 8011416:	4620      	mov	r0, r4
 8011418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801141a:	4b0b      	ldr	r3, [pc, #44]	; (8011448 <__sfp+0x74>)
 801141c:	6665      	str	r5, [r4, #100]	; 0x64
 801141e:	e9c4 5500 	strd	r5, r5, [r4]
 8011422:	60a5      	str	r5, [r4, #8]
 8011424:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8011428:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801142c:	2208      	movs	r2, #8
 801142e:	4629      	mov	r1, r5
 8011430:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011434:	f7ff fe85 	bl	8011142 <memset>
 8011438:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801143c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011440:	e7e9      	b.n	8011416 <__sfp+0x42>
 8011442:	bf00      	nop
 8011444:	08012060 	.word	0x08012060
 8011448:	ffff0001 	.word	0xffff0001

0801144c <_fwalk_reent>:
 801144c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011450:	4680      	mov	r8, r0
 8011452:	4689      	mov	r9, r1
 8011454:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011458:	2600      	movs	r6, #0
 801145a:	b914      	cbnz	r4, 8011462 <_fwalk_reent+0x16>
 801145c:	4630      	mov	r0, r6
 801145e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011462:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8011466:	3f01      	subs	r7, #1
 8011468:	d501      	bpl.n	801146e <_fwalk_reent+0x22>
 801146a:	6824      	ldr	r4, [r4, #0]
 801146c:	e7f5      	b.n	801145a <_fwalk_reent+0xe>
 801146e:	89ab      	ldrh	r3, [r5, #12]
 8011470:	2b01      	cmp	r3, #1
 8011472:	d907      	bls.n	8011484 <_fwalk_reent+0x38>
 8011474:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011478:	3301      	adds	r3, #1
 801147a:	d003      	beq.n	8011484 <_fwalk_reent+0x38>
 801147c:	4629      	mov	r1, r5
 801147e:	4640      	mov	r0, r8
 8011480:	47c8      	blx	r9
 8011482:	4306      	orrs	r6, r0
 8011484:	3568      	adds	r5, #104	; 0x68
 8011486:	e7ee      	b.n	8011466 <_fwalk_reent+0x1a>

08011488 <__malloc_lock>:
 8011488:	4770      	bx	lr

0801148a <__malloc_unlock>:
 801148a:	4770      	bx	lr

0801148c <__sfputc_r>:
 801148c:	6893      	ldr	r3, [r2, #8]
 801148e:	3b01      	subs	r3, #1
 8011490:	2b00      	cmp	r3, #0
 8011492:	b410      	push	{r4}
 8011494:	6093      	str	r3, [r2, #8]
 8011496:	da08      	bge.n	80114aa <__sfputc_r+0x1e>
 8011498:	6994      	ldr	r4, [r2, #24]
 801149a:	42a3      	cmp	r3, r4
 801149c:	db01      	blt.n	80114a2 <__sfputc_r+0x16>
 801149e:	290a      	cmp	r1, #10
 80114a0:	d103      	bne.n	80114aa <__sfputc_r+0x1e>
 80114a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80114a6:	f000 bafd 	b.w	8011aa4 <__swbuf_r>
 80114aa:	6813      	ldr	r3, [r2, #0]
 80114ac:	1c58      	adds	r0, r3, #1
 80114ae:	6010      	str	r0, [r2, #0]
 80114b0:	7019      	strb	r1, [r3, #0]
 80114b2:	4608      	mov	r0, r1
 80114b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80114b8:	4770      	bx	lr

080114ba <__sfputs_r>:
 80114ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114bc:	4606      	mov	r6, r0
 80114be:	460f      	mov	r7, r1
 80114c0:	4614      	mov	r4, r2
 80114c2:	18d5      	adds	r5, r2, r3
 80114c4:	42ac      	cmp	r4, r5
 80114c6:	d101      	bne.n	80114cc <__sfputs_r+0x12>
 80114c8:	2000      	movs	r0, #0
 80114ca:	e007      	b.n	80114dc <__sfputs_r+0x22>
 80114cc:	463a      	mov	r2, r7
 80114ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114d2:	4630      	mov	r0, r6
 80114d4:	f7ff ffda 	bl	801148c <__sfputc_r>
 80114d8:	1c43      	adds	r3, r0, #1
 80114da:	d1f3      	bne.n	80114c4 <__sfputs_r+0xa>
 80114dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080114e0 <_vfiprintf_r>:
 80114e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114e4:	460c      	mov	r4, r1
 80114e6:	b09d      	sub	sp, #116	; 0x74
 80114e8:	4617      	mov	r7, r2
 80114ea:	461d      	mov	r5, r3
 80114ec:	4606      	mov	r6, r0
 80114ee:	b118      	cbz	r0, 80114f8 <_vfiprintf_r+0x18>
 80114f0:	6983      	ldr	r3, [r0, #24]
 80114f2:	b90b      	cbnz	r3, 80114f8 <_vfiprintf_r+0x18>
 80114f4:	f7ff ff3e 	bl	8011374 <__sinit>
 80114f8:	4b7c      	ldr	r3, [pc, #496]	; (80116ec <_vfiprintf_r+0x20c>)
 80114fa:	429c      	cmp	r4, r3
 80114fc:	d158      	bne.n	80115b0 <_vfiprintf_r+0xd0>
 80114fe:	6874      	ldr	r4, [r6, #4]
 8011500:	89a3      	ldrh	r3, [r4, #12]
 8011502:	0718      	lsls	r0, r3, #28
 8011504:	d55e      	bpl.n	80115c4 <_vfiprintf_r+0xe4>
 8011506:	6923      	ldr	r3, [r4, #16]
 8011508:	2b00      	cmp	r3, #0
 801150a:	d05b      	beq.n	80115c4 <_vfiprintf_r+0xe4>
 801150c:	2300      	movs	r3, #0
 801150e:	9309      	str	r3, [sp, #36]	; 0x24
 8011510:	2320      	movs	r3, #32
 8011512:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011516:	2330      	movs	r3, #48	; 0x30
 8011518:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801151c:	9503      	str	r5, [sp, #12]
 801151e:	f04f 0b01 	mov.w	fp, #1
 8011522:	46b8      	mov	r8, r7
 8011524:	4645      	mov	r5, r8
 8011526:	f815 3b01 	ldrb.w	r3, [r5], #1
 801152a:	b10b      	cbz	r3, 8011530 <_vfiprintf_r+0x50>
 801152c:	2b25      	cmp	r3, #37	; 0x25
 801152e:	d154      	bne.n	80115da <_vfiprintf_r+0xfa>
 8011530:	ebb8 0a07 	subs.w	sl, r8, r7
 8011534:	d00b      	beq.n	801154e <_vfiprintf_r+0x6e>
 8011536:	4653      	mov	r3, sl
 8011538:	463a      	mov	r2, r7
 801153a:	4621      	mov	r1, r4
 801153c:	4630      	mov	r0, r6
 801153e:	f7ff ffbc 	bl	80114ba <__sfputs_r>
 8011542:	3001      	adds	r0, #1
 8011544:	f000 80c2 	beq.w	80116cc <_vfiprintf_r+0x1ec>
 8011548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801154a:	4453      	add	r3, sl
 801154c:	9309      	str	r3, [sp, #36]	; 0x24
 801154e:	f898 3000 	ldrb.w	r3, [r8]
 8011552:	2b00      	cmp	r3, #0
 8011554:	f000 80ba 	beq.w	80116cc <_vfiprintf_r+0x1ec>
 8011558:	2300      	movs	r3, #0
 801155a:	f04f 32ff 	mov.w	r2, #4294967295
 801155e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011562:	9304      	str	r3, [sp, #16]
 8011564:	9307      	str	r3, [sp, #28]
 8011566:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801156a:	931a      	str	r3, [sp, #104]	; 0x68
 801156c:	46a8      	mov	r8, r5
 801156e:	2205      	movs	r2, #5
 8011570:	f818 1b01 	ldrb.w	r1, [r8], #1
 8011574:	485e      	ldr	r0, [pc, #376]	; (80116f0 <_vfiprintf_r+0x210>)
 8011576:	f7ee feb3 	bl	80002e0 <memchr>
 801157a:	9b04      	ldr	r3, [sp, #16]
 801157c:	bb78      	cbnz	r0, 80115de <_vfiprintf_r+0xfe>
 801157e:	06d9      	lsls	r1, r3, #27
 8011580:	bf44      	itt	mi
 8011582:	2220      	movmi	r2, #32
 8011584:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011588:	071a      	lsls	r2, r3, #28
 801158a:	bf44      	itt	mi
 801158c:	222b      	movmi	r2, #43	; 0x2b
 801158e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011592:	782a      	ldrb	r2, [r5, #0]
 8011594:	2a2a      	cmp	r2, #42	; 0x2a
 8011596:	d02a      	beq.n	80115ee <_vfiprintf_r+0x10e>
 8011598:	9a07      	ldr	r2, [sp, #28]
 801159a:	46a8      	mov	r8, r5
 801159c:	2000      	movs	r0, #0
 801159e:	250a      	movs	r5, #10
 80115a0:	4641      	mov	r1, r8
 80115a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80115a6:	3b30      	subs	r3, #48	; 0x30
 80115a8:	2b09      	cmp	r3, #9
 80115aa:	d969      	bls.n	8011680 <_vfiprintf_r+0x1a0>
 80115ac:	b360      	cbz	r0, 8011608 <_vfiprintf_r+0x128>
 80115ae:	e024      	b.n	80115fa <_vfiprintf_r+0x11a>
 80115b0:	4b50      	ldr	r3, [pc, #320]	; (80116f4 <_vfiprintf_r+0x214>)
 80115b2:	429c      	cmp	r4, r3
 80115b4:	d101      	bne.n	80115ba <_vfiprintf_r+0xda>
 80115b6:	68b4      	ldr	r4, [r6, #8]
 80115b8:	e7a2      	b.n	8011500 <_vfiprintf_r+0x20>
 80115ba:	4b4f      	ldr	r3, [pc, #316]	; (80116f8 <_vfiprintf_r+0x218>)
 80115bc:	429c      	cmp	r4, r3
 80115be:	bf08      	it	eq
 80115c0:	68f4      	ldreq	r4, [r6, #12]
 80115c2:	e79d      	b.n	8011500 <_vfiprintf_r+0x20>
 80115c4:	4621      	mov	r1, r4
 80115c6:	4630      	mov	r0, r6
 80115c8:	f000 fad0 	bl	8011b6c <__swsetup_r>
 80115cc:	2800      	cmp	r0, #0
 80115ce:	d09d      	beq.n	801150c <_vfiprintf_r+0x2c>
 80115d0:	f04f 30ff 	mov.w	r0, #4294967295
 80115d4:	b01d      	add	sp, #116	; 0x74
 80115d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115da:	46a8      	mov	r8, r5
 80115dc:	e7a2      	b.n	8011524 <_vfiprintf_r+0x44>
 80115de:	4a44      	ldr	r2, [pc, #272]	; (80116f0 <_vfiprintf_r+0x210>)
 80115e0:	1a80      	subs	r0, r0, r2
 80115e2:	fa0b f000 	lsl.w	r0, fp, r0
 80115e6:	4318      	orrs	r0, r3
 80115e8:	9004      	str	r0, [sp, #16]
 80115ea:	4645      	mov	r5, r8
 80115ec:	e7be      	b.n	801156c <_vfiprintf_r+0x8c>
 80115ee:	9a03      	ldr	r2, [sp, #12]
 80115f0:	1d11      	adds	r1, r2, #4
 80115f2:	6812      	ldr	r2, [r2, #0]
 80115f4:	9103      	str	r1, [sp, #12]
 80115f6:	2a00      	cmp	r2, #0
 80115f8:	db01      	blt.n	80115fe <_vfiprintf_r+0x11e>
 80115fa:	9207      	str	r2, [sp, #28]
 80115fc:	e004      	b.n	8011608 <_vfiprintf_r+0x128>
 80115fe:	4252      	negs	r2, r2
 8011600:	f043 0302 	orr.w	r3, r3, #2
 8011604:	9207      	str	r2, [sp, #28]
 8011606:	9304      	str	r3, [sp, #16]
 8011608:	f898 3000 	ldrb.w	r3, [r8]
 801160c:	2b2e      	cmp	r3, #46	; 0x2e
 801160e:	d10e      	bne.n	801162e <_vfiprintf_r+0x14e>
 8011610:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011614:	2b2a      	cmp	r3, #42	; 0x2a
 8011616:	d138      	bne.n	801168a <_vfiprintf_r+0x1aa>
 8011618:	9b03      	ldr	r3, [sp, #12]
 801161a:	1d1a      	adds	r2, r3, #4
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	9203      	str	r2, [sp, #12]
 8011620:	2b00      	cmp	r3, #0
 8011622:	bfb8      	it	lt
 8011624:	f04f 33ff 	movlt.w	r3, #4294967295
 8011628:	f108 0802 	add.w	r8, r8, #2
 801162c:	9305      	str	r3, [sp, #20]
 801162e:	4d33      	ldr	r5, [pc, #204]	; (80116fc <_vfiprintf_r+0x21c>)
 8011630:	f898 1000 	ldrb.w	r1, [r8]
 8011634:	2203      	movs	r2, #3
 8011636:	4628      	mov	r0, r5
 8011638:	f7ee fe52 	bl	80002e0 <memchr>
 801163c:	b140      	cbz	r0, 8011650 <_vfiprintf_r+0x170>
 801163e:	2340      	movs	r3, #64	; 0x40
 8011640:	1b40      	subs	r0, r0, r5
 8011642:	fa03 f000 	lsl.w	r0, r3, r0
 8011646:	9b04      	ldr	r3, [sp, #16]
 8011648:	4303      	orrs	r3, r0
 801164a:	f108 0801 	add.w	r8, r8, #1
 801164e:	9304      	str	r3, [sp, #16]
 8011650:	f898 1000 	ldrb.w	r1, [r8]
 8011654:	482a      	ldr	r0, [pc, #168]	; (8011700 <_vfiprintf_r+0x220>)
 8011656:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801165a:	2206      	movs	r2, #6
 801165c:	f108 0701 	add.w	r7, r8, #1
 8011660:	f7ee fe3e 	bl	80002e0 <memchr>
 8011664:	2800      	cmp	r0, #0
 8011666:	d037      	beq.n	80116d8 <_vfiprintf_r+0x1f8>
 8011668:	4b26      	ldr	r3, [pc, #152]	; (8011704 <_vfiprintf_r+0x224>)
 801166a:	bb1b      	cbnz	r3, 80116b4 <_vfiprintf_r+0x1d4>
 801166c:	9b03      	ldr	r3, [sp, #12]
 801166e:	3307      	adds	r3, #7
 8011670:	f023 0307 	bic.w	r3, r3, #7
 8011674:	3308      	adds	r3, #8
 8011676:	9303      	str	r3, [sp, #12]
 8011678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801167a:	444b      	add	r3, r9
 801167c:	9309      	str	r3, [sp, #36]	; 0x24
 801167e:	e750      	b.n	8011522 <_vfiprintf_r+0x42>
 8011680:	fb05 3202 	mla	r2, r5, r2, r3
 8011684:	2001      	movs	r0, #1
 8011686:	4688      	mov	r8, r1
 8011688:	e78a      	b.n	80115a0 <_vfiprintf_r+0xc0>
 801168a:	2300      	movs	r3, #0
 801168c:	f108 0801 	add.w	r8, r8, #1
 8011690:	9305      	str	r3, [sp, #20]
 8011692:	4619      	mov	r1, r3
 8011694:	250a      	movs	r5, #10
 8011696:	4640      	mov	r0, r8
 8011698:	f810 2b01 	ldrb.w	r2, [r0], #1
 801169c:	3a30      	subs	r2, #48	; 0x30
 801169e:	2a09      	cmp	r2, #9
 80116a0:	d903      	bls.n	80116aa <_vfiprintf_r+0x1ca>
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d0c3      	beq.n	801162e <_vfiprintf_r+0x14e>
 80116a6:	9105      	str	r1, [sp, #20]
 80116a8:	e7c1      	b.n	801162e <_vfiprintf_r+0x14e>
 80116aa:	fb05 2101 	mla	r1, r5, r1, r2
 80116ae:	2301      	movs	r3, #1
 80116b0:	4680      	mov	r8, r0
 80116b2:	e7f0      	b.n	8011696 <_vfiprintf_r+0x1b6>
 80116b4:	ab03      	add	r3, sp, #12
 80116b6:	9300      	str	r3, [sp, #0]
 80116b8:	4622      	mov	r2, r4
 80116ba:	4b13      	ldr	r3, [pc, #76]	; (8011708 <_vfiprintf_r+0x228>)
 80116bc:	a904      	add	r1, sp, #16
 80116be:	4630      	mov	r0, r6
 80116c0:	f3af 8000 	nop.w
 80116c4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80116c8:	4681      	mov	r9, r0
 80116ca:	d1d5      	bne.n	8011678 <_vfiprintf_r+0x198>
 80116cc:	89a3      	ldrh	r3, [r4, #12]
 80116ce:	065b      	lsls	r3, r3, #25
 80116d0:	f53f af7e 	bmi.w	80115d0 <_vfiprintf_r+0xf0>
 80116d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80116d6:	e77d      	b.n	80115d4 <_vfiprintf_r+0xf4>
 80116d8:	ab03      	add	r3, sp, #12
 80116da:	9300      	str	r3, [sp, #0]
 80116dc:	4622      	mov	r2, r4
 80116de:	4b0a      	ldr	r3, [pc, #40]	; (8011708 <_vfiprintf_r+0x228>)
 80116e0:	a904      	add	r1, sp, #16
 80116e2:	4630      	mov	r0, r6
 80116e4:	f000 f888 	bl	80117f8 <_printf_i>
 80116e8:	e7ec      	b.n	80116c4 <_vfiprintf_r+0x1e4>
 80116ea:	bf00      	nop
 80116ec:	08012084 	.word	0x08012084
 80116f0:	080120c4 	.word	0x080120c4
 80116f4:	080120a4 	.word	0x080120a4
 80116f8:	08012064 	.word	0x08012064
 80116fc:	080120ca 	.word	0x080120ca
 8011700:	080120ce 	.word	0x080120ce
 8011704:	00000000 	.word	0x00000000
 8011708:	080114bb 	.word	0x080114bb

0801170c <_printf_common>:
 801170c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011710:	4691      	mov	r9, r2
 8011712:	461f      	mov	r7, r3
 8011714:	688a      	ldr	r2, [r1, #8]
 8011716:	690b      	ldr	r3, [r1, #16]
 8011718:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801171c:	4293      	cmp	r3, r2
 801171e:	bfb8      	it	lt
 8011720:	4613      	movlt	r3, r2
 8011722:	f8c9 3000 	str.w	r3, [r9]
 8011726:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801172a:	4606      	mov	r6, r0
 801172c:	460c      	mov	r4, r1
 801172e:	b112      	cbz	r2, 8011736 <_printf_common+0x2a>
 8011730:	3301      	adds	r3, #1
 8011732:	f8c9 3000 	str.w	r3, [r9]
 8011736:	6823      	ldr	r3, [r4, #0]
 8011738:	0699      	lsls	r1, r3, #26
 801173a:	bf42      	ittt	mi
 801173c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011740:	3302      	addmi	r3, #2
 8011742:	f8c9 3000 	strmi.w	r3, [r9]
 8011746:	6825      	ldr	r5, [r4, #0]
 8011748:	f015 0506 	ands.w	r5, r5, #6
 801174c:	d107      	bne.n	801175e <_printf_common+0x52>
 801174e:	f104 0a19 	add.w	sl, r4, #25
 8011752:	68e3      	ldr	r3, [r4, #12]
 8011754:	f8d9 2000 	ldr.w	r2, [r9]
 8011758:	1a9b      	subs	r3, r3, r2
 801175a:	42ab      	cmp	r3, r5
 801175c:	dc28      	bgt.n	80117b0 <_printf_common+0xa4>
 801175e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8011762:	6822      	ldr	r2, [r4, #0]
 8011764:	3300      	adds	r3, #0
 8011766:	bf18      	it	ne
 8011768:	2301      	movne	r3, #1
 801176a:	0692      	lsls	r2, r2, #26
 801176c:	d42d      	bmi.n	80117ca <_printf_common+0xbe>
 801176e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011772:	4639      	mov	r1, r7
 8011774:	4630      	mov	r0, r6
 8011776:	47c0      	blx	r8
 8011778:	3001      	adds	r0, #1
 801177a:	d020      	beq.n	80117be <_printf_common+0xb2>
 801177c:	6823      	ldr	r3, [r4, #0]
 801177e:	68e5      	ldr	r5, [r4, #12]
 8011780:	f8d9 2000 	ldr.w	r2, [r9]
 8011784:	f003 0306 	and.w	r3, r3, #6
 8011788:	2b04      	cmp	r3, #4
 801178a:	bf08      	it	eq
 801178c:	1aad      	subeq	r5, r5, r2
 801178e:	68a3      	ldr	r3, [r4, #8]
 8011790:	6922      	ldr	r2, [r4, #16]
 8011792:	bf0c      	ite	eq
 8011794:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011798:	2500      	movne	r5, #0
 801179a:	4293      	cmp	r3, r2
 801179c:	bfc4      	itt	gt
 801179e:	1a9b      	subgt	r3, r3, r2
 80117a0:	18ed      	addgt	r5, r5, r3
 80117a2:	f04f 0900 	mov.w	r9, #0
 80117a6:	341a      	adds	r4, #26
 80117a8:	454d      	cmp	r5, r9
 80117aa:	d11a      	bne.n	80117e2 <_printf_common+0xd6>
 80117ac:	2000      	movs	r0, #0
 80117ae:	e008      	b.n	80117c2 <_printf_common+0xb6>
 80117b0:	2301      	movs	r3, #1
 80117b2:	4652      	mov	r2, sl
 80117b4:	4639      	mov	r1, r7
 80117b6:	4630      	mov	r0, r6
 80117b8:	47c0      	blx	r8
 80117ba:	3001      	adds	r0, #1
 80117bc:	d103      	bne.n	80117c6 <_printf_common+0xba>
 80117be:	f04f 30ff 	mov.w	r0, #4294967295
 80117c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117c6:	3501      	adds	r5, #1
 80117c8:	e7c3      	b.n	8011752 <_printf_common+0x46>
 80117ca:	18e1      	adds	r1, r4, r3
 80117cc:	1c5a      	adds	r2, r3, #1
 80117ce:	2030      	movs	r0, #48	; 0x30
 80117d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80117d4:	4422      	add	r2, r4
 80117d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80117da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80117de:	3302      	adds	r3, #2
 80117e0:	e7c5      	b.n	801176e <_printf_common+0x62>
 80117e2:	2301      	movs	r3, #1
 80117e4:	4622      	mov	r2, r4
 80117e6:	4639      	mov	r1, r7
 80117e8:	4630      	mov	r0, r6
 80117ea:	47c0      	blx	r8
 80117ec:	3001      	adds	r0, #1
 80117ee:	d0e6      	beq.n	80117be <_printf_common+0xb2>
 80117f0:	f109 0901 	add.w	r9, r9, #1
 80117f4:	e7d8      	b.n	80117a8 <_printf_common+0x9c>
	...

080117f8 <_printf_i>:
 80117f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80117fc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8011800:	460c      	mov	r4, r1
 8011802:	7e09      	ldrb	r1, [r1, #24]
 8011804:	b085      	sub	sp, #20
 8011806:	296e      	cmp	r1, #110	; 0x6e
 8011808:	4617      	mov	r7, r2
 801180a:	4606      	mov	r6, r0
 801180c:	4698      	mov	r8, r3
 801180e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011810:	f000 80b3 	beq.w	801197a <_printf_i+0x182>
 8011814:	d822      	bhi.n	801185c <_printf_i+0x64>
 8011816:	2963      	cmp	r1, #99	; 0x63
 8011818:	d036      	beq.n	8011888 <_printf_i+0x90>
 801181a:	d80a      	bhi.n	8011832 <_printf_i+0x3a>
 801181c:	2900      	cmp	r1, #0
 801181e:	f000 80b9 	beq.w	8011994 <_printf_i+0x19c>
 8011822:	2958      	cmp	r1, #88	; 0x58
 8011824:	f000 8083 	beq.w	801192e <_printf_i+0x136>
 8011828:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801182c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011830:	e032      	b.n	8011898 <_printf_i+0xa0>
 8011832:	2964      	cmp	r1, #100	; 0x64
 8011834:	d001      	beq.n	801183a <_printf_i+0x42>
 8011836:	2969      	cmp	r1, #105	; 0x69
 8011838:	d1f6      	bne.n	8011828 <_printf_i+0x30>
 801183a:	6820      	ldr	r0, [r4, #0]
 801183c:	6813      	ldr	r3, [r2, #0]
 801183e:	0605      	lsls	r5, r0, #24
 8011840:	f103 0104 	add.w	r1, r3, #4
 8011844:	d52a      	bpl.n	801189c <_printf_i+0xa4>
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	6011      	str	r1, [r2, #0]
 801184a:	2b00      	cmp	r3, #0
 801184c:	da03      	bge.n	8011856 <_printf_i+0x5e>
 801184e:	222d      	movs	r2, #45	; 0x2d
 8011850:	425b      	negs	r3, r3
 8011852:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8011856:	486f      	ldr	r0, [pc, #444]	; (8011a14 <_printf_i+0x21c>)
 8011858:	220a      	movs	r2, #10
 801185a:	e039      	b.n	80118d0 <_printf_i+0xd8>
 801185c:	2973      	cmp	r1, #115	; 0x73
 801185e:	f000 809d 	beq.w	801199c <_printf_i+0x1a4>
 8011862:	d808      	bhi.n	8011876 <_printf_i+0x7e>
 8011864:	296f      	cmp	r1, #111	; 0x6f
 8011866:	d020      	beq.n	80118aa <_printf_i+0xb2>
 8011868:	2970      	cmp	r1, #112	; 0x70
 801186a:	d1dd      	bne.n	8011828 <_printf_i+0x30>
 801186c:	6823      	ldr	r3, [r4, #0]
 801186e:	f043 0320 	orr.w	r3, r3, #32
 8011872:	6023      	str	r3, [r4, #0]
 8011874:	e003      	b.n	801187e <_printf_i+0x86>
 8011876:	2975      	cmp	r1, #117	; 0x75
 8011878:	d017      	beq.n	80118aa <_printf_i+0xb2>
 801187a:	2978      	cmp	r1, #120	; 0x78
 801187c:	d1d4      	bne.n	8011828 <_printf_i+0x30>
 801187e:	2378      	movs	r3, #120	; 0x78
 8011880:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011884:	4864      	ldr	r0, [pc, #400]	; (8011a18 <_printf_i+0x220>)
 8011886:	e055      	b.n	8011934 <_printf_i+0x13c>
 8011888:	6813      	ldr	r3, [r2, #0]
 801188a:	1d19      	adds	r1, r3, #4
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	6011      	str	r1, [r2, #0]
 8011890:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011894:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011898:	2301      	movs	r3, #1
 801189a:	e08c      	b.n	80119b6 <_printf_i+0x1be>
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	6011      	str	r1, [r2, #0]
 80118a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80118a4:	bf18      	it	ne
 80118a6:	b21b      	sxthne	r3, r3
 80118a8:	e7cf      	b.n	801184a <_printf_i+0x52>
 80118aa:	6813      	ldr	r3, [r2, #0]
 80118ac:	6825      	ldr	r5, [r4, #0]
 80118ae:	1d18      	adds	r0, r3, #4
 80118b0:	6010      	str	r0, [r2, #0]
 80118b2:	0628      	lsls	r0, r5, #24
 80118b4:	d501      	bpl.n	80118ba <_printf_i+0xc2>
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	e002      	b.n	80118c0 <_printf_i+0xc8>
 80118ba:	0668      	lsls	r0, r5, #25
 80118bc:	d5fb      	bpl.n	80118b6 <_printf_i+0xbe>
 80118be:	881b      	ldrh	r3, [r3, #0]
 80118c0:	4854      	ldr	r0, [pc, #336]	; (8011a14 <_printf_i+0x21c>)
 80118c2:	296f      	cmp	r1, #111	; 0x6f
 80118c4:	bf14      	ite	ne
 80118c6:	220a      	movne	r2, #10
 80118c8:	2208      	moveq	r2, #8
 80118ca:	2100      	movs	r1, #0
 80118cc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80118d0:	6865      	ldr	r5, [r4, #4]
 80118d2:	60a5      	str	r5, [r4, #8]
 80118d4:	2d00      	cmp	r5, #0
 80118d6:	f2c0 8095 	blt.w	8011a04 <_printf_i+0x20c>
 80118da:	6821      	ldr	r1, [r4, #0]
 80118dc:	f021 0104 	bic.w	r1, r1, #4
 80118e0:	6021      	str	r1, [r4, #0]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d13d      	bne.n	8011962 <_printf_i+0x16a>
 80118e6:	2d00      	cmp	r5, #0
 80118e8:	f040 808e 	bne.w	8011a08 <_printf_i+0x210>
 80118ec:	4665      	mov	r5, ip
 80118ee:	2a08      	cmp	r2, #8
 80118f0:	d10b      	bne.n	801190a <_printf_i+0x112>
 80118f2:	6823      	ldr	r3, [r4, #0]
 80118f4:	07db      	lsls	r3, r3, #31
 80118f6:	d508      	bpl.n	801190a <_printf_i+0x112>
 80118f8:	6923      	ldr	r3, [r4, #16]
 80118fa:	6862      	ldr	r2, [r4, #4]
 80118fc:	429a      	cmp	r2, r3
 80118fe:	bfde      	ittt	le
 8011900:	2330      	movle	r3, #48	; 0x30
 8011902:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011906:	f105 35ff 	addle.w	r5, r5, #4294967295
 801190a:	ebac 0305 	sub.w	r3, ip, r5
 801190e:	6123      	str	r3, [r4, #16]
 8011910:	f8cd 8000 	str.w	r8, [sp]
 8011914:	463b      	mov	r3, r7
 8011916:	aa03      	add	r2, sp, #12
 8011918:	4621      	mov	r1, r4
 801191a:	4630      	mov	r0, r6
 801191c:	f7ff fef6 	bl	801170c <_printf_common>
 8011920:	3001      	adds	r0, #1
 8011922:	d14d      	bne.n	80119c0 <_printf_i+0x1c8>
 8011924:	f04f 30ff 	mov.w	r0, #4294967295
 8011928:	b005      	add	sp, #20
 801192a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801192e:	4839      	ldr	r0, [pc, #228]	; (8011a14 <_printf_i+0x21c>)
 8011930:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8011934:	6813      	ldr	r3, [r2, #0]
 8011936:	6821      	ldr	r1, [r4, #0]
 8011938:	1d1d      	adds	r5, r3, #4
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	6015      	str	r5, [r2, #0]
 801193e:	060a      	lsls	r2, r1, #24
 8011940:	d50b      	bpl.n	801195a <_printf_i+0x162>
 8011942:	07ca      	lsls	r2, r1, #31
 8011944:	bf44      	itt	mi
 8011946:	f041 0120 	orrmi.w	r1, r1, #32
 801194a:	6021      	strmi	r1, [r4, #0]
 801194c:	b91b      	cbnz	r3, 8011956 <_printf_i+0x15e>
 801194e:	6822      	ldr	r2, [r4, #0]
 8011950:	f022 0220 	bic.w	r2, r2, #32
 8011954:	6022      	str	r2, [r4, #0]
 8011956:	2210      	movs	r2, #16
 8011958:	e7b7      	b.n	80118ca <_printf_i+0xd2>
 801195a:	064d      	lsls	r5, r1, #25
 801195c:	bf48      	it	mi
 801195e:	b29b      	uxthmi	r3, r3
 8011960:	e7ef      	b.n	8011942 <_printf_i+0x14a>
 8011962:	4665      	mov	r5, ip
 8011964:	fbb3 f1f2 	udiv	r1, r3, r2
 8011968:	fb02 3311 	mls	r3, r2, r1, r3
 801196c:	5cc3      	ldrb	r3, [r0, r3]
 801196e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8011972:	460b      	mov	r3, r1
 8011974:	2900      	cmp	r1, #0
 8011976:	d1f5      	bne.n	8011964 <_printf_i+0x16c>
 8011978:	e7b9      	b.n	80118ee <_printf_i+0xf6>
 801197a:	6813      	ldr	r3, [r2, #0]
 801197c:	6825      	ldr	r5, [r4, #0]
 801197e:	6961      	ldr	r1, [r4, #20]
 8011980:	1d18      	adds	r0, r3, #4
 8011982:	6010      	str	r0, [r2, #0]
 8011984:	0628      	lsls	r0, r5, #24
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	d501      	bpl.n	801198e <_printf_i+0x196>
 801198a:	6019      	str	r1, [r3, #0]
 801198c:	e002      	b.n	8011994 <_printf_i+0x19c>
 801198e:	066a      	lsls	r2, r5, #25
 8011990:	d5fb      	bpl.n	801198a <_printf_i+0x192>
 8011992:	8019      	strh	r1, [r3, #0]
 8011994:	2300      	movs	r3, #0
 8011996:	6123      	str	r3, [r4, #16]
 8011998:	4665      	mov	r5, ip
 801199a:	e7b9      	b.n	8011910 <_printf_i+0x118>
 801199c:	6813      	ldr	r3, [r2, #0]
 801199e:	1d19      	adds	r1, r3, #4
 80119a0:	6011      	str	r1, [r2, #0]
 80119a2:	681d      	ldr	r5, [r3, #0]
 80119a4:	6862      	ldr	r2, [r4, #4]
 80119a6:	2100      	movs	r1, #0
 80119a8:	4628      	mov	r0, r5
 80119aa:	f7ee fc99 	bl	80002e0 <memchr>
 80119ae:	b108      	cbz	r0, 80119b4 <_printf_i+0x1bc>
 80119b0:	1b40      	subs	r0, r0, r5
 80119b2:	6060      	str	r0, [r4, #4]
 80119b4:	6863      	ldr	r3, [r4, #4]
 80119b6:	6123      	str	r3, [r4, #16]
 80119b8:	2300      	movs	r3, #0
 80119ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80119be:	e7a7      	b.n	8011910 <_printf_i+0x118>
 80119c0:	6923      	ldr	r3, [r4, #16]
 80119c2:	462a      	mov	r2, r5
 80119c4:	4639      	mov	r1, r7
 80119c6:	4630      	mov	r0, r6
 80119c8:	47c0      	blx	r8
 80119ca:	3001      	adds	r0, #1
 80119cc:	d0aa      	beq.n	8011924 <_printf_i+0x12c>
 80119ce:	6823      	ldr	r3, [r4, #0]
 80119d0:	079b      	lsls	r3, r3, #30
 80119d2:	d413      	bmi.n	80119fc <_printf_i+0x204>
 80119d4:	68e0      	ldr	r0, [r4, #12]
 80119d6:	9b03      	ldr	r3, [sp, #12]
 80119d8:	4298      	cmp	r0, r3
 80119da:	bfb8      	it	lt
 80119dc:	4618      	movlt	r0, r3
 80119de:	e7a3      	b.n	8011928 <_printf_i+0x130>
 80119e0:	2301      	movs	r3, #1
 80119e2:	464a      	mov	r2, r9
 80119e4:	4639      	mov	r1, r7
 80119e6:	4630      	mov	r0, r6
 80119e8:	47c0      	blx	r8
 80119ea:	3001      	adds	r0, #1
 80119ec:	d09a      	beq.n	8011924 <_printf_i+0x12c>
 80119ee:	3501      	adds	r5, #1
 80119f0:	68e3      	ldr	r3, [r4, #12]
 80119f2:	9a03      	ldr	r2, [sp, #12]
 80119f4:	1a9b      	subs	r3, r3, r2
 80119f6:	42ab      	cmp	r3, r5
 80119f8:	dcf2      	bgt.n	80119e0 <_printf_i+0x1e8>
 80119fa:	e7eb      	b.n	80119d4 <_printf_i+0x1dc>
 80119fc:	2500      	movs	r5, #0
 80119fe:	f104 0919 	add.w	r9, r4, #25
 8011a02:	e7f5      	b.n	80119f0 <_printf_i+0x1f8>
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d1ac      	bne.n	8011962 <_printf_i+0x16a>
 8011a08:	7803      	ldrb	r3, [r0, #0]
 8011a0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011a0e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011a12:	e76c      	b.n	80118ee <_printf_i+0xf6>
 8011a14:	080120d5 	.word	0x080120d5
 8011a18:	080120e6 	.word	0x080120e6

08011a1c <__sread>:
 8011a1c:	b510      	push	{r4, lr}
 8011a1e:	460c      	mov	r4, r1
 8011a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a24:	f000 fa46 	bl	8011eb4 <_read_r>
 8011a28:	2800      	cmp	r0, #0
 8011a2a:	bfab      	itete	ge
 8011a2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011a2e:	89a3      	ldrhlt	r3, [r4, #12]
 8011a30:	181b      	addge	r3, r3, r0
 8011a32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011a36:	bfac      	ite	ge
 8011a38:	6563      	strge	r3, [r4, #84]	; 0x54
 8011a3a:	81a3      	strhlt	r3, [r4, #12]
 8011a3c:	bd10      	pop	{r4, pc}

08011a3e <__swrite>:
 8011a3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a42:	461f      	mov	r7, r3
 8011a44:	898b      	ldrh	r3, [r1, #12]
 8011a46:	05db      	lsls	r3, r3, #23
 8011a48:	4605      	mov	r5, r0
 8011a4a:	460c      	mov	r4, r1
 8011a4c:	4616      	mov	r6, r2
 8011a4e:	d505      	bpl.n	8011a5c <__swrite+0x1e>
 8011a50:	2302      	movs	r3, #2
 8011a52:	2200      	movs	r2, #0
 8011a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a58:	f000 f9b6 	bl	8011dc8 <_lseek_r>
 8011a5c:	89a3      	ldrh	r3, [r4, #12]
 8011a5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011a62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011a66:	81a3      	strh	r3, [r4, #12]
 8011a68:	4632      	mov	r2, r6
 8011a6a:	463b      	mov	r3, r7
 8011a6c:	4628      	mov	r0, r5
 8011a6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a72:	f000 b869 	b.w	8011b48 <_write_r>

08011a76 <__sseek>:
 8011a76:	b510      	push	{r4, lr}
 8011a78:	460c      	mov	r4, r1
 8011a7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a7e:	f000 f9a3 	bl	8011dc8 <_lseek_r>
 8011a82:	1c43      	adds	r3, r0, #1
 8011a84:	89a3      	ldrh	r3, [r4, #12]
 8011a86:	bf15      	itete	ne
 8011a88:	6560      	strne	r0, [r4, #84]	; 0x54
 8011a8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011a8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011a92:	81a3      	strheq	r3, [r4, #12]
 8011a94:	bf18      	it	ne
 8011a96:	81a3      	strhne	r3, [r4, #12]
 8011a98:	bd10      	pop	{r4, pc}

08011a9a <__sclose>:
 8011a9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a9e:	f000 b8d3 	b.w	8011c48 <_close_r>
	...

08011aa4 <__swbuf_r>:
 8011aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011aa6:	460e      	mov	r6, r1
 8011aa8:	4614      	mov	r4, r2
 8011aaa:	4605      	mov	r5, r0
 8011aac:	b118      	cbz	r0, 8011ab6 <__swbuf_r+0x12>
 8011aae:	6983      	ldr	r3, [r0, #24]
 8011ab0:	b90b      	cbnz	r3, 8011ab6 <__swbuf_r+0x12>
 8011ab2:	f7ff fc5f 	bl	8011374 <__sinit>
 8011ab6:	4b21      	ldr	r3, [pc, #132]	; (8011b3c <__swbuf_r+0x98>)
 8011ab8:	429c      	cmp	r4, r3
 8011aba:	d12a      	bne.n	8011b12 <__swbuf_r+0x6e>
 8011abc:	686c      	ldr	r4, [r5, #4]
 8011abe:	69a3      	ldr	r3, [r4, #24]
 8011ac0:	60a3      	str	r3, [r4, #8]
 8011ac2:	89a3      	ldrh	r3, [r4, #12]
 8011ac4:	071a      	lsls	r2, r3, #28
 8011ac6:	d52e      	bpl.n	8011b26 <__swbuf_r+0x82>
 8011ac8:	6923      	ldr	r3, [r4, #16]
 8011aca:	b363      	cbz	r3, 8011b26 <__swbuf_r+0x82>
 8011acc:	6923      	ldr	r3, [r4, #16]
 8011ace:	6820      	ldr	r0, [r4, #0]
 8011ad0:	1ac0      	subs	r0, r0, r3
 8011ad2:	6963      	ldr	r3, [r4, #20]
 8011ad4:	b2f6      	uxtb	r6, r6
 8011ad6:	4283      	cmp	r3, r0
 8011ad8:	4637      	mov	r7, r6
 8011ada:	dc04      	bgt.n	8011ae6 <__swbuf_r+0x42>
 8011adc:	4621      	mov	r1, r4
 8011ade:	4628      	mov	r0, r5
 8011ae0:	f000 f948 	bl	8011d74 <_fflush_r>
 8011ae4:	bb28      	cbnz	r0, 8011b32 <__swbuf_r+0x8e>
 8011ae6:	68a3      	ldr	r3, [r4, #8]
 8011ae8:	3b01      	subs	r3, #1
 8011aea:	60a3      	str	r3, [r4, #8]
 8011aec:	6823      	ldr	r3, [r4, #0]
 8011aee:	1c5a      	adds	r2, r3, #1
 8011af0:	6022      	str	r2, [r4, #0]
 8011af2:	701e      	strb	r6, [r3, #0]
 8011af4:	6963      	ldr	r3, [r4, #20]
 8011af6:	3001      	adds	r0, #1
 8011af8:	4283      	cmp	r3, r0
 8011afa:	d004      	beq.n	8011b06 <__swbuf_r+0x62>
 8011afc:	89a3      	ldrh	r3, [r4, #12]
 8011afe:	07db      	lsls	r3, r3, #31
 8011b00:	d519      	bpl.n	8011b36 <__swbuf_r+0x92>
 8011b02:	2e0a      	cmp	r6, #10
 8011b04:	d117      	bne.n	8011b36 <__swbuf_r+0x92>
 8011b06:	4621      	mov	r1, r4
 8011b08:	4628      	mov	r0, r5
 8011b0a:	f000 f933 	bl	8011d74 <_fflush_r>
 8011b0e:	b190      	cbz	r0, 8011b36 <__swbuf_r+0x92>
 8011b10:	e00f      	b.n	8011b32 <__swbuf_r+0x8e>
 8011b12:	4b0b      	ldr	r3, [pc, #44]	; (8011b40 <__swbuf_r+0x9c>)
 8011b14:	429c      	cmp	r4, r3
 8011b16:	d101      	bne.n	8011b1c <__swbuf_r+0x78>
 8011b18:	68ac      	ldr	r4, [r5, #8]
 8011b1a:	e7d0      	b.n	8011abe <__swbuf_r+0x1a>
 8011b1c:	4b09      	ldr	r3, [pc, #36]	; (8011b44 <__swbuf_r+0xa0>)
 8011b1e:	429c      	cmp	r4, r3
 8011b20:	bf08      	it	eq
 8011b22:	68ec      	ldreq	r4, [r5, #12]
 8011b24:	e7cb      	b.n	8011abe <__swbuf_r+0x1a>
 8011b26:	4621      	mov	r1, r4
 8011b28:	4628      	mov	r0, r5
 8011b2a:	f000 f81f 	bl	8011b6c <__swsetup_r>
 8011b2e:	2800      	cmp	r0, #0
 8011b30:	d0cc      	beq.n	8011acc <__swbuf_r+0x28>
 8011b32:	f04f 37ff 	mov.w	r7, #4294967295
 8011b36:	4638      	mov	r0, r7
 8011b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b3a:	bf00      	nop
 8011b3c:	08012084 	.word	0x08012084
 8011b40:	080120a4 	.word	0x080120a4
 8011b44:	08012064 	.word	0x08012064

08011b48 <_write_r>:
 8011b48:	b538      	push	{r3, r4, r5, lr}
 8011b4a:	4c07      	ldr	r4, [pc, #28]	; (8011b68 <_write_r+0x20>)
 8011b4c:	4605      	mov	r5, r0
 8011b4e:	4608      	mov	r0, r1
 8011b50:	4611      	mov	r1, r2
 8011b52:	2200      	movs	r2, #0
 8011b54:	6022      	str	r2, [r4, #0]
 8011b56:	461a      	mov	r2, r3
 8011b58:	f7ef fc73 	bl	8001442 <_write>
 8011b5c:	1c43      	adds	r3, r0, #1
 8011b5e:	d102      	bne.n	8011b66 <_write_r+0x1e>
 8011b60:	6823      	ldr	r3, [r4, #0]
 8011b62:	b103      	cbz	r3, 8011b66 <_write_r+0x1e>
 8011b64:	602b      	str	r3, [r5, #0]
 8011b66:	bd38      	pop	{r3, r4, r5, pc}
 8011b68:	2400138c 	.word	0x2400138c

08011b6c <__swsetup_r>:
 8011b6c:	4b32      	ldr	r3, [pc, #200]	; (8011c38 <__swsetup_r+0xcc>)
 8011b6e:	b570      	push	{r4, r5, r6, lr}
 8011b70:	681d      	ldr	r5, [r3, #0]
 8011b72:	4606      	mov	r6, r0
 8011b74:	460c      	mov	r4, r1
 8011b76:	b125      	cbz	r5, 8011b82 <__swsetup_r+0x16>
 8011b78:	69ab      	ldr	r3, [r5, #24]
 8011b7a:	b913      	cbnz	r3, 8011b82 <__swsetup_r+0x16>
 8011b7c:	4628      	mov	r0, r5
 8011b7e:	f7ff fbf9 	bl	8011374 <__sinit>
 8011b82:	4b2e      	ldr	r3, [pc, #184]	; (8011c3c <__swsetup_r+0xd0>)
 8011b84:	429c      	cmp	r4, r3
 8011b86:	d10f      	bne.n	8011ba8 <__swsetup_r+0x3c>
 8011b88:	686c      	ldr	r4, [r5, #4]
 8011b8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b8e:	b29a      	uxth	r2, r3
 8011b90:	0715      	lsls	r5, r2, #28
 8011b92:	d42c      	bmi.n	8011bee <__swsetup_r+0x82>
 8011b94:	06d0      	lsls	r0, r2, #27
 8011b96:	d411      	bmi.n	8011bbc <__swsetup_r+0x50>
 8011b98:	2209      	movs	r2, #9
 8011b9a:	6032      	str	r2, [r6, #0]
 8011b9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ba0:	81a3      	strh	r3, [r4, #12]
 8011ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8011ba6:	e03e      	b.n	8011c26 <__swsetup_r+0xba>
 8011ba8:	4b25      	ldr	r3, [pc, #148]	; (8011c40 <__swsetup_r+0xd4>)
 8011baa:	429c      	cmp	r4, r3
 8011bac:	d101      	bne.n	8011bb2 <__swsetup_r+0x46>
 8011bae:	68ac      	ldr	r4, [r5, #8]
 8011bb0:	e7eb      	b.n	8011b8a <__swsetup_r+0x1e>
 8011bb2:	4b24      	ldr	r3, [pc, #144]	; (8011c44 <__swsetup_r+0xd8>)
 8011bb4:	429c      	cmp	r4, r3
 8011bb6:	bf08      	it	eq
 8011bb8:	68ec      	ldreq	r4, [r5, #12]
 8011bba:	e7e6      	b.n	8011b8a <__swsetup_r+0x1e>
 8011bbc:	0751      	lsls	r1, r2, #29
 8011bbe:	d512      	bpl.n	8011be6 <__swsetup_r+0x7a>
 8011bc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011bc2:	b141      	cbz	r1, 8011bd6 <__swsetup_r+0x6a>
 8011bc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011bc8:	4299      	cmp	r1, r3
 8011bca:	d002      	beq.n	8011bd2 <__swsetup_r+0x66>
 8011bcc:	4630      	mov	r0, r6
 8011bce:	f7ff fac1 	bl	8011154 <_free_r>
 8011bd2:	2300      	movs	r3, #0
 8011bd4:	6363      	str	r3, [r4, #52]	; 0x34
 8011bd6:	89a3      	ldrh	r3, [r4, #12]
 8011bd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011bdc:	81a3      	strh	r3, [r4, #12]
 8011bde:	2300      	movs	r3, #0
 8011be0:	6063      	str	r3, [r4, #4]
 8011be2:	6923      	ldr	r3, [r4, #16]
 8011be4:	6023      	str	r3, [r4, #0]
 8011be6:	89a3      	ldrh	r3, [r4, #12]
 8011be8:	f043 0308 	orr.w	r3, r3, #8
 8011bec:	81a3      	strh	r3, [r4, #12]
 8011bee:	6923      	ldr	r3, [r4, #16]
 8011bf0:	b94b      	cbnz	r3, 8011c06 <__swsetup_r+0x9a>
 8011bf2:	89a3      	ldrh	r3, [r4, #12]
 8011bf4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011bf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011bfc:	d003      	beq.n	8011c06 <__swsetup_r+0x9a>
 8011bfe:	4621      	mov	r1, r4
 8011c00:	4630      	mov	r0, r6
 8011c02:	f000 f917 	bl	8011e34 <__smakebuf_r>
 8011c06:	89a2      	ldrh	r2, [r4, #12]
 8011c08:	f012 0301 	ands.w	r3, r2, #1
 8011c0c:	d00c      	beq.n	8011c28 <__swsetup_r+0xbc>
 8011c0e:	2300      	movs	r3, #0
 8011c10:	60a3      	str	r3, [r4, #8]
 8011c12:	6963      	ldr	r3, [r4, #20]
 8011c14:	425b      	negs	r3, r3
 8011c16:	61a3      	str	r3, [r4, #24]
 8011c18:	6923      	ldr	r3, [r4, #16]
 8011c1a:	b953      	cbnz	r3, 8011c32 <__swsetup_r+0xc6>
 8011c1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c20:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8011c24:	d1ba      	bne.n	8011b9c <__swsetup_r+0x30>
 8011c26:	bd70      	pop	{r4, r5, r6, pc}
 8011c28:	0792      	lsls	r2, r2, #30
 8011c2a:	bf58      	it	pl
 8011c2c:	6963      	ldrpl	r3, [r4, #20]
 8011c2e:	60a3      	str	r3, [r4, #8]
 8011c30:	e7f2      	b.n	8011c18 <__swsetup_r+0xac>
 8011c32:	2000      	movs	r0, #0
 8011c34:	e7f7      	b.n	8011c26 <__swsetup_r+0xba>
 8011c36:	bf00      	nop
 8011c38:	24000168 	.word	0x24000168
 8011c3c:	08012084 	.word	0x08012084
 8011c40:	080120a4 	.word	0x080120a4
 8011c44:	08012064 	.word	0x08012064

08011c48 <_close_r>:
 8011c48:	b538      	push	{r3, r4, r5, lr}
 8011c4a:	4c06      	ldr	r4, [pc, #24]	; (8011c64 <_close_r+0x1c>)
 8011c4c:	2300      	movs	r3, #0
 8011c4e:	4605      	mov	r5, r0
 8011c50:	4608      	mov	r0, r1
 8011c52:	6023      	str	r3, [r4, #0]
 8011c54:	f7ef fc11 	bl	800147a <_close>
 8011c58:	1c43      	adds	r3, r0, #1
 8011c5a:	d102      	bne.n	8011c62 <_close_r+0x1a>
 8011c5c:	6823      	ldr	r3, [r4, #0]
 8011c5e:	b103      	cbz	r3, 8011c62 <_close_r+0x1a>
 8011c60:	602b      	str	r3, [r5, #0]
 8011c62:	bd38      	pop	{r3, r4, r5, pc}
 8011c64:	2400138c 	.word	0x2400138c

08011c68 <__sflush_r>:
 8011c68:	898a      	ldrh	r2, [r1, #12]
 8011c6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c6e:	4605      	mov	r5, r0
 8011c70:	0710      	lsls	r0, r2, #28
 8011c72:	460c      	mov	r4, r1
 8011c74:	d458      	bmi.n	8011d28 <__sflush_r+0xc0>
 8011c76:	684b      	ldr	r3, [r1, #4]
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	dc05      	bgt.n	8011c88 <__sflush_r+0x20>
 8011c7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	dc02      	bgt.n	8011c88 <__sflush_r+0x20>
 8011c82:	2000      	movs	r0, #0
 8011c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011c8a:	2e00      	cmp	r6, #0
 8011c8c:	d0f9      	beq.n	8011c82 <__sflush_r+0x1a>
 8011c8e:	2300      	movs	r3, #0
 8011c90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011c94:	682f      	ldr	r7, [r5, #0]
 8011c96:	6a21      	ldr	r1, [r4, #32]
 8011c98:	602b      	str	r3, [r5, #0]
 8011c9a:	d032      	beq.n	8011d02 <__sflush_r+0x9a>
 8011c9c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011c9e:	89a3      	ldrh	r3, [r4, #12]
 8011ca0:	075a      	lsls	r2, r3, #29
 8011ca2:	d505      	bpl.n	8011cb0 <__sflush_r+0x48>
 8011ca4:	6863      	ldr	r3, [r4, #4]
 8011ca6:	1ac0      	subs	r0, r0, r3
 8011ca8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011caa:	b10b      	cbz	r3, 8011cb0 <__sflush_r+0x48>
 8011cac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011cae:	1ac0      	subs	r0, r0, r3
 8011cb0:	2300      	movs	r3, #0
 8011cb2:	4602      	mov	r2, r0
 8011cb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011cb6:	6a21      	ldr	r1, [r4, #32]
 8011cb8:	4628      	mov	r0, r5
 8011cba:	47b0      	blx	r6
 8011cbc:	1c43      	adds	r3, r0, #1
 8011cbe:	89a3      	ldrh	r3, [r4, #12]
 8011cc0:	d106      	bne.n	8011cd0 <__sflush_r+0x68>
 8011cc2:	6829      	ldr	r1, [r5, #0]
 8011cc4:	291d      	cmp	r1, #29
 8011cc6:	d848      	bhi.n	8011d5a <__sflush_r+0xf2>
 8011cc8:	4a29      	ldr	r2, [pc, #164]	; (8011d70 <__sflush_r+0x108>)
 8011cca:	40ca      	lsrs	r2, r1
 8011ccc:	07d6      	lsls	r6, r2, #31
 8011cce:	d544      	bpl.n	8011d5a <__sflush_r+0xf2>
 8011cd0:	2200      	movs	r2, #0
 8011cd2:	6062      	str	r2, [r4, #4]
 8011cd4:	04d9      	lsls	r1, r3, #19
 8011cd6:	6922      	ldr	r2, [r4, #16]
 8011cd8:	6022      	str	r2, [r4, #0]
 8011cda:	d504      	bpl.n	8011ce6 <__sflush_r+0x7e>
 8011cdc:	1c42      	adds	r2, r0, #1
 8011cde:	d101      	bne.n	8011ce4 <__sflush_r+0x7c>
 8011ce0:	682b      	ldr	r3, [r5, #0]
 8011ce2:	b903      	cbnz	r3, 8011ce6 <__sflush_r+0x7e>
 8011ce4:	6560      	str	r0, [r4, #84]	; 0x54
 8011ce6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011ce8:	602f      	str	r7, [r5, #0]
 8011cea:	2900      	cmp	r1, #0
 8011cec:	d0c9      	beq.n	8011c82 <__sflush_r+0x1a>
 8011cee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011cf2:	4299      	cmp	r1, r3
 8011cf4:	d002      	beq.n	8011cfc <__sflush_r+0x94>
 8011cf6:	4628      	mov	r0, r5
 8011cf8:	f7ff fa2c 	bl	8011154 <_free_r>
 8011cfc:	2000      	movs	r0, #0
 8011cfe:	6360      	str	r0, [r4, #52]	; 0x34
 8011d00:	e7c0      	b.n	8011c84 <__sflush_r+0x1c>
 8011d02:	2301      	movs	r3, #1
 8011d04:	4628      	mov	r0, r5
 8011d06:	47b0      	blx	r6
 8011d08:	1c41      	adds	r1, r0, #1
 8011d0a:	d1c8      	bne.n	8011c9e <__sflush_r+0x36>
 8011d0c:	682b      	ldr	r3, [r5, #0]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d0c5      	beq.n	8011c9e <__sflush_r+0x36>
 8011d12:	2b1d      	cmp	r3, #29
 8011d14:	d001      	beq.n	8011d1a <__sflush_r+0xb2>
 8011d16:	2b16      	cmp	r3, #22
 8011d18:	d101      	bne.n	8011d1e <__sflush_r+0xb6>
 8011d1a:	602f      	str	r7, [r5, #0]
 8011d1c:	e7b1      	b.n	8011c82 <__sflush_r+0x1a>
 8011d1e:	89a3      	ldrh	r3, [r4, #12]
 8011d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d24:	81a3      	strh	r3, [r4, #12]
 8011d26:	e7ad      	b.n	8011c84 <__sflush_r+0x1c>
 8011d28:	690f      	ldr	r7, [r1, #16]
 8011d2a:	2f00      	cmp	r7, #0
 8011d2c:	d0a9      	beq.n	8011c82 <__sflush_r+0x1a>
 8011d2e:	0793      	lsls	r3, r2, #30
 8011d30:	680e      	ldr	r6, [r1, #0]
 8011d32:	bf08      	it	eq
 8011d34:	694b      	ldreq	r3, [r1, #20]
 8011d36:	600f      	str	r7, [r1, #0]
 8011d38:	bf18      	it	ne
 8011d3a:	2300      	movne	r3, #0
 8011d3c:	eba6 0807 	sub.w	r8, r6, r7
 8011d40:	608b      	str	r3, [r1, #8]
 8011d42:	f1b8 0f00 	cmp.w	r8, #0
 8011d46:	dd9c      	ble.n	8011c82 <__sflush_r+0x1a>
 8011d48:	4643      	mov	r3, r8
 8011d4a:	463a      	mov	r2, r7
 8011d4c:	6a21      	ldr	r1, [r4, #32]
 8011d4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011d50:	4628      	mov	r0, r5
 8011d52:	47b0      	blx	r6
 8011d54:	2800      	cmp	r0, #0
 8011d56:	dc06      	bgt.n	8011d66 <__sflush_r+0xfe>
 8011d58:	89a3      	ldrh	r3, [r4, #12]
 8011d5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d5e:	81a3      	strh	r3, [r4, #12]
 8011d60:	f04f 30ff 	mov.w	r0, #4294967295
 8011d64:	e78e      	b.n	8011c84 <__sflush_r+0x1c>
 8011d66:	4407      	add	r7, r0
 8011d68:	eba8 0800 	sub.w	r8, r8, r0
 8011d6c:	e7e9      	b.n	8011d42 <__sflush_r+0xda>
 8011d6e:	bf00      	nop
 8011d70:	20400001 	.word	0x20400001

08011d74 <_fflush_r>:
 8011d74:	b538      	push	{r3, r4, r5, lr}
 8011d76:	690b      	ldr	r3, [r1, #16]
 8011d78:	4605      	mov	r5, r0
 8011d7a:	460c      	mov	r4, r1
 8011d7c:	b1db      	cbz	r3, 8011db6 <_fflush_r+0x42>
 8011d7e:	b118      	cbz	r0, 8011d88 <_fflush_r+0x14>
 8011d80:	6983      	ldr	r3, [r0, #24]
 8011d82:	b90b      	cbnz	r3, 8011d88 <_fflush_r+0x14>
 8011d84:	f7ff faf6 	bl	8011374 <__sinit>
 8011d88:	4b0c      	ldr	r3, [pc, #48]	; (8011dbc <_fflush_r+0x48>)
 8011d8a:	429c      	cmp	r4, r3
 8011d8c:	d109      	bne.n	8011da2 <_fflush_r+0x2e>
 8011d8e:	686c      	ldr	r4, [r5, #4]
 8011d90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d94:	b17b      	cbz	r3, 8011db6 <_fflush_r+0x42>
 8011d96:	4621      	mov	r1, r4
 8011d98:	4628      	mov	r0, r5
 8011d9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011d9e:	f7ff bf63 	b.w	8011c68 <__sflush_r>
 8011da2:	4b07      	ldr	r3, [pc, #28]	; (8011dc0 <_fflush_r+0x4c>)
 8011da4:	429c      	cmp	r4, r3
 8011da6:	d101      	bne.n	8011dac <_fflush_r+0x38>
 8011da8:	68ac      	ldr	r4, [r5, #8]
 8011daa:	e7f1      	b.n	8011d90 <_fflush_r+0x1c>
 8011dac:	4b05      	ldr	r3, [pc, #20]	; (8011dc4 <_fflush_r+0x50>)
 8011dae:	429c      	cmp	r4, r3
 8011db0:	bf08      	it	eq
 8011db2:	68ec      	ldreq	r4, [r5, #12]
 8011db4:	e7ec      	b.n	8011d90 <_fflush_r+0x1c>
 8011db6:	2000      	movs	r0, #0
 8011db8:	bd38      	pop	{r3, r4, r5, pc}
 8011dba:	bf00      	nop
 8011dbc:	08012084 	.word	0x08012084
 8011dc0:	080120a4 	.word	0x080120a4
 8011dc4:	08012064 	.word	0x08012064

08011dc8 <_lseek_r>:
 8011dc8:	b538      	push	{r3, r4, r5, lr}
 8011dca:	4c07      	ldr	r4, [pc, #28]	; (8011de8 <_lseek_r+0x20>)
 8011dcc:	4605      	mov	r5, r0
 8011dce:	4608      	mov	r0, r1
 8011dd0:	4611      	mov	r1, r2
 8011dd2:	2200      	movs	r2, #0
 8011dd4:	6022      	str	r2, [r4, #0]
 8011dd6:	461a      	mov	r2, r3
 8011dd8:	f7ef fb76 	bl	80014c8 <_lseek>
 8011ddc:	1c43      	adds	r3, r0, #1
 8011dde:	d102      	bne.n	8011de6 <_lseek_r+0x1e>
 8011de0:	6823      	ldr	r3, [r4, #0]
 8011de2:	b103      	cbz	r3, 8011de6 <_lseek_r+0x1e>
 8011de4:	602b      	str	r3, [r5, #0]
 8011de6:	bd38      	pop	{r3, r4, r5, pc}
 8011de8:	2400138c 	.word	0x2400138c

08011dec <__swhatbuf_r>:
 8011dec:	b570      	push	{r4, r5, r6, lr}
 8011dee:	460e      	mov	r6, r1
 8011df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011df4:	2900      	cmp	r1, #0
 8011df6:	b096      	sub	sp, #88	; 0x58
 8011df8:	4614      	mov	r4, r2
 8011dfa:	461d      	mov	r5, r3
 8011dfc:	da07      	bge.n	8011e0e <__swhatbuf_r+0x22>
 8011dfe:	2300      	movs	r3, #0
 8011e00:	602b      	str	r3, [r5, #0]
 8011e02:	89b3      	ldrh	r3, [r6, #12]
 8011e04:	061a      	lsls	r2, r3, #24
 8011e06:	d410      	bmi.n	8011e2a <__swhatbuf_r+0x3e>
 8011e08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011e0c:	e00e      	b.n	8011e2c <__swhatbuf_r+0x40>
 8011e0e:	466a      	mov	r2, sp
 8011e10:	f000 f862 	bl	8011ed8 <_fstat_r>
 8011e14:	2800      	cmp	r0, #0
 8011e16:	dbf2      	blt.n	8011dfe <__swhatbuf_r+0x12>
 8011e18:	9a01      	ldr	r2, [sp, #4]
 8011e1a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011e1e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011e22:	425a      	negs	r2, r3
 8011e24:	415a      	adcs	r2, r3
 8011e26:	602a      	str	r2, [r5, #0]
 8011e28:	e7ee      	b.n	8011e08 <__swhatbuf_r+0x1c>
 8011e2a:	2340      	movs	r3, #64	; 0x40
 8011e2c:	2000      	movs	r0, #0
 8011e2e:	6023      	str	r3, [r4, #0]
 8011e30:	b016      	add	sp, #88	; 0x58
 8011e32:	bd70      	pop	{r4, r5, r6, pc}

08011e34 <__smakebuf_r>:
 8011e34:	898b      	ldrh	r3, [r1, #12]
 8011e36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011e38:	079d      	lsls	r5, r3, #30
 8011e3a:	4606      	mov	r6, r0
 8011e3c:	460c      	mov	r4, r1
 8011e3e:	d507      	bpl.n	8011e50 <__smakebuf_r+0x1c>
 8011e40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011e44:	6023      	str	r3, [r4, #0]
 8011e46:	6123      	str	r3, [r4, #16]
 8011e48:	2301      	movs	r3, #1
 8011e4a:	6163      	str	r3, [r4, #20]
 8011e4c:	b002      	add	sp, #8
 8011e4e:	bd70      	pop	{r4, r5, r6, pc}
 8011e50:	ab01      	add	r3, sp, #4
 8011e52:	466a      	mov	r2, sp
 8011e54:	f7ff ffca 	bl	8011dec <__swhatbuf_r>
 8011e58:	9900      	ldr	r1, [sp, #0]
 8011e5a:	4605      	mov	r5, r0
 8011e5c:	4630      	mov	r0, r6
 8011e5e:	f7ff f9c7 	bl	80111f0 <_malloc_r>
 8011e62:	b948      	cbnz	r0, 8011e78 <__smakebuf_r+0x44>
 8011e64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e68:	059a      	lsls	r2, r3, #22
 8011e6a:	d4ef      	bmi.n	8011e4c <__smakebuf_r+0x18>
 8011e6c:	f023 0303 	bic.w	r3, r3, #3
 8011e70:	f043 0302 	orr.w	r3, r3, #2
 8011e74:	81a3      	strh	r3, [r4, #12]
 8011e76:	e7e3      	b.n	8011e40 <__smakebuf_r+0xc>
 8011e78:	4b0d      	ldr	r3, [pc, #52]	; (8011eb0 <__smakebuf_r+0x7c>)
 8011e7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8011e7c:	89a3      	ldrh	r3, [r4, #12]
 8011e7e:	6020      	str	r0, [r4, #0]
 8011e80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e84:	81a3      	strh	r3, [r4, #12]
 8011e86:	9b00      	ldr	r3, [sp, #0]
 8011e88:	6163      	str	r3, [r4, #20]
 8011e8a:	9b01      	ldr	r3, [sp, #4]
 8011e8c:	6120      	str	r0, [r4, #16]
 8011e8e:	b15b      	cbz	r3, 8011ea8 <__smakebuf_r+0x74>
 8011e90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011e94:	4630      	mov	r0, r6
 8011e96:	f000 f831 	bl	8011efc <_isatty_r>
 8011e9a:	b128      	cbz	r0, 8011ea8 <__smakebuf_r+0x74>
 8011e9c:	89a3      	ldrh	r3, [r4, #12]
 8011e9e:	f023 0303 	bic.w	r3, r3, #3
 8011ea2:	f043 0301 	orr.w	r3, r3, #1
 8011ea6:	81a3      	strh	r3, [r4, #12]
 8011ea8:	89a3      	ldrh	r3, [r4, #12]
 8011eaa:	431d      	orrs	r5, r3
 8011eac:	81a5      	strh	r5, [r4, #12]
 8011eae:	e7cd      	b.n	8011e4c <__smakebuf_r+0x18>
 8011eb0:	0801133d 	.word	0x0801133d

08011eb4 <_read_r>:
 8011eb4:	b538      	push	{r3, r4, r5, lr}
 8011eb6:	4c07      	ldr	r4, [pc, #28]	; (8011ed4 <_read_r+0x20>)
 8011eb8:	4605      	mov	r5, r0
 8011eba:	4608      	mov	r0, r1
 8011ebc:	4611      	mov	r1, r2
 8011ebe:	2200      	movs	r2, #0
 8011ec0:	6022      	str	r2, [r4, #0]
 8011ec2:	461a      	mov	r2, r3
 8011ec4:	f7ef faa0 	bl	8001408 <_read>
 8011ec8:	1c43      	adds	r3, r0, #1
 8011eca:	d102      	bne.n	8011ed2 <_read_r+0x1e>
 8011ecc:	6823      	ldr	r3, [r4, #0]
 8011ece:	b103      	cbz	r3, 8011ed2 <_read_r+0x1e>
 8011ed0:	602b      	str	r3, [r5, #0]
 8011ed2:	bd38      	pop	{r3, r4, r5, pc}
 8011ed4:	2400138c 	.word	0x2400138c

08011ed8 <_fstat_r>:
 8011ed8:	b538      	push	{r3, r4, r5, lr}
 8011eda:	4c07      	ldr	r4, [pc, #28]	; (8011ef8 <_fstat_r+0x20>)
 8011edc:	2300      	movs	r3, #0
 8011ede:	4605      	mov	r5, r0
 8011ee0:	4608      	mov	r0, r1
 8011ee2:	4611      	mov	r1, r2
 8011ee4:	6023      	str	r3, [r4, #0]
 8011ee6:	f7ef fad4 	bl	8001492 <_fstat>
 8011eea:	1c43      	adds	r3, r0, #1
 8011eec:	d102      	bne.n	8011ef4 <_fstat_r+0x1c>
 8011eee:	6823      	ldr	r3, [r4, #0]
 8011ef0:	b103      	cbz	r3, 8011ef4 <_fstat_r+0x1c>
 8011ef2:	602b      	str	r3, [r5, #0]
 8011ef4:	bd38      	pop	{r3, r4, r5, pc}
 8011ef6:	bf00      	nop
 8011ef8:	2400138c 	.word	0x2400138c

08011efc <_isatty_r>:
 8011efc:	b538      	push	{r3, r4, r5, lr}
 8011efe:	4c06      	ldr	r4, [pc, #24]	; (8011f18 <_isatty_r+0x1c>)
 8011f00:	2300      	movs	r3, #0
 8011f02:	4605      	mov	r5, r0
 8011f04:	4608      	mov	r0, r1
 8011f06:	6023      	str	r3, [r4, #0]
 8011f08:	f7ef fad3 	bl	80014b2 <_isatty>
 8011f0c:	1c43      	adds	r3, r0, #1
 8011f0e:	d102      	bne.n	8011f16 <_isatty_r+0x1a>
 8011f10:	6823      	ldr	r3, [r4, #0]
 8011f12:	b103      	cbz	r3, 8011f16 <_isatty_r+0x1a>
 8011f14:	602b      	str	r3, [r5, #0]
 8011f16:	bd38      	pop	{r3, r4, r5, pc}
 8011f18:	2400138c 	.word	0x2400138c

08011f1c <_init>:
 8011f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f1e:	bf00      	nop
 8011f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f22:	bc08      	pop	{r3}
 8011f24:	469e      	mov	lr, r3
 8011f26:	4770      	bx	lr

08011f28 <_fini>:
 8011f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f2a:	bf00      	nop
 8011f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f2e:	bc08      	pop	{r3}
 8011f30:	469e      	mov	lr, r3
 8011f32:	4770      	bx	lr

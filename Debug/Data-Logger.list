
Data-Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018ee4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000914  08019184  08019184  00029184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019a98  08019a98  00030210  2**0
                  CONTENTS
  4 .ARM          00000008  08019a98  08019a98  00029a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019aa0  08019aa0  00030210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019aa0  08019aa0  00029aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019aa4  08019aa4  00029aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  24000000  08019aa8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a80  24000210  08019cb8  00030210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24001c90  08019cb8  00031c90  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00048677  00000000  00000000  0003023e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000078ac  00000000  00000000  000788b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002400  00000000  00000000  00080168  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002100  00000000  00000000  00082568  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00042b4c  00000000  00000000  00084668  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002734e  00000000  00000000  000c71b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0017859f  00000000  00000000  000ee502  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00266aa1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009f24  00000000  00000000  00266b1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000210 	.word	0x24000210
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801916c 	.word	0x0801916c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000214 	.word	0x24000214
 80002dc:	0801916c 	.word	0x0801916c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <FDCAN_Config>:
#include <stdio.h>
#include <string.h>
#include <CANFD.h>
#include <myprintf.h>

void FDCAN_Config(FDCAN_HandleTypeDef *hfdcan){
 8000690:	b580      	push	{r7, lr}
 8000692:	b08c      	sub	sp, #48	; 0x30
 8000694:	af02      	add	r7, sp, #8
 8000696:	6078      	str	r0, [r7, #4]
	FDCAN_FilterTypeDef sFilterConfig;

	  /* Configure Rx filter */
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterIndex = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80006a4:	2301      	movs	r3, #1
 80006a6:	617b      	str	r3, [r7, #20]
	  sFilterConfig.FilterID1 = 0x321;
 80006a8:	f240 3321 	movw	r3, #801	; 0x321
 80006ac:	61bb      	str	r3, [r7, #24]
	  sFilterConfig.FilterID2 = 0x7FF;
 80006ae:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006b2:	61fb      	str	r3, [r7, #28]
	  if (HAL_FDCAN_ConfigFilter(hfdcan, &sFilterConfig) == HAL_OK)
 80006b4:	f107 0308 	add.w	r3, r7, #8
 80006b8:	4619      	mov	r1, r3
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f005 f97e 	bl	80059bc <HAL_FDCAN_ConfigFilter>
	  }

	  /* Configure global filter:
	     Filter all remote frames with STD and EXT ID
	     Reject non matching frames with STD ID and EXT ID */
	  if (HAL_FDCAN_ConfigGlobalFilter(hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 80006c0:	2300      	movs	r3, #0
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2300      	movs	r3, #0
 80006c6:	2202      	movs	r2, #2
 80006c8:	2102      	movs	r1, #2
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f005 f9ec 	bl	8005aa8 <HAL_FDCAN_ConfigGlobalFilter>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <FDCAN_Config+0x4a>
	  {
	    Error_Handler();
 80006d6:	f002 f885 	bl	80027e4 <Error_Handler>
	  }
	if (HAL_FDCAN_Start(hfdcan) != HAL_OK)
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f005 fa34 	bl	8005b48 <HAL_FDCAN_Start>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <FDCAN_Config+0x5a>
	  {
	    Error_Handler();
 80006e6:	f002 f87d 	bl	80027e4 <Error_Handler>
	  }
	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80006ea:	2200      	movs	r2, #0
 80006ec:	2101      	movs	r1, #1
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f005 fbb4 	bl	8005e5c <HAL_FDCAN_ActivateNotification>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <FDCAN_Config+0x6e>
	  {
	    /* Notification Error */
	    Error_Handler();
 80006fa:	f002 f873 	bl	80027e4 <Error_Handler>
	  }
	HAL_FDCAN_EnableTxDelayCompensation(hfdcan);
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f005 f9ff 	bl	8005b02 <HAL_FDCAN_EnableTxDelayCompensation>

}
 8000704:	bf00      	nop
 8000706:	3728      	adds	r7, #40	; 0x28
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan1, uint32_t RxFifo0ITs)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
	if (HAL_FDCAN_GetRxMessage(hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000716:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <HAL_FDCAN_RxFifo0Callback+0x34>)
 8000718:	4a0a      	ldr	r2, [pc, #40]	; (8000744 <HAL_FDCAN_RxFifo0Callback+0x38>)
 800071a:	2140      	movs	r1, #64	; 0x40
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f005 fa3f 	bl	8005ba0 <HAL_FDCAN_GetRxMessage>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d106      	bne.n	8000736 <HAL_FDCAN_RxFifo0Callback+0x2a>
			      {
					HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000728:	2101      	movs	r1, #1
 800072a:	4807      	ldr	r0, [pc, #28]	; (8000748 <HAL_FDCAN_RxFifo0Callback+0x3c>)
 800072c:	f006 fa81 	bl	8006c32 <HAL_GPIO_TogglePin>
					printf("Packet Acquired!\n");
 8000730:	4806      	ldr	r0, [pc, #24]	; (800074c <HAL_FDCAN_RxFifo0Callback+0x40>)
 8000732:	f017 fd01 	bl	8018138 <puts>
				  			  printf("%c",RxData[i]);
				  	  }
				  	  printf("\n");
				  	*/
			      }
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	240003a4 	.word	0x240003a4
 8000744:	240003e4 	.word	0x240003e4
 8000748:	58020400 	.word	0x58020400
 800074c:	08019184 	.word	0x08019184

08000750 <gps_msg_config>:
#include "main.h"
#include <myprintf.h>
#include <stdbool.h>
#include <buffer.h>

int gps_msg_config(UART_HandleTypeDef *huart, const char *nema, int rus1){
 8000750:	b580      	push	{r7, lr}
 8000752:	b09e      	sub	sp, #120	; 0x78
 8000754:	af02      	add	r7, sp, #8
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
	if (strlen(nema) != 3) return 1;
 800075c:	68b8      	ldr	r0, [r7, #8]
 800075e:	f7ff fdbf 	bl	80002e0 <strlen>
 8000762:	4603      	mov	r3, r0
 8000764:	2b03      	cmp	r3, #3
 8000766:	d001      	beq.n	800076c <gps_msg_config+0x1c>
 8000768:	2301      	movs	r3, #1
 800076a:	e052      	b.n	8000812 <gps_msg_config+0xc2>


	char msg[32];
	snprintf(msg, sizeof(msg)-1,"PUBX,40,%s,0,%i,0,0,0,0", nema, rus1);
 800076c:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	4a29      	ldr	r2, [pc, #164]	; (800081c <gps_msg_config+0xcc>)
 8000778:	211f      	movs	r1, #31
 800077a:	f017 fcf5 	bl	8018168 <sniprintf>

	int checksum_int = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 8000782:	2300      	movs	r3, #0
 8000784:	66bb      	str	r3, [r7, #104]	; 0x68
 8000786:	e00b      	b.n	80007a0 <gps_msg_config+0x50>
		checksum_int ^= (unsigned char)msg[i];
 8000788:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800078c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800078e:	4413      	add	r3, r2
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	461a      	mov	r2, r3
 8000794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000796:	4053      	eors	r3, r2
 8000798:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 800079a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800079c:	3301      	adds	r3, #1
 800079e:	66bb      	str	r3, [r7, #104]	; 0x68
 80007a0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80007a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80007a6:	4413      	add	r3, r2
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d002      	beq.n	80007b4 <gps_msg_config+0x64>
 80007ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80007b0:	2b1f      	cmp	r3, #31
 80007b2:	dde9      	ble.n	8000788 <gps_msg_config+0x38>

	char checksum[8];
	snprintf(checksum, sizeof(checksum)-1, "*%.2X", checksum_int);
 80007b4:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80007b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80007ba:	4a19      	ldr	r2, [pc, #100]	; (8000820 <gps_msg_config+0xd0>)
 80007bc:	2107      	movs	r1, #7
 80007be:	f017 fcd3 	bl	8018168 <sniprintf>

	char messagetosend[42];
	snprintf(messagetosend, sizeof(messagetosend)-1, "$%s%s\r\n", msg, checksum);
 80007c2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80007c6:	f107 0014 	add.w	r0, r7, #20
 80007ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	4613      	mov	r3, r2
 80007d2:	4a14      	ldr	r2, [pc, #80]	; (8000824 <gps_msg_config+0xd4>)
 80007d4:	2129      	movs	r1, #41	; 0x29
 80007d6:	f017 fcc7 	bl	8018168 <sniprintf>
	printf("\n\rSending: ");
 80007da:	4813      	ldr	r0, [pc, #76]	; (8000828 <gps_msg_config+0xd8>)
 80007dc:	f017 fc38 	bl	8018050 <iprintf>
	printf("%s", messagetosend);
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	4619      	mov	r1, r3
 80007e6:	4811      	ldr	r0, [pc, #68]	; (800082c <gps_msg_config+0xdc>)
 80007e8:	f017 fc32 	bl	8018050 <iprintf>
	if (HAL_UART_Transmit(huart, messagetosend, strlen(messagetosend), 100) != HAL_OK){
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff fd75 	bl	80002e0 <strlen>
 80007f6:	4603      	mov	r3, r0
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	f107 0114 	add.w	r1, r7, #20
 80007fe:	2364      	movs	r3, #100	; 0x64
 8000800:	68f8      	ldr	r0, [r7, #12]
 8000802:	f00d fefa 	bl	800e5fa <HAL_UART_Transmit>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <gps_msg_config+0xc0>
		Error_Handler();
 800080c:	f001 ffea 	bl	80027e4 <Error_Handler>
	}
	return 0;
 8000810:	2300      	movs	r3, #0
}
 8000812:	4618      	mov	r0, r3
 8000814:	3770      	adds	r7, #112	; 0x70
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	08019198 	.word	0x08019198
 8000820:	080191b0 	.word	0x080191b0
 8000824:	080191b8 	.word	0x080191b8
 8000828:	080191c0 	.word	0x080191c0
 800082c:	080191cc 	.word	0x080191cc

08000830 <gps_rate_config>:

int gps_rate_config(UART_HandleTypeDef *huart, uint16_t measRate, uint16_t navRate, uint16_t timeRef){
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	; 0x28
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	4608      	mov	r0, r1
 800083a:	4611      	mov	r1, r2
 800083c:	461a      	mov	r2, r3
 800083e:	4603      	mov	r3, r0
 8000840:	817b      	strh	r3, [r7, #10]
 8000842:	460b      	mov	r3, r1
 8000844:	813b      	strh	r3, [r7, #8]
 8000846:	4613      	mov	r3, r2
 8000848:	80fb      	strh	r3, [r7, #6]
		uint16_t length = 6;
 800084a:	2306      	movs	r3, #6
 800084c:	83fb      	strh	r3, [r7, #30]
		uint8_t msg[14];
		msg[0] = 0xb5;
 800084e:	23b5      	movs	r3, #181	; 0xb5
 8000850:	743b      	strb	r3, [r7, #16]
		msg[1] = 0x62;
 8000852:	2362      	movs	r3, #98	; 0x62
 8000854:	747b      	strb	r3, [r7, #17]
		msg[2] = 0x06;
 8000856:	2306      	movs	r3, #6
 8000858:	74bb      	strb	r3, [r7, #18]
		msg[3] = 0x08;
 800085a:	2308      	movs	r3, #8
 800085c:	74fb      	strb	r3, [r7, #19]
		msg[4] = length;
 800085e:	8bfb      	ldrh	r3, [r7, #30]
 8000860:	b2db      	uxtb	r3, r3
 8000862:	753b      	strb	r3, [r7, #20]
		msg[5] = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	757b      	strb	r3, [r7, #21]
		msg[6] = measRate;
 8000868:	897b      	ldrh	r3, [r7, #10]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	75bb      	strb	r3, [r7, #22]
		msg[7] = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	75fb      	strb	r3, [r7, #23]
		msg[8] = navRate;
 8000872:	893b      	ldrh	r3, [r7, #8]
 8000874:	b2db      	uxtb	r3, r3
 8000876:	763b      	strb	r3, [r7, #24]
		msg[9] = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	767b      	strb	r3, [r7, #25]
		msg[10] = timeRef;
 800087c:	88fb      	ldrh	r3, [r7, #6]
 800087e:	b2db      	uxtb	r3, r3
 8000880:	76bb      	strb	r3, [r7, #26]
		msg[11] = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	76fb      	strb	r3, [r7, #27]

		uint8_t CK_A = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t CK_B = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 8000892:	2302      	movs	r3, #2
 8000894:	623b      	str	r3, [r7, #32]
 8000896:	e013      	b.n	80008c0 <gps_rate_config+0x90>
	        CK_A = CK_A + msg[i];
 8000898:	f107 0210 	add.w	r2, r7, #16
 800089c:	6a3b      	ldr	r3, [r7, #32]
 800089e:	4413      	add	r3, r2
 80008a0:	781a      	ldrb	r2, [r3, #0]
 80008a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008a6:	4413      	add	r3, r2
 80008a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	        CK_A &= 0xFF;
	        CK_B = CK_B + CK_A;
 80008ac:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80008b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008b4:	4413      	add	r3, r2
 80008b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 80008ba:	6a3b      	ldr	r3, [r7, #32]
 80008bc:	3301      	adds	r3, #1
 80008be:	623b      	str	r3, [r7, #32]
 80008c0:	6a3b      	ldr	r3, [r7, #32]
 80008c2:	2b0b      	cmp	r3, #11
 80008c4:	dde8      	ble.n	8000898 <gps_rate_config+0x68>
	        CK_B &= 0xFF;
	    }
		msg[12] = CK_A;
 80008c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008ca:	773b      	strb	r3, [r7, #28]
		msg[13] = CK_B;
 80008cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80008d0:	777b      	strb	r3, [r7, #29]

		if (HAL_UART_Transmit(huart, msg, sizeof(msg), 100) != HAL_OK){
 80008d2:	f107 0110 	add.w	r1, r7, #16
 80008d6:	2364      	movs	r3, #100	; 0x64
 80008d8:	220e      	movs	r2, #14
 80008da:	68f8      	ldr	r0, [r7, #12]
 80008dc:	f00d fe8d 	bl	800e5fa <HAL_UART_Transmit>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d003      	beq.n	80008ee <gps_rate_config+0xbe>
				Error_Handler();
 80008e6:	f001 ff7d 	bl	80027e4 <Error_Handler>
				return 1;
 80008ea:	2301      	movs	r3, #1
 80008ec:	e000      	b.n	80008f0 <gps_rate_config+0xc0>
			}
		return 0;
 80008ee:	2300      	movs	r3, #0
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3728      	adds	r7, #40	; 0x28
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <HAL_UART_RxHalfCpltCallback>:
}

int GPS_flag = 0;

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	  }
  }*/
  //for(int i=0; i<BUFFLENGTH; i++){
  	  		  //printf("%c", rxBuf[i]);
  	  //}
  GPS_flag = 1;
 8000900:	4b04      	ldr	r3, [pc, #16]	; (8000914 <HAL_UART_RxHalfCpltCallback+0x1c>)
 8000902:	2201      	movs	r2, #1
 8000904:	601a      	str	r2, [r3, #0]
  //WriteToBuff(rxBuf+70, BUFFLENGTH/2);
  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);*/
  //printf("GPS Recieved\n");

}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	2400022c 	.word	0x2400022c

08000918 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8000924:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <NRF24_DelayMicroSeconds+0x38>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a0a      	ldr	r2, [pc, #40]	; (8000954 <NRF24_DelayMicroSeconds+0x3c>)
 800092a:	fba2 2303 	umull	r2, r3, r2, r3
 800092e:	0c9a      	lsrs	r2, r3, #18
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	fb02 f303 	mul.w	r3, r2, r3
 8000936:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8000938:	bf00      	nop
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	1e5a      	subs	r2, r3, #1
 800093e:	60fa      	str	r2, [r7, #12]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d1fa      	bne.n	800093a <NRF24_DelayMicroSeconds+0x22>
}
 8000944:	bf00      	nop
 8000946:	3714      	adds	r7, #20
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	24000044 	.word	0x24000044
 8000954:	165e9f81 	.word	0x165e9f81

08000958 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d008      	beq.n	8000978 <NRF24_csn+0x20>
 8000966:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <NRF24_csn+0x38>)
 8000968:	6818      	ldr	r0, [r3, #0]
 800096a:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <NRF24_csn+0x3c>)
 800096c:	881b      	ldrh	r3, [r3, #0]
 800096e:	2201      	movs	r2, #1
 8000970:	4619      	mov	r1, r3
 8000972:	f006 f945 	bl	8006c00 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000976:	e007      	b.n	8000988 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <NRF24_csn+0x38>)
 800097a:	6818      	ldr	r0, [r3, #0]
 800097c:	4b05      	ldr	r3, [pc, #20]	; (8000994 <NRF24_csn+0x3c>)
 800097e:	881b      	ldrh	r3, [r3, #0]
 8000980:	2200      	movs	r2, #0
 8000982:	4619      	mov	r1, r3
 8000984:	f006 f93c 	bl	8006c00 <HAL_GPIO_WritePin>
}
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	24000238 	.word	0x24000238
 8000994:	2400023c 	.word	0x2400023c

08000998 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d008      	beq.n	80009b8 <NRF24_ce+0x20>
 80009a6:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <NRF24_ce+0x38>)
 80009a8:	6818      	ldr	r0, [r3, #0]
 80009aa:	4b0a      	ldr	r3, [pc, #40]	; (80009d4 <NRF24_ce+0x3c>)
 80009ac:	881b      	ldrh	r3, [r3, #0]
 80009ae:	2201      	movs	r2, #1
 80009b0:	4619      	mov	r1, r3
 80009b2:	f006 f925 	bl	8006c00 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 80009b6:	e007      	b.n	80009c8 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <NRF24_ce+0x38>)
 80009ba:	6818      	ldr	r0, [r3, #0]
 80009bc:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <NRF24_ce+0x3c>)
 80009be:	881b      	ldrh	r3, [r3, #0]
 80009c0:	2200      	movs	r2, #0
 80009c2:	4619      	mov	r1, r3
 80009c4:	f006 f91c 	bl	8006c00 <HAL_GPIO_WritePin>
}
 80009c8:	bf00      	nop
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	24000238 	.word	0x24000238
 80009d4:	2400023e 	.word	0x2400023e

080009d8 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 80009e2:	2000      	movs	r0, #0
 80009e4:	f7ff ffb8 	bl	8000958 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	f003 031f 	and.w	r3, r3, #31
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80009f2:	f107 010c 	add.w	r1, r7, #12
 80009f6:	2364      	movs	r3, #100	; 0x64
 80009f8:	2201      	movs	r2, #1
 80009fa:	480a      	ldr	r0, [pc, #40]	; (8000a24 <NRF24_read_register+0x4c>)
 80009fc:	f00c fdf4 	bl	800d5e8 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	1c59      	adds	r1, r3, #1
 8000a06:	2364      	movs	r3, #100	; 0x64
 8000a08:	2201      	movs	r2, #1
 8000a0a:	4806      	ldr	r0, [pc, #24]	; (8000a24 <NRF24_read_register+0x4c>)
 8000a0c:	f00c ffde 	bl	800d9cc <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000a10:	7b7b      	ldrb	r3, [r7, #13]
 8000a12:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000a14:	2001      	movs	r0, #1
 8000a16:	f7ff ff9f 	bl	8000958 <NRF24_csn>
	return retData;
 8000a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3710      	adds	r7, #16
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	24000240 	.word	0x24000240

08000a28 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	6039      	str	r1, [r7, #0]
 8000a32:	71fb      	strb	r3, [r7, #7]
 8000a34:	4613      	mov	r3, r2
 8000a36:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f7ff ff8d 	bl	8000958 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	f003 031f 	and.w	r3, r3, #31
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000a48:	f107 010c 	add.w	r1, r7, #12
 8000a4c:	2364      	movs	r3, #100	; 0x64
 8000a4e:	2201      	movs	r2, #1
 8000a50:	4808      	ldr	r0, [pc, #32]	; (8000a74 <NRF24_read_registerN+0x4c>)
 8000a52:	f00c fdc9 	bl	800d5e8 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000a56:	79bb      	ldrb	r3, [r7, #6]
 8000a58:	b29a      	uxth	r2, r3
 8000a5a:	2364      	movs	r3, #100	; 0x64
 8000a5c:	6839      	ldr	r1, [r7, #0]
 8000a5e:	4805      	ldr	r0, [pc, #20]	; (8000a74 <NRF24_read_registerN+0x4c>)
 8000a60:	f00c ffb4 	bl	800d9cc <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000a64:	2001      	movs	r0, #1
 8000a66:	f7ff ff77 	bl	8000958 <NRF24_csn>
}
 8000a6a:	bf00      	nop
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	24000240 	.word	0x24000240

08000a78 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	460a      	mov	r2, r1
 8000a82:	71fb      	strb	r3, [r7, #7]
 8000a84:	4613      	mov	r3, r2
 8000a86:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f7ff ff65 	bl	8000958 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	f043 0320 	orr.w	r3, r3, #32
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000a98:	79bb      	ldrb	r3, [r7, #6]
 8000a9a:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000a9c:	f107 010c 	add.w	r1, r7, #12
 8000aa0:	2364      	movs	r3, #100	; 0x64
 8000aa2:	2202      	movs	r2, #2
 8000aa4:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <NRF24_write_register+0x40>)
 8000aa6:	f00c fd9f 	bl	800d5e8 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000aaa:	2001      	movs	r0, #1
 8000aac:	f7ff ff54 	bl	8000958 <NRF24_csn>
}
 8000ab0:	bf00      	nop
 8000ab2:	3710      	adds	r7, #16
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	24000240 	.word	0x24000240

08000abc <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	6039      	str	r1, [r7, #0]
 8000ac6:	71fb      	strb	r3, [r7, #7]
 8000ac8:	4613      	mov	r3, r2
 8000aca:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000acc:	2000      	movs	r0, #0
 8000ace:	f7ff ff43 	bl	8000958 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	f043 0320 	orr.w	r3, r3, #32
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000adc:	f107 010c 	add.w	r1, r7, #12
 8000ae0:	2364      	movs	r3, #100	; 0x64
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	4808      	ldr	r0, [pc, #32]	; (8000b08 <NRF24_write_registerN+0x4c>)
 8000ae6:	f00c fd7f 	bl	800d5e8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000aea:	79bb      	ldrb	r3, [r7, #6]
 8000aec:	b29a      	uxth	r2, r3
 8000aee:	2364      	movs	r3, #100	; 0x64
 8000af0:	6839      	ldr	r1, [r7, #0]
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <NRF24_write_registerN+0x4c>)
 8000af4:	f00c fd78 	bl	800d5e8 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000af8:	2001      	movs	r0, #1
 8000afa:	f7ff ff2d 	bl	8000958 <NRF24_csn>
}
 8000afe:	bf00      	nop
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	24000240 	.word	0x24000240

08000b0c <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	460b      	mov	r3, r1
 8000b16:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8000b18:	2000      	movs	r0, #0
 8000b1a:	f7ff ff1d 	bl	8000958 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8000b1e:	23a0      	movs	r3, #160	; 0xa0
 8000b20:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8000b22:	f107 010f 	add.w	r1, r7, #15
 8000b26:	2364      	movs	r3, #100	; 0x64
 8000b28:	2201      	movs	r2, #1
 8000b2a:	4808      	ldr	r0, [pc, #32]	; (8000b4c <NRF24_write_payload+0x40>)
 8000b2c:	f00c fd5c 	bl	800d5e8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 8000b30:	78fb      	ldrb	r3, [r7, #3]
 8000b32:	b29a      	uxth	r2, r3
 8000b34:	2364      	movs	r3, #100	; 0x64
 8000b36:	6879      	ldr	r1, [r7, #4]
 8000b38:	4804      	ldr	r0, [pc, #16]	; (8000b4c <NRF24_write_payload+0x40>)
 8000b3a:	f00c fd55 	bl	800d5e8 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000b3e:	2001      	movs	r0, #1
 8000b40:	f7ff ff0a 	bl	8000958 <NRF24_csn>
}
 8000b44:	bf00      	nop
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	24000240 	.word	0x24000240

08000b50 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000b54:	21ff      	movs	r1, #255	; 0xff
 8000b56:	20e1      	movs	r0, #225	; 0xe1
 8000b58:	f7ff ff8e 	bl	8000a78 <NRF24_write_register>
}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000b64:	21ff      	movs	r1, #255	; 0xff
 8000b66:	20e2      	movs	r0, #226	; 0xe2
 8000b68:	f7ff ff86 	bl	8000a78 <NRF24_write_register>
}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8000b76:	2007      	movs	r0, #7
 8000b78:	f7ff ff2e 	bl	80009d8 <NRF24_read_register>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000b80:	79fb      	ldrb	r3, [r7, #7]
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
	...

08000b8c <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000b8c:	b082      	sub	sp, #8
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b084      	sub	sp, #16
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
 8000b96:	61fb      	str	r3, [r7, #28]
 8000b98:	460b      	mov	r3, r1
 8000b9a:	807b      	strh	r3, [r7, #2]
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000ba0:	4b66      	ldr	r3, [pc, #408]	; (8000d3c <NRF24_begin+0x1b0>)
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f107 031c 	add.w	r3, r7, #28
 8000ba8:	2288      	movs	r2, #136	; 0x88
 8000baa:	4619      	mov	r1, r3
 8000bac:	f017 f994 	bl	8017ed8 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000bb0:	4a63      	ldr	r2, [pc, #396]	; (8000d40 <NRF24_begin+0x1b4>)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000bb6:	4a63      	ldr	r2, [pc, #396]	; (8000d44 <NRF24_begin+0x1b8>)
 8000bb8:	887b      	ldrh	r3, [r7, #2]
 8000bba:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000bbc:	4a62      	ldr	r2, [pc, #392]	; (8000d48 <NRF24_begin+0x1bc>)
 8000bbe:	883b      	ldrh	r3, [r7, #0]
 8000bc0:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	f7ff fec8 	bl	8000958 <NRF24_csn>
	NRF24_ce(0);
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f7ff fee5 	bl	8000998 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000bce:	2005      	movs	r0, #5
 8000bd0:	f002 fafc 	bl	80031cc <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000bd4:	2108      	movs	r1, #8
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f7ff ff4e 	bl	8000a78 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000bdc:	213f      	movs	r1, #63	; 0x3f
 8000bde:	2001      	movs	r0, #1
 8000be0:	f7ff ff4a 	bl	8000a78 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000be4:	2103      	movs	r1, #3
 8000be6:	2002      	movs	r0, #2
 8000be8:	f7ff ff46 	bl	8000a78 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000bec:	2103      	movs	r1, #3
 8000bee:	2003      	movs	r0, #3
 8000bf0:	f7ff ff42 	bl	8000a78 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000bf4:	2103      	movs	r1, #3
 8000bf6:	2004      	movs	r0, #4
 8000bf8:	f7ff ff3e 	bl	8000a78 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000bfc:	2102      	movs	r1, #2
 8000bfe:	2005      	movs	r0, #5
 8000c00:	f7ff ff3a 	bl	8000a78 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000c04:	210f      	movs	r1, #15
 8000c06:	2006      	movs	r0, #6
 8000c08:	f7ff ff36 	bl	8000a78 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000c0c:	210e      	movs	r1, #14
 8000c0e:	2007      	movs	r0, #7
 8000c10:	f7ff ff32 	bl	8000a78 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000c14:	2100      	movs	r1, #0
 8000c16:	2008      	movs	r0, #8
 8000c18:	f7ff ff2e 	bl	8000a78 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	2009      	movs	r0, #9
 8000c20:	f7ff ff2a 	bl	8000a78 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000c24:	23e7      	movs	r3, #231	; 0xe7
 8000c26:	733b      	strb	r3, [r7, #12]
 8000c28:	23e7      	movs	r3, #231	; 0xe7
 8000c2a:	72fb      	strb	r3, [r7, #11]
 8000c2c:	23e7      	movs	r3, #231	; 0xe7
 8000c2e:	72bb      	strb	r3, [r7, #10]
 8000c30:	23e7      	movs	r3, #231	; 0xe7
 8000c32:	727b      	strb	r3, [r7, #9]
 8000c34:	23e7      	movs	r3, #231	; 0xe7
 8000c36:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000c38:	f107 0308 	add.w	r3, r7, #8
 8000c3c:	2205      	movs	r2, #5
 8000c3e:	4619      	mov	r1, r3
 8000c40:	200a      	movs	r0, #10
 8000c42:	f7ff ff3b 	bl	8000abc <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8000c46:	23c2      	movs	r3, #194	; 0xc2
 8000c48:	733b      	strb	r3, [r7, #12]
 8000c4a:	23c2      	movs	r3, #194	; 0xc2
 8000c4c:	72fb      	strb	r3, [r7, #11]
 8000c4e:	23c2      	movs	r3, #194	; 0xc2
 8000c50:	72bb      	strb	r3, [r7, #10]
 8000c52:	23c2      	movs	r3, #194	; 0xc2
 8000c54:	727b      	strb	r3, [r7, #9]
 8000c56:	23c2      	movs	r3, #194	; 0xc2
 8000c58:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000c5a:	f107 0308 	add.w	r3, r7, #8
 8000c5e:	2205      	movs	r2, #5
 8000c60:	4619      	mov	r1, r3
 8000c62:	200b      	movs	r0, #11
 8000c64:	f7ff ff2a 	bl	8000abc <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000c68:	21c3      	movs	r1, #195	; 0xc3
 8000c6a:	200c      	movs	r0, #12
 8000c6c:	f7ff ff04 	bl	8000a78 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000c70:	21c4      	movs	r1, #196	; 0xc4
 8000c72:	200d      	movs	r0, #13
 8000c74:	f7ff ff00 	bl	8000a78 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000c78:	21c5      	movs	r1, #197	; 0xc5
 8000c7a:	200e      	movs	r0, #14
 8000c7c:	f7ff fefc 	bl	8000a78 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000c80:	21c6      	movs	r1, #198	; 0xc6
 8000c82:	200f      	movs	r0, #15
 8000c84:	f7ff fef8 	bl	8000a78 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000c88:	23e7      	movs	r3, #231	; 0xe7
 8000c8a:	733b      	strb	r3, [r7, #12]
 8000c8c:	23e7      	movs	r3, #231	; 0xe7
 8000c8e:	72fb      	strb	r3, [r7, #11]
 8000c90:	23e7      	movs	r3, #231	; 0xe7
 8000c92:	72bb      	strb	r3, [r7, #10]
 8000c94:	23e7      	movs	r3, #231	; 0xe7
 8000c96:	727b      	strb	r3, [r7, #9]
 8000c98:	23e7      	movs	r3, #231	; 0xe7
 8000c9a:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000c9c:	f107 0308 	add.w	r3, r7, #8
 8000ca0:	2205      	movs	r2, #5
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	2010      	movs	r0, #16
 8000ca6:	f7ff ff09 	bl	8000abc <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000caa:	2100      	movs	r1, #0
 8000cac:	2011      	movs	r0, #17
 8000cae:	f7ff fee3 	bl	8000a78 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	2012      	movs	r0, #18
 8000cb6:	f7ff fedf 	bl	8000a78 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000cba:	2100      	movs	r1, #0
 8000cbc:	2013      	movs	r0, #19
 8000cbe:	f7ff fedb 	bl	8000a78 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	2014      	movs	r0, #20
 8000cc6:	f7ff fed7 	bl	8000a78 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000cca:	2100      	movs	r1, #0
 8000ccc:	2015      	movs	r0, #21
 8000cce:	f7ff fed3 	bl	8000a78 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	2016      	movs	r0, #22
 8000cd6:	f7ff fecf 	bl	8000a78 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 8000cda:	f000 fa89 	bl	80011f0 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000cde:	2100      	movs	r1, #0
 8000ce0:	201c      	movs	r0, #28
 8000ce2:	f7ff fec9 	bl	8000a78 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	201d      	movs	r0, #29
 8000cea:	f7ff fec5 	bl	8000a78 <NRF24_write_register>
	printRadioSettings();
 8000cee:	f000 fa99 	bl	8001224 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000cf2:	210f      	movs	r1, #15
 8000cf4:	200f      	movs	r0, #15
 8000cf6:	f000 f8ad 	bl	8000e54 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000cfa:	2003      	movs	r0, #3
 8000cfc:	f000 f927 	bl	8000f4e <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000d00:	2001      	movs	r0, #1
 8000d02:	f000 f95d 	bl	8000fc0 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000d06:	2002      	movs	r0, #2
 8000d08:	f000 f9a0 	bl	800104c <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000d0c:	f000 f8f2 	bl	8000ef4 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000d10:	2020      	movs	r0, #32
 8000d12:	f000 f8cf 	bl	8000eb4 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8000d16:	f000 fa62 	bl	80011de <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000d1a:	204c      	movs	r0, #76	; 0x4c
 8000d1c:	f000 f8b5 	bl	8000e8a <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000d20:	f7ff ff16 	bl	8000b50 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000d24:	f7ff ff1c 	bl	8000b60 <NRF24_flush_rx>
	
	NRF24_powerDown();
 8000d28:	f000 f9b8 	bl	800109c <NRF24_powerDown>
	
}
 8000d2c:	bf00      	nop
 8000d2e:	3710      	adds	r7, #16
 8000d30:	46bd      	mov	sp, r7
 8000d32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d36:	b002      	add	sp, #8
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	24000240 	.word	0x24000240
 8000d40:	24000238 	.word	0x24000238
 8000d44:	2400023c 	.word	0x2400023c
 8000d48:	2400023e 	.word	0x2400023e

08000d4c <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8000d50:	2000      	movs	r0, #0
 8000d52:	f7ff fe21 	bl	8000998 <NRF24_ce>
	NRF24_flush_tx();
 8000d56:	f7ff fefb 	bl	8000b50 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000d5a:	f7ff ff01 	bl	8000b60 <NRF24_flush_rx>
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8000d70:	f000 fa35 	bl	80011de <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8000d74:	78fb      	ldrb	r3, [r7, #3]
 8000d76:	4619      	mov	r1, r3
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f000 f9ce 	bl	800111a <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8000d7e:	f002 fa19 	bl	80031b4 <HAL_GetTick>
 8000d82:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8000d84:	230a      	movs	r3, #10
 8000d86:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8000d88:	f107 030d 	add.w	r3, r7, #13
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	4619      	mov	r1, r3
 8000d90:	2008      	movs	r0, #8
 8000d92:	f7ff fe49 	bl	8000a28 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8000d96:	f7ff feeb 	bl	8000b70 <NRF24_get_status>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
 8000da0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d107      	bne.n	8000db8 <NRF24_write+0x54>
 8000da8:	f002 fa04 	bl	80031b4 <HAL_GetTick>
 8000dac:	4602      	mov	r2, r0
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d8e7      	bhi.n	8000d88 <NRF24_write+0x24>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8000db8:	f107 010b 	add.w	r1, r7, #11
 8000dbc:	f107 030c 	add.w	r3, r7, #12
 8000dc0:	4a0c      	ldr	r2, [pc, #48]	; (8000df4 <NRF24_write+0x90>)
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f000 f9d8 	bl	8001178 <NRF24_whatHappened>
	retStatus = tx_ok;
 8000dc8:	7b3b      	ldrb	r3, [r7, #12]
 8000dca:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8000dcc:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <NRF24_write+0x90>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d005      	beq.n	8000de0 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8000dd4:	f000 f886 	bl	8000ee4 <NRF24_getDynamicPayloadSize>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	461a      	mov	r2, r3
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <NRF24_write+0x94>)
 8000dde:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 8000de0:	f000 f80c 	bl	8000dfc <NRF24_available>
	NRF24_flush_tx();
 8000de4:	f7ff feb4 	bl	8000b50 <NRF24_flush_tx>
	return retStatus;
 8000de8:	7bbb      	ldrb	r3, [r7, #14]
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3718      	adds	r7, #24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	24000230 	.word	0x24000230
 8000df8:	24000231 	.word	0x24000231

08000dfc <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000e00:	2000      	movs	r0, #0
 8000e02:	f000 f95a 	bl	80010ba <NRF24_availablePipe>
 8000e06:	4603      	mov	r3, r0
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8000e16:	463b      	mov	r3, r7
 8000e18:	2205      	movs	r2, #5
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	200a      	movs	r0, #10
 8000e1e:	f7ff fe4d 	bl	8000abc <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8000e22:	463b      	mov	r3, r7
 8000e24:	2205      	movs	r2, #5
 8000e26:	4619      	mov	r1, r3
 8000e28:	2010      	movs	r0, #16
 8000e2a:	f7ff fe47 	bl	8000abc <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 8000e2e:	2320      	movs	r3, #32
 8000e30:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8000e32:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <NRF24_openWritingPipe+0x44>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	7bfa      	ldrb	r2, [r7, #15]
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	bf28      	it	cs
 8000e3c:	4613      	movcs	r3, r2
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	4619      	mov	r1, r3
 8000e42:	2011      	movs	r0, #17
 8000e44:	f7ff fe18 	bl	8000a78 <NRF24_write_register>
}
 8000e48:	bf00      	nop
 8000e4a:	3710      	adds	r7, #16
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	24000232 	.word	0x24000232

08000e54 <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	460a      	mov	r2, r1
 8000e5e:	71fb      	strb	r3, [r7, #7]
 8000e60:	4613      	mov	r3, r2
 8000e62:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	011b      	lsls	r3, r3, #4
 8000e68:	b25a      	sxtb	r2, r3
 8000e6a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000e6e:	f003 030f 	and.w	r3, r3, #15
 8000e72:	b25b      	sxtb	r3, r3
 8000e74:	4313      	orrs	r3, r2
 8000e76:	b25b      	sxtb	r3, r3
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	2004      	movs	r0, #4
 8000e7e:	f7ff fdfb 	bl	8000a78 <NRF24_write_register>
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b084      	sub	sp, #16
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	4603      	mov	r3, r0
 8000e92:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000e94:	237f      	movs	r3, #127	; 0x7f
 8000e96:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000e98:	7bfa      	ldrb	r2, [r7, #15]
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	bf28      	it	cs
 8000ea0:	4613      	movcs	r3, r2
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	2005      	movs	r0, #5
 8000ea8:	f7ff fde6 	bl	8000a78 <NRF24_write_register>
}
 8000eac:	bf00      	nop
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000ebe:	2320      	movs	r3, #32
 8000ec0:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000ec2:	7bfa      	ldrb	r2, [r7, #15]
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	bf28      	it	cs
 8000eca:	4613      	movcs	r3, r2
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <NRF24_setPayloadSize+0x2c>)
 8000ed0:	701a      	strb	r2, [r3, #0]
}
 8000ed2:	bf00      	nop
 8000ed4:	3714      	adds	r7, #20
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	24000232 	.word	0x24000232

08000ee4 <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000ee8:	2060      	movs	r0, #96	; 0x60
 8000eea:	f7ff fd75 	bl	80009d8 <NRF24_read_register>
 8000eee:	4603      	mov	r3, r0
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000ef8:	201d      	movs	r0, #29
 8000efa:	f7ff fd6d 	bl	80009d8 <NRF24_read_register>
 8000efe:	4603      	mov	r3, r0
 8000f00:	f023 0304 	bic.w	r3, r3, #4
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	4619      	mov	r1, r3
 8000f08:	201d      	movs	r0, #29
 8000f0a:	f7ff fdb5 	bl	8000a78 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8000f0e:	2100      	movs	r1, #0
 8000f10:	201c      	movs	r0, #28
 8000f12:	f7ff fdb1 	bl	8000a78 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000f16:	4b02      	ldr	r3, [pc, #8]	; (8000f20 <NRF24_disableDynamicPayloads+0x2c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	701a      	strb	r2, [r3, #0]
}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	24000233 	.word	0x24000233

08000f24 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d004      	beq.n	8000f3e <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000f34:	213f      	movs	r1, #63	; 0x3f
 8000f36:	2001      	movs	r0, #1
 8000f38:	f7ff fd9e 	bl	8000a78 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000f3c:	e003      	b.n	8000f46 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000f3e:	2100      	movs	r1, #0
 8000f40:	2001      	movs	r0, #1
 8000f42:	f7ff fd99 	bl	8000a78 <NRF24_write_register>
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b084      	sub	sp, #16
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	4603      	mov	r3, r0
 8000f56:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000f58:	2006      	movs	r0, #6
 8000f5a:	f7ff fd3d 	bl	80009d8 <NRF24_read_register>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	f023 0306 	bic.w	r3, r3, #6
 8000f68:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	2b03      	cmp	r3, #3
 8000f6e:	d104      	bne.n	8000f7a <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	f043 0306 	orr.w	r3, r3, #6
 8000f76:	73fb      	strb	r3, [r7, #15]
 8000f78:	e019      	b.n	8000fae <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d104      	bne.n	8000f8a <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	f043 0304 	orr.w	r3, r3, #4
 8000f86:	73fb      	strb	r3, [r7, #15]
 8000f88:	e011      	b.n	8000fae <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d104      	bne.n	8000f9a <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	f043 0302 	orr.w	r3, r3, #2
 8000f96:	73fb      	strb	r3, [r7, #15]
 8000f98:	e009      	b.n	8000fae <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d006      	beq.n	8000fae <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	2b04      	cmp	r3, #4
 8000fa4:	d103      	bne.n	8000fae <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	f043 0306 	orr.w	r3, r3, #6
 8000fac:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	2006      	movs	r0, #6
 8000fb4:	f7ff fd60 	bl	8000a78 <NRF24_write_register>
}
 8000fb8:	bf00      	nop
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000fce:	2006      	movs	r0, #6
 8000fd0:	f7ff fd02 	bl	80009d8 <NRF24_read_register>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000fd8:	4b1b      	ldr	r3, [pc, #108]	; (8001048 <NRF24_setDataRate+0x88>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000fde:	7bbb      	ldrb	r3, [r7, #14]
 8000fe0:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000fe4:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d107      	bne.n	8000ffc <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000fec:	4b16      	ldr	r3, [pc, #88]	; (8001048 <NRF24_setDataRate+0x88>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000ff2:	7bbb      	ldrb	r3, [r7, #14]
 8000ff4:	f043 0320 	orr.w	r3, r3, #32
 8000ff8:	73bb      	strb	r3, [r7, #14]
 8000ffa:	e00d      	b.n	8001018 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d107      	bne.n	8001012 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8001002:	4b11      	ldr	r3, [pc, #68]	; (8001048 <NRF24_setDataRate+0x88>)
 8001004:	2201      	movs	r2, #1
 8001006:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8001008:	7bbb      	ldrb	r3, [r7, #14]
 800100a:	f043 0308 	orr.w	r3, r3, #8
 800100e:	73bb      	strb	r3, [r7, #14]
 8001010:	e002      	b.n	8001018 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8001012:	4b0d      	ldr	r3, [pc, #52]	; (8001048 <NRF24_setDataRate+0x88>)
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8001018:	7bbb      	ldrb	r3, [r7, #14]
 800101a:	4619      	mov	r1, r3
 800101c:	2006      	movs	r0, #6
 800101e:	f7ff fd2b 	bl	8000a78 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8001022:	2006      	movs	r0, #6
 8001024:	f7ff fcd8 	bl	80009d8 <NRF24_read_register>
 8001028:	4603      	mov	r3, r0
 800102a:	461a      	mov	r2, r3
 800102c:	7bbb      	ldrb	r3, [r7, #14]
 800102e:	4293      	cmp	r3, r2
 8001030:	d102      	bne.n	8001038 <NRF24_setDataRate+0x78>
  {
    result = true;
 8001032:	2301      	movs	r3, #1
 8001034:	73fb      	strb	r3, [r7, #15]
 8001036:	e002      	b.n	800103e <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8001038:	4b03      	ldr	r3, [pc, #12]	; (8001048 <NRF24_setDataRate+0x88>)
 800103a:	2200      	movs	r2, #0
 800103c:	701a      	strb	r2, [r3, #0]
  }

  return result;
 800103e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	24000234 	.word	0x24000234

0800104c <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8001056:	2000      	movs	r0, #0
 8001058:	f7ff fcbe 	bl	80009d8 <NRF24_read_register>
 800105c:	4603      	mov	r3, r0
 800105e:	f023 030c 	bic.w	r3, r3, #12
 8001062:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d00f      	beq.n	800108a <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d104      	bne.n	800107a <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	f043 0308 	orr.w	r3, r3, #8
 8001076:	73fb      	strb	r3, [r7, #15]
 8001078:	e007      	b.n	800108a <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	f043 0308 	orr.w	r3, r3, #8
 8001080:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8001082:	7bfb      	ldrb	r3, [r7, #15]
 8001084:	f043 0304 	orr.w	r3, r3, #4
 8001088:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	4619      	mov	r1, r3
 800108e:	2000      	movs	r0, #0
 8001090:	f7ff fcf2 	bl	8000a78 <NRF24_write_register>
}
 8001094:	bf00      	nop
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 80010a0:	2000      	movs	r0, #0
 80010a2:	f7ff fc99 	bl	80009d8 <NRF24_read_register>
 80010a6:	4603      	mov	r3, r0
 80010a8:	f023 0302 	bic.w	r3, r3, #2
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	4619      	mov	r1, r3
 80010b0:	2000      	movs	r0, #0
 80010b2:	f7ff fce1 	bl	8000a78 <NRF24_write_register>
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}

080010ba <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b084      	sub	sp, #16
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 80010c2:	f7ff fd55 	bl	8000b70 <NRF24_get_status>
 80010c6:	4603      	mov	r3, r0
 80010c8:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
 80010cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	bf14      	ite	ne
 80010d4:	2301      	movne	r3, #1
 80010d6:	2300      	moveq	r3, #0
 80010d8:	73bb      	strb	r3, [r7, #14]

  if (result)
 80010da:	7bbb      	ldrb	r3, [r7, #14]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d017      	beq.n	8001110 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d007      	beq.n	80010f6 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
 80010e8:	085b      	lsrs	r3, r3, #1
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	f003 0307 	and.w	r3, r3, #7
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 80010f6:	2140      	movs	r1, #64	; 0x40
 80010f8:	2007      	movs	r0, #7
 80010fa:	f7ff fcbd 	bl	8000a78 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	f003 0320 	and.w	r3, r3, #32
 8001104:	2b00      	cmp	r3, #0
 8001106:	d003      	beq.n	8001110 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8001108:	2120      	movs	r1, #32
 800110a:	2007      	movs	r0, #7
 800110c:	f7ff fcb4 	bl	8000a78 <NRF24_write_register>
    }
  }
  return result;
 8001110:	7bbb      	ldrb	r3, [r7, #14]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b082      	sub	sp, #8
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
 8001122:	460b      	mov	r3, r1
 8001124:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 8001126:	2000      	movs	r0, #0
 8001128:	f7ff fc36 	bl	8000998 <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 800112c:	2000      	movs	r0, #0
 800112e:	f7ff fc53 	bl	80009d8 <NRF24_read_register>
 8001132:	4603      	mov	r3, r0
 8001134:	f043 0302 	orr.w	r3, r3, #2
 8001138:	b2db      	uxtb	r3, r3
 800113a:	f023 0301 	bic.w	r3, r3, #1
 800113e:	b2db      	uxtb	r3, r3
 8001140:	4619      	mov	r1, r3
 8001142:	2000      	movs	r0, #0
 8001144:	f7ff fc98 	bl	8000a78 <NRF24_write_register>
  NRF24_ce(1);
 8001148:	2001      	movs	r0, #1
 800114a:	f7ff fc25 	bl	8000998 <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 800114e:	2096      	movs	r0, #150	; 0x96
 8001150:	f7ff fbe2 	bl	8000918 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8001154:	78fb      	ldrb	r3, [r7, #3]
 8001156:	4619      	mov	r1, r3
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff fcd7 	bl	8000b0c <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 800115e:	2001      	movs	r0, #1
 8001160:	f7ff fc1a 	bl	8000998 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8001164:	200f      	movs	r0, #15
 8001166:	f7ff fbd7 	bl	8000918 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 800116a:	2000      	movs	r0, #0
 800116c:	f7ff fc14 	bl	8000998 <NRF24_ce>
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001184:	f7ff fcf4 	bl	8000b70 <NRF24_get_status>
 8001188:	4603      	mov	r3, r0
 800118a:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2200      	movs	r2, #0
 8001190:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001192:	2170      	movs	r1, #112	; 0x70
 8001194:	2007      	movs	r0, #7
 8001196:	f7ff fc6f 	bl	8000a78 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 800119a:	7dfb      	ldrb	r3, [r7, #23]
 800119c:	f003 0320 	and.w	r3, r3, #32
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	bf14      	ite	ne
 80011a4:	2301      	movne	r3, #1
 80011a6:	2300      	moveq	r3, #0
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 80011ae:	7dfb      	ldrb	r3, [r7, #23]
 80011b0:	f003 0310 	and.w	r3, r3, #16
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	bf14      	ite	ne
 80011b8:	2301      	movne	r3, #1
 80011ba:	2300      	moveq	r3, #0
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 80011c2:	7dfb      	ldrb	r3, [r7, #23]
 80011c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	bf14      	ite	ne
 80011cc:	2301      	movne	r3, #1
 80011ce:	2300      	moveq	r3, #0
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	701a      	strb	r2, [r3, #0]
}
 80011d6:	bf00      	nop
 80011d8:	3718      	adds	r7, #24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80011e2:	2170      	movs	r1, #112	; 0x70
 80011e4:	2007      	movs	r0, #7
 80011e6:	f7ff fc47 	bl	8000a78 <NRF24_write_register>
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
	...

080011f0 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80011f6:	2000      	movs	r0, #0
 80011f8:	f7ff fbae 	bl	8000958 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 80011fc:	2350      	movs	r3, #80	; 0x50
 80011fe:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8001200:	2373      	movs	r3, #115	; 0x73
 8001202:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8001204:	1d39      	adds	r1, r7, #4
 8001206:	2364      	movs	r3, #100	; 0x64
 8001208:	2202      	movs	r2, #2
 800120a:	4805      	ldr	r0, [pc, #20]	; (8001220 <NRF24_ACTIVATE_cmd+0x30>)
 800120c:	f00c f9ec 	bl	800d5e8 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8001210:	2001      	movs	r0, #1
 8001212:	f7ff fba1 	bl	8000958 <NRF24_csn>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	24000240 	.word	0x24000240

08001224 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8001224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001226:	b0a1      	sub	sp, #132	; 0x84
 8001228:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800122a:	f107 0308 	add.w	r3, r7, #8
 800122e:	4ab6      	ldr	r2, [pc, #728]	; (8001508 <printRadioSettings+0x2e4>)
 8001230:	461c      	mov	r4, r3
 8001232:	4615      	mov	r5, r2
 8001234:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001236:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001238:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800123a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800123c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800123e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001240:	682b      	ldr	r3, [r5, #0]
 8001242:	461a      	mov	r2, r3
 8001244:	8022      	strh	r2, [r4, #0]
 8001246:	3402      	adds	r4, #2
 8001248:	0c1b      	lsrs	r3, r3, #16
 800124a:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800124c:	f107 0308 	add.w	r3, r7, #8
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff f845 	bl	80002e0 <strlen>
 8001256:	4603      	mov	r3, r0
 8001258:	b29a      	uxth	r2, r3
 800125a:	f107 0108 	add.w	r1, r7, #8
 800125e:	230a      	movs	r3, #10
 8001260:	48aa      	ldr	r0, [pc, #680]	; (800150c <printRadioSettings+0x2e8>)
 8001262:	f00d f9ca 	bl	800e5fa <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8001266:	2000      	movs	r0, #0
 8001268:	f7ff fbb6 	bl	80009d8 <NRF24_read_register>
 800126c:	4603      	mov	r3, r0
 800126e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8001272:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001276:	f003 0308 	and.w	r3, r3, #8
 800127a:	2b00      	cmp	r3, #0
 800127c:	d020      	beq.n	80012c0 <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 800127e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001282:	f003 0304 	and.w	r3, r3, #4
 8001286:	2b00      	cmp	r3, #0
 8001288:	d00b      	beq.n	80012a2 <printRadioSettings+0x7e>
 800128a:	f107 0308 	add.w	r3, r7, #8
 800128e:	4aa0      	ldr	r2, [pc, #640]	; (8001510 <printRadioSettings+0x2ec>)
 8001290:	461c      	mov	r4, r3
 8001292:	4615      	mov	r5, r2
 8001294:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001296:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001298:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800129c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80012a0:	e017      	b.n	80012d2 <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 80012a2:	f107 0308 	add.w	r3, r7, #8
 80012a6:	4a9b      	ldr	r2, [pc, #620]	; (8001514 <printRadioSettings+0x2f0>)
 80012a8:	461c      	mov	r4, r3
 80012aa:	4615      	mov	r5, r2
 80012ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012b4:	c403      	stmia	r4!, {r0, r1}
 80012b6:	8022      	strh	r2, [r4, #0]
 80012b8:	3402      	adds	r4, #2
 80012ba:	0c13      	lsrs	r3, r2, #16
 80012bc:	7023      	strb	r3, [r4, #0]
 80012be:	e008      	b.n	80012d2 <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 80012c0:	f107 0308 	add.w	r3, r7, #8
 80012c4:	4a94      	ldr	r2, [pc, #592]	; (8001518 <printRadioSettings+0x2f4>)
 80012c6:	461c      	mov	r4, r3
 80012c8:	4615      	mov	r5, r2
 80012ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ce:	682b      	ldr	r3, [r5, #0]
 80012d0:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012d2:	f107 0308 	add.w	r3, r7, #8
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff f802 	bl	80002e0 <strlen>
 80012dc:	4603      	mov	r3, r0
 80012de:	b29a      	uxth	r2, r3
 80012e0:	f107 0108 	add.w	r1, r7, #8
 80012e4:	230a      	movs	r3, #10
 80012e6:	4889      	ldr	r0, [pc, #548]	; (800150c <printRadioSettings+0x2e8>)
 80012e8:	f00d f987 	bl	800e5fa <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 80012ec:	2001      	movs	r0, #1
 80012ee:	f7ff fb73 	bl	80009d8 <NRF24_read_register>
 80012f2:	4603      	mov	r3, r0
 80012f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012fc:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001300:	2b00      	cmp	r3, #0
 8001302:	bfcc      	ite	gt
 8001304:	2301      	movgt	r3, #1
 8001306:	2300      	movle	r3, #0
 8001308:	b2db      	uxtb	r3, r3
 800130a:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800130c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001310:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001314:	2b00      	cmp	r3, #0
 8001316:	bfcc      	ite	gt
 8001318:	2301      	movgt	r3, #1
 800131a:	2300      	movle	r3, #0
 800131c:	b2db      	uxtb	r3, r3
 800131e:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001320:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001324:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001328:	2b00      	cmp	r3, #0
 800132a:	bfcc      	ite	gt
 800132c:	2301      	movgt	r3, #1
 800132e:	2300      	movle	r3, #0
 8001330:	b2db      	uxtb	r3, r3
 8001332:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001334:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001338:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800133c:	2b00      	cmp	r3, #0
 800133e:	bfcc      	ite	gt
 8001340:	2301      	movgt	r3, #1
 8001342:	2300      	movle	r3, #0
 8001344:	b2db      	uxtb	r3, r3
 8001346:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001348:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800134c:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001350:	2b00      	cmp	r3, #0
 8001352:	bfcc      	ite	gt
 8001354:	2301      	movgt	r3, #1
 8001356:	2300      	movle	r3, #0
 8001358:	b2db      	uxtb	r3, r3
 800135a:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800135c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001360:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001364:	2b00      	cmp	r3, #0
 8001366:	bfcc      	ite	gt
 8001368:	2301      	movgt	r3, #1
 800136a:	2300      	movle	r3, #0
 800136c:	b2db      	uxtb	r3, r3
 800136e:	f107 0008 	add.w	r0, r7, #8
 8001372:	9303      	str	r3, [sp, #12]
 8001374:	9402      	str	r4, [sp, #8]
 8001376:	9101      	str	r1, [sp, #4]
 8001378:	9200      	str	r2, [sp, #0]
 800137a:	4633      	mov	r3, r6
 800137c:	462a      	mov	r2, r5
 800137e:	4967      	ldr	r1, [pc, #412]	; (800151c <printRadioSettings+0x2f8>)
 8001380:	f016 ff26 	bl	80181d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001384:	f107 0308 	add.w	r3, r7, #8
 8001388:	4618      	mov	r0, r3
 800138a:	f7fe ffa9 	bl	80002e0 <strlen>
 800138e:	4603      	mov	r3, r0
 8001390:	b29a      	uxth	r2, r3
 8001392:	f107 0108 	add.w	r1, r7, #8
 8001396:	230a      	movs	r3, #10
 8001398:	485c      	ldr	r0, [pc, #368]	; (800150c <printRadioSettings+0x2e8>)
 800139a:	f00d f92e 	bl	800e5fa <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 800139e:	2002      	movs	r0, #2
 80013a0:	f7ff fb1a 	bl	80009d8 <NRF24_read_register>
 80013a4:	4603      	mov	r3, r0
 80013a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80013aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013ae:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	bfcc      	ite	gt
 80013b6:	2301      	movgt	r3, #1
 80013b8:	2300      	movle	r3, #0
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80013be:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013c2:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	bfcc      	ite	gt
 80013ca:	2301      	movgt	r3, #1
 80013cc:	2300      	movle	r3, #0
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80013d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013d6:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80013da:	2b00      	cmp	r3, #0
 80013dc:	bfcc      	ite	gt
 80013de:	2301      	movgt	r3, #1
 80013e0:	2300      	movle	r3, #0
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80013e6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013ea:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	bfcc      	ite	gt
 80013f2:	2301      	movgt	r3, #1
 80013f4:	2300      	movle	r3, #0
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80013fa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013fe:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001402:	2b00      	cmp	r3, #0
 8001404:	bfcc      	ite	gt
 8001406:	2301      	movgt	r3, #1
 8001408:	2300      	movle	r3, #0
 800140a:	b2db      	uxtb	r3, r3
 800140c:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800140e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001412:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001416:	2b00      	cmp	r3, #0
 8001418:	bfcc      	ite	gt
 800141a:	2301      	movgt	r3, #1
 800141c:	2300      	movle	r3, #0
 800141e:	b2db      	uxtb	r3, r3
 8001420:	f107 0008 	add.w	r0, r7, #8
 8001424:	9303      	str	r3, [sp, #12]
 8001426:	9402      	str	r4, [sp, #8]
 8001428:	9101      	str	r1, [sp, #4]
 800142a:	9200      	str	r2, [sp, #0]
 800142c:	4633      	mov	r3, r6
 800142e:	462a      	mov	r2, r5
 8001430:	493b      	ldr	r1, [pc, #236]	; (8001520 <printRadioSettings+0x2fc>)
 8001432:	f016 fecd 	bl	80181d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001436:	f107 0308 	add.w	r3, r7, #8
 800143a:	4618      	mov	r0, r3
 800143c:	f7fe ff50 	bl	80002e0 <strlen>
 8001440:	4603      	mov	r3, r0
 8001442:	b29a      	uxth	r2, r3
 8001444:	f107 0108 	add.w	r1, r7, #8
 8001448:	230a      	movs	r3, #10
 800144a:	4830      	ldr	r0, [pc, #192]	; (800150c <printRadioSettings+0x2e8>)
 800144c:	f00d f8d5 	bl	800e5fa <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8001450:	2003      	movs	r0, #3
 8001452:	f7ff fac1 	bl	80009d8 <NRF24_read_register>
 8001456:	4603      	mov	r3, r0
 8001458:	f003 0303 	and.w	r3, r3, #3
 800145c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8001460:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001464:	3302      	adds	r3, #2
 8001466:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 800146a:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800146e:	f107 0308 	add.w	r3, r7, #8
 8001472:	492c      	ldr	r1, [pc, #176]	; (8001524 <printRadioSettings+0x300>)
 8001474:	4618      	mov	r0, r3
 8001476:	f016 feab 	bl	80181d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800147a:	f107 0308 	add.w	r3, r7, #8
 800147e:	4618      	mov	r0, r3
 8001480:	f7fe ff2e 	bl	80002e0 <strlen>
 8001484:	4603      	mov	r3, r0
 8001486:	b29a      	uxth	r2, r3
 8001488:	f107 0108 	add.w	r1, r7, #8
 800148c:	230a      	movs	r3, #10
 800148e:	481f      	ldr	r0, [pc, #124]	; (800150c <printRadioSettings+0x2e8>)
 8001490:	f00d f8b3 	bl	800e5fa <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8001494:	2005      	movs	r0, #5
 8001496:	f7ff fa9f 	bl	80009d8 <NRF24_read_register>
 800149a:	4603      	mov	r3, r0
 800149c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 80014a0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80014a8:	f107 0308 	add.w	r3, r7, #8
 80014ac:	491e      	ldr	r1, [pc, #120]	; (8001528 <printRadioSettings+0x304>)
 80014ae:	4618      	mov	r0, r3
 80014b0:	f016 fe8e 	bl	80181d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014b4:	f107 0308 	add.w	r3, r7, #8
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7fe ff11 	bl	80002e0 <strlen>
 80014be:	4603      	mov	r3, r0
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	f107 0108 	add.w	r1, r7, #8
 80014c6:	230a      	movs	r3, #10
 80014c8:	4810      	ldr	r0, [pc, #64]	; (800150c <printRadioSettings+0x2e8>)
 80014ca:	f00d f896 	bl	800e5fa <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 80014ce:	2006      	movs	r0, #6
 80014d0:	f7ff fa82 	bl	80009d8 <NRF24_read_register>
 80014d4:	4603      	mov	r3, r0
 80014d6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 80014da:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014de:	f003 0308 	and.w	r3, r3, #8
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d024      	beq.n	8001530 <printRadioSettings+0x30c>
 80014e6:	f107 0308 	add.w	r3, r7, #8
 80014ea:	4a10      	ldr	r2, [pc, #64]	; (800152c <printRadioSettings+0x308>)
 80014ec:	461c      	mov	r4, r3
 80014ee:	4615      	mov	r5, r2
 80014f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80014f8:	6020      	str	r0, [r4, #0]
 80014fa:	3404      	adds	r4, #4
 80014fc:	8021      	strh	r1, [r4, #0]
 80014fe:	3402      	adds	r4, #2
 8001500:	0c0b      	lsrs	r3, r1, #16
 8001502:	7023      	strb	r3, [r4, #0]
 8001504:	e023      	b.n	800154e <printRadioSettings+0x32a>
 8001506:	bf00      	nop
 8001508:	080191d8 	.word	0x080191d8
 800150c:	240002c8 	.word	0x240002c8
 8001510:	0801920c 	.word	0x0801920c
 8001514:	08019228 	.word	0x08019228
 8001518:	08019244 	.word	0x08019244
 800151c:	08019258 	.word	0x08019258
 8001520:	0801929c 	.word	0x0801929c
 8001524:	080192e8 	.word	0x080192e8
 8001528:	08019304 	.word	0x08019304
 800152c:	08019318 	.word	0x08019318
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8001530:	f107 0308 	add.w	r3, r7, #8
 8001534:	4a29      	ldr	r2, [pc, #164]	; (80015dc <printRadioSettings+0x3b8>)
 8001536:	461c      	mov	r4, r3
 8001538:	4615      	mov	r5, r2
 800153a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800153c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800153e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001542:	6020      	str	r0, [r4, #0]
 8001544:	3404      	adds	r4, #4
 8001546:	8021      	strh	r1, [r4, #0]
 8001548:	3402      	adds	r4, #2
 800154a:	0c0b      	lsrs	r3, r1, #16
 800154c:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800154e:	f107 0308 	add.w	r3, r7, #8
 8001552:	4618      	mov	r0, r3
 8001554:	f7fe fec4 	bl	80002e0 <strlen>
 8001558:	4603      	mov	r3, r0
 800155a:	b29a      	uxth	r2, r3
 800155c:	f107 0108 	add.w	r1, r7, #8
 8001560:	230a      	movs	r3, #10
 8001562:	481f      	ldr	r0, [pc, #124]	; (80015e0 <printRadioSettings+0x3bc>)
 8001564:	f00d f849 	bl	800e5fa <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8001568:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800156c:	f003 0306 	and.w	r3, r3, #6
 8001570:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8001574:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001578:	085b      	lsrs	r3, r3, #1
 800157a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 800157e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001582:	2b00      	cmp	r3, #0
 8001584:	d109      	bne.n	800159a <printRadioSettings+0x376>
 8001586:	f107 0308 	add.w	r3, r7, #8
 800158a:	4a16      	ldr	r2, [pc, #88]	; (80015e4 <printRadioSettings+0x3c0>)
 800158c:	461c      	mov	r4, r3
 800158e:	4615      	mov	r5, r2
 8001590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001594:	682b      	ldr	r3, [r5, #0]
 8001596:	6023      	str	r3, [r4, #0]
 8001598:	e037      	b.n	800160a <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 800159a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d109      	bne.n	80015b6 <printRadioSettings+0x392>
 80015a2:	f107 0308 	add.w	r3, r7, #8
 80015a6:	4a10      	ldr	r2, [pc, #64]	; (80015e8 <printRadioSettings+0x3c4>)
 80015a8:	461c      	mov	r4, r3
 80015aa:	4615      	mov	r5, r2
 80015ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015b0:	682b      	ldr	r3, [r5, #0]
 80015b2:	6023      	str	r3, [r4, #0]
 80015b4:	e029      	b.n	800160a <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 80015b6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d118      	bne.n	80015f0 <printRadioSettings+0x3cc>
 80015be:	f107 0308 	add.w	r3, r7, #8
 80015c2:	4a0a      	ldr	r2, [pc, #40]	; (80015ec <printRadioSettings+0x3c8>)
 80015c4:	461c      	mov	r4, r3
 80015c6:	4615      	mov	r5, r2
 80015c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015cc:	682b      	ldr	r3, [r5, #0]
 80015ce:	461a      	mov	r2, r3
 80015d0:	8022      	strh	r2, [r4, #0]
 80015d2:	3402      	adds	r4, #2
 80015d4:	0c1b      	lsrs	r3, r3, #16
 80015d6:	7023      	strb	r3, [r4, #0]
 80015d8:	e017      	b.n	800160a <printRadioSettings+0x3e6>
 80015da:	bf00      	nop
 80015dc:	08019330 	.word	0x08019330
 80015e0:	240002c8 	.word	0x240002c8
 80015e4:	08019348 	.word	0x08019348
 80015e8:	0801935c 	.word	0x0801935c
 80015ec:	08019370 	.word	0x08019370
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 80015f0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015f4:	2b03      	cmp	r3, #3
 80015f6:	d108      	bne.n	800160a <printRadioSettings+0x3e6>
 80015f8:	f107 0308 	add.w	r3, r7, #8
 80015fc:	4ad7      	ldr	r2, [pc, #860]	; (800195c <printRadioSettings+0x738>)
 80015fe:	461c      	mov	r4, r3
 8001600:	4615      	mov	r5, r2
 8001602:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001604:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001606:	682b      	ldr	r3, [r5, #0]
 8001608:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800160a:	f107 0308 	add.w	r3, r7, #8
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe fe66 	bl	80002e0 <strlen>
 8001614:	4603      	mov	r3, r0
 8001616:	b29a      	uxth	r2, r3
 8001618:	f107 0108 	add.w	r1, r7, #8
 800161c:	230a      	movs	r3, #10
 800161e:	48d0      	ldr	r0, [pc, #832]	; (8001960 <printRadioSettings+0x73c>)
 8001620:	f00c ffeb 	bl	800e5fa <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001624:	463b      	mov	r3, r7
 8001626:	2205      	movs	r2, #5
 8001628:	4619      	mov	r1, r3
 800162a:	200a      	movs	r0, #10
 800162c:	f7ff f9fc 	bl	8000a28 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001630:	793b      	ldrb	r3, [r7, #4]
 8001632:	461c      	mov	r4, r3
 8001634:	78fb      	ldrb	r3, [r7, #3]
 8001636:	461d      	mov	r5, r3
 8001638:	78bb      	ldrb	r3, [r7, #2]
 800163a:	787a      	ldrb	r2, [r7, #1]
 800163c:	7839      	ldrb	r1, [r7, #0]
 800163e:	f107 0008 	add.w	r0, r7, #8
 8001642:	9102      	str	r1, [sp, #8]
 8001644:	9201      	str	r2, [sp, #4]
 8001646:	9300      	str	r3, [sp, #0]
 8001648:	462b      	mov	r3, r5
 800164a:	4622      	mov	r2, r4
 800164c:	49c5      	ldr	r1, [pc, #788]	; (8001964 <printRadioSettings+0x740>)
 800164e:	f016 fdbf 	bl	80181d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001652:	f107 0308 	add.w	r3, r7, #8
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe fe42 	bl	80002e0 <strlen>
 800165c:	4603      	mov	r3, r0
 800165e:	b29a      	uxth	r2, r3
 8001660:	f107 0108 	add.w	r1, r7, #8
 8001664:	230a      	movs	r3, #10
 8001666:	48be      	ldr	r0, [pc, #760]	; (8001960 <printRadioSettings+0x73c>)
 8001668:	f00c ffc7 	bl	800e5fa <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 800166c:	463b      	mov	r3, r7
 800166e:	2205      	movs	r2, #5
 8001670:	4619      	mov	r1, r3
 8001672:	200b      	movs	r0, #11
 8001674:	f7ff f9d8 	bl	8000a28 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001678:	793b      	ldrb	r3, [r7, #4]
 800167a:	461c      	mov	r4, r3
 800167c:	78fb      	ldrb	r3, [r7, #3]
 800167e:	461d      	mov	r5, r3
 8001680:	78bb      	ldrb	r3, [r7, #2]
 8001682:	787a      	ldrb	r2, [r7, #1]
 8001684:	7839      	ldrb	r1, [r7, #0]
 8001686:	f107 0008 	add.w	r0, r7, #8
 800168a:	9102      	str	r1, [sp, #8]
 800168c:	9201      	str	r2, [sp, #4]
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	462b      	mov	r3, r5
 8001692:	4622      	mov	r2, r4
 8001694:	49b4      	ldr	r1, [pc, #720]	; (8001968 <printRadioSettings+0x744>)
 8001696:	f016 fd9b 	bl	80181d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800169a:	f107 0308 	add.w	r3, r7, #8
 800169e:	4618      	mov	r0, r3
 80016a0:	f7fe fe1e 	bl	80002e0 <strlen>
 80016a4:	4603      	mov	r3, r0
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	f107 0108 	add.w	r1, r7, #8
 80016ac:	230a      	movs	r3, #10
 80016ae:	48ac      	ldr	r0, [pc, #688]	; (8001960 <printRadioSettings+0x73c>)
 80016b0:	f00c ffa3 	bl	800e5fa <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 80016b4:	463b      	mov	r3, r7
 80016b6:	2201      	movs	r2, #1
 80016b8:	4619      	mov	r1, r3
 80016ba:	200c      	movs	r0, #12
 80016bc:	f7ff f9b4 	bl	8000a28 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80016c0:	783b      	ldrb	r3, [r7, #0]
 80016c2:	461a      	mov	r2, r3
 80016c4:	f107 0308 	add.w	r3, r7, #8
 80016c8:	49a8      	ldr	r1, [pc, #672]	; (800196c <printRadioSettings+0x748>)
 80016ca:	4618      	mov	r0, r3
 80016cc:	f016 fd80 	bl	80181d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016d0:	f107 0308 	add.w	r3, r7, #8
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe fe03 	bl	80002e0 <strlen>
 80016da:	4603      	mov	r3, r0
 80016dc:	b29a      	uxth	r2, r3
 80016de:	f107 0108 	add.w	r1, r7, #8
 80016e2:	230a      	movs	r3, #10
 80016e4:	489e      	ldr	r0, [pc, #632]	; (8001960 <printRadioSettings+0x73c>)
 80016e6:	f00c ff88 	bl	800e5fa <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 80016ea:	463b      	mov	r3, r7
 80016ec:	2201      	movs	r2, #1
 80016ee:	4619      	mov	r1, r3
 80016f0:	200d      	movs	r0, #13
 80016f2:	f7ff f999 	bl	8000a28 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80016f6:	783b      	ldrb	r3, [r7, #0]
 80016f8:	461a      	mov	r2, r3
 80016fa:	f107 0308 	add.w	r3, r7, #8
 80016fe:	499c      	ldr	r1, [pc, #624]	; (8001970 <printRadioSettings+0x74c>)
 8001700:	4618      	mov	r0, r3
 8001702:	f016 fd65 	bl	80181d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001706:	f107 0308 	add.w	r3, r7, #8
 800170a:	4618      	mov	r0, r3
 800170c:	f7fe fde8 	bl	80002e0 <strlen>
 8001710:	4603      	mov	r3, r0
 8001712:	b29a      	uxth	r2, r3
 8001714:	f107 0108 	add.w	r1, r7, #8
 8001718:	230a      	movs	r3, #10
 800171a:	4891      	ldr	r0, [pc, #580]	; (8001960 <printRadioSettings+0x73c>)
 800171c:	f00c ff6d 	bl	800e5fa <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8001720:	463b      	mov	r3, r7
 8001722:	2201      	movs	r2, #1
 8001724:	4619      	mov	r1, r3
 8001726:	200e      	movs	r0, #14
 8001728:	f7ff f97e 	bl	8000a28 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800172c:	783b      	ldrb	r3, [r7, #0]
 800172e:	461a      	mov	r2, r3
 8001730:	f107 0308 	add.w	r3, r7, #8
 8001734:	498f      	ldr	r1, [pc, #572]	; (8001974 <printRadioSettings+0x750>)
 8001736:	4618      	mov	r0, r3
 8001738:	f016 fd4a 	bl	80181d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800173c:	f107 0308 	add.w	r3, r7, #8
 8001740:	4618      	mov	r0, r3
 8001742:	f7fe fdcd 	bl	80002e0 <strlen>
 8001746:	4603      	mov	r3, r0
 8001748:	b29a      	uxth	r2, r3
 800174a:	f107 0108 	add.w	r1, r7, #8
 800174e:	230a      	movs	r3, #10
 8001750:	4883      	ldr	r0, [pc, #524]	; (8001960 <printRadioSettings+0x73c>)
 8001752:	f00c ff52 	bl	800e5fa <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001756:	463b      	mov	r3, r7
 8001758:	2201      	movs	r2, #1
 800175a:	4619      	mov	r1, r3
 800175c:	200f      	movs	r0, #15
 800175e:	f7ff f963 	bl	8000a28 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001762:	783b      	ldrb	r3, [r7, #0]
 8001764:	461a      	mov	r2, r3
 8001766:	f107 0308 	add.w	r3, r7, #8
 800176a:	4983      	ldr	r1, [pc, #524]	; (8001978 <printRadioSettings+0x754>)
 800176c:	4618      	mov	r0, r3
 800176e:	f016 fd2f 	bl	80181d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001772:	f107 0308 	add.w	r3, r7, #8
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe fdb2 	bl	80002e0 <strlen>
 800177c:	4603      	mov	r3, r0
 800177e:	b29a      	uxth	r2, r3
 8001780:	f107 0108 	add.w	r1, r7, #8
 8001784:	230a      	movs	r3, #10
 8001786:	4876      	ldr	r0, [pc, #472]	; (8001960 <printRadioSettings+0x73c>)
 8001788:	f00c ff37 	bl	800e5fa <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 800178c:	463b      	mov	r3, r7
 800178e:	2205      	movs	r2, #5
 8001790:	4619      	mov	r1, r3
 8001792:	2010      	movs	r0, #16
 8001794:	f7ff f948 	bl	8000a28 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001798:	793b      	ldrb	r3, [r7, #4]
 800179a:	461c      	mov	r4, r3
 800179c:	78fb      	ldrb	r3, [r7, #3]
 800179e:	461d      	mov	r5, r3
 80017a0:	78bb      	ldrb	r3, [r7, #2]
 80017a2:	787a      	ldrb	r2, [r7, #1]
 80017a4:	7839      	ldrb	r1, [r7, #0]
 80017a6:	f107 0008 	add.w	r0, r7, #8
 80017aa:	9102      	str	r1, [sp, #8]
 80017ac:	9201      	str	r2, [sp, #4]
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	462b      	mov	r3, r5
 80017b2:	4622      	mov	r2, r4
 80017b4:	4971      	ldr	r1, [pc, #452]	; (800197c <printRadioSettings+0x758>)
 80017b6:	f016 fd0b 	bl	80181d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017ba:	f107 0308 	add.w	r3, r7, #8
 80017be:	4618      	mov	r0, r3
 80017c0:	f7fe fd8e 	bl	80002e0 <strlen>
 80017c4:	4603      	mov	r3, r0
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	f107 0108 	add.w	r1, r7, #8
 80017cc:	230a      	movs	r3, #10
 80017ce:	4864      	ldr	r0, [pc, #400]	; (8001960 <printRadioSettings+0x73c>)
 80017d0:	f00c ff13 	bl	800e5fa <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 80017d4:	2011      	movs	r0, #17
 80017d6:	f7ff f8ff 	bl	80009d8 <NRF24_read_register>
 80017da:	4603      	mov	r3, r0
 80017dc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80017e0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017e8:	f107 0308 	add.w	r3, r7, #8
 80017ec:	4964      	ldr	r1, [pc, #400]	; (8001980 <printRadioSettings+0x75c>)
 80017ee:	4618      	mov	r0, r3
 80017f0:	f016 fcee 	bl	80181d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017f4:	f107 0308 	add.w	r3, r7, #8
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe fd71 	bl	80002e0 <strlen>
 80017fe:	4603      	mov	r3, r0
 8001800:	b29a      	uxth	r2, r3
 8001802:	f107 0108 	add.w	r1, r7, #8
 8001806:	230a      	movs	r3, #10
 8001808:	4855      	ldr	r0, [pc, #340]	; (8001960 <printRadioSettings+0x73c>)
 800180a:	f00c fef6 	bl	800e5fa <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 800180e:	2012      	movs	r0, #18
 8001810:	f7ff f8e2 	bl	80009d8 <NRF24_read_register>
 8001814:	4603      	mov	r3, r0
 8001816:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800181a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800181e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001822:	f107 0308 	add.w	r3, r7, #8
 8001826:	4957      	ldr	r1, [pc, #348]	; (8001984 <printRadioSettings+0x760>)
 8001828:	4618      	mov	r0, r3
 800182a:	f016 fcd1 	bl	80181d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800182e:	f107 0308 	add.w	r3, r7, #8
 8001832:	4618      	mov	r0, r3
 8001834:	f7fe fd54 	bl	80002e0 <strlen>
 8001838:	4603      	mov	r3, r0
 800183a:	b29a      	uxth	r2, r3
 800183c:	f107 0108 	add.w	r1, r7, #8
 8001840:	230a      	movs	r3, #10
 8001842:	4847      	ldr	r0, [pc, #284]	; (8001960 <printRadioSettings+0x73c>)
 8001844:	f00c fed9 	bl	800e5fa <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8001848:	2013      	movs	r0, #19
 800184a:	f7ff f8c5 	bl	80009d8 <NRF24_read_register>
 800184e:	4603      	mov	r3, r0
 8001850:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001854:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001858:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800185c:	f107 0308 	add.w	r3, r7, #8
 8001860:	4949      	ldr	r1, [pc, #292]	; (8001988 <printRadioSettings+0x764>)
 8001862:	4618      	mov	r0, r3
 8001864:	f016 fcb4 	bl	80181d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001868:	f107 0308 	add.w	r3, r7, #8
 800186c:	4618      	mov	r0, r3
 800186e:	f7fe fd37 	bl	80002e0 <strlen>
 8001872:	4603      	mov	r3, r0
 8001874:	b29a      	uxth	r2, r3
 8001876:	f107 0108 	add.w	r1, r7, #8
 800187a:	230a      	movs	r3, #10
 800187c:	4838      	ldr	r0, [pc, #224]	; (8001960 <printRadioSettings+0x73c>)
 800187e:	f00c febc 	bl	800e5fa <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8001882:	2014      	movs	r0, #20
 8001884:	f7ff f8a8 	bl	80009d8 <NRF24_read_register>
 8001888:	4603      	mov	r3, r0
 800188a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800188e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001892:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001896:	f107 0308 	add.w	r3, r7, #8
 800189a:	493c      	ldr	r1, [pc, #240]	; (800198c <printRadioSettings+0x768>)
 800189c:	4618      	mov	r0, r3
 800189e:	f016 fc97 	bl	80181d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018a2:	f107 0308 	add.w	r3, r7, #8
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7fe fd1a 	bl	80002e0 <strlen>
 80018ac:	4603      	mov	r3, r0
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	f107 0108 	add.w	r1, r7, #8
 80018b4:	230a      	movs	r3, #10
 80018b6:	482a      	ldr	r0, [pc, #168]	; (8001960 <printRadioSettings+0x73c>)
 80018b8:	f00c fe9f 	bl	800e5fa <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 80018bc:	2015      	movs	r0, #21
 80018be:	f7ff f88b 	bl	80009d8 <NRF24_read_register>
 80018c2:	4603      	mov	r3, r0
 80018c4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80018c8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80018cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018d0:	f107 0308 	add.w	r3, r7, #8
 80018d4:	492e      	ldr	r1, [pc, #184]	; (8001990 <printRadioSettings+0x76c>)
 80018d6:	4618      	mov	r0, r3
 80018d8:	f016 fc7a 	bl	80181d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018dc:	f107 0308 	add.w	r3, r7, #8
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7fe fcfd 	bl	80002e0 <strlen>
 80018e6:	4603      	mov	r3, r0
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	f107 0108 	add.w	r1, r7, #8
 80018ee:	230a      	movs	r3, #10
 80018f0:	481b      	ldr	r0, [pc, #108]	; (8001960 <printRadioSettings+0x73c>)
 80018f2:	f00c fe82 	bl	800e5fa <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 80018f6:	2016      	movs	r0, #22
 80018f8:	f7ff f86e 	bl	80009d8 <NRF24_read_register>
 80018fc:	4603      	mov	r3, r0
 80018fe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001902:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001906:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800190a:	f107 0308 	add.w	r3, r7, #8
 800190e:	4921      	ldr	r1, [pc, #132]	; (8001994 <printRadioSettings+0x770>)
 8001910:	4618      	mov	r0, r3
 8001912:	f016 fc5d 	bl	80181d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001916:	f107 0308 	add.w	r3, r7, #8
 800191a:	4618      	mov	r0, r3
 800191c:	f7fe fce0 	bl	80002e0 <strlen>
 8001920:	4603      	mov	r3, r0
 8001922:	b29a      	uxth	r2, r3
 8001924:	f107 0108 	add.w	r1, r7, #8
 8001928:	230a      	movs	r3, #10
 800192a:	480d      	ldr	r0, [pc, #52]	; (8001960 <printRadioSettings+0x73c>)
 800192c:	f00c fe65 	bl	800e5fa <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8001930:	201c      	movs	r0, #28
 8001932:	f7ff f851 	bl	80009d8 <NRF24_read_register>
 8001936:	4603      	mov	r3, r0
 8001938:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800193c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001940:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001944:	2b00      	cmp	r3, #0
 8001946:	bfcc      	ite	gt
 8001948:	2301      	movgt	r3, #1
 800194a:	2300      	movle	r3, #0
 800194c:	b2db      	uxtb	r3, r3
 800194e:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001950:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	e01e      	b.n	8001998 <printRadioSettings+0x774>
 800195a:	bf00      	nop
 800195c:	08019384 	.word	0x08019384
 8001960:	240002c8 	.word	0x240002c8
 8001964:	08019398 	.word	0x08019398
 8001968:	080193c8 	.word	0x080193c8
 800196c:	080193f8 	.word	0x080193f8
 8001970:	08019420 	.word	0x08019420
 8001974:	08019448 	.word	0x08019448
 8001978:	08019470 	.word	0x08019470
 800197c:	08019498 	.word	0x08019498
 8001980:	080194c4 	.word	0x080194c4
 8001984:	080194e0 	.word	0x080194e0
 8001988:	080194fc 	.word	0x080194fc
 800198c:	08019518 	.word	0x08019518
 8001990:	08019534 	.word	0x08019534
 8001994:	08019550 	.word	0x08019550
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001998:	2b00      	cmp	r3, #0
 800199a:	bfcc      	ite	gt
 800199c:	2301      	movgt	r3, #1
 800199e:	2300      	movle	r3, #0
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80019a4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80019a8:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	bfcc      	ite	gt
 80019b0:	2301      	movgt	r3, #1
 80019b2:	2300      	movle	r3, #0
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80019b8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80019bc:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	bfcc      	ite	gt
 80019c4:	2301      	movgt	r3, #1
 80019c6:	2300      	movle	r3, #0
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80019cc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80019d0:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	bfcc      	ite	gt
 80019d8:	2301      	movgt	r3, #1
 80019da:	2300      	movle	r3, #0
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80019e0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80019e4:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	bfcc      	ite	gt
 80019ec:	2301      	movgt	r3, #1
 80019ee:	2300      	movle	r3, #0
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	f107 0008 	add.w	r0, r7, #8
 80019f6:	9303      	str	r3, [sp, #12]
 80019f8:	9402      	str	r4, [sp, #8]
 80019fa:	9101      	str	r1, [sp, #4]
 80019fc:	9200      	str	r2, [sp, #0]
 80019fe:	4633      	mov	r3, r6
 8001a00:	462a      	mov	r2, r5
 8001a02:	494a      	ldr	r1, [pc, #296]	; (8001b2c <printRadioSettings+0x908>)
 8001a04:	f016 fbe4 	bl	80181d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a08:	f107 0308 	add.w	r3, r7, #8
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7fe fc67 	bl	80002e0 <strlen>
 8001a12:	4603      	mov	r3, r0
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	f107 0108 	add.w	r1, r7, #8
 8001a1a:	230a      	movs	r3, #10
 8001a1c:	4844      	ldr	r0, [pc, #272]	; (8001b30 <printRadioSettings+0x90c>)
 8001a1e:	f00c fdec 	bl	800e5fa <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8001a22:	201d      	movs	r0, #29
 8001a24:	f7fe ffd8 	bl	80009d8 <NRF24_read_register>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8001a2e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a32:	f003 0304 	and.w	r3, r3, #4
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d00c      	beq.n	8001a54 <printRadioSettings+0x830>
 8001a3a:	f107 0308 	add.w	r3, r7, #8
 8001a3e:	4a3d      	ldr	r2, [pc, #244]	; (8001b34 <printRadioSettings+0x910>)
 8001a40:	461c      	mov	r4, r3
 8001a42:	4615      	mov	r5, r2
 8001a44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a48:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a4c:	6020      	str	r0, [r4, #0]
 8001a4e:	3404      	adds	r4, #4
 8001a50:	8021      	strh	r1, [r4, #0]
 8001a52:	e00e      	b.n	8001a72 <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001a54:	f107 0308 	add.w	r3, r7, #8
 8001a58:	4a37      	ldr	r2, [pc, #220]	; (8001b38 <printRadioSettings+0x914>)
 8001a5a:	461c      	mov	r4, r3
 8001a5c:	4615      	mov	r5, r2
 8001a5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a62:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a66:	6020      	str	r0, [r4, #0]
 8001a68:	3404      	adds	r4, #4
 8001a6a:	8021      	strh	r1, [r4, #0]
 8001a6c:	3402      	adds	r4, #2
 8001a6e:	0c0b      	lsrs	r3, r1, #16
 8001a70:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a72:	f107 0308 	add.w	r3, r7, #8
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7fe fc32 	bl	80002e0 <strlen>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	f107 0108 	add.w	r1, r7, #8
 8001a84:	230a      	movs	r3, #10
 8001a86:	482a      	ldr	r0, [pc, #168]	; (8001b30 <printRadioSettings+0x90c>)
 8001a88:	f00c fdb7 	bl	800e5fa <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001a8c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d00b      	beq.n	8001ab0 <printRadioSettings+0x88c>
 8001a98:	f107 0308 	add.w	r3, r7, #8
 8001a9c:	4a27      	ldr	r2, [pc, #156]	; (8001b3c <printRadioSettings+0x918>)
 8001a9e:	461c      	mov	r4, r3
 8001aa0:	4615      	mov	r5, r2
 8001aa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aa6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001aaa:	c403      	stmia	r4!, {r0, r1}
 8001aac:	8022      	strh	r2, [r4, #0]
 8001aae:	e00d      	b.n	8001acc <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001ab0:	f107 0308 	add.w	r3, r7, #8
 8001ab4:	4a22      	ldr	r2, [pc, #136]	; (8001b40 <printRadioSettings+0x91c>)
 8001ab6:	461c      	mov	r4, r3
 8001ab8:	4615      	mov	r5, r2
 8001aba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001abc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001abe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ac2:	c403      	stmia	r4!, {r0, r1}
 8001ac4:	8022      	strh	r2, [r4, #0]
 8001ac6:	3402      	adds	r4, #2
 8001ac8:	0c13      	lsrs	r3, r2, #16
 8001aca:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001acc:	f107 0308 	add.w	r3, r7, #8
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7fe fc05 	bl	80002e0 <strlen>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	f107 0108 	add.w	r1, r7, #8
 8001ade:	230a      	movs	r3, #10
 8001ae0:	4813      	ldr	r0, [pc, #76]	; (8001b30 <printRadioSettings+0x90c>)
 8001ae2:	f00c fd8a 	bl	800e5fa <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001ae6:	f107 0308 	add.w	r3, r7, #8
 8001aea:	4a16      	ldr	r2, [pc, #88]	; (8001b44 <printRadioSettings+0x920>)
 8001aec:	461c      	mov	r4, r3
 8001aee:	4615      	mov	r5, r2
 8001af0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001af2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001af4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001af6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001af8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001afa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001afc:	682b      	ldr	r3, [r5, #0]
 8001afe:	461a      	mov	r2, r3
 8001b00:	8022      	strh	r2, [r4, #0]
 8001b02:	3402      	adds	r4, #2
 8001b04:	0c1b      	lsrs	r3, r3, #16
 8001b06:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b08:	f107 0308 	add.w	r3, r7, #8
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7fe fbe7 	bl	80002e0 <strlen>
 8001b12:	4603      	mov	r3, r0
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	f107 0108 	add.w	r1, r7, #8
 8001b1a:	230a      	movs	r3, #10
 8001b1c:	4804      	ldr	r0, [pc, #16]	; (8001b30 <printRadioSettings+0x90c>)
 8001b1e:	f00c fd6c 	bl	800e5fa <HAL_UART_Transmit>
}
 8001b22:	bf00      	nop
 8001b24:	3774      	adds	r7, #116	; 0x74
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	0801956c 	.word	0x0801956c
 8001b30:	240002c8 	.word	0x240002c8
 8001b34:	080195b8 	.word	0x080195b8
 8001b38:	080195d0 	.word	0x080195d0
 8001b3c:	080195e8 	.word	0x080195e8
 8001b40:	08019604 	.word	0x08019604
 8001b44:	080191d8 	.word	0x080191d8

08001b48 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8001b48:	b084      	sub	sp, #16
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	f107 0c08 	add.w	ip, r7, #8
 8001b52:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8001b56:	4b07      	ldr	r3, [pc, #28]	; (8001b74 <nrf24_DebugUART_Init+0x2c>)
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f107 0108 	add.w	r1, r7, #8
 8001b5e:	238c      	movs	r3, #140	; 0x8c
 8001b60:	461a      	mov	r2, r3
 8001b62:	f016 f9b9 	bl	8017ed8 <memcpy>
}
 8001b66:	bf00      	nop
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001b6e:	b004      	add	sp, #16
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	240002c8 	.word	0x240002c8

08001b78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b7a:	f2ad 4d94 	subw	sp, sp, #1172	; 0x494
 8001b7e:	af22      	add	r7, sp, #136	; 0x88
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b80:	f001 fa92 	bl	80030a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b84:	f000 f9be 	bl	8001f04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b88:	f000 fd1e 	bl	80025c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b8c:	f000 fcfc 	bl	8002588 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8001b90:	f000 fbea 	bl	8002368 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8001b94:	f010 f866 	bl	8011c64 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8001b98:	f015 fc66 	bl	8017468 <MX_USB_DEVICE_Init>
  MX_FDCAN1_Init();
 8001b9c:	f000 fabc 	bl	8002118 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8001ba0:	f000 fb20 	bl	80021e4 <MX_FDCAN2_Init>
  MX_UART8_Init();
 8001ba4:	f000 fc58 	bl	8002458 <MX_UART8_Init>
  MX_USART3_UART_Init();
 8001ba8:	f000 fca2 	bl	80024f0 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8001bac:	f000 fbfe 	bl	80023ac <MX_SPI1_Init>
  MX_RTC_Init();
 8001bb0:	f000 fb7c 	bl	80022ac <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  //Telemetry
  NRF24_begin(TELE_CE_GPIO_Port, TELE_CS_Pin, TELE_CE_Pin, hspi1);
 8001bb4:	4ca7      	ldr	r4, [pc, #668]	; (8001e54 <main+0x2dc>)
 8001bb6:	4668      	mov	r0, sp
 8001bb8:	1d23      	adds	r3, r4, #4
 8001bba:	2284      	movs	r2, #132	; 0x84
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f016 f98b 	bl	8017ed8 <memcpy>
 8001bc2:	6823      	ldr	r3, [r4, #0]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	2102      	movs	r1, #2
 8001bc8:	48a3      	ldr	r0, [pc, #652]	; (8001e58 <main+0x2e0>)
 8001bca:	f7fe ffdf 	bl	8000b8c <NRF24_begin>
    nrf24_DebugUART_Init(huart3);
 8001bce:	4ca3      	ldr	r4, [pc, #652]	; (8001e5c <main+0x2e4>)
 8001bd0:	4668      	mov	r0, sp
 8001bd2:	f104 0310 	add.w	r3, r4, #16
 8001bd6:	227c      	movs	r2, #124	; 0x7c
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f016 f97d 	bl	8017ed8 <memcpy>
 8001bde:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001be2:	f7ff ffb1 	bl	8001b48 <nrf24_DebugUART_Init>



    // TRANSMIT NO ACK //
    NRF24_stopListening();
 8001be6:	f7ff f8b1 	bl	8000d4c <NRF24_stopListening>
    NRF24_openWritingPipe(TxpipeAddrs);
 8001bea:	4b9d      	ldr	r3, [pc, #628]	; (8001e60 <main+0x2e8>)
 8001bec:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	4621      	mov	r1, r4
 8001bf4:	f7ff f90a 	bl	8000e0c <NRF24_openWritingPipe>
    NRF24_setAutoAck(false);
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	f7ff f993 	bl	8000f24 <NRF24_setAutoAck>
    NRF24_setChannel(42);
 8001bfe:	202a      	movs	r0, #42	; 0x2a
 8001c00:	f7ff f943 	bl	8000e8a <NRF24_setChannel>
    NRF24_setPayloadSize(32);
 8001c04:	2020      	movs	r0, #32
 8001c06:	f7ff f955 	bl	8000eb4 <NRF24_setPayloadSize>

    printRadioSettings();
 8001c0a:	f7ff fb0b 	bl	8001224 <printRadioSettings>
  //END Telemetry
  printf("Starting\n");
 8001c0e:	4895      	ldr	r0, [pc, #596]	; (8001e64 <main+0x2ec>)
 8001c10:	f016 fa92 	bl	8018138 <puts>
  FDCAN_Config(&hfdcan1);
 8001c14:	4894      	ldr	r0, [pc, #592]	; (8001e68 <main+0x2f0>)
 8001c16:	f7fe fd3b 	bl	8000690 <FDCAN_Config>
  //GPS DMA
  HAL_UART_Receive_DMA(&huart3, (uint8_t *)rxBuf, BUFFLENGTH);
 8001c1a:	2246      	movs	r2, #70	; 0x46
 8001c1c:	4993      	ldr	r1, [pc, #588]	; (8001e6c <main+0x2f4>)
 8001c1e:	488f      	ldr	r0, [pc, #572]	; (8001e5c <main+0x2e4>)
 8001c20:	f00c fd82 	bl	800e728 <HAL_UART_Receive_DMA>
  HAL_Delay(1000);//GPS required this in testing, maybe remove?
 8001c24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c28:	f001 fad0 	bl	80031cc <HAL_Delay>
  //variables required for 10Hz GPS
  uint16_t measRate = 100;
 8001c2c:	2364      	movs	r3, #100	; 0x64
 8001c2e:	f8a7 3406 	strh.w	r3, [r7, #1030]	; 0x406
  uint16_t navRate = 1;
 8001c32:	2301      	movs	r3, #1
 8001c34:	f8a7 3404 	strh.w	r3, [r7, #1028]	; 0x404
  uint16_t timeRef = 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f8a7 3402 	strh.w	r3, [r7, #1026]	; 0x402
  gps_rate_config(&huart3, measRate, navRate, timeRef);
 8001c3e:	f8b7 3402 	ldrh.w	r3, [r7, #1026]	; 0x402
 8001c42:	f8b7 2404 	ldrh.w	r2, [r7, #1028]	; 0x404
 8001c46:	f8b7 1406 	ldrh.w	r1, [r7, #1030]	; 0x406
 8001c4a:	4884      	ldr	r0, [pc, #528]	; (8001e5c <main+0x2e4>)
 8001c4c:	f7fe fdf0 	bl	8000830 <gps_rate_config>

  gps_msg_config(&huart3, "DTM", 0);//ERROR
 8001c50:	2200      	movs	r2, #0
 8001c52:	4987      	ldr	r1, [pc, #540]	; (8001e70 <main+0x2f8>)
 8001c54:	4881      	ldr	r0, [pc, #516]	; (8001e5c <main+0x2e4>)
 8001c56:	f7fe fd7b 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GAQ", 0);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	4985      	ldr	r1, [pc, #532]	; (8001e74 <main+0x2fc>)
 8001c5e:	487f      	ldr	r0, [pc, #508]	; (8001e5c <main+0x2e4>)
 8001c60:	f7fe fd76 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GBQ", 0);
 8001c64:	2200      	movs	r2, #0
 8001c66:	4984      	ldr	r1, [pc, #528]	; (8001e78 <main+0x300>)
 8001c68:	487c      	ldr	r0, [pc, #496]	; (8001e5c <main+0x2e4>)
 8001c6a:	f7fe fd71 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GBS", 0);//ERROR
 8001c6e:	2200      	movs	r2, #0
 8001c70:	4982      	ldr	r1, [pc, #520]	; (8001e7c <main+0x304>)
 8001c72:	487a      	ldr	r0, [pc, #488]	; (8001e5c <main+0x2e4>)
 8001c74:	f7fe fd6c 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GGA", 0);//ERROR
 8001c78:	2200      	movs	r2, #0
 8001c7a:	4981      	ldr	r1, [pc, #516]	; (8001e80 <main+0x308>)
 8001c7c:	4877      	ldr	r0, [pc, #476]	; (8001e5c <main+0x2e4>)
 8001c7e:	f7fe fd67 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GLL", 0);//ERROR
 8001c82:	2200      	movs	r2, #0
 8001c84:	497f      	ldr	r1, [pc, #508]	; (8001e84 <main+0x30c>)
 8001c86:	4875      	ldr	r0, [pc, #468]	; (8001e5c <main+0x2e4>)
 8001c88:	f7fe fd62 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GLQ", 0);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	497e      	ldr	r1, [pc, #504]	; (8001e88 <main+0x310>)
 8001c90:	4872      	ldr	r0, [pc, #456]	; (8001e5c <main+0x2e4>)
 8001c92:	f7fe fd5d 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GNQ", 0);
 8001c96:	2200      	movs	r2, #0
 8001c98:	497c      	ldr	r1, [pc, #496]	; (8001e8c <main+0x314>)
 8001c9a:	4870      	ldr	r0, [pc, #448]	; (8001e5c <main+0x2e4>)
 8001c9c:	f7fe fd58 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GNS", 0);//ERROR
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	497b      	ldr	r1, [pc, #492]	; (8001e90 <main+0x318>)
 8001ca4:	486d      	ldr	r0, [pc, #436]	; (8001e5c <main+0x2e4>)
 8001ca6:	f7fe fd53 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GPQ", 0);
 8001caa:	2200      	movs	r2, #0
 8001cac:	4979      	ldr	r1, [pc, #484]	; (8001e94 <main+0x31c>)
 8001cae:	486b      	ldr	r0, [pc, #428]	; (8001e5c <main+0x2e4>)
 8001cb0:	f7fe fd4e 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GRS", 0);//ERROR
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	4978      	ldr	r1, [pc, #480]	; (8001e98 <main+0x320>)
 8001cb8:	4868      	ldr	r0, [pc, #416]	; (8001e5c <main+0x2e4>)
 8001cba:	f7fe fd49 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GSA", 0);//ERROR
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	4976      	ldr	r1, [pc, #472]	; (8001e9c <main+0x324>)
 8001cc2:	4866      	ldr	r0, [pc, #408]	; (8001e5c <main+0x2e4>)
 8001cc4:	f7fe fd44 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GST", 0);//ERROR
 8001cc8:	2200      	movs	r2, #0
 8001cca:	4975      	ldr	r1, [pc, #468]	; (8001ea0 <main+0x328>)
 8001ccc:	4863      	ldr	r0, [pc, #396]	; (8001e5c <main+0x2e4>)
 8001cce:	f7fe fd3f 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GSV", 0);//ERROR
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	4973      	ldr	r1, [pc, #460]	; (8001ea4 <main+0x32c>)
 8001cd6:	4861      	ldr	r0, [pc, #388]	; (8001e5c <main+0x2e4>)
 8001cd8:	f7fe fd3a 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "RLM", 0);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	4972      	ldr	r1, [pc, #456]	; (8001ea8 <main+0x330>)
 8001ce0:	485e      	ldr	r0, [pc, #376]	; (8001e5c <main+0x2e4>)
 8001ce2:	f7fe fd35 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "RMC", 1);//ERROR
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	4970      	ldr	r1, [pc, #448]	; (8001eac <main+0x334>)
 8001cea:	485c      	ldr	r0, [pc, #368]	; (8001e5c <main+0x2e4>)
 8001cec:	f7fe fd30 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "TXT", 0);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	496f      	ldr	r1, [pc, #444]	; (8001eb0 <main+0x338>)
 8001cf4:	4859      	ldr	r0, [pc, #356]	; (8001e5c <main+0x2e4>)
 8001cf6:	f7fe fd2b 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "VLW", 0);//ERROR
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	496d      	ldr	r1, [pc, #436]	; (8001eb4 <main+0x33c>)
 8001cfe:	4857      	ldr	r0, [pc, #348]	; (8001e5c <main+0x2e4>)
 8001d00:	f7fe fd26 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "VTG", 0);//ERROR
 8001d04:	2200      	movs	r2, #0
 8001d06:	496c      	ldr	r1, [pc, #432]	; (8001eb8 <main+0x340>)
 8001d08:	4854      	ldr	r0, [pc, #336]	; (8001e5c <main+0x2e4>)
 8001d0a:	f7fe fd21 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "ZDA", 0);//ERROR
 8001d0e:	2200      	movs	r2, #0
 8001d10:	496a      	ldr	r1, [pc, #424]	; (8001ebc <main+0x344>)
 8001d12:	4852      	ldr	r0, [pc, #328]	; (8001e5c <main+0x2e4>)
 8001d14:	f7fe fd1c 	bl	8000750 <gps_msg_config>

  if(f_mount(&myFATAFS, SDPath, 1) == FR_OK){
 8001d18:	2201      	movs	r2, #1
 8001d1a:	4969      	ldr	r1, [pc, #420]	; (8001ec0 <main+0x348>)
 8001d1c:	4869      	ldr	r0, [pc, #420]	; (8001ec4 <main+0x34c>)
 8001d1e:	f014 fde7 	bl	80168f0 <f_mount>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d17c      	bne.n	8001e22 <main+0x2aa>
  	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
  	  char myPath[] = "pvd4.csv\0";
 8001d28:	4a67      	ldr	r2, [pc, #412]	; (8001ec8 <main+0x350>)
 8001d2a:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8001d2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d30:	c303      	stmia	r3!, {r0, r1}
 8001d32:	801a      	strh	r2, [r3, #0]
      char ConfigPath[] ="Config.csv\0";
 8001d34:	4a65      	ldr	r2, [pc, #404]	; (8001ecc <main+0x354>)
 8001d36:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8001d3a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d3c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      char ConfigParams[1000];

      //Tries to open config File
      if(f_open(&Config, ConfigPath, FA_READ) == FR_NO_FILE){
 8001d40:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8001d44:	2201      	movs	r2, #1
 8001d46:	4619      	mov	r1, r3
 8001d48:	4861      	ldr	r0, [pc, #388]	; (8001ed0 <main+0x358>)
 8001d4a:	f014 fe17 	bl	801697c <f_open>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b04      	cmp	r3, #4
 8001d52:	d13f      	bne.n	8001dd4 <main+0x25c>
        //If file doesnt exist creates a file using hard coded defualts and passes those to internal config array
        f_open(&Config, ConfigPath, FA_WRITE | FA_CREATE_ALWAYS);
 8001d54:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8001d58:	220a      	movs	r2, #10
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	485c      	ldr	r0, [pc, #368]	; (8001ed0 <main+0x358>)
 8001d5e:	f014 fe0d 	bl	801697c <f_open>

        sprintf(ConfigParams, "ID,Device,Bytes,Rate(HZ),Type,Description\n");
 8001d62:	1d3b      	adds	r3, r7, #4
 8001d64:	4a5b      	ldr	r2, [pc, #364]	; (8001ed4 <main+0x35c>)
 8001d66:	461c      	mov	r4, r3
 8001d68:	4615      	mov	r5, r2
 8001d6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d72:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d76:	c403      	stmia	r4!, {r0, r1}
 8001d78:	8022      	strh	r2, [r4, #0]
 8001d7a:	3402      	adds	r4, #2
 8001d7c:	0c13      	lsrs	r3, r2, #16
 8001d7e:	7023      	strb	r3, [r4, #0]
        sprintf(ConfigParams + strlen(ConfigParams),"0x50,Datalogger,8,0.20,uint32_t,HIGH:FileNO LOW:millis,\n");
 8001d80:	1d3b      	adds	r3, r7, #4
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe faac 	bl	80002e0 <strlen>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	1d3b      	adds	r3, r7, #4
 8001d8c:	4413      	add	r3, r2
 8001d8e:	4a52      	ldr	r2, [pc, #328]	; (8001ed8 <main+0x360>)
 8001d90:	4614      	mov	r4, r2
 8001d92:	469c      	mov	ip, r3
 8001d94:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001d98:	4665      	mov	r5, ip
 8001d9a:	4626      	mov	r6, r4
 8001d9c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001d9e:	6028      	str	r0, [r5, #0]
 8001da0:	6069      	str	r1, [r5, #4]
 8001da2:	60aa      	str	r2, [r5, #8]
 8001da4:	60eb      	str	r3, [r5, #12]
 8001da6:	3410      	adds	r4, #16
 8001da8:	f10c 0c10 	add.w	ip, ip, #16
 8001dac:	4574      	cmp	r4, lr
 8001dae:	d1f3      	bne.n	8001d98 <main+0x220>
 8001db0:	4662      	mov	r2, ip
 8001db2:	4623      	mov	r3, r4
 8001db4:	cb03      	ldmia	r3!, {r0, r1}
 8001db6:	6010      	str	r0, [r2, #0]
 8001db8:	6051      	str	r1, [r2, #4]
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	7213      	strb	r3, [r2, #8]

        f_write(&Config, ConfigParams, strlen(ConfigParams), &ConfByteW);
 8001dbe:	1d3b      	adds	r3, r7, #4
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe fa8d 	bl	80002e0 <strlen>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	1d39      	adds	r1, r7, #4
 8001dca:	4b44      	ldr	r3, [pc, #272]	; (8001edc <main+0x364>)
 8001dcc:	4840      	ldr	r0, [pc, #256]	; (8001ed0 <main+0x358>)
 8001dce:	f015 f8d2 	bl	8016f76 <f_write>
 8001dd2:	e009      	b.n	8001de8 <main+0x270>
      }else{
        //If file does exist reads in config parameters to internal config array
        f_read(&Config, ConfigParams, strlen(ConfigParams), &ConfByteR);
 8001dd4:	1d3b      	adds	r3, r7, #4
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7fe fa82 	bl	80002e0 <strlen>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	1d39      	adds	r1, r7, #4
 8001de0:	4b3f      	ldr	r3, [pc, #252]	; (8001ee0 <main+0x368>)
 8001de2:	483b      	ldr	r0, [pc, #236]	; (8001ed0 <main+0x358>)
 8001de4:	f014 ff88 	bl	8016cf8 <f_read>
      }
      f_close(&Config);
 8001de8:	4839      	ldr	r0, [pc, #228]	; (8001ed0 <main+0x358>)
 8001dea:	f015 fab7 	bl	801735c <f_close>
  	  f_open(&myFILE, myPath, FA_WRITE | FA_CREATE_ALWAYS);
 8001dee:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8001df2:	220a      	movs	r2, #10
 8001df4:	4619      	mov	r1, r3
 8001df6:	483b      	ldr	r0, [pc, #236]	; (8001ee4 <main+0x36c>)
 8001df8:	f014 fdc0 	bl	801697c <f_open>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (end_flag){
 8001dfc:	e011      	b.n	8001e22 <main+0x2aa>

	  /*if(GPS_flag){
		  WriteToBuff(rxBuf, sizeof(rxBuf));
		  GPS_flag=0;
	  }*/
	  if(NRF24_write(myTxData, 32)){
 8001dfe:	2120      	movs	r1, #32
 8001e00:	4839      	ldr	r0, [pc, #228]	; (8001ee8 <main+0x370>)
 8001e02:	f7fe ffaf 	bl	8000d64 <NRF24_write>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00a      	beq.n	8001e22 <main+0x2aa>
		  	  printf("TeleSending\n\r");
 8001e0c:	4837      	ldr	r0, [pc, #220]	; (8001eec <main+0x374>)
 8001e0e:	f016 f91f 	bl	8018050 <iprintf>
	  		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001e12:	2101      	movs	r1, #1
 8001e14:	4836      	ldr	r0, [pc, #216]	; (8001ef0 <main+0x378>)
 8001e16:	f004 ff0c 	bl	8006c32 <HAL_GPIO_TogglePin>
	  		  HAL_Delay(1000);
 8001e1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e1e:	f001 f9d5 	bl	80031cc <HAL_Delay>
  while (end_flag){
 8001e22:	4b34      	ldr	r3, [pc, #208]	; (8001ef4 <main+0x37c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1e9      	bne.n	8001dfe <main+0x286>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }

    f_write(&myFILE, close_msg, strlen(close_msg), &testByte);
 8001e2a:	4833      	ldr	r0, [pc, #204]	; (8001ef8 <main+0x380>)
 8001e2c:	f7fe fa58 	bl	80002e0 <strlen>
 8001e30:	4602      	mov	r2, r0
 8001e32:	4b32      	ldr	r3, [pc, #200]	; (8001efc <main+0x384>)
 8001e34:	4930      	ldr	r1, [pc, #192]	; (8001ef8 <main+0x380>)
 8001e36:	482b      	ldr	r0, [pc, #172]	; (8001ee4 <main+0x36c>)
 8001e38:	f015 f89d 	bl	8016f76 <f_write>
    f_close(&myFILE);
 8001e3c:	4829      	ldr	r0, [pc, #164]	; (8001ee4 <main+0x36c>)
 8001e3e:	f015 fa8d 	bl	801735c <f_close>
    printf("File closed\n");
 8001e42:	482f      	ldr	r0, [pc, #188]	; (8001f00 <main+0x388>)
 8001e44:	f016 f978 	bl	8018138 <puts>
 8001e48:	2300      	movs	r3, #0

  /* USER CODE END 3 */
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f207 470c 	addw	r7, r7, #1036	; 0x40c
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e54:	24000dc4 	.word	0x24000dc4
 8001e58:	58020000 	.word	0x58020000
 8001e5c:	24000b68 	.word	0x24000b68
 8001e60:	24000000 	.word	0x24000000
 8001e64:	0801971c 	.word	0x0801971c
 8001e68:	24000c98 	.word	0x24000c98
 8001e6c:	24000640 	.word	0x24000640
 8001e70:	08019728 	.word	0x08019728
 8001e74:	0801972c 	.word	0x0801972c
 8001e78:	08019730 	.word	0x08019730
 8001e7c:	08019734 	.word	0x08019734
 8001e80:	08019738 	.word	0x08019738
 8001e84:	0801973c 	.word	0x0801973c
 8001e88:	08019740 	.word	0x08019740
 8001e8c:	08019744 	.word	0x08019744
 8001e90:	08019748 	.word	0x08019748
 8001e94:	0801974c 	.word	0x0801974c
 8001e98:	08019750 	.word	0x08019750
 8001e9c:	08019754 	.word	0x08019754
 8001ea0:	08019758 	.word	0x08019758
 8001ea4:	0801975c 	.word	0x0801975c
 8001ea8:	08019760 	.word	0x08019760
 8001eac:	08019764 	.word	0x08019764
 8001eb0:	08019768 	.word	0x08019768
 8001eb4:	0801976c 	.word	0x0801976c
 8001eb8:	08019770 	.word	0x08019770
 8001ebc:	08019774 	.word	0x08019774
 8001ec0:	24000f50 	.word	0x24000f50
 8001ec4:	2400068c 	.word	0x2400068c
 8001ec8:	080197fc 	.word	0x080197fc
 8001ecc:	08019808 	.word	0x08019808
 8001ed0:	240008c0 	.word	0x240008c0
 8001ed4:	08019778 	.word	0x08019778
 8001ed8:	080197a4 	.word	0x080197a4
 8001edc:	24000688 	.word	0x24000688
 8001ee0:	2400063c 	.word	0x2400063c
 8001ee4:	2400040c 	.word	0x2400040c
 8001ee8:	24000008 	.word	0x24000008
 8001eec:	080197e0 	.word	0x080197e0
 8001ef0:	58020400 	.word	0x58020400
 8001ef4:	24000028 	.word	0x24000028
 8001ef8:	2400002c 	.word	0x2400002c
 8001efc:	240008bc 	.word	0x240008bc
 8001f00:	080197f0 	.word	0x080197f0

08001f04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b0cc      	sub	sp, #304	; 0x130
 8001f08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f0a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001f0e:	224c      	movs	r2, #76	; 0x4c
 8001f10:	2100      	movs	r1, #0
 8001f12:	4618      	mov	r0, r3
 8001f14:	f015 ffeb 	bl	8017eee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f18:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001f1c:	2220      	movs	r2, #32
 8001f1e:	2100      	movs	r1, #0
 8001f20:	4618      	mov	r0, r3
 8001f22:	f015 ffe4 	bl	8017eee <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f26:	f107 0308 	add.w	r3, r7, #8
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	23bc      	movs	r3, #188	; 0xbc
 8001f2e:	461a      	mov	r2, r3
 8001f30:	2100      	movs	r1, #0
 8001f32:	f015 ffdc 	bl	8017eee <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001f36:	2002      	movs	r0, #2
 8001f38:	f006 f976 	bl	8008228 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f3c:	1d3b      	adds	r3, r7, #4
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	4b71      	ldr	r3, [pc, #452]	; (8002108 <SystemClock_Config+0x204>)
 8001f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f46:	4a70      	ldr	r2, [pc, #448]	; (8002108 <SystemClock_Config+0x204>)
 8001f48:	f023 0301 	bic.w	r3, r3, #1
 8001f4c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001f4e:	4b6e      	ldr	r3, [pc, #440]	; (8002108 <SystemClock_Config+0x204>)
 8001f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f52:	f003 0201 	and.w	r2, r3, #1
 8001f56:	1d3b      	adds	r3, r7, #4
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	4b6c      	ldr	r3, [pc, #432]	; (800210c <SystemClock_Config+0x208>)
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	4a6b      	ldr	r2, [pc, #428]	; (800210c <SystemClock_Config+0x208>)
 8001f60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f64:	6193      	str	r3, [r2, #24]
 8001f66:	4b69      	ldr	r3, [pc, #420]	; (800210c <SystemClock_Config+0x208>)
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8001f6e:	1d3b      	adds	r3, r7, #4
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	1d3b      	adds	r3, r7, #4
 8001f74:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001f76:	bf00      	nop
 8001f78:	4b64      	ldr	r3, [pc, #400]	; (800210c <SystemClock_Config+0x208>)
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f84:	d1f8      	bne.n	8001f78 <SystemClock_Config+0x74>
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001f86:	f006 f8b5 	bl	80080f4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 8001f8a:	f001 f941 	bl	8003210 <HAL_GetREVID>
 8001f8e:	4b60      	ldr	r3, [pc, #384]	; (8002110 <SystemClock_Config+0x20c>)
 8001f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f92:	4a5f      	ldr	r2, [pc, #380]	; (8002110 <SystemClock_Config+0x20c>)
 8001f94:	f043 0318 	orr.w	r3, r3, #24
 8001f98:	6713      	str	r3, [r2, #112]	; 0x70
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001f9a:	4b5d      	ldr	r3, [pc, #372]	; (8002110 <SystemClock_Config+0x20c>)
 8001f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9e:	f023 0303 	bic.w	r3, r3, #3
 8001fa2:	4a5b      	ldr	r2, [pc, #364]	; (8002110 <SystemClock_Config+0x20c>)
 8001fa4:	f043 0302 	orr.w	r3, r3, #2
 8001fa8:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 8001faa:	2325      	movs	r3, #37	; 0x25
 8001fac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fb4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001fd6:	2340      	movs	r3, #64	; 0x40
 8001fd8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 10;
 8001fe2:	230a      	movs	r3, #10
 8001fe4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001fee:	230c      	movs	r3, #12
 8001ff0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002000:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002004:	4618      	mov	r0, r3
 8002006:	f006 f99d 	bl	8008344 <HAL_RCC_OscConfig>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8002010:	f000 fbe8 	bl	80027e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002014:	233f      	movs	r3, #63	; 0x3f
 8002016:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800201a:	2303      	movs	r3, #3
 800201c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002020:	2300      	movs	r3, #0
 8002022:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002026:	2308      	movs	r3, #8
 8002028:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800202c:	2340      	movs	r3, #64	; 0x40
 800202e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002032:	2340      	movs	r3, #64	; 0x40
 8002034:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002038:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800203c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002040:	2340      	movs	r3, #64	; 0x40
 8002042:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002046:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800204a:	2102      	movs	r1, #2
 800204c:	4618      	mov	r0, r3
 800204e:	f006 fd89 	bl	8008b64 <HAL_RCC_ClockConfig>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <SystemClock_Config+0x158>
  {
    Error_Handler();
 8002058:	f000 fbc4 	bl	80027e4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 800205c:	f107 0308 	add.w	r3, r7, #8
 8002060:	4a2c      	ldr	r2, [pc, #176]	; (8002114 <SystemClock_Config+0x210>)
 8002062:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_FDCAN|RCC_PERIPHCLK_UART8
                              |RCC_PERIPHCLK_SPI1|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8002064:	f107 0308 	add.w	r3, r7, #8
 8002068:	2202      	movs	r2, #2
 800206a:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 800206c:	f107 0308 	add.w	r3, r7, #8
 8002070:	220c      	movs	r2, #12
 8002072:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 8002074:	f107 0308 	add.w	r3, r7, #8
 8002078:	2203      	movs	r2, #3
 800207a:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800207c:	f107 0308 	add.w	r3, r7, #8
 8002080:	2202      	movs	r2, #2
 8002082:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 3;
 8002084:	f107 0308 	add.w	r3, r7, #8
 8002088:	2203      	movs	r2, #3
 800208a:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800208c:	f107 0308 	add.w	r3, r7, #8
 8002090:	22c0      	movs	r2, #192	; 0xc0
 8002092:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8002094:	f107 0308 	add.w	r3, r7, #8
 8002098:	2220      	movs	r2, #32
 800209a:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800209c:	f107 0308 	add.w	r3, r7, #8
 80020a0:	2200      	movs	r2, #0
 80020a2:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80020a4:	f107 0308 	add.w	r3, r7, #8
 80020a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020ac:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80020ae:	f107 0308 	add.w	r3, r7, #8
 80020b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020b6:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80020b8:	f107 0308 	add.w	r3, r7, #8
 80020bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020c0:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80020c2:	f107 0308 	add.w	r3, r7, #8
 80020c6:	2200      	movs	r2, #0
 80020c8:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80020ca:	f107 0308 	add.w	r3, r7, #8
 80020ce:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80020d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80020d6:	f107 0308 	add.w	r3, r7, #8
 80020da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020de:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020e2:	f107 0308 	add.w	r3, r7, #8
 80020e6:	4618      	mov	r0, r3
 80020e8:	f007 f8ec 	bl	80092c4 <HAL_RCCEx_PeriphCLKConfig>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <SystemClock_Config+0x1f2>
  {
    Error_Handler();
 80020f2:	f000 fb77 	bl	80027e4 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80020f6:	f006 feeb 	bl	8008ed0 <HAL_RCC_EnableCSS>
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 80020fa:	f006 f8cf 	bl	800829c <HAL_PWREx_EnableUSBVoltageDetector>
}
 80020fe:	bf00      	nop
 8002100:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	58000400 	.word	0x58000400
 800210c:	58024800 	.word	0x58024800
 8002110:	58024400 	.word	0x58024400
 8002114:	00459002 	.word	0x00459002

08002118 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800211c:	4b2f      	ldr	r3, [pc, #188]	; (80021dc <MX_FDCAN1_Init+0xc4>)
 800211e:	4a30      	ldr	r2, [pc, #192]	; (80021e0 <MX_FDCAN1_Init+0xc8>)
 8002120:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8002122:	4b2e      	ldr	r3, [pc, #184]	; (80021dc <MX_FDCAN1_Init+0xc4>)
 8002124:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002128:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800212a:	4b2c      	ldr	r3, [pc, #176]	; (80021dc <MX_FDCAN1_Init+0xc4>)
 800212c:	2200      	movs	r2, #0
 800212e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8002130:	4b2a      	ldr	r3, [pc, #168]	; (80021dc <MX_FDCAN1_Init+0xc4>)
 8002132:	2200      	movs	r2, #0
 8002134:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8002136:	4b29      	ldr	r3, [pc, #164]	; (80021dc <MX_FDCAN1_Init+0xc4>)
 8002138:	2200      	movs	r2, #0
 800213a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800213c:	4b27      	ldr	r3, [pc, #156]	; (80021dc <MX_FDCAN1_Init+0xc4>)
 800213e:	2200      	movs	r2, #0
 8002140:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8002142:	4b26      	ldr	r3, [pc, #152]	; (80021dc <MX_FDCAN1_Init+0xc4>)
 8002144:	2201      	movs	r2, #1
 8002146:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 50;
 8002148:	4b24      	ldr	r3, [pc, #144]	; (80021dc <MX_FDCAN1_Init+0xc4>)
 800214a:	2232      	movs	r2, #50	; 0x32
 800214c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 109;
 800214e:	4b23      	ldr	r3, [pc, #140]	; (80021dc <MX_FDCAN1_Init+0xc4>)
 8002150:	226d      	movs	r2, #109	; 0x6d
 8002152:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 50;
 8002154:	4b21      	ldr	r3, [pc, #132]	; (80021dc <MX_FDCAN1_Init+0xc4>)
 8002156:	2232      	movs	r2, #50	; 0x32
 8002158:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800215a:	4b20      	ldr	r3, [pc, #128]	; (80021dc <MX_FDCAN1_Init+0xc4>)
 800215c:	2201      	movs	r2, #1
 800215e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 5;
 8002160:	4b1e      	ldr	r3, [pc, #120]	; (80021dc <MX_FDCAN1_Init+0xc4>)
 8002162:	2205      	movs	r2, #5
 8002164:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 8002166:	4b1d      	ldr	r3, [pc, #116]	; (80021dc <MX_FDCAN1_Init+0xc4>)
 8002168:	220a      	movs	r2, #10
 800216a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 800216c:	4b1b      	ldr	r3, [pc, #108]	; (80021dc <MX_FDCAN1_Init+0xc4>)
 800216e:	2205      	movs	r2, #5
 8002170:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8002172:	4b1a      	ldr	r3, [pc, #104]	; (80021dc <MX_FDCAN1_Init+0xc4>)
 8002174:	2200      	movs	r2, #0
 8002176:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 2;
 8002178:	4b18      	ldr	r3, [pc, #96]	; (80021dc <MX_FDCAN1_Init+0xc4>)
 800217a:	2202      	movs	r2, #2
 800217c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 2;
 800217e:	4b17      	ldr	r3, [pc, #92]	; (80021dc <MX_FDCAN1_Init+0xc4>)
 8002180:	2202      	movs	r2, #2
 8002182:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 8002184:	4b15      	ldr	r3, [pc, #84]	; (80021dc <MX_FDCAN1_Init+0xc4>)
 8002186:	2240      	movs	r2, #64	; 0x40
 8002188:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 800218a:	4b14      	ldr	r3, [pc, #80]	; (80021dc <MX_FDCAN1_Init+0xc4>)
 800218c:	2212      	movs	r2, #18
 800218e:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8002190:	4b12      	ldr	r3, [pc, #72]	; (80021dc <MX_FDCAN1_Init+0xc4>)
 8002192:	2200      	movs	r2, #0
 8002194:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8002196:	4b11      	ldr	r3, [pc, #68]	; (80021dc <MX_FDCAN1_Init+0xc4>)
 8002198:	2204      	movs	r2, #4
 800219a:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800219c:	4b0f      	ldr	r3, [pc, #60]	; (80021dc <MX_FDCAN1_Init+0xc4>)
 800219e:	2200      	movs	r2, #0
 80021a0:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80021a2:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <MX_FDCAN1_Init+0xc4>)
 80021a4:	2204      	movs	r2, #4
 80021a6:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80021a8:	4b0c      	ldr	r3, [pc, #48]	; (80021dc <MX_FDCAN1_Init+0xc4>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80021ae:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <MX_FDCAN1_Init+0xc4>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80021b4:	4b09      	ldr	r3, [pc, #36]	; (80021dc <MX_FDCAN1_Init+0xc4>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80021ba:	4b08      	ldr	r3, [pc, #32]	; (80021dc <MX_FDCAN1_Init+0xc4>)
 80021bc:	2200      	movs	r2, #0
 80021be:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80021c0:	4b06      	ldr	r3, [pc, #24]	; (80021dc <MX_FDCAN1_Init+0xc4>)
 80021c2:	2204      	movs	r2, #4
 80021c4:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80021c6:	4805      	ldr	r0, [pc, #20]	; (80021dc <MX_FDCAN1_Init+0xc4>)
 80021c8:	f003 fa16 	bl	80055f8 <HAL_FDCAN_Init>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 80021d2:	f000 fb07 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	24000c98 	.word	0x24000c98
 80021e0:	4000a000 	.word	0x4000a000

080021e4 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80021e8:	4b2e      	ldr	r3, [pc, #184]	; (80022a4 <MX_FDCAN2_Init+0xc0>)
 80021ea:	4a2f      	ldr	r2, [pc, #188]	; (80022a8 <MX_FDCAN2_Init+0xc4>)
 80021ec:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80021ee:	4b2d      	ldr	r3, [pc, #180]	; (80022a4 <MX_FDCAN2_Init+0xc0>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80021f4:	4b2b      	ldr	r3, [pc, #172]	; (80022a4 <MX_FDCAN2_Init+0xc0>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80021fa:	4b2a      	ldr	r3, [pc, #168]	; (80022a4 <MX_FDCAN2_Init+0xc0>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8002200:	4b28      	ldr	r3, [pc, #160]	; (80022a4 <MX_FDCAN2_Init+0xc0>)
 8002202:	2200      	movs	r2, #0
 8002204:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8002206:	4b27      	ldr	r3, [pc, #156]	; (80022a4 <MX_FDCAN2_Init+0xc0>)
 8002208:	2200      	movs	r2, #0
 800220a:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 800220c:	4b25      	ldr	r3, [pc, #148]	; (80022a4 <MX_FDCAN2_Init+0xc0>)
 800220e:	2201      	movs	r2, #1
 8002210:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8002212:	4b24      	ldr	r3, [pc, #144]	; (80022a4 <MX_FDCAN2_Init+0xc0>)
 8002214:	2201      	movs	r2, #1
 8002216:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8002218:	4b22      	ldr	r3, [pc, #136]	; (80022a4 <MX_FDCAN2_Init+0xc0>)
 800221a:	2202      	movs	r2, #2
 800221c:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 800221e:	4b21      	ldr	r3, [pc, #132]	; (80022a4 <MX_FDCAN2_Init+0xc0>)
 8002220:	2202      	movs	r2, #2
 8002222:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8002224:	4b1f      	ldr	r3, [pc, #124]	; (80022a4 <MX_FDCAN2_Init+0xc0>)
 8002226:	2201      	movs	r2, #1
 8002228:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800222a:	4b1e      	ldr	r3, [pc, #120]	; (80022a4 <MX_FDCAN2_Init+0xc0>)
 800222c:	2201      	movs	r2, #1
 800222e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8002230:	4b1c      	ldr	r3, [pc, #112]	; (80022a4 <MX_FDCAN2_Init+0xc0>)
 8002232:	2201      	movs	r2, #1
 8002234:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8002236:	4b1b      	ldr	r3, [pc, #108]	; (80022a4 <MX_FDCAN2_Init+0xc0>)
 8002238:	2201      	movs	r2, #1
 800223a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 800223c:	4b19      	ldr	r3, [pc, #100]	; (80022a4 <MX_FDCAN2_Init+0xc0>)
 800223e:	2200      	movs	r2, #0
 8002240:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8002242:	4b18      	ldr	r3, [pc, #96]	; (80022a4 <MX_FDCAN2_Init+0xc0>)
 8002244:	2200      	movs	r2, #0
 8002246:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8002248:	4b16      	ldr	r3, [pc, #88]	; (80022a4 <MX_FDCAN2_Init+0xc0>)
 800224a:	2200      	movs	r2, #0
 800224c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 800224e:	4b15      	ldr	r3, [pc, #84]	; (80022a4 <MX_FDCAN2_Init+0xc0>)
 8002250:	2200      	movs	r2, #0
 8002252:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8002254:	4b13      	ldr	r3, [pc, #76]	; (80022a4 <MX_FDCAN2_Init+0xc0>)
 8002256:	2204      	movs	r2, #4
 8002258:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 800225a:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <MX_FDCAN2_Init+0xc0>)
 800225c:	2200      	movs	r2, #0
 800225e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8002260:	4b10      	ldr	r3, [pc, #64]	; (80022a4 <MX_FDCAN2_Init+0xc0>)
 8002262:	2204      	movs	r2, #4
 8002264:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8002266:	4b0f      	ldr	r3, [pc, #60]	; (80022a4 <MX_FDCAN2_Init+0xc0>)
 8002268:	2200      	movs	r2, #0
 800226a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800226c:	4b0d      	ldr	r3, [pc, #52]	; (80022a4 <MX_FDCAN2_Init+0xc0>)
 800226e:	2204      	movs	r2, #4
 8002270:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8002272:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <MX_FDCAN2_Init+0xc0>)
 8002274:	2200      	movs	r2, #0
 8002276:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8002278:	4b0a      	ldr	r3, [pc, #40]	; (80022a4 <MX_FDCAN2_Init+0xc0>)
 800227a:	2200      	movs	r2, #0
 800227c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 800227e:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <MX_FDCAN2_Init+0xc0>)
 8002280:	2200      	movs	r2, #0
 8002282:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002284:	4b07      	ldr	r3, [pc, #28]	; (80022a4 <MX_FDCAN2_Init+0xc0>)
 8002286:	2200      	movs	r2, #0
 8002288:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800228a:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <MX_FDCAN2_Init+0xc0>)
 800228c:	2204      	movs	r2, #4
 800228e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8002290:	4804      	ldr	r0, [pc, #16]	; (80022a4 <MX_FDCAN2_Init+0xc0>)
 8002292:	f003 f9b1 	bl	80055f8 <HAL_FDCAN_Init>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 800229c:	f000 faa2 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80022a0:	bf00      	nop
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	24000e98 	.word	0x24000e98
 80022a8:	4000a400 	.word	0x4000a400

080022ac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80022b2:	1d3b      	adds	r3, r7, #4
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	609a      	str	r2, [r3, #8]
 80022bc:	60da      	str	r2, [r3, #12]
 80022be:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80022c0:	2300      	movs	r3, #0
 80022c2:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80022c4:	4b26      	ldr	r3, [pc, #152]	; (8002360 <MX_RTC_Init+0xb4>)
 80022c6:	4a27      	ldr	r2, [pc, #156]	; (8002364 <MX_RTC_Init+0xb8>)
 80022c8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80022ca:	4b25      	ldr	r3, [pc, #148]	; (8002360 <MX_RTC_Init+0xb4>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 1;
 80022d0:	4b23      	ldr	r3, [pc, #140]	; (8002360 <MX_RTC_Init+0xb4>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 16388;
 80022d6:	4b22      	ldr	r3, [pc, #136]	; (8002360 <MX_RTC_Init+0xb4>)
 80022d8:	f244 0204 	movw	r2, #16388	; 0x4004
 80022dc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80022de:	4b20      	ldr	r3, [pc, #128]	; (8002360 <MX_RTC_Init+0xb4>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80022e4:	4b1e      	ldr	r3, [pc, #120]	; (8002360 <MX_RTC_Init+0xb4>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80022ea:	4b1d      	ldr	r3, [pc, #116]	; (8002360 <MX_RTC_Init+0xb4>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80022f0:	4b1b      	ldr	r3, [pc, #108]	; (8002360 <MX_RTC_Init+0xb4>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80022f6:	481a      	ldr	r0, [pc, #104]	; (8002360 <MX_RTC_Init+0xb4>)
 80022f8:	f008 fea8 	bl	800b04c <HAL_RTC_Init>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002302:	f000 fa6f 	bl	80027e4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8002306:	2300      	movs	r3, #0
 8002308:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 800230a:	2300      	movs	r3, #0
 800230c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800230e:	2300      	movs	r3, #0
 8002310:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002312:	2300      	movs	r3, #0
 8002314:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002316:	2300      	movs	r3, #0
 8002318:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800231a:	1d3b      	adds	r3, r7, #4
 800231c:	2200      	movs	r2, #0
 800231e:	4619      	mov	r1, r3
 8002320:	480f      	ldr	r0, [pc, #60]	; (8002360 <MX_RTC_Init+0xb4>)
 8002322:	f008 ff0b 	bl	800b13c <HAL_RTC_SetTime>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 800232c:	f000 fa5a 	bl	80027e4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002330:	2301      	movs	r3, #1
 8002332:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002334:	2301      	movs	r3, #1
 8002336:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8002338:	2301      	movs	r3, #1
 800233a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 800233c:	2300      	movs	r3, #0
 800233e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002340:	463b      	mov	r3, r7
 8002342:	2200      	movs	r2, #0
 8002344:	4619      	mov	r1, r3
 8002346:	4806      	ldr	r0, [pc, #24]	; (8002360 <MX_RTC_Init+0xb4>)
 8002348:	f008 ff96 	bl	800b278 <HAL_RTC_SetDate>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8002352:	f000 fa47 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002356:	bf00      	nop
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	24000c74 	.word	0x24000c74
 8002364:	58004000 	.word	0x58004000

08002368 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800236c:	4b0d      	ldr	r3, [pc, #52]	; (80023a4 <MX_SDMMC1_SD_Init+0x3c>)
 800236e:	4a0e      	ldr	r2, [pc, #56]	; (80023a8 <MX_SDMMC1_SD_Init+0x40>)
 8002370:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002372:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <MX_SDMMC1_SD_Init+0x3c>)
 8002374:	2200      	movs	r2, #0
 8002376:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002378:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <MX_SDMMC1_SD_Init+0x3c>)
 800237a:	2200      	movs	r2, #0
 800237c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800237e:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <MX_SDMMC1_SD_Init+0x3c>)
 8002380:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002384:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8002386:	4b07      	ldr	r3, [pc, #28]	; (80023a4 <MX_SDMMC1_SD_Init+0x3c>)
 8002388:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800238c:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 800238e:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <MX_SDMMC1_SD_Init+0x3c>)
 8002390:	2200      	movs	r2, #0
 8002392:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8002394:	4b03      	ldr	r3, [pc, #12]	; (80023a4 <MX_SDMMC1_SD_Init+0x3c>)
 8002396:	2201      	movs	r2, #1
 8002398:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800239a:	bf00      	nop
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	24000bf4 	.word	0x24000bf4
 80023a8:	52007000 	.word	0x52007000

080023ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80023b0:	4b27      	ldr	r3, [pc, #156]	; (8002450 <MX_SPI1_Init+0xa4>)
 80023b2:	4a28      	ldr	r2, [pc, #160]	; (8002454 <MX_SPI1_Init+0xa8>)
 80023b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80023b6:	4b26      	ldr	r3, [pc, #152]	; (8002450 <MX_SPI1_Init+0xa4>)
 80023b8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80023bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80023be:	4b24      	ldr	r3, [pc, #144]	; (8002450 <MX_SPI1_Init+0xa4>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80023c4:	4b22      	ldr	r3, [pc, #136]	; (8002450 <MX_SPI1_Init+0xa4>)
 80023c6:	2207      	movs	r2, #7
 80023c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023ca:	4b21      	ldr	r3, [pc, #132]	; (8002450 <MX_SPI1_Init+0xa4>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023d0:	4b1f      	ldr	r3, [pc, #124]	; (8002450 <MX_SPI1_Init+0xa4>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80023d6:	4b1e      	ldr	r3, [pc, #120]	; (8002450 <MX_SPI1_Init+0xa4>)
 80023d8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80023dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80023de:	4b1c      	ldr	r3, [pc, #112]	; (8002450 <MX_SPI1_Init+0xa4>)
 80023e0:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80023e4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023e6:	4b1a      	ldr	r3, [pc, #104]	; (8002450 <MX_SPI1_Init+0xa4>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80023ec:	4b18      	ldr	r3, [pc, #96]	; (8002450 <MX_SPI1_Init+0xa4>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023f2:	4b17      	ldr	r3, [pc, #92]	; (8002450 <MX_SPI1_Init+0xa4>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80023f8:	4b15      	ldr	r3, [pc, #84]	; (8002450 <MX_SPI1_Init+0xa4>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80023fe:	4b14      	ldr	r3, [pc, #80]	; (8002450 <MX_SPI1_Init+0xa4>)
 8002400:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002404:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002406:	4b12      	ldr	r3, [pc, #72]	; (8002450 <MX_SPI1_Init+0xa4>)
 8002408:	2200      	movs	r2, #0
 800240a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800240c:	4b10      	ldr	r3, [pc, #64]	; (8002450 <MX_SPI1_Init+0xa4>)
 800240e:	2200      	movs	r2, #0
 8002410:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002412:	4b0f      	ldr	r3, [pc, #60]	; (8002450 <MX_SPI1_Init+0xa4>)
 8002414:	2200      	movs	r2, #0
 8002416:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002418:	4b0d      	ldr	r3, [pc, #52]	; (8002450 <MX_SPI1_Init+0xa4>)
 800241a:	2200      	movs	r2, #0
 800241c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800241e:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <MX_SPI1_Init+0xa4>)
 8002420:	2200      	movs	r2, #0
 8002422:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002424:	4b0a      	ldr	r3, [pc, #40]	; (8002450 <MX_SPI1_Init+0xa4>)
 8002426:	2200      	movs	r2, #0
 8002428:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800242a:	4b09      	ldr	r3, [pc, #36]	; (8002450 <MX_SPI1_Init+0xa4>)
 800242c:	2200      	movs	r2, #0
 800242e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002430:	4b07      	ldr	r3, [pc, #28]	; (8002450 <MX_SPI1_Init+0xa4>)
 8002432:	2200      	movs	r2, #0
 8002434:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002436:	4b06      	ldr	r3, [pc, #24]	; (8002450 <MX_SPI1_Init+0xa4>)
 8002438:	2200      	movs	r2, #0
 800243a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800243c:	4804      	ldr	r0, [pc, #16]	; (8002450 <MX_SPI1_Init+0xa4>)
 800243e:	f00a ffdb 	bl	800d3f8 <HAL_SPI_Init>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8002448:	f000 f9cc 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800244c:	bf00      	nop
 800244e:	bd80      	pop	{r7, pc}
 8002450:	24000dc4 	.word	0x24000dc4
 8002454:	40013000 	.word	0x40013000

08002458 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 800245c:	4b22      	ldr	r3, [pc, #136]	; (80024e8 <MX_UART8_Init+0x90>)
 800245e:	4a23      	ldr	r2, [pc, #140]	; (80024ec <MX_UART8_Init+0x94>)
 8002460:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8002462:	4b21      	ldr	r3, [pc, #132]	; (80024e8 <MX_UART8_Init+0x90>)
 8002464:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002468:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800246a:	4b1f      	ldr	r3, [pc, #124]	; (80024e8 <MX_UART8_Init+0x90>)
 800246c:	2200      	movs	r2, #0
 800246e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002470:	4b1d      	ldr	r3, [pc, #116]	; (80024e8 <MX_UART8_Init+0x90>)
 8002472:	2200      	movs	r2, #0
 8002474:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8002476:	4b1c      	ldr	r3, [pc, #112]	; (80024e8 <MX_UART8_Init+0x90>)
 8002478:	2200      	movs	r2, #0
 800247a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800247c:	4b1a      	ldr	r3, [pc, #104]	; (80024e8 <MX_UART8_Init+0x90>)
 800247e:	220c      	movs	r2, #12
 8002480:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002482:	4b19      	ldr	r3, [pc, #100]	; (80024e8 <MX_UART8_Init+0x90>)
 8002484:	2200      	movs	r2, #0
 8002486:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8002488:	4b17      	ldr	r3, [pc, #92]	; (80024e8 <MX_UART8_Init+0x90>)
 800248a:	2200      	movs	r2, #0
 800248c:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800248e:	4b16      	ldr	r3, [pc, #88]	; (80024e8 <MX_UART8_Init+0x90>)
 8002490:	2200      	movs	r2, #0
 8002492:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002494:	4b14      	ldr	r3, [pc, #80]	; (80024e8 <MX_UART8_Init+0x90>)
 8002496:	2200      	movs	r2, #0
 8002498:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800249a:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <MX_UART8_Init+0x90>)
 800249c:	2200      	movs	r2, #0
 800249e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80024a0:	4811      	ldr	r0, [pc, #68]	; (80024e8 <MX_UART8_Init+0x90>)
 80024a2:	f00c f85a 	bl	800e55a <HAL_UART_Init>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 80024ac:	f000 f99a 	bl	80027e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024b0:	2100      	movs	r1, #0
 80024b2:	480d      	ldr	r0, [pc, #52]	; (80024e8 <MX_UART8_Init+0x90>)
 80024b4:	f00d f9ea 	bl	800f88c <HAL_UARTEx_SetTxFifoThreshold>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 80024be:	f000 f991 	bl	80027e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024c2:	2100      	movs	r1, #0
 80024c4:	4808      	ldr	r0, [pc, #32]	; (80024e8 <MX_UART8_Init+0x90>)
 80024c6:	f00d fa1f 	bl	800f908 <HAL_UARTEx_SetRxFifoThreshold>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 80024d0:	f000 f988 	bl	80027e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80024d4:	4804      	ldr	r0, [pc, #16]	; (80024e8 <MX_UART8_Init+0x90>)
 80024d6:	f00d f9a0 	bl	800f81a <HAL_UARTEx_DisableFifoMode>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 80024e0:	f000 f980 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80024e4:	bf00      	nop
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	24000d38 	.word	0x24000d38
 80024ec:	40007c00 	.word	0x40007c00

080024f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80024f4:	4b22      	ldr	r3, [pc, #136]	; (8002580 <MX_USART3_UART_Init+0x90>)
 80024f6:	4a23      	ldr	r2, [pc, #140]	; (8002584 <MX_USART3_UART_Init+0x94>)
 80024f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80024fa:	4b21      	ldr	r3, [pc, #132]	; (8002580 <MX_USART3_UART_Init+0x90>)
 80024fc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002500:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002502:	4b1f      	ldr	r3, [pc, #124]	; (8002580 <MX_USART3_UART_Init+0x90>)
 8002504:	2200      	movs	r2, #0
 8002506:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002508:	4b1d      	ldr	r3, [pc, #116]	; (8002580 <MX_USART3_UART_Init+0x90>)
 800250a:	2200      	movs	r2, #0
 800250c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800250e:	4b1c      	ldr	r3, [pc, #112]	; (8002580 <MX_USART3_UART_Init+0x90>)
 8002510:	2200      	movs	r2, #0
 8002512:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002514:	4b1a      	ldr	r3, [pc, #104]	; (8002580 <MX_USART3_UART_Init+0x90>)
 8002516:	220c      	movs	r2, #12
 8002518:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800251a:	4b19      	ldr	r3, [pc, #100]	; (8002580 <MX_USART3_UART_Init+0x90>)
 800251c:	2200      	movs	r2, #0
 800251e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002520:	4b17      	ldr	r3, [pc, #92]	; (8002580 <MX_USART3_UART_Init+0x90>)
 8002522:	2200      	movs	r2, #0
 8002524:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002526:	4b16      	ldr	r3, [pc, #88]	; (8002580 <MX_USART3_UART_Init+0x90>)
 8002528:	2200      	movs	r2, #0
 800252a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800252c:	4b14      	ldr	r3, [pc, #80]	; (8002580 <MX_USART3_UART_Init+0x90>)
 800252e:	2200      	movs	r2, #0
 8002530:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002532:	4b13      	ldr	r3, [pc, #76]	; (8002580 <MX_USART3_UART_Init+0x90>)
 8002534:	2200      	movs	r2, #0
 8002536:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002538:	4811      	ldr	r0, [pc, #68]	; (8002580 <MX_USART3_UART_Init+0x90>)
 800253a:	f00c f80e 	bl	800e55a <HAL_UART_Init>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002544:	f000 f94e 	bl	80027e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002548:	2100      	movs	r1, #0
 800254a:	480d      	ldr	r0, [pc, #52]	; (8002580 <MX_USART3_UART_Init+0x90>)
 800254c:	f00d f99e 	bl	800f88c <HAL_UARTEx_SetTxFifoThreshold>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002556:	f000 f945 	bl	80027e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800255a:	2100      	movs	r1, #0
 800255c:	4808      	ldr	r0, [pc, #32]	; (8002580 <MX_USART3_UART_Init+0x90>)
 800255e:	f00d f9d3 	bl	800f908 <HAL_UARTEx_SetRxFifoThreshold>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002568:	f000 f93c 	bl	80027e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800256c:	4804      	ldr	r0, [pc, #16]	; (8002580 <MX_USART3_UART_Init+0x90>)
 800256e:	f00d f954 	bl	800f81a <HAL_UARTEx_DisableFifoMode>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002578:	f000 f934 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800257c:	bf00      	nop
 800257e:	bd80      	pop	{r7, pc}
 8002580:	24000b68 	.word	0x24000b68
 8002584:	40004800 	.word	0x40004800

08002588 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800258e:	4b0d      	ldr	r3, [pc, #52]	; (80025c4 <MX_DMA_Init+0x3c>)
 8002590:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002594:	4a0b      	ldr	r2, [pc, #44]	; (80025c4 <MX_DMA_Init+0x3c>)
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800259e:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <MX_DMA_Init+0x3c>)
 80025a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	607b      	str	r3, [r7, #4]
 80025aa:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 80025ac:	2200      	movs	r2, #0
 80025ae:	2101      	movs	r1, #1
 80025b0:	200b      	movs	r0, #11
 80025b2:	f000 ff14 	bl	80033de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80025b6:	200b      	movs	r0, #11
 80025b8:	f000 ff2b 	bl	8003412 <HAL_NVIC_EnableIRQ>

}
 80025bc:	bf00      	nop
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	58024400 	.word	0x58024400

080025c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b08c      	sub	sp, #48	; 0x30
 80025cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ce:	f107 031c 	add.w	r3, r7, #28
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	605a      	str	r2, [r3, #4]
 80025d8:	609a      	str	r2, [r3, #8]
 80025da:	60da      	str	r2, [r3, #12]
 80025dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80025de:	4b6d      	ldr	r3, [pc, #436]	; (8002794 <MX_GPIO_Init+0x1cc>)
 80025e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025e4:	4a6b      	ldr	r2, [pc, #428]	; (8002794 <MX_GPIO_Init+0x1cc>)
 80025e6:	f043 0310 	orr.w	r3, r3, #16
 80025ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025ee:	4b69      	ldr	r3, [pc, #420]	; (8002794 <MX_GPIO_Init+0x1cc>)
 80025f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025f4:	f003 0310 	and.w	r3, r3, #16
 80025f8:	61bb      	str	r3, [r7, #24]
 80025fa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025fc:	4b65      	ldr	r3, [pc, #404]	; (8002794 <MX_GPIO_Init+0x1cc>)
 80025fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002602:	4a64      	ldr	r2, [pc, #400]	; (8002794 <MX_GPIO_Init+0x1cc>)
 8002604:	f043 0304 	orr.w	r3, r3, #4
 8002608:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800260c:	4b61      	ldr	r3, [pc, #388]	; (8002794 <MX_GPIO_Init+0x1cc>)
 800260e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002612:	f003 0304 	and.w	r3, r3, #4
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800261a:	4b5e      	ldr	r3, [pc, #376]	; (8002794 <MX_GPIO_Init+0x1cc>)
 800261c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002620:	4a5c      	ldr	r2, [pc, #368]	; (8002794 <MX_GPIO_Init+0x1cc>)
 8002622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002626:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800262a:	4b5a      	ldr	r3, [pc, #360]	; (8002794 <MX_GPIO_Init+0x1cc>)
 800262c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002634:	613b      	str	r3, [r7, #16]
 8002636:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002638:	4b56      	ldr	r3, [pc, #344]	; (8002794 <MX_GPIO_Init+0x1cc>)
 800263a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800263e:	4a55      	ldr	r2, [pc, #340]	; (8002794 <MX_GPIO_Init+0x1cc>)
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002648:	4b52      	ldr	r3, [pc, #328]	; (8002794 <MX_GPIO_Init+0x1cc>)
 800264a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002656:	4b4f      	ldr	r3, [pc, #316]	; (8002794 <MX_GPIO_Init+0x1cc>)
 8002658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800265c:	4a4d      	ldr	r2, [pc, #308]	; (8002794 <MX_GPIO_Init+0x1cc>)
 800265e:	f043 0302 	orr.w	r3, r3, #2
 8002662:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002666:	4b4b      	ldr	r3, [pc, #300]	; (8002794 <MX_GPIO_Init+0x1cc>)
 8002668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	60bb      	str	r3, [r7, #8]
 8002672:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002674:	4b47      	ldr	r3, [pc, #284]	; (8002794 <MX_GPIO_Init+0x1cc>)
 8002676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800267a:	4a46      	ldr	r2, [pc, #280]	; (8002794 <MX_GPIO_Init+0x1cc>)
 800267c:	f043 0308 	orr.w	r3, r3, #8
 8002680:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002684:	4b43      	ldr	r3, [pc, #268]	; (8002794 <MX_GPIO_Init+0x1cc>)
 8002686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800268a:	f003 0308 	and.w	r3, r3, #8
 800268e:	607b      	str	r3, [r7, #4]
 8002690:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_485_TX_EN_Pin|RS_485_RX_EN_Pin, GPIO_PIN_RESET);
 8002692:	2200      	movs	r2, #0
 8002694:	210c      	movs	r1, #12
 8002696:	4840      	ldr	r0, [pc, #256]	; (8002798 <MX_GPIO_Init+0x1d0>)
 8002698:	f004 fab2 	bl	8006c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TELE_CE_Pin|TELE_CS_Pin, GPIO_PIN_RESET);
 800269c:	2200      	movs	r2, #0
 800269e:	2103      	movs	r1, #3
 80026a0:	483e      	ldr	r0, [pc, #248]	; (800279c <MX_GPIO_Init+0x1d4>)
 80026a2:	f004 faad 	bl	8006c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80026a6:	2200      	movs	r2, #0
 80026a8:	2101      	movs	r1, #1
 80026aa:	483d      	ldr	r0, [pc, #244]	; (80027a0 <MX_GPIO_Init+0x1d8>)
 80026ac:	f004 faa8 	bl	8006c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_SET);
 80026b0:	2201      	movs	r2, #1
 80026b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026b6:	483b      	ldr	r0, [pc, #236]	; (80027a4 <MX_GPIO_Init+0x1dc>)
 80026b8:	f004 faa2 	bl	8006c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS_485_TX_EN_Pin RS_485_RX_EN_Pin */
  GPIO_InitStruct.Pin = RS_485_TX_EN_Pin|RS_485_RX_EN_Pin;
 80026bc:	230c      	movs	r3, #12
 80026be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026c0:	2301      	movs	r3, #1
 80026c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c8:	2300      	movs	r3, #0
 80026ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026cc:	f107 031c 	add.w	r3, r7, #28
 80026d0:	4619      	mov	r1, r3
 80026d2:	4831      	ldr	r0, [pc, #196]	; (8002798 <MX_GPIO_Init+0x1d0>)
 80026d4:	f004 f8cc 	bl	8006870 <HAL_GPIO_Init>

  /*Configure GPIO pins : TELE_CE_Pin TELE_CS_Pin */
  GPIO_InitStruct.Pin = TELE_CE_Pin|TELE_CS_Pin;
 80026d8:	2303      	movs	r3, #3
 80026da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026dc:	2301      	movs	r3, #1
 80026de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e4:	2300      	movs	r3, #0
 80026e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e8:	f107 031c 	add.w	r3, r7, #28
 80026ec:	4619      	mov	r1, r3
 80026ee:	482b      	ldr	r0, [pc, #172]	; (800279c <MX_GPIO_Init+0x1d4>)
 80026f0:	f004 f8be 	bl	8006870 <HAL_GPIO_Init>

  /*Configure GPIO pin : TELE_IRQ_Pin */
  GPIO_InitStruct.Pin = TELE_IRQ_Pin;
 80026f4:	2304      	movs	r3, #4
 80026f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026f8:	4b2b      	ldr	r3, [pc, #172]	; (80027a8 <MX_GPIO_Init+0x1e0>)
 80026fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TELE_IRQ_GPIO_Port, &GPIO_InitStruct);
 8002700:	f107 031c 	add.w	r3, r7, #28
 8002704:	4619      	mov	r1, r3
 8002706:	4825      	ldr	r0, [pc, #148]	; (800279c <MX_GPIO_Init+0x1d4>)
 8002708:	f004 f8b2 	bl	8006870 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800270c:	2301      	movs	r3, #1
 800270e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002710:	2301      	movs	r3, #1
 8002712:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002714:	2300      	movs	r3, #0
 8002716:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002718:	2300      	movs	r3, #0
 800271a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800271c:	f107 031c 	add.w	r3, r7, #28
 8002720:	4619      	mov	r1, r3
 8002722:	481f      	ldr	r0, [pc, #124]	; (80027a0 <MX_GPIO_Init+0x1d8>)
 8002724:	f004 f8a4 	bl	8006870 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_INT_Pin */
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 8002728:	f44f 7300 	mov.w	r3, #512	; 0x200
 800272c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800272e:	4b1e      	ldr	r3, [pc, #120]	; (80027a8 <MX_GPIO_Init+0x1e0>)
 8002730:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002732:	2300      	movs	r3, #0
 8002734:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 8002736:	f107 031c 	add.w	r3, r7, #28
 800273a:	4619      	mov	r1, r3
 800273c:	4816      	ldr	r0, [pc, #88]	; (8002798 <MX_GPIO_Init+0x1d0>)
 800273e:	f004 f897 	bl	8006870 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 8002742:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002746:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002748:	2301      	movs	r3, #1
 800274a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274c:	2300      	movs	r3, #0
 800274e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002750:	2300      	movs	r3, #0
 8002752:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 8002754:	f107 031c 	add.w	r3, r7, #28
 8002758:	4619      	mov	r1, r3
 800275a:	4812      	ldr	r0, [pc, #72]	; (80027a4 <MX_GPIO_Init+0x1dc>)
 800275c:	f004 f888 	bl	8006870 <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DET_Pin */
  GPIO_InitStruct.Pin = CARD_DET_Pin;
 8002760:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002766:	2300      	movs	r3, #0
 8002768:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276a:	2300      	movs	r3, #0
 800276c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DET_GPIO_Port, &GPIO_InitStruct);
 800276e:	f107 031c 	add.w	r3, r7, #28
 8002772:	4619      	mov	r1, r3
 8002774:	4809      	ldr	r0, [pc, #36]	; (800279c <MX_GPIO_Init+0x1d4>)
 8002776:	f004 f87b 	bl	8006870 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800277a:	2200      	movs	r2, #0
 800277c:	2100      	movs	r1, #0
 800277e:	2017      	movs	r0, #23
 8002780:	f000 fe2d 	bl	80033de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002784:	2017      	movs	r0, #23
 8002786:	f000 fe44 	bl	8003412 <HAL_NVIC_EnableIRQ>

}
 800278a:	bf00      	nop
 800278c:	3730      	adds	r7, #48	; 0x30
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	58024400 	.word	0x58024400
 8002798:	58021000 	.word	0x58021000
 800279c:	58020000 	.word	0x58020000
 80027a0:	58020400 	.word	0x58020400
 80027a4:	58020c00 	.word	0x58020c00
 80027a8:	11110000 	.word	0x11110000

080027ac <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	80fb      	strh	r3, [r7, #6]

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */

  end_flag = 0;
 80027b6:	4b04      	ldr	r3, [pc, #16]	; (80027c8 <HAL_GPIO_EXTI_Callback+0x1c>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]

}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	24000028 	.word	0x24000028

080027cc <HAL_PWR_PVDCallback>:
void HAL_PWR_PVDCallback (void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
	end_flag = 0;
 80027d0:	4b03      	ldr	r3, [pc, #12]	; (80027e0 <HAL_PWR_PVDCallback+0x14>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
}
 80027d6:	bf00      	nop
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	24000028 	.word	0x24000028

080027e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027e8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error Handler\n");
 80027ea:	4802      	ldr	r0, [pc, #8]	; (80027f4 <Error_Handler+0x10>)
 80027ec:	f015 fca4 	bl	8018138 <puts>
 80027f0:	e7fb      	b.n	80027ea <Error_Handler+0x6>
 80027f2:	bf00      	nop
 80027f4:	08019814 	.word	0x08019814

080027f8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002800:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002804:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	2b00      	cmp	r3, #0
 800280e:	d013      	beq.n	8002838 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002810:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002814:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002818:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00b      	beq.n	8002838 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002820:	e000      	b.n	8002824 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002822:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002824:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0f9      	beq.n	8002822 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800282e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002838:	687b      	ldr	r3, [r7, #4]
}
 800283a:	4618      	mov	r0, r3
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <_write>:

#include <myprintf.h>
#include "main.h"

int _write(int file, char *ptr, int len)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b086      	sub	sp, #24
 800284a:	af00      	add	r7, sp, #0
 800284c:	60f8      	str	r0, [r7, #12]
 800284e:	60b9      	str	r1, [r7, #8]
 8002850:	607a      	str	r2, [r7, #4]
  int i=0;
 8002852:	2300      	movs	r3, #0
 8002854:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8002856:	2300      	movs	r3, #0
 8002858:	617b      	str	r3, [r7, #20]
 800285a:	e009      	b.n	8002870 <_write+0x2a>
    ITM_SendChar((*ptr++));
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	1c5a      	adds	r2, r3, #1
 8002860:	60ba      	str	r2, [r7, #8]
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff ffc7 	bl	80027f8 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	3301      	adds	r3, #1
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	429a      	cmp	r2, r3
 8002876:	dbf1      	blt.n	800285c <_write+0x16>
  return len;
 8002878:	687b      	ldr	r3, [r7, #4]
}
 800287a:	4618      	mov	r0, r3
 800287c:	3718      	adds	r7, #24
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
	...

08002884 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 800288a:	f107 0308 	add.w	r3, r7, #8
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002894:	4b13      	ldr	r3, [pc, #76]	; (80028e4 <HAL_MspInit+0x60>)
 8002896:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800289a:	4a12      	ldr	r2, [pc, #72]	; (80028e4 <HAL_MspInit+0x60>)
 800289c:	f043 0302 	orr.w	r3, r3, #2
 80028a0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80028a4:	4b0f      	ldr	r3, [pc, #60]	; (80028e4 <HAL_MspInit+0x60>)
 80028a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	607b      	str	r3, [r7, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_AVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_AVD_IRQn, 0, 0);
 80028b2:	2200      	movs	r2, #0
 80028b4:	2100      	movs	r1, #0
 80028b6:	2001      	movs	r0, #1
 80028b8:	f000 fd91 	bl	80033de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_AVD_IRQn);
 80028bc:	2001      	movs	r0, #1
 80028be:	f000 fda8 	bl	8003412 <HAL_NVIC_EnableIRQ>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_6;
 80028c2:	23c0      	movs	r3, #192	; 0xc0
 80028c4:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_IT_RISING;
 80028c6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80028ca:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 80028cc:	f107 0308 	add.w	r3, r7, #8
 80028d0:	4618      	mov	r0, r3
 80028d2:	f005 fc1f 	bl	8008114 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 80028d6:	f005 fc97 	bl	8008208 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028da:	bf00      	nop
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	58024400 	.word	0x58024400

080028e8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b08c      	sub	sp, #48	; 0x30
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f0:	f107 031c 	add.w	r3, r7, #28
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	605a      	str	r2, [r3, #4]
 80028fa:	609a      	str	r2, [r3, #8]
 80028fc:	60da      	str	r2, [r3, #12]
 80028fe:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a48      	ldr	r2, [pc, #288]	; (8002a28 <HAL_FDCAN_MspInit+0x140>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d14e      	bne.n	80029a8 <HAL_FDCAN_MspInit+0xc0>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800290a:	4b48      	ldr	r3, [pc, #288]	; (8002a2c <HAL_FDCAN_MspInit+0x144>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	3301      	adds	r3, #1
 8002910:	4a46      	ldr	r2, [pc, #280]	; (8002a2c <HAL_FDCAN_MspInit+0x144>)
 8002912:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002914:	4b45      	ldr	r3, [pc, #276]	; (8002a2c <HAL_FDCAN_MspInit+0x144>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d10e      	bne.n	800293a <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800291c:	4b44      	ldr	r3, [pc, #272]	; (8002a30 <HAL_FDCAN_MspInit+0x148>)
 800291e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002922:	4a43      	ldr	r2, [pc, #268]	; (8002a30 <HAL_FDCAN_MspInit+0x148>)
 8002924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002928:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800292c:	4b40      	ldr	r3, [pc, #256]	; (8002a30 <HAL_FDCAN_MspInit+0x148>)
 800292e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002936:	61bb      	str	r3, [r7, #24]
 8002938:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800293a:	4b3d      	ldr	r3, [pc, #244]	; (8002a30 <HAL_FDCAN_MspInit+0x148>)
 800293c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002940:	4a3b      	ldr	r2, [pc, #236]	; (8002a30 <HAL_FDCAN_MspInit+0x148>)
 8002942:	f043 0302 	orr.w	r3, r3, #2
 8002946:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800294a:	4b39      	ldr	r3, [pc, #228]	; (8002a30 <HAL_FDCAN_MspInit+0x148>)
 800294c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002958:	f44f 7340 	mov.w	r3, #768	; 0x300
 800295c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295e:	2302      	movs	r3, #2
 8002960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002962:	2300      	movs	r3, #0
 8002964:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002966:	2303      	movs	r3, #3
 8002968:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800296a:	2309      	movs	r3, #9
 800296c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800296e:	f107 031c 	add.w	r3, r7, #28
 8002972:	4619      	mov	r1, r3
 8002974:	482f      	ldr	r0, [pc, #188]	; (8002a34 <HAL_FDCAN_MspInit+0x14c>)
 8002976:	f003 ff7b 	bl	8006870 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB8_FMP);
 800297a:	2040      	movs	r0, #64	; 0x40
 800297c:	f004 f98e 	bl	8006c9c <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB9_FMP);
 8002980:	2080      	movs	r0, #128	; 0x80
 8002982:	f004 f98b 	bl	8006c9c <HAL_I2CEx_EnableFastModePlus>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8002986:	2200      	movs	r2, #0
 8002988:	2100      	movs	r1, #0
 800298a:	2013      	movs	r0, #19
 800298c:	f000 fd27 	bl	80033de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002990:	2013      	movs	r0, #19
 8002992:	f000 fd3e 	bl	8003412 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8002996:	2200      	movs	r2, #0
 8002998:	2100      	movs	r1, #0
 800299a:	2015      	movs	r0, #21
 800299c:	f000 fd1f 	bl	80033de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 80029a0:	2015      	movs	r0, #21
 80029a2:	f000 fd36 	bl	8003412 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80029a6:	e03b      	b.n	8002a20 <HAL_FDCAN_MspInit+0x138>
  else if(hfdcan->Instance==FDCAN2)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a22      	ldr	r2, [pc, #136]	; (8002a38 <HAL_FDCAN_MspInit+0x150>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d136      	bne.n	8002a20 <HAL_FDCAN_MspInit+0x138>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80029b2:	4b1e      	ldr	r3, [pc, #120]	; (8002a2c <HAL_FDCAN_MspInit+0x144>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	3301      	adds	r3, #1
 80029b8:	4a1c      	ldr	r2, [pc, #112]	; (8002a2c <HAL_FDCAN_MspInit+0x144>)
 80029ba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80029bc:	4b1b      	ldr	r3, [pc, #108]	; (8002a2c <HAL_FDCAN_MspInit+0x144>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d10e      	bne.n	80029e2 <HAL_FDCAN_MspInit+0xfa>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80029c4:	4b1a      	ldr	r3, [pc, #104]	; (8002a30 <HAL_FDCAN_MspInit+0x148>)
 80029c6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80029ca:	4a19      	ldr	r2, [pc, #100]	; (8002a30 <HAL_FDCAN_MspInit+0x148>)
 80029cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80029d4:	4b16      	ldr	r3, [pc, #88]	; (8002a30 <HAL_FDCAN_MspInit+0x148>)
 80029d6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80029da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029de:	613b      	str	r3, [r7, #16]
 80029e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029e2:	4b13      	ldr	r3, [pc, #76]	; (8002a30 <HAL_FDCAN_MspInit+0x148>)
 80029e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029e8:	4a11      	ldr	r2, [pc, #68]	; (8002a30 <HAL_FDCAN_MspInit+0x148>)
 80029ea:	f043 0302 	orr.w	r3, r3, #2
 80029ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029f2:	4b0f      	ldr	r3, [pc, #60]	; (8002a30 <HAL_FDCAN_MspInit+0x148>)
 80029f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002a00:	2360      	movs	r3, #96	; 0x60
 8002a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a04:	2302      	movs	r3, #2
 8002a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002a10:	2309      	movs	r3, #9
 8002a12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a14:	f107 031c 	add.w	r3, r7, #28
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4806      	ldr	r0, [pc, #24]	; (8002a34 <HAL_FDCAN_MspInit+0x14c>)
 8002a1c:	f003 ff28 	bl	8006870 <HAL_GPIO_Init>
}
 8002a20:	bf00      	nop
 8002a22:	3730      	adds	r7, #48	; 0x30
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	4000a000 	.word	0x4000a000
 8002a2c:	24000354 	.word	0x24000354
 8002a30:	58024400 	.word	0x58024400
 8002a34:	58020400 	.word	0x58020400
 8002a38:	4000a400 	.word	0x4000a400

08002a3c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a07      	ldr	r2, [pc, #28]	; (8002a68 <HAL_RTC_MspInit+0x2c>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d105      	bne.n	8002a5a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002a4e:	4b07      	ldr	r3, [pc, #28]	; (8002a6c <HAL_RTC_MspInit+0x30>)
 8002a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a52:	4a06      	ldr	r2, [pc, #24]	; (8002a6c <HAL_RTC_MspInit+0x30>)
 8002a54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a58:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	58004000 	.word	0x58004000
 8002a6c:	58024400 	.word	0x58024400

08002a70 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08a      	sub	sp, #40	; 0x28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a78:	f107 0314 	add.w	r3, r7, #20
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	605a      	str	r2, [r3, #4]
 8002a82:	609a      	str	r2, [r3, #8]
 8002a84:	60da      	str	r2, [r3, #12]
 8002a86:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a2e      	ldr	r2, [pc, #184]	; (8002b48 <HAL_SD_MspInit+0xd8>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d155      	bne.n	8002b3e <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002a92:	4b2e      	ldr	r3, [pc, #184]	; (8002b4c <HAL_SD_MspInit+0xdc>)
 8002a94:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002a98:	4a2c      	ldr	r2, [pc, #176]	; (8002b4c <HAL_SD_MspInit+0xdc>)
 8002a9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a9e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002aa2:	4b2a      	ldr	r3, [pc, #168]	; (8002b4c <HAL_SD_MspInit+0xdc>)
 8002aa4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aac:	613b      	str	r3, [r7, #16]
 8002aae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ab0:	4b26      	ldr	r3, [pc, #152]	; (8002b4c <HAL_SD_MspInit+0xdc>)
 8002ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ab6:	4a25      	ldr	r2, [pc, #148]	; (8002b4c <HAL_SD_MspInit+0xdc>)
 8002ab8:	f043 0304 	orr.w	r3, r3, #4
 8002abc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ac0:	4b22      	ldr	r3, [pc, #136]	; (8002b4c <HAL_SD_MspInit+0xdc>)
 8002ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ace:	4b1f      	ldr	r3, [pc, #124]	; (8002b4c <HAL_SD_MspInit+0xdc>)
 8002ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ad4:	4a1d      	ldr	r2, [pc, #116]	; (8002b4c <HAL_SD_MspInit+0xdc>)
 8002ad6:	f043 0308 	orr.w	r3, r3, #8
 8002ada:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ade:	4b1b      	ldr	r3, [pc, #108]	; (8002b4c <HAL_SD_MspInit+0xdc>)
 8002ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ae4:	f003 0308 	and.w	r3, r3, #8
 8002ae8:	60bb      	str	r3, [r7, #8]
 8002aea:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002aec:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002af0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af2:	2302      	movs	r3, #2
 8002af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af6:	2300      	movs	r3, #0
 8002af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002afa:	2303      	movs	r3, #3
 8002afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002afe:	230c      	movs	r3, #12
 8002b00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b02:	f107 0314 	add.w	r3, r7, #20
 8002b06:	4619      	mov	r1, r3
 8002b08:	4811      	ldr	r0, [pc, #68]	; (8002b50 <HAL_SD_MspInit+0xe0>)
 8002b0a:	f003 feb1 	bl	8006870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b0e:	2304      	movs	r3, #4
 8002b10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b12:	2302      	movs	r3, #2
 8002b14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b16:	2300      	movs	r3, #0
 8002b18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002b1e:	230c      	movs	r3, #12
 8002b20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b22:	f107 0314 	add.w	r3, r7, #20
 8002b26:	4619      	mov	r1, r3
 8002b28:	480a      	ldr	r0, [pc, #40]	; (8002b54 <HAL_SD_MspInit+0xe4>)
 8002b2a:	f003 fea1 	bl	8006870 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8002b2e:	2200      	movs	r2, #0
 8002b30:	2100      	movs	r1, #0
 8002b32:	2031      	movs	r0, #49	; 0x31
 8002b34:	f000 fc53 	bl	80033de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002b38:	2031      	movs	r0, #49	; 0x31
 8002b3a:	f000 fc6a 	bl	8003412 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002b3e:	bf00      	nop
 8002b40:	3728      	adds	r7, #40	; 0x28
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	52007000 	.word	0x52007000
 8002b4c:	58024400 	.word	0x58024400
 8002b50:	58020800 	.word	0x58020800
 8002b54:	58020c00 	.word	0x58020c00

08002b58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b08a      	sub	sp, #40	; 0x28
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b60:	f107 0314 	add.w	r3, r7, #20
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	605a      	str	r2, [r3, #4]
 8002b6a:	609a      	str	r2, [r3, #8]
 8002b6c:	60da      	str	r2, [r3, #12]
 8002b6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a1a      	ldr	r2, [pc, #104]	; (8002be0 <HAL_SPI_MspInit+0x88>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d12d      	bne.n	8002bd6 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b7a:	4b1a      	ldr	r3, [pc, #104]	; (8002be4 <HAL_SPI_MspInit+0x8c>)
 8002b7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b80:	4a18      	ldr	r2, [pc, #96]	; (8002be4 <HAL_SPI_MspInit+0x8c>)
 8002b82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b86:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002b8a:	4b16      	ldr	r3, [pc, #88]	; (8002be4 <HAL_SPI_MspInit+0x8c>)
 8002b8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b94:	613b      	str	r3, [r7, #16]
 8002b96:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b98:	4b12      	ldr	r3, [pc, #72]	; (8002be4 <HAL_SPI_MspInit+0x8c>)
 8002b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b9e:	4a11      	ldr	r2, [pc, #68]	; (8002be4 <HAL_SPI_MspInit+0x8c>)
 8002ba0:	f043 0301 	orr.w	r3, r3, #1
 8002ba4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ba8:	4b0e      	ldr	r3, [pc, #56]	; (8002be4 <HAL_SPI_MspInit+0x8c>)
 8002baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002bb6:	23e0      	movs	r3, #224	; 0xe0
 8002bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bba:	2302      	movs	r3, #2
 8002bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002bc6:	2305      	movs	r3, #5
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bca:	f107 0314 	add.w	r3, r7, #20
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4805      	ldr	r0, [pc, #20]	; (8002be8 <HAL_SPI_MspInit+0x90>)
 8002bd2:	f003 fe4d 	bl	8006870 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002bd6:	bf00      	nop
 8002bd8:	3728      	adds	r7, #40	; 0x28
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	40013000 	.word	0x40013000
 8002be4:	58024400 	.word	0x58024400
 8002be8:	58020000 	.word	0x58020000

08002bec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08c      	sub	sp, #48	; 0x30
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf4:	f107 031c 	add.w	r3, r7, #28
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	605a      	str	r2, [r3, #4]
 8002bfe:	609a      	str	r2, [r3, #8]
 8002c00:	60da      	str	r2, [r3, #12]
 8002c02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a4b      	ldr	r2, [pc, #300]	; (8002d38 <HAL_UART_MspInit+0x14c>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d12e      	bne.n	8002c6c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8002c0e:	4b4b      	ldr	r3, [pc, #300]	; (8002d3c <HAL_UART_MspInit+0x150>)
 8002c10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c14:	4a49      	ldr	r2, [pc, #292]	; (8002d3c <HAL_UART_MspInit+0x150>)
 8002c16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c1a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c1e:	4b47      	ldr	r3, [pc, #284]	; (8002d3c <HAL_UART_MspInit+0x150>)
 8002c20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c28:	61bb      	str	r3, [r7, #24]
 8002c2a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c2c:	4b43      	ldr	r3, [pc, #268]	; (8002d3c <HAL_UART_MspInit+0x150>)
 8002c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c32:	4a42      	ldr	r2, [pc, #264]	; (8002d3c <HAL_UART_MspInit+0x150>)
 8002c34:	f043 0310 	orr.w	r3, r3, #16
 8002c38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c3c:	4b3f      	ldr	r3, [pc, #252]	; (8002d3c <HAL_UART_MspInit+0x150>)
 8002c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c42:	f003 0310 	and.w	r3, r3, #16
 8002c46:	617b      	str	r3, [r7, #20]
 8002c48:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4e:	2302      	movs	r3, #2
 8002c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c52:	2300      	movs	r3, #0
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c56:	2300      	movs	r3, #0
 8002c58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002c5a:	2308      	movs	r3, #8
 8002c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c5e:	f107 031c 	add.w	r3, r7, #28
 8002c62:	4619      	mov	r1, r3
 8002c64:	4836      	ldr	r0, [pc, #216]	; (8002d40 <HAL_UART_MspInit+0x154>)
 8002c66:	f003 fe03 	bl	8006870 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002c6a:	e061      	b.n	8002d30 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a34      	ldr	r2, [pc, #208]	; (8002d44 <HAL_UART_MspInit+0x158>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d15c      	bne.n	8002d30 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c76:	4b31      	ldr	r3, [pc, #196]	; (8002d3c <HAL_UART_MspInit+0x150>)
 8002c78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c7c:	4a2f      	ldr	r2, [pc, #188]	; (8002d3c <HAL_UART_MspInit+0x150>)
 8002c7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c82:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c86:	4b2d      	ldr	r3, [pc, #180]	; (8002d3c <HAL_UART_MspInit+0x150>)
 8002c88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c90:	613b      	str	r3, [r7, #16]
 8002c92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c94:	4b29      	ldr	r3, [pc, #164]	; (8002d3c <HAL_UART_MspInit+0x150>)
 8002c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c9a:	4a28      	ldr	r2, [pc, #160]	; (8002d3c <HAL_UART_MspInit+0x150>)
 8002c9c:	f043 0308 	orr.w	r3, r3, #8
 8002ca0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ca4:	4b25      	ldr	r3, [pc, #148]	; (8002d3c <HAL_UART_MspInit+0x150>)
 8002ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002caa:	f003 0308 	and.w	r3, r3, #8
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002cb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002cb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb8:	2302      	movs	r3, #2
 8002cba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002cc4:	2307      	movs	r3, #7
 8002cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cc8:	f107 031c 	add.w	r3, r7, #28
 8002ccc:	4619      	mov	r1, r3
 8002cce:	481e      	ldr	r0, [pc, #120]	; (8002d48 <HAL_UART_MspInit+0x15c>)
 8002cd0:	f003 fdce 	bl	8006870 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8002cd4:	4b1d      	ldr	r3, [pc, #116]	; (8002d4c <HAL_UART_MspInit+0x160>)
 8002cd6:	4a1e      	ldr	r2, [pc, #120]	; (8002d50 <HAL_UART_MspInit+0x164>)
 8002cd8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002cda:	4b1c      	ldr	r3, [pc, #112]	; (8002d4c <HAL_UART_MspInit+0x160>)
 8002cdc:	222d      	movs	r2, #45	; 0x2d
 8002cde:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ce0:	4b1a      	ldr	r3, [pc, #104]	; (8002d4c <HAL_UART_MspInit+0x160>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ce6:	4b19      	ldr	r3, [pc, #100]	; (8002d4c <HAL_UART_MspInit+0x160>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002cec:	4b17      	ldr	r3, [pc, #92]	; (8002d4c <HAL_UART_MspInit+0x160>)
 8002cee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cf2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cf4:	4b15      	ldr	r3, [pc, #84]	; (8002d4c <HAL_UART_MspInit+0x160>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cfa:	4b14      	ldr	r3, [pc, #80]	; (8002d4c <HAL_UART_MspInit+0x160>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002d00:	4b12      	ldr	r3, [pc, #72]	; (8002d4c <HAL_UART_MspInit+0x160>)
 8002d02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d06:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d08:	4b10      	ldr	r3, [pc, #64]	; (8002d4c <HAL_UART_MspInit+0x160>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d0e:	4b0f      	ldr	r3, [pc, #60]	; (8002d4c <HAL_UART_MspInit+0x160>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002d14:	480d      	ldr	r0, [pc, #52]	; (8002d4c <HAL_UART_MspInit+0x160>)
 8002d16:	f000 fb97 	bl	8003448 <HAL_DMA_Init>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <HAL_UART_MspInit+0x138>
      Error_Handler();
 8002d20:	f7ff fd60 	bl	80027e4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a09      	ldr	r2, [pc, #36]	; (8002d4c <HAL_UART_MspInit+0x160>)
 8002d28:	679a      	str	r2, [r3, #120]	; 0x78
 8002d2a:	4a08      	ldr	r2, [pc, #32]	; (8002d4c <HAL_UART_MspInit+0x160>)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002d30:	bf00      	nop
 8002d32:	3730      	adds	r7, #48	; 0x30
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40007c00 	.word	0x40007c00
 8002d3c:	58024400 	.word	0x58024400
 8002d40:	58021000 	.word	0x58021000
 8002d44:	40004800 	.word	0x40004800
 8002d48:	58020c00 	.word	0x58020c00
 8002d4c:	24000af0 	.word	0x24000af0
 8002d50:	40020010 	.word	0x40020010

08002d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002d58:	f006 fa98 	bl	800928c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d5c:	e7fe      	b.n	8002d5c <NMI_Handler+0x8>

08002d5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d62:	e7fe      	b.n	8002d62 <HardFault_Handler+0x4>

08002d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d68:	e7fe      	b.n	8002d68 <MemManage_Handler+0x4>

08002d6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d6e:	e7fe      	b.n	8002d6e <BusFault_Handler+0x4>

08002d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d74:	e7fe      	b.n	8002d74 <UsageFault_Handler+0x4>

08002d76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d76:	b480      	push	{r7}
 8002d78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d7a:	bf00      	nop
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d88:	bf00      	nop
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d92:	b480      	push	{r7}
 8002d94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d96:	bf00      	nop
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002da4:	f000 f9f2 	bl	800318c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002da8:	bf00      	nop
 8002daa:	bd80      	pop	{r7, pc}

08002dac <PVD_AVD_IRQHandler>:

/**
  * @brief This function handles PVD and AVD interrupts through EXTI line 16.
  */
void PVD_AVD_IRQHandler(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_AVD_IRQn 0 */

  /* USER CODE END PVD_AVD_IRQn 0 */
  HAL_PWREx_PVD_AVD_IRQHandler();
 8002db0:	f005 fa84 	bl	80082bc <HAL_PWREx_PVD_AVD_IRQHandler>
  /* USER CODE BEGIN PVD_AVD_IRQn 1 */

  /* USER CODE END PVD_AVD_IRQn 1 */
}
 8002db4:	bf00      	nop
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002dbc:	4802      	ldr	r0, [pc, #8]	; (8002dc8 <DMA1_Stream0_IRQHandler+0x10>)
 8002dbe:	f001 f909 	bl	8003fd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002dc2:	bf00      	nop
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	24000af0 	.word	0x24000af0

08002dcc <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002dd0:	4802      	ldr	r0, [pc, #8]	; (8002ddc <FDCAN1_IT0_IRQHandler+0x10>)
 8002dd2:	f003 f8bd 	bl	8005f50 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002dd6:	bf00      	nop
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	24000c98 	.word	0x24000c98

08002de0 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002de4:	4802      	ldr	r0, [pc, #8]	; (8002df0 <FDCAN1_IT1_IRQHandler+0x10>)
 8002de6:	f003 f8b3 	bl	8005f50 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8002dea:	bf00      	nop
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	24000c98 	.word	0x24000c98

08002df4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002df8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002dfc:	f003 ff34 	bl	8006c68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002e00:	bf00      	nop
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002e08:	4802      	ldr	r0, [pc, #8]	; (8002e14 <SDMMC1_IRQHandler+0x10>)
 8002e0a:	f009 f8fd 	bl	800c008 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8002e0e:	bf00      	nop
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	24000bf4 	.word	0x24000bf4

08002e18 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002e1c:	4802      	ldr	r0, [pc, #8]	; (8002e28 <OTG_FS_IRQHandler+0x10>)
 8002e1e:	f004 f8b8 	bl	8006f92 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002e22:	bf00      	nop
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	24001884 	.word	0x24001884

08002e2c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e38:	2300      	movs	r3, #0
 8002e3a:	617b      	str	r3, [r7, #20]
 8002e3c:	e00a      	b.n	8002e54 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002e3e:	f3af 8000 	nop.w
 8002e42:	4601      	mov	r1, r0
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	1c5a      	adds	r2, r3, #1
 8002e48:	60ba      	str	r2, [r7, #8]
 8002e4a:	b2ca      	uxtb	r2, r1
 8002e4c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	3301      	adds	r3, #1
 8002e52:	617b      	str	r3, [r7, #20]
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	dbf0      	blt.n	8002e3e <_read+0x12>
	}

return len;
 8002e5c:	687b      	ldr	r3, [r7, #4]
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3718      	adds	r7, #24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
	return -1;
 8002e6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
 8002e86:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e8e:	605a      	str	r2, [r3, #4]
	return 0;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <_isatty>:

int _isatty(int file)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
	return 1;
 8002ea6:	2301      	movs	r3, #1
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
	return 0;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
	...

08002ed0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ed8:	4a14      	ldr	r2, [pc, #80]	; (8002f2c <_sbrk+0x5c>)
 8002eda:	4b15      	ldr	r3, [pc, #84]	; (8002f30 <_sbrk+0x60>)
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ee4:	4b13      	ldr	r3, [pc, #76]	; (8002f34 <_sbrk+0x64>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d102      	bne.n	8002ef2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002eec:	4b11      	ldr	r3, [pc, #68]	; (8002f34 <_sbrk+0x64>)
 8002eee:	4a12      	ldr	r2, [pc, #72]	; (8002f38 <_sbrk+0x68>)
 8002ef0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ef2:	4b10      	ldr	r3, [pc, #64]	; (8002f34 <_sbrk+0x64>)
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4413      	add	r3, r2
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d207      	bcs.n	8002f10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f00:	f014 ffb0 	bl	8017e64 <__errno>
 8002f04:	4602      	mov	r2, r0
 8002f06:	230c      	movs	r3, #12
 8002f08:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f0e:	e009      	b.n	8002f24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f10:	4b08      	ldr	r3, [pc, #32]	; (8002f34 <_sbrk+0x64>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f16:	4b07      	ldr	r3, [pc, #28]	; (8002f34 <_sbrk+0x64>)
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	4a05      	ldr	r2, [pc, #20]	; (8002f34 <_sbrk+0x64>)
 8002f20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f22:	68fb      	ldr	r3, [r7, #12]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3718      	adds	r7, #24
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	24080000 	.word	0x24080000
 8002f30:	00000400 	.word	0x00000400
 8002f34:	24000358 	.word	0x24000358
 8002f38:	24001c90 	.word	0x24001c90

08002f3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002f40:	4b39      	ldr	r3, [pc, #228]	; (8003028 <SystemInit+0xec>)
 8002f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f46:	4a38      	ldr	r2, [pc, #224]	; (8003028 <SystemInit+0xec>)
 8002f48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002f50:	4b36      	ldr	r3, [pc, #216]	; (800302c <SystemInit+0xf0>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 030f 	and.w	r3, r3, #15
 8002f58:	2b06      	cmp	r3, #6
 8002f5a:	d807      	bhi.n	8002f6c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002f5c:	4b33      	ldr	r3, [pc, #204]	; (800302c <SystemInit+0xf0>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f023 030f 	bic.w	r3, r3, #15
 8002f64:	4a31      	ldr	r2, [pc, #196]	; (800302c <SystemInit+0xf0>)
 8002f66:	f043 0307 	orr.w	r3, r3, #7
 8002f6a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002f6c:	4b30      	ldr	r3, [pc, #192]	; (8003030 <SystemInit+0xf4>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a2f      	ldr	r2, [pc, #188]	; (8003030 <SystemInit+0xf4>)
 8002f72:	f043 0301 	orr.w	r3, r3, #1
 8002f76:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002f78:	4b2d      	ldr	r3, [pc, #180]	; (8003030 <SystemInit+0xf4>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002f7e:	4b2c      	ldr	r3, [pc, #176]	; (8003030 <SystemInit+0xf4>)
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	492b      	ldr	r1, [pc, #172]	; (8003030 <SystemInit+0xf4>)
 8002f84:	4b2b      	ldr	r3, [pc, #172]	; (8003034 <SystemInit+0xf8>)
 8002f86:	4013      	ands	r3, r2
 8002f88:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002f8a:	4b28      	ldr	r3, [pc, #160]	; (800302c <SystemInit+0xf0>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	2b07      	cmp	r3, #7
 8002f94:	d907      	bls.n	8002fa6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002f96:	4b25      	ldr	r3, [pc, #148]	; (800302c <SystemInit+0xf0>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f023 030f 	bic.w	r3, r3, #15
 8002f9e:	4a23      	ldr	r2, [pc, #140]	; (800302c <SystemInit+0xf0>)
 8002fa0:	f043 0307 	orr.w	r3, r3, #7
 8002fa4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002fa6:	4b22      	ldr	r3, [pc, #136]	; (8003030 <SystemInit+0xf4>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002fac:	4b20      	ldr	r3, [pc, #128]	; (8003030 <SystemInit+0xf4>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002fb2:	4b1f      	ldr	r3, [pc, #124]	; (8003030 <SystemInit+0xf4>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002fb8:	4b1d      	ldr	r3, [pc, #116]	; (8003030 <SystemInit+0xf4>)
 8002fba:	4a1f      	ldr	r2, [pc, #124]	; (8003038 <SystemInit+0xfc>)
 8002fbc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002fbe:	4b1c      	ldr	r3, [pc, #112]	; (8003030 <SystemInit+0xf4>)
 8002fc0:	4a1e      	ldr	r2, [pc, #120]	; (800303c <SystemInit+0x100>)
 8002fc2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002fc4:	4b1a      	ldr	r3, [pc, #104]	; (8003030 <SystemInit+0xf4>)
 8002fc6:	4a1e      	ldr	r2, [pc, #120]	; (8003040 <SystemInit+0x104>)
 8002fc8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002fca:	4b19      	ldr	r3, [pc, #100]	; (8003030 <SystemInit+0xf4>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002fd0:	4b17      	ldr	r3, [pc, #92]	; (8003030 <SystemInit+0xf4>)
 8002fd2:	4a1b      	ldr	r2, [pc, #108]	; (8003040 <SystemInit+0x104>)
 8002fd4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002fd6:	4b16      	ldr	r3, [pc, #88]	; (8003030 <SystemInit+0xf4>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002fdc:	4b14      	ldr	r3, [pc, #80]	; (8003030 <SystemInit+0xf4>)
 8002fde:	4a18      	ldr	r2, [pc, #96]	; (8003040 <SystemInit+0x104>)
 8002fe0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002fe2:	4b13      	ldr	r3, [pc, #76]	; (8003030 <SystemInit+0xf4>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002fe8:	4b11      	ldr	r3, [pc, #68]	; (8003030 <SystemInit+0xf4>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a10      	ldr	r2, [pc, #64]	; (8003030 <SystemInit+0xf4>)
 8002fee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ff2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002ff4:	4b0e      	ldr	r3, [pc, #56]	; (8003030 <SystemInit+0xf4>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002ffa:	4b12      	ldr	r3, [pc, #72]	; (8003044 <SystemInit+0x108>)
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	4b12      	ldr	r3, [pc, #72]	; (8003048 <SystemInit+0x10c>)
 8003000:	4013      	ands	r3, r2
 8003002:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003006:	d202      	bcs.n	800300e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003008:	4b10      	ldr	r3, [pc, #64]	; (800304c <SystemInit+0x110>)
 800300a:	2201      	movs	r2, #1
 800300c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800300e:	4b10      	ldr	r3, [pc, #64]	; (8003050 <SystemInit+0x114>)
 8003010:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003014:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003016:	4b04      	ldr	r3, [pc, #16]	; (8003028 <SystemInit+0xec>)
 8003018:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800301c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800301e:	bf00      	nop
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	e000ed00 	.word	0xe000ed00
 800302c:	52002000 	.word	0x52002000
 8003030:	58024400 	.word	0x58024400
 8003034:	eaf6ed7f 	.word	0xeaf6ed7f
 8003038:	02020200 	.word	0x02020200
 800303c:	01ff0000 	.word	0x01ff0000
 8003040:	01010280 	.word	0x01010280
 8003044:	5c001000 	.word	0x5c001000
 8003048:	ffff0000 	.word	0xffff0000
 800304c:	51008108 	.word	0x51008108
 8003050:	52004000 	.word	0x52004000

08003054 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003054:	f8df d034 	ldr.w	sp, [pc, #52]	; 800308c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003058:	f7ff ff70 	bl	8002f3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800305c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800305e:	e003      	b.n	8003068 <LoopCopyDataInit>

08003060 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003060:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8003062:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003064:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003066:	3104      	adds	r1, #4

08003068 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003068:	480a      	ldr	r0, [pc, #40]	; (8003094 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800306a:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 800306c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800306e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003070:	d3f6      	bcc.n	8003060 <CopyDataInit>
  ldr  r2, =_sbss
 8003072:	4a0a      	ldr	r2, [pc, #40]	; (800309c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8003074:	e002      	b.n	800307c <LoopFillZerobss>

08003076 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003076:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003078:	f842 3b04 	str.w	r3, [r2], #4

0800307c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800307c:	4b08      	ldr	r3, [pc, #32]	; (80030a0 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800307e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003080:	d3f9      	bcc.n	8003076 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003082:	f014 fef5 	bl	8017e70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003086:	f7fe fd77 	bl	8001b78 <main>
  bx  lr    
 800308a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800308c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8003090:	08019aa8 	.word	0x08019aa8
  ldr  r0, =_sdata
 8003094:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8003098:	24000210 	.word	0x24000210
  ldr  r2, =_sbss
 800309c:	24000210 	.word	0x24000210
  ldr  r3, = _ebss
 80030a0:	24001c90 	.word	0x24001c90

080030a4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030a4:	e7fe      	b.n	80030a4 <ADC3_IRQHandler>
	...

080030a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030ae:	2003      	movs	r0, #3
 80030b0:	f000 f98a 	bl	80033c8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80030b4:	f005 ff1c 	bl	8008ef0 <HAL_RCC_GetSysClockFreq>
 80030b8:	4601      	mov	r1, r0
 80030ba:	4b15      	ldr	r3, [pc, #84]	; (8003110 <HAL_Init+0x68>)
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	0a1b      	lsrs	r3, r3, #8
 80030c0:	f003 030f 	and.w	r3, r3, #15
 80030c4:	4a13      	ldr	r2, [pc, #76]	; (8003114 <HAL_Init+0x6c>)
 80030c6:	5cd3      	ldrb	r3, [r2, r3]
 80030c8:	f003 031f 	and.w	r3, r3, #31
 80030cc:	fa21 f303 	lsr.w	r3, r1, r3
 80030d0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030d2:	4b0f      	ldr	r3, [pc, #60]	; (8003110 <HAL_Init+0x68>)
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	4a0e      	ldr	r2, [pc, #56]	; (8003114 <HAL_Init+0x6c>)
 80030dc:	5cd3      	ldrb	r3, [r2, r3]
 80030de:	f003 031f 	and.w	r3, r3, #31
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	fa22 f303 	lsr.w	r3, r2, r3
 80030e8:	4a0b      	ldr	r2, [pc, #44]	; (8003118 <HAL_Init+0x70>)
 80030ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030ec:	4a0b      	ldr	r2, [pc, #44]	; (800311c <HAL_Init+0x74>)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030f2:	2000      	movs	r0, #0
 80030f4:	f000 f814 	bl	8003120 <HAL_InitTick>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e002      	b.n	8003108 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003102:	f7ff fbbf 	bl	8002884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	58024400 	.word	0x58024400
 8003114:	08019908 	.word	0x08019908
 8003118:	24000048 	.word	0x24000048
 800311c:	24000044 	.word	0x24000044

08003120 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003128:	4b15      	ldr	r3, [pc, #84]	; (8003180 <HAL_InitTick+0x60>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d101      	bne.n	8003134 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e021      	b.n	8003178 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003134:	4b13      	ldr	r3, [pc, #76]	; (8003184 <HAL_InitTick+0x64>)
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	4b11      	ldr	r3, [pc, #68]	; (8003180 <HAL_InitTick+0x60>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	4619      	mov	r1, r3
 800313e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003142:	fbb3 f3f1 	udiv	r3, r3, r1
 8003146:	fbb2 f3f3 	udiv	r3, r2, r3
 800314a:	4618      	mov	r0, r3
 800314c:	f000 f96f 	bl	800342e <HAL_SYSTICK_Config>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e00e      	b.n	8003178 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b0f      	cmp	r3, #15
 800315e:	d80a      	bhi.n	8003176 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003160:	2200      	movs	r2, #0
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	f04f 30ff 	mov.w	r0, #4294967295
 8003168:	f000 f939 	bl	80033de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800316c:	4a06      	ldr	r2, [pc, #24]	; (8003188 <HAL_InitTick+0x68>)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003172:	2300      	movs	r3, #0
 8003174:	e000      	b.n	8003178 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
}
 8003178:	4618      	mov	r0, r3
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	24000050 	.word	0x24000050
 8003184:	24000044 	.word	0x24000044
 8003188:	2400004c 	.word	0x2400004c

0800318c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003190:	4b06      	ldr	r3, [pc, #24]	; (80031ac <HAL_IncTick+0x20>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	461a      	mov	r2, r3
 8003196:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <HAL_IncTick+0x24>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4413      	add	r3, r2
 800319c:	4a04      	ldr	r2, [pc, #16]	; (80031b0 <HAL_IncTick+0x24>)
 800319e:	6013      	str	r3, [r2, #0]
}
 80031a0:	bf00      	nop
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	24000050 	.word	0x24000050
 80031b0:	24000f48 	.word	0x24000f48

080031b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  return uwTick;
 80031b8:	4b03      	ldr	r3, [pc, #12]	; (80031c8 <HAL_GetTick+0x14>)
 80031ba:	681b      	ldr	r3, [r3, #0]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	24000f48 	.word	0x24000f48

080031cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031d4:	f7ff ffee 	bl	80031b4 <HAL_GetTick>
 80031d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e4:	d005      	beq.n	80031f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031e6:	4b09      	ldr	r3, [pc, #36]	; (800320c <HAL_Delay+0x40>)
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	461a      	mov	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4413      	add	r3, r2
 80031f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031f2:	bf00      	nop
 80031f4:	f7ff ffde 	bl	80031b4 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	429a      	cmp	r2, r3
 8003202:	d8f7      	bhi.n	80031f4 <HAL_Delay+0x28>
  {
  }
}
 8003204:	bf00      	nop
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	24000050 	.word	0x24000050

08003210 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003214:	4b03      	ldr	r3, [pc, #12]	; (8003224 <HAL_GetREVID+0x14>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	0c1b      	lsrs	r3, r3, #16
}
 800321a:	4618      	mov	r0, r3
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	5c001000 	.word	0x5c001000

08003228 <__NVIC_SetPriorityGrouping>:
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003238:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <__NVIC_SetPriorityGrouping+0x40>)
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003244:	4013      	ands	r3, r2
 8003246:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003250:	4b06      	ldr	r3, [pc, #24]	; (800326c <__NVIC_SetPriorityGrouping+0x44>)
 8003252:	4313      	orrs	r3, r2
 8003254:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003256:	4a04      	ldr	r2, [pc, #16]	; (8003268 <__NVIC_SetPriorityGrouping+0x40>)
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	60d3      	str	r3, [r2, #12]
}
 800325c:	bf00      	nop
 800325e:	3714      	adds	r7, #20
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	e000ed00 	.word	0xe000ed00
 800326c:	05fa0000 	.word	0x05fa0000

08003270 <__NVIC_GetPriorityGrouping>:
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003274:	4b04      	ldr	r3, [pc, #16]	; (8003288 <__NVIC_GetPriorityGrouping+0x18>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	0a1b      	lsrs	r3, r3, #8
 800327a:	f003 0307 	and.w	r3, r3, #7
}
 800327e:	4618      	mov	r0, r3
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	e000ed00 	.word	0xe000ed00

0800328c <__NVIC_EnableIRQ>:
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	4603      	mov	r3, r0
 8003294:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003296:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800329a:	2b00      	cmp	r3, #0
 800329c:	db0b      	blt.n	80032b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800329e:	88fb      	ldrh	r3, [r7, #6]
 80032a0:	f003 021f 	and.w	r2, r3, #31
 80032a4:	4907      	ldr	r1, [pc, #28]	; (80032c4 <__NVIC_EnableIRQ+0x38>)
 80032a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032aa:	095b      	lsrs	r3, r3, #5
 80032ac:	2001      	movs	r0, #1
 80032ae:	fa00 f202 	lsl.w	r2, r0, r2
 80032b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	e000e100 	.word	0xe000e100

080032c8 <__NVIC_SetPriority>:
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	4603      	mov	r3, r0
 80032d0:	6039      	str	r1, [r7, #0]
 80032d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80032d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	db0a      	blt.n	80032f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	b2da      	uxtb	r2, r3
 80032e0:	490c      	ldr	r1, [pc, #48]	; (8003314 <__NVIC_SetPriority+0x4c>)
 80032e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032e6:	0112      	lsls	r2, r2, #4
 80032e8:	b2d2      	uxtb	r2, r2
 80032ea:	440b      	add	r3, r1
 80032ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80032f0:	e00a      	b.n	8003308 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	4908      	ldr	r1, [pc, #32]	; (8003318 <__NVIC_SetPriority+0x50>)
 80032f8:	88fb      	ldrh	r3, [r7, #6]
 80032fa:	f003 030f 	and.w	r3, r3, #15
 80032fe:	3b04      	subs	r3, #4
 8003300:	0112      	lsls	r2, r2, #4
 8003302:	b2d2      	uxtb	r2, r2
 8003304:	440b      	add	r3, r1
 8003306:	761a      	strb	r2, [r3, #24]
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	e000e100 	.word	0xe000e100
 8003318:	e000ed00 	.word	0xe000ed00

0800331c <NVIC_EncodePriority>:
{
 800331c:	b480      	push	{r7}
 800331e:	b089      	sub	sp, #36	; 0x24
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	f1c3 0307 	rsb	r3, r3, #7
 8003336:	2b04      	cmp	r3, #4
 8003338:	bf28      	it	cs
 800333a:	2304      	movcs	r3, #4
 800333c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	3304      	adds	r3, #4
 8003342:	2b06      	cmp	r3, #6
 8003344:	d902      	bls.n	800334c <NVIC_EncodePriority+0x30>
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	3b03      	subs	r3, #3
 800334a:	e000      	b.n	800334e <NVIC_EncodePriority+0x32>
 800334c:	2300      	movs	r3, #0
 800334e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003350:	f04f 32ff 	mov.w	r2, #4294967295
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	43da      	mvns	r2, r3
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	401a      	ands	r2, r3
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003364:	f04f 31ff 	mov.w	r1, #4294967295
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	fa01 f303 	lsl.w	r3, r1, r3
 800336e:	43d9      	mvns	r1, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003374:	4313      	orrs	r3, r2
}
 8003376:	4618      	mov	r0, r3
 8003378:	3724      	adds	r7, #36	; 0x24
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
	...

08003384 <SysTick_Config>:
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3b01      	subs	r3, #1
 8003390:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003394:	d301      	bcc.n	800339a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003396:	2301      	movs	r3, #1
 8003398:	e00f      	b.n	80033ba <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800339a:	4a0a      	ldr	r2, [pc, #40]	; (80033c4 <SysTick_Config+0x40>)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3b01      	subs	r3, #1
 80033a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033a2:	210f      	movs	r1, #15
 80033a4:	f04f 30ff 	mov.w	r0, #4294967295
 80033a8:	f7ff ff8e 	bl	80032c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033ac:	4b05      	ldr	r3, [pc, #20]	; (80033c4 <SysTick_Config+0x40>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033b2:	4b04      	ldr	r3, [pc, #16]	; (80033c4 <SysTick_Config+0x40>)
 80033b4:	2207      	movs	r2, #7
 80033b6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	e000e010 	.word	0xe000e010

080033c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7ff ff29 	bl	8003228 <__NVIC_SetPriorityGrouping>
}
 80033d6:	bf00      	nop
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b086      	sub	sp, #24
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	4603      	mov	r3, r0
 80033e6:	60b9      	str	r1, [r7, #8]
 80033e8:	607a      	str	r2, [r7, #4]
 80033ea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033ec:	f7ff ff40 	bl	8003270 <__NVIC_GetPriorityGrouping>
 80033f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	68b9      	ldr	r1, [r7, #8]
 80033f6:	6978      	ldr	r0, [r7, #20]
 80033f8:	f7ff ff90 	bl	800331c <NVIC_EncodePriority>
 80033fc:	4602      	mov	r2, r0
 80033fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003402:	4611      	mov	r1, r2
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff ff5f 	bl	80032c8 <__NVIC_SetPriority>
}
 800340a:	bf00      	nop
 800340c:	3718      	adds	r7, #24
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b082      	sub	sp, #8
 8003416:	af00      	add	r7, sp, #0
 8003418:	4603      	mov	r3, r0
 800341a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800341c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff ff33 	bl	800328c <__NVIC_EnableIRQ>
}
 8003426:	bf00      	nop
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b082      	sub	sp, #8
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7ff ffa4 	bl	8003384 <SysTick_Config>
 800343c:	4603      	mov	r3, r0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
	...

08003448 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003450:	f7ff feb0 	bl	80031b4 <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d101      	bne.n	8003460 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e316      	b.n	8003a8e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a66      	ldr	r2, [pc, #408]	; (8003600 <HAL_DMA_Init+0x1b8>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d04a      	beq.n	8003500 <HAL_DMA_Init+0xb8>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a65      	ldr	r2, [pc, #404]	; (8003604 <HAL_DMA_Init+0x1bc>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d045      	beq.n	8003500 <HAL_DMA_Init+0xb8>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a63      	ldr	r2, [pc, #396]	; (8003608 <HAL_DMA_Init+0x1c0>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d040      	beq.n	8003500 <HAL_DMA_Init+0xb8>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a62      	ldr	r2, [pc, #392]	; (800360c <HAL_DMA_Init+0x1c4>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d03b      	beq.n	8003500 <HAL_DMA_Init+0xb8>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a60      	ldr	r2, [pc, #384]	; (8003610 <HAL_DMA_Init+0x1c8>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d036      	beq.n	8003500 <HAL_DMA_Init+0xb8>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a5f      	ldr	r2, [pc, #380]	; (8003614 <HAL_DMA_Init+0x1cc>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d031      	beq.n	8003500 <HAL_DMA_Init+0xb8>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a5d      	ldr	r2, [pc, #372]	; (8003618 <HAL_DMA_Init+0x1d0>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d02c      	beq.n	8003500 <HAL_DMA_Init+0xb8>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a5c      	ldr	r2, [pc, #368]	; (800361c <HAL_DMA_Init+0x1d4>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d027      	beq.n	8003500 <HAL_DMA_Init+0xb8>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a5a      	ldr	r2, [pc, #360]	; (8003620 <HAL_DMA_Init+0x1d8>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d022      	beq.n	8003500 <HAL_DMA_Init+0xb8>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a59      	ldr	r2, [pc, #356]	; (8003624 <HAL_DMA_Init+0x1dc>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d01d      	beq.n	8003500 <HAL_DMA_Init+0xb8>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a57      	ldr	r2, [pc, #348]	; (8003628 <HAL_DMA_Init+0x1e0>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d018      	beq.n	8003500 <HAL_DMA_Init+0xb8>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a56      	ldr	r2, [pc, #344]	; (800362c <HAL_DMA_Init+0x1e4>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d013      	beq.n	8003500 <HAL_DMA_Init+0xb8>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a54      	ldr	r2, [pc, #336]	; (8003630 <HAL_DMA_Init+0x1e8>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d00e      	beq.n	8003500 <HAL_DMA_Init+0xb8>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a53      	ldr	r2, [pc, #332]	; (8003634 <HAL_DMA_Init+0x1ec>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d009      	beq.n	8003500 <HAL_DMA_Init+0xb8>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a51      	ldr	r2, [pc, #324]	; (8003638 <HAL_DMA_Init+0x1f0>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d004      	beq.n	8003500 <HAL_DMA_Init+0xb8>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a50      	ldr	r2, [pc, #320]	; (800363c <HAL_DMA_Init+0x1f4>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d101      	bne.n	8003504 <HAL_DMA_Init+0xbc>
 8003500:	2301      	movs	r3, #1
 8003502:	e000      	b.n	8003506 <HAL_DMA_Init+0xbe>
 8003504:	2300      	movs	r3, #0
 8003506:	2b00      	cmp	r3, #0
 8003508:	f000 813b 	beq.w	8003782 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2202      	movs	r2, #2
 8003518:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a37      	ldr	r2, [pc, #220]	; (8003600 <HAL_DMA_Init+0x1b8>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d04a      	beq.n	80035bc <HAL_DMA_Init+0x174>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a36      	ldr	r2, [pc, #216]	; (8003604 <HAL_DMA_Init+0x1bc>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d045      	beq.n	80035bc <HAL_DMA_Init+0x174>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a34      	ldr	r2, [pc, #208]	; (8003608 <HAL_DMA_Init+0x1c0>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d040      	beq.n	80035bc <HAL_DMA_Init+0x174>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a33      	ldr	r2, [pc, #204]	; (800360c <HAL_DMA_Init+0x1c4>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d03b      	beq.n	80035bc <HAL_DMA_Init+0x174>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a31      	ldr	r2, [pc, #196]	; (8003610 <HAL_DMA_Init+0x1c8>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d036      	beq.n	80035bc <HAL_DMA_Init+0x174>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a30      	ldr	r2, [pc, #192]	; (8003614 <HAL_DMA_Init+0x1cc>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d031      	beq.n	80035bc <HAL_DMA_Init+0x174>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a2e      	ldr	r2, [pc, #184]	; (8003618 <HAL_DMA_Init+0x1d0>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d02c      	beq.n	80035bc <HAL_DMA_Init+0x174>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a2d      	ldr	r2, [pc, #180]	; (800361c <HAL_DMA_Init+0x1d4>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d027      	beq.n	80035bc <HAL_DMA_Init+0x174>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a2b      	ldr	r2, [pc, #172]	; (8003620 <HAL_DMA_Init+0x1d8>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d022      	beq.n	80035bc <HAL_DMA_Init+0x174>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a2a      	ldr	r2, [pc, #168]	; (8003624 <HAL_DMA_Init+0x1dc>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d01d      	beq.n	80035bc <HAL_DMA_Init+0x174>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a28      	ldr	r2, [pc, #160]	; (8003628 <HAL_DMA_Init+0x1e0>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d018      	beq.n	80035bc <HAL_DMA_Init+0x174>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a27      	ldr	r2, [pc, #156]	; (800362c <HAL_DMA_Init+0x1e4>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d013      	beq.n	80035bc <HAL_DMA_Init+0x174>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a25      	ldr	r2, [pc, #148]	; (8003630 <HAL_DMA_Init+0x1e8>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d00e      	beq.n	80035bc <HAL_DMA_Init+0x174>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a24      	ldr	r2, [pc, #144]	; (8003634 <HAL_DMA_Init+0x1ec>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d009      	beq.n	80035bc <HAL_DMA_Init+0x174>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a22      	ldr	r2, [pc, #136]	; (8003638 <HAL_DMA_Init+0x1f0>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d004      	beq.n	80035bc <HAL_DMA_Init+0x174>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a21      	ldr	r2, [pc, #132]	; (800363c <HAL_DMA_Init+0x1f4>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d108      	bne.n	80035ce <HAL_DMA_Init+0x186>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 0201 	bic.w	r2, r2, #1
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	e007      	b.n	80035de <HAL_DMA_Init+0x196>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 0201 	bic.w	r2, r2, #1
 80035dc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80035de:	e02f      	b.n	8003640 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035e0:	f7ff fde8 	bl	80031b4 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b05      	cmp	r3, #5
 80035ec:	d928      	bls.n	8003640 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2220      	movs	r2, #32
 80035f2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2203      	movs	r2, #3
 80035f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e246      	b.n	8003a8e <HAL_DMA_Init+0x646>
 8003600:	40020010 	.word	0x40020010
 8003604:	40020028 	.word	0x40020028
 8003608:	40020040 	.word	0x40020040
 800360c:	40020058 	.word	0x40020058
 8003610:	40020070 	.word	0x40020070
 8003614:	40020088 	.word	0x40020088
 8003618:	400200a0 	.word	0x400200a0
 800361c:	400200b8 	.word	0x400200b8
 8003620:	40020410 	.word	0x40020410
 8003624:	40020428 	.word	0x40020428
 8003628:	40020440 	.word	0x40020440
 800362c:	40020458 	.word	0x40020458
 8003630:	40020470 	.word	0x40020470
 8003634:	40020488 	.word	0x40020488
 8003638:	400204a0 	.word	0x400204a0
 800363c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1c8      	bne.n	80035e0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	4b83      	ldr	r3, [pc, #524]	; (8003868 <HAL_DMA_Init+0x420>)
 800365a:	4013      	ands	r3, r2
 800365c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003666:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003672:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800367e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	4313      	orrs	r3, r2
 800368a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003690:	2b04      	cmp	r3, #4
 8003692:	d107      	bne.n	80036a4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369c:	4313      	orrs	r3, r2
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80036a4:	4b71      	ldr	r3, [pc, #452]	; (800386c <HAL_DMA_Init+0x424>)
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	4b71      	ldr	r3, [pc, #452]	; (8003870 <HAL_DMA_Init+0x428>)
 80036aa:	4013      	ands	r3, r2
 80036ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036b0:	d328      	bcc.n	8003704 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2b28      	cmp	r3, #40	; 0x28
 80036b8:	d903      	bls.n	80036c2 <HAL_DMA_Init+0x27a>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	2b2e      	cmp	r3, #46	; 0x2e
 80036c0:	d917      	bls.n	80036f2 <HAL_DMA_Init+0x2aa>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	2b3e      	cmp	r3, #62	; 0x3e
 80036c8:	d903      	bls.n	80036d2 <HAL_DMA_Init+0x28a>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b42      	cmp	r3, #66	; 0x42
 80036d0:	d90f      	bls.n	80036f2 <HAL_DMA_Init+0x2aa>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2b46      	cmp	r3, #70	; 0x46
 80036d8:	d903      	bls.n	80036e2 <HAL_DMA_Init+0x29a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2b48      	cmp	r3, #72	; 0x48
 80036e0:	d907      	bls.n	80036f2 <HAL_DMA_Init+0x2aa>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2b4e      	cmp	r3, #78	; 0x4e
 80036e8:	d905      	bls.n	80036f6 <HAL_DMA_Init+0x2ae>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2b52      	cmp	r3, #82	; 0x52
 80036f0:	d801      	bhi.n	80036f6 <HAL_DMA_Init+0x2ae>
 80036f2:	2301      	movs	r3, #1
 80036f4:	e000      	b.n	80036f8 <HAL_DMA_Init+0x2b0>
 80036f6:	2300      	movs	r3, #0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d003      	beq.n	8003704 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003702:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	f023 0307 	bic.w	r3, r3, #7
 800371a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	4313      	orrs	r3, r2
 8003724:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	2b04      	cmp	r3, #4
 800372c:	d117      	bne.n	800375e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	4313      	orrs	r3, r2
 8003736:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00e      	beq.n	800375e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f001 fdcf 	bl	80052e4 <DMA_CheckFifoParam>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d008      	beq.n	800375e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2240      	movs	r2, #64	; 0x40
 8003750:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e197      	b.n	8003a8e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f001 fd0a 	bl	8005180 <DMA_CalcBaseAndBitshift>
 800376c:	4603      	mov	r3, r0
 800376e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003774:	f003 031f 	and.w	r3, r3, #31
 8003778:	223f      	movs	r2, #63	; 0x3f
 800377a:	409a      	lsls	r2, r3
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	609a      	str	r2, [r3, #8]
 8003780:	e0cd      	b.n	800391e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a3b      	ldr	r2, [pc, #236]	; (8003874 <HAL_DMA_Init+0x42c>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d022      	beq.n	80037d2 <HAL_DMA_Init+0x38a>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a39      	ldr	r2, [pc, #228]	; (8003878 <HAL_DMA_Init+0x430>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d01d      	beq.n	80037d2 <HAL_DMA_Init+0x38a>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a38      	ldr	r2, [pc, #224]	; (800387c <HAL_DMA_Init+0x434>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d018      	beq.n	80037d2 <HAL_DMA_Init+0x38a>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a36      	ldr	r2, [pc, #216]	; (8003880 <HAL_DMA_Init+0x438>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d013      	beq.n	80037d2 <HAL_DMA_Init+0x38a>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a35      	ldr	r2, [pc, #212]	; (8003884 <HAL_DMA_Init+0x43c>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d00e      	beq.n	80037d2 <HAL_DMA_Init+0x38a>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a33      	ldr	r2, [pc, #204]	; (8003888 <HAL_DMA_Init+0x440>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d009      	beq.n	80037d2 <HAL_DMA_Init+0x38a>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a32      	ldr	r2, [pc, #200]	; (800388c <HAL_DMA_Init+0x444>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d004      	beq.n	80037d2 <HAL_DMA_Init+0x38a>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a30      	ldr	r2, [pc, #192]	; (8003890 <HAL_DMA_Init+0x448>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d101      	bne.n	80037d6 <HAL_DMA_Init+0x38e>
 80037d2:	2301      	movs	r3, #1
 80037d4:	e000      	b.n	80037d8 <HAL_DMA_Init+0x390>
 80037d6:	2300      	movs	r3, #0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 8097 	beq.w	800390c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a24      	ldr	r2, [pc, #144]	; (8003874 <HAL_DMA_Init+0x42c>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d021      	beq.n	800382c <HAL_DMA_Init+0x3e4>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a22      	ldr	r2, [pc, #136]	; (8003878 <HAL_DMA_Init+0x430>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d01c      	beq.n	800382c <HAL_DMA_Init+0x3e4>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a21      	ldr	r2, [pc, #132]	; (800387c <HAL_DMA_Init+0x434>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d017      	beq.n	800382c <HAL_DMA_Init+0x3e4>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a1f      	ldr	r2, [pc, #124]	; (8003880 <HAL_DMA_Init+0x438>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d012      	beq.n	800382c <HAL_DMA_Init+0x3e4>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a1e      	ldr	r2, [pc, #120]	; (8003884 <HAL_DMA_Init+0x43c>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d00d      	beq.n	800382c <HAL_DMA_Init+0x3e4>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a1c      	ldr	r2, [pc, #112]	; (8003888 <HAL_DMA_Init+0x440>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d008      	beq.n	800382c <HAL_DMA_Init+0x3e4>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a1b      	ldr	r2, [pc, #108]	; (800388c <HAL_DMA_Init+0x444>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d003      	beq.n	800382c <HAL_DMA_Init+0x3e4>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a19      	ldr	r2, [pc, #100]	; (8003890 <HAL_DMA_Init+0x448>)
 800382a:	4293      	cmp	r3, r2
 800382c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2202      	movs	r2, #2
 800383a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	4b12      	ldr	r3, [pc, #72]	; (8003894 <HAL_DMA_Init+0x44c>)
 800384a:	4013      	ands	r3, r2
 800384c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	2b40      	cmp	r3, #64	; 0x40
 8003854:	d020      	beq.n	8003898 <HAL_DMA_Init+0x450>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	2b80      	cmp	r3, #128	; 0x80
 800385c:	d102      	bne.n	8003864 <HAL_DMA_Init+0x41c>
 800385e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003862:	e01a      	b.n	800389a <HAL_DMA_Init+0x452>
 8003864:	2300      	movs	r3, #0
 8003866:	e018      	b.n	800389a <HAL_DMA_Init+0x452>
 8003868:	fe10803f 	.word	0xfe10803f
 800386c:	5c001000 	.word	0x5c001000
 8003870:	ffff0000 	.word	0xffff0000
 8003874:	58025408 	.word	0x58025408
 8003878:	5802541c 	.word	0x5802541c
 800387c:	58025430 	.word	0x58025430
 8003880:	58025444 	.word	0x58025444
 8003884:	58025458 	.word	0x58025458
 8003888:	5802546c 	.word	0x5802546c
 800388c:	58025480 	.word	0x58025480
 8003890:	58025494 	.word	0x58025494
 8003894:	fffe000f 	.word	0xfffe000f
 8003898:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	68d2      	ldr	r2, [r2, #12]
 800389e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80038a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80038a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80038b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80038b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80038c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80038c8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	461a      	mov	r2, r3
 80038de:	4b6e      	ldr	r3, [pc, #440]	; (8003a98 <HAL_DMA_Init+0x650>)
 80038e0:	4413      	add	r3, r2
 80038e2:	4a6e      	ldr	r2, [pc, #440]	; (8003a9c <HAL_DMA_Init+0x654>)
 80038e4:	fba2 2303 	umull	r2, r3, r2, r3
 80038e8:	091b      	lsrs	r3, r3, #4
 80038ea:	009a      	lsls	r2, r3, #2
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f001 fc45 	bl	8005180 <DMA_CalcBaseAndBitshift>
 80038f6:	4603      	mov	r3, r0
 80038f8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fe:	f003 031f 	and.w	r3, r3, #31
 8003902:	2201      	movs	r2, #1
 8003904:	409a      	lsls	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	605a      	str	r2, [r3, #4]
 800390a:	e008      	b.n	800391e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2240      	movs	r2, #64	; 0x40
 8003910:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2203      	movs	r2, #3
 8003916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e0b7      	b.n	8003a8e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a5f      	ldr	r2, [pc, #380]	; (8003aa0 <HAL_DMA_Init+0x658>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d072      	beq.n	8003a0e <HAL_DMA_Init+0x5c6>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a5d      	ldr	r2, [pc, #372]	; (8003aa4 <HAL_DMA_Init+0x65c>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d06d      	beq.n	8003a0e <HAL_DMA_Init+0x5c6>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a5c      	ldr	r2, [pc, #368]	; (8003aa8 <HAL_DMA_Init+0x660>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d068      	beq.n	8003a0e <HAL_DMA_Init+0x5c6>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a5a      	ldr	r2, [pc, #360]	; (8003aac <HAL_DMA_Init+0x664>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d063      	beq.n	8003a0e <HAL_DMA_Init+0x5c6>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a59      	ldr	r2, [pc, #356]	; (8003ab0 <HAL_DMA_Init+0x668>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d05e      	beq.n	8003a0e <HAL_DMA_Init+0x5c6>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a57      	ldr	r2, [pc, #348]	; (8003ab4 <HAL_DMA_Init+0x66c>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d059      	beq.n	8003a0e <HAL_DMA_Init+0x5c6>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a56      	ldr	r2, [pc, #344]	; (8003ab8 <HAL_DMA_Init+0x670>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d054      	beq.n	8003a0e <HAL_DMA_Init+0x5c6>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a54      	ldr	r2, [pc, #336]	; (8003abc <HAL_DMA_Init+0x674>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d04f      	beq.n	8003a0e <HAL_DMA_Init+0x5c6>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a53      	ldr	r2, [pc, #332]	; (8003ac0 <HAL_DMA_Init+0x678>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d04a      	beq.n	8003a0e <HAL_DMA_Init+0x5c6>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a51      	ldr	r2, [pc, #324]	; (8003ac4 <HAL_DMA_Init+0x67c>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d045      	beq.n	8003a0e <HAL_DMA_Init+0x5c6>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a50      	ldr	r2, [pc, #320]	; (8003ac8 <HAL_DMA_Init+0x680>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d040      	beq.n	8003a0e <HAL_DMA_Init+0x5c6>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a4e      	ldr	r2, [pc, #312]	; (8003acc <HAL_DMA_Init+0x684>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d03b      	beq.n	8003a0e <HAL_DMA_Init+0x5c6>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a4d      	ldr	r2, [pc, #308]	; (8003ad0 <HAL_DMA_Init+0x688>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d036      	beq.n	8003a0e <HAL_DMA_Init+0x5c6>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a4b      	ldr	r2, [pc, #300]	; (8003ad4 <HAL_DMA_Init+0x68c>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d031      	beq.n	8003a0e <HAL_DMA_Init+0x5c6>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a4a      	ldr	r2, [pc, #296]	; (8003ad8 <HAL_DMA_Init+0x690>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d02c      	beq.n	8003a0e <HAL_DMA_Init+0x5c6>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a48      	ldr	r2, [pc, #288]	; (8003adc <HAL_DMA_Init+0x694>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d027      	beq.n	8003a0e <HAL_DMA_Init+0x5c6>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a47      	ldr	r2, [pc, #284]	; (8003ae0 <HAL_DMA_Init+0x698>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d022      	beq.n	8003a0e <HAL_DMA_Init+0x5c6>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a45      	ldr	r2, [pc, #276]	; (8003ae4 <HAL_DMA_Init+0x69c>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d01d      	beq.n	8003a0e <HAL_DMA_Init+0x5c6>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a44      	ldr	r2, [pc, #272]	; (8003ae8 <HAL_DMA_Init+0x6a0>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d018      	beq.n	8003a0e <HAL_DMA_Init+0x5c6>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a42      	ldr	r2, [pc, #264]	; (8003aec <HAL_DMA_Init+0x6a4>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d013      	beq.n	8003a0e <HAL_DMA_Init+0x5c6>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a41      	ldr	r2, [pc, #260]	; (8003af0 <HAL_DMA_Init+0x6a8>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d00e      	beq.n	8003a0e <HAL_DMA_Init+0x5c6>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a3f      	ldr	r2, [pc, #252]	; (8003af4 <HAL_DMA_Init+0x6ac>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d009      	beq.n	8003a0e <HAL_DMA_Init+0x5c6>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a3e      	ldr	r2, [pc, #248]	; (8003af8 <HAL_DMA_Init+0x6b0>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d004      	beq.n	8003a0e <HAL_DMA_Init+0x5c6>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a3c      	ldr	r2, [pc, #240]	; (8003afc <HAL_DMA_Init+0x6b4>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d101      	bne.n	8003a12 <HAL_DMA_Init+0x5ca>
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e000      	b.n	8003a14 <HAL_DMA_Init+0x5cc>
 8003a12:	2300      	movs	r3, #0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d032      	beq.n	8003a7e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f001 fcdf 	bl	80053dc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	2b80      	cmp	r3, #128	; 0x80
 8003a24:	d102      	bne.n	8003a2c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a34:	b2d2      	uxtb	r2, r2
 8003a36:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003a40:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d010      	beq.n	8003a6c <HAL_DMA_Init+0x624>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b08      	cmp	r3, #8
 8003a50:	d80c      	bhi.n	8003a6c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f001 fd5c 	bl	8005510 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003a68:	605a      	str	r2, [r3, #4]
 8003a6a:	e008      	b.n	8003a7e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3718      	adds	r7, #24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	a7fdabf8 	.word	0xa7fdabf8
 8003a9c:	cccccccd 	.word	0xcccccccd
 8003aa0:	40020010 	.word	0x40020010
 8003aa4:	40020028 	.word	0x40020028
 8003aa8:	40020040 	.word	0x40020040
 8003aac:	40020058 	.word	0x40020058
 8003ab0:	40020070 	.word	0x40020070
 8003ab4:	40020088 	.word	0x40020088
 8003ab8:	400200a0 	.word	0x400200a0
 8003abc:	400200b8 	.word	0x400200b8
 8003ac0:	40020410 	.word	0x40020410
 8003ac4:	40020428 	.word	0x40020428
 8003ac8:	40020440 	.word	0x40020440
 8003acc:	40020458 	.word	0x40020458
 8003ad0:	40020470 	.word	0x40020470
 8003ad4:	40020488 	.word	0x40020488
 8003ad8:	400204a0 	.word	0x400204a0
 8003adc:	400204b8 	.word	0x400204b8
 8003ae0:	58025408 	.word	0x58025408
 8003ae4:	5802541c 	.word	0x5802541c
 8003ae8:	58025430 	.word	0x58025430
 8003aec:	58025444 	.word	0x58025444
 8003af0:	58025458 	.word	0x58025458
 8003af4:	5802546c 	.word	0x5802546c
 8003af8:	58025480 	.word	0x58025480
 8003afc:	58025494 	.word	0x58025494

08003b00 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
 8003b0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d101      	bne.n	8003b1c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e226      	b.n	8003f6a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d101      	bne.n	8003b2a <HAL_DMA_Start_IT+0x2a>
 8003b26:	2302      	movs	r3, #2
 8003b28:	e21f      	b.n	8003f6a <HAL_DMA_Start_IT+0x46a>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	f040 820a 	bne.w	8003f54 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2202      	movs	r2, #2
 8003b44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a68      	ldr	r2, [pc, #416]	; (8003cf4 <HAL_DMA_Start_IT+0x1f4>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d04a      	beq.n	8003bee <HAL_DMA_Start_IT+0xee>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a66      	ldr	r2, [pc, #408]	; (8003cf8 <HAL_DMA_Start_IT+0x1f8>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d045      	beq.n	8003bee <HAL_DMA_Start_IT+0xee>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a65      	ldr	r2, [pc, #404]	; (8003cfc <HAL_DMA_Start_IT+0x1fc>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d040      	beq.n	8003bee <HAL_DMA_Start_IT+0xee>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a63      	ldr	r2, [pc, #396]	; (8003d00 <HAL_DMA_Start_IT+0x200>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d03b      	beq.n	8003bee <HAL_DMA_Start_IT+0xee>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a62      	ldr	r2, [pc, #392]	; (8003d04 <HAL_DMA_Start_IT+0x204>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d036      	beq.n	8003bee <HAL_DMA_Start_IT+0xee>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a60      	ldr	r2, [pc, #384]	; (8003d08 <HAL_DMA_Start_IT+0x208>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d031      	beq.n	8003bee <HAL_DMA_Start_IT+0xee>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a5f      	ldr	r2, [pc, #380]	; (8003d0c <HAL_DMA_Start_IT+0x20c>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d02c      	beq.n	8003bee <HAL_DMA_Start_IT+0xee>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a5d      	ldr	r2, [pc, #372]	; (8003d10 <HAL_DMA_Start_IT+0x210>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d027      	beq.n	8003bee <HAL_DMA_Start_IT+0xee>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a5c      	ldr	r2, [pc, #368]	; (8003d14 <HAL_DMA_Start_IT+0x214>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d022      	beq.n	8003bee <HAL_DMA_Start_IT+0xee>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a5a      	ldr	r2, [pc, #360]	; (8003d18 <HAL_DMA_Start_IT+0x218>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d01d      	beq.n	8003bee <HAL_DMA_Start_IT+0xee>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a59      	ldr	r2, [pc, #356]	; (8003d1c <HAL_DMA_Start_IT+0x21c>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d018      	beq.n	8003bee <HAL_DMA_Start_IT+0xee>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a57      	ldr	r2, [pc, #348]	; (8003d20 <HAL_DMA_Start_IT+0x220>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d013      	beq.n	8003bee <HAL_DMA_Start_IT+0xee>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a56      	ldr	r2, [pc, #344]	; (8003d24 <HAL_DMA_Start_IT+0x224>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d00e      	beq.n	8003bee <HAL_DMA_Start_IT+0xee>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a54      	ldr	r2, [pc, #336]	; (8003d28 <HAL_DMA_Start_IT+0x228>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d009      	beq.n	8003bee <HAL_DMA_Start_IT+0xee>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a53      	ldr	r2, [pc, #332]	; (8003d2c <HAL_DMA_Start_IT+0x22c>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d004      	beq.n	8003bee <HAL_DMA_Start_IT+0xee>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a51      	ldr	r2, [pc, #324]	; (8003d30 <HAL_DMA_Start_IT+0x230>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d108      	bne.n	8003c00 <HAL_DMA_Start_IT+0x100>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 0201 	bic.w	r2, r2, #1
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	e007      	b.n	8003c10 <HAL_DMA_Start_IT+0x110>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 0201 	bic.w	r2, r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	68b9      	ldr	r1, [r7, #8]
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f001 f906 	bl	8004e28 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a34      	ldr	r2, [pc, #208]	; (8003cf4 <HAL_DMA_Start_IT+0x1f4>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d04a      	beq.n	8003cbc <HAL_DMA_Start_IT+0x1bc>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a33      	ldr	r2, [pc, #204]	; (8003cf8 <HAL_DMA_Start_IT+0x1f8>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d045      	beq.n	8003cbc <HAL_DMA_Start_IT+0x1bc>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a31      	ldr	r2, [pc, #196]	; (8003cfc <HAL_DMA_Start_IT+0x1fc>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d040      	beq.n	8003cbc <HAL_DMA_Start_IT+0x1bc>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a30      	ldr	r2, [pc, #192]	; (8003d00 <HAL_DMA_Start_IT+0x200>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d03b      	beq.n	8003cbc <HAL_DMA_Start_IT+0x1bc>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a2e      	ldr	r2, [pc, #184]	; (8003d04 <HAL_DMA_Start_IT+0x204>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d036      	beq.n	8003cbc <HAL_DMA_Start_IT+0x1bc>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a2d      	ldr	r2, [pc, #180]	; (8003d08 <HAL_DMA_Start_IT+0x208>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d031      	beq.n	8003cbc <HAL_DMA_Start_IT+0x1bc>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a2b      	ldr	r2, [pc, #172]	; (8003d0c <HAL_DMA_Start_IT+0x20c>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d02c      	beq.n	8003cbc <HAL_DMA_Start_IT+0x1bc>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a2a      	ldr	r2, [pc, #168]	; (8003d10 <HAL_DMA_Start_IT+0x210>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d027      	beq.n	8003cbc <HAL_DMA_Start_IT+0x1bc>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a28      	ldr	r2, [pc, #160]	; (8003d14 <HAL_DMA_Start_IT+0x214>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d022      	beq.n	8003cbc <HAL_DMA_Start_IT+0x1bc>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a27      	ldr	r2, [pc, #156]	; (8003d18 <HAL_DMA_Start_IT+0x218>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d01d      	beq.n	8003cbc <HAL_DMA_Start_IT+0x1bc>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a25      	ldr	r2, [pc, #148]	; (8003d1c <HAL_DMA_Start_IT+0x21c>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d018      	beq.n	8003cbc <HAL_DMA_Start_IT+0x1bc>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a24      	ldr	r2, [pc, #144]	; (8003d20 <HAL_DMA_Start_IT+0x220>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d013      	beq.n	8003cbc <HAL_DMA_Start_IT+0x1bc>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a22      	ldr	r2, [pc, #136]	; (8003d24 <HAL_DMA_Start_IT+0x224>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d00e      	beq.n	8003cbc <HAL_DMA_Start_IT+0x1bc>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a21      	ldr	r2, [pc, #132]	; (8003d28 <HAL_DMA_Start_IT+0x228>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d009      	beq.n	8003cbc <HAL_DMA_Start_IT+0x1bc>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a1f      	ldr	r2, [pc, #124]	; (8003d2c <HAL_DMA_Start_IT+0x22c>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d004      	beq.n	8003cbc <HAL_DMA_Start_IT+0x1bc>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a1e      	ldr	r2, [pc, #120]	; (8003d30 <HAL_DMA_Start_IT+0x230>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d101      	bne.n	8003cc0 <HAL_DMA_Start_IT+0x1c0>
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e000      	b.n	8003cc2 <HAL_DMA_Start_IT+0x1c2>
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d036      	beq.n	8003d34 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f023 021e 	bic.w	r2, r3, #30
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f042 0216 	orr.w	r2, r2, #22
 8003cd8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d03e      	beq.n	8003d60 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f042 0208 	orr.w	r2, r2, #8
 8003cf0:	601a      	str	r2, [r3, #0]
 8003cf2:	e035      	b.n	8003d60 <HAL_DMA_Start_IT+0x260>
 8003cf4:	40020010 	.word	0x40020010
 8003cf8:	40020028 	.word	0x40020028
 8003cfc:	40020040 	.word	0x40020040
 8003d00:	40020058 	.word	0x40020058
 8003d04:	40020070 	.word	0x40020070
 8003d08:	40020088 	.word	0x40020088
 8003d0c:	400200a0 	.word	0x400200a0
 8003d10:	400200b8 	.word	0x400200b8
 8003d14:	40020410 	.word	0x40020410
 8003d18:	40020428 	.word	0x40020428
 8003d1c:	40020440 	.word	0x40020440
 8003d20:	40020458 	.word	0x40020458
 8003d24:	40020470 	.word	0x40020470
 8003d28:	40020488 	.word	0x40020488
 8003d2c:	400204a0 	.word	0x400204a0
 8003d30:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f023 020e 	bic.w	r2, r3, #14
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 020a 	orr.w	r2, r2, #10
 8003d46:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d007      	beq.n	8003d60 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0204 	orr.w	r2, r2, #4
 8003d5e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a83      	ldr	r2, [pc, #524]	; (8003f74 <HAL_DMA_Start_IT+0x474>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d072      	beq.n	8003e50 <HAL_DMA_Start_IT+0x350>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a82      	ldr	r2, [pc, #520]	; (8003f78 <HAL_DMA_Start_IT+0x478>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d06d      	beq.n	8003e50 <HAL_DMA_Start_IT+0x350>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a80      	ldr	r2, [pc, #512]	; (8003f7c <HAL_DMA_Start_IT+0x47c>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d068      	beq.n	8003e50 <HAL_DMA_Start_IT+0x350>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a7f      	ldr	r2, [pc, #508]	; (8003f80 <HAL_DMA_Start_IT+0x480>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d063      	beq.n	8003e50 <HAL_DMA_Start_IT+0x350>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a7d      	ldr	r2, [pc, #500]	; (8003f84 <HAL_DMA_Start_IT+0x484>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d05e      	beq.n	8003e50 <HAL_DMA_Start_IT+0x350>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a7c      	ldr	r2, [pc, #496]	; (8003f88 <HAL_DMA_Start_IT+0x488>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d059      	beq.n	8003e50 <HAL_DMA_Start_IT+0x350>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a7a      	ldr	r2, [pc, #488]	; (8003f8c <HAL_DMA_Start_IT+0x48c>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d054      	beq.n	8003e50 <HAL_DMA_Start_IT+0x350>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a79      	ldr	r2, [pc, #484]	; (8003f90 <HAL_DMA_Start_IT+0x490>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d04f      	beq.n	8003e50 <HAL_DMA_Start_IT+0x350>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a77      	ldr	r2, [pc, #476]	; (8003f94 <HAL_DMA_Start_IT+0x494>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d04a      	beq.n	8003e50 <HAL_DMA_Start_IT+0x350>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a76      	ldr	r2, [pc, #472]	; (8003f98 <HAL_DMA_Start_IT+0x498>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d045      	beq.n	8003e50 <HAL_DMA_Start_IT+0x350>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a74      	ldr	r2, [pc, #464]	; (8003f9c <HAL_DMA_Start_IT+0x49c>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d040      	beq.n	8003e50 <HAL_DMA_Start_IT+0x350>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a73      	ldr	r2, [pc, #460]	; (8003fa0 <HAL_DMA_Start_IT+0x4a0>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d03b      	beq.n	8003e50 <HAL_DMA_Start_IT+0x350>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a71      	ldr	r2, [pc, #452]	; (8003fa4 <HAL_DMA_Start_IT+0x4a4>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d036      	beq.n	8003e50 <HAL_DMA_Start_IT+0x350>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a70      	ldr	r2, [pc, #448]	; (8003fa8 <HAL_DMA_Start_IT+0x4a8>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d031      	beq.n	8003e50 <HAL_DMA_Start_IT+0x350>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a6e      	ldr	r2, [pc, #440]	; (8003fac <HAL_DMA_Start_IT+0x4ac>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d02c      	beq.n	8003e50 <HAL_DMA_Start_IT+0x350>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a6d      	ldr	r2, [pc, #436]	; (8003fb0 <HAL_DMA_Start_IT+0x4b0>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d027      	beq.n	8003e50 <HAL_DMA_Start_IT+0x350>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a6b      	ldr	r2, [pc, #428]	; (8003fb4 <HAL_DMA_Start_IT+0x4b4>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d022      	beq.n	8003e50 <HAL_DMA_Start_IT+0x350>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a6a      	ldr	r2, [pc, #424]	; (8003fb8 <HAL_DMA_Start_IT+0x4b8>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d01d      	beq.n	8003e50 <HAL_DMA_Start_IT+0x350>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a68      	ldr	r2, [pc, #416]	; (8003fbc <HAL_DMA_Start_IT+0x4bc>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d018      	beq.n	8003e50 <HAL_DMA_Start_IT+0x350>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a67      	ldr	r2, [pc, #412]	; (8003fc0 <HAL_DMA_Start_IT+0x4c0>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d013      	beq.n	8003e50 <HAL_DMA_Start_IT+0x350>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a65      	ldr	r2, [pc, #404]	; (8003fc4 <HAL_DMA_Start_IT+0x4c4>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d00e      	beq.n	8003e50 <HAL_DMA_Start_IT+0x350>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a64      	ldr	r2, [pc, #400]	; (8003fc8 <HAL_DMA_Start_IT+0x4c8>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d009      	beq.n	8003e50 <HAL_DMA_Start_IT+0x350>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a62      	ldr	r2, [pc, #392]	; (8003fcc <HAL_DMA_Start_IT+0x4cc>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d004      	beq.n	8003e50 <HAL_DMA_Start_IT+0x350>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a61      	ldr	r2, [pc, #388]	; (8003fd0 <HAL_DMA_Start_IT+0x4d0>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d101      	bne.n	8003e54 <HAL_DMA_Start_IT+0x354>
 8003e50:	2301      	movs	r3, #1
 8003e52:	e000      	b.n	8003e56 <HAL_DMA_Start_IT+0x356>
 8003e54:	2300      	movs	r3, #0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d01a      	beq.n	8003e90 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d007      	beq.n	8003e78 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e76:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d007      	beq.n	8003e90 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e8e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a37      	ldr	r2, [pc, #220]	; (8003f74 <HAL_DMA_Start_IT+0x474>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d04a      	beq.n	8003f30 <HAL_DMA_Start_IT+0x430>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a36      	ldr	r2, [pc, #216]	; (8003f78 <HAL_DMA_Start_IT+0x478>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d045      	beq.n	8003f30 <HAL_DMA_Start_IT+0x430>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a34      	ldr	r2, [pc, #208]	; (8003f7c <HAL_DMA_Start_IT+0x47c>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d040      	beq.n	8003f30 <HAL_DMA_Start_IT+0x430>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a33      	ldr	r2, [pc, #204]	; (8003f80 <HAL_DMA_Start_IT+0x480>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d03b      	beq.n	8003f30 <HAL_DMA_Start_IT+0x430>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a31      	ldr	r2, [pc, #196]	; (8003f84 <HAL_DMA_Start_IT+0x484>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d036      	beq.n	8003f30 <HAL_DMA_Start_IT+0x430>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a30      	ldr	r2, [pc, #192]	; (8003f88 <HAL_DMA_Start_IT+0x488>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d031      	beq.n	8003f30 <HAL_DMA_Start_IT+0x430>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a2e      	ldr	r2, [pc, #184]	; (8003f8c <HAL_DMA_Start_IT+0x48c>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d02c      	beq.n	8003f30 <HAL_DMA_Start_IT+0x430>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a2d      	ldr	r2, [pc, #180]	; (8003f90 <HAL_DMA_Start_IT+0x490>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d027      	beq.n	8003f30 <HAL_DMA_Start_IT+0x430>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a2b      	ldr	r2, [pc, #172]	; (8003f94 <HAL_DMA_Start_IT+0x494>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d022      	beq.n	8003f30 <HAL_DMA_Start_IT+0x430>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a2a      	ldr	r2, [pc, #168]	; (8003f98 <HAL_DMA_Start_IT+0x498>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d01d      	beq.n	8003f30 <HAL_DMA_Start_IT+0x430>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a28      	ldr	r2, [pc, #160]	; (8003f9c <HAL_DMA_Start_IT+0x49c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d018      	beq.n	8003f30 <HAL_DMA_Start_IT+0x430>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a27      	ldr	r2, [pc, #156]	; (8003fa0 <HAL_DMA_Start_IT+0x4a0>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d013      	beq.n	8003f30 <HAL_DMA_Start_IT+0x430>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a25      	ldr	r2, [pc, #148]	; (8003fa4 <HAL_DMA_Start_IT+0x4a4>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d00e      	beq.n	8003f30 <HAL_DMA_Start_IT+0x430>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a24      	ldr	r2, [pc, #144]	; (8003fa8 <HAL_DMA_Start_IT+0x4a8>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d009      	beq.n	8003f30 <HAL_DMA_Start_IT+0x430>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a22      	ldr	r2, [pc, #136]	; (8003fac <HAL_DMA_Start_IT+0x4ac>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d004      	beq.n	8003f30 <HAL_DMA_Start_IT+0x430>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a21      	ldr	r2, [pc, #132]	; (8003fb0 <HAL_DMA_Start_IT+0x4b0>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d108      	bne.n	8003f42 <HAL_DMA_Start_IT+0x442>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f042 0201 	orr.w	r2, r2, #1
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	e012      	b.n	8003f68 <HAL_DMA_Start_IT+0x468>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f042 0201 	orr.w	r2, r2, #1
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	e009      	b.n	8003f68 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f62:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003f68:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	40020010 	.word	0x40020010
 8003f78:	40020028 	.word	0x40020028
 8003f7c:	40020040 	.word	0x40020040
 8003f80:	40020058 	.word	0x40020058
 8003f84:	40020070 	.word	0x40020070
 8003f88:	40020088 	.word	0x40020088
 8003f8c:	400200a0 	.word	0x400200a0
 8003f90:	400200b8 	.word	0x400200b8
 8003f94:	40020410 	.word	0x40020410
 8003f98:	40020428 	.word	0x40020428
 8003f9c:	40020440 	.word	0x40020440
 8003fa0:	40020458 	.word	0x40020458
 8003fa4:	40020470 	.word	0x40020470
 8003fa8:	40020488 	.word	0x40020488
 8003fac:	400204a0 	.word	0x400204a0
 8003fb0:	400204b8 	.word	0x400204b8
 8003fb4:	58025408 	.word	0x58025408
 8003fb8:	5802541c 	.word	0x5802541c
 8003fbc:	58025430 	.word	0x58025430
 8003fc0:	58025444 	.word	0x58025444
 8003fc4:	58025458 	.word	0x58025458
 8003fc8:	5802546c 	.word	0x5802546c
 8003fcc:	58025480 	.word	0x58025480
 8003fd0:	58025494 	.word	0x58025494

08003fd4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b08a      	sub	sp, #40	; 0x28
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003fe0:	4b67      	ldr	r3, [pc, #412]	; (8004180 <HAL_DMA_IRQHandler+0x1ac>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a67      	ldr	r2, [pc, #412]	; (8004184 <HAL_DMA_IRQHandler+0x1b0>)
 8003fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fea:	0a9b      	lsrs	r3, r3, #10
 8003fec:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a5f      	ldr	r2, [pc, #380]	; (8004188 <HAL_DMA_IRQHandler+0x1b4>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d04a      	beq.n	80040a6 <HAL_DMA_IRQHandler+0xd2>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a5d      	ldr	r2, [pc, #372]	; (800418c <HAL_DMA_IRQHandler+0x1b8>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d045      	beq.n	80040a6 <HAL_DMA_IRQHandler+0xd2>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a5c      	ldr	r2, [pc, #368]	; (8004190 <HAL_DMA_IRQHandler+0x1bc>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d040      	beq.n	80040a6 <HAL_DMA_IRQHandler+0xd2>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a5a      	ldr	r2, [pc, #360]	; (8004194 <HAL_DMA_IRQHandler+0x1c0>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d03b      	beq.n	80040a6 <HAL_DMA_IRQHandler+0xd2>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a59      	ldr	r2, [pc, #356]	; (8004198 <HAL_DMA_IRQHandler+0x1c4>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d036      	beq.n	80040a6 <HAL_DMA_IRQHandler+0xd2>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a57      	ldr	r2, [pc, #348]	; (800419c <HAL_DMA_IRQHandler+0x1c8>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d031      	beq.n	80040a6 <HAL_DMA_IRQHandler+0xd2>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a56      	ldr	r2, [pc, #344]	; (80041a0 <HAL_DMA_IRQHandler+0x1cc>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d02c      	beq.n	80040a6 <HAL_DMA_IRQHandler+0xd2>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a54      	ldr	r2, [pc, #336]	; (80041a4 <HAL_DMA_IRQHandler+0x1d0>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d027      	beq.n	80040a6 <HAL_DMA_IRQHandler+0xd2>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a53      	ldr	r2, [pc, #332]	; (80041a8 <HAL_DMA_IRQHandler+0x1d4>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d022      	beq.n	80040a6 <HAL_DMA_IRQHandler+0xd2>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a51      	ldr	r2, [pc, #324]	; (80041ac <HAL_DMA_IRQHandler+0x1d8>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d01d      	beq.n	80040a6 <HAL_DMA_IRQHandler+0xd2>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a50      	ldr	r2, [pc, #320]	; (80041b0 <HAL_DMA_IRQHandler+0x1dc>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d018      	beq.n	80040a6 <HAL_DMA_IRQHandler+0xd2>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a4e      	ldr	r2, [pc, #312]	; (80041b4 <HAL_DMA_IRQHandler+0x1e0>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d013      	beq.n	80040a6 <HAL_DMA_IRQHandler+0xd2>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a4d      	ldr	r2, [pc, #308]	; (80041b8 <HAL_DMA_IRQHandler+0x1e4>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d00e      	beq.n	80040a6 <HAL_DMA_IRQHandler+0xd2>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a4b      	ldr	r2, [pc, #300]	; (80041bc <HAL_DMA_IRQHandler+0x1e8>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d009      	beq.n	80040a6 <HAL_DMA_IRQHandler+0xd2>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a4a      	ldr	r2, [pc, #296]	; (80041c0 <HAL_DMA_IRQHandler+0x1ec>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d004      	beq.n	80040a6 <HAL_DMA_IRQHandler+0xd2>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a48      	ldr	r2, [pc, #288]	; (80041c4 <HAL_DMA_IRQHandler+0x1f0>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d101      	bne.n	80040aa <HAL_DMA_IRQHandler+0xd6>
 80040a6:	2301      	movs	r3, #1
 80040a8:	e000      	b.n	80040ac <HAL_DMA_IRQHandler+0xd8>
 80040aa:	2300      	movs	r3, #0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 842b 	beq.w	8004908 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b6:	f003 031f 	and.w	r3, r3, #31
 80040ba:	2208      	movs	r2, #8
 80040bc:	409a      	lsls	r2, r3
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	4013      	ands	r3, r2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f000 80a2 	beq.w	800420c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a2e      	ldr	r2, [pc, #184]	; (8004188 <HAL_DMA_IRQHandler+0x1b4>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d04a      	beq.n	8004168 <HAL_DMA_IRQHandler+0x194>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a2d      	ldr	r2, [pc, #180]	; (800418c <HAL_DMA_IRQHandler+0x1b8>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d045      	beq.n	8004168 <HAL_DMA_IRQHandler+0x194>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a2b      	ldr	r2, [pc, #172]	; (8004190 <HAL_DMA_IRQHandler+0x1bc>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d040      	beq.n	8004168 <HAL_DMA_IRQHandler+0x194>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a2a      	ldr	r2, [pc, #168]	; (8004194 <HAL_DMA_IRQHandler+0x1c0>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d03b      	beq.n	8004168 <HAL_DMA_IRQHandler+0x194>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a28      	ldr	r2, [pc, #160]	; (8004198 <HAL_DMA_IRQHandler+0x1c4>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d036      	beq.n	8004168 <HAL_DMA_IRQHandler+0x194>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a27      	ldr	r2, [pc, #156]	; (800419c <HAL_DMA_IRQHandler+0x1c8>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d031      	beq.n	8004168 <HAL_DMA_IRQHandler+0x194>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a25      	ldr	r2, [pc, #148]	; (80041a0 <HAL_DMA_IRQHandler+0x1cc>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d02c      	beq.n	8004168 <HAL_DMA_IRQHandler+0x194>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a24      	ldr	r2, [pc, #144]	; (80041a4 <HAL_DMA_IRQHandler+0x1d0>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d027      	beq.n	8004168 <HAL_DMA_IRQHandler+0x194>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a22      	ldr	r2, [pc, #136]	; (80041a8 <HAL_DMA_IRQHandler+0x1d4>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d022      	beq.n	8004168 <HAL_DMA_IRQHandler+0x194>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a21      	ldr	r2, [pc, #132]	; (80041ac <HAL_DMA_IRQHandler+0x1d8>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d01d      	beq.n	8004168 <HAL_DMA_IRQHandler+0x194>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a1f      	ldr	r2, [pc, #124]	; (80041b0 <HAL_DMA_IRQHandler+0x1dc>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d018      	beq.n	8004168 <HAL_DMA_IRQHandler+0x194>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a1e      	ldr	r2, [pc, #120]	; (80041b4 <HAL_DMA_IRQHandler+0x1e0>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d013      	beq.n	8004168 <HAL_DMA_IRQHandler+0x194>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a1c      	ldr	r2, [pc, #112]	; (80041b8 <HAL_DMA_IRQHandler+0x1e4>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d00e      	beq.n	8004168 <HAL_DMA_IRQHandler+0x194>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a1b      	ldr	r2, [pc, #108]	; (80041bc <HAL_DMA_IRQHandler+0x1e8>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d009      	beq.n	8004168 <HAL_DMA_IRQHandler+0x194>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a19      	ldr	r2, [pc, #100]	; (80041c0 <HAL_DMA_IRQHandler+0x1ec>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d004      	beq.n	8004168 <HAL_DMA_IRQHandler+0x194>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a18      	ldr	r2, [pc, #96]	; (80041c4 <HAL_DMA_IRQHandler+0x1f0>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d12f      	bne.n	80041c8 <HAL_DMA_IRQHandler+0x1f4>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0304 	and.w	r3, r3, #4
 8004172:	2b00      	cmp	r3, #0
 8004174:	bf14      	ite	ne
 8004176:	2301      	movne	r3, #1
 8004178:	2300      	moveq	r3, #0
 800417a:	b2db      	uxtb	r3, r3
 800417c:	e02e      	b.n	80041dc <HAL_DMA_IRQHandler+0x208>
 800417e:	bf00      	nop
 8004180:	24000044 	.word	0x24000044
 8004184:	1b4e81b5 	.word	0x1b4e81b5
 8004188:	40020010 	.word	0x40020010
 800418c:	40020028 	.word	0x40020028
 8004190:	40020040 	.word	0x40020040
 8004194:	40020058 	.word	0x40020058
 8004198:	40020070 	.word	0x40020070
 800419c:	40020088 	.word	0x40020088
 80041a0:	400200a0 	.word	0x400200a0
 80041a4:	400200b8 	.word	0x400200b8
 80041a8:	40020410 	.word	0x40020410
 80041ac:	40020428 	.word	0x40020428
 80041b0:	40020440 	.word	0x40020440
 80041b4:	40020458 	.word	0x40020458
 80041b8:	40020470 	.word	0x40020470
 80041bc:	40020488 	.word	0x40020488
 80041c0:	400204a0 	.word	0x400204a0
 80041c4:	400204b8 	.word	0x400204b8
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0308 	and.w	r3, r3, #8
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	bf14      	ite	ne
 80041d6:	2301      	movne	r3, #1
 80041d8:	2300      	moveq	r3, #0
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d015      	beq.n	800420c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 0204 	bic.w	r2, r2, #4
 80041ee:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f4:	f003 031f 	and.w	r3, r3, #31
 80041f8:	2208      	movs	r2, #8
 80041fa:	409a      	lsls	r2, r3
 80041fc:	6a3b      	ldr	r3, [r7, #32]
 80041fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004204:	f043 0201 	orr.w	r2, r3, #1
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004210:	f003 031f 	and.w	r3, r3, #31
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	fa22 f303 	lsr.w	r3, r2, r3
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d06e      	beq.n	8004300 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a69      	ldr	r2, [pc, #420]	; (80043cc <HAL_DMA_IRQHandler+0x3f8>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d04a      	beq.n	80042c2 <HAL_DMA_IRQHandler+0x2ee>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a67      	ldr	r2, [pc, #412]	; (80043d0 <HAL_DMA_IRQHandler+0x3fc>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d045      	beq.n	80042c2 <HAL_DMA_IRQHandler+0x2ee>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a66      	ldr	r2, [pc, #408]	; (80043d4 <HAL_DMA_IRQHandler+0x400>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d040      	beq.n	80042c2 <HAL_DMA_IRQHandler+0x2ee>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a64      	ldr	r2, [pc, #400]	; (80043d8 <HAL_DMA_IRQHandler+0x404>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d03b      	beq.n	80042c2 <HAL_DMA_IRQHandler+0x2ee>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a63      	ldr	r2, [pc, #396]	; (80043dc <HAL_DMA_IRQHandler+0x408>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d036      	beq.n	80042c2 <HAL_DMA_IRQHandler+0x2ee>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a61      	ldr	r2, [pc, #388]	; (80043e0 <HAL_DMA_IRQHandler+0x40c>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d031      	beq.n	80042c2 <HAL_DMA_IRQHandler+0x2ee>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a60      	ldr	r2, [pc, #384]	; (80043e4 <HAL_DMA_IRQHandler+0x410>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d02c      	beq.n	80042c2 <HAL_DMA_IRQHandler+0x2ee>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a5e      	ldr	r2, [pc, #376]	; (80043e8 <HAL_DMA_IRQHandler+0x414>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d027      	beq.n	80042c2 <HAL_DMA_IRQHandler+0x2ee>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a5d      	ldr	r2, [pc, #372]	; (80043ec <HAL_DMA_IRQHandler+0x418>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d022      	beq.n	80042c2 <HAL_DMA_IRQHandler+0x2ee>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a5b      	ldr	r2, [pc, #364]	; (80043f0 <HAL_DMA_IRQHandler+0x41c>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d01d      	beq.n	80042c2 <HAL_DMA_IRQHandler+0x2ee>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a5a      	ldr	r2, [pc, #360]	; (80043f4 <HAL_DMA_IRQHandler+0x420>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d018      	beq.n	80042c2 <HAL_DMA_IRQHandler+0x2ee>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a58      	ldr	r2, [pc, #352]	; (80043f8 <HAL_DMA_IRQHandler+0x424>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d013      	beq.n	80042c2 <HAL_DMA_IRQHandler+0x2ee>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a57      	ldr	r2, [pc, #348]	; (80043fc <HAL_DMA_IRQHandler+0x428>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d00e      	beq.n	80042c2 <HAL_DMA_IRQHandler+0x2ee>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a55      	ldr	r2, [pc, #340]	; (8004400 <HAL_DMA_IRQHandler+0x42c>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d009      	beq.n	80042c2 <HAL_DMA_IRQHandler+0x2ee>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a54      	ldr	r2, [pc, #336]	; (8004404 <HAL_DMA_IRQHandler+0x430>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d004      	beq.n	80042c2 <HAL_DMA_IRQHandler+0x2ee>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a52      	ldr	r2, [pc, #328]	; (8004408 <HAL_DMA_IRQHandler+0x434>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d10a      	bne.n	80042d8 <HAL_DMA_IRQHandler+0x304>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	bf14      	ite	ne
 80042d0:	2301      	movne	r3, #1
 80042d2:	2300      	moveq	r3, #0
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	e003      	b.n	80042e0 <HAL_DMA_IRQHandler+0x30c>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2300      	movs	r3, #0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00d      	beq.n	8004300 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e8:	f003 031f 	and.w	r3, r3, #31
 80042ec:	2201      	movs	r2, #1
 80042ee:	409a      	lsls	r2, r3
 80042f0:	6a3b      	ldr	r3, [r7, #32]
 80042f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f8:	f043 0202 	orr.w	r2, r3, #2
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004304:	f003 031f 	and.w	r3, r3, #31
 8004308:	2204      	movs	r2, #4
 800430a:	409a      	lsls	r2, r3
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	4013      	ands	r3, r2
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 808f 	beq.w	8004434 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a2c      	ldr	r2, [pc, #176]	; (80043cc <HAL_DMA_IRQHandler+0x3f8>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d04a      	beq.n	80043b6 <HAL_DMA_IRQHandler+0x3e2>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a2a      	ldr	r2, [pc, #168]	; (80043d0 <HAL_DMA_IRQHandler+0x3fc>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d045      	beq.n	80043b6 <HAL_DMA_IRQHandler+0x3e2>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a29      	ldr	r2, [pc, #164]	; (80043d4 <HAL_DMA_IRQHandler+0x400>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d040      	beq.n	80043b6 <HAL_DMA_IRQHandler+0x3e2>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a27      	ldr	r2, [pc, #156]	; (80043d8 <HAL_DMA_IRQHandler+0x404>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d03b      	beq.n	80043b6 <HAL_DMA_IRQHandler+0x3e2>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a26      	ldr	r2, [pc, #152]	; (80043dc <HAL_DMA_IRQHandler+0x408>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d036      	beq.n	80043b6 <HAL_DMA_IRQHandler+0x3e2>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a24      	ldr	r2, [pc, #144]	; (80043e0 <HAL_DMA_IRQHandler+0x40c>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d031      	beq.n	80043b6 <HAL_DMA_IRQHandler+0x3e2>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a23      	ldr	r2, [pc, #140]	; (80043e4 <HAL_DMA_IRQHandler+0x410>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d02c      	beq.n	80043b6 <HAL_DMA_IRQHandler+0x3e2>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a21      	ldr	r2, [pc, #132]	; (80043e8 <HAL_DMA_IRQHandler+0x414>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d027      	beq.n	80043b6 <HAL_DMA_IRQHandler+0x3e2>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a20      	ldr	r2, [pc, #128]	; (80043ec <HAL_DMA_IRQHandler+0x418>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d022      	beq.n	80043b6 <HAL_DMA_IRQHandler+0x3e2>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a1e      	ldr	r2, [pc, #120]	; (80043f0 <HAL_DMA_IRQHandler+0x41c>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d01d      	beq.n	80043b6 <HAL_DMA_IRQHandler+0x3e2>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a1d      	ldr	r2, [pc, #116]	; (80043f4 <HAL_DMA_IRQHandler+0x420>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d018      	beq.n	80043b6 <HAL_DMA_IRQHandler+0x3e2>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a1b      	ldr	r2, [pc, #108]	; (80043f8 <HAL_DMA_IRQHandler+0x424>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d013      	beq.n	80043b6 <HAL_DMA_IRQHandler+0x3e2>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a1a      	ldr	r2, [pc, #104]	; (80043fc <HAL_DMA_IRQHandler+0x428>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d00e      	beq.n	80043b6 <HAL_DMA_IRQHandler+0x3e2>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a18      	ldr	r2, [pc, #96]	; (8004400 <HAL_DMA_IRQHandler+0x42c>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d009      	beq.n	80043b6 <HAL_DMA_IRQHandler+0x3e2>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a17      	ldr	r2, [pc, #92]	; (8004404 <HAL_DMA_IRQHandler+0x430>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d004      	beq.n	80043b6 <HAL_DMA_IRQHandler+0x3e2>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a15      	ldr	r2, [pc, #84]	; (8004408 <HAL_DMA_IRQHandler+0x434>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d12a      	bne.n	800440c <HAL_DMA_IRQHandler+0x438>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	bf14      	ite	ne
 80043c4:	2301      	movne	r3, #1
 80043c6:	2300      	moveq	r3, #0
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	e023      	b.n	8004414 <HAL_DMA_IRQHandler+0x440>
 80043cc:	40020010 	.word	0x40020010
 80043d0:	40020028 	.word	0x40020028
 80043d4:	40020040 	.word	0x40020040
 80043d8:	40020058 	.word	0x40020058
 80043dc:	40020070 	.word	0x40020070
 80043e0:	40020088 	.word	0x40020088
 80043e4:	400200a0 	.word	0x400200a0
 80043e8:	400200b8 	.word	0x400200b8
 80043ec:	40020410 	.word	0x40020410
 80043f0:	40020428 	.word	0x40020428
 80043f4:	40020440 	.word	0x40020440
 80043f8:	40020458 	.word	0x40020458
 80043fc:	40020470 	.word	0x40020470
 8004400:	40020488 	.word	0x40020488
 8004404:	400204a0 	.word	0x400204a0
 8004408:	400204b8 	.word	0x400204b8
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2300      	movs	r3, #0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00d      	beq.n	8004434 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800441c:	f003 031f 	and.w	r3, r3, #31
 8004420:	2204      	movs	r2, #4
 8004422:	409a      	lsls	r2, r3
 8004424:	6a3b      	ldr	r3, [r7, #32]
 8004426:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800442c:	f043 0204 	orr.w	r2, r3, #4
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004438:	f003 031f 	and.w	r3, r3, #31
 800443c:	2210      	movs	r2, #16
 800443e:	409a      	lsls	r2, r3
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	4013      	ands	r3, r2
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 80a6 	beq.w	8004596 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a85      	ldr	r2, [pc, #532]	; (8004664 <HAL_DMA_IRQHandler+0x690>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d04a      	beq.n	80044ea <HAL_DMA_IRQHandler+0x516>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a83      	ldr	r2, [pc, #524]	; (8004668 <HAL_DMA_IRQHandler+0x694>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d045      	beq.n	80044ea <HAL_DMA_IRQHandler+0x516>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a82      	ldr	r2, [pc, #520]	; (800466c <HAL_DMA_IRQHandler+0x698>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d040      	beq.n	80044ea <HAL_DMA_IRQHandler+0x516>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a80      	ldr	r2, [pc, #512]	; (8004670 <HAL_DMA_IRQHandler+0x69c>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d03b      	beq.n	80044ea <HAL_DMA_IRQHandler+0x516>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a7f      	ldr	r2, [pc, #508]	; (8004674 <HAL_DMA_IRQHandler+0x6a0>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d036      	beq.n	80044ea <HAL_DMA_IRQHandler+0x516>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a7d      	ldr	r2, [pc, #500]	; (8004678 <HAL_DMA_IRQHandler+0x6a4>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d031      	beq.n	80044ea <HAL_DMA_IRQHandler+0x516>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a7c      	ldr	r2, [pc, #496]	; (800467c <HAL_DMA_IRQHandler+0x6a8>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d02c      	beq.n	80044ea <HAL_DMA_IRQHandler+0x516>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a7a      	ldr	r2, [pc, #488]	; (8004680 <HAL_DMA_IRQHandler+0x6ac>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d027      	beq.n	80044ea <HAL_DMA_IRQHandler+0x516>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a79      	ldr	r2, [pc, #484]	; (8004684 <HAL_DMA_IRQHandler+0x6b0>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d022      	beq.n	80044ea <HAL_DMA_IRQHandler+0x516>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a77      	ldr	r2, [pc, #476]	; (8004688 <HAL_DMA_IRQHandler+0x6b4>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d01d      	beq.n	80044ea <HAL_DMA_IRQHandler+0x516>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a76      	ldr	r2, [pc, #472]	; (800468c <HAL_DMA_IRQHandler+0x6b8>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d018      	beq.n	80044ea <HAL_DMA_IRQHandler+0x516>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a74      	ldr	r2, [pc, #464]	; (8004690 <HAL_DMA_IRQHandler+0x6bc>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d013      	beq.n	80044ea <HAL_DMA_IRQHandler+0x516>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a73      	ldr	r2, [pc, #460]	; (8004694 <HAL_DMA_IRQHandler+0x6c0>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d00e      	beq.n	80044ea <HAL_DMA_IRQHandler+0x516>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a71      	ldr	r2, [pc, #452]	; (8004698 <HAL_DMA_IRQHandler+0x6c4>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d009      	beq.n	80044ea <HAL_DMA_IRQHandler+0x516>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a70      	ldr	r2, [pc, #448]	; (800469c <HAL_DMA_IRQHandler+0x6c8>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d004      	beq.n	80044ea <HAL_DMA_IRQHandler+0x516>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a6e      	ldr	r2, [pc, #440]	; (80046a0 <HAL_DMA_IRQHandler+0x6cc>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d10a      	bne.n	8004500 <HAL_DMA_IRQHandler+0x52c>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0308 	and.w	r3, r3, #8
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	bf14      	ite	ne
 80044f8:	2301      	movne	r3, #1
 80044fa:	2300      	moveq	r3, #0
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	e009      	b.n	8004514 <HAL_DMA_IRQHandler+0x540>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0304 	and.w	r3, r3, #4
 800450a:	2b00      	cmp	r3, #0
 800450c:	bf14      	ite	ne
 800450e:	2301      	movne	r3, #1
 8004510:	2300      	moveq	r3, #0
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b00      	cmp	r3, #0
 8004516:	d03e      	beq.n	8004596 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800451c:	f003 031f 	and.w	r3, r3, #31
 8004520:	2210      	movs	r2, #16
 8004522:	409a      	lsls	r2, r3
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d018      	beq.n	8004568 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d108      	bne.n	8004556 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004548:	2b00      	cmp	r3, #0
 800454a:	d024      	beq.n	8004596 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	4798      	blx	r3
 8004554:	e01f      	b.n	8004596 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800455a:	2b00      	cmp	r3, #0
 800455c:	d01b      	beq.n	8004596 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	4798      	blx	r3
 8004566:	e016      	b.n	8004596 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004572:	2b00      	cmp	r3, #0
 8004574:	d107      	bne.n	8004586 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 0208 	bic.w	r2, r2, #8
 8004584:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458a:	2b00      	cmp	r3, #0
 800458c:	d003      	beq.n	8004596 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800459a:	f003 031f 	and.w	r3, r3, #31
 800459e:	2220      	movs	r2, #32
 80045a0:	409a      	lsls	r2, r3
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	4013      	ands	r3, r2
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f000 8110 	beq.w	80047cc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a2c      	ldr	r2, [pc, #176]	; (8004664 <HAL_DMA_IRQHandler+0x690>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d04a      	beq.n	800464c <HAL_DMA_IRQHandler+0x678>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a2b      	ldr	r2, [pc, #172]	; (8004668 <HAL_DMA_IRQHandler+0x694>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d045      	beq.n	800464c <HAL_DMA_IRQHandler+0x678>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a29      	ldr	r2, [pc, #164]	; (800466c <HAL_DMA_IRQHandler+0x698>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d040      	beq.n	800464c <HAL_DMA_IRQHandler+0x678>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a28      	ldr	r2, [pc, #160]	; (8004670 <HAL_DMA_IRQHandler+0x69c>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d03b      	beq.n	800464c <HAL_DMA_IRQHandler+0x678>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a26      	ldr	r2, [pc, #152]	; (8004674 <HAL_DMA_IRQHandler+0x6a0>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d036      	beq.n	800464c <HAL_DMA_IRQHandler+0x678>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a25      	ldr	r2, [pc, #148]	; (8004678 <HAL_DMA_IRQHandler+0x6a4>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d031      	beq.n	800464c <HAL_DMA_IRQHandler+0x678>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a23      	ldr	r2, [pc, #140]	; (800467c <HAL_DMA_IRQHandler+0x6a8>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d02c      	beq.n	800464c <HAL_DMA_IRQHandler+0x678>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a22      	ldr	r2, [pc, #136]	; (8004680 <HAL_DMA_IRQHandler+0x6ac>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d027      	beq.n	800464c <HAL_DMA_IRQHandler+0x678>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a20      	ldr	r2, [pc, #128]	; (8004684 <HAL_DMA_IRQHandler+0x6b0>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d022      	beq.n	800464c <HAL_DMA_IRQHandler+0x678>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a1f      	ldr	r2, [pc, #124]	; (8004688 <HAL_DMA_IRQHandler+0x6b4>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d01d      	beq.n	800464c <HAL_DMA_IRQHandler+0x678>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a1d      	ldr	r2, [pc, #116]	; (800468c <HAL_DMA_IRQHandler+0x6b8>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d018      	beq.n	800464c <HAL_DMA_IRQHandler+0x678>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a1c      	ldr	r2, [pc, #112]	; (8004690 <HAL_DMA_IRQHandler+0x6bc>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d013      	beq.n	800464c <HAL_DMA_IRQHandler+0x678>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a1a      	ldr	r2, [pc, #104]	; (8004694 <HAL_DMA_IRQHandler+0x6c0>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d00e      	beq.n	800464c <HAL_DMA_IRQHandler+0x678>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a19      	ldr	r2, [pc, #100]	; (8004698 <HAL_DMA_IRQHandler+0x6c4>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d009      	beq.n	800464c <HAL_DMA_IRQHandler+0x678>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a17      	ldr	r2, [pc, #92]	; (800469c <HAL_DMA_IRQHandler+0x6c8>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d004      	beq.n	800464c <HAL_DMA_IRQHandler+0x678>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a16      	ldr	r2, [pc, #88]	; (80046a0 <HAL_DMA_IRQHandler+0x6cc>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d12b      	bne.n	80046a4 <HAL_DMA_IRQHandler+0x6d0>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0310 	and.w	r3, r3, #16
 8004656:	2b00      	cmp	r3, #0
 8004658:	bf14      	ite	ne
 800465a:	2301      	movne	r3, #1
 800465c:	2300      	moveq	r3, #0
 800465e:	b2db      	uxtb	r3, r3
 8004660:	e02a      	b.n	80046b8 <HAL_DMA_IRQHandler+0x6e4>
 8004662:	bf00      	nop
 8004664:	40020010 	.word	0x40020010
 8004668:	40020028 	.word	0x40020028
 800466c:	40020040 	.word	0x40020040
 8004670:	40020058 	.word	0x40020058
 8004674:	40020070 	.word	0x40020070
 8004678:	40020088 	.word	0x40020088
 800467c:	400200a0 	.word	0x400200a0
 8004680:	400200b8 	.word	0x400200b8
 8004684:	40020410 	.word	0x40020410
 8004688:	40020428 	.word	0x40020428
 800468c:	40020440 	.word	0x40020440
 8004690:	40020458 	.word	0x40020458
 8004694:	40020470 	.word	0x40020470
 8004698:	40020488 	.word	0x40020488
 800469c:	400204a0 	.word	0x400204a0
 80046a0:	400204b8 	.word	0x400204b8
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	bf14      	ite	ne
 80046b2:	2301      	movne	r3, #1
 80046b4:	2300      	moveq	r3, #0
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f000 8087 	beq.w	80047cc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c2:	f003 031f 	and.w	r3, r3, #31
 80046c6:	2220      	movs	r2, #32
 80046c8:	409a      	lsls	r2, r3
 80046ca:	6a3b      	ldr	r3, [r7, #32]
 80046cc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b04      	cmp	r3, #4
 80046d8:	d139      	bne.n	800474e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 0216 	bic.w	r2, r2, #22
 80046e8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	695a      	ldr	r2, [r3, #20]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046f8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d103      	bne.n	800470a <HAL_DMA_IRQHandler+0x736>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004706:	2b00      	cmp	r3, #0
 8004708:	d007      	beq.n	800471a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 0208 	bic.w	r2, r2, #8
 8004718:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800471e:	f003 031f 	and.w	r3, r3, #31
 8004722:	223f      	movs	r2, #63	; 0x3f
 8004724:	409a      	lsls	r2, r3
 8004726:	6a3b      	ldr	r3, [r7, #32]
 8004728:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800473e:	2b00      	cmp	r3, #0
 8004740:	f000 834a 	beq.w	8004dd8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	4798      	blx	r3
          }
          return;
 800474c:	e344      	b.n	8004dd8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d018      	beq.n	800478e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d108      	bne.n	800477c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476e:	2b00      	cmp	r3, #0
 8004770:	d02c      	beq.n	80047cc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	4798      	blx	r3
 800477a:	e027      	b.n	80047cc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004780:	2b00      	cmp	r3, #0
 8004782:	d023      	beq.n	80047cc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	4798      	blx	r3
 800478c:	e01e      	b.n	80047cc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10f      	bne.n	80047bc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f022 0210 	bic.w	r2, r2, #16
 80047aa:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d003      	beq.n	80047cc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f000 8306 	beq.w	8004de2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f000 8088 	beq.w	80048f4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2204      	movs	r2, #4
 80047e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a7a      	ldr	r2, [pc, #488]	; (80049dc <HAL_DMA_IRQHandler+0xa08>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d04a      	beq.n	800488c <HAL_DMA_IRQHandler+0x8b8>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a79      	ldr	r2, [pc, #484]	; (80049e0 <HAL_DMA_IRQHandler+0xa0c>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d045      	beq.n	800488c <HAL_DMA_IRQHandler+0x8b8>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a77      	ldr	r2, [pc, #476]	; (80049e4 <HAL_DMA_IRQHandler+0xa10>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d040      	beq.n	800488c <HAL_DMA_IRQHandler+0x8b8>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a76      	ldr	r2, [pc, #472]	; (80049e8 <HAL_DMA_IRQHandler+0xa14>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d03b      	beq.n	800488c <HAL_DMA_IRQHandler+0x8b8>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a74      	ldr	r2, [pc, #464]	; (80049ec <HAL_DMA_IRQHandler+0xa18>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d036      	beq.n	800488c <HAL_DMA_IRQHandler+0x8b8>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a73      	ldr	r2, [pc, #460]	; (80049f0 <HAL_DMA_IRQHandler+0xa1c>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d031      	beq.n	800488c <HAL_DMA_IRQHandler+0x8b8>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a71      	ldr	r2, [pc, #452]	; (80049f4 <HAL_DMA_IRQHandler+0xa20>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d02c      	beq.n	800488c <HAL_DMA_IRQHandler+0x8b8>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a70      	ldr	r2, [pc, #448]	; (80049f8 <HAL_DMA_IRQHandler+0xa24>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d027      	beq.n	800488c <HAL_DMA_IRQHandler+0x8b8>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a6e      	ldr	r2, [pc, #440]	; (80049fc <HAL_DMA_IRQHandler+0xa28>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d022      	beq.n	800488c <HAL_DMA_IRQHandler+0x8b8>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a6d      	ldr	r2, [pc, #436]	; (8004a00 <HAL_DMA_IRQHandler+0xa2c>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d01d      	beq.n	800488c <HAL_DMA_IRQHandler+0x8b8>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a6b      	ldr	r2, [pc, #428]	; (8004a04 <HAL_DMA_IRQHandler+0xa30>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d018      	beq.n	800488c <HAL_DMA_IRQHandler+0x8b8>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a6a      	ldr	r2, [pc, #424]	; (8004a08 <HAL_DMA_IRQHandler+0xa34>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d013      	beq.n	800488c <HAL_DMA_IRQHandler+0x8b8>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a68      	ldr	r2, [pc, #416]	; (8004a0c <HAL_DMA_IRQHandler+0xa38>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d00e      	beq.n	800488c <HAL_DMA_IRQHandler+0x8b8>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a67      	ldr	r2, [pc, #412]	; (8004a10 <HAL_DMA_IRQHandler+0xa3c>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d009      	beq.n	800488c <HAL_DMA_IRQHandler+0x8b8>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a65      	ldr	r2, [pc, #404]	; (8004a14 <HAL_DMA_IRQHandler+0xa40>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d004      	beq.n	800488c <HAL_DMA_IRQHandler+0x8b8>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a64      	ldr	r2, [pc, #400]	; (8004a18 <HAL_DMA_IRQHandler+0xa44>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d108      	bne.n	800489e <HAL_DMA_IRQHandler+0x8ca>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 0201 	bic.w	r2, r2, #1
 800489a:	601a      	str	r2, [r3, #0]
 800489c:	e007      	b.n	80048ae <HAL_DMA_IRQHandler+0x8da>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f022 0201 	bic.w	r2, r2, #1
 80048ac:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	3301      	adds	r3, #1
 80048b2:	60fb      	str	r3, [r7, #12]
 80048b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d307      	bcc.n	80048ca <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0301 	and.w	r3, r3, #1
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1f2      	bne.n	80048ae <HAL_DMA_IRQHandler+0x8da>
 80048c8:	e000      	b.n	80048cc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80048ca:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d004      	beq.n	80048ec <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2203      	movs	r2, #3
 80048e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80048ea:	e003      	b.n	80048f4 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 8272 	beq.w	8004de2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	4798      	blx	r3
 8004906:	e26c      	b.n	8004de2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a43      	ldr	r2, [pc, #268]	; (8004a1c <HAL_DMA_IRQHandler+0xa48>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d022      	beq.n	8004958 <HAL_DMA_IRQHandler+0x984>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a42      	ldr	r2, [pc, #264]	; (8004a20 <HAL_DMA_IRQHandler+0xa4c>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d01d      	beq.n	8004958 <HAL_DMA_IRQHandler+0x984>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a40      	ldr	r2, [pc, #256]	; (8004a24 <HAL_DMA_IRQHandler+0xa50>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d018      	beq.n	8004958 <HAL_DMA_IRQHandler+0x984>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a3f      	ldr	r2, [pc, #252]	; (8004a28 <HAL_DMA_IRQHandler+0xa54>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d013      	beq.n	8004958 <HAL_DMA_IRQHandler+0x984>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a3d      	ldr	r2, [pc, #244]	; (8004a2c <HAL_DMA_IRQHandler+0xa58>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d00e      	beq.n	8004958 <HAL_DMA_IRQHandler+0x984>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a3c      	ldr	r2, [pc, #240]	; (8004a30 <HAL_DMA_IRQHandler+0xa5c>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d009      	beq.n	8004958 <HAL_DMA_IRQHandler+0x984>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a3a      	ldr	r2, [pc, #232]	; (8004a34 <HAL_DMA_IRQHandler+0xa60>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d004      	beq.n	8004958 <HAL_DMA_IRQHandler+0x984>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a39      	ldr	r2, [pc, #228]	; (8004a38 <HAL_DMA_IRQHandler+0xa64>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d101      	bne.n	800495c <HAL_DMA_IRQHandler+0x988>
 8004958:	2301      	movs	r3, #1
 800495a:	e000      	b.n	800495e <HAL_DMA_IRQHandler+0x98a>
 800495c:	2300      	movs	r3, #0
 800495e:	2b00      	cmp	r3, #0
 8004960:	f000 823f 	beq.w	8004de2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004970:	f003 031f 	and.w	r3, r3, #31
 8004974:	2204      	movs	r2, #4
 8004976:	409a      	lsls	r2, r3
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	4013      	ands	r3, r2
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 80cd 	beq.w	8004b1c <HAL_DMA_IRQHandler+0xb48>
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	f003 0304 	and.w	r3, r3, #4
 8004988:	2b00      	cmp	r3, #0
 800498a:	f000 80c7 	beq.w	8004b1c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004992:	f003 031f 	and.w	r3, r3, #31
 8004996:	2204      	movs	r2, #4
 8004998:	409a      	lsls	r2, r3
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d049      	beq.n	8004a3c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d109      	bne.n	80049c6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f000 8210 	beq.w	8004ddc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049c4:	e20a      	b.n	8004ddc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f000 8206 	beq.w	8004ddc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049d8:	e200      	b.n	8004ddc <HAL_DMA_IRQHandler+0xe08>
 80049da:	bf00      	nop
 80049dc:	40020010 	.word	0x40020010
 80049e0:	40020028 	.word	0x40020028
 80049e4:	40020040 	.word	0x40020040
 80049e8:	40020058 	.word	0x40020058
 80049ec:	40020070 	.word	0x40020070
 80049f0:	40020088 	.word	0x40020088
 80049f4:	400200a0 	.word	0x400200a0
 80049f8:	400200b8 	.word	0x400200b8
 80049fc:	40020410 	.word	0x40020410
 8004a00:	40020428 	.word	0x40020428
 8004a04:	40020440 	.word	0x40020440
 8004a08:	40020458 	.word	0x40020458
 8004a0c:	40020470 	.word	0x40020470
 8004a10:	40020488 	.word	0x40020488
 8004a14:	400204a0 	.word	0x400204a0
 8004a18:	400204b8 	.word	0x400204b8
 8004a1c:	58025408 	.word	0x58025408
 8004a20:	5802541c 	.word	0x5802541c
 8004a24:	58025430 	.word	0x58025430
 8004a28:	58025444 	.word	0x58025444
 8004a2c:	58025458 	.word	0x58025458
 8004a30:	5802546c 	.word	0x5802546c
 8004a34:	58025480 	.word	0x58025480
 8004a38:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	f003 0320 	and.w	r3, r3, #32
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d160      	bne.n	8004b08 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a8c      	ldr	r2, [pc, #560]	; (8004c7c <HAL_DMA_IRQHandler+0xca8>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d04a      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xb12>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a8a      	ldr	r2, [pc, #552]	; (8004c80 <HAL_DMA_IRQHandler+0xcac>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d045      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xb12>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a89      	ldr	r2, [pc, #548]	; (8004c84 <HAL_DMA_IRQHandler+0xcb0>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d040      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xb12>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a87      	ldr	r2, [pc, #540]	; (8004c88 <HAL_DMA_IRQHandler+0xcb4>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d03b      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xb12>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a86      	ldr	r2, [pc, #536]	; (8004c8c <HAL_DMA_IRQHandler+0xcb8>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d036      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xb12>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a84      	ldr	r2, [pc, #528]	; (8004c90 <HAL_DMA_IRQHandler+0xcbc>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d031      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xb12>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a83      	ldr	r2, [pc, #524]	; (8004c94 <HAL_DMA_IRQHandler+0xcc0>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d02c      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xb12>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a81      	ldr	r2, [pc, #516]	; (8004c98 <HAL_DMA_IRQHandler+0xcc4>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d027      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xb12>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a80      	ldr	r2, [pc, #512]	; (8004c9c <HAL_DMA_IRQHandler+0xcc8>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d022      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xb12>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a7e      	ldr	r2, [pc, #504]	; (8004ca0 <HAL_DMA_IRQHandler+0xccc>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d01d      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xb12>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a7d      	ldr	r2, [pc, #500]	; (8004ca4 <HAL_DMA_IRQHandler+0xcd0>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d018      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xb12>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a7b      	ldr	r2, [pc, #492]	; (8004ca8 <HAL_DMA_IRQHandler+0xcd4>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d013      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xb12>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a7a      	ldr	r2, [pc, #488]	; (8004cac <HAL_DMA_IRQHandler+0xcd8>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d00e      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xb12>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a78      	ldr	r2, [pc, #480]	; (8004cb0 <HAL_DMA_IRQHandler+0xcdc>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d009      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xb12>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a77      	ldr	r2, [pc, #476]	; (8004cb4 <HAL_DMA_IRQHandler+0xce0>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d004      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xb12>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a75      	ldr	r2, [pc, #468]	; (8004cb8 <HAL_DMA_IRQHandler+0xce4>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d108      	bne.n	8004af8 <HAL_DMA_IRQHandler+0xb24>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 0208 	bic.w	r2, r2, #8
 8004af4:	601a      	str	r2, [r3, #0]
 8004af6:	e007      	b.n	8004b08 <HAL_DMA_IRQHandler+0xb34>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 0204 	bic.w	r2, r2, #4
 8004b06:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f000 8165 	beq.w	8004ddc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b1a:	e15f      	b.n	8004ddc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b20:	f003 031f 	and.w	r3, r3, #31
 8004b24:	2202      	movs	r2, #2
 8004b26:	409a      	lsls	r2, r3
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 80c5 	beq.w	8004cbc <HAL_DMA_IRQHandler+0xce8>
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	f003 0302 	and.w	r3, r3, #2
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 80bf 	beq.w	8004cbc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b42:	f003 031f 	and.w	r3, r3, #31
 8004b46:	2202      	movs	r2, #2
 8004b48:	409a      	lsls	r2, r3
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d018      	beq.n	8004b8a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d109      	bne.n	8004b76 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	f000 813a 	beq.w	8004de0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b74:	e134      	b.n	8004de0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f000 8130 	beq.w	8004de0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b88:	e12a      	b.n	8004de0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	f003 0320 	and.w	r3, r3, #32
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d168      	bne.n	8004c66 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a38      	ldr	r2, [pc, #224]	; (8004c7c <HAL_DMA_IRQHandler+0xca8>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d04a      	beq.n	8004c34 <HAL_DMA_IRQHandler+0xc60>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a37      	ldr	r2, [pc, #220]	; (8004c80 <HAL_DMA_IRQHandler+0xcac>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d045      	beq.n	8004c34 <HAL_DMA_IRQHandler+0xc60>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a35      	ldr	r2, [pc, #212]	; (8004c84 <HAL_DMA_IRQHandler+0xcb0>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d040      	beq.n	8004c34 <HAL_DMA_IRQHandler+0xc60>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a34      	ldr	r2, [pc, #208]	; (8004c88 <HAL_DMA_IRQHandler+0xcb4>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d03b      	beq.n	8004c34 <HAL_DMA_IRQHandler+0xc60>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a32      	ldr	r2, [pc, #200]	; (8004c8c <HAL_DMA_IRQHandler+0xcb8>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d036      	beq.n	8004c34 <HAL_DMA_IRQHandler+0xc60>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a31      	ldr	r2, [pc, #196]	; (8004c90 <HAL_DMA_IRQHandler+0xcbc>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d031      	beq.n	8004c34 <HAL_DMA_IRQHandler+0xc60>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a2f      	ldr	r2, [pc, #188]	; (8004c94 <HAL_DMA_IRQHandler+0xcc0>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d02c      	beq.n	8004c34 <HAL_DMA_IRQHandler+0xc60>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a2e      	ldr	r2, [pc, #184]	; (8004c98 <HAL_DMA_IRQHandler+0xcc4>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d027      	beq.n	8004c34 <HAL_DMA_IRQHandler+0xc60>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a2c      	ldr	r2, [pc, #176]	; (8004c9c <HAL_DMA_IRQHandler+0xcc8>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d022      	beq.n	8004c34 <HAL_DMA_IRQHandler+0xc60>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a2b      	ldr	r2, [pc, #172]	; (8004ca0 <HAL_DMA_IRQHandler+0xccc>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d01d      	beq.n	8004c34 <HAL_DMA_IRQHandler+0xc60>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a29      	ldr	r2, [pc, #164]	; (8004ca4 <HAL_DMA_IRQHandler+0xcd0>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d018      	beq.n	8004c34 <HAL_DMA_IRQHandler+0xc60>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a28      	ldr	r2, [pc, #160]	; (8004ca8 <HAL_DMA_IRQHandler+0xcd4>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d013      	beq.n	8004c34 <HAL_DMA_IRQHandler+0xc60>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a26      	ldr	r2, [pc, #152]	; (8004cac <HAL_DMA_IRQHandler+0xcd8>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d00e      	beq.n	8004c34 <HAL_DMA_IRQHandler+0xc60>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a25      	ldr	r2, [pc, #148]	; (8004cb0 <HAL_DMA_IRQHandler+0xcdc>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d009      	beq.n	8004c34 <HAL_DMA_IRQHandler+0xc60>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a23      	ldr	r2, [pc, #140]	; (8004cb4 <HAL_DMA_IRQHandler+0xce0>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d004      	beq.n	8004c34 <HAL_DMA_IRQHandler+0xc60>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a22      	ldr	r2, [pc, #136]	; (8004cb8 <HAL_DMA_IRQHandler+0xce4>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d108      	bne.n	8004c46 <HAL_DMA_IRQHandler+0xc72>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 0214 	bic.w	r2, r2, #20
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	e007      	b.n	8004c56 <HAL_DMA_IRQHandler+0xc82>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 020a 	bic.w	r2, r2, #10
 8004c54:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f000 80b8 	beq.w	8004de0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c78:	e0b2      	b.n	8004de0 <HAL_DMA_IRQHandler+0xe0c>
 8004c7a:	bf00      	nop
 8004c7c:	40020010 	.word	0x40020010
 8004c80:	40020028 	.word	0x40020028
 8004c84:	40020040 	.word	0x40020040
 8004c88:	40020058 	.word	0x40020058
 8004c8c:	40020070 	.word	0x40020070
 8004c90:	40020088 	.word	0x40020088
 8004c94:	400200a0 	.word	0x400200a0
 8004c98:	400200b8 	.word	0x400200b8
 8004c9c:	40020410 	.word	0x40020410
 8004ca0:	40020428 	.word	0x40020428
 8004ca4:	40020440 	.word	0x40020440
 8004ca8:	40020458 	.word	0x40020458
 8004cac:	40020470 	.word	0x40020470
 8004cb0:	40020488 	.word	0x40020488
 8004cb4:	400204a0 	.word	0x400204a0
 8004cb8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc0:	f003 031f 	and.w	r3, r3, #31
 8004cc4:	2208      	movs	r2, #8
 8004cc6:	409a      	lsls	r2, r3
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f000 8088 	beq.w	8004de2 <HAL_DMA_IRQHandler+0xe0e>
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	f003 0308 	and.w	r3, r3, #8
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f000 8082 	beq.w	8004de2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a41      	ldr	r2, [pc, #260]	; (8004de8 <HAL_DMA_IRQHandler+0xe14>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d04a      	beq.n	8004d7e <HAL_DMA_IRQHandler+0xdaa>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a3f      	ldr	r2, [pc, #252]	; (8004dec <HAL_DMA_IRQHandler+0xe18>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d045      	beq.n	8004d7e <HAL_DMA_IRQHandler+0xdaa>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a3e      	ldr	r2, [pc, #248]	; (8004df0 <HAL_DMA_IRQHandler+0xe1c>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d040      	beq.n	8004d7e <HAL_DMA_IRQHandler+0xdaa>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a3c      	ldr	r2, [pc, #240]	; (8004df4 <HAL_DMA_IRQHandler+0xe20>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d03b      	beq.n	8004d7e <HAL_DMA_IRQHandler+0xdaa>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a3b      	ldr	r2, [pc, #236]	; (8004df8 <HAL_DMA_IRQHandler+0xe24>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d036      	beq.n	8004d7e <HAL_DMA_IRQHandler+0xdaa>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a39      	ldr	r2, [pc, #228]	; (8004dfc <HAL_DMA_IRQHandler+0xe28>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d031      	beq.n	8004d7e <HAL_DMA_IRQHandler+0xdaa>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a38      	ldr	r2, [pc, #224]	; (8004e00 <HAL_DMA_IRQHandler+0xe2c>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d02c      	beq.n	8004d7e <HAL_DMA_IRQHandler+0xdaa>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a36      	ldr	r2, [pc, #216]	; (8004e04 <HAL_DMA_IRQHandler+0xe30>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d027      	beq.n	8004d7e <HAL_DMA_IRQHandler+0xdaa>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a35      	ldr	r2, [pc, #212]	; (8004e08 <HAL_DMA_IRQHandler+0xe34>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d022      	beq.n	8004d7e <HAL_DMA_IRQHandler+0xdaa>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a33      	ldr	r2, [pc, #204]	; (8004e0c <HAL_DMA_IRQHandler+0xe38>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d01d      	beq.n	8004d7e <HAL_DMA_IRQHandler+0xdaa>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a32      	ldr	r2, [pc, #200]	; (8004e10 <HAL_DMA_IRQHandler+0xe3c>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d018      	beq.n	8004d7e <HAL_DMA_IRQHandler+0xdaa>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a30      	ldr	r2, [pc, #192]	; (8004e14 <HAL_DMA_IRQHandler+0xe40>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d013      	beq.n	8004d7e <HAL_DMA_IRQHandler+0xdaa>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a2f      	ldr	r2, [pc, #188]	; (8004e18 <HAL_DMA_IRQHandler+0xe44>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d00e      	beq.n	8004d7e <HAL_DMA_IRQHandler+0xdaa>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a2d      	ldr	r2, [pc, #180]	; (8004e1c <HAL_DMA_IRQHandler+0xe48>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d009      	beq.n	8004d7e <HAL_DMA_IRQHandler+0xdaa>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a2c      	ldr	r2, [pc, #176]	; (8004e20 <HAL_DMA_IRQHandler+0xe4c>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d004      	beq.n	8004d7e <HAL_DMA_IRQHandler+0xdaa>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a2a      	ldr	r2, [pc, #168]	; (8004e24 <HAL_DMA_IRQHandler+0xe50>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d108      	bne.n	8004d90 <HAL_DMA_IRQHandler+0xdbc>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f022 021c 	bic.w	r2, r2, #28
 8004d8c:	601a      	str	r2, [r3, #0]
 8004d8e:	e007      	b.n	8004da0 <HAL_DMA_IRQHandler+0xdcc>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f022 020e 	bic.w	r2, r2, #14
 8004d9e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da4:	f003 031f 	and.w	r3, r3, #31
 8004da8:	2201      	movs	r2, #1
 8004daa:	409a      	lsls	r2, r3
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d009      	beq.n	8004de2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	4798      	blx	r3
 8004dd6:	e004      	b.n	8004de2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004dd8:	bf00      	nop
 8004dda:	e002      	b.n	8004de2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ddc:	bf00      	nop
 8004dde:	e000      	b.n	8004de2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004de0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004de2:	3728      	adds	r7, #40	; 0x28
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	40020010 	.word	0x40020010
 8004dec:	40020028 	.word	0x40020028
 8004df0:	40020040 	.word	0x40020040
 8004df4:	40020058 	.word	0x40020058
 8004df8:	40020070 	.word	0x40020070
 8004dfc:	40020088 	.word	0x40020088
 8004e00:	400200a0 	.word	0x400200a0
 8004e04:	400200b8 	.word	0x400200b8
 8004e08:	40020410 	.word	0x40020410
 8004e0c:	40020428 	.word	0x40020428
 8004e10:	40020440 	.word	0x40020440
 8004e14:	40020458 	.word	0x40020458
 8004e18:	40020470 	.word	0x40020470
 8004e1c:	40020488 	.word	0x40020488
 8004e20:	400204a0 	.word	0x400204a0
 8004e24:	400204b8 	.word	0x400204b8

08004e28 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b087      	sub	sp, #28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]
 8004e34:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e3a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e40:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a84      	ldr	r2, [pc, #528]	; (8005058 <DMA_SetConfig+0x230>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d072      	beq.n	8004f32 <DMA_SetConfig+0x10a>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a82      	ldr	r2, [pc, #520]	; (800505c <DMA_SetConfig+0x234>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d06d      	beq.n	8004f32 <DMA_SetConfig+0x10a>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a81      	ldr	r2, [pc, #516]	; (8005060 <DMA_SetConfig+0x238>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d068      	beq.n	8004f32 <DMA_SetConfig+0x10a>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a7f      	ldr	r2, [pc, #508]	; (8005064 <DMA_SetConfig+0x23c>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d063      	beq.n	8004f32 <DMA_SetConfig+0x10a>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a7e      	ldr	r2, [pc, #504]	; (8005068 <DMA_SetConfig+0x240>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d05e      	beq.n	8004f32 <DMA_SetConfig+0x10a>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a7c      	ldr	r2, [pc, #496]	; (800506c <DMA_SetConfig+0x244>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d059      	beq.n	8004f32 <DMA_SetConfig+0x10a>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a7b      	ldr	r2, [pc, #492]	; (8005070 <DMA_SetConfig+0x248>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d054      	beq.n	8004f32 <DMA_SetConfig+0x10a>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a79      	ldr	r2, [pc, #484]	; (8005074 <DMA_SetConfig+0x24c>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d04f      	beq.n	8004f32 <DMA_SetConfig+0x10a>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a78      	ldr	r2, [pc, #480]	; (8005078 <DMA_SetConfig+0x250>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d04a      	beq.n	8004f32 <DMA_SetConfig+0x10a>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a76      	ldr	r2, [pc, #472]	; (800507c <DMA_SetConfig+0x254>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d045      	beq.n	8004f32 <DMA_SetConfig+0x10a>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a75      	ldr	r2, [pc, #468]	; (8005080 <DMA_SetConfig+0x258>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d040      	beq.n	8004f32 <DMA_SetConfig+0x10a>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a73      	ldr	r2, [pc, #460]	; (8005084 <DMA_SetConfig+0x25c>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d03b      	beq.n	8004f32 <DMA_SetConfig+0x10a>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a72      	ldr	r2, [pc, #456]	; (8005088 <DMA_SetConfig+0x260>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d036      	beq.n	8004f32 <DMA_SetConfig+0x10a>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a70      	ldr	r2, [pc, #448]	; (800508c <DMA_SetConfig+0x264>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d031      	beq.n	8004f32 <DMA_SetConfig+0x10a>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a6f      	ldr	r2, [pc, #444]	; (8005090 <DMA_SetConfig+0x268>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d02c      	beq.n	8004f32 <DMA_SetConfig+0x10a>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a6d      	ldr	r2, [pc, #436]	; (8005094 <DMA_SetConfig+0x26c>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d027      	beq.n	8004f32 <DMA_SetConfig+0x10a>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a6c      	ldr	r2, [pc, #432]	; (8005098 <DMA_SetConfig+0x270>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d022      	beq.n	8004f32 <DMA_SetConfig+0x10a>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a6a      	ldr	r2, [pc, #424]	; (800509c <DMA_SetConfig+0x274>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d01d      	beq.n	8004f32 <DMA_SetConfig+0x10a>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a69      	ldr	r2, [pc, #420]	; (80050a0 <DMA_SetConfig+0x278>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d018      	beq.n	8004f32 <DMA_SetConfig+0x10a>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a67      	ldr	r2, [pc, #412]	; (80050a4 <DMA_SetConfig+0x27c>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d013      	beq.n	8004f32 <DMA_SetConfig+0x10a>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a66      	ldr	r2, [pc, #408]	; (80050a8 <DMA_SetConfig+0x280>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d00e      	beq.n	8004f32 <DMA_SetConfig+0x10a>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a64      	ldr	r2, [pc, #400]	; (80050ac <DMA_SetConfig+0x284>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d009      	beq.n	8004f32 <DMA_SetConfig+0x10a>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a63      	ldr	r2, [pc, #396]	; (80050b0 <DMA_SetConfig+0x288>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d004      	beq.n	8004f32 <DMA_SetConfig+0x10a>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a61      	ldr	r2, [pc, #388]	; (80050b4 <DMA_SetConfig+0x28c>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d101      	bne.n	8004f36 <DMA_SetConfig+0x10e>
 8004f32:	2301      	movs	r3, #1
 8004f34:	e000      	b.n	8004f38 <DMA_SetConfig+0x110>
 8004f36:	2300      	movs	r3, #0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00d      	beq.n	8004f58 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004f44:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d004      	beq.n	8004f58 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004f56:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a3e      	ldr	r2, [pc, #248]	; (8005058 <DMA_SetConfig+0x230>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d04a      	beq.n	8004ff8 <DMA_SetConfig+0x1d0>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a3d      	ldr	r2, [pc, #244]	; (800505c <DMA_SetConfig+0x234>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d045      	beq.n	8004ff8 <DMA_SetConfig+0x1d0>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a3b      	ldr	r2, [pc, #236]	; (8005060 <DMA_SetConfig+0x238>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d040      	beq.n	8004ff8 <DMA_SetConfig+0x1d0>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a3a      	ldr	r2, [pc, #232]	; (8005064 <DMA_SetConfig+0x23c>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d03b      	beq.n	8004ff8 <DMA_SetConfig+0x1d0>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a38      	ldr	r2, [pc, #224]	; (8005068 <DMA_SetConfig+0x240>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d036      	beq.n	8004ff8 <DMA_SetConfig+0x1d0>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a37      	ldr	r2, [pc, #220]	; (800506c <DMA_SetConfig+0x244>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d031      	beq.n	8004ff8 <DMA_SetConfig+0x1d0>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a35      	ldr	r2, [pc, #212]	; (8005070 <DMA_SetConfig+0x248>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d02c      	beq.n	8004ff8 <DMA_SetConfig+0x1d0>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a34      	ldr	r2, [pc, #208]	; (8005074 <DMA_SetConfig+0x24c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d027      	beq.n	8004ff8 <DMA_SetConfig+0x1d0>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a32      	ldr	r2, [pc, #200]	; (8005078 <DMA_SetConfig+0x250>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d022      	beq.n	8004ff8 <DMA_SetConfig+0x1d0>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a31      	ldr	r2, [pc, #196]	; (800507c <DMA_SetConfig+0x254>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d01d      	beq.n	8004ff8 <DMA_SetConfig+0x1d0>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a2f      	ldr	r2, [pc, #188]	; (8005080 <DMA_SetConfig+0x258>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d018      	beq.n	8004ff8 <DMA_SetConfig+0x1d0>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a2e      	ldr	r2, [pc, #184]	; (8005084 <DMA_SetConfig+0x25c>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d013      	beq.n	8004ff8 <DMA_SetConfig+0x1d0>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a2c      	ldr	r2, [pc, #176]	; (8005088 <DMA_SetConfig+0x260>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d00e      	beq.n	8004ff8 <DMA_SetConfig+0x1d0>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a2b      	ldr	r2, [pc, #172]	; (800508c <DMA_SetConfig+0x264>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d009      	beq.n	8004ff8 <DMA_SetConfig+0x1d0>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a29      	ldr	r2, [pc, #164]	; (8005090 <DMA_SetConfig+0x268>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d004      	beq.n	8004ff8 <DMA_SetConfig+0x1d0>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a28      	ldr	r2, [pc, #160]	; (8005094 <DMA_SetConfig+0x26c>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d101      	bne.n	8004ffc <DMA_SetConfig+0x1d4>
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e000      	b.n	8004ffe <DMA_SetConfig+0x1d6>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d05a      	beq.n	80050b8 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005006:	f003 031f 	and.w	r3, r3, #31
 800500a:	223f      	movs	r2, #63	; 0x3f
 800500c:	409a      	lsls	r2, r3
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005020:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	683a      	ldr	r2, [r7, #0]
 8005028:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	2b40      	cmp	r3, #64	; 0x40
 8005030:	d108      	bne.n	8005044 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005042:	e087      	b.n	8005154 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68ba      	ldr	r2, [r7, #8]
 800504a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	60da      	str	r2, [r3, #12]
}
 8005054:	e07e      	b.n	8005154 <DMA_SetConfig+0x32c>
 8005056:	bf00      	nop
 8005058:	40020010 	.word	0x40020010
 800505c:	40020028 	.word	0x40020028
 8005060:	40020040 	.word	0x40020040
 8005064:	40020058 	.word	0x40020058
 8005068:	40020070 	.word	0x40020070
 800506c:	40020088 	.word	0x40020088
 8005070:	400200a0 	.word	0x400200a0
 8005074:	400200b8 	.word	0x400200b8
 8005078:	40020410 	.word	0x40020410
 800507c:	40020428 	.word	0x40020428
 8005080:	40020440 	.word	0x40020440
 8005084:	40020458 	.word	0x40020458
 8005088:	40020470 	.word	0x40020470
 800508c:	40020488 	.word	0x40020488
 8005090:	400204a0 	.word	0x400204a0
 8005094:	400204b8 	.word	0x400204b8
 8005098:	58025408 	.word	0x58025408
 800509c:	5802541c 	.word	0x5802541c
 80050a0:	58025430 	.word	0x58025430
 80050a4:	58025444 	.word	0x58025444
 80050a8:	58025458 	.word	0x58025458
 80050ac:	5802546c 	.word	0x5802546c
 80050b0:	58025480 	.word	0x58025480
 80050b4:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a28      	ldr	r2, [pc, #160]	; (8005160 <DMA_SetConfig+0x338>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d022      	beq.n	8005108 <DMA_SetConfig+0x2e0>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a27      	ldr	r2, [pc, #156]	; (8005164 <DMA_SetConfig+0x33c>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d01d      	beq.n	8005108 <DMA_SetConfig+0x2e0>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a25      	ldr	r2, [pc, #148]	; (8005168 <DMA_SetConfig+0x340>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d018      	beq.n	8005108 <DMA_SetConfig+0x2e0>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a24      	ldr	r2, [pc, #144]	; (800516c <DMA_SetConfig+0x344>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d013      	beq.n	8005108 <DMA_SetConfig+0x2e0>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a22      	ldr	r2, [pc, #136]	; (8005170 <DMA_SetConfig+0x348>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d00e      	beq.n	8005108 <DMA_SetConfig+0x2e0>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a21      	ldr	r2, [pc, #132]	; (8005174 <DMA_SetConfig+0x34c>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d009      	beq.n	8005108 <DMA_SetConfig+0x2e0>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a1f      	ldr	r2, [pc, #124]	; (8005178 <DMA_SetConfig+0x350>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d004      	beq.n	8005108 <DMA_SetConfig+0x2e0>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a1e      	ldr	r2, [pc, #120]	; (800517c <DMA_SetConfig+0x354>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d101      	bne.n	800510c <DMA_SetConfig+0x2e4>
 8005108:	2301      	movs	r3, #1
 800510a:	e000      	b.n	800510e <DMA_SetConfig+0x2e6>
 800510c:	2300      	movs	r3, #0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d020      	beq.n	8005154 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005116:	f003 031f 	and.w	r3, r3, #31
 800511a:	2201      	movs	r2, #1
 800511c:	409a      	lsls	r2, r3
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	2b40      	cmp	r3, #64	; 0x40
 8005130:	d108      	bne.n	8005144 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	60da      	str	r2, [r3, #12]
}
 8005142:	e007      	b.n	8005154 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	60da      	str	r2, [r3, #12]
}
 8005154:	bf00      	nop
 8005156:	371c      	adds	r7, #28
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr
 8005160:	58025408 	.word	0x58025408
 8005164:	5802541c 	.word	0x5802541c
 8005168:	58025430 	.word	0x58025430
 800516c:	58025444 	.word	0x58025444
 8005170:	58025458 	.word	0x58025458
 8005174:	5802546c 	.word	0x5802546c
 8005178:	58025480 	.word	0x58025480
 800517c:	58025494 	.word	0x58025494

08005180 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a42      	ldr	r2, [pc, #264]	; (8005298 <DMA_CalcBaseAndBitshift+0x118>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d04a      	beq.n	8005228 <DMA_CalcBaseAndBitshift+0xa8>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a41      	ldr	r2, [pc, #260]	; (800529c <DMA_CalcBaseAndBitshift+0x11c>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d045      	beq.n	8005228 <DMA_CalcBaseAndBitshift+0xa8>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a3f      	ldr	r2, [pc, #252]	; (80052a0 <DMA_CalcBaseAndBitshift+0x120>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d040      	beq.n	8005228 <DMA_CalcBaseAndBitshift+0xa8>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a3e      	ldr	r2, [pc, #248]	; (80052a4 <DMA_CalcBaseAndBitshift+0x124>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d03b      	beq.n	8005228 <DMA_CalcBaseAndBitshift+0xa8>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a3c      	ldr	r2, [pc, #240]	; (80052a8 <DMA_CalcBaseAndBitshift+0x128>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d036      	beq.n	8005228 <DMA_CalcBaseAndBitshift+0xa8>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a3b      	ldr	r2, [pc, #236]	; (80052ac <DMA_CalcBaseAndBitshift+0x12c>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d031      	beq.n	8005228 <DMA_CalcBaseAndBitshift+0xa8>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a39      	ldr	r2, [pc, #228]	; (80052b0 <DMA_CalcBaseAndBitshift+0x130>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d02c      	beq.n	8005228 <DMA_CalcBaseAndBitshift+0xa8>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a38      	ldr	r2, [pc, #224]	; (80052b4 <DMA_CalcBaseAndBitshift+0x134>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d027      	beq.n	8005228 <DMA_CalcBaseAndBitshift+0xa8>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a36      	ldr	r2, [pc, #216]	; (80052b8 <DMA_CalcBaseAndBitshift+0x138>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d022      	beq.n	8005228 <DMA_CalcBaseAndBitshift+0xa8>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a35      	ldr	r2, [pc, #212]	; (80052bc <DMA_CalcBaseAndBitshift+0x13c>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d01d      	beq.n	8005228 <DMA_CalcBaseAndBitshift+0xa8>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a33      	ldr	r2, [pc, #204]	; (80052c0 <DMA_CalcBaseAndBitshift+0x140>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d018      	beq.n	8005228 <DMA_CalcBaseAndBitshift+0xa8>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a32      	ldr	r2, [pc, #200]	; (80052c4 <DMA_CalcBaseAndBitshift+0x144>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d013      	beq.n	8005228 <DMA_CalcBaseAndBitshift+0xa8>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a30      	ldr	r2, [pc, #192]	; (80052c8 <DMA_CalcBaseAndBitshift+0x148>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d00e      	beq.n	8005228 <DMA_CalcBaseAndBitshift+0xa8>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a2f      	ldr	r2, [pc, #188]	; (80052cc <DMA_CalcBaseAndBitshift+0x14c>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d009      	beq.n	8005228 <DMA_CalcBaseAndBitshift+0xa8>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a2d      	ldr	r2, [pc, #180]	; (80052d0 <DMA_CalcBaseAndBitshift+0x150>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d004      	beq.n	8005228 <DMA_CalcBaseAndBitshift+0xa8>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a2c      	ldr	r2, [pc, #176]	; (80052d4 <DMA_CalcBaseAndBitshift+0x154>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d101      	bne.n	800522c <DMA_CalcBaseAndBitshift+0xac>
 8005228:	2301      	movs	r3, #1
 800522a:	e000      	b.n	800522e <DMA_CalcBaseAndBitshift+0xae>
 800522c:	2300      	movs	r3, #0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d024      	beq.n	800527c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	b2db      	uxtb	r3, r3
 8005238:	3b10      	subs	r3, #16
 800523a:	4a27      	ldr	r2, [pc, #156]	; (80052d8 <DMA_CalcBaseAndBitshift+0x158>)
 800523c:	fba2 2303 	umull	r2, r3, r2, r3
 8005240:	091b      	lsrs	r3, r3, #4
 8005242:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f003 0307 	and.w	r3, r3, #7
 800524a:	4a24      	ldr	r2, [pc, #144]	; (80052dc <DMA_CalcBaseAndBitshift+0x15c>)
 800524c:	5cd3      	ldrb	r3, [r2, r3]
 800524e:	461a      	mov	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2b03      	cmp	r3, #3
 8005258:	d908      	bls.n	800526c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	461a      	mov	r2, r3
 8005260:	4b1f      	ldr	r3, [pc, #124]	; (80052e0 <DMA_CalcBaseAndBitshift+0x160>)
 8005262:	4013      	ands	r3, r2
 8005264:	1d1a      	adds	r2, r3, #4
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	659a      	str	r2, [r3, #88]	; 0x58
 800526a:	e00d      	b.n	8005288 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	461a      	mov	r2, r3
 8005272:	4b1b      	ldr	r3, [pc, #108]	; (80052e0 <DMA_CalcBaseAndBitshift+0x160>)
 8005274:	4013      	ands	r3, r2
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	6593      	str	r3, [r2, #88]	; 0x58
 800527a:	e005      	b.n	8005288 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800528c:	4618      	mov	r0, r3
 800528e:	3714      	adds	r7, #20
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	40020010 	.word	0x40020010
 800529c:	40020028 	.word	0x40020028
 80052a0:	40020040 	.word	0x40020040
 80052a4:	40020058 	.word	0x40020058
 80052a8:	40020070 	.word	0x40020070
 80052ac:	40020088 	.word	0x40020088
 80052b0:	400200a0 	.word	0x400200a0
 80052b4:	400200b8 	.word	0x400200b8
 80052b8:	40020410 	.word	0x40020410
 80052bc:	40020428 	.word	0x40020428
 80052c0:	40020440 	.word	0x40020440
 80052c4:	40020458 	.word	0x40020458
 80052c8:	40020470 	.word	0x40020470
 80052cc:	40020488 	.word	0x40020488
 80052d0:	400204a0 	.word	0x400204a0
 80052d4:	400204b8 	.word	0x400204b8
 80052d8:	aaaaaaab 	.word	0xaaaaaaab
 80052dc:	08019918 	.word	0x08019918
 80052e0:	fffffc00 	.word	0xfffffc00

080052e4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052ec:	2300      	movs	r3, #0
 80052ee:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d120      	bne.n	800533a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fc:	2b03      	cmp	r3, #3
 80052fe:	d858      	bhi.n	80053b2 <DMA_CheckFifoParam+0xce>
 8005300:	a201      	add	r2, pc, #4	; (adr r2, 8005308 <DMA_CheckFifoParam+0x24>)
 8005302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005306:	bf00      	nop
 8005308:	08005319 	.word	0x08005319
 800530c:	0800532b 	.word	0x0800532b
 8005310:	08005319 	.word	0x08005319
 8005314:	080053b3 	.word	0x080053b3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d048      	beq.n	80053b6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005328:	e045      	b.n	80053b6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005332:	d142      	bne.n	80053ba <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005338:	e03f      	b.n	80053ba <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005342:	d123      	bne.n	800538c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005348:	2b03      	cmp	r3, #3
 800534a:	d838      	bhi.n	80053be <DMA_CheckFifoParam+0xda>
 800534c:	a201      	add	r2, pc, #4	; (adr r2, 8005354 <DMA_CheckFifoParam+0x70>)
 800534e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005352:	bf00      	nop
 8005354:	08005365 	.word	0x08005365
 8005358:	0800536b 	.word	0x0800536b
 800535c:	08005365 	.word	0x08005365
 8005360:	0800537d 	.word	0x0800537d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	73fb      	strb	r3, [r7, #15]
        break;
 8005368:	e030      	b.n	80053cc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d025      	beq.n	80053c2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800537a:	e022      	b.n	80053c2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005380:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005384:	d11f      	bne.n	80053c6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800538a:	e01c      	b.n	80053c6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005390:	2b02      	cmp	r3, #2
 8005392:	d902      	bls.n	800539a <DMA_CheckFifoParam+0xb6>
 8005394:	2b03      	cmp	r3, #3
 8005396:	d003      	beq.n	80053a0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005398:	e018      	b.n	80053cc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	73fb      	strb	r3, [r7, #15]
        break;
 800539e:	e015      	b.n	80053cc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00e      	beq.n	80053ca <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	73fb      	strb	r3, [r7, #15]
    break;
 80053b0:	e00b      	b.n	80053ca <DMA_CheckFifoParam+0xe6>
        break;
 80053b2:	bf00      	nop
 80053b4:	e00a      	b.n	80053cc <DMA_CheckFifoParam+0xe8>
        break;
 80053b6:	bf00      	nop
 80053b8:	e008      	b.n	80053cc <DMA_CheckFifoParam+0xe8>
        break;
 80053ba:	bf00      	nop
 80053bc:	e006      	b.n	80053cc <DMA_CheckFifoParam+0xe8>
        break;
 80053be:	bf00      	nop
 80053c0:	e004      	b.n	80053cc <DMA_CheckFifoParam+0xe8>
        break;
 80053c2:	bf00      	nop
 80053c4:	e002      	b.n	80053cc <DMA_CheckFifoParam+0xe8>
        break;
 80053c6:	bf00      	nop
 80053c8:	e000      	b.n	80053cc <DMA_CheckFifoParam+0xe8>
    break;
 80053ca:	bf00      	nop
    }
  }

  return status;
 80053cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3714      	adds	r7, #20
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop

080053dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a38      	ldr	r2, [pc, #224]	; (80054d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d022      	beq.n	800543a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a36      	ldr	r2, [pc, #216]	; (80054d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d01d      	beq.n	800543a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a35      	ldr	r2, [pc, #212]	; (80054d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d018      	beq.n	800543a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a33      	ldr	r2, [pc, #204]	; (80054dc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d013      	beq.n	800543a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a32      	ldr	r2, [pc, #200]	; (80054e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d00e      	beq.n	800543a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a30      	ldr	r2, [pc, #192]	; (80054e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d009      	beq.n	800543a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a2f      	ldr	r2, [pc, #188]	; (80054e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d004      	beq.n	800543a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a2d      	ldr	r2, [pc, #180]	; (80054ec <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d101      	bne.n	800543e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800543a:	2301      	movs	r3, #1
 800543c:	e000      	b.n	8005440 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800543e:	2300      	movs	r3, #0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d01a      	beq.n	800547a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	b2db      	uxtb	r3, r3
 800544a:	3b08      	subs	r3, #8
 800544c:	4a28      	ldr	r2, [pc, #160]	; (80054f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800544e:	fba2 2303 	umull	r2, r3, r2, r3
 8005452:	091b      	lsrs	r3, r3, #4
 8005454:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	4b26      	ldr	r3, [pc, #152]	; (80054f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800545a:	4413      	add	r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	461a      	mov	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a24      	ldr	r2, [pc, #144]	; (80054f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005468:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f003 031f 	and.w	r3, r3, #31
 8005470:	2201      	movs	r2, #1
 8005472:	409a      	lsls	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005478:	e024      	b.n	80054c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	b2db      	uxtb	r3, r3
 8005480:	3b10      	subs	r3, #16
 8005482:	4a1e      	ldr	r2, [pc, #120]	; (80054fc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005484:	fba2 2303 	umull	r2, r3, r2, r3
 8005488:	091b      	lsrs	r3, r3, #4
 800548a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	4a1c      	ldr	r2, [pc, #112]	; (8005500 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d806      	bhi.n	80054a2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	4a1b      	ldr	r2, [pc, #108]	; (8005504 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d902      	bls.n	80054a2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	3308      	adds	r3, #8
 80054a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	4b18      	ldr	r3, [pc, #96]	; (8005508 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80054a6:	4413      	add	r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	461a      	mov	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a16      	ldr	r2, [pc, #88]	; (800550c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80054b4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f003 031f 	and.w	r3, r3, #31
 80054bc:	2201      	movs	r2, #1
 80054be:	409a      	lsls	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80054c4:	bf00      	nop
 80054c6:	3714      	adds	r7, #20
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	58025408 	.word	0x58025408
 80054d4:	5802541c 	.word	0x5802541c
 80054d8:	58025430 	.word	0x58025430
 80054dc:	58025444 	.word	0x58025444
 80054e0:	58025458 	.word	0x58025458
 80054e4:	5802546c 	.word	0x5802546c
 80054e8:	58025480 	.word	0x58025480
 80054ec:	58025494 	.word	0x58025494
 80054f0:	cccccccd 	.word	0xcccccccd
 80054f4:	16009600 	.word	0x16009600
 80054f8:	58025880 	.word	0x58025880
 80054fc:	aaaaaaab 	.word	0xaaaaaaab
 8005500:	400204b8 	.word	0x400204b8
 8005504:	4002040f 	.word	0x4002040f
 8005508:	10008200 	.word	0x10008200
 800550c:	40020880 	.word	0x40020880

08005510 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	b2db      	uxtb	r3, r3
 800551e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d04a      	beq.n	80055bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2b08      	cmp	r3, #8
 800552a:	d847      	bhi.n	80055bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a25      	ldr	r2, [pc, #148]	; (80055c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d022      	beq.n	800557c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a24      	ldr	r2, [pc, #144]	; (80055cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d01d      	beq.n	800557c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a22      	ldr	r2, [pc, #136]	; (80055d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d018      	beq.n	800557c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a21      	ldr	r2, [pc, #132]	; (80055d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d013      	beq.n	800557c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a1f      	ldr	r2, [pc, #124]	; (80055d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d00e      	beq.n	800557c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a1e      	ldr	r2, [pc, #120]	; (80055dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d009      	beq.n	800557c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a1c      	ldr	r2, [pc, #112]	; (80055e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d004      	beq.n	800557c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a1b      	ldr	r2, [pc, #108]	; (80055e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d101      	bne.n	8005580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800557c:	2301      	movs	r3, #1
 800557e:	e000      	b.n	8005582 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005580:	2300      	movs	r3, #0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00a      	beq.n	800559c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	4b17      	ldr	r3, [pc, #92]	; (80055e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800558a:	4413      	add	r3, r2
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	461a      	mov	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a15      	ldr	r2, [pc, #84]	; (80055ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005598:	671a      	str	r2, [r3, #112]	; 0x70
 800559a:	e009      	b.n	80055b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	4b14      	ldr	r3, [pc, #80]	; (80055f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80055a0:	4413      	add	r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	461a      	mov	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a11      	ldr	r2, [pc, #68]	; (80055f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80055ae:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	3b01      	subs	r3, #1
 80055b4:	2201      	movs	r2, #1
 80055b6:	409a      	lsls	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80055bc:	bf00      	nop
 80055be:	3714      	adds	r7, #20
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	58025408 	.word	0x58025408
 80055cc:	5802541c 	.word	0x5802541c
 80055d0:	58025430 	.word	0x58025430
 80055d4:	58025444 	.word	0x58025444
 80055d8:	58025458 	.word	0x58025458
 80055dc:	5802546c 	.word	0x5802546c
 80055e0:	58025480 	.word	0x58025480
 80055e4:	58025494 	.word	0x58025494
 80055e8:	1600963f 	.word	0x1600963f
 80055ec:	58025940 	.word	0x58025940
 80055f0:	1000823f 	.word	0x1000823f
 80055f4:	40020940 	.word	0x40020940

080055f8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b098      	sub	sp, #96	; 0x60
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8005600:	4a84      	ldr	r2, [pc, #528]	; (8005814 <HAL_FDCAN_Init+0x21c>)
 8005602:	f107 030c 	add.w	r3, r7, #12
 8005606:	4611      	mov	r1, r2
 8005608:	224c      	movs	r2, #76	; 0x4c
 800560a:	4618      	mov	r0, r3
 800560c:	f012 fc64 	bl	8017ed8 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e1ca      	b.n	80059b0 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a7e      	ldr	r2, [pc, #504]	; (8005818 <HAL_FDCAN_Init+0x220>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d106      	bne.n	8005632 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800562c:	461a      	mov	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d106      	bne.n	800564c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f7fd f94e 	bl	80028e8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	699a      	ldr	r2, [r3, #24]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f022 0210 	bic.w	r2, r2, #16
 800565a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800565c:	f7fd fdaa 	bl	80031b4 <HAL_GetTick>
 8005660:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005662:	e014      	b.n	800568e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005664:	f7fd fda6 	bl	80031b4 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	2b0a      	cmp	r3, #10
 8005670:	d90d      	bls.n	800568e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005678:	f043 0201 	orr.w	r2, r3, #1
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2203      	movs	r2, #3
 8005686:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e190      	b.n	80059b0 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	f003 0308 	and.w	r3, r3, #8
 8005698:	2b08      	cmp	r3, #8
 800569a:	d0e3      	beq.n	8005664 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	699a      	ldr	r2, [r3, #24]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f042 0201 	orr.w	r2, r2, #1
 80056aa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80056ac:	f7fd fd82 	bl	80031b4 <HAL_GetTick>
 80056b0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80056b2:	e014      	b.n	80056de <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80056b4:	f7fd fd7e 	bl	80031b4 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b0a      	cmp	r3, #10
 80056c0:	d90d      	bls.n	80056de <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056c8:	f043 0201 	orr.w	r2, r3, #1
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2203      	movs	r2, #3
 80056d6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e168      	b.n	80059b0 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	f003 0301 	and.w	r3, r3, #1
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d0e3      	beq.n	80056b4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	699a      	ldr	r2, [r3, #24]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f042 0202 	orr.w	r2, r2, #2
 80056fa:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	7c1b      	ldrb	r3, [r3, #16]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d108      	bne.n	8005716 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	699a      	ldr	r2, [r3, #24]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005712:	619a      	str	r2, [r3, #24]
 8005714:	e007      	b.n	8005726 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	699a      	ldr	r2, [r3, #24]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005724:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	7c5b      	ldrb	r3, [r3, #17]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d108      	bne.n	8005740 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	699a      	ldr	r2, [r3, #24]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800573c:	619a      	str	r2, [r3, #24]
 800573e:	e007      	b.n	8005750 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	699a      	ldr	r2, [r3, #24]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800574e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	7c9b      	ldrb	r3, [r3, #18]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d108      	bne.n	800576a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	699a      	ldr	r2, [r3, #24]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005766:	619a      	str	r2, [r3, #24]
 8005768:	e007      	b.n	800577a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	699a      	ldr	r2, [r3, #24]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005778:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	689a      	ldr	r2, [r3, #8]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	430a      	orrs	r2, r1
 800578e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	699a      	ldr	r2, [r3, #24]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800579e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	691a      	ldr	r2, [r3, #16]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f022 0210 	bic.w	r2, r2, #16
 80057ae:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d108      	bne.n	80057ca <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	699a      	ldr	r2, [r3, #24]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f042 0204 	orr.w	r2, r2, #4
 80057c6:	619a      	str	r2, [r3, #24]
 80057c8:	e030      	b.n	800582c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d02c      	beq.n	800582c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d020      	beq.n	800581c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	699a      	ldr	r2, [r3, #24]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80057e8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	691a      	ldr	r2, [r3, #16]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f042 0210 	orr.w	r2, r2, #16
 80057f8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	2b03      	cmp	r3, #3
 8005800:	d114      	bne.n	800582c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	699a      	ldr	r2, [r3, #24]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f042 0220 	orr.w	r2, r2, #32
 8005810:	619a      	str	r2, [r3, #24]
 8005812:	e00b      	b.n	800582c <HAL_FDCAN_Init+0x234>
 8005814:	08019824 	.word	0x08019824
 8005818:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	699a      	ldr	r2, [r3, #24]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f042 0220 	orr.w	r2, r2, #32
 800582a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	3b01      	subs	r3, #1
 8005832:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	69db      	ldr	r3, [r3, #28]
 8005838:	3b01      	subs	r3, #1
 800583a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800583c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005844:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	695b      	ldr	r3, [r3, #20]
 800584c:	3b01      	subs	r3, #1
 800584e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005854:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005856:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005860:	d115      	bne.n	800588e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005866:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586c:	3b01      	subs	r3, #1
 800586e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005870:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005876:	3b01      	subs	r3, #1
 8005878:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800587a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005882:	3b01      	subs	r3, #1
 8005884:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800588a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800588c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00a      	beq.n	80058ac <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058b4:	4413      	add	r3, r2
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d012      	beq.n	80058e0 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80058c2:	f023 0107 	bic.w	r1, r3, #7
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80058d0:	4413      	add	r3, r2
 80058d2:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	430a      	orrs	r2, r1
 80058dc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d012      	beq.n	800590e <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80058f0:	f023 0107 	bic.w	r1, r3, #7
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80058fe:	4413      	add	r3, r2
 8005900:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	430a      	orrs	r2, r1
 800590a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005912:	2b00      	cmp	r3, #0
 8005914:	d013      	beq.n	800593e <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800591e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800592c:	4413      	add	r3, r2
 800592e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005932:	011a      	lsls	r2, r3, #4
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	430a      	orrs	r2, r1
 800593a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005942:	2b00      	cmp	r3, #0
 8005944:	d013      	beq.n	800596e <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800594e:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800595c:	4413      	add	r3, r2
 800595e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005962:	021a      	lsls	r2, r3, #8
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	430a      	orrs	r2, r1
 800596a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a11      	ldr	r2, [pc, #68]	; (80059b8 <HAL_FDCAN_Init+0x3c0>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d107      	bne.n	8005988 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	689a      	ldr	r2, [r3, #8]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f022 0203 	bic.w	r2, r2, #3
 8005986:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 fddf 	bl	8006564 <FDCAN_CalcultateRamBlockAddresses>
 80059a6:	4603      	mov	r3, r0
 80059a8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80059ac:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3760      	adds	r7, #96	; 0x60
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	4000a000 	.word	0x4000a000

080059bc <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80059bc:	b480      	push	{r7}
 80059be:	b087      	sub	sp, #28
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80059cc:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80059ce:	7bfb      	ldrb	r3, [r7, #15]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d002      	beq.n	80059da <HAL_FDCAN_ConfigFilter+0x1e>
 80059d4:	7bfb      	ldrb	r3, [r7, #15]
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d157      	bne.n	8005a8a <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d12b      	bne.n	8005a3a <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	2b07      	cmp	r3, #7
 80059e8:	d10d      	bne.n	8005a06 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	69db      	ldr	r3, [r3, #28]
 80059f4:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 80059f6:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80059fc:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 80059fe:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8005a02:	617b      	str	r3, [r7, #20]
 8005a04:	e00e      	b.n	8005a24 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005a12:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8005a1a:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005a20:	4313      	orrs	r3, r2
 8005a22:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	4413      	add	r3, r2
 8005a30:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	e025      	b.n	8005a86 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	075a      	lsls	r2, r3, #29
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	2b07      	cmp	r3, #7
 8005a4e:	d103      	bne.n	8005a58 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	613b      	str	r3, [r7, #16]
 8005a56:	e006      	b.n	8005a66 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	079a      	lsls	r2, r3, #30
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	00db      	lsls	r3, r3, #3
 8005a70:	4413      	add	r3, r2
 8005a72:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	3304      	adds	r3, #4
 8005a7e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8005a86:	2300      	movs	r3, #0
 8005a88:	e008      	b.n	8005a9c <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a90:	f043 0202 	orr.w	r2, r3, #2
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
  }
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	371c      	adds	r7, #28
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
 8005ab4:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d110      	bne.n	8005ae4 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8005aca:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8005ad0:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8005ad8:	69ba      	ldr	r2, [r7, #24]
 8005ada:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8005adc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	e008      	b.n	8005af6 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005aea:	f043 0204 	orr.w	r2, r3, #4
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
  }
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3714      	adds	r7, #20
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 8005b02:	b480      	push	{r7}
 8005b04:	b083      	sub	sp, #12
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d109      	bne.n	8005b2a <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68da      	ldr	r2, [r3, #12]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005b24:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 8005b26:	2300      	movs	r3, #0
 8005b28:	e008      	b.n	8005b3c <HAL_FDCAN_EnableTxDelayCompensation+0x3a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b30:	f043 0204 	orr.w	r2, r3, #4
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
  }
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d111      	bne.n	8005b80 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2202      	movs	r2, #2
 8005b60:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	699a      	ldr	r2, [r3, #24]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f022 0201 	bic.w	r2, r2, #1
 8005b72:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	e008      	b.n	8005b92 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b86:	f043 0204 	orr.w	r2, r3, #4
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
  }
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	370c      	adds	r7, #12
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
	...

08005ba0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b08b      	sub	sp, #44	; 0x2c
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
 8005bac:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005bb8:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8005bba:	7efb      	ldrb	r3, [r7, #27]
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	f040 813b 	bne.w	8005e38 <HAL_FDCAN_GetRxMessage+0x298>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	2b40      	cmp	r3, #64	; 0x40
 8005bc6:	d145      	bne.n	8005c54 <HAL_FDCAN_GetRxMessage+0xb4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005bd0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d109      	bne.n	8005bec <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bde:	f043 0220 	orr.w	r2, r3, #32
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e12e      	b.n	8005e4a <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005bf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d109      	bne.n	8005c10 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e11c      	b.n	8005e4a <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005c18:	0e1b      	lsrs	r3, r3, #24
 8005c1a:	f003 0301 	and.w	r3, r3, #1
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d103      	bne.n	8005c2a <HAL_FDCAN_GetRxMessage+0x8a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005c32:	0a1b      	lsrs	r3, r3, #8
 8005c34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c38:	69fa      	ldr	r2, [r7, #28]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c46:	69f9      	ldr	r1, [r7, #28]
 8005c48:	fb01 f303 	mul.w	r3, r1, r3
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	4413      	add	r3, r2
 8005c50:	627b      	str	r3, [r7, #36]	; 0x24
 8005c52:	e061      	b.n	8005d18 <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	2b41      	cmp	r3, #65	; 0x41
 8005c58:	d145      	bne.n	8005ce6 <HAL_FDCAN_GetRxMessage+0x146>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d109      	bne.n	8005c7e <HAL_FDCAN_GetRxMessage+0xde>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c70:	f043 0220 	orr.w	r2, r3, #32
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e0e5      	b.n	8005e4a <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005c86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d109      	bne.n	8005ca2 <HAL_FDCAN_GetRxMessage+0x102>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e0d3      	b.n	8005e4a <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005caa:	0e1b      	lsrs	r3, r3, #24
 8005cac:	f003 0301 	and.w	r3, r3, #1
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d103      	bne.n	8005cbc <HAL_FDCAN_GetRxMessage+0x11c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005cc4:	0a1b      	lsrs	r3, r3, #8
 8005cc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cca:	69fa      	ldr	r2, [r7, #28]
 8005ccc:	4413      	add	r3, r2
 8005cce:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cd8:	69f9      	ldr	r1, [r7, #28]
 8005cda:	fb01 f303 	mul.w	r3, r1, r3
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4413      	add	r3, r2
 8005ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ce4:	e018      	b.n	8005d18 <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cea:	68ba      	ldr	r2, [r7, #8]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d309      	bcc.n	8005d04 <HAL_FDCAN_GetRxMessage+0x164>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cf6:	f043 0220 	orr.w	r2, r3, #32
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e0a2      	b.n	8005e4a <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d0c:	68b9      	ldr	r1, [r7, #8]
 8005d0e:	fb01 f303 	mul.w	r3, r1, r3
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4413      	add	r3, r2
 8005d16:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d107      	bne.n	8005d3c <HAL_FDCAN_GetRxMessage+0x19c>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	0c9b      	lsrs	r3, r3, #18
 8005d32:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	601a      	str	r2, [r3, #0]
 8005d3a:	e005      	b.n	8005d48 <HAL_FDCAN_GetRxMessage+0x1a8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d62:	3304      	adds	r3, #4
 8005d64:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8005d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8005d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	0e1b      	lsrs	r3, r3, #24
 8005d9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8005da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	0fda      	lsrs	r2, r3, #31
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dae:	3304      	adds	r3, #4
 8005db0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db4:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8005db6:	2300      	movs	r3, #0
 8005db8:	623b      	str	r3, [r7, #32]
 8005dba:	e00a      	b.n	8005dd2 <HAL_FDCAN_GetRxMessage+0x232>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	6a3b      	ldr	r3, [r7, #32]
 8005dc0:	441a      	add	r2, r3
 8005dc2:	6839      	ldr	r1, [r7, #0]
 8005dc4:	6a3b      	ldr	r3, [r7, #32]
 8005dc6:	440b      	add	r3, r1
 8005dc8:	7812      	ldrb	r2, [r2, #0]
 8005dca:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8005dcc:	6a3b      	ldr	r3, [r7, #32]
 8005dce:	3301      	adds	r3, #1
 8005dd0:	623b      	str	r3, [r7, #32]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	0c1b      	lsrs	r3, r3, #16
 8005dd8:	4a1f      	ldr	r2, [pc, #124]	; (8005e58 <HAL_FDCAN_GetRxMessage+0x2b8>)
 8005dda:	5cd3      	ldrb	r3, [r2, r3]
 8005ddc:	461a      	mov	r2, r3
 8005dde:	6a3b      	ldr	r3, [r7, #32]
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d3eb      	bcc.n	8005dbc <HAL_FDCAN_GetRxMessage+0x21c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	2b40      	cmp	r3, #64	; 0x40
 8005de8:	d105      	bne.n	8005df6 <HAL_FDCAN_GetRxMessage+0x256>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	69fa      	ldr	r2, [r7, #28]
 8005df0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8005df4:	e01e      	b.n	8005e34 <HAL_FDCAN_GetRxMessage+0x294>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	2b41      	cmp	r3, #65	; 0x41
 8005dfa:	d105      	bne.n	8005e08 <HAL_FDCAN_GetRxMessage+0x268>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	69fa      	ldr	r2, [r7, #28]
 8005e02:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8005e06:	e015      	b.n	8005e34 <HAL_FDCAN_GetRxMessage+0x294>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	2b1f      	cmp	r3, #31
 8005e0c:	d808      	bhi.n	8005e20 <HAL_FDCAN_GetRxMessage+0x280>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2101      	movs	r1, #1
 8005e14:	68ba      	ldr	r2, [r7, #8]
 8005e16:	fa01 f202 	lsl.w	r2, r1, r2
 8005e1a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8005e1e:	e009      	b.n	8005e34 <HAL_FDCAN_GetRxMessage+0x294>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	f003 021f 	and.w	r2, r3, #31
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2101      	movs	r1, #1
 8005e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8005e30:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8005e34:	2300      	movs	r3, #0
 8005e36:	e008      	b.n	8005e4a <HAL_FDCAN_GetRxMessage+0x2aa>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e3e:	f043 0208 	orr.w	r2, r3, #8
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
  }
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	372c      	adds	r7, #44	; 0x2c
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	08019920 	.word	0x08019920

08005e5c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b087      	sub	sp, #28
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005e6e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005e70:	7dfb      	ldrb	r3, [r7, #23]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d002      	beq.n	8005e7c <HAL_FDCAN_ActivateNotification+0x20>
 8005e76:	7dfb      	ldrb	r3, [r7, #23]
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	d155      	bne.n	8005f28 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	4013      	ands	r3, r2
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d108      	bne.n	8005e9c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f042 0201 	orr.w	r2, r2, #1
 8005e98:	65da      	str	r2, [r3, #92]	; 0x5c
 8005e9a:	e014      	b.n	8005ec6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d108      	bne.n	8005ebe <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f042 0202 	orr.w	r2, r2, #2
 8005eba:	65da      	str	r2, [r3, #92]	; 0x5c
 8005ebc:	e003      	b.n	8005ec6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2203      	movs	r2, #3
 8005ec4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d009      	beq.n	8005ee4 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d009      	beq.n	8005f02 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	430a      	orrs	r2, r1
 8005efe:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005f08:	68ba      	ldr	r2, [r7, #8]
 8005f0a:	4b0f      	ldr	r3, [pc, #60]	; (8005f48 <HAL_FDCAN_ActivateNotification+0xec>)
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	6812      	ldr	r2, [r2, #0]
 8005f12:	430b      	orrs	r3, r1
 8005f14:	6553      	str	r3, [r2, #84]	; 0x54
 8005f16:	4b0d      	ldr	r3, [pc, #52]	; (8005f4c <HAL_FDCAN_ActivateNotification+0xf0>)
 8005f18:	695a      	ldr	r2, [r3, #20]
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	0f9b      	lsrs	r3, r3, #30
 8005f1e:	490b      	ldr	r1, [pc, #44]	; (8005f4c <HAL_FDCAN_ActivateNotification+0xf0>)
 8005f20:	4313      	orrs	r3, r2
 8005f22:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8005f24:	2300      	movs	r3, #0
 8005f26:	e008      	b.n	8005f3a <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f2e:	f043 0202 	orr.w	r2, r3, #2
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
  }
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	371c      	adds	r7, #28
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	3fcfffff 	.word	0x3fcfffff
 8005f4c:	4000a800 	.word	0x4000a800

08005f50 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b092      	sub	sp, #72	; 0x48
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8005f58:	4b90      	ldr	r3, [pc, #576]	; (800619c <HAL_FDCAN_IRQHandler+0x24c>)
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	079b      	lsls	r3, r3, #30
 8005f5e:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8005f60:	4b8e      	ldr	r3, [pc, #568]	; (800619c <HAL_FDCAN_IRQHandler+0x24c>)
 8005f62:	695b      	ldr	r3, [r3, #20]
 8005f64:	079b      	lsls	r3, r3, #30
 8005f66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f68:	4013      	ands	r3, r2
 8005f6a:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f72:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005f76:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f80:	4013      	ands	r3, r2
 8005f82:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f8a:	f003 030f 	and.w	r3, r3, #15
 8005f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f98:	4013      	ands	r3, r2
 8005f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fa6:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fba:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8005fbe:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fc8:	4013      	ands	r3, r2
 8005fca:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fd2:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8005fd6:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d011      	beq.n	8006016 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00a      	beq.n	8006016 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006008:	651a      	str	r2, [r3, #80]	; 0x50
 800600a:	4b64      	ldr	r3, [pc, #400]	; (800619c <HAL_FDCAN_IRQHandler+0x24c>)
 800600c:	2200      	movs	r2, #0
 800600e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 fa5a 	bl	80064ca <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800601c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006020:	2b00      	cmp	r3, #0
 8006022:	d01e      	beq.n	8006062 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800602a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800602e:	2b00      	cmp	r3, #0
 8006030:	d017      	beq.n	8006062 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800603a:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006044:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006046:	4013      	ands	r3, r2
 8006048:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006052:	651a      	str	r2, [r3, #80]	; 0x50
 8006054:	4b51      	ldr	r3, [pc, #324]	; (800619c <HAL_FDCAN_IRQHandler+0x24c>)
 8006056:	2200      	movs	r2, #0
 8006058:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800605a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 fa0b 	bl	8006478 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8006062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00d      	beq.n	8006084 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800606e:	4b4c      	ldr	r3, [pc, #304]	; (80061a0 <HAL_FDCAN_IRQHandler+0x250>)
 8006070:	400b      	ands	r3, r1
 8006072:	6513      	str	r3, [r2, #80]	; 0x50
 8006074:	4a49      	ldr	r2, [pc, #292]	; (800619c <HAL_FDCAN_IRQHandler+0x24c>)
 8006076:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006078:	0f9b      	lsrs	r3, r3, #30
 800607a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 800607c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f9c4 	bl	800640c <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8006084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00d      	beq.n	80060a6 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006090:	4b43      	ldr	r3, [pc, #268]	; (80061a0 <HAL_FDCAN_IRQHandler+0x250>)
 8006092:	400b      	ands	r3, r1
 8006094:	6513      	str	r3, [r2, #80]	; 0x50
 8006096:	4a41      	ldr	r2, [pc, #260]	; (800619c <HAL_FDCAN_IRQHandler+0x24c>)
 8006098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800609a:	0f9b      	lsrs	r3, r3, #30
 800609c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800609e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 f9be 	bl	8006422 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80060a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00d      	beq.n	80060c8 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060b2:	4b3b      	ldr	r3, [pc, #236]	; (80061a0 <HAL_FDCAN_IRQHandler+0x250>)
 80060b4:	400b      	ands	r3, r1
 80060b6:	6513      	str	r3, [r2, #80]	; 0x50
 80060b8:	4a38      	ldr	r2, [pc, #224]	; (800619c <HAL_FDCAN_IRQHandler+0x24c>)
 80060ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060bc:	0f9b      	lsrs	r3, r3, #30
 80060be:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80060c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f7fa fb22 	bl	800070c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80060c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00d      	beq.n	80060ea <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060d4:	4b32      	ldr	r3, [pc, #200]	; (80061a0 <HAL_FDCAN_IRQHandler+0x250>)
 80060d6:	400b      	ands	r3, r1
 80060d8:	6513      	str	r3, [r2, #80]	; 0x50
 80060da:	4a30      	ldr	r2, [pc, #192]	; (800619c <HAL_FDCAN_IRQHandler+0x24c>)
 80060dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060de:	0f9b      	lsrs	r3, r3, #30
 80060e0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80060e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 f9a7 	bl	8006438 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d011      	beq.n	800611c <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00a      	beq.n	800611c <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800610e:	651a      	str	r2, [r3, #80]	; 0x50
 8006110:	4b22      	ldr	r3, [pc, #136]	; (800619c <HAL_FDCAN_IRQHandler+0x24c>)
 8006112:	2200      	movs	r2, #0
 8006114:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 f999 	bl	800644e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006122:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006126:	2b00      	cmp	r3, #0
 8006128:	d01e      	beq.n	8006168 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006130:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006134:	2b00      	cmp	r3, #0
 8006136:	d017      	beq.n	8006168 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006140:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800614a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800614c:	4013      	ands	r3, r2
 800614e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006158:	651a      	str	r2, [r3, #80]	; 0x50
 800615a:	4b10      	ldr	r3, [pc, #64]	; (800619c <HAL_FDCAN_IRQHandler+0x24c>)
 800615c:	2200      	movs	r2, #0
 800615e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006160:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f97d 	bl	8006462 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800616e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d016      	beq.n	80061a4 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800617c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00f      	beq.n	80061a4 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800618c:	651a      	str	r2, [r3, #80]	; 0x50
 800618e:	4b03      	ldr	r3, [pc, #12]	; (800619c <HAL_FDCAN_IRQHandler+0x24c>)
 8006190:	2200      	movs	r2, #0
 8006192:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 f97a 	bl	800648e <HAL_FDCAN_RxBufferNewMessageCallback>
 800619a:	e003      	b.n	80061a4 <HAL_FDCAN_IRQHandler+0x254>
 800619c:	4000a800 	.word	0x4000a800
 80061a0:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d011      	beq.n	80061d6 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00a      	beq.n	80061d6 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80061c8:	651a      	str	r2, [r3, #80]	; 0x50
 80061ca:	4b8d      	ldr	r3, [pc, #564]	; (8006400 <HAL_FDCAN_IRQHandler+0x4b0>)
 80061cc:	2200      	movs	r2, #0
 80061ce:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 f966 	bl	80064a2 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d011      	beq.n	8006208 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00a      	beq.n	8006208 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80061fa:	651a      	str	r2, [r3, #80]	; 0x50
 80061fc:	4b80      	ldr	r3, [pc, #512]	; (8006400 <HAL_FDCAN_IRQHandler+0x4b0>)
 80061fe:	2200      	movs	r2, #0
 8006200:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f957 	bl	80064b6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800620e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d016      	beq.n	8006244 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800621c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00f      	beq.n	8006244 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800622c:	651a      	str	r2, [r3, #80]	; 0x50
 800622e:	4b74      	ldr	r3, [pc, #464]	; (8006400 <HAL_FDCAN_IRQHandler+0x4b0>)
 8006230:	2200      	movs	r2, #0
 8006232:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800623a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8006244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00d      	beq.n	8006266 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006250:	4b6c      	ldr	r3, [pc, #432]	; (8006404 <HAL_FDCAN_IRQHandler+0x4b4>)
 8006252:	400b      	ands	r3, r1
 8006254:	6513      	str	r3, [r2, #80]	; 0x50
 8006256:	4a6a      	ldr	r2, [pc, #424]	; (8006400 <HAL_FDCAN_IRQHandler+0x4b0>)
 8006258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625a:	0f9b      	lsrs	r3, r3, #30
 800625c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800625e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 f946 	bl	80064f2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8006266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006268:	2b00      	cmp	r3, #0
 800626a:	d011      	beq.n	8006290 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006272:	4b64      	ldr	r3, [pc, #400]	; (8006404 <HAL_FDCAN_IRQHandler+0x4b4>)
 8006274:	400b      	ands	r3, r1
 8006276:	6513      	str	r3, [r2, #80]	; 0x50
 8006278:	4a61      	ldr	r2, [pc, #388]	; (8006400 <HAL_FDCAN_IRQHandler+0x4b0>)
 800627a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800627c:	0f9b      	lsrs	r3, r3, #30
 800627e:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8006286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006288:	431a      	orrs	r2, r3
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a5c      	ldr	r2, [pc, #368]	; (8006408 <HAL_FDCAN_IRQHandler+0x4b8>)
 8006296:	4293      	cmp	r3, r2
 8006298:	f040 80a6 	bne.w	80063e8 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f003 0303 	and.w	r3, r3, #3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	f000 809e 	beq.w	80063e8 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	6a1b      	ldr	r3, [r3, #32]
 80062b2:	f003 030f 	and.w	r3, r3, #15
 80062b6:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062c0:	4013      	ands	r3, r2
 80062c2:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	6a1b      	ldr	r3, [r3, #32]
 80062ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80062ce:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d6:	6a3a      	ldr	r2, [r7, #32]
 80062d8:	4013      	ands	r3, r2
 80062da:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	6a1b      	ldr	r3, [r3, #32]
 80062e2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80062e6:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ee:	69fa      	ldr	r2, [r7, #28]
 80062f0:	4013      	ands	r3, r2
 80062f2:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	6a1b      	ldr	r3, [r3, #32]
 80062fa:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 80062fe:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006306:	69ba      	ldr	r2, [r7, #24]
 8006308:	4013      	ands	r3, r2
 800630a:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8006316:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	4013      	ands	r3, r2
 8006322:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8006324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006326:	2b00      	cmp	r3, #0
 8006328:	d007      	beq.n	800633a <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006330:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8006332:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 f8e7 	bl	8006508 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 800633a:	6a3b      	ldr	r3, [r7, #32]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d007      	beq.n	8006350 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	6a3a      	ldr	r2, [r7, #32]
 8006346:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8006348:	6a39      	ldr	r1, [r7, #32]
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f8e7 	bl	800651e <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635a:	2b00      	cmp	r3, #0
 800635c:	d01b      	beq.n	8006396 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	6a1b      	ldr	r3, [r3, #32]
 8006364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006368:	2b00      	cmp	r3, #0
 800636a:	d014      	beq.n	8006396 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006372:	0c1b      	lsrs	r3, r3, #16
 8006374:	b29b      	uxth	r3, r3
 8006376:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800637e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006382:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	2240      	movs	r2, #64	; 0x40
 800638a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	6939      	ldr	r1, [r7, #16]
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 f8cf 	bl	8006534 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d007      	beq.n	80063ac <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	69fa      	ldr	r2, [r7, #28]
 80063a2:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80063a4:	69f9      	ldr	r1, [r7, #28]
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f8d0 	bl	800654c <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00b      	beq.n	80063ca <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	69ba      	ldr	r2, [r7, #24]
 80063b8:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	431a      	orrs	r2, r3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00b      	beq.n	80063e8 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	431a      	orrs	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d002      	beq.n	80063f8 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f873 	bl	80064de <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80063f8:	bf00      	nop
 80063fa:	3748      	adds	r7, #72	; 0x48
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	4000a800 	.word	0x4000a800
 8006404:	3fcfffff 	.word	0x3fcfffff
 8006408:	4000a000 	.word	0x4000a000

0800640c <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8006416:	bf00      	nop
 8006418:	370c      	adds	r7, #12
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr

08006422 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8006422:	b480      	push	{r7}
 8006424:	b083      	sub	sp, #12
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
 800642a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8006442:	bf00      	nop
 8006444:	370c      	adds	r7, #12
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr

0800644e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800644e:	b480      	push	{r7}
 8006450:	b083      	sub	sp, #12
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8006456:	bf00      	nop
 8006458:	370c      	adds	r7, #12
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr

08006462 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006462:	b480      	push	{r7}
 8006464:	b083      	sub	sp, #12
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
 800646a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800646c:	bf00      	nop
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8006482:	bf00      	nop
 8006484:	370c      	adds	r7, #12
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800648e:	b480      	push	{r7}
 8006490:	b083      	sub	sp, #12
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8006496:	bf00      	nop
 8006498:	370c      	adds	r7, #12
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr

080064a2 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80064a2:	b480      	push	{r7}
 80064a4:	b083      	sub	sp, #12
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80064aa:	bf00      	nop
 80064ac:	370c      	adds	r7, #12
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr

080064b6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80064b6:	b480      	push	{r7}
 80064b8:	b083      	sub	sp, #12
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80064be:	bf00      	nop
 80064c0:	370c      	adds	r7, #12
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr

080064ca <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80064ca:	b480      	push	{r7}
 80064cc:	b083      	sub	sp, #12
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80064d2:	bf00      	nop
 80064d4:	370c      	adds	r7, #12
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr

080064de <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80064de:	b480      	push	{r7}
 80064e0:	b083      	sub	sp, #12
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80064e6:	bf00      	nop
 80064e8:	370c      	adds	r7, #12
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80064f2:	b480      	push	{r7}
 80064f4:	b083      	sub	sp, #12
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
 80064fa:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80064fc:	bf00      	nop
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8006512:	bf00      	nop
 8006514:	370c      	adds	r7, #12
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr

0800651e <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800651e:	b480      	push	{r7}
 8006520:	b083      	sub	sp, #12
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
 8006526:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8006528:	bf00      	nop
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8006540:	bf00      	nop
 8006542:	3714      	adds	r7, #20
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8006556:	bf00      	nop
 8006558:	370c      	adds	r7, #12
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
	...

08006564 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006564:	b480      	push	{r7}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006570:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800657a:	4ba7      	ldr	r3, [pc, #668]	; (8006818 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800657c:	4013      	ands	r3, r2
 800657e:	68ba      	ldr	r2, [r7, #8]
 8006580:	0091      	lsls	r1, r2, #2
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	6812      	ldr	r2, [r2, #0]
 8006586:	430b      	orrs	r3, r1
 8006588:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006594:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659c:	041a      	lsls	r2, r3, #16
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	430a      	orrs	r2, r1
 80065a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ac:	68ba      	ldr	r2, [r7, #8]
 80065ae:	4413      	add	r3, r2
 80065b0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80065ba:	4b97      	ldr	r3, [pc, #604]	; (8006818 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80065bc:	4013      	ands	r3, r2
 80065be:	68ba      	ldr	r2, [r7, #8]
 80065c0:	0091      	lsls	r1, r2, #2
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	6812      	ldr	r2, [r2, #0]
 80065c6:	430b      	orrs	r3, r1
 80065c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065d4:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065dc:	041a      	lsls	r2, r3, #16
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	430a      	orrs	r2, r1
 80065e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ec:	005b      	lsls	r3, r3, #1
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	4413      	add	r3, r2
 80065f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80065fc:	4b86      	ldr	r3, [pc, #536]	; (8006818 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80065fe:	4013      	ands	r3, r2
 8006600:	68ba      	ldr	r2, [r7, #8]
 8006602:	0091      	lsls	r1, r2, #2
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	6812      	ldr	r2, [r2, #0]
 8006608:	430b      	orrs	r3, r1
 800660a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006616:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661e:	041a      	lsls	r2, r3, #16
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	430a      	orrs	r2, r1
 8006626:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006632:	fb02 f303 	mul.w	r3, r2, r3
 8006636:	68ba      	ldr	r2, [r7, #8]
 8006638:	4413      	add	r3, r2
 800663a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006644:	4b74      	ldr	r3, [pc, #464]	; (8006818 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006646:	4013      	ands	r3, r2
 8006648:	68ba      	ldr	r2, [r7, #8]
 800664a:	0091      	lsls	r1, r2, #2
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	6812      	ldr	r2, [r2, #0]
 8006650:	430b      	orrs	r3, r1
 8006652:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800665e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006666:	041a      	lsls	r2, r3, #16
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	430a      	orrs	r2, r1
 800666e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800667a:	fb02 f303 	mul.w	r3, r2, r3
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	4413      	add	r3, r2
 8006682:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800668c:	4b62      	ldr	r3, [pc, #392]	; (8006818 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800668e:	4013      	ands	r3, r2
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	0091      	lsls	r1, r2, #2
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	6812      	ldr	r2, [r2, #0]
 8006698:	430b      	orrs	r3, r1
 800669a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80066a6:	fb02 f303 	mul.w	r3, r2, r3
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	4413      	add	r3, r2
 80066ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80066b8:	4b57      	ldr	r3, [pc, #348]	; (8006818 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80066ba:	4013      	ands	r3, r2
 80066bc:	68ba      	ldr	r2, [r7, #8]
 80066be:	0091      	lsls	r1, r2, #2
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	6812      	ldr	r2, [r2, #0]
 80066c4:	430b      	orrs	r3, r1
 80066c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80066d2:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066da:	041a      	lsls	r2, r3, #16
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	430a      	orrs	r2, r1
 80066e2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ea:	005b      	lsls	r3, r3, #1
 80066ec:	68ba      	ldr	r2, [r7, #8]
 80066ee:	4413      	add	r3, r2
 80066f0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80066fa:	4b47      	ldr	r3, [pc, #284]	; (8006818 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80066fc:	4013      	ands	r3, r2
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	0091      	lsls	r1, r2, #2
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	6812      	ldr	r2, [r2, #0]
 8006706:	430b      	orrs	r3, r1
 8006708:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006714:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800671c:	041a      	lsls	r2, r3, #16
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	430a      	orrs	r2, r1
 8006724:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006730:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006738:	061a      	lsls	r2, r3, #24
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	430a      	orrs	r2, r1
 8006740:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006748:	4b34      	ldr	r3, [pc, #208]	; (800681c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800674a:	4413      	add	r3, r2
 800674c:	009a      	lsls	r2, r3, #2
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	441a      	add	r2, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800676a:	00db      	lsls	r3, r3, #3
 800676c:	441a      	add	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677a:	6879      	ldr	r1, [r7, #4]
 800677c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800677e:	fb01 f303 	mul.w	r3, r1, r3
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	441a      	add	r2, r3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006792:	6879      	ldr	r1, [r7, #4]
 8006794:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8006796:	fb01 f303 	mul.w	r3, r1, r3
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	441a      	add	r2, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067aa:	6879      	ldr	r1, [r7, #4]
 80067ac:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80067ae:	fb01 f303 	mul.w	r3, r1, r3
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	441a      	add	r2, r3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067c6:	00db      	lsls	r3, r3, #3
 80067c8:	441a      	add	r2, r3
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067da:	6879      	ldr	r1, [r7, #4]
 80067dc:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80067de:	fb01 f303 	mul.w	r3, r1, r3
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	441a      	add	r2, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067f6:	6879      	ldr	r1, [r7, #4]
 80067f8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80067fa:	fb01 f303 	mul.w	r3, r1, r3
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	441a      	add	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800680e:	4a04      	ldr	r2, [pc, #16]	; (8006820 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d915      	bls.n	8006840 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8006814:	e006      	b.n	8006824 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8006816:	bf00      	nop
 8006818:	ffff0003 	.word	0xffff0003
 800681c:	10002b00 	.word	0x10002b00
 8006820:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800682a:	f043 0220 	orr.w	r2, r3, #32
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2203      	movs	r2, #3
 8006838:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e010      	b.n	8006862 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006844:	60fb      	str	r3, [r7, #12]
 8006846:	e005      	b.n	8006854 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2200      	movs	r2, #0
 800684c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	3304      	adds	r3, #4
 8006852:	60fb      	str	r3, [r7, #12]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	429a      	cmp	r2, r3
 800685e:	d3f3      	bcc.n	8006848 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3714      	adds	r7, #20
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop

08006870 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006870:	b480      	push	{r7}
 8006872:	b089      	sub	sp, #36	; 0x24
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800687a:	2300      	movs	r3, #0
 800687c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800687e:	4b89      	ldr	r3, [pc, #548]	; (8006aa4 <HAL_GPIO_Init+0x234>)
 8006880:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006882:	e194      	b.n	8006bae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	2101      	movs	r1, #1
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	fa01 f303 	lsl.w	r3, r1, r3
 8006890:	4013      	ands	r3, r2
 8006892:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	2b00      	cmp	r3, #0
 8006898:	f000 8186 	beq.w	8006ba8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d00b      	beq.n	80068bc <HAL_GPIO_Init+0x4c>
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d007      	beq.n	80068bc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80068b0:	2b11      	cmp	r3, #17
 80068b2:	d003      	beq.n	80068bc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	2b12      	cmp	r3, #18
 80068ba:	d130      	bne.n	800691e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	005b      	lsls	r3, r3, #1
 80068c6:	2203      	movs	r2, #3
 80068c8:	fa02 f303 	lsl.w	r3, r2, r3
 80068cc:	43db      	mvns	r3, r3
 80068ce:	69ba      	ldr	r2, [r7, #24]
 80068d0:	4013      	ands	r3, r2
 80068d2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	68da      	ldr	r2, [r3, #12]
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	005b      	lsls	r3, r3, #1
 80068dc:	fa02 f303 	lsl.w	r3, r2, r3
 80068e0:	69ba      	ldr	r2, [r7, #24]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	69ba      	ldr	r2, [r7, #24]
 80068ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80068f2:	2201      	movs	r2, #1
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	fa02 f303 	lsl.w	r3, r2, r3
 80068fa:	43db      	mvns	r3, r3
 80068fc:	69ba      	ldr	r2, [r7, #24]
 80068fe:	4013      	ands	r3, r2
 8006900:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	091b      	lsrs	r3, r3, #4
 8006908:	f003 0201 	and.w	r2, r3, #1
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	fa02 f303 	lsl.w	r3, r2, r3
 8006912:	69ba      	ldr	r2, [r7, #24]
 8006914:	4313      	orrs	r3, r2
 8006916:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	69ba      	ldr	r2, [r7, #24]
 800691c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	005b      	lsls	r3, r3, #1
 8006928:	2203      	movs	r2, #3
 800692a:	fa02 f303 	lsl.w	r3, r2, r3
 800692e:	43db      	mvns	r3, r3
 8006930:	69ba      	ldr	r2, [r7, #24]
 8006932:	4013      	ands	r3, r2
 8006934:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	689a      	ldr	r2, [r3, #8]
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	005b      	lsls	r3, r3, #1
 800693e:	fa02 f303 	lsl.w	r3, r2, r3
 8006942:	69ba      	ldr	r2, [r7, #24]
 8006944:	4313      	orrs	r3, r2
 8006946:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	69ba      	ldr	r2, [r7, #24]
 800694c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	2b02      	cmp	r3, #2
 8006954:	d003      	beq.n	800695e <HAL_GPIO_Init+0xee>
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	2b12      	cmp	r3, #18
 800695c:	d123      	bne.n	80069a6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	08da      	lsrs	r2, r3, #3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	3208      	adds	r2, #8
 8006966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800696a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	f003 0307 	and.w	r3, r3, #7
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	220f      	movs	r2, #15
 8006976:	fa02 f303 	lsl.w	r3, r2, r3
 800697a:	43db      	mvns	r3, r3
 800697c:	69ba      	ldr	r2, [r7, #24]
 800697e:	4013      	ands	r3, r2
 8006980:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	691a      	ldr	r2, [r3, #16]
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	f003 0307 	and.w	r3, r3, #7
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	fa02 f303 	lsl.w	r3, r2, r3
 8006992:	69ba      	ldr	r2, [r7, #24]
 8006994:	4313      	orrs	r3, r2
 8006996:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	08da      	lsrs	r2, r3, #3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	3208      	adds	r2, #8
 80069a0:	69b9      	ldr	r1, [r7, #24]
 80069a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	005b      	lsls	r3, r3, #1
 80069b0:	2203      	movs	r2, #3
 80069b2:	fa02 f303 	lsl.w	r3, r2, r3
 80069b6:	43db      	mvns	r3, r3
 80069b8:	69ba      	ldr	r2, [r7, #24]
 80069ba:	4013      	ands	r3, r2
 80069bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	f003 0203 	and.w	r2, r3, #3
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	005b      	lsls	r3, r3, #1
 80069ca:	fa02 f303 	lsl.w	r3, r2, r3
 80069ce:	69ba      	ldr	r2, [r7, #24]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	69ba      	ldr	r2, [r7, #24]
 80069d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f000 80e0 	beq.w	8006ba8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80069e8:	4b2f      	ldr	r3, [pc, #188]	; (8006aa8 <HAL_GPIO_Init+0x238>)
 80069ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80069ee:	4a2e      	ldr	r2, [pc, #184]	; (8006aa8 <HAL_GPIO_Init+0x238>)
 80069f0:	f043 0302 	orr.w	r3, r3, #2
 80069f4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80069f8:	4b2b      	ldr	r3, [pc, #172]	; (8006aa8 <HAL_GPIO_Init+0x238>)
 80069fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80069fe:	f003 0302 	and.w	r3, r3, #2
 8006a02:	60fb      	str	r3, [r7, #12]
 8006a04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006a06:	4a29      	ldr	r2, [pc, #164]	; (8006aac <HAL_GPIO_Init+0x23c>)
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	089b      	lsrs	r3, r3, #2
 8006a0c:	3302      	adds	r3, #2
 8006a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	f003 0303 	and.w	r3, r3, #3
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	220f      	movs	r2, #15
 8006a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a22:	43db      	mvns	r3, r3
 8006a24:	69ba      	ldr	r2, [r7, #24]
 8006a26:	4013      	ands	r3, r2
 8006a28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a20      	ldr	r2, [pc, #128]	; (8006ab0 <HAL_GPIO_Init+0x240>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d052      	beq.n	8006ad8 <HAL_GPIO_Init+0x268>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a1f      	ldr	r2, [pc, #124]	; (8006ab4 <HAL_GPIO_Init+0x244>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d031      	beq.n	8006a9e <HAL_GPIO_Init+0x22e>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a1e      	ldr	r2, [pc, #120]	; (8006ab8 <HAL_GPIO_Init+0x248>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d02b      	beq.n	8006a9a <HAL_GPIO_Init+0x22a>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4a1d      	ldr	r2, [pc, #116]	; (8006abc <HAL_GPIO_Init+0x24c>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d025      	beq.n	8006a96 <HAL_GPIO_Init+0x226>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a1c      	ldr	r2, [pc, #112]	; (8006ac0 <HAL_GPIO_Init+0x250>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d01f      	beq.n	8006a92 <HAL_GPIO_Init+0x222>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a1b      	ldr	r2, [pc, #108]	; (8006ac4 <HAL_GPIO_Init+0x254>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d019      	beq.n	8006a8e <HAL_GPIO_Init+0x21e>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a1a      	ldr	r2, [pc, #104]	; (8006ac8 <HAL_GPIO_Init+0x258>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d013      	beq.n	8006a8a <HAL_GPIO_Init+0x21a>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4a19      	ldr	r2, [pc, #100]	; (8006acc <HAL_GPIO_Init+0x25c>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d00d      	beq.n	8006a86 <HAL_GPIO_Init+0x216>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4a18      	ldr	r2, [pc, #96]	; (8006ad0 <HAL_GPIO_Init+0x260>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d007      	beq.n	8006a82 <HAL_GPIO_Init+0x212>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a17      	ldr	r2, [pc, #92]	; (8006ad4 <HAL_GPIO_Init+0x264>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d101      	bne.n	8006a7e <HAL_GPIO_Init+0x20e>
 8006a7a:	2309      	movs	r3, #9
 8006a7c:	e02d      	b.n	8006ada <HAL_GPIO_Init+0x26a>
 8006a7e:	230a      	movs	r3, #10
 8006a80:	e02b      	b.n	8006ada <HAL_GPIO_Init+0x26a>
 8006a82:	2308      	movs	r3, #8
 8006a84:	e029      	b.n	8006ada <HAL_GPIO_Init+0x26a>
 8006a86:	2307      	movs	r3, #7
 8006a88:	e027      	b.n	8006ada <HAL_GPIO_Init+0x26a>
 8006a8a:	2306      	movs	r3, #6
 8006a8c:	e025      	b.n	8006ada <HAL_GPIO_Init+0x26a>
 8006a8e:	2305      	movs	r3, #5
 8006a90:	e023      	b.n	8006ada <HAL_GPIO_Init+0x26a>
 8006a92:	2304      	movs	r3, #4
 8006a94:	e021      	b.n	8006ada <HAL_GPIO_Init+0x26a>
 8006a96:	2303      	movs	r3, #3
 8006a98:	e01f      	b.n	8006ada <HAL_GPIO_Init+0x26a>
 8006a9a:	2302      	movs	r3, #2
 8006a9c:	e01d      	b.n	8006ada <HAL_GPIO_Init+0x26a>
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e01b      	b.n	8006ada <HAL_GPIO_Init+0x26a>
 8006aa2:	bf00      	nop
 8006aa4:	58000080 	.word	0x58000080
 8006aa8:	58024400 	.word	0x58024400
 8006aac:	58000400 	.word	0x58000400
 8006ab0:	58020000 	.word	0x58020000
 8006ab4:	58020400 	.word	0x58020400
 8006ab8:	58020800 	.word	0x58020800
 8006abc:	58020c00 	.word	0x58020c00
 8006ac0:	58021000 	.word	0x58021000
 8006ac4:	58021400 	.word	0x58021400
 8006ac8:	58021800 	.word	0x58021800
 8006acc:	58021c00 	.word	0x58021c00
 8006ad0:	58022000 	.word	0x58022000
 8006ad4:	58022400 	.word	0x58022400
 8006ad8:	2300      	movs	r3, #0
 8006ada:	69fa      	ldr	r2, [r7, #28]
 8006adc:	f002 0203 	and.w	r2, r2, #3
 8006ae0:	0092      	lsls	r2, r2, #2
 8006ae2:	4093      	lsls	r3, r2
 8006ae4:	69ba      	ldr	r2, [r7, #24]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006aea:	4938      	ldr	r1, [pc, #224]	; (8006bcc <HAL_GPIO_Init+0x35c>)
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	089b      	lsrs	r3, r3, #2
 8006af0:	3302      	adds	r3, #2
 8006af2:	69ba      	ldr	r2, [r7, #24]
 8006af4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	43db      	mvns	r3, r3
 8006b02:	69ba      	ldr	r2, [r7, #24]
 8006b04:	4013      	ands	r3, r2
 8006b06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d003      	beq.n	8006b1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006b14:	69ba      	ldr	r2, [r7, #24]
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	69ba      	ldr	r2, [r7, #24]
 8006b20:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	43db      	mvns	r3, r3
 8006b2c:	69ba      	ldr	r2, [r7, #24]
 8006b2e:	4013      	ands	r3, r2
 8006b30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d003      	beq.n	8006b46 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006b3e:	69ba      	ldr	r2, [r7, #24]
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	69ba      	ldr	r2, [r7, #24]
 8006b4a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	43db      	mvns	r3, r3
 8006b58:	69ba      	ldr	r2, [r7, #24]
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d003      	beq.n	8006b72 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8006b6a:	69ba      	ldr	r2, [r7, #24]
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006b72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006b7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	43db      	mvns	r3, r3
 8006b86:	69ba      	ldr	r2, [r7, #24]
 8006b88:	4013      	ands	r3, r2
 8006b8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d003      	beq.n	8006ba0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8006b98:	69ba      	ldr	r2, [r7, #24]
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006ba0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	3301      	adds	r3, #1
 8006bac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f47f ae63 	bne.w	8006884 <HAL_GPIO_Init+0x14>
  }
}
 8006bbe:	bf00      	nop
 8006bc0:	3724      	adds	r7, #36	; 0x24
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	58000400 	.word	0x58000400

08006bd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	460b      	mov	r3, r1
 8006bda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	691a      	ldr	r2, [r3, #16]
 8006be0:	887b      	ldrh	r3, [r7, #2]
 8006be2:	4013      	ands	r3, r2
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d002      	beq.n	8006bee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006be8:	2301      	movs	r3, #1
 8006bea:	73fb      	strb	r3, [r7, #15]
 8006bec:	e001      	b.n	8006bf2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3714      	adds	r7, #20
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	460b      	mov	r3, r1
 8006c0a:	807b      	strh	r3, [r7, #2]
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006c10:	787b      	ldrb	r3, [r7, #1]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d003      	beq.n	8006c1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006c16:	887a      	ldrh	r2, [r7, #2]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006c1c:	e003      	b.n	8006c26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006c1e:	887b      	ldrh	r3, [r7, #2]
 8006c20:	041a      	lsls	r2, r3, #16
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	619a      	str	r2, [r3, #24]
}
 8006c26:	bf00      	nop
 8006c28:	370c      	adds	r7, #12
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr

08006c32 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006c32:	b480      	push	{r7}
 8006c34:	b083      	sub	sp, #12
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	695a      	ldr	r2, [r3, #20]
 8006c42:	887b      	ldrh	r3, [r7, #2]
 8006c44:	401a      	ands	r2, r3
 8006c46:	887b      	ldrh	r3, [r7, #2]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d104      	bne.n	8006c56 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006c4c:	887b      	ldrh	r3, [r7, #2]
 8006c4e:	041a      	lsls	r2, r3, #16
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8006c54:	e002      	b.n	8006c5c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8006c56:	887a      	ldrh	r2, [r7, #2]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	619a      	str	r2, [r3, #24]
}
 8006c5c:	bf00      	nop
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	4603      	mov	r3, r0
 8006c70:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c76:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006c7a:	88fb      	ldrh	r3, [r7, #6]
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d008      	beq.n	8006c94 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006c82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c86:	88fb      	ldrh	r3, [r7, #6]
 8006c88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006c8c:	88fb      	ldrh	r3, [r7, #6]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7fb fd8c 	bl	80027ac <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006c94:	bf00      	nop
 8006c96:	3708      	adds	r7, #8
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ca4:	4b0d      	ldr	r3, [pc, #52]	; (8006cdc <HAL_I2CEx_EnableFastModePlus+0x40>)
 8006ca6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006caa:	4a0c      	ldr	r2, [pc, #48]	; (8006cdc <HAL_I2CEx_EnableFastModePlus+0x40>)
 8006cac:	f043 0302 	orr.w	r3, r3, #2
 8006cb0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006cb4:	4b09      	ldr	r3, [pc, #36]	; (8006cdc <HAL_I2CEx_EnableFastModePlus+0x40>)
 8006cb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006cba:	f003 0302 	and.w	r3, r3, #2
 8006cbe:	60fb      	str	r3, [r7, #12]
 8006cc0:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8006cc2:	4b07      	ldr	r3, [pc, #28]	; (8006ce0 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8006cc4:	685a      	ldr	r2, [r3, #4]
 8006cc6:	4906      	ldr	r1, [pc, #24]	; (8006ce0 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	604b      	str	r3, [r1, #4]
}
 8006cce:	bf00      	nop
 8006cd0:	3714      	adds	r7, #20
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	58024400 	.word	0x58024400
 8006ce0:	58000400 	.word	0x58000400

08006ce4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ce6:	b08f      	sub	sp, #60	; 0x3c
 8006ce8:	af0a      	add	r7, sp, #40	; 0x28
 8006cea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d101      	bne.n	8006cf6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e116      	b.n	8006f24 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d106      	bne.n	8006d16 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f010 fd89 	bl	8017828 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2203      	movs	r2, #3
 8006d1a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d102      	bne.n	8006d30 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4618      	mov	r0, r3
 8006d36:	f009 fd8e 	bl	8010856 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	603b      	str	r3, [r7, #0]
 8006d40:	687e      	ldr	r6, [r7, #4]
 8006d42:	466d      	mov	r5, sp
 8006d44:	f106 0410 	add.w	r4, r6, #16
 8006d48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006d4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006d4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006d4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006d50:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006d54:	e885 0003 	stmia.w	r5, {r0, r1}
 8006d58:	1d33      	adds	r3, r6, #4
 8006d5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d5c:	6838      	ldr	r0, [r7, #0]
 8006d5e:	f009 fc65 	bl	801062c <USB_CoreInit>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d005      	beq.n	8006d74 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2202      	movs	r2, #2
 8006d6c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	e0d7      	b.n	8006f24 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2100      	movs	r1, #0
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f009 fd7c 	bl	8010878 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d80:	2300      	movs	r3, #0
 8006d82:	73fb      	strb	r3, [r7, #15]
 8006d84:	e04a      	b.n	8006e1c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006d86:	7bfa      	ldrb	r2, [r7, #15]
 8006d88:	6879      	ldr	r1, [r7, #4]
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	00db      	lsls	r3, r3, #3
 8006d8e:	1a9b      	subs	r3, r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	440b      	add	r3, r1
 8006d94:	333d      	adds	r3, #61	; 0x3d
 8006d96:	2201      	movs	r2, #1
 8006d98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006d9a:	7bfa      	ldrb	r2, [r7, #15]
 8006d9c:	6879      	ldr	r1, [r7, #4]
 8006d9e:	4613      	mov	r3, r2
 8006da0:	00db      	lsls	r3, r3, #3
 8006da2:	1a9b      	subs	r3, r3, r2
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	440b      	add	r3, r1
 8006da8:	333c      	adds	r3, #60	; 0x3c
 8006daa:	7bfa      	ldrb	r2, [r7, #15]
 8006dac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006dae:	7bfa      	ldrb	r2, [r7, #15]
 8006db0:	7bfb      	ldrb	r3, [r7, #15]
 8006db2:	b298      	uxth	r0, r3
 8006db4:	6879      	ldr	r1, [r7, #4]
 8006db6:	4613      	mov	r3, r2
 8006db8:	00db      	lsls	r3, r3, #3
 8006dba:	1a9b      	subs	r3, r3, r2
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	440b      	add	r3, r1
 8006dc0:	3342      	adds	r3, #66	; 0x42
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006dc6:	7bfa      	ldrb	r2, [r7, #15]
 8006dc8:	6879      	ldr	r1, [r7, #4]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	00db      	lsls	r3, r3, #3
 8006dce:	1a9b      	subs	r3, r3, r2
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	440b      	add	r3, r1
 8006dd4:	333f      	adds	r3, #63	; 0x3f
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006dda:	7bfa      	ldrb	r2, [r7, #15]
 8006ddc:	6879      	ldr	r1, [r7, #4]
 8006dde:	4613      	mov	r3, r2
 8006de0:	00db      	lsls	r3, r3, #3
 8006de2:	1a9b      	subs	r3, r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	440b      	add	r3, r1
 8006de8:	3344      	adds	r3, #68	; 0x44
 8006dea:	2200      	movs	r2, #0
 8006dec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006dee:	7bfa      	ldrb	r2, [r7, #15]
 8006df0:	6879      	ldr	r1, [r7, #4]
 8006df2:	4613      	mov	r3, r2
 8006df4:	00db      	lsls	r3, r3, #3
 8006df6:	1a9b      	subs	r3, r3, r2
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	440b      	add	r3, r1
 8006dfc:	3348      	adds	r3, #72	; 0x48
 8006dfe:	2200      	movs	r2, #0
 8006e00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006e02:	7bfa      	ldrb	r2, [r7, #15]
 8006e04:	6879      	ldr	r1, [r7, #4]
 8006e06:	4613      	mov	r3, r2
 8006e08:	00db      	lsls	r3, r3, #3
 8006e0a:	1a9b      	subs	r3, r3, r2
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	440b      	add	r3, r1
 8006e10:	3350      	adds	r3, #80	; 0x50
 8006e12:	2200      	movs	r2, #0
 8006e14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e16:	7bfb      	ldrb	r3, [r7, #15]
 8006e18:	3301      	adds	r3, #1
 8006e1a:	73fb      	strb	r3, [r7, #15]
 8006e1c:	7bfa      	ldrb	r2, [r7, #15]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d3af      	bcc.n	8006d86 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e26:	2300      	movs	r3, #0
 8006e28:	73fb      	strb	r3, [r7, #15]
 8006e2a:	e044      	b.n	8006eb6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006e2c:	7bfa      	ldrb	r2, [r7, #15]
 8006e2e:	6879      	ldr	r1, [r7, #4]
 8006e30:	4613      	mov	r3, r2
 8006e32:	00db      	lsls	r3, r3, #3
 8006e34:	1a9b      	subs	r3, r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	440b      	add	r3, r1
 8006e3a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006e3e:	2200      	movs	r2, #0
 8006e40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006e42:	7bfa      	ldrb	r2, [r7, #15]
 8006e44:	6879      	ldr	r1, [r7, #4]
 8006e46:	4613      	mov	r3, r2
 8006e48:	00db      	lsls	r3, r3, #3
 8006e4a:	1a9b      	subs	r3, r3, r2
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	440b      	add	r3, r1
 8006e50:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006e54:	7bfa      	ldrb	r2, [r7, #15]
 8006e56:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006e58:	7bfa      	ldrb	r2, [r7, #15]
 8006e5a:	6879      	ldr	r1, [r7, #4]
 8006e5c:	4613      	mov	r3, r2
 8006e5e:	00db      	lsls	r3, r3, #3
 8006e60:	1a9b      	subs	r3, r3, r2
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	440b      	add	r3, r1
 8006e66:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006e6e:	7bfa      	ldrb	r2, [r7, #15]
 8006e70:	6879      	ldr	r1, [r7, #4]
 8006e72:	4613      	mov	r3, r2
 8006e74:	00db      	lsls	r3, r3, #3
 8006e76:	1a9b      	subs	r3, r3, r2
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	440b      	add	r3, r1
 8006e7c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006e80:	2200      	movs	r2, #0
 8006e82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006e84:	7bfa      	ldrb	r2, [r7, #15]
 8006e86:	6879      	ldr	r1, [r7, #4]
 8006e88:	4613      	mov	r3, r2
 8006e8a:	00db      	lsls	r3, r3, #3
 8006e8c:	1a9b      	subs	r3, r3, r2
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	440b      	add	r3, r1
 8006e92:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006e96:	2200      	movs	r2, #0
 8006e98:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006e9a:	7bfa      	ldrb	r2, [r7, #15]
 8006e9c:	6879      	ldr	r1, [r7, #4]
 8006e9e:	4613      	mov	r3, r2
 8006ea0:	00db      	lsls	r3, r3, #3
 8006ea2:	1a9b      	subs	r3, r3, r2
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	440b      	add	r3, r1
 8006ea8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006eac:	2200      	movs	r2, #0
 8006eae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006eb0:	7bfb      	ldrb	r3, [r7, #15]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	73fb      	strb	r3, [r7, #15]
 8006eb6:	7bfa      	ldrb	r2, [r7, #15]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d3b5      	bcc.n	8006e2c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	603b      	str	r3, [r7, #0]
 8006ec6:	687e      	ldr	r6, [r7, #4]
 8006ec8:	466d      	mov	r5, sp
 8006eca:	f106 0410 	add.w	r4, r6, #16
 8006ece:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ed0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006ed2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ed4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006ed6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006eda:	e885 0003 	stmia.w	r5, {r0, r1}
 8006ede:	1d33      	adds	r3, r6, #4
 8006ee0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006ee2:	6838      	ldr	r0, [r7, #0]
 8006ee4:	f009 fcf2 	bl	80108cc <USB_DevInit>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d005      	beq.n	8006efa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2202      	movs	r2, #2
 8006ef2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e014      	b.n	8006f24 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2201      	movs	r2, #1
 8006f06:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d102      	bne.n	8006f18 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f001 f8be 	bl	8008094 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f00a fd31 	bl	8011984 <USB_DevDisconnect>

  return HAL_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3714      	adds	r7, #20
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006f2c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d101      	bne.n	8006f48 <HAL_PCD_Start+0x1c>
 8006f44:	2302      	movs	r3, #2
 8006f46:	e020      	b.n	8006f8a <HAL_PCD_Start+0x5e>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d109      	bne.n	8006f6c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d005      	beq.n	8006f6c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f64:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4618      	mov	r0, r3
 8006f72:	f00a fcef 	bl	8011954 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f009 fc5a 	bl	8010834 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3710      	adds	r7, #16
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}

08006f92 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006f92:	b590      	push	{r4, r7, lr}
 8006f94:	b08d      	sub	sp, #52	; 0x34
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fa0:	6a3b      	ldr	r3, [r7, #32]
 8006fa2:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f00a fd96 	bl	8011ada <USB_GetMode>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	f040 83ca 	bne.w	800774a <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f00a fcfa 	bl	80119b4 <USB_ReadInterrupts>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f000 83c0 	beq.w	8007748 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f00a fcf1 	bl	80119b4 <USB_ReadInterrupts>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	f003 0302 	and.w	r3, r3, #2
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d107      	bne.n	8006fec <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	695a      	ldr	r2, [r3, #20]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f002 0202 	and.w	r2, r2, #2
 8006fea:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f00a fcdf 	bl	80119b4 <USB_ReadInterrupts>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	f003 0310 	and.w	r3, r3, #16
 8006ffc:	2b10      	cmp	r3, #16
 8006ffe:	d161      	bne.n	80070c4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	699a      	ldr	r2, [r3, #24]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f022 0210 	bic.w	r2, r2, #16
 800700e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8007010:	6a3b      	ldr	r3, [r7, #32]
 8007012:	6a1b      	ldr	r3, [r3, #32]
 8007014:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	f003 020f 	and.w	r2, r3, #15
 800701c:	4613      	mov	r3, r2
 800701e:	00db      	lsls	r3, r3, #3
 8007020:	1a9b      	subs	r3, r3, r2
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	4413      	add	r3, r2
 800702c:	3304      	adds	r3, #4
 800702e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	0c5b      	lsrs	r3, r3, #17
 8007034:	f003 030f 	and.w	r3, r3, #15
 8007038:	2b02      	cmp	r3, #2
 800703a:	d124      	bne.n	8007086 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800703c:	69ba      	ldr	r2, [r7, #24]
 800703e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007042:	4013      	ands	r3, r2
 8007044:	2b00      	cmp	r3, #0
 8007046:	d035      	beq.n	80070b4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	091b      	lsrs	r3, r3, #4
 8007050:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007052:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007056:	b29b      	uxth	r3, r3
 8007058:	461a      	mov	r2, r3
 800705a:	6a38      	ldr	r0, [r7, #32]
 800705c:	f00a fb57 	bl	801170e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	68da      	ldr	r2, [r3, #12]
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	091b      	lsrs	r3, r3, #4
 8007068:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800706c:	441a      	add	r2, r3
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	699a      	ldr	r2, [r3, #24]
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	091b      	lsrs	r3, r3, #4
 800707a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800707e:	441a      	add	r2, r3
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	619a      	str	r2, [r3, #24]
 8007084:	e016      	b.n	80070b4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	0c5b      	lsrs	r3, r3, #17
 800708a:	f003 030f 	and.w	r3, r3, #15
 800708e:	2b06      	cmp	r3, #6
 8007090:	d110      	bne.n	80070b4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007098:	2208      	movs	r2, #8
 800709a:	4619      	mov	r1, r3
 800709c:	6a38      	ldr	r0, [r7, #32]
 800709e:	f00a fb36 	bl	801170e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	699a      	ldr	r2, [r3, #24]
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	091b      	lsrs	r3, r3, #4
 80070aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070ae:	441a      	add	r2, r3
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	699a      	ldr	r2, [r3, #24]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f042 0210 	orr.w	r2, r2, #16
 80070c2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4618      	mov	r0, r3
 80070ca:	f00a fc73 	bl	80119b4 <USB_ReadInterrupts>
 80070ce:	4603      	mov	r3, r0
 80070d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80070d4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80070d8:	d16e      	bne.n	80071b8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80070da:	2300      	movs	r3, #0
 80070dc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4618      	mov	r0, r3
 80070e4:	f00a fc79 	bl	80119da <USB_ReadDevAllOutEpInterrupt>
 80070e8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80070ea:	e062      	b.n	80071b2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80070ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ee:	f003 0301 	and.w	r3, r3, #1
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d057      	beq.n	80071a6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070fc:	b2d2      	uxtb	r2, r2
 80070fe:	4611      	mov	r1, r2
 8007100:	4618      	mov	r0, r3
 8007102:	f00a fc9e 	bl	8011a42 <USB_ReadDevOutEPInterrupt>
 8007106:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00c      	beq.n	800712c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007114:	015a      	lsls	r2, r3, #5
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	4413      	add	r3, r2
 800711a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800711e:	461a      	mov	r2, r3
 8007120:	2301      	movs	r3, #1
 8007122:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007124:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 fe0a 	bl	8007d40 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	f003 0308 	and.w	r3, r3, #8
 8007132:	2b00      	cmp	r3, #0
 8007134:	d00c      	beq.n	8007150 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007138:	015a      	lsls	r2, r3, #5
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	4413      	add	r3, r2
 800713e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007142:	461a      	mov	r2, r3
 8007144:	2308      	movs	r3, #8
 8007146:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007148:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 ff04 	bl	8007f58 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	f003 0310 	and.w	r3, r3, #16
 8007156:	2b00      	cmp	r3, #0
 8007158:	d008      	beq.n	800716c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800715a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715c:	015a      	lsls	r2, r3, #5
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	4413      	add	r3, r2
 8007162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007166:	461a      	mov	r2, r3
 8007168:	2310      	movs	r3, #16
 800716a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	f003 0320 	and.w	r3, r3, #32
 8007172:	2b00      	cmp	r3, #0
 8007174:	d008      	beq.n	8007188 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007178:	015a      	lsls	r2, r3, #5
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	4413      	add	r3, r2
 800717e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007182:	461a      	mov	r2, r3
 8007184:	2320      	movs	r3, #32
 8007186:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800718e:	2b00      	cmp	r3, #0
 8007190:	d009      	beq.n	80071a6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007194:	015a      	lsls	r2, r3, #5
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	4413      	add	r3, r2
 800719a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800719e:	461a      	mov	r2, r3
 80071a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80071a4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80071a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a8:	3301      	adds	r3, #1
 80071aa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80071ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ae:	085b      	lsrs	r3, r3, #1
 80071b0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80071b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d199      	bne.n	80070ec <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4618      	mov	r0, r3
 80071be:	f00a fbf9 	bl	80119b4 <USB_ReadInterrupts>
 80071c2:	4603      	mov	r3, r0
 80071c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80071cc:	f040 80c0 	bne.w	8007350 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4618      	mov	r0, r3
 80071d6:	f00a fc1a 	bl	8011a0e <USB_ReadDevAllInEpInterrupt>
 80071da:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80071dc:	2300      	movs	r3, #0
 80071de:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80071e0:	e0b2      	b.n	8007348 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80071e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e4:	f003 0301 	and.w	r3, r3, #1
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f000 80a7 	beq.w	800733c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071f4:	b2d2      	uxtb	r2, r2
 80071f6:	4611      	mov	r1, r2
 80071f8:	4618      	mov	r0, r3
 80071fa:	f00a fc40 	bl	8011a7e <USB_ReadDevInEPInterrupt>
 80071fe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	f003 0301 	and.w	r3, r3, #1
 8007206:	2b00      	cmp	r3, #0
 8007208:	d057      	beq.n	80072ba <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800720a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720c:	f003 030f 	and.w	r3, r3, #15
 8007210:	2201      	movs	r2, #1
 8007212:	fa02 f303 	lsl.w	r3, r2, r3
 8007216:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800721e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	43db      	mvns	r3, r3
 8007224:	69f9      	ldr	r1, [r7, #28]
 8007226:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800722a:	4013      	ands	r3, r2
 800722c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800722e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007230:	015a      	lsls	r2, r3, #5
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	4413      	add	r3, r2
 8007236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800723a:	461a      	mov	r2, r3
 800723c:	2301      	movs	r3, #1
 800723e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d132      	bne.n	80072ae <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007248:	6879      	ldr	r1, [r7, #4]
 800724a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800724c:	4613      	mov	r3, r2
 800724e:	00db      	lsls	r3, r3, #3
 8007250:	1a9b      	subs	r3, r3, r2
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	440b      	add	r3, r1
 8007256:	3348      	adds	r3, #72	; 0x48
 8007258:	6819      	ldr	r1, [r3, #0]
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800725e:	4613      	mov	r3, r2
 8007260:	00db      	lsls	r3, r3, #3
 8007262:	1a9b      	subs	r3, r3, r2
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	4403      	add	r3, r0
 8007268:	3344      	adds	r3, #68	; 0x44
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4419      	add	r1, r3
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007272:	4613      	mov	r3, r2
 8007274:	00db      	lsls	r3, r3, #3
 8007276:	1a9b      	subs	r3, r3, r2
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	4403      	add	r3, r0
 800727c:	3348      	adds	r3, #72	; 0x48
 800727e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007282:	2b00      	cmp	r3, #0
 8007284:	d113      	bne.n	80072ae <HAL_PCD_IRQHandler+0x31c>
 8007286:	6879      	ldr	r1, [r7, #4]
 8007288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800728a:	4613      	mov	r3, r2
 800728c:	00db      	lsls	r3, r3, #3
 800728e:	1a9b      	subs	r3, r3, r2
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	440b      	add	r3, r1
 8007294:	3350      	adds	r3, #80	; 0x50
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d108      	bne.n	80072ae <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6818      	ldr	r0, [r3, #0]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80072a6:	461a      	mov	r2, r3
 80072a8:	2101      	movs	r1, #1
 80072aa:	f00a fc49 	bl	8011b40 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80072ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	4619      	mov	r1, r3
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f010 fb36 	bl	8017926 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	f003 0308 	and.w	r3, r3, #8
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d008      	beq.n	80072d6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80072c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c6:	015a      	lsls	r2, r3, #5
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	4413      	add	r3, r2
 80072cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072d0:	461a      	mov	r2, r3
 80072d2:	2308      	movs	r3, #8
 80072d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	f003 0310 	and.w	r3, r3, #16
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d008      	beq.n	80072f2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80072e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e2:	015a      	lsls	r2, r3, #5
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	4413      	add	r3, r2
 80072e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ec:	461a      	mov	r2, r3
 80072ee:	2310      	movs	r3, #16
 80072f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d008      	beq.n	800730e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80072fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fe:	015a      	lsls	r2, r3, #5
 8007300:	69fb      	ldr	r3, [r7, #28]
 8007302:	4413      	add	r3, r2
 8007304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007308:	461a      	mov	r2, r3
 800730a:	2340      	movs	r3, #64	; 0x40
 800730c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	f003 0302 	and.w	r3, r3, #2
 8007314:	2b00      	cmp	r3, #0
 8007316:	d008      	beq.n	800732a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731a:	015a      	lsls	r2, r3, #5
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	4413      	add	r3, r2
 8007320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007324:	461a      	mov	r2, r3
 8007326:	2302      	movs	r3, #2
 8007328:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007330:	2b00      	cmp	r3, #0
 8007332:	d003      	beq.n	800733c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007334:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 fc75 	bl	8007c26 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800733c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733e:	3301      	adds	r3, #1
 8007340:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007344:	085b      	lsrs	r3, r3, #1
 8007346:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734a:	2b00      	cmp	r3, #0
 800734c:	f47f af49 	bne.w	80071e2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4618      	mov	r0, r3
 8007356:	f00a fb2d 	bl	80119b4 <USB_ReadInterrupts>
 800735a:	4603      	mov	r3, r0
 800735c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007360:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007364:	d122      	bne.n	80073ac <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	69fa      	ldr	r2, [r7, #28]
 8007370:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007374:	f023 0301 	bic.w	r3, r3, #1
 8007378:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8007380:	2b01      	cmp	r3, #1
 8007382:	d108      	bne.n	8007396 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800738c:	2100      	movs	r1, #0
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 fea4 	bl	80080dc <HAL_PCDEx_LPM_Callback>
 8007394:	e002      	b.n	800739c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f010 fb3c 	bl	8017a14 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	695a      	ldr	r2, [r3, #20]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80073aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4618      	mov	r0, r3
 80073b2:	f00a faff 	bl	80119b4 <USB_ReadInterrupts>
 80073b6:	4603      	mov	r3, r0
 80073b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073c0:	d112      	bne.n	80073e8 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	f003 0301 	and.w	r3, r3, #1
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d102      	bne.n	80073d8 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f010 faf8 	bl	80179c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	695a      	ldr	r2, [r3, #20]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80073e6:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4618      	mov	r0, r3
 80073ee:	f00a fae1 	bl	80119b4 <USB_ReadInterrupts>
 80073f2:	4603      	mov	r3, r0
 80073f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073fc:	d121      	bne.n	8007442 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	695a      	ldr	r2, [r3, #20]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800740c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8007414:	2b00      	cmp	r3, #0
 8007416:	d111      	bne.n	800743c <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007426:	089b      	lsrs	r3, r3, #2
 8007428:	f003 020f 	and.w	r2, r3, #15
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007432:	2101      	movs	r1, #1
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 fe51 	bl	80080dc <HAL_PCDEx_LPM_Callback>
 800743a:	e002      	b.n	8007442 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f010 fac3 	bl	80179c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4618      	mov	r0, r3
 8007448:	f00a fab4 	bl	80119b4 <USB_ReadInterrupts>
 800744c:	4603      	mov	r3, r0
 800744e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007456:	f040 80c7 	bne.w	80075e8 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	69fa      	ldr	r2, [r7, #28]
 8007464:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007468:	f023 0301 	bic.w	r3, r3, #1
 800746c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	2110      	movs	r1, #16
 8007474:	4618      	mov	r0, r3
 8007476:	f009 fb87 	bl	8010b88 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800747a:	2300      	movs	r3, #0
 800747c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800747e:	e056      	b.n	800752e <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007482:	015a      	lsls	r2, r3, #5
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	4413      	add	r3, r2
 8007488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800748c:	461a      	mov	r2, r3
 800748e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007492:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007496:	015a      	lsls	r2, r3, #5
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	4413      	add	r3, r2
 800749c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074a4:	0151      	lsls	r1, r2, #5
 80074a6:	69fa      	ldr	r2, [r7, #28]
 80074a8:	440a      	add	r2, r1
 80074aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80074b2:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80074b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b6:	015a      	lsls	r2, r3, #5
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	4413      	add	r3, r2
 80074bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074c4:	0151      	lsls	r1, r2, #5
 80074c6:	69fa      	ldr	r2, [r7, #28]
 80074c8:	440a      	add	r2, r1
 80074ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80074d2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80074d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d6:	015a      	lsls	r2, r3, #5
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	4413      	add	r3, r2
 80074dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074e0:	461a      	mov	r2, r3
 80074e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80074e6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80074e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ea:	015a      	lsls	r2, r3, #5
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	4413      	add	r3, r2
 80074f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074f8:	0151      	lsls	r1, r2, #5
 80074fa:	69fa      	ldr	r2, [r7, #28]
 80074fc:	440a      	add	r2, r1
 80074fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007502:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007506:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800750a:	015a      	lsls	r2, r3, #5
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	4413      	add	r3, r2
 8007510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007518:	0151      	lsls	r1, r2, #5
 800751a:	69fa      	ldr	r2, [r7, #28]
 800751c:	440a      	add	r2, r1
 800751e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007522:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007526:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752a:	3301      	adds	r3, #1
 800752c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007534:	429a      	cmp	r2, r3
 8007536:	d3a3      	bcc.n	8007480 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800753e:	69db      	ldr	r3, [r3, #28]
 8007540:	69fa      	ldr	r2, [r7, #28]
 8007542:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007546:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800754a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007550:	2b00      	cmp	r3, #0
 8007552:	d016      	beq.n	8007582 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800755a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800755e:	69fa      	ldr	r2, [r7, #28]
 8007560:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007564:	f043 030b 	orr.w	r3, r3, #11
 8007568:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007574:	69fa      	ldr	r2, [r7, #28]
 8007576:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800757a:	f043 030b 	orr.w	r3, r3, #11
 800757e:	6453      	str	r3, [r2, #68]	; 0x44
 8007580:	e015      	b.n	80075ae <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007582:	69fb      	ldr	r3, [r7, #28]
 8007584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007588:	695a      	ldr	r2, [r3, #20]
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007590:	4619      	mov	r1, r3
 8007592:	f242 032b 	movw	r3, #8235	; 0x202b
 8007596:	4313      	orrs	r3, r2
 8007598:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	69fa      	ldr	r2, [r7, #28]
 80075a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075a8:	f043 030b 	orr.w	r3, r3, #11
 80075ac:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	69fa      	ldr	r2, [r7, #28]
 80075b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075bc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80075c0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6818      	ldr	r0, [r3, #0]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80075d2:	461a      	mov	r2, r3
 80075d4:	f00a fab4 	bl	8011b40 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	695a      	ldr	r2, [r3, #20]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80075e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4618      	mov	r0, r3
 80075ee:	f00a f9e1 	bl	80119b4 <USB_ReadInterrupts>
 80075f2:	4603      	mov	r3, r0
 80075f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80075f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075fc:	d124      	bne.n	8007648 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4618      	mov	r0, r3
 8007604:	f00a fa78 	bl	8011af8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4618      	mov	r0, r3
 800760e:	f009 fb1c 	bl	8010c4a <USB_GetDevSpeed>
 8007612:	4603      	mov	r3, r0
 8007614:	461a      	mov	r2, r3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681c      	ldr	r4, [r3, #0]
 800761e:	f001 fdd9 	bl	80091d4 <HAL_RCC_GetHCLKFreq>
 8007622:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007628:	b2db      	uxtb	r3, r3
 800762a:	461a      	mov	r2, r3
 800762c:	4620      	mov	r0, r4
 800762e:	f009 f85f 	bl	80106f0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f010 f99f 	bl	8017976 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	695a      	ldr	r2, [r3, #20]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007646:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4618      	mov	r0, r3
 800764e:	f00a f9b1 	bl	80119b4 <USB_ReadInterrupts>
 8007652:	4603      	mov	r3, r0
 8007654:	f003 0308 	and.w	r3, r3, #8
 8007658:	2b08      	cmp	r3, #8
 800765a:	d10a      	bne.n	8007672 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f010 f97c 	bl	801795a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	695a      	ldr	r2, [r3, #20]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f002 0208 	and.w	r2, r2, #8
 8007670:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4618      	mov	r0, r3
 8007678:	f00a f99c 	bl	80119b4 <USB_ReadInterrupts>
 800767c:	4603      	mov	r3, r0
 800767e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007682:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007686:	d10f      	bne.n	80076a8 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007688:	2300      	movs	r3, #0
 800768a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800768c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768e:	b2db      	uxtb	r3, r3
 8007690:	4619      	mov	r1, r3
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f010 f9de 	bl	8017a54 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	695a      	ldr	r2, [r3, #20]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80076a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4618      	mov	r0, r3
 80076ae:	f00a f981 	bl	80119b4 <USB_ReadInterrupts>
 80076b2:	4603      	mov	r3, r0
 80076b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80076bc:	d10f      	bne.n	80076de <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80076be:	2300      	movs	r3, #0
 80076c0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80076c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	4619      	mov	r1, r3
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f010 f9b1 	bl	8017a30 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	695a      	ldr	r2, [r3, #20]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80076dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4618      	mov	r0, r3
 80076e4:	f00a f966 	bl	80119b4 <USB_ReadInterrupts>
 80076e8:	4603      	mov	r3, r0
 80076ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80076ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076f2:	d10a      	bne.n	800770a <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f010 f9bf 	bl	8017a78 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	695a      	ldr	r2, [r3, #20]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007708:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4618      	mov	r0, r3
 8007710:	f00a f950 	bl	80119b4 <USB_ReadInterrupts>
 8007714:	4603      	mov	r3, r0
 8007716:	f003 0304 	and.w	r3, r3, #4
 800771a:	2b04      	cmp	r3, #4
 800771c:	d115      	bne.n	800774a <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	f003 0304 	and.w	r3, r3, #4
 800772c:	2b00      	cmp	r3, #0
 800772e:	d002      	beq.n	8007736 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f010 f9af 	bl	8017a94 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	6859      	ldr	r1, [r3, #4]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	69ba      	ldr	r2, [r7, #24]
 8007742:	430a      	orrs	r2, r1
 8007744:	605a      	str	r2, [r3, #4]
 8007746:	e000      	b.n	800774a <HAL_PCD_IRQHandler+0x7b8>
      return;
 8007748:	bf00      	nop
    }
  }
}
 800774a:	3734      	adds	r7, #52	; 0x34
 800774c:	46bd      	mov	sp, r7
 800774e:	bd90      	pop	{r4, r7, pc}

08007750 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b082      	sub	sp, #8
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	460b      	mov	r3, r1
 800775a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007762:	2b01      	cmp	r3, #1
 8007764:	d101      	bne.n	800776a <HAL_PCD_SetAddress+0x1a>
 8007766:	2302      	movs	r3, #2
 8007768:	e013      	b.n	8007792 <HAL_PCD_SetAddress+0x42>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2201      	movs	r2, #1
 800776e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	78fa      	ldrb	r2, [r7, #3]
 8007776:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	78fa      	ldrb	r2, [r7, #3]
 8007780:	4611      	mov	r1, r2
 8007782:	4618      	mov	r0, r3
 8007784:	f00a f8c0 	bl	8011908 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3708      	adds	r7, #8
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b084      	sub	sp, #16
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
 80077a2:	4608      	mov	r0, r1
 80077a4:	4611      	mov	r1, r2
 80077a6:	461a      	mov	r2, r3
 80077a8:	4603      	mov	r3, r0
 80077aa:	70fb      	strb	r3, [r7, #3]
 80077ac:	460b      	mov	r3, r1
 80077ae:	803b      	strh	r3, [r7, #0]
 80077b0:	4613      	mov	r3, r2
 80077b2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80077b4:	2300      	movs	r3, #0
 80077b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80077b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	da0f      	bge.n	80077e0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80077c0:	78fb      	ldrb	r3, [r7, #3]
 80077c2:	f003 020f 	and.w	r2, r3, #15
 80077c6:	4613      	mov	r3, r2
 80077c8:	00db      	lsls	r3, r3, #3
 80077ca:	1a9b      	subs	r3, r3, r2
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	3338      	adds	r3, #56	; 0x38
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	4413      	add	r3, r2
 80077d4:	3304      	adds	r3, #4
 80077d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2201      	movs	r2, #1
 80077dc:	705a      	strb	r2, [r3, #1]
 80077de:	e00f      	b.n	8007800 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80077e0:	78fb      	ldrb	r3, [r7, #3]
 80077e2:	f003 020f 	and.w	r2, r3, #15
 80077e6:	4613      	mov	r3, r2
 80077e8:	00db      	lsls	r3, r3, #3
 80077ea:	1a9b      	subs	r3, r3, r2
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	4413      	add	r3, r2
 80077f6:	3304      	adds	r3, #4
 80077f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2200      	movs	r2, #0
 80077fe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007800:	78fb      	ldrb	r3, [r7, #3]
 8007802:	f003 030f 	and.w	r3, r3, #15
 8007806:	b2da      	uxtb	r2, r3
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800780c:	883a      	ldrh	r2, [r7, #0]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	78ba      	ldrb	r2, [r7, #2]
 8007816:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	785b      	ldrb	r3, [r3, #1]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d004      	beq.n	800782a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	b29a      	uxth	r2, r3
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800782a:	78bb      	ldrb	r3, [r7, #2]
 800782c:	2b02      	cmp	r3, #2
 800782e:	d102      	bne.n	8007836 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2200      	movs	r2, #0
 8007834:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800783c:	2b01      	cmp	r3, #1
 800783e:	d101      	bne.n	8007844 <HAL_PCD_EP_Open+0xaa>
 8007840:	2302      	movs	r3, #2
 8007842:	e00e      	b.n	8007862 <HAL_PCD_EP_Open+0xc8>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	68f9      	ldr	r1, [r7, #12]
 8007852:	4618      	mov	r0, r3
 8007854:	f009 fa1e 	bl	8010c94 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8007860:	7afb      	ldrb	r3, [r7, #11]
}
 8007862:	4618      	mov	r0, r3
 8007864:	3710      	adds	r7, #16
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800786a:	b580      	push	{r7, lr}
 800786c:	b084      	sub	sp, #16
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
 8007872:	460b      	mov	r3, r1
 8007874:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007876:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800787a:	2b00      	cmp	r3, #0
 800787c:	da0f      	bge.n	800789e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800787e:	78fb      	ldrb	r3, [r7, #3]
 8007880:	f003 020f 	and.w	r2, r3, #15
 8007884:	4613      	mov	r3, r2
 8007886:	00db      	lsls	r3, r3, #3
 8007888:	1a9b      	subs	r3, r3, r2
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	3338      	adds	r3, #56	; 0x38
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	4413      	add	r3, r2
 8007892:	3304      	adds	r3, #4
 8007894:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2201      	movs	r2, #1
 800789a:	705a      	strb	r2, [r3, #1]
 800789c:	e00f      	b.n	80078be <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800789e:	78fb      	ldrb	r3, [r7, #3]
 80078a0:	f003 020f 	and.w	r2, r3, #15
 80078a4:	4613      	mov	r3, r2
 80078a6:	00db      	lsls	r3, r3, #3
 80078a8:	1a9b      	subs	r3, r3, r2
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	4413      	add	r3, r2
 80078b4:	3304      	adds	r3, #4
 80078b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2200      	movs	r2, #0
 80078bc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80078be:	78fb      	ldrb	r3, [r7, #3]
 80078c0:	f003 030f 	and.w	r3, r3, #15
 80078c4:	b2da      	uxtb	r2, r3
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d101      	bne.n	80078d8 <HAL_PCD_EP_Close+0x6e>
 80078d4:	2302      	movs	r3, #2
 80078d6:	e00e      	b.n	80078f6 <HAL_PCD_EP_Close+0x8c>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	68f9      	ldr	r1, [r7, #12]
 80078e6:	4618      	mov	r0, r3
 80078e8:	f009 fa5c 	bl	8010da4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b086      	sub	sp, #24
 8007902:	af00      	add	r7, sp, #0
 8007904:	60f8      	str	r0, [r7, #12]
 8007906:	607a      	str	r2, [r7, #4]
 8007908:	603b      	str	r3, [r7, #0]
 800790a:	460b      	mov	r3, r1
 800790c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800790e:	7afb      	ldrb	r3, [r7, #11]
 8007910:	f003 020f 	and.w	r2, r3, #15
 8007914:	4613      	mov	r3, r2
 8007916:	00db      	lsls	r3, r3, #3
 8007918:	1a9b      	subs	r3, r3, r2
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007920:	68fa      	ldr	r2, [r7, #12]
 8007922:	4413      	add	r3, r2
 8007924:	3304      	adds	r3, #4
 8007926:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	683a      	ldr	r2, [r7, #0]
 8007932:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	2200      	movs	r2, #0
 8007938:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	2200      	movs	r2, #0
 800793e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007940:	7afb      	ldrb	r3, [r7, #11]
 8007942:	f003 030f 	and.w	r3, r3, #15
 8007946:	b2da      	uxtb	r2, r3
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	691b      	ldr	r3, [r3, #16]
 8007950:	2b01      	cmp	r3, #1
 8007952:	d102      	bne.n	800795a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800795a:	7afb      	ldrb	r3, [r7, #11]
 800795c:	f003 030f 	and.w	r3, r3, #15
 8007960:	2b00      	cmp	r3, #0
 8007962:	d109      	bne.n	8007978 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6818      	ldr	r0, [r3, #0]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	691b      	ldr	r3, [r3, #16]
 800796c:	b2db      	uxtb	r3, r3
 800796e:	461a      	mov	r2, r3
 8007970:	6979      	ldr	r1, [r7, #20]
 8007972:	f009 fd3f 	bl	80113f4 <USB_EP0StartXfer>
 8007976:	e008      	b.n	800798a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6818      	ldr	r0, [r3, #0]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	691b      	ldr	r3, [r3, #16]
 8007980:	b2db      	uxtb	r3, r3
 8007982:	461a      	mov	r2, r3
 8007984:	6979      	ldr	r1, [r7, #20]
 8007986:	f009 fae9 	bl	8010f5c <USB_EPStartXfer>
  }

  return HAL_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	3718      	adds	r7, #24
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	460b      	mov	r3, r1
 800799e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80079a0:	78fb      	ldrb	r3, [r7, #3]
 80079a2:	f003 020f 	and.w	r2, r3, #15
 80079a6:	6879      	ldr	r1, [r7, #4]
 80079a8:	4613      	mov	r3, r2
 80079aa:	00db      	lsls	r3, r3, #3
 80079ac:	1a9b      	subs	r3, r3, r2
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	440b      	add	r3, r1
 80079b2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80079b6:	681b      	ldr	r3, [r3, #0]
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b086      	sub	sp, #24
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	607a      	str	r2, [r7, #4]
 80079ce:	603b      	str	r3, [r7, #0]
 80079d0:	460b      	mov	r3, r1
 80079d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80079d4:	7afb      	ldrb	r3, [r7, #11]
 80079d6:	f003 020f 	and.w	r2, r3, #15
 80079da:	4613      	mov	r3, r2
 80079dc:	00db      	lsls	r3, r3, #3
 80079de:	1a9b      	subs	r3, r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	3338      	adds	r3, #56	; 0x38
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	4413      	add	r3, r2
 80079e8:	3304      	adds	r3, #4
 80079ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	683a      	ldr	r2, [r7, #0]
 80079f6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	2200      	movs	r2, #0
 80079fc:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	2201      	movs	r2, #1
 8007a02:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007a04:	7afb      	ldrb	r3, [r7, #11]
 8007a06:	f003 030f 	and.w	r3, r3, #15
 8007a0a:	b2da      	uxtb	r2, r3
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	691b      	ldr	r3, [r3, #16]
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d102      	bne.n	8007a1e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007a1e:	7afb      	ldrb	r3, [r7, #11]
 8007a20:	f003 030f 	and.w	r3, r3, #15
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d109      	bne.n	8007a3c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6818      	ldr	r0, [r3, #0]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	691b      	ldr	r3, [r3, #16]
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	461a      	mov	r2, r3
 8007a34:	6979      	ldr	r1, [r7, #20]
 8007a36:	f009 fcdd 	bl	80113f4 <USB_EP0StartXfer>
 8007a3a:	e008      	b.n	8007a4e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	6818      	ldr	r0, [r3, #0]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	691b      	ldr	r3, [r3, #16]
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	461a      	mov	r2, r3
 8007a48:	6979      	ldr	r1, [r7, #20]
 8007a4a:	f009 fa87 	bl	8010f5c <USB_EPStartXfer>
  }

  return HAL_OK;
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3718      	adds	r7, #24
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	460b      	mov	r3, r1
 8007a62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007a64:	78fb      	ldrb	r3, [r7, #3]
 8007a66:	f003 020f 	and.w	r2, r3, #15
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d901      	bls.n	8007a76 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	e050      	b.n	8007b18 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007a76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	da0f      	bge.n	8007a9e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a7e:	78fb      	ldrb	r3, [r7, #3]
 8007a80:	f003 020f 	and.w	r2, r3, #15
 8007a84:	4613      	mov	r3, r2
 8007a86:	00db      	lsls	r3, r3, #3
 8007a88:	1a9b      	subs	r3, r3, r2
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	3338      	adds	r3, #56	; 0x38
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	4413      	add	r3, r2
 8007a92:	3304      	adds	r3, #4
 8007a94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	705a      	strb	r2, [r3, #1]
 8007a9c:	e00d      	b.n	8007aba <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007a9e:	78fa      	ldrb	r2, [r7, #3]
 8007aa0:	4613      	mov	r3, r2
 8007aa2:	00db      	lsls	r3, r3, #3
 8007aa4:	1a9b      	subs	r3, r3, r2
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	4413      	add	r3, r2
 8007ab0:	3304      	adds	r3, #4
 8007ab2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2201      	movs	r2, #1
 8007abe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007ac0:	78fb      	ldrb	r3, [r7, #3]
 8007ac2:	f003 030f 	and.w	r3, r3, #15
 8007ac6:	b2da      	uxtb	r2, r3
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d101      	bne.n	8007ada <HAL_PCD_EP_SetStall+0x82>
 8007ad6:	2302      	movs	r3, #2
 8007ad8:	e01e      	b.n	8007b18 <HAL_PCD_EP_SetStall+0xc0>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2201      	movs	r2, #1
 8007ade:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	68f9      	ldr	r1, [r7, #12]
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f009 fe39 	bl	8011760 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007aee:	78fb      	ldrb	r3, [r7, #3]
 8007af0:	f003 030f 	and.w	r3, r3, #15
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d10a      	bne.n	8007b0e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6818      	ldr	r0, [r3, #0]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	691b      	ldr	r3, [r3, #16]
 8007b00:	b2d9      	uxtb	r1, r3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007b08:	461a      	mov	r2, r3
 8007b0a:	f00a f819 	bl	8011b40 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3710      	adds	r7, #16
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	460b      	mov	r3, r1
 8007b2a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007b2c:	78fb      	ldrb	r3, [r7, #3]
 8007b2e:	f003 020f 	and.w	r2, r3, #15
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d901      	bls.n	8007b3e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e042      	b.n	8007bc4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007b3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	da0f      	bge.n	8007b66 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b46:	78fb      	ldrb	r3, [r7, #3]
 8007b48:	f003 020f 	and.w	r2, r3, #15
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	00db      	lsls	r3, r3, #3
 8007b50:	1a9b      	subs	r3, r3, r2
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	3338      	adds	r3, #56	; 0x38
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	4413      	add	r3, r2
 8007b5a:	3304      	adds	r3, #4
 8007b5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2201      	movs	r2, #1
 8007b62:	705a      	strb	r2, [r3, #1]
 8007b64:	e00f      	b.n	8007b86 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b66:	78fb      	ldrb	r3, [r7, #3]
 8007b68:	f003 020f 	and.w	r2, r3, #15
 8007b6c:	4613      	mov	r3, r2
 8007b6e:	00db      	lsls	r3, r3, #3
 8007b70:	1a9b      	subs	r3, r3, r2
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	4413      	add	r3, r2
 8007b7c:	3304      	adds	r3, #4
 8007b7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2200      	movs	r2, #0
 8007b84:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007b8c:	78fb      	ldrb	r3, [r7, #3]
 8007b8e:	f003 030f 	and.w	r3, r3, #15
 8007b92:	b2da      	uxtb	r2, r3
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d101      	bne.n	8007ba6 <HAL_PCD_EP_ClrStall+0x86>
 8007ba2:	2302      	movs	r3, #2
 8007ba4:	e00e      	b.n	8007bc4 <HAL_PCD_EP_ClrStall+0xa4>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2201      	movs	r2, #1
 8007baa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68f9      	ldr	r1, [r7, #12]
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f009 fe41 	bl	801183c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3710      	adds	r7, #16
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d101      	bne.n	8007be6 <HAL_PCD_EP_Flush+0x1a>
 8007be2:	2302      	movs	r3, #2
 8007be4:	e01b      	b.n	8007c1e <HAL_PCD_EP_Flush+0x52>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2201      	movs	r2, #1
 8007bea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8007bee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	da09      	bge.n	8007c0a <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	78fb      	ldrb	r3, [r7, #3]
 8007bfc:	f003 030f 	and.w	r3, r3, #15
 8007c00:	4619      	mov	r1, r3
 8007c02:	4610      	mov	r0, r2
 8007c04:	f008 ffc0 	bl	8010b88 <USB_FlushTxFifo>
 8007c08:	e004      	b.n	8007c14 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f008 ffe0 	bl	8010bd4 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3708      	adds	r7, #8
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}

08007c26 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007c26:	b580      	push	{r7, lr}
 8007c28:	b08a      	sub	sp, #40	; 0x28
 8007c2a:	af02      	add	r7, sp, #8
 8007c2c:	6078      	str	r0, [r7, #4]
 8007c2e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007c3a:	683a      	ldr	r2, [r7, #0]
 8007c3c:	4613      	mov	r3, r2
 8007c3e:	00db      	lsls	r3, r3, #3
 8007c40:	1a9b      	subs	r3, r3, r2
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	3338      	adds	r3, #56	; 0x38
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	4413      	add	r3, r2
 8007c4a:	3304      	adds	r3, #4
 8007c4c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	699a      	ldr	r2, [r3, #24]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	695b      	ldr	r3, [r3, #20]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d901      	bls.n	8007c5e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e06c      	b.n	8007d38 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	695a      	ldr	r2, [r3, #20]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	699b      	ldr	r3, [r3, #24]
 8007c66:	1ad3      	subs	r3, r2, r3
 8007c68:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	69fa      	ldr	r2, [r7, #28]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d902      	bls.n	8007c7a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007c7a:	69fb      	ldr	r3, [r7, #28]
 8007c7c:	3303      	adds	r3, #3
 8007c7e:	089b      	lsrs	r3, r3, #2
 8007c80:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007c82:	e02b      	b.n	8007cdc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	695a      	ldr	r2, [r3, #20]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	699b      	ldr	r3, [r3, #24]
 8007c8c:	1ad3      	subs	r3, r2, r3
 8007c8e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	69fa      	ldr	r2, [r7, #28]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d902      	bls.n	8007ca0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007ca0:	69fb      	ldr	r3, [r7, #28]
 8007ca2:	3303      	adds	r3, #3
 8007ca4:	089b      	lsrs	r3, r3, #2
 8007ca6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	68d9      	ldr	r1, [r3, #12]
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	b2da      	uxtb	r2, r3
 8007cb0:	69fb      	ldr	r3, [r7, #28]
 8007cb2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	9300      	str	r3, [sp, #0]
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	6978      	ldr	r0, [r7, #20]
 8007cc0:	f009 fcf0 	bl	80116a4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	68da      	ldr	r2, [r3, #12]
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	441a      	add	r2, r3
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	699a      	ldr	r2, [r3, #24]
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	441a      	add	r2, r3
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	015a      	lsls	r2, r3, #5
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ce8:	699b      	ldr	r3, [r3, #24]
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	69ba      	ldr	r2, [r7, #24]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d809      	bhi.n	8007d06 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	699a      	ldr	r2, [r3, #24]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d203      	bcs.n	8007d06 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	695b      	ldr	r3, [r3, #20]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d1be      	bne.n	8007c84 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	695a      	ldr	r2, [r3, #20]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	699b      	ldr	r3, [r3, #24]
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d811      	bhi.n	8007d36 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	f003 030f 	and.w	r3, r3, #15
 8007d18:	2201      	movs	r2, #1
 8007d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d1e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	43db      	mvns	r3, r3
 8007d2c:	6939      	ldr	r1, [r7, #16]
 8007d2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d32:	4013      	ands	r3, r2
 8007d34:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007d36:	2300      	movs	r3, #0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3720      	adds	r7, #32
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b086      	sub	sp, #24
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	333c      	adds	r3, #60	; 0x3c
 8007d58:	3304      	adds	r3, #4
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	015a      	lsls	r2, r3, #5
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	4413      	add	r3, r2
 8007d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	691b      	ldr	r3, [r3, #16]
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	f040 80a0 	bne.w	8007eb8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	f003 0308 	and.w	r3, r3, #8
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d015      	beq.n	8007dae <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	4a72      	ldr	r2, [pc, #456]	; (8007f50 <PCD_EP_OutXfrComplete_int+0x210>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	f240 80dd 	bls.w	8007f46 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	f000 80d7 	beq.w	8007f46 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	015a      	lsls	r2, r3, #5
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	4413      	add	r3, r2
 8007da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007da4:	461a      	mov	r2, r3
 8007da6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007daa:	6093      	str	r3, [r2, #8]
 8007dac:	e0cb      	b.n	8007f46 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	f003 0320 	and.w	r3, r3, #32
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d009      	beq.n	8007dcc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	015a      	lsls	r2, r3, #5
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	4413      	add	r3, r2
 8007dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	2320      	movs	r3, #32
 8007dc8:	6093      	str	r3, [r2, #8]
 8007dca:	e0bc      	b.n	8007f46 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	f040 80b7 	bne.w	8007f46 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	4a5d      	ldr	r2, [pc, #372]	; (8007f50 <PCD_EP_OutXfrComplete_int+0x210>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d90f      	bls.n	8007e00 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00a      	beq.n	8007e00 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	015a      	lsls	r2, r3, #5
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	4413      	add	r3, r2
 8007df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007df6:	461a      	mov	r2, r3
 8007df8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dfc:	6093      	str	r3, [r2, #8]
 8007dfe:	e0a2      	b.n	8007f46 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8007e00:	6879      	ldr	r1, [r7, #4]
 8007e02:	683a      	ldr	r2, [r7, #0]
 8007e04:	4613      	mov	r3, r2
 8007e06:	00db      	lsls	r3, r3, #3
 8007e08:	1a9b      	subs	r3, r3, r2
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	440b      	add	r3, r1
 8007e0e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007e12:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	0159      	lsls	r1, r3, #5
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	440b      	add	r3, r1
 8007e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e20:	691b      	ldr	r3, [r3, #16]
 8007e22:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8007e26:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	683a      	ldr	r2, [r7, #0]
 8007e2c:	4613      	mov	r3, r2
 8007e2e:	00db      	lsls	r3, r3, #3
 8007e30:	1a9b      	subs	r3, r3, r2
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	4403      	add	r3, r0
 8007e36:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007e3a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8007e3c:	6879      	ldr	r1, [r7, #4]
 8007e3e:	683a      	ldr	r2, [r7, #0]
 8007e40:	4613      	mov	r3, r2
 8007e42:	00db      	lsls	r3, r3, #3
 8007e44:	1a9b      	subs	r3, r3, r2
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	440b      	add	r3, r1
 8007e4a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007e4e:	6819      	ldr	r1, [r3, #0]
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	683a      	ldr	r2, [r7, #0]
 8007e54:	4613      	mov	r3, r2
 8007e56:	00db      	lsls	r3, r3, #3
 8007e58:	1a9b      	subs	r3, r3, r2
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	4403      	add	r3, r0
 8007e5e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4419      	add	r1, r3
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	683a      	ldr	r2, [r7, #0]
 8007e6a:	4613      	mov	r3, r2
 8007e6c:	00db      	lsls	r3, r3, #3
 8007e6e:	1a9b      	subs	r3, r3, r2
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	4403      	add	r3, r0
 8007e74:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007e78:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d114      	bne.n	8007eaa <PCD_EP_OutXfrComplete_int+0x16a>
 8007e80:	6879      	ldr	r1, [r7, #4]
 8007e82:	683a      	ldr	r2, [r7, #0]
 8007e84:	4613      	mov	r3, r2
 8007e86:	00db      	lsls	r3, r3, #3
 8007e88:	1a9b      	subs	r3, r3, r2
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	440b      	add	r3, r1
 8007e8e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d108      	bne.n	8007eaa <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6818      	ldr	r0, [r3, #0]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	2101      	movs	r1, #1
 8007ea6:	f009 fe4b 	bl	8011b40 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	4619      	mov	r1, r3
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f00f fd1d 	bl	80178f0 <HAL_PCD_DataOutStageCallback>
 8007eb6:	e046      	b.n	8007f46 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	4a26      	ldr	r2, [pc, #152]	; (8007f54 <PCD_EP_OutXfrComplete_int+0x214>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d124      	bne.n	8007f0a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00a      	beq.n	8007ee0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	015a      	lsls	r2, r3, #5
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	4413      	add	r3, r2
 8007ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007edc:	6093      	str	r3, [r2, #8]
 8007ede:	e032      	b.n	8007f46 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	f003 0320 	and.w	r3, r3, #32
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d008      	beq.n	8007efc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	015a      	lsls	r2, r3, #5
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	2320      	movs	r3, #32
 8007efa:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	4619      	mov	r1, r3
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f00f fcf4 	bl	80178f0 <HAL_PCD_DataOutStageCallback>
 8007f08:	e01d      	b.n	8007f46 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d114      	bne.n	8007f3a <PCD_EP_OutXfrComplete_int+0x1fa>
 8007f10:	6879      	ldr	r1, [r7, #4]
 8007f12:	683a      	ldr	r2, [r7, #0]
 8007f14:	4613      	mov	r3, r2
 8007f16:	00db      	lsls	r3, r3, #3
 8007f18:	1a9b      	subs	r3, r3, r2
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	440b      	add	r3, r1
 8007f1e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d108      	bne.n	8007f3a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6818      	ldr	r0, [r3, #0]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007f32:	461a      	mov	r2, r3
 8007f34:	2100      	movs	r1, #0
 8007f36:	f009 fe03 	bl	8011b40 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	4619      	mov	r1, r3
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f00f fcd5 	bl	80178f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007f46:	2300      	movs	r3, #0
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3718      	adds	r7, #24
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}
 8007f50:	4f54300a 	.word	0x4f54300a
 8007f54:	4f54310a 	.word	0x4f54310a

08007f58 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b086      	sub	sp, #24
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	333c      	adds	r3, #60	; 0x3c
 8007f70:	3304      	adds	r3, #4
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	015a      	lsls	r2, r3, #5
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	4413      	add	r3, r2
 8007f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	4a15      	ldr	r2, [pc, #84]	; (8007fe0 <PCD_EP_OutSetupPacket_int+0x88>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d90e      	bls.n	8007fac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d009      	beq.n	8007fac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	015a      	lsls	r2, r3, #5
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007faa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f00f fc8d 	bl	80178cc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	4a0a      	ldr	r2, [pc, #40]	; (8007fe0 <PCD_EP_OutSetupPacket_int+0x88>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d90c      	bls.n	8007fd4 <PCD_EP_OutSetupPacket_int+0x7c>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d108      	bne.n	8007fd4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6818      	ldr	r0, [r3, #0]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007fcc:	461a      	mov	r2, r3
 8007fce:	2101      	movs	r1, #1
 8007fd0:	f009 fdb6 	bl	8011b40 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007fd4:	2300      	movs	r3, #0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3718      	adds	r7, #24
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	4f54300a 	.word	0x4f54300a

08007fe4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b085      	sub	sp, #20
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	460b      	mov	r3, r1
 8007fee:	70fb      	strb	r3, [r7, #3]
 8007ff0:	4613      	mov	r3, r2
 8007ff2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007ffc:	78fb      	ldrb	r3, [r7, #3]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d107      	bne.n	8008012 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008002:	883b      	ldrh	r3, [r7, #0]
 8008004:	0419      	lsls	r1, r3, #16
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	68ba      	ldr	r2, [r7, #8]
 800800c:	430a      	orrs	r2, r1
 800800e:	629a      	str	r2, [r3, #40]	; 0x28
 8008010:	e028      	b.n	8008064 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008018:	0c1b      	lsrs	r3, r3, #16
 800801a:	68ba      	ldr	r2, [r7, #8]
 800801c:	4413      	add	r3, r2
 800801e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008020:	2300      	movs	r3, #0
 8008022:	73fb      	strb	r3, [r7, #15]
 8008024:	e00d      	b.n	8008042 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	7bfb      	ldrb	r3, [r7, #15]
 800802c:	3340      	adds	r3, #64	; 0x40
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	4413      	add	r3, r2
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	0c1b      	lsrs	r3, r3, #16
 8008036:	68ba      	ldr	r2, [r7, #8]
 8008038:	4413      	add	r3, r2
 800803a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800803c:	7bfb      	ldrb	r3, [r7, #15]
 800803e:	3301      	adds	r3, #1
 8008040:	73fb      	strb	r3, [r7, #15]
 8008042:	7bfa      	ldrb	r2, [r7, #15]
 8008044:	78fb      	ldrb	r3, [r7, #3]
 8008046:	3b01      	subs	r3, #1
 8008048:	429a      	cmp	r2, r3
 800804a:	d3ec      	bcc.n	8008026 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800804c:	883b      	ldrh	r3, [r7, #0]
 800804e:	0418      	lsls	r0, r3, #16
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6819      	ldr	r1, [r3, #0]
 8008054:	78fb      	ldrb	r3, [r7, #3]
 8008056:	3b01      	subs	r3, #1
 8008058:	68ba      	ldr	r2, [r7, #8]
 800805a:	4302      	orrs	r2, r0
 800805c:	3340      	adds	r3, #64	; 0x40
 800805e:	009b      	lsls	r3, r3, #2
 8008060:	440b      	add	r3, r1
 8008062:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008064:	2300      	movs	r3, #0
}
 8008066:	4618      	mov	r0, r3
 8008068:	3714      	adds	r7, #20
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr

08008072 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008072:	b480      	push	{r7}
 8008074:	b083      	sub	sp, #12
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
 800807a:	460b      	mov	r3, r1
 800807c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	887a      	ldrh	r2, [r7, #2]
 8008084:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008086:	2300      	movs	r3, #0
}
 8008088:	4618      	mov	r0, r3
 800808a:	370c      	adds	r7, #12
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008094:	b480      	push	{r7}
 8008096:	b085      	sub	sp, #20
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2201      	movs	r2, #1
 80080a6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	699b      	ldr	r3, [r3, #24]
 80080b6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80080c2:	4b05      	ldr	r3, [pc, #20]	; (80080d8 <HAL_PCDEx_ActivateLPM+0x44>)
 80080c4:	4313      	orrs	r3, r2
 80080c6:	68fa      	ldr	r2, [r7, #12]
 80080c8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80080ca:	2300      	movs	r3, #0
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3714      	adds	r7, #20
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr
 80080d8:	10000003 	.word	0x10000003

080080dc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	460b      	mov	r3, r1
 80080e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80080e8:	bf00      	nop
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 80080f4:	b480      	push	{r7}
 80080f6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 80080f8:	4b05      	ldr	r3, [pc, #20]	; (8008110 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a04      	ldr	r2, [pc, #16]	; (8008110 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80080fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008102:	6013      	str	r3, [r2, #0]
}
 8008104:	bf00      	nop
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr
 800810e:	bf00      	nop
 8008110:	58024800 	.word	0x58024800

08008114 <HAL_PWR_ConfigPVD>:
  *         driver. All combination are allowed: wake up only Cortex-M7, wake up
  *         only Cortex-M4 or wake up Cortex-M7 and Cortex-M4.
  * @retval None.
  */
void HAL_PWR_ConfigPVD (PWR_PVDTypeDef *sConfigPVD)
{
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  /* Check the PVD configuration parameter */
  if (sConfigPVD == NULL)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d069      	beq.n	80081f6 <HAL_PWR_ConfigPVD+0xe2>
  /* Check the parameters */
  assert_param (IS_PWR_PVD_LEVEL (sConfigPVD->PVDLevel));
  assert_param (IS_PWR_PVD_MODE (sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG (PWR->CR1, PWR_CR1_PLS, sConfigPVD->PVDLevel);
 8008122:	4b38      	ldr	r3, [pc, #224]	; (8008204 <HAL_PWR_ConfigPVD+0xf0>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4935      	ldr	r1, [pc, #212]	; (8008204 <HAL_PWR_ConfigPVD+0xf0>)
 8008130:	4313      	orrs	r3, r2
 8008132:	600b      	str	r3, [r1, #0]

  /* Clear previous config */
#if !defined (DUAL_CORE)
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT ();
 8008134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800813c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008140:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008144:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT ();
 8008148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800814c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008150:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008154:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008158:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* !defined (DUAL_CORE) */

  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE ();
 800815c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800816a:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE ();
 800816c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800817a:	6053      	str	r3, [r2, #4]

#if !defined (DUAL_CORE)
  /* Interrupt mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008184:	2b00      	cmp	r3, #0
 8008186:	d009      	beq.n	800819c <HAL_PWR_ConfigPVD+0x88>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT ();
 8008188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800818c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008190:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008198:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Event mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d009      	beq.n	80081bc <HAL_PWR_ConfigPVD+0xa8>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT ();
 80081a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80081b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081b8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  }
#endif /* !defined (DUAL_CORE) */

  /* Rising edge configuration */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	f003 0301 	and.w	r3, r3, #1
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d007      	beq.n	80081d8 <HAL_PWR_ConfigPVD+0xc4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE ();
 80081c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80081d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081d6:	6013      	str	r3, [r2, #0]
  }

  /* Falling edge configuration */
  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	f003 0302 	and.w	r3, r3, #2
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d009      	beq.n	80081f8 <HAL_PWR_ConfigPVD+0xe4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE ();
 80081e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80081ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081f2:	6053      	str	r3, [r2, #4]
 80081f4:	e000      	b.n	80081f8 <HAL_PWR_ConfigPVD+0xe4>
    return;
 80081f6:	bf00      	nop
  }
}
 80081f8:	370c      	adds	r7, #12
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr
 8008202:	bf00      	nop
 8008204:	58024800 	.word	0x58024800

08008208 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Programmable Voltage Detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD (void)
{
 8008208:	b480      	push	{r7}
 800820a:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT (PWR->CR1, PWR_CR1_PVDEN);
 800820c:	4b05      	ldr	r3, [pc, #20]	; (8008224 <HAL_PWR_EnablePVD+0x1c>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a04      	ldr	r2, [pc, #16]	; (8008224 <HAL_PWR_EnablePVD+0x1c>)
 8008212:	f043 0310 	orr.w	r3, r3, #16
 8008216:	6013      	str	r3, [r2, #0]
}
 8008218:	bf00      	nop
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	58024800 	.word	0x58024800

08008228 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008230:	4b19      	ldr	r3, [pc, #100]	; (8008298 <HAL_PWREx_ConfigSupply+0x70>)
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	f003 0304 	and.w	r3, r3, #4
 8008238:	2b04      	cmp	r3, #4
 800823a:	d00a      	beq.n	8008252 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800823c:	4b16      	ldr	r3, [pc, #88]	; (8008298 <HAL_PWREx_ConfigSupply+0x70>)
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	f003 0307 	and.w	r3, r3, #7
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	429a      	cmp	r2, r3
 8008248:	d001      	beq.n	800824e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	e01f      	b.n	800828e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800824e:	2300      	movs	r3, #0
 8008250:	e01d      	b.n	800828e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008252:	4b11      	ldr	r3, [pc, #68]	; (8008298 <HAL_PWREx_ConfigSupply+0x70>)
 8008254:	68db      	ldr	r3, [r3, #12]
 8008256:	f023 0207 	bic.w	r2, r3, #7
 800825a:	490f      	ldr	r1, [pc, #60]	; (8008298 <HAL_PWREx_ConfigSupply+0x70>)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	4313      	orrs	r3, r2
 8008260:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008262:	f7fa ffa7 	bl	80031b4 <HAL_GetTick>
 8008266:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008268:	e009      	b.n	800827e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800826a:	f7fa ffa3 	bl	80031b4 <HAL_GetTick>
 800826e:	4602      	mov	r2, r0
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	1ad3      	subs	r3, r2, r3
 8008274:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008278:	d901      	bls.n	800827e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800827a:	2301      	movs	r3, #1
 800827c:	e007      	b.n	800828e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800827e:	4b06      	ldr	r3, [pc, #24]	; (8008298 <HAL_PWREx_ConfigSupply+0x70>)
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008286:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800828a:	d1ee      	bne.n	800826a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	3710      	adds	r7, #16
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop
 8008298:	58024800 	.word	0x58024800

0800829c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800829c:	b480      	push	{r7}
 800829e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80082a0:	4b05      	ldr	r3, [pc, #20]	; (80082b8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	4a04      	ldr	r2, [pc, #16]	; (80082b8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80082a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80082aa:	60d3      	str	r3, [r2, #12]
}
 80082ac:	bf00      	nop
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr
 80082b6:	bf00      	nop
 80082b8:	58024800 	.word	0x58024800

080082bc <HAL_PWREx_PVD_AVD_IRQHandler>:
  * @brief  This function handles the PWR PVD/AVD interrupt request.
  * @note   This API should be called under the PVD_AVD_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_AVD_IRQHandler (void)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	af00      	add	r7, sp, #0
  /* Check if the Programmable Voltage Detector is enabled (PVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_PVDEN) != 0U)
 80082c0:	4b1b      	ldr	r3, [pc, #108]	; (8008330 <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f003 0310 	and.w	r3, r3, #16
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d014      	beq.n	80082f6 <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR D1/CD EXTI flag */
      if (__HAL_PWR_PVD_EXTI_GET_FLAG () != 0U)
 80082cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082dc:	d10b      	bne.n	80082f6 <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
      {
        /* PWR PVD interrupt user callback */
        HAL_PWR_PVDCallback ();
 80082de:	f7fa fa75 	bl	80027cc <HAL_PWR_PVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_PVD_EXTI_CLEAR_FLAG ();
 80082e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80082ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082f2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }
#endif /* defined (DUAL_CORE) */
  }

  /* Check if the Analog Voltage Detector is enabled (AVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_AVDEN) != 0U)
 80082f6:	4b0e      	ldr	r3, [pc, #56]	; (8008330 <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d014      	beq.n	800832c <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR EXTI D1/CD flag */
      if (__HAL_PWR_AVD_EXTI_GET_FLAG () != 0U)
 8008302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800830a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800830e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008312:	d10b      	bne.n	800832c <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
      {
        /* PWR AVD interrupt user callback */
        HAL_PWREx_AVDCallback ();
 8008314:	f000 f80e 	bl	8008334 <HAL_PWREx_AVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_AVD_EXTI_CLEAR_FLAG ();
 8008318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800831c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008320:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008328:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        __HAL_PWR_AVD_EXTID2_CLEAR_FLAG ();
      }
    }
#endif /* defined (DUAL_CORE) */
  }
}
 800832c:	bf00      	nop
 800832e:	bd80      	pop	{r7, pc}
 8008330:	58024800 	.word	0x58024800

08008334 <HAL_PWREx_AVDCallback>:
/**
  * @brief PWR AVD interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_AVDCallback (void)
{
 8008334:	b480      	push	{r7}
 8008336:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_AVDCallback can be implemented in the user file
  */
}
 8008338:	bf00      	nop
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr
	...

08008344 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b08c      	sub	sp, #48	; 0x30
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d101      	bne.n	8008356 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	e3ff      	b.n	8008b56 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f003 0301 	and.w	r3, r3, #1
 800835e:	2b00      	cmp	r3, #0
 8008360:	f000 8087 	beq.w	8008472 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008364:	4b99      	ldr	r3, [pc, #612]	; (80085cc <HAL_RCC_OscConfig+0x288>)
 8008366:	691b      	ldr	r3, [r3, #16]
 8008368:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800836c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800836e:	4b97      	ldr	r3, [pc, #604]	; (80085cc <HAL_RCC_OscConfig+0x288>)
 8008370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008372:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008376:	2b10      	cmp	r3, #16
 8008378:	d007      	beq.n	800838a <HAL_RCC_OscConfig+0x46>
 800837a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800837c:	2b18      	cmp	r3, #24
 800837e:	d110      	bne.n	80083a2 <HAL_RCC_OscConfig+0x5e>
 8008380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008382:	f003 0303 	and.w	r3, r3, #3
 8008386:	2b02      	cmp	r3, #2
 8008388:	d10b      	bne.n	80083a2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800838a:	4b90      	ldr	r3, [pc, #576]	; (80085cc <HAL_RCC_OscConfig+0x288>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008392:	2b00      	cmp	r3, #0
 8008394:	d06c      	beq.n	8008470 <HAL_RCC_OscConfig+0x12c>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d168      	bne.n	8008470 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	e3d9      	b.n	8008b56 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083aa:	d106      	bne.n	80083ba <HAL_RCC_OscConfig+0x76>
 80083ac:	4b87      	ldr	r3, [pc, #540]	; (80085cc <HAL_RCC_OscConfig+0x288>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a86      	ldr	r2, [pc, #536]	; (80085cc <HAL_RCC_OscConfig+0x288>)
 80083b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083b6:	6013      	str	r3, [r2, #0]
 80083b8:	e02e      	b.n	8008418 <HAL_RCC_OscConfig+0xd4>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d10c      	bne.n	80083dc <HAL_RCC_OscConfig+0x98>
 80083c2:	4b82      	ldr	r3, [pc, #520]	; (80085cc <HAL_RCC_OscConfig+0x288>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a81      	ldr	r2, [pc, #516]	; (80085cc <HAL_RCC_OscConfig+0x288>)
 80083c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083cc:	6013      	str	r3, [r2, #0]
 80083ce:	4b7f      	ldr	r3, [pc, #508]	; (80085cc <HAL_RCC_OscConfig+0x288>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a7e      	ldr	r2, [pc, #504]	; (80085cc <HAL_RCC_OscConfig+0x288>)
 80083d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083d8:	6013      	str	r3, [r2, #0]
 80083da:	e01d      	b.n	8008418 <HAL_RCC_OscConfig+0xd4>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80083e4:	d10c      	bne.n	8008400 <HAL_RCC_OscConfig+0xbc>
 80083e6:	4b79      	ldr	r3, [pc, #484]	; (80085cc <HAL_RCC_OscConfig+0x288>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a78      	ldr	r2, [pc, #480]	; (80085cc <HAL_RCC_OscConfig+0x288>)
 80083ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80083f0:	6013      	str	r3, [r2, #0]
 80083f2:	4b76      	ldr	r3, [pc, #472]	; (80085cc <HAL_RCC_OscConfig+0x288>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a75      	ldr	r2, [pc, #468]	; (80085cc <HAL_RCC_OscConfig+0x288>)
 80083f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083fc:	6013      	str	r3, [r2, #0]
 80083fe:	e00b      	b.n	8008418 <HAL_RCC_OscConfig+0xd4>
 8008400:	4b72      	ldr	r3, [pc, #456]	; (80085cc <HAL_RCC_OscConfig+0x288>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a71      	ldr	r2, [pc, #452]	; (80085cc <HAL_RCC_OscConfig+0x288>)
 8008406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800840a:	6013      	str	r3, [r2, #0]
 800840c:	4b6f      	ldr	r3, [pc, #444]	; (80085cc <HAL_RCC_OscConfig+0x288>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a6e      	ldr	r2, [pc, #440]	; (80085cc <HAL_RCC_OscConfig+0x288>)
 8008412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008416:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d013      	beq.n	8008448 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008420:	f7fa fec8 	bl	80031b4 <HAL_GetTick>
 8008424:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008426:	e008      	b.n	800843a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008428:	f7fa fec4 	bl	80031b4 <HAL_GetTick>
 800842c:	4602      	mov	r2, r0
 800842e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008430:	1ad3      	subs	r3, r2, r3
 8008432:	2b64      	cmp	r3, #100	; 0x64
 8008434:	d901      	bls.n	800843a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008436:	2303      	movs	r3, #3
 8008438:	e38d      	b.n	8008b56 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800843a:	4b64      	ldr	r3, [pc, #400]	; (80085cc <HAL_RCC_OscConfig+0x288>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008442:	2b00      	cmp	r3, #0
 8008444:	d0f0      	beq.n	8008428 <HAL_RCC_OscConfig+0xe4>
 8008446:	e014      	b.n	8008472 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008448:	f7fa feb4 	bl	80031b4 <HAL_GetTick>
 800844c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800844e:	e008      	b.n	8008462 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008450:	f7fa feb0 	bl	80031b4 <HAL_GetTick>
 8008454:	4602      	mov	r2, r0
 8008456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008458:	1ad3      	subs	r3, r2, r3
 800845a:	2b64      	cmp	r3, #100	; 0x64
 800845c:	d901      	bls.n	8008462 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800845e:	2303      	movs	r3, #3
 8008460:	e379      	b.n	8008b56 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008462:	4b5a      	ldr	r3, [pc, #360]	; (80085cc <HAL_RCC_OscConfig+0x288>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800846a:	2b00      	cmp	r3, #0
 800846c:	d1f0      	bne.n	8008450 <HAL_RCC_OscConfig+0x10c>
 800846e:	e000      	b.n	8008472 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f003 0302 	and.w	r3, r3, #2
 800847a:	2b00      	cmp	r3, #0
 800847c:	f000 80ae 	beq.w	80085dc <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008480:	4b52      	ldr	r3, [pc, #328]	; (80085cc <HAL_RCC_OscConfig+0x288>)
 8008482:	691b      	ldr	r3, [r3, #16]
 8008484:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008488:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800848a:	4b50      	ldr	r3, [pc, #320]	; (80085cc <HAL_RCC_OscConfig+0x288>)
 800848c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800848e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008490:	6a3b      	ldr	r3, [r7, #32]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d007      	beq.n	80084a6 <HAL_RCC_OscConfig+0x162>
 8008496:	6a3b      	ldr	r3, [r7, #32]
 8008498:	2b18      	cmp	r3, #24
 800849a:	d13a      	bne.n	8008512 <HAL_RCC_OscConfig+0x1ce>
 800849c:	69fb      	ldr	r3, [r7, #28]
 800849e:	f003 0303 	and.w	r3, r3, #3
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d135      	bne.n	8008512 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80084a6:	4b49      	ldr	r3, [pc, #292]	; (80085cc <HAL_RCC_OscConfig+0x288>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f003 0304 	and.w	r3, r3, #4
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d005      	beq.n	80084be <HAL_RCC_OscConfig+0x17a>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	68db      	ldr	r3, [r3, #12]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d101      	bne.n	80084be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80084ba:	2301      	movs	r3, #1
 80084bc:	e34b      	b.n	8008b56 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084be:	f7fa fea7 	bl	8003210 <HAL_GetREVID>
 80084c2:	4602      	mov	r2, r0
 80084c4:	f241 0303 	movw	r3, #4099	; 0x1003
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d817      	bhi.n	80084fc <HAL_RCC_OscConfig+0x1b8>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	2b40      	cmp	r3, #64	; 0x40
 80084d2:	d108      	bne.n	80084e6 <HAL_RCC_OscConfig+0x1a2>
 80084d4:	4b3d      	ldr	r3, [pc, #244]	; (80085cc <HAL_RCC_OscConfig+0x288>)
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80084dc:	4a3b      	ldr	r2, [pc, #236]	; (80085cc <HAL_RCC_OscConfig+0x288>)
 80084de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084e2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80084e4:	e07a      	b.n	80085dc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084e6:	4b39      	ldr	r3, [pc, #228]	; (80085cc <HAL_RCC_OscConfig+0x288>)
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	691b      	ldr	r3, [r3, #16]
 80084f2:	031b      	lsls	r3, r3, #12
 80084f4:	4935      	ldr	r1, [pc, #212]	; (80085cc <HAL_RCC_OscConfig+0x288>)
 80084f6:	4313      	orrs	r3, r2
 80084f8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80084fa:	e06f      	b.n	80085dc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084fc:	4b33      	ldr	r3, [pc, #204]	; (80085cc <HAL_RCC_OscConfig+0x288>)
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	691b      	ldr	r3, [r3, #16]
 8008508:	061b      	lsls	r3, r3, #24
 800850a:	4930      	ldr	r1, [pc, #192]	; (80085cc <HAL_RCC_OscConfig+0x288>)
 800850c:	4313      	orrs	r3, r2
 800850e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008510:	e064      	b.n	80085dc <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	68db      	ldr	r3, [r3, #12]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d045      	beq.n	80085a6 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800851a:	4b2c      	ldr	r3, [pc, #176]	; (80085cc <HAL_RCC_OscConfig+0x288>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f023 0219 	bic.w	r2, r3, #25
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	68db      	ldr	r3, [r3, #12]
 8008526:	4929      	ldr	r1, [pc, #164]	; (80085cc <HAL_RCC_OscConfig+0x288>)
 8008528:	4313      	orrs	r3, r2
 800852a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800852c:	f7fa fe42 	bl	80031b4 <HAL_GetTick>
 8008530:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008532:	e008      	b.n	8008546 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008534:	f7fa fe3e 	bl	80031b4 <HAL_GetTick>
 8008538:	4602      	mov	r2, r0
 800853a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	2b02      	cmp	r3, #2
 8008540:	d901      	bls.n	8008546 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8008542:	2303      	movs	r3, #3
 8008544:	e307      	b.n	8008b56 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008546:	4b21      	ldr	r3, [pc, #132]	; (80085cc <HAL_RCC_OscConfig+0x288>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f003 0304 	and.w	r3, r3, #4
 800854e:	2b00      	cmp	r3, #0
 8008550:	d0f0      	beq.n	8008534 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008552:	f7fa fe5d 	bl	8003210 <HAL_GetREVID>
 8008556:	4602      	mov	r2, r0
 8008558:	f241 0303 	movw	r3, #4099	; 0x1003
 800855c:	429a      	cmp	r2, r3
 800855e:	d817      	bhi.n	8008590 <HAL_RCC_OscConfig+0x24c>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	691b      	ldr	r3, [r3, #16]
 8008564:	2b40      	cmp	r3, #64	; 0x40
 8008566:	d108      	bne.n	800857a <HAL_RCC_OscConfig+0x236>
 8008568:	4b18      	ldr	r3, [pc, #96]	; (80085cc <HAL_RCC_OscConfig+0x288>)
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008570:	4a16      	ldr	r2, [pc, #88]	; (80085cc <HAL_RCC_OscConfig+0x288>)
 8008572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008576:	6053      	str	r3, [r2, #4]
 8008578:	e030      	b.n	80085dc <HAL_RCC_OscConfig+0x298>
 800857a:	4b14      	ldr	r3, [pc, #80]	; (80085cc <HAL_RCC_OscConfig+0x288>)
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	691b      	ldr	r3, [r3, #16]
 8008586:	031b      	lsls	r3, r3, #12
 8008588:	4910      	ldr	r1, [pc, #64]	; (80085cc <HAL_RCC_OscConfig+0x288>)
 800858a:	4313      	orrs	r3, r2
 800858c:	604b      	str	r3, [r1, #4]
 800858e:	e025      	b.n	80085dc <HAL_RCC_OscConfig+0x298>
 8008590:	4b0e      	ldr	r3, [pc, #56]	; (80085cc <HAL_RCC_OscConfig+0x288>)
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	691b      	ldr	r3, [r3, #16]
 800859c:	061b      	lsls	r3, r3, #24
 800859e:	490b      	ldr	r1, [pc, #44]	; (80085cc <HAL_RCC_OscConfig+0x288>)
 80085a0:	4313      	orrs	r3, r2
 80085a2:	604b      	str	r3, [r1, #4]
 80085a4:	e01a      	b.n	80085dc <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80085a6:	4b09      	ldr	r3, [pc, #36]	; (80085cc <HAL_RCC_OscConfig+0x288>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a08      	ldr	r2, [pc, #32]	; (80085cc <HAL_RCC_OscConfig+0x288>)
 80085ac:	f023 0301 	bic.w	r3, r3, #1
 80085b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085b2:	f7fa fdff 	bl	80031b4 <HAL_GetTick>
 80085b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80085b8:	e00a      	b.n	80085d0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80085ba:	f7fa fdfb 	bl	80031b4 <HAL_GetTick>
 80085be:	4602      	mov	r2, r0
 80085c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c2:	1ad3      	subs	r3, r2, r3
 80085c4:	2b02      	cmp	r3, #2
 80085c6:	d903      	bls.n	80085d0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80085c8:	2303      	movs	r3, #3
 80085ca:	e2c4      	b.n	8008b56 <HAL_RCC_OscConfig+0x812>
 80085cc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80085d0:	4ba4      	ldr	r3, [pc, #656]	; (8008864 <HAL_RCC_OscConfig+0x520>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f003 0304 	and.w	r3, r3, #4
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d1ee      	bne.n	80085ba <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f003 0310 	and.w	r3, r3, #16
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	f000 80a9 	beq.w	800873c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80085ea:	4b9e      	ldr	r3, [pc, #632]	; (8008864 <HAL_RCC_OscConfig+0x520>)
 80085ec:	691b      	ldr	r3, [r3, #16]
 80085ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80085f2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80085f4:	4b9b      	ldr	r3, [pc, #620]	; (8008864 <HAL_RCC_OscConfig+0x520>)
 80085f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085f8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	2b08      	cmp	r3, #8
 80085fe:	d007      	beq.n	8008610 <HAL_RCC_OscConfig+0x2cc>
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	2b18      	cmp	r3, #24
 8008604:	d13a      	bne.n	800867c <HAL_RCC_OscConfig+0x338>
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	f003 0303 	and.w	r3, r3, #3
 800860c:	2b01      	cmp	r3, #1
 800860e:	d135      	bne.n	800867c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008610:	4b94      	ldr	r3, [pc, #592]	; (8008864 <HAL_RCC_OscConfig+0x520>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008618:	2b00      	cmp	r3, #0
 800861a:	d005      	beq.n	8008628 <HAL_RCC_OscConfig+0x2e4>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	69db      	ldr	r3, [r3, #28]
 8008620:	2b80      	cmp	r3, #128	; 0x80
 8008622:	d001      	beq.n	8008628 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	e296      	b.n	8008b56 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008628:	f7fa fdf2 	bl	8003210 <HAL_GetREVID>
 800862c:	4602      	mov	r2, r0
 800862e:	f241 0303 	movw	r3, #4099	; 0x1003
 8008632:	429a      	cmp	r2, r3
 8008634:	d817      	bhi.n	8008666 <HAL_RCC_OscConfig+0x322>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6a1b      	ldr	r3, [r3, #32]
 800863a:	2b20      	cmp	r3, #32
 800863c:	d108      	bne.n	8008650 <HAL_RCC_OscConfig+0x30c>
 800863e:	4b89      	ldr	r3, [pc, #548]	; (8008864 <HAL_RCC_OscConfig+0x520>)
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008646:	4a87      	ldr	r2, [pc, #540]	; (8008864 <HAL_RCC_OscConfig+0x520>)
 8008648:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800864c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800864e:	e075      	b.n	800873c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008650:	4b84      	ldr	r3, [pc, #528]	; (8008864 <HAL_RCC_OscConfig+0x520>)
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6a1b      	ldr	r3, [r3, #32]
 800865c:	069b      	lsls	r3, r3, #26
 800865e:	4981      	ldr	r1, [pc, #516]	; (8008864 <HAL_RCC_OscConfig+0x520>)
 8008660:	4313      	orrs	r3, r2
 8008662:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008664:	e06a      	b.n	800873c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008666:	4b7f      	ldr	r3, [pc, #508]	; (8008864 <HAL_RCC_OscConfig+0x520>)
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6a1b      	ldr	r3, [r3, #32]
 8008672:	061b      	lsls	r3, r3, #24
 8008674:	497b      	ldr	r1, [pc, #492]	; (8008864 <HAL_RCC_OscConfig+0x520>)
 8008676:	4313      	orrs	r3, r2
 8008678:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800867a:	e05f      	b.n	800873c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	69db      	ldr	r3, [r3, #28]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d042      	beq.n	800870a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008684:	4b77      	ldr	r3, [pc, #476]	; (8008864 <HAL_RCC_OscConfig+0x520>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a76      	ldr	r2, [pc, #472]	; (8008864 <HAL_RCC_OscConfig+0x520>)
 800868a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800868e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008690:	f7fa fd90 	bl	80031b4 <HAL_GetTick>
 8008694:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008696:	e008      	b.n	80086aa <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008698:	f7fa fd8c 	bl	80031b4 <HAL_GetTick>
 800869c:	4602      	mov	r2, r0
 800869e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a0:	1ad3      	subs	r3, r2, r3
 80086a2:	2b02      	cmp	r3, #2
 80086a4:	d901      	bls.n	80086aa <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80086a6:	2303      	movs	r3, #3
 80086a8:	e255      	b.n	8008b56 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80086aa:	4b6e      	ldr	r3, [pc, #440]	; (8008864 <HAL_RCC_OscConfig+0x520>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d0f0      	beq.n	8008698 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80086b6:	f7fa fdab 	bl	8003210 <HAL_GetREVID>
 80086ba:	4602      	mov	r2, r0
 80086bc:	f241 0303 	movw	r3, #4099	; 0x1003
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d817      	bhi.n	80086f4 <HAL_RCC_OscConfig+0x3b0>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6a1b      	ldr	r3, [r3, #32]
 80086c8:	2b20      	cmp	r3, #32
 80086ca:	d108      	bne.n	80086de <HAL_RCC_OscConfig+0x39a>
 80086cc:	4b65      	ldr	r3, [pc, #404]	; (8008864 <HAL_RCC_OscConfig+0x520>)
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80086d4:	4a63      	ldr	r2, [pc, #396]	; (8008864 <HAL_RCC_OscConfig+0x520>)
 80086d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086da:	6053      	str	r3, [r2, #4]
 80086dc:	e02e      	b.n	800873c <HAL_RCC_OscConfig+0x3f8>
 80086de:	4b61      	ldr	r3, [pc, #388]	; (8008864 <HAL_RCC_OscConfig+0x520>)
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a1b      	ldr	r3, [r3, #32]
 80086ea:	069b      	lsls	r3, r3, #26
 80086ec:	495d      	ldr	r1, [pc, #372]	; (8008864 <HAL_RCC_OscConfig+0x520>)
 80086ee:	4313      	orrs	r3, r2
 80086f0:	604b      	str	r3, [r1, #4]
 80086f2:	e023      	b.n	800873c <HAL_RCC_OscConfig+0x3f8>
 80086f4:	4b5b      	ldr	r3, [pc, #364]	; (8008864 <HAL_RCC_OscConfig+0x520>)
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6a1b      	ldr	r3, [r3, #32]
 8008700:	061b      	lsls	r3, r3, #24
 8008702:	4958      	ldr	r1, [pc, #352]	; (8008864 <HAL_RCC_OscConfig+0x520>)
 8008704:	4313      	orrs	r3, r2
 8008706:	60cb      	str	r3, [r1, #12]
 8008708:	e018      	b.n	800873c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800870a:	4b56      	ldr	r3, [pc, #344]	; (8008864 <HAL_RCC_OscConfig+0x520>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a55      	ldr	r2, [pc, #340]	; (8008864 <HAL_RCC_OscConfig+0x520>)
 8008710:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008714:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008716:	f7fa fd4d 	bl	80031b4 <HAL_GetTick>
 800871a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800871c:	e008      	b.n	8008730 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800871e:	f7fa fd49 	bl	80031b4 <HAL_GetTick>
 8008722:	4602      	mov	r2, r0
 8008724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008726:	1ad3      	subs	r3, r2, r3
 8008728:	2b02      	cmp	r3, #2
 800872a:	d901      	bls.n	8008730 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800872c:	2303      	movs	r3, #3
 800872e:	e212      	b.n	8008b56 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008730:	4b4c      	ldr	r3, [pc, #304]	; (8008864 <HAL_RCC_OscConfig+0x520>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008738:	2b00      	cmp	r3, #0
 800873a:	d1f0      	bne.n	800871e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f003 0308 	and.w	r3, r3, #8
 8008744:	2b00      	cmp	r3, #0
 8008746:	d036      	beq.n	80087b6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	695b      	ldr	r3, [r3, #20]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d019      	beq.n	8008784 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008750:	4b44      	ldr	r3, [pc, #272]	; (8008864 <HAL_RCC_OscConfig+0x520>)
 8008752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008754:	4a43      	ldr	r2, [pc, #268]	; (8008864 <HAL_RCC_OscConfig+0x520>)
 8008756:	f043 0301 	orr.w	r3, r3, #1
 800875a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800875c:	f7fa fd2a 	bl	80031b4 <HAL_GetTick>
 8008760:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008762:	e008      	b.n	8008776 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008764:	f7fa fd26 	bl	80031b4 <HAL_GetTick>
 8008768:	4602      	mov	r2, r0
 800876a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876c:	1ad3      	subs	r3, r2, r3
 800876e:	2b02      	cmp	r3, #2
 8008770:	d901      	bls.n	8008776 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8008772:	2303      	movs	r3, #3
 8008774:	e1ef      	b.n	8008b56 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008776:	4b3b      	ldr	r3, [pc, #236]	; (8008864 <HAL_RCC_OscConfig+0x520>)
 8008778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800877a:	f003 0302 	and.w	r3, r3, #2
 800877e:	2b00      	cmp	r3, #0
 8008780:	d0f0      	beq.n	8008764 <HAL_RCC_OscConfig+0x420>
 8008782:	e018      	b.n	80087b6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008784:	4b37      	ldr	r3, [pc, #220]	; (8008864 <HAL_RCC_OscConfig+0x520>)
 8008786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008788:	4a36      	ldr	r2, [pc, #216]	; (8008864 <HAL_RCC_OscConfig+0x520>)
 800878a:	f023 0301 	bic.w	r3, r3, #1
 800878e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008790:	f7fa fd10 	bl	80031b4 <HAL_GetTick>
 8008794:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008796:	e008      	b.n	80087aa <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008798:	f7fa fd0c 	bl	80031b4 <HAL_GetTick>
 800879c:	4602      	mov	r2, r0
 800879e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a0:	1ad3      	subs	r3, r2, r3
 80087a2:	2b02      	cmp	r3, #2
 80087a4:	d901      	bls.n	80087aa <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80087a6:	2303      	movs	r3, #3
 80087a8:	e1d5      	b.n	8008b56 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80087aa:	4b2e      	ldr	r3, [pc, #184]	; (8008864 <HAL_RCC_OscConfig+0x520>)
 80087ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087ae:	f003 0302 	and.w	r3, r3, #2
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d1f0      	bne.n	8008798 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f003 0320 	and.w	r3, r3, #32
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d036      	beq.n	8008830 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	699b      	ldr	r3, [r3, #24]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d019      	beq.n	80087fe <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80087ca:	4b26      	ldr	r3, [pc, #152]	; (8008864 <HAL_RCC_OscConfig+0x520>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a25      	ldr	r2, [pc, #148]	; (8008864 <HAL_RCC_OscConfig+0x520>)
 80087d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80087d4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80087d6:	f7fa fced 	bl	80031b4 <HAL_GetTick>
 80087da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80087dc:	e008      	b.n	80087f0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80087de:	f7fa fce9 	bl	80031b4 <HAL_GetTick>
 80087e2:	4602      	mov	r2, r0
 80087e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e6:	1ad3      	subs	r3, r2, r3
 80087e8:	2b02      	cmp	r3, #2
 80087ea:	d901      	bls.n	80087f0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80087ec:	2303      	movs	r3, #3
 80087ee:	e1b2      	b.n	8008b56 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80087f0:	4b1c      	ldr	r3, [pc, #112]	; (8008864 <HAL_RCC_OscConfig+0x520>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d0f0      	beq.n	80087de <HAL_RCC_OscConfig+0x49a>
 80087fc:	e018      	b.n	8008830 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80087fe:	4b19      	ldr	r3, [pc, #100]	; (8008864 <HAL_RCC_OscConfig+0x520>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a18      	ldr	r2, [pc, #96]	; (8008864 <HAL_RCC_OscConfig+0x520>)
 8008804:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008808:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800880a:	f7fa fcd3 	bl	80031b4 <HAL_GetTick>
 800880e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008810:	e008      	b.n	8008824 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008812:	f7fa fccf 	bl	80031b4 <HAL_GetTick>
 8008816:	4602      	mov	r2, r0
 8008818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881a:	1ad3      	subs	r3, r2, r3
 800881c:	2b02      	cmp	r3, #2
 800881e:	d901      	bls.n	8008824 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8008820:	2303      	movs	r3, #3
 8008822:	e198      	b.n	8008b56 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008824:	4b0f      	ldr	r3, [pc, #60]	; (8008864 <HAL_RCC_OscConfig+0x520>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800882c:	2b00      	cmp	r3, #0
 800882e:	d1f0      	bne.n	8008812 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f003 0304 	and.w	r3, r3, #4
 8008838:	2b00      	cmp	r3, #0
 800883a:	f000 8085 	beq.w	8008948 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800883e:	4b0a      	ldr	r3, [pc, #40]	; (8008868 <HAL_RCC_OscConfig+0x524>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a09      	ldr	r2, [pc, #36]	; (8008868 <HAL_RCC_OscConfig+0x524>)
 8008844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008848:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800884a:	f7fa fcb3 	bl	80031b4 <HAL_GetTick>
 800884e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008850:	e00c      	b.n	800886c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008852:	f7fa fcaf 	bl	80031b4 <HAL_GetTick>
 8008856:	4602      	mov	r2, r0
 8008858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885a:	1ad3      	subs	r3, r2, r3
 800885c:	2b64      	cmp	r3, #100	; 0x64
 800885e:	d905      	bls.n	800886c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8008860:	2303      	movs	r3, #3
 8008862:	e178      	b.n	8008b56 <HAL_RCC_OscConfig+0x812>
 8008864:	58024400 	.word	0x58024400
 8008868:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800886c:	4b96      	ldr	r3, [pc, #600]	; (8008ac8 <HAL_RCC_OscConfig+0x784>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008874:	2b00      	cmp	r3, #0
 8008876:	d0ec      	beq.n	8008852 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	689b      	ldr	r3, [r3, #8]
 800887c:	2b01      	cmp	r3, #1
 800887e:	d106      	bne.n	800888e <HAL_RCC_OscConfig+0x54a>
 8008880:	4b92      	ldr	r3, [pc, #584]	; (8008acc <HAL_RCC_OscConfig+0x788>)
 8008882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008884:	4a91      	ldr	r2, [pc, #580]	; (8008acc <HAL_RCC_OscConfig+0x788>)
 8008886:	f043 0301 	orr.w	r3, r3, #1
 800888a:	6713      	str	r3, [r2, #112]	; 0x70
 800888c:	e02d      	b.n	80088ea <HAL_RCC_OscConfig+0x5a6>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d10c      	bne.n	80088b0 <HAL_RCC_OscConfig+0x56c>
 8008896:	4b8d      	ldr	r3, [pc, #564]	; (8008acc <HAL_RCC_OscConfig+0x788>)
 8008898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800889a:	4a8c      	ldr	r2, [pc, #560]	; (8008acc <HAL_RCC_OscConfig+0x788>)
 800889c:	f023 0301 	bic.w	r3, r3, #1
 80088a0:	6713      	str	r3, [r2, #112]	; 0x70
 80088a2:	4b8a      	ldr	r3, [pc, #552]	; (8008acc <HAL_RCC_OscConfig+0x788>)
 80088a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088a6:	4a89      	ldr	r2, [pc, #548]	; (8008acc <HAL_RCC_OscConfig+0x788>)
 80088a8:	f023 0304 	bic.w	r3, r3, #4
 80088ac:	6713      	str	r3, [r2, #112]	; 0x70
 80088ae:	e01c      	b.n	80088ea <HAL_RCC_OscConfig+0x5a6>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	2b05      	cmp	r3, #5
 80088b6:	d10c      	bne.n	80088d2 <HAL_RCC_OscConfig+0x58e>
 80088b8:	4b84      	ldr	r3, [pc, #528]	; (8008acc <HAL_RCC_OscConfig+0x788>)
 80088ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088bc:	4a83      	ldr	r2, [pc, #524]	; (8008acc <HAL_RCC_OscConfig+0x788>)
 80088be:	f043 0304 	orr.w	r3, r3, #4
 80088c2:	6713      	str	r3, [r2, #112]	; 0x70
 80088c4:	4b81      	ldr	r3, [pc, #516]	; (8008acc <HAL_RCC_OscConfig+0x788>)
 80088c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088c8:	4a80      	ldr	r2, [pc, #512]	; (8008acc <HAL_RCC_OscConfig+0x788>)
 80088ca:	f043 0301 	orr.w	r3, r3, #1
 80088ce:	6713      	str	r3, [r2, #112]	; 0x70
 80088d0:	e00b      	b.n	80088ea <HAL_RCC_OscConfig+0x5a6>
 80088d2:	4b7e      	ldr	r3, [pc, #504]	; (8008acc <HAL_RCC_OscConfig+0x788>)
 80088d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088d6:	4a7d      	ldr	r2, [pc, #500]	; (8008acc <HAL_RCC_OscConfig+0x788>)
 80088d8:	f023 0301 	bic.w	r3, r3, #1
 80088dc:	6713      	str	r3, [r2, #112]	; 0x70
 80088de:	4b7b      	ldr	r3, [pc, #492]	; (8008acc <HAL_RCC_OscConfig+0x788>)
 80088e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088e2:	4a7a      	ldr	r2, [pc, #488]	; (8008acc <HAL_RCC_OscConfig+0x788>)
 80088e4:	f023 0304 	bic.w	r3, r3, #4
 80088e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d015      	beq.n	800891e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088f2:	f7fa fc5f 	bl	80031b4 <HAL_GetTick>
 80088f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80088f8:	e00a      	b.n	8008910 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80088fa:	f7fa fc5b 	bl	80031b4 <HAL_GetTick>
 80088fe:	4602      	mov	r2, r0
 8008900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008902:	1ad3      	subs	r3, r2, r3
 8008904:	f241 3288 	movw	r2, #5000	; 0x1388
 8008908:	4293      	cmp	r3, r2
 800890a:	d901      	bls.n	8008910 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800890c:	2303      	movs	r3, #3
 800890e:	e122      	b.n	8008b56 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008910:	4b6e      	ldr	r3, [pc, #440]	; (8008acc <HAL_RCC_OscConfig+0x788>)
 8008912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008914:	f003 0302 	and.w	r3, r3, #2
 8008918:	2b00      	cmp	r3, #0
 800891a:	d0ee      	beq.n	80088fa <HAL_RCC_OscConfig+0x5b6>
 800891c:	e014      	b.n	8008948 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800891e:	f7fa fc49 	bl	80031b4 <HAL_GetTick>
 8008922:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008924:	e00a      	b.n	800893c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008926:	f7fa fc45 	bl	80031b4 <HAL_GetTick>
 800892a:	4602      	mov	r2, r0
 800892c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892e:	1ad3      	subs	r3, r2, r3
 8008930:	f241 3288 	movw	r2, #5000	; 0x1388
 8008934:	4293      	cmp	r3, r2
 8008936:	d901      	bls.n	800893c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8008938:	2303      	movs	r3, #3
 800893a:	e10c      	b.n	8008b56 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800893c:	4b63      	ldr	r3, [pc, #396]	; (8008acc <HAL_RCC_OscConfig+0x788>)
 800893e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008940:	f003 0302 	and.w	r3, r3, #2
 8008944:	2b00      	cmp	r3, #0
 8008946:	d1ee      	bne.n	8008926 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894c:	2b00      	cmp	r3, #0
 800894e:	f000 8101 	beq.w	8008b54 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008952:	4b5e      	ldr	r3, [pc, #376]	; (8008acc <HAL_RCC_OscConfig+0x788>)
 8008954:	691b      	ldr	r3, [r3, #16]
 8008956:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800895a:	2b18      	cmp	r3, #24
 800895c:	f000 80bc 	beq.w	8008ad8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008964:	2b02      	cmp	r3, #2
 8008966:	f040 8095 	bne.w	8008a94 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800896a:	4b58      	ldr	r3, [pc, #352]	; (8008acc <HAL_RCC_OscConfig+0x788>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a57      	ldr	r2, [pc, #348]	; (8008acc <HAL_RCC_OscConfig+0x788>)
 8008970:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008974:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008976:	f7fa fc1d 	bl	80031b4 <HAL_GetTick>
 800897a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800897c:	e008      	b.n	8008990 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800897e:	f7fa fc19 	bl	80031b4 <HAL_GetTick>
 8008982:	4602      	mov	r2, r0
 8008984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008986:	1ad3      	subs	r3, r2, r3
 8008988:	2b02      	cmp	r3, #2
 800898a:	d901      	bls.n	8008990 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800898c:	2303      	movs	r3, #3
 800898e:	e0e2      	b.n	8008b56 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008990:	4b4e      	ldr	r3, [pc, #312]	; (8008acc <HAL_RCC_OscConfig+0x788>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008998:	2b00      	cmp	r3, #0
 800899a:	d1f0      	bne.n	800897e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800899c:	4b4b      	ldr	r3, [pc, #300]	; (8008acc <HAL_RCC_OscConfig+0x788>)
 800899e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80089a0:	4b4b      	ldr	r3, [pc, #300]	; (8008ad0 <HAL_RCC_OscConfig+0x78c>)
 80089a2:	4013      	ands	r3, r2
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80089ac:	0112      	lsls	r2, r2, #4
 80089ae:	430a      	orrs	r2, r1
 80089b0:	4946      	ldr	r1, [pc, #280]	; (8008acc <HAL_RCC_OscConfig+0x788>)
 80089b2:	4313      	orrs	r3, r2
 80089b4:	628b      	str	r3, [r1, #40]	; 0x28
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ba:	3b01      	subs	r3, #1
 80089bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089c4:	3b01      	subs	r3, #1
 80089c6:	025b      	lsls	r3, r3, #9
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	431a      	orrs	r2, r3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d0:	3b01      	subs	r3, #1
 80089d2:	041b      	lsls	r3, r3, #16
 80089d4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80089d8:	431a      	orrs	r2, r3
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089de:	3b01      	subs	r3, #1
 80089e0:	061b      	lsls	r3, r3, #24
 80089e2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80089e6:	4939      	ldr	r1, [pc, #228]	; (8008acc <HAL_RCC_OscConfig+0x788>)
 80089e8:	4313      	orrs	r3, r2
 80089ea:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80089ec:	4b37      	ldr	r3, [pc, #220]	; (8008acc <HAL_RCC_OscConfig+0x788>)
 80089ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f0:	4a36      	ldr	r2, [pc, #216]	; (8008acc <HAL_RCC_OscConfig+0x788>)
 80089f2:	f023 0301 	bic.w	r3, r3, #1
 80089f6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80089f8:	4b34      	ldr	r3, [pc, #208]	; (8008acc <HAL_RCC_OscConfig+0x788>)
 80089fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089fc:	4b35      	ldr	r3, [pc, #212]	; (8008ad4 <HAL_RCC_OscConfig+0x790>)
 80089fe:	4013      	ands	r3, r2
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008a04:	00d2      	lsls	r2, r2, #3
 8008a06:	4931      	ldr	r1, [pc, #196]	; (8008acc <HAL_RCC_OscConfig+0x788>)
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008a0c:	4b2f      	ldr	r3, [pc, #188]	; (8008acc <HAL_RCC_OscConfig+0x788>)
 8008a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a10:	f023 020c 	bic.w	r2, r3, #12
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a18:	492c      	ldr	r1, [pc, #176]	; (8008acc <HAL_RCC_OscConfig+0x788>)
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008a1e:	4b2b      	ldr	r3, [pc, #172]	; (8008acc <HAL_RCC_OscConfig+0x788>)
 8008a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a22:	f023 0202 	bic.w	r2, r3, #2
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a2a:	4928      	ldr	r1, [pc, #160]	; (8008acc <HAL_RCC_OscConfig+0x788>)
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008a30:	4b26      	ldr	r3, [pc, #152]	; (8008acc <HAL_RCC_OscConfig+0x788>)
 8008a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a34:	4a25      	ldr	r2, [pc, #148]	; (8008acc <HAL_RCC_OscConfig+0x788>)
 8008a36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a3c:	4b23      	ldr	r3, [pc, #140]	; (8008acc <HAL_RCC_OscConfig+0x788>)
 8008a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a40:	4a22      	ldr	r2, [pc, #136]	; (8008acc <HAL_RCC_OscConfig+0x788>)
 8008a42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008a48:	4b20      	ldr	r3, [pc, #128]	; (8008acc <HAL_RCC_OscConfig+0x788>)
 8008a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a4c:	4a1f      	ldr	r2, [pc, #124]	; (8008acc <HAL_RCC_OscConfig+0x788>)
 8008a4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008a52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008a54:	4b1d      	ldr	r3, [pc, #116]	; (8008acc <HAL_RCC_OscConfig+0x788>)
 8008a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a58:	4a1c      	ldr	r2, [pc, #112]	; (8008acc <HAL_RCC_OscConfig+0x788>)
 8008a5a:	f043 0301 	orr.w	r3, r3, #1
 8008a5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a60:	4b1a      	ldr	r3, [pc, #104]	; (8008acc <HAL_RCC_OscConfig+0x788>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a19      	ldr	r2, [pc, #100]	; (8008acc <HAL_RCC_OscConfig+0x788>)
 8008a66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a6c:	f7fa fba2 	bl	80031b4 <HAL_GetTick>
 8008a70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008a72:	e008      	b.n	8008a86 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a74:	f7fa fb9e 	bl	80031b4 <HAL_GetTick>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7c:	1ad3      	subs	r3, r2, r3
 8008a7e:	2b02      	cmp	r3, #2
 8008a80:	d901      	bls.n	8008a86 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8008a82:	2303      	movs	r3, #3
 8008a84:	e067      	b.n	8008b56 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008a86:	4b11      	ldr	r3, [pc, #68]	; (8008acc <HAL_RCC_OscConfig+0x788>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d0f0      	beq.n	8008a74 <HAL_RCC_OscConfig+0x730>
 8008a92:	e05f      	b.n	8008b54 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a94:	4b0d      	ldr	r3, [pc, #52]	; (8008acc <HAL_RCC_OscConfig+0x788>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a0c      	ldr	r2, [pc, #48]	; (8008acc <HAL_RCC_OscConfig+0x788>)
 8008a9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aa0:	f7fa fb88 	bl	80031b4 <HAL_GetTick>
 8008aa4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008aa6:	e008      	b.n	8008aba <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008aa8:	f7fa fb84 	bl	80031b4 <HAL_GetTick>
 8008aac:	4602      	mov	r2, r0
 8008aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab0:	1ad3      	subs	r3, r2, r3
 8008ab2:	2b02      	cmp	r3, #2
 8008ab4:	d901      	bls.n	8008aba <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8008ab6:	2303      	movs	r3, #3
 8008ab8:	e04d      	b.n	8008b56 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008aba:	4b04      	ldr	r3, [pc, #16]	; (8008acc <HAL_RCC_OscConfig+0x788>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d1f0      	bne.n	8008aa8 <HAL_RCC_OscConfig+0x764>
 8008ac6:	e045      	b.n	8008b54 <HAL_RCC_OscConfig+0x810>
 8008ac8:	58024800 	.word	0x58024800
 8008acc:	58024400 	.word	0x58024400
 8008ad0:	fffffc0c 	.word	0xfffffc0c
 8008ad4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008ad8:	4b21      	ldr	r3, [pc, #132]	; (8008b60 <HAL_RCC_OscConfig+0x81c>)
 8008ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008adc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008ade:	4b20      	ldr	r3, [pc, #128]	; (8008b60 <HAL_RCC_OscConfig+0x81c>)
 8008ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ae2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d031      	beq.n	8008b50 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	f003 0203 	and.w	r2, r3, #3
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d12a      	bne.n	8008b50 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	091b      	lsrs	r3, r3, #4
 8008afe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d122      	bne.n	8008b50 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b14:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d11a      	bne.n	8008b50 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	0a5b      	lsrs	r3, r3, #9
 8008b1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b26:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d111      	bne.n	8008b50 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	0c1b      	lsrs	r3, r3, #16
 8008b30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b38:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d108      	bne.n	8008b50 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	0e1b      	lsrs	r3, r3, #24
 8008b42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b4a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d001      	beq.n	8008b54 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	e000      	b.n	8008b56 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3730      	adds	r7, #48	; 0x30
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	bf00      	nop
 8008b60:	58024400 	.word	0x58024400

08008b64 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b086      	sub	sp, #24
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d101      	bne.n	8008b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008b74:	2301      	movs	r3, #1
 8008b76:	e19c      	b.n	8008eb2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008b78:	4b8a      	ldr	r3, [pc, #552]	; (8008da4 <HAL_RCC_ClockConfig+0x240>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f003 030f 	and.w	r3, r3, #15
 8008b80:	683a      	ldr	r2, [r7, #0]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d910      	bls.n	8008ba8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b86:	4b87      	ldr	r3, [pc, #540]	; (8008da4 <HAL_RCC_ClockConfig+0x240>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f023 020f 	bic.w	r2, r3, #15
 8008b8e:	4985      	ldr	r1, [pc, #532]	; (8008da4 <HAL_RCC_ClockConfig+0x240>)
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b96:	4b83      	ldr	r3, [pc, #524]	; (8008da4 <HAL_RCC_ClockConfig+0x240>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f003 030f 	and.w	r3, r3, #15
 8008b9e:	683a      	ldr	r2, [r7, #0]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d001      	beq.n	8008ba8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	e184      	b.n	8008eb2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f003 0304 	and.w	r3, r3, #4
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d010      	beq.n	8008bd6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	691a      	ldr	r2, [r3, #16]
 8008bb8:	4b7b      	ldr	r3, [pc, #492]	; (8008da8 <HAL_RCC_ClockConfig+0x244>)
 8008bba:	699b      	ldr	r3, [r3, #24]
 8008bbc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d908      	bls.n	8008bd6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008bc4:	4b78      	ldr	r3, [pc, #480]	; (8008da8 <HAL_RCC_ClockConfig+0x244>)
 8008bc6:	699b      	ldr	r3, [r3, #24]
 8008bc8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	691b      	ldr	r3, [r3, #16]
 8008bd0:	4975      	ldr	r1, [pc, #468]	; (8008da8 <HAL_RCC_ClockConfig+0x244>)
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f003 0308 	and.w	r3, r3, #8
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d010      	beq.n	8008c04 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	695a      	ldr	r2, [r3, #20]
 8008be6:	4b70      	ldr	r3, [pc, #448]	; (8008da8 <HAL_RCC_ClockConfig+0x244>)
 8008be8:	69db      	ldr	r3, [r3, #28]
 8008bea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d908      	bls.n	8008c04 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008bf2:	4b6d      	ldr	r3, [pc, #436]	; (8008da8 <HAL_RCC_ClockConfig+0x244>)
 8008bf4:	69db      	ldr	r3, [r3, #28]
 8008bf6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	695b      	ldr	r3, [r3, #20]
 8008bfe:	496a      	ldr	r1, [pc, #424]	; (8008da8 <HAL_RCC_ClockConfig+0x244>)
 8008c00:	4313      	orrs	r3, r2
 8008c02:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f003 0310 	and.w	r3, r3, #16
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d010      	beq.n	8008c32 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	699a      	ldr	r2, [r3, #24]
 8008c14:	4b64      	ldr	r3, [pc, #400]	; (8008da8 <HAL_RCC_ClockConfig+0x244>)
 8008c16:	69db      	ldr	r3, [r3, #28]
 8008c18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d908      	bls.n	8008c32 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008c20:	4b61      	ldr	r3, [pc, #388]	; (8008da8 <HAL_RCC_ClockConfig+0x244>)
 8008c22:	69db      	ldr	r3, [r3, #28]
 8008c24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	699b      	ldr	r3, [r3, #24]
 8008c2c:	495e      	ldr	r1, [pc, #376]	; (8008da8 <HAL_RCC_ClockConfig+0x244>)
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f003 0320 	and.w	r3, r3, #32
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d010      	beq.n	8008c60 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	69da      	ldr	r2, [r3, #28]
 8008c42:	4b59      	ldr	r3, [pc, #356]	; (8008da8 <HAL_RCC_ClockConfig+0x244>)
 8008c44:	6a1b      	ldr	r3, [r3, #32]
 8008c46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d908      	bls.n	8008c60 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008c4e:	4b56      	ldr	r3, [pc, #344]	; (8008da8 <HAL_RCC_ClockConfig+0x244>)
 8008c50:	6a1b      	ldr	r3, [r3, #32]
 8008c52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	69db      	ldr	r3, [r3, #28]
 8008c5a:	4953      	ldr	r1, [pc, #332]	; (8008da8 <HAL_RCC_ClockConfig+0x244>)
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f003 0302 	and.w	r3, r3, #2
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d010      	beq.n	8008c8e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	68da      	ldr	r2, [r3, #12]
 8008c70:	4b4d      	ldr	r3, [pc, #308]	; (8008da8 <HAL_RCC_ClockConfig+0x244>)
 8008c72:	699b      	ldr	r3, [r3, #24]
 8008c74:	f003 030f 	and.w	r3, r3, #15
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d908      	bls.n	8008c8e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c7c:	4b4a      	ldr	r3, [pc, #296]	; (8008da8 <HAL_RCC_ClockConfig+0x244>)
 8008c7e:	699b      	ldr	r3, [r3, #24]
 8008c80:	f023 020f 	bic.w	r2, r3, #15
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	4947      	ldr	r1, [pc, #284]	; (8008da8 <HAL_RCC_ClockConfig+0x244>)
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f003 0301 	and.w	r3, r3, #1
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d055      	beq.n	8008d46 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008c9a:	4b43      	ldr	r3, [pc, #268]	; (8008da8 <HAL_RCC_ClockConfig+0x244>)
 8008c9c:	699b      	ldr	r3, [r3, #24]
 8008c9e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	4940      	ldr	r1, [pc, #256]	; (8008da8 <HAL_RCC_ClockConfig+0x244>)
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	2b02      	cmp	r3, #2
 8008cb2:	d107      	bne.n	8008cc4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008cb4:	4b3c      	ldr	r3, [pc, #240]	; (8008da8 <HAL_RCC_ClockConfig+0x244>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d121      	bne.n	8008d04 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	e0f6      	b.n	8008eb2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	2b03      	cmp	r3, #3
 8008cca:	d107      	bne.n	8008cdc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008ccc:	4b36      	ldr	r3, [pc, #216]	; (8008da8 <HAL_RCC_ClockConfig+0x244>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d115      	bne.n	8008d04 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	e0ea      	b.n	8008eb2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d107      	bne.n	8008cf4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008ce4:	4b30      	ldr	r3, [pc, #192]	; (8008da8 <HAL_RCC_ClockConfig+0x244>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d109      	bne.n	8008d04 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	e0de      	b.n	8008eb2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008cf4:	4b2c      	ldr	r3, [pc, #176]	; (8008da8 <HAL_RCC_ClockConfig+0x244>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f003 0304 	and.w	r3, r3, #4
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d101      	bne.n	8008d04 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008d00:	2301      	movs	r3, #1
 8008d02:	e0d6      	b.n	8008eb2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008d04:	4b28      	ldr	r3, [pc, #160]	; (8008da8 <HAL_RCC_ClockConfig+0x244>)
 8008d06:	691b      	ldr	r3, [r3, #16]
 8008d08:	f023 0207 	bic.w	r2, r3, #7
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	4925      	ldr	r1, [pc, #148]	; (8008da8 <HAL_RCC_ClockConfig+0x244>)
 8008d12:	4313      	orrs	r3, r2
 8008d14:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d16:	f7fa fa4d 	bl	80031b4 <HAL_GetTick>
 8008d1a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d1c:	e00a      	b.n	8008d34 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d1e:	f7fa fa49 	bl	80031b4 <HAL_GetTick>
 8008d22:	4602      	mov	r2, r0
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	1ad3      	subs	r3, r2, r3
 8008d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d901      	bls.n	8008d34 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008d30:	2303      	movs	r3, #3
 8008d32:	e0be      	b.n	8008eb2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d34:	4b1c      	ldr	r3, [pc, #112]	; (8008da8 <HAL_RCC_ClockConfig+0x244>)
 8008d36:	691b      	ldr	r3, [r3, #16]
 8008d38:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	00db      	lsls	r3, r3, #3
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d1eb      	bne.n	8008d1e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f003 0302 	and.w	r3, r3, #2
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d010      	beq.n	8008d74 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	68da      	ldr	r2, [r3, #12]
 8008d56:	4b14      	ldr	r3, [pc, #80]	; (8008da8 <HAL_RCC_ClockConfig+0x244>)
 8008d58:	699b      	ldr	r3, [r3, #24]
 8008d5a:	f003 030f 	and.w	r3, r3, #15
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d208      	bcs.n	8008d74 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d62:	4b11      	ldr	r3, [pc, #68]	; (8008da8 <HAL_RCC_ClockConfig+0x244>)
 8008d64:	699b      	ldr	r3, [r3, #24]
 8008d66:	f023 020f 	bic.w	r2, r3, #15
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	68db      	ldr	r3, [r3, #12]
 8008d6e:	490e      	ldr	r1, [pc, #56]	; (8008da8 <HAL_RCC_ClockConfig+0x244>)
 8008d70:	4313      	orrs	r3, r2
 8008d72:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008d74:	4b0b      	ldr	r3, [pc, #44]	; (8008da4 <HAL_RCC_ClockConfig+0x240>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f003 030f 	and.w	r3, r3, #15
 8008d7c:	683a      	ldr	r2, [r7, #0]
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d214      	bcs.n	8008dac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d82:	4b08      	ldr	r3, [pc, #32]	; (8008da4 <HAL_RCC_ClockConfig+0x240>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f023 020f 	bic.w	r2, r3, #15
 8008d8a:	4906      	ldr	r1, [pc, #24]	; (8008da4 <HAL_RCC_ClockConfig+0x240>)
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d92:	4b04      	ldr	r3, [pc, #16]	; (8008da4 <HAL_RCC_ClockConfig+0x240>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f003 030f 	and.w	r3, r3, #15
 8008d9a:	683a      	ldr	r2, [r7, #0]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d005      	beq.n	8008dac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008da0:	2301      	movs	r3, #1
 8008da2:	e086      	b.n	8008eb2 <HAL_RCC_ClockConfig+0x34e>
 8008da4:	52002000 	.word	0x52002000
 8008da8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f003 0304 	and.w	r3, r3, #4
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d010      	beq.n	8008dda <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	691a      	ldr	r2, [r3, #16]
 8008dbc:	4b3f      	ldr	r3, [pc, #252]	; (8008ebc <HAL_RCC_ClockConfig+0x358>)
 8008dbe:	699b      	ldr	r3, [r3, #24]
 8008dc0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d208      	bcs.n	8008dda <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008dc8:	4b3c      	ldr	r3, [pc, #240]	; (8008ebc <HAL_RCC_ClockConfig+0x358>)
 8008dca:	699b      	ldr	r3, [r3, #24]
 8008dcc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	4939      	ldr	r1, [pc, #228]	; (8008ebc <HAL_RCC_ClockConfig+0x358>)
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f003 0308 	and.w	r3, r3, #8
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d010      	beq.n	8008e08 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	695a      	ldr	r2, [r3, #20]
 8008dea:	4b34      	ldr	r3, [pc, #208]	; (8008ebc <HAL_RCC_ClockConfig+0x358>)
 8008dec:	69db      	ldr	r3, [r3, #28]
 8008dee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d208      	bcs.n	8008e08 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008df6:	4b31      	ldr	r3, [pc, #196]	; (8008ebc <HAL_RCC_ClockConfig+0x358>)
 8008df8:	69db      	ldr	r3, [r3, #28]
 8008dfa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	695b      	ldr	r3, [r3, #20]
 8008e02:	492e      	ldr	r1, [pc, #184]	; (8008ebc <HAL_RCC_ClockConfig+0x358>)
 8008e04:	4313      	orrs	r3, r2
 8008e06:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f003 0310 	and.w	r3, r3, #16
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d010      	beq.n	8008e36 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	699a      	ldr	r2, [r3, #24]
 8008e18:	4b28      	ldr	r3, [pc, #160]	; (8008ebc <HAL_RCC_ClockConfig+0x358>)
 8008e1a:	69db      	ldr	r3, [r3, #28]
 8008e1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d208      	bcs.n	8008e36 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008e24:	4b25      	ldr	r3, [pc, #148]	; (8008ebc <HAL_RCC_ClockConfig+0x358>)
 8008e26:	69db      	ldr	r3, [r3, #28]
 8008e28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	699b      	ldr	r3, [r3, #24]
 8008e30:	4922      	ldr	r1, [pc, #136]	; (8008ebc <HAL_RCC_ClockConfig+0x358>)
 8008e32:	4313      	orrs	r3, r2
 8008e34:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f003 0320 	and.w	r3, r3, #32
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d010      	beq.n	8008e64 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	69da      	ldr	r2, [r3, #28]
 8008e46:	4b1d      	ldr	r3, [pc, #116]	; (8008ebc <HAL_RCC_ClockConfig+0x358>)
 8008e48:	6a1b      	ldr	r3, [r3, #32]
 8008e4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d208      	bcs.n	8008e64 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008e52:	4b1a      	ldr	r3, [pc, #104]	; (8008ebc <HAL_RCC_ClockConfig+0x358>)
 8008e54:	6a1b      	ldr	r3, [r3, #32]
 8008e56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	69db      	ldr	r3, [r3, #28]
 8008e5e:	4917      	ldr	r1, [pc, #92]	; (8008ebc <HAL_RCC_ClockConfig+0x358>)
 8008e60:	4313      	orrs	r3, r2
 8008e62:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008e64:	f000 f844 	bl	8008ef0 <HAL_RCC_GetSysClockFreq>
 8008e68:	4601      	mov	r1, r0
 8008e6a:	4b14      	ldr	r3, [pc, #80]	; (8008ebc <HAL_RCC_ClockConfig+0x358>)
 8008e6c:	699b      	ldr	r3, [r3, #24]
 8008e6e:	0a1b      	lsrs	r3, r3, #8
 8008e70:	f003 030f 	and.w	r3, r3, #15
 8008e74:	4a12      	ldr	r2, [pc, #72]	; (8008ec0 <HAL_RCC_ClockConfig+0x35c>)
 8008e76:	5cd3      	ldrb	r3, [r2, r3]
 8008e78:	f003 031f 	and.w	r3, r3, #31
 8008e7c:	fa21 f303 	lsr.w	r3, r1, r3
 8008e80:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008e82:	4b0e      	ldr	r3, [pc, #56]	; (8008ebc <HAL_RCC_ClockConfig+0x358>)
 8008e84:	699b      	ldr	r3, [r3, #24]
 8008e86:	f003 030f 	and.w	r3, r3, #15
 8008e8a:	4a0d      	ldr	r2, [pc, #52]	; (8008ec0 <HAL_RCC_ClockConfig+0x35c>)
 8008e8c:	5cd3      	ldrb	r3, [r2, r3]
 8008e8e:	f003 031f 	and.w	r3, r3, #31
 8008e92:	693a      	ldr	r2, [r7, #16]
 8008e94:	fa22 f303 	lsr.w	r3, r2, r3
 8008e98:	4a0a      	ldr	r2, [pc, #40]	; (8008ec4 <HAL_RCC_ClockConfig+0x360>)
 8008e9a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008e9c:	4a0a      	ldr	r2, [pc, #40]	; (8008ec8 <HAL_RCC_ClockConfig+0x364>)
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008ea2:	4b0a      	ldr	r3, [pc, #40]	; (8008ecc <HAL_RCC_ClockConfig+0x368>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f7fa f93a 	bl	8003120 <HAL_InitTick>
 8008eac:	4603      	mov	r3, r0
 8008eae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3718      	adds	r7, #24
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
 8008eba:	bf00      	nop
 8008ebc:	58024400 	.word	0x58024400
 8008ec0:	08019908 	.word	0x08019908
 8008ec4:	24000048 	.word	0x24000048
 8008ec8:	24000044 	.word	0x24000044
 8008ecc:	2400004c 	.word	0x2400004c

08008ed0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8008ed4:	4b05      	ldr	r3, [pc, #20]	; (8008eec <HAL_RCC_EnableCSS+0x1c>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a04      	ldr	r2, [pc, #16]	; (8008eec <HAL_RCC_EnableCSS+0x1c>)
 8008eda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ede:	6013      	str	r3, [r2, #0]
}
 8008ee0:	bf00      	nop
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr
 8008eea:	bf00      	nop
 8008eec:	58024400 	.word	0x58024400

08008ef0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b089      	sub	sp, #36	; 0x24
 8008ef4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008ef6:	4baf      	ldr	r3, [pc, #700]	; (80091b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008ef8:	691b      	ldr	r3, [r3, #16]
 8008efa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008efe:	2b18      	cmp	r3, #24
 8008f00:	f200 814e 	bhi.w	80091a0 <HAL_RCC_GetSysClockFreq+0x2b0>
 8008f04:	a201      	add	r2, pc, #4	; (adr r2, 8008f0c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f0a:	bf00      	nop
 8008f0c:	08008f71 	.word	0x08008f71
 8008f10:	080091a1 	.word	0x080091a1
 8008f14:	080091a1 	.word	0x080091a1
 8008f18:	080091a1 	.word	0x080091a1
 8008f1c:	080091a1 	.word	0x080091a1
 8008f20:	080091a1 	.word	0x080091a1
 8008f24:	080091a1 	.word	0x080091a1
 8008f28:	080091a1 	.word	0x080091a1
 8008f2c:	08008f97 	.word	0x08008f97
 8008f30:	080091a1 	.word	0x080091a1
 8008f34:	080091a1 	.word	0x080091a1
 8008f38:	080091a1 	.word	0x080091a1
 8008f3c:	080091a1 	.word	0x080091a1
 8008f40:	080091a1 	.word	0x080091a1
 8008f44:	080091a1 	.word	0x080091a1
 8008f48:	080091a1 	.word	0x080091a1
 8008f4c:	08008f9d 	.word	0x08008f9d
 8008f50:	080091a1 	.word	0x080091a1
 8008f54:	080091a1 	.word	0x080091a1
 8008f58:	080091a1 	.word	0x080091a1
 8008f5c:	080091a1 	.word	0x080091a1
 8008f60:	080091a1 	.word	0x080091a1
 8008f64:	080091a1 	.word	0x080091a1
 8008f68:	080091a1 	.word	0x080091a1
 8008f6c:	08008fa3 	.word	0x08008fa3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f70:	4b90      	ldr	r3, [pc, #576]	; (80091b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f003 0320 	and.w	r3, r3, #32
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d009      	beq.n	8008f90 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f7c:	4b8d      	ldr	r3, [pc, #564]	; (80091b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	08db      	lsrs	r3, r3, #3
 8008f82:	f003 0303 	and.w	r3, r3, #3
 8008f86:	4a8c      	ldr	r2, [pc, #560]	; (80091b8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8008f88:	fa22 f303 	lsr.w	r3, r2, r3
 8008f8c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008f8e:	e10a      	b.n	80091a6 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008f90:	4b89      	ldr	r3, [pc, #548]	; (80091b8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8008f92:	61bb      	str	r3, [r7, #24]
    break;
 8008f94:	e107      	b.n	80091a6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008f96:	4b89      	ldr	r3, [pc, #548]	; (80091bc <HAL_RCC_GetSysClockFreq+0x2cc>)
 8008f98:	61bb      	str	r3, [r7, #24]
    break;
 8008f9a:	e104      	b.n	80091a6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008f9c:	4b88      	ldr	r3, [pc, #544]	; (80091c0 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8008f9e:	61bb      	str	r3, [r7, #24]
    break;
 8008fa0:	e101      	b.n	80091a6 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008fa2:	4b84      	ldr	r3, [pc, #528]	; (80091b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fa6:	f003 0303 	and.w	r3, r3, #3
 8008faa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008fac:	4b81      	ldr	r3, [pc, #516]	; (80091b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb0:	091b      	lsrs	r3, r3, #4
 8008fb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fb6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008fb8:	4b7e      	ldr	r3, [pc, #504]	; (80091b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fbc:	f003 0301 	and.w	r3, r3, #1
 8008fc0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008fc2:	4b7c      	ldr	r3, [pc, #496]	; (80091b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fc6:	08db      	lsrs	r3, r3, #3
 8008fc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008fcc:	68fa      	ldr	r2, [r7, #12]
 8008fce:	fb02 f303 	mul.w	r3, r2, r3
 8008fd2:	ee07 3a90 	vmov	s15, r3
 8008fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fda:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	f000 80da 	beq.w	800919a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d05a      	beq.n	80090a2 <HAL_RCC_GetSysClockFreq+0x1b2>
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d302      	bcc.n	8008ff6 <HAL_RCC_GetSysClockFreq+0x106>
 8008ff0:	2b02      	cmp	r3, #2
 8008ff2:	d078      	beq.n	80090e6 <HAL_RCC_GetSysClockFreq+0x1f6>
 8008ff4:	e099      	b.n	800912a <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ff6:	4b6f      	ldr	r3, [pc, #444]	; (80091b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f003 0320 	and.w	r3, r3, #32
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d02d      	beq.n	800905e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009002:	4b6c      	ldr	r3, [pc, #432]	; (80091b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	08db      	lsrs	r3, r3, #3
 8009008:	f003 0303 	and.w	r3, r3, #3
 800900c:	4a6a      	ldr	r2, [pc, #424]	; (80091b8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800900e:	fa22 f303 	lsr.w	r3, r2, r3
 8009012:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	ee07 3a90 	vmov	s15, r3
 800901a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	ee07 3a90 	vmov	s15, r3
 8009024:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009028:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800902c:	4b61      	ldr	r3, [pc, #388]	; (80091b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800902e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009034:	ee07 3a90 	vmov	s15, r3
 8009038:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800903c:	ed97 6a02 	vldr	s12, [r7, #8]
 8009040:	eddf 5a60 	vldr	s11, [pc, #384]	; 80091c4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8009044:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009048:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800904c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009050:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009054:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009058:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800905c:	e087      	b.n	800916e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	ee07 3a90 	vmov	s15, r3
 8009064:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009068:	eddf 6a57 	vldr	s13, [pc, #348]	; 80091c8 <HAL_RCC_GetSysClockFreq+0x2d8>
 800906c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009070:	4b50      	ldr	r3, [pc, #320]	; (80091b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009078:	ee07 3a90 	vmov	s15, r3
 800907c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009080:	ed97 6a02 	vldr	s12, [r7, #8]
 8009084:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80091c4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8009088:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800908c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009090:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009094:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009098:	ee67 7a27 	vmul.f32	s15, s14, s15
 800909c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090a0:	e065      	b.n	800916e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	ee07 3a90 	vmov	s15, r3
 80090a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ac:	eddf 6a47 	vldr	s13, [pc, #284]	; 80091cc <HAL_RCC_GetSysClockFreq+0x2dc>
 80090b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090b4:	4b3f      	ldr	r3, [pc, #252]	; (80091b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80090b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090bc:	ee07 3a90 	vmov	s15, r3
 80090c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090c4:	ed97 6a02 	vldr	s12, [r7, #8]
 80090c8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80091c4 <HAL_RCC_GetSysClockFreq+0x2d4>
 80090cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090e4:	e043      	b.n	800916e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	ee07 3a90 	vmov	s15, r3
 80090ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090f0:	eddf 6a37 	vldr	s13, [pc, #220]	; 80091d0 <HAL_RCC_GetSysClockFreq+0x2e0>
 80090f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090f8:	4b2e      	ldr	r3, [pc, #184]	; (80091b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80090fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009100:	ee07 3a90 	vmov	s15, r3
 8009104:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009108:	ed97 6a02 	vldr	s12, [r7, #8]
 800910c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80091c4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8009110:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009114:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009118:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800911c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009120:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009124:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009128:	e021      	b.n	800916e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	ee07 3a90 	vmov	s15, r3
 8009130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009134:	eddf 6a25 	vldr	s13, [pc, #148]	; 80091cc <HAL_RCC_GetSysClockFreq+0x2dc>
 8009138:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800913c:	4b1d      	ldr	r3, [pc, #116]	; (80091b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800913e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009144:	ee07 3a90 	vmov	s15, r3
 8009148:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800914c:	ed97 6a02 	vldr	s12, [r7, #8]
 8009150:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80091c4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8009154:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009158:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800915c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009160:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009164:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009168:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800916c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800916e:	4b11      	ldr	r3, [pc, #68]	; (80091b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009172:	0a5b      	lsrs	r3, r3, #9
 8009174:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009178:	3301      	adds	r3, #1
 800917a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	ee07 3a90 	vmov	s15, r3
 8009182:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009186:	edd7 6a07 	vldr	s13, [r7, #28]
 800918a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800918e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009192:	ee17 3a90 	vmov	r3, s15
 8009196:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009198:	e005      	b.n	80091a6 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800919a:	2300      	movs	r3, #0
 800919c:	61bb      	str	r3, [r7, #24]
    break;
 800919e:	e002      	b.n	80091a6 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80091a0:	4b06      	ldr	r3, [pc, #24]	; (80091bc <HAL_RCC_GetSysClockFreq+0x2cc>)
 80091a2:	61bb      	str	r3, [r7, #24]
    break;
 80091a4:	bf00      	nop
  }

  return sysclockfreq;
 80091a6:	69bb      	ldr	r3, [r7, #24]
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3724      	adds	r7, #36	; 0x24
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr
 80091b4:	58024400 	.word	0x58024400
 80091b8:	03d09000 	.word	0x03d09000
 80091bc:	003d0900 	.word	0x003d0900
 80091c0:	017d7840 	.word	0x017d7840
 80091c4:	46000000 	.word	0x46000000
 80091c8:	4c742400 	.word	0x4c742400
 80091cc:	4a742400 	.word	0x4a742400
 80091d0:	4bbebc20 	.word	0x4bbebc20

080091d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80091da:	f7ff fe89 	bl	8008ef0 <HAL_RCC_GetSysClockFreq>
 80091de:	4601      	mov	r1, r0
 80091e0:	4b10      	ldr	r3, [pc, #64]	; (8009224 <HAL_RCC_GetHCLKFreq+0x50>)
 80091e2:	699b      	ldr	r3, [r3, #24]
 80091e4:	0a1b      	lsrs	r3, r3, #8
 80091e6:	f003 030f 	and.w	r3, r3, #15
 80091ea:	4a0f      	ldr	r2, [pc, #60]	; (8009228 <HAL_RCC_GetHCLKFreq+0x54>)
 80091ec:	5cd3      	ldrb	r3, [r2, r3]
 80091ee:	f003 031f 	and.w	r3, r3, #31
 80091f2:	fa21 f303 	lsr.w	r3, r1, r3
 80091f6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80091f8:	4b0a      	ldr	r3, [pc, #40]	; (8009224 <HAL_RCC_GetHCLKFreq+0x50>)
 80091fa:	699b      	ldr	r3, [r3, #24]
 80091fc:	f003 030f 	and.w	r3, r3, #15
 8009200:	4a09      	ldr	r2, [pc, #36]	; (8009228 <HAL_RCC_GetHCLKFreq+0x54>)
 8009202:	5cd3      	ldrb	r3, [r2, r3]
 8009204:	f003 031f 	and.w	r3, r3, #31
 8009208:	687a      	ldr	r2, [r7, #4]
 800920a:	fa22 f303 	lsr.w	r3, r2, r3
 800920e:	4a07      	ldr	r2, [pc, #28]	; (800922c <HAL_RCC_GetHCLKFreq+0x58>)
 8009210:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009212:	4a07      	ldr	r2, [pc, #28]	; (8009230 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009218:	4b04      	ldr	r3, [pc, #16]	; (800922c <HAL_RCC_GetHCLKFreq+0x58>)
 800921a:	681b      	ldr	r3, [r3, #0]
}
 800921c:	4618      	mov	r0, r3
 800921e:	3708      	adds	r7, #8
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}
 8009224:	58024400 	.word	0x58024400
 8009228:	08019908 	.word	0x08019908
 800922c:	24000048 	.word	0x24000048
 8009230:	24000044 	.word	0x24000044

08009234 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009238:	f7ff ffcc 	bl	80091d4 <HAL_RCC_GetHCLKFreq>
 800923c:	4601      	mov	r1, r0
 800923e:	4b06      	ldr	r3, [pc, #24]	; (8009258 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009240:	69db      	ldr	r3, [r3, #28]
 8009242:	091b      	lsrs	r3, r3, #4
 8009244:	f003 0307 	and.w	r3, r3, #7
 8009248:	4a04      	ldr	r2, [pc, #16]	; (800925c <HAL_RCC_GetPCLK1Freq+0x28>)
 800924a:	5cd3      	ldrb	r3, [r2, r3]
 800924c:	f003 031f 	and.w	r3, r3, #31
 8009250:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009254:	4618      	mov	r0, r3
 8009256:	bd80      	pop	{r7, pc}
 8009258:	58024400 	.word	0x58024400
 800925c:	08019908 	.word	0x08019908

08009260 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009264:	f7ff ffb6 	bl	80091d4 <HAL_RCC_GetHCLKFreq>
 8009268:	4601      	mov	r1, r0
 800926a:	4b06      	ldr	r3, [pc, #24]	; (8009284 <HAL_RCC_GetPCLK2Freq+0x24>)
 800926c:	69db      	ldr	r3, [r3, #28]
 800926e:	0a1b      	lsrs	r3, r3, #8
 8009270:	f003 0307 	and.w	r3, r3, #7
 8009274:	4a04      	ldr	r2, [pc, #16]	; (8009288 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009276:	5cd3      	ldrb	r3, [r2, r3]
 8009278:	f003 031f 	and.w	r3, r3, #31
 800927c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009280:	4618      	mov	r0, r3
 8009282:	bd80      	pop	{r7, pc}
 8009284:	58024400 	.word	0x58024400
 8009288:	08019908 	.word	0x08019908

0800928c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8009290:	4b07      	ldr	r3, [pc, #28]	; (80092b0 <HAL_RCC_NMI_IRQHandler+0x24>)
 8009292:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800929c:	d105      	bne.n	80092aa <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 800929e:	f000 f809 	bl	80092b4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80092a2:	4b03      	ldr	r3, [pc, #12]	; (80092b0 <HAL_RCC_NMI_IRQHandler+0x24>)
 80092a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80092a8:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 80092aa:	bf00      	nop
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop
 80092b0:	58024400 	.word	0x58024400

080092b4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 80092b4:	b480      	push	{r7}
 80092b6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 80092b8:	bf00      	nop
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr
	...

080092c4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b086      	sub	sp, #24
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80092cc:	2300      	movs	r3, #0
 80092ce:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80092d0:	2300      	movs	r3, #0
 80092d2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d03d      	beq.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092e8:	d013      	beq.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80092ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092ee:	d802      	bhi.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d007      	beq.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80092f4:	e01f      	b.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80092f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80092fa:	d013      	beq.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80092fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009300:	d01c      	beq.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8009302:	e018      	b.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009304:	4baf      	ldr	r3, [pc, #700]	; (80095c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009308:	4aae      	ldr	r2, [pc, #696]	; (80095c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800930a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800930e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009310:	e015      	b.n	800933e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	3304      	adds	r3, #4
 8009316:	2102      	movs	r1, #2
 8009318:	4618      	mov	r0, r3
 800931a:	f001 fd33 	bl	800ad84 <RCCEx_PLL2_Config>
 800931e:	4603      	mov	r3, r0
 8009320:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009322:	e00c      	b.n	800933e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	3324      	adds	r3, #36	; 0x24
 8009328:	2102      	movs	r1, #2
 800932a:	4618      	mov	r0, r3
 800932c:	f001 fddc 	bl	800aee8 <RCCEx_PLL3_Config>
 8009330:	4603      	mov	r3, r0
 8009332:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009334:	e003      	b.n	800933e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009336:	2301      	movs	r3, #1
 8009338:	75fb      	strb	r3, [r7, #23]
      break;
 800933a:	e000      	b.n	800933e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800933c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800933e:	7dfb      	ldrb	r3, [r7, #23]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d109      	bne.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009344:	4b9f      	ldr	r3, [pc, #636]	; (80095c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009348:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009350:	499c      	ldr	r1, [pc, #624]	; (80095c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009352:	4313      	orrs	r3, r2
 8009354:	650b      	str	r3, [r1, #80]	; 0x50
 8009356:	e001      	b.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009358:	7dfb      	ldrb	r3, [r7, #23]
 800935a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009364:	2b00      	cmp	r3, #0
 8009366:	d03d      	beq.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800936c:	2b04      	cmp	r3, #4
 800936e:	d826      	bhi.n	80093be <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8009370:	a201      	add	r2, pc, #4	; (adr r2, 8009378 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8009372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009376:	bf00      	nop
 8009378:	0800938d 	.word	0x0800938d
 800937c:	0800939b 	.word	0x0800939b
 8009380:	080093ad 	.word	0x080093ad
 8009384:	080093c5 	.word	0x080093c5
 8009388:	080093c5 	.word	0x080093c5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800938c:	4b8d      	ldr	r3, [pc, #564]	; (80095c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800938e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009390:	4a8c      	ldr	r2, [pc, #560]	; (80095c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009392:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009396:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009398:	e015      	b.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	3304      	adds	r3, #4
 800939e:	2100      	movs	r1, #0
 80093a0:	4618      	mov	r0, r3
 80093a2:	f001 fcef 	bl	800ad84 <RCCEx_PLL2_Config>
 80093a6:	4603      	mov	r3, r0
 80093a8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80093aa:	e00c      	b.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	3324      	adds	r3, #36	; 0x24
 80093b0:	2100      	movs	r1, #0
 80093b2:	4618      	mov	r0, r3
 80093b4:	f001 fd98 	bl	800aee8 <RCCEx_PLL3_Config>
 80093b8:	4603      	mov	r3, r0
 80093ba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80093bc:	e003      	b.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093be:	2301      	movs	r3, #1
 80093c0:	75fb      	strb	r3, [r7, #23]
      break;
 80093c2:	e000      	b.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80093c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093c6:	7dfb      	ldrb	r3, [r7, #23]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d109      	bne.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80093cc:	4b7d      	ldr	r3, [pc, #500]	; (80095c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80093ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093d0:	f023 0207 	bic.w	r2, r3, #7
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093d8:	497a      	ldr	r1, [pc, #488]	; (80095c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80093da:	4313      	orrs	r3, r2
 80093dc:	650b      	str	r3, [r1, #80]	; 0x50
 80093de:	e001      	b.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093e0:	7dfb      	ldrb	r3, [r7, #23]
 80093e2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d03e      	beq.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093f4:	2b80      	cmp	r3, #128	; 0x80
 80093f6:	d01c      	beq.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80093f8:	2b80      	cmp	r3, #128	; 0x80
 80093fa:	d804      	bhi.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0x142>
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d008      	beq.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8009400:	2b40      	cmp	r3, #64	; 0x40
 8009402:	d00d      	beq.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8009404:	e01e      	b.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8009406:	2bc0      	cmp	r3, #192	; 0xc0
 8009408:	d01f      	beq.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x186>
 800940a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800940e:	d01e      	beq.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8009410:	e018      	b.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009412:	4b6c      	ldr	r3, [pc, #432]	; (80095c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009416:	4a6b      	ldr	r2, [pc, #428]	; (80095c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800941c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800941e:	e017      	b.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	3304      	adds	r3, #4
 8009424:	2100      	movs	r1, #0
 8009426:	4618      	mov	r0, r3
 8009428:	f001 fcac 	bl	800ad84 <RCCEx_PLL2_Config>
 800942c:	4603      	mov	r3, r0
 800942e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009430:	e00e      	b.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	3324      	adds	r3, #36	; 0x24
 8009436:	2100      	movs	r1, #0
 8009438:	4618      	mov	r0, r3
 800943a:	f001 fd55 	bl	800aee8 <RCCEx_PLL3_Config>
 800943e:	4603      	mov	r3, r0
 8009440:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009442:	e005      	b.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009444:	2301      	movs	r3, #1
 8009446:	75fb      	strb	r3, [r7, #23]
      break;
 8009448:	e002      	b.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800944a:	bf00      	nop
 800944c:	e000      	b.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800944e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009450:	7dfb      	ldrb	r3, [r7, #23]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d109      	bne.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009456:	4b5b      	ldr	r3, [pc, #364]	; (80095c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800945a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009462:	4958      	ldr	r1, [pc, #352]	; (80095c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009464:	4313      	orrs	r3, r2
 8009466:	650b      	str	r3, [r1, #80]	; 0x50
 8009468:	e001      	b.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800946a:	7dfb      	ldrb	r3, [r7, #23]
 800946c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009476:	2b00      	cmp	r3, #0
 8009478:	d044      	beq.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009480:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009484:	d01f      	beq.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8009486:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800948a:	d805      	bhi.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800948c:	2b00      	cmp	r3, #0
 800948e:	d00a      	beq.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009490:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009494:	d00e      	beq.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8009496:	e01f      	b.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8009498:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800949c:	d01f      	beq.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800949e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80094a2:	d01e      	beq.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80094a4:	e018      	b.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094a6:	4b47      	ldr	r3, [pc, #284]	; (80095c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80094a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094aa:	4a46      	ldr	r2, [pc, #280]	; (80095c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80094ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80094b2:	e017      	b.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	3304      	adds	r3, #4
 80094b8:	2100      	movs	r1, #0
 80094ba:	4618      	mov	r0, r3
 80094bc:	f001 fc62 	bl	800ad84 <RCCEx_PLL2_Config>
 80094c0:	4603      	mov	r3, r0
 80094c2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80094c4:	e00e      	b.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	3324      	adds	r3, #36	; 0x24
 80094ca:	2100      	movs	r1, #0
 80094cc:	4618      	mov	r0, r3
 80094ce:	f001 fd0b 	bl	800aee8 <RCCEx_PLL3_Config>
 80094d2:	4603      	mov	r3, r0
 80094d4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80094d6:	e005      	b.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80094d8:	2301      	movs	r3, #1
 80094da:	75fb      	strb	r3, [r7, #23]
      break;
 80094dc:	e002      	b.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80094de:	bf00      	nop
 80094e0:	e000      	b.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80094e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094e4:	7dfb      	ldrb	r3, [r7, #23]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d10a      	bne.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80094ea:	4b36      	ldr	r3, [pc, #216]	; (80095c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80094ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094ee:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80094f8:	4932      	ldr	r1, [pc, #200]	; (80095c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80094fa:	4313      	orrs	r3, r2
 80094fc:	658b      	str	r3, [r1, #88]	; 0x58
 80094fe:	e001      	b.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009500:	7dfb      	ldrb	r3, [r7, #23]
 8009502:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800950c:	2b00      	cmp	r3, #0
 800950e:	d044      	beq.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009516:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800951a:	d01f      	beq.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800951c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009520:	d805      	bhi.n	800952e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8009522:	2b00      	cmp	r3, #0
 8009524:	d00a      	beq.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x278>
 8009526:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800952a:	d00e      	beq.n	800954a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800952c:	e01f      	b.n	800956e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800952e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009532:	d01f      	beq.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009534:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009538:	d01e      	beq.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800953a:	e018      	b.n	800956e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800953c:	4b21      	ldr	r3, [pc, #132]	; (80095c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800953e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009540:	4a20      	ldr	r2, [pc, #128]	; (80095c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009546:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009548:	e017      	b.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	3304      	adds	r3, #4
 800954e:	2100      	movs	r1, #0
 8009550:	4618      	mov	r0, r3
 8009552:	f001 fc17 	bl	800ad84 <RCCEx_PLL2_Config>
 8009556:	4603      	mov	r3, r0
 8009558:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800955a:	e00e      	b.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	3324      	adds	r3, #36	; 0x24
 8009560:	2100      	movs	r1, #0
 8009562:	4618      	mov	r0, r3
 8009564:	f001 fcc0 	bl	800aee8 <RCCEx_PLL3_Config>
 8009568:	4603      	mov	r3, r0
 800956a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800956c:	e005      	b.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800956e:	2301      	movs	r3, #1
 8009570:	75fb      	strb	r3, [r7, #23]
      break;
 8009572:	e002      	b.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8009574:	bf00      	nop
 8009576:	e000      	b.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8009578:	bf00      	nop
    }

    if(ret == HAL_OK)
 800957a:	7dfb      	ldrb	r3, [r7, #23]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d10a      	bne.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009580:	4b10      	ldr	r3, [pc, #64]	; (80095c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009584:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800958e:	490d      	ldr	r1, [pc, #52]	; (80095c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009590:	4313      	orrs	r3, r2
 8009592:	658b      	str	r3, [r1, #88]	; 0x58
 8009594:	e001      	b.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009596:	7dfb      	ldrb	r3, [r7, #23]
 8009598:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d035      	beq.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095aa:	2b10      	cmp	r3, #16
 80095ac:	d00c      	beq.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80095ae:	2b10      	cmp	r3, #16
 80095b0:	d802      	bhi.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d01b      	beq.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80095b6:	e017      	b.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80095b8:	2b20      	cmp	r3, #32
 80095ba:	d00c      	beq.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80095bc:	2b30      	cmp	r3, #48	; 0x30
 80095be:	d018      	beq.n	80095f2 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80095c0:	e012      	b.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80095c2:	bf00      	nop
 80095c4:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095c8:	4baf      	ldr	r3, [pc, #700]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80095ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095cc:	4aae      	ldr	r2, [pc, #696]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80095ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80095d4:	e00e      	b.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	3304      	adds	r3, #4
 80095da:	2102      	movs	r1, #2
 80095dc:	4618      	mov	r0, r3
 80095de:	f001 fbd1 	bl	800ad84 <RCCEx_PLL2_Config>
 80095e2:	4603      	mov	r3, r0
 80095e4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80095e6:	e005      	b.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80095e8:	2301      	movs	r3, #1
 80095ea:	75fb      	strb	r3, [r7, #23]
      break;
 80095ec:	e002      	b.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80095ee:	bf00      	nop
 80095f0:	e000      	b.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80095f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095f4:	7dfb      	ldrb	r3, [r7, #23]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d109      	bne.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80095fa:	4ba3      	ldr	r3, [pc, #652]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80095fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009606:	49a0      	ldr	r1, [pc, #640]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009608:	4313      	orrs	r3, r2
 800960a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800960c:	e001      	b.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800960e:	7dfb      	ldrb	r3, [r7, #23]
 8009610:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800961a:	2b00      	cmp	r3, #0
 800961c:	d042      	beq.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009622:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009626:	d01f      	beq.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8009628:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800962c:	d805      	bhi.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800962e:	2b00      	cmp	r3, #0
 8009630:	d00a      	beq.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8009632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009636:	d00e      	beq.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8009638:	e01f      	b.n	800967a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800963a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800963e:	d01f      	beq.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8009640:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009644:	d01e      	beq.n	8009684 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8009646:	e018      	b.n	800967a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009648:	4b8f      	ldr	r3, [pc, #572]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800964a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800964c:	4a8e      	ldr	r2, [pc, #568]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800964e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009652:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009654:	e017      	b.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	3304      	adds	r3, #4
 800965a:	2100      	movs	r1, #0
 800965c:	4618      	mov	r0, r3
 800965e:	f001 fb91 	bl	800ad84 <RCCEx_PLL2_Config>
 8009662:	4603      	mov	r3, r0
 8009664:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009666:	e00e      	b.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	3324      	adds	r3, #36	; 0x24
 800966c:	2100      	movs	r1, #0
 800966e:	4618      	mov	r0, r3
 8009670:	f001 fc3a 	bl	800aee8 <RCCEx_PLL3_Config>
 8009674:	4603      	mov	r3, r0
 8009676:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009678:	e005      	b.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800967a:	2301      	movs	r3, #1
 800967c:	75fb      	strb	r3, [r7, #23]
      break;
 800967e:	e002      	b.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8009680:	bf00      	nop
 8009682:	e000      	b.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8009684:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009686:	7dfb      	ldrb	r3, [r7, #23]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d109      	bne.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800968c:	4b7e      	ldr	r3, [pc, #504]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800968e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009690:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009698:	497b      	ldr	r1, [pc, #492]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800969a:	4313      	orrs	r3, r2
 800969c:	650b      	str	r3, [r1, #80]	; 0x50
 800969e:	e001      	b.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096a0:	7dfb      	ldrb	r3, [r7, #23]
 80096a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d042      	beq.n	8009736 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096b8:	d01b      	beq.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80096ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096be:	d805      	bhi.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0x408>
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d022      	beq.n	800970a <HAL_RCCEx_PeriphCLKConfig+0x446>
 80096c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096c8:	d00a      	beq.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80096ca:	e01b      	b.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80096cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80096d0:	d01d      	beq.n	800970e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80096d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80096d6:	d01c      	beq.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80096d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80096dc:	d01b      	beq.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x452>
 80096de:	e011      	b.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	3304      	adds	r3, #4
 80096e4:	2101      	movs	r1, #1
 80096e6:	4618      	mov	r0, r3
 80096e8:	f001 fb4c 	bl	800ad84 <RCCEx_PLL2_Config>
 80096ec:	4603      	mov	r3, r0
 80096ee:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80096f0:	e012      	b.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	3324      	adds	r3, #36	; 0x24
 80096f6:	2101      	movs	r1, #1
 80096f8:	4618      	mov	r0, r3
 80096fa:	f001 fbf5 	bl	800aee8 <RCCEx_PLL3_Config>
 80096fe:	4603      	mov	r3, r0
 8009700:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009702:	e009      	b.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009704:	2301      	movs	r3, #1
 8009706:	75fb      	strb	r3, [r7, #23]
      break;
 8009708:	e006      	b.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800970a:	bf00      	nop
 800970c:	e004      	b.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800970e:	bf00      	nop
 8009710:	e002      	b.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8009712:	bf00      	nop
 8009714:	e000      	b.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8009716:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009718:	7dfb      	ldrb	r3, [r7, #23]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d109      	bne.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800971e:	4b5a      	ldr	r3, [pc, #360]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009722:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800972a:	4957      	ldr	r1, [pc, #348]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800972c:	4313      	orrs	r3, r2
 800972e:	650b      	str	r3, [r1, #80]	; 0x50
 8009730:	e001      	b.n	8009736 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009732:	7dfb      	ldrb	r3, [r7, #23]
 8009734:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800973e:	2b00      	cmp	r3, #0
 8009740:	d044      	beq.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009748:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800974c:	d01b      	beq.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800974e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009752:	d805      	bhi.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8009754:	2b00      	cmp	r3, #0
 8009756:	d022      	beq.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009758:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800975c:	d00a      	beq.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800975e:	e01b      	b.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8009760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009764:	d01d      	beq.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009766:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800976a:	d01c      	beq.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 800976c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009770:	d01b      	beq.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8009772:	e011      	b.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	3304      	adds	r3, #4
 8009778:	2101      	movs	r1, #1
 800977a:	4618      	mov	r0, r3
 800977c:	f001 fb02 	bl	800ad84 <RCCEx_PLL2_Config>
 8009780:	4603      	mov	r3, r0
 8009782:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009784:	e012      	b.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	3324      	adds	r3, #36	; 0x24
 800978a:	2101      	movs	r1, #1
 800978c:	4618      	mov	r0, r3
 800978e:	f001 fbab 	bl	800aee8 <RCCEx_PLL3_Config>
 8009792:	4603      	mov	r3, r0
 8009794:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009796:	e009      	b.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009798:	2301      	movs	r3, #1
 800979a:	75fb      	strb	r3, [r7, #23]
      break;
 800979c:	e006      	b.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800979e:	bf00      	nop
 80097a0:	e004      	b.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80097a2:	bf00      	nop
 80097a4:	e002      	b.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80097a6:	bf00      	nop
 80097a8:	e000      	b.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80097aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097ac:	7dfb      	ldrb	r3, [r7, #23]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d10a      	bne.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80097b2:	4b35      	ldr	r3, [pc, #212]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80097b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097b6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80097c0:	4931      	ldr	r1, [pc, #196]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80097c2:	4313      	orrs	r3, r2
 80097c4:	658b      	str	r3, [r1, #88]	; 0x58
 80097c6:	e001      	b.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097c8:	7dfb      	ldrb	r3, [r7, #23]
 80097ca:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d02d      	beq.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097e0:	d005      	beq.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80097e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097e6:	d009      	beq.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x538>
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d013      	beq.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80097ec:	e00f      	b.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097ee:	4b26      	ldr	r3, [pc, #152]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80097f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f2:	4a25      	ldr	r2, [pc, #148]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80097f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80097fa:	e00c      	b.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	3304      	adds	r3, #4
 8009800:	2101      	movs	r1, #1
 8009802:	4618      	mov	r0, r3
 8009804:	f001 fabe 	bl	800ad84 <RCCEx_PLL2_Config>
 8009808:	4603      	mov	r3, r0
 800980a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800980c:	e003      	b.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800980e:	2301      	movs	r3, #1
 8009810:	75fb      	strb	r3, [r7, #23]
      break;
 8009812:	e000      	b.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8009814:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009816:	7dfb      	ldrb	r3, [r7, #23]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d109      	bne.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800981c:	4b1a      	ldr	r3, [pc, #104]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800981e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009820:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009828:	4917      	ldr	r1, [pc, #92]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800982a:	4313      	orrs	r3, r2
 800982c:	650b      	str	r3, [r1, #80]	; 0x50
 800982e:	e001      	b.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009830:	7dfb      	ldrb	r3, [r7, #23]
 8009832:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800983c:	2b00      	cmp	r3, #0
 800983e:	d035      	beq.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009844:	2b03      	cmp	r3, #3
 8009846:	d81b      	bhi.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8009848:	a201      	add	r2, pc, #4	; (adr r2, 8009850 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800984a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800984e:	bf00      	nop
 8009850:	0800988d 	.word	0x0800988d
 8009854:	08009861 	.word	0x08009861
 8009858:	0800986f 	.word	0x0800986f
 800985c:	0800988d 	.word	0x0800988d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009860:	4b09      	ldr	r3, [pc, #36]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009864:	4a08      	ldr	r2, [pc, #32]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009866:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800986a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800986c:	e00f      	b.n	800988e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	3304      	adds	r3, #4
 8009872:	2102      	movs	r1, #2
 8009874:	4618      	mov	r0, r3
 8009876:	f001 fa85 	bl	800ad84 <RCCEx_PLL2_Config>
 800987a:	4603      	mov	r3, r0
 800987c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800987e:	e006      	b.n	800988e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009880:	2301      	movs	r3, #1
 8009882:	75fb      	strb	r3, [r7, #23]
      break;
 8009884:	e003      	b.n	800988e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8009886:	bf00      	nop
 8009888:	58024400 	.word	0x58024400
      break;
 800988c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800988e:	7dfb      	ldrb	r3, [r7, #23]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d109      	bne.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009894:	4bba      	ldr	r3, [pc, #744]	; (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009898:	f023 0203 	bic.w	r2, r3, #3
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098a0:	49b7      	ldr	r1, [pc, #732]	; (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80098a2:	4313      	orrs	r3, r2
 80098a4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80098a6:	e001      	b.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098a8:	7dfb      	ldrb	r3, [r7, #23]
 80098aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	f000 8086 	beq.w	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80098ba:	4bb2      	ldr	r3, [pc, #712]	; (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4ab1      	ldr	r2, [pc, #708]	; (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80098c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80098c6:	f7f9 fc75 	bl	80031b4 <HAL_GetTick>
 80098ca:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80098cc:	e009      	b.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80098ce:	f7f9 fc71 	bl	80031b4 <HAL_GetTick>
 80098d2:	4602      	mov	r2, r0
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	1ad3      	subs	r3, r2, r3
 80098d8:	2b64      	cmp	r3, #100	; 0x64
 80098da:	d902      	bls.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80098dc:	2303      	movs	r3, #3
 80098de:	75fb      	strb	r3, [r7, #23]
        break;
 80098e0:	e005      	b.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80098e2:	4ba8      	ldr	r3, [pc, #672]	; (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d0ef      	beq.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80098ee:	7dfb      	ldrb	r3, [r7, #23]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d166      	bne.n	80099c2 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80098f4:	4ba2      	ldr	r3, [pc, #648]	; (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80098f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80098fe:	4053      	eors	r3, r2
 8009900:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009904:	2b00      	cmp	r3, #0
 8009906:	d013      	beq.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009908:	4b9d      	ldr	r3, [pc, #628]	; (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800990a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800990c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009910:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009912:	4b9b      	ldr	r3, [pc, #620]	; (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009916:	4a9a      	ldr	r2, [pc, #616]	; (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800991c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800991e:	4b98      	ldr	r3, [pc, #608]	; (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009922:	4a97      	ldr	r2, [pc, #604]	; (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009924:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009928:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800992a:	4a95      	ldr	r2, [pc, #596]	; (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009936:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800993a:	d115      	bne.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800993c:	f7f9 fc3a 	bl	80031b4 <HAL_GetTick>
 8009940:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009942:	e00b      	b.n	800995c <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009944:	f7f9 fc36 	bl	80031b4 <HAL_GetTick>
 8009948:	4602      	mov	r2, r0
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	1ad3      	subs	r3, r2, r3
 800994e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009952:	4293      	cmp	r3, r2
 8009954:	d902      	bls.n	800995c <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8009956:	2303      	movs	r3, #3
 8009958:	75fb      	strb	r3, [r7, #23]
            break;
 800995a:	e005      	b.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800995c:	4b88      	ldr	r3, [pc, #544]	; (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800995e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009960:	f003 0302 	and.w	r3, r3, #2
 8009964:	2b00      	cmp	r3, #0
 8009966:	d0ed      	beq.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8009968:	7dfb      	ldrb	r3, [r7, #23]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d126      	bne.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009974:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009978:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800997c:	d10d      	bne.n	800999a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800997e:	4b80      	ldr	r3, [pc, #512]	; (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009980:	691b      	ldr	r3, [r3, #16]
 8009982:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800998c:	0919      	lsrs	r1, r3, #4
 800998e:	4b7e      	ldr	r3, [pc, #504]	; (8009b88 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8009990:	400b      	ands	r3, r1
 8009992:	497b      	ldr	r1, [pc, #492]	; (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009994:	4313      	orrs	r3, r2
 8009996:	610b      	str	r3, [r1, #16]
 8009998:	e005      	b.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800999a:	4b79      	ldr	r3, [pc, #484]	; (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800999c:	691b      	ldr	r3, [r3, #16]
 800999e:	4a78      	ldr	r2, [pc, #480]	; (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80099a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80099a4:	6113      	str	r3, [r2, #16]
 80099a6:	4b76      	ldr	r3, [pc, #472]	; (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80099a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80099b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80099b4:	4972      	ldr	r1, [pc, #456]	; (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80099b6:	4313      	orrs	r3, r2
 80099b8:	670b      	str	r3, [r1, #112]	; 0x70
 80099ba:	e004      	b.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80099bc:	7dfb      	ldrb	r3, [r7, #23]
 80099be:	75bb      	strb	r3, [r7, #22]
 80099c0:	e001      	b.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099c2:	7dfb      	ldrb	r3, [r7, #23]
 80099c4:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f003 0301 	and.w	r3, r3, #1
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d07d      	beq.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099d6:	2b28      	cmp	r3, #40	; 0x28
 80099d8:	d866      	bhi.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80099da:	a201      	add	r2, pc, #4	; (adr r2, 80099e0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80099dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e0:	08009aaf 	.word	0x08009aaf
 80099e4:	08009aa9 	.word	0x08009aa9
 80099e8:	08009aa9 	.word	0x08009aa9
 80099ec:	08009aa9 	.word	0x08009aa9
 80099f0:	08009aa9 	.word	0x08009aa9
 80099f4:	08009aa9 	.word	0x08009aa9
 80099f8:	08009aa9 	.word	0x08009aa9
 80099fc:	08009aa9 	.word	0x08009aa9
 8009a00:	08009a85 	.word	0x08009a85
 8009a04:	08009aa9 	.word	0x08009aa9
 8009a08:	08009aa9 	.word	0x08009aa9
 8009a0c:	08009aa9 	.word	0x08009aa9
 8009a10:	08009aa9 	.word	0x08009aa9
 8009a14:	08009aa9 	.word	0x08009aa9
 8009a18:	08009aa9 	.word	0x08009aa9
 8009a1c:	08009aa9 	.word	0x08009aa9
 8009a20:	08009a97 	.word	0x08009a97
 8009a24:	08009aa9 	.word	0x08009aa9
 8009a28:	08009aa9 	.word	0x08009aa9
 8009a2c:	08009aa9 	.word	0x08009aa9
 8009a30:	08009aa9 	.word	0x08009aa9
 8009a34:	08009aa9 	.word	0x08009aa9
 8009a38:	08009aa9 	.word	0x08009aa9
 8009a3c:	08009aa9 	.word	0x08009aa9
 8009a40:	08009aaf 	.word	0x08009aaf
 8009a44:	08009aa9 	.word	0x08009aa9
 8009a48:	08009aa9 	.word	0x08009aa9
 8009a4c:	08009aa9 	.word	0x08009aa9
 8009a50:	08009aa9 	.word	0x08009aa9
 8009a54:	08009aa9 	.word	0x08009aa9
 8009a58:	08009aa9 	.word	0x08009aa9
 8009a5c:	08009aa9 	.word	0x08009aa9
 8009a60:	08009aaf 	.word	0x08009aaf
 8009a64:	08009aa9 	.word	0x08009aa9
 8009a68:	08009aa9 	.word	0x08009aa9
 8009a6c:	08009aa9 	.word	0x08009aa9
 8009a70:	08009aa9 	.word	0x08009aa9
 8009a74:	08009aa9 	.word	0x08009aa9
 8009a78:	08009aa9 	.word	0x08009aa9
 8009a7c:	08009aa9 	.word	0x08009aa9
 8009a80:	08009aaf 	.word	0x08009aaf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	3304      	adds	r3, #4
 8009a88:	2101      	movs	r1, #1
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f001 f97a 	bl	800ad84 <RCCEx_PLL2_Config>
 8009a90:	4603      	mov	r3, r0
 8009a92:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009a94:	e00c      	b.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	3324      	adds	r3, #36	; 0x24
 8009a9a:	2101      	movs	r1, #1
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f001 fa23 	bl	800aee8 <RCCEx_PLL3_Config>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009aa6:	e003      	b.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	75fb      	strb	r3, [r7, #23]
      break;
 8009aac:	e000      	b.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8009aae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ab0:	7dfb      	ldrb	r3, [r7, #23]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d109      	bne.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009ab6:	4b32      	ldr	r3, [pc, #200]	; (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009aba:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ac2:	492f      	ldr	r1, [pc, #188]	; (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009ac4:	4313      	orrs	r3, r2
 8009ac6:	654b      	str	r3, [r1, #84]	; 0x54
 8009ac8:	e001      	b.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009aca:	7dfb      	ldrb	r3, [r7, #23]
 8009acc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f003 0302 	and.w	r3, r3, #2
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d037      	beq.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ade:	2b05      	cmp	r3, #5
 8009ae0:	d820      	bhi.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8009ae2:	a201      	add	r2, pc, #4	; (adr r2, 8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae8:	08009b2b 	.word	0x08009b2b
 8009aec:	08009b01 	.word	0x08009b01
 8009af0:	08009b13 	.word	0x08009b13
 8009af4:	08009b2b 	.word	0x08009b2b
 8009af8:	08009b2b 	.word	0x08009b2b
 8009afc:	08009b2b 	.word	0x08009b2b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	3304      	adds	r3, #4
 8009b04:	2101      	movs	r1, #1
 8009b06:	4618      	mov	r0, r3
 8009b08:	f001 f93c 	bl	800ad84 <RCCEx_PLL2_Config>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009b10:	e00c      	b.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	3324      	adds	r3, #36	; 0x24
 8009b16:	2101      	movs	r1, #1
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f001 f9e5 	bl	800aee8 <RCCEx_PLL3_Config>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009b22:	e003      	b.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b24:	2301      	movs	r3, #1
 8009b26:	75fb      	strb	r3, [r7, #23]
      break;
 8009b28:	e000      	b.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8009b2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b2c:	7dfb      	ldrb	r3, [r7, #23]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d109      	bne.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009b32:	4b13      	ldr	r3, [pc, #76]	; (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b36:	f023 0207 	bic.w	r2, r3, #7
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b3e:	4910      	ldr	r1, [pc, #64]	; (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009b40:	4313      	orrs	r3, r2
 8009b42:	654b      	str	r3, [r1, #84]	; 0x54
 8009b44:	e001      	b.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b46:	7dfb      	ldrb	r3, [r7, #23]
 8009b48:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f003 0304 	and.w	r3, r3, #4
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d040      	beq.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b5c:	2b05      	cmp	r3, #5
 8009b5e:	d827      	bhi.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8009b60:	a201      	add	r2, pc, #4	; (adr r2, 8009b68 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8009b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b66:	bf00      	nop
 8009b68:	08009bb7 	.word	0x08009bb7
 8009b6c:	08009b8d 	.word	0x08009b8d
 8009b70:	08009b9f 	.word	0x08009b9f
 8009b74:	08009bb7 	.word	0x08009bb7
 8009b78:	08009bb7 	.word	0x08009bb7
 8009b7c:	08009bb7 	.word	0x08009bb7
 8009b80:	58024400 	.word	0x58024400
 8009b84:	58024800 	.word	0x58024800
 8009b88:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	3304      	adds	r3, #4
 8009b90:	2101      	movs	r1, #1
 8009b92:	4618      	mov	r0, r3
 8009b94:	f001 f8f6 	bl	800ad84 <RCCEx_PLL2_Config>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009b9c:	e00c      	b.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	3324      	adds	r3, #36	; 0x24
 8009ba2:	2101      	movs	r1, #1
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f001 f99f 	bl	800aee8 <RCCEx_PLL3_Config>
 8009baa:	4603      	mov	r3, r0
 8009bac:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009bae:	e003      	b.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	75fb      	strb	r3, [r7, #23]
      break;
 8009bb4:	e000      	b.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8009bb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bb8:	7dfb      	ldrb	r3, [r7, #23]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d10a      	bne.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009bbe:	4bb2      	ldr	r3, [pc, #712]	; (8009e88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bc2:	f023 0207 	bic.w	r2, r3, #7
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bcc:	49ae      	ldr	r1, [pc, #696]	; (8009e88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	658b      	str	r3, [r1, #88]	; 0x58
 8009bd2:	e001      	b.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bd4:	7dfb      	ldrb	r3, [r7, #23]
 8009bd6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f003 0320 	and.w	r3, r3, #32
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d044      	beq.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bee:	d01b      	beq.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8009bf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bf4:	d805      	bhi.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d022      	beq.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8009bfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009bfe:	d00a      	beq.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8009c00:	e01b      	b.n	8009c3a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8009c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c06:	d01d      	beq.n	8009c44 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8009c08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c0c:	d01c      	beq.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8009c0e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c12:	d01b      	beq.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8009c14:	e011      	b.n	8009c3a <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	3304      	adds	r3, #4
 8009c1a:	2100      	movs	r1, #0
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f001 f8b1 	bl	800ad84 <RCCEx_PLL2_Config>
 8009c22:	4603      	mov	r3, r0
 8009c24:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009c26:	e012      	b.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	3324      	adds	r3, #36	; 0x24
 8009c2c:	2102      	movs	r1, #2
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f001 f95a 	bl	800aee8 <RCCEx_PLL3_Config>
 8009c34:	4603      	mov	r3, r0
 8009c36:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009c38:	e009      	b.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	75fb      	strb	r3, [r7, #23]
      break;
 8009c3e:	e006      	b.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8009c40:	bf00      	nop
 8009c42:	e004      	b.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8009c44:	bf00      	nop
 8009c46:	e002      	b.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8009c48:	bf00      	nop
 8009c4a:	e000      	b.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8009c4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c4e:	7dfb      	ldrb	r3, [r7, #23]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d10a      	bne.n	8009c6a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009c54:	4b8c      	ldr	r3, [pc, #560]	; (8009e88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c58:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c62:	4989      	ldr	r1, [pc, #548]	; (8009e88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009c64:	4313      	orrs	r3, r2
 8009c66:	654b      	str	r3, [r1, #84]	; 0x54
 8009c68:	e001      	b.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c6a:	7dfb      	ldrb	r3, [r7, #23]
 8009c6c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d044      	beq.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009c80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c84:	d01b      	beq.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8009c86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c8a:	d805      	bhi.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d022      	beq.n	8009cd6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8009c90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c94:	d00a      	beq.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8009c96:	e01b      	b.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8009c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c9c:	d01d      	beq.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8009c9e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009ca2:	d01c      	beq.n	8009cde <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8009ca4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009ca8:	d01b      	beq.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8009caa:	e011      	b.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	3304      	adds	r3, #4
 8009cb0:	2100      	movs	r1, #0
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f001 f866 	bl	800ad84 <RCCEx_PLL2_Config>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009cbc:	e012      	b.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	3324      	adds	r3, #36	; 0x24
 8009cc2:	2102      	movs	r1, #2
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f001 f90f 	bl	800aee8 <RCCEx_PLL3_Config>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009cce:	e009      	b.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	75fb      	strb	r3, [r7, #23]
      break;
 8009cd4:	e006      	b.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8009cd6:	bf00      	nop
 8009cd8:	e004      	b.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8009cda:	bf00      	nop
 8009cdc:	e002      	b.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8009cde:	bf00      	nop
 8009ce0:	e000      	b.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8009ce2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ce4:	7dfb      	ldrb	r3, [r7, #23]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d10a      	bne.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009cea:	4b67      	ldr	r3, [pc, #412]	; (8009e88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cee:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009cf8:	4963      	ldr	r1, [pc, #396]	; (8009e88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009cfa:	4313      	orrs	r3, r2
 8009cfc:	658b      	str	r3, [r1, #88]	; 0x58
 8009cfe:	e001      	b.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d00:	7dfb      	ldrb	r3, [r7, #23]
 8009d02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d044      	beq.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009d16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d1a:	d01b      	beq.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8009d1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d20:	d805      	bhi.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d022      	beq.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8009d26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d2a:	d00a      	beq.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009d2c:	e01b      	b.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8009d2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d32:	d01d      	beq.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8009d34:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009d38:	d01c      	beq.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8009d3a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009d3e:	d01b      	beq.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8009d40:	e011      	b.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	3304      	adds	r3, #4
 8009d46:	2100      	movs	r1, #0
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f001 f81b 	bl	800ad84 <RCCEx_PLL2_Config>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009d52:	e012      	b.n	8009d7a <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	3324      	adds	r3, #36	; 0x24
 8009d58:	2102      	movs	r1, #2
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f001 f8c4 	bl	800aee8 <RCCEx_PLL3_Config>
 8009d60:	4603      	mov	r3, r0
 8009d62:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009d64:	e009      	b.n	8009d7a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d66:	2301      	movs	r3, #1
 8009d68:	75fb      	strb	r3, [r7, #23]
      break;
 8009d6a:	e006      	b.n	8009d7a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8009d6c:	bf00      	nop
 8009d6e:	e004      	b.n	8009d7a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8009d70:	bf00      	nop
 8009d72:	e002      	b.n	8009d7a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8009d74:	bf00      	nop
 8009d76:	e000      	b.n	8009d7a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8009d78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d7a:	7dfb      	ldrb	r3, [r7, #23]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d10a      	bne.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009d80:	4b41      	ldr	r3, [pc, #260]	; (8009e88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d84:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009d8e:	493e      	ldr	r1, [pc, #248]	; (8009e88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009d90:	4313      	orrs	r3, r2
 8009d92:	658b      	str	r3, [r1, #88]	; 0x58
 8009d94:	e001      	b.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d96:	7dfb      	ldrb	r3, [r7, #23]
 8009d98:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f003 0308 	and.w	r3, r3, #8
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d01a      	beq.n	8009ddc <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009dac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009db0:	d10a      	bne.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	3324      	adds	r3, #36	; 0x24
 8009db6:	2102      	movs	r1, #2
 8009db8:	4618      	mov	r0, r3
 8009dba:	f001 f895 	bl	800aee8 <RCCEx_PLL3_Config>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d001      	beq.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009dc8:	4b2f      	ldr	r3, [pc, #188]	; (8009e88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dcc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009dd6:	492c      	ldr	r1, [pc, #176]	; (8009e88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f003 0310 	and.w	r3, r3, #16
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d01a      	beq.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009dee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009df2:	d10a      	bne.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	3324      	adds	r3, #36	; 0x24
 8009df8:	2102      	movs	r1, #2
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f001 f874 	bl	800aee8 <RCCEx_PLL3_Config>
 8009e00:	4603      	mov	r3, r0
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d001      	beq.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8009e06:	2301      	movs	r3, #1
 8009e08:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009e0a:	4b1f      	ldr	r3, [pc, #124]	; (8009e88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e18:	491b      	ldr	r1, [pc, #108]	; (8009e88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d032      	beq.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e34:	d00d      	beq.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8009e36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e3a:	d016      	beq.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d111      	bne.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	3304      	adds	r3, #4
 8009e44:	2100      	movs	r1, #0
 8009e46:	4618      	mov	r0, r3
 8009e48:	f000 ff9c 	bl	800ad84 <RCCEx_PLL2_Config>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009e50:	e00c      	b.n	8009e6c <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	3324      	adds	r3, #36	; 0x24
 8009e56:	2102      	movs	r1, #2
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f001 f845 	bl	800aee8 <RCCEx_PLL3_Config>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009e62:	e003      	b.n	8009e6c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e64:	2301      	movs	r3, #1
 8009e66:	75fb      	strb	r3, [r7, #23]
      break;
 8009e68:	e000      	b.n	8009e6c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8009e6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e6c:	7dfb      	ldrb	r3, [r7, #23]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d10c      	bne.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009e72:	4b05      	ldr	r3, [pc, #20]	; (8009e88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e76:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009e80:	4901      	ldr	r1, [pc, #4]	; (8009e88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009e82:	4313      	orrs	r3, r2
 8009e84:	658b      	str	r3, [r1, #88]	; 0x58
 8009e86:	e003      	b.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8009e88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e8c:	7dfb      	ldrb	r3, [r7, #23]
 8009e8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d02f      	beq.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ea2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009ea6:	d00c      	beq.n	8009ec2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009ea8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009eac:	d015      	beq.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8009eae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009eb2:	d10f      	bne.n	8009ed4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009eb4:	4b79      	ldr	r3, [pc, #484]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb8:	4a78      	ldr	r2, [pc, #480]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009eba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ebe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009ec0:	e00c      	b.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	3324      	adds	r3, #36	; 0x24
 8009ec6:	2101      	movs	r1, #1
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f001 f80d 	bl	800aee8 <RCCEx_PLL3_Config>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009ed2:	e003      	b.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	75fb      	strb	r3, [r7, #23]
      break;
 8009ed8:	e000      	b.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8009eda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009edc:	7dfb      	ldrb	r3, [r7, #23]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d10a      	bne.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009ee2:	4b6e      	ldr	r3, [pc, #440]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ee6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ef0:	496a      	ldr	r1, [pc, #424]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009ef2:	4313      	orrs	r3, r2
 8009ef4:	654b      	str	r3, [r1, #84]	; 0x54
 8009ef6:	e001      	b.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ef8:	7dfb      	ldrb	r3, [r7, #23]
 8009efa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d029      	beq.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d003      	beq.n	8009f18 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8009f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f14:	d007      	beq.n	8009f26 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8009f16:	e00f      	b.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f18:	4b60      	ldr	r3, [pc, #384]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f1c:	4a5f      	ldr	r2, [pc, #380]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009f1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009f24:	e00b      	b.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	3304      	adds	r3, #4
 8009f2a:	2102      	movs	r1, #2
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f000 ff29 	bl	800ad84 <RCCEx_PLL2_Config>
 8009f32:	4603      	mov	r3, r0
 8009f34:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009f36:	e002      	b.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8009f38:	2301      	movs	r3, #1
 8009f3a:	75fb      	strb	r3, [r7, #23]
      break;
 8009f3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f3e:	7dfb      	ldrb	r3, [r7, #23]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d109      	bne.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009f44:	4b55      	ldr	r3, [pc, #340]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f50:	4952      	ldr	r1, [pc, #328]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009f52:	4313      	orrs	r3, r2
 8009f54:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009f56:	e001      	b.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f58:	7dfb      	ldrb	r3, [r7, #23]
 8009f5a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d00a      	beq.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	3324      	adds	r3, #36	; 0x24
 8009f6c:	2102      	movs	r1, #2
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f000 ffba 	bl	800aee8 <RCCEx_PLL3_Config>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d001      	beq.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d02f      	beq.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f92:	d00c      	beq.n	8009fae <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009f94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f98:	d802      	bhi.n	8009fa0 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d011      	beq.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8009f9e:	e00d      	b.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8009fa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fa4:	d00f      	beq.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8009fa6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009faa:	d00e      	beq.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8009fac:	e006      	b.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fae:	4b3b      	ldr	r3, [pc, #236]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb2:	4a3a      	ldr	r2, [pc, #232]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fb8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009fba:	e007      	b.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	75fb      	strb	r3, [r7, #23]
      break;
 8009fc0:	e004      	b.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8009fc2:	bf00      	nop
 8009fc4:	e002      	b.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8009fc6:	bf00      	nop
 8009fc8:	e000      	b.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8009fca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009fcc:	7dfb      	ldrb	r3, [r7, #23]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d109      	bne.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009fd2:	4b32      	ldr	r3, [pc, #200]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fd6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fde:	492f      	ldr	r1, [pc, #188]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	654b      	str	r3, [r1, #84]	; 0x54
 8009fe4:	e001      	b.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fe6:	7dfb      	ldrb	r3, [r7, #23]
 8009fe8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d008      	beq.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009ff6:	4b29      	ldr	r3, [pc, #164]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ffa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a002:	4926      	ldr	r1, [pc, #152]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a004:	4313      	orrs	r3, r2
 800a006:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a010:	2b00      	cmp	r3, #0
 800a012:	d009      	beq.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a014:	4b21      	ldr	r3, [pc, #132]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a016:	691b      	ldr	r3, [r3, #16]
 800a018:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a022:	491e      	ldr	r1, [pc, #120]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a024:	4313      	orrs	r3, r2
 800a026:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a030:	2b00      	cmp	r3, #0
 800a032:	d008      	beq.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a034:	4b19      	ldr	r3, [pc, #100]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a038:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a040:	4916      	ldr	r1, [pc, #88]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a042:	4313      	orrs	r3, r2
 800a044:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d00d      	beq.n	800a06e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a052:	4b12      	ldr	r3, [pc, #72]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a054:	691b      	ldr	r3, [r3, #16]
 800a056:	4a11      	ldr	r2, [pc, #68]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a058:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a05c:	6113      	str	r3, [r2, #16]
 800a05e:	4b0f      	ldr	r3, [pc, #60]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a060:	691a      	ldr	r2, [r3, #16]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a068:	490c      	ldr	r1, [pc, #48]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a06a:	4313      	orrs	r3, r2
 800a06c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	2b00      	cmp	r3, #0
 800a074:	da08      	bge.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a076:	4b09      	ldr	r3, [pc, #36]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a07a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a082:	4906      	ldr	r1, [pc, #24]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a084:	4313      	orrs	r3, r2
 800a086:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 800a088:	7dbb      	ldrb	r3, [r7, #22]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d101      	bne.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 800a08e:	2300      	movs	r3, #0
 800a090:	e000      	b.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 800a092:	2301      	movs	r3, #1
}
 800a094:	4618      	mov	r0, r3
 800a096:	3718      	adds	r7, #24
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}
 800a09c:	58024400 	.word	0x58024400

0800a0a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b090      	sub	sp, #64	; 0x40
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0ae:	d150      	bne.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a0b0:	4ba1      	ldr	r3, [pc, #644]	; (800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a0b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0b4:	f003 0307 	and.w	r3, r3, #7
 800a0b8:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0bc:	2b04      	cmp	r3, #4
 800a0be:	d844      	bhi.n	800a14a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 800a0c0:	a201      	add	r2, pc, #4	; (adr r2, 800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800a0c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c6:	bf00      	nop
 800a0c8:	0800a0dd 	.word	0x0800a0dd
 800a0cc:	0800a0ed 	.word	0x0800a0ed
 800a0d0:	0800a0fd 	.word	0x0800a0fd
 800a0d4:	0800a145 	.word	0x0800a145
 800a0d8:	0800a10d 	.word	0x0800a10d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a0dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f000 fd03 	bl	800aaec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a0ea:	e241      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0ec:	f107 0318 	add.w	r3, r7, #24
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f000 fa63 	bl	800a5bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a0f6:	69bb      	ldr	r3, [r7, #24]
 800a0f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a0fa:	e239      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0fc:	f107 030c 	add.w	r3, r7, #12
 800a100:	4618      	mov	r0, r3
 800a102:	f000 fba7 	bl	800a854 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a10a:	e231      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a10c:	4b8a      	ldr	r3, [pc, #552]	; (800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a10e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a110:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a114:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d102      	bne.n	800a122 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a11c:	4b87      	ldr	r3, [pc, #540]	; (800a33c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a11e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a120:	e226      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a124:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a128:	d102      	bne.n	800a130 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800a12a:	4b85      	ldr	r3, [pc, #532]	; (800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a12c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a12e:	e21f      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a132:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a136:	d102      	bne.n	800a13e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 800a138:	4b82      	ldr	r3, [pc, #520]	; (800a344 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a13a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a13c:	e218      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a13e:	2300      	movs	r3, #0
 800a140:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a142:	e215      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a144:	4b80      	ldr	r3, [pc, #512]	; (800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800a146:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a148:	e212      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800a14a:	2300      	movs	r3, #0
 800a14c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a14e:	bf00      	nop
 800a150:	e20e      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a158:	d14f      	bne.n	800a1fa <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a15a:	4b77      	ldr	r3, [pc, #476]	; (800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a15c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a15e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a162:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a166:	2b80      	cmp	r3, #128	; 0x80
 800a168:	d01c      	beq.n	800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800a16a:	2b80      	cmp	r3, #128	; 0x80
 800a16c:	d804      	bhi.n	800a178 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d008      	beq.n	800a184 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800a172:	2b40      	cmp	r3, #64	; 0x40
 800a174:	d00e      	beq.n	800a194 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800a176:	e03c      	b.n	800a1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 800a178:	2bc0      	cmp	r3, #192	; 0xc0
 800a17a:	d037      	beq.n	800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800a17c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a180:	d018      	beq.n	800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800a182:	e036      	b.n	800a1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a188:	4618      	mov	r0, r3
 800a18a:	f000 fcaf 	bl	800aaec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a190:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a192:	e1ed      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a194:	f107 0318 	add.w	r3, r7, #24
 800a198:	4618      	mov	r0, r3
 800a19a:	f000 fa0f 	bl	800a5bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a19e:	69bb      	ldr	r3, [r7, #24]
 800a1a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1a2:	e1e5      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1a4:	f107 030c 	add.w	r3, r7, #12
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f000 fb53 	bl	800a854 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1b2:	e1dd      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a1b4:	4b60      	ldr	r3, [pc, #384]	; (800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a1b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a1bc:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a1be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d102      	bne.n	800a1ca <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a1c4:	4b5d      	ldr	r3, [pc, #372]	; (800a33c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a1c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a1c8:	e1d2      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a1ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a1d0:	d102      	bne.n	800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800a1d2:	4b5b      	ldr	r3, [pc, #364]	; (800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a1d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1d6:	e1cb      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a1d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1de:	d102      	bne.n	800a1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 800a1e0:	4b58      	ldr	r3, [pc, #352]	; (800a344 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a1e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1e4:	e1c4      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1ea:	e1c1      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a1ec:	4b56      	ldr	r3, [pc, #344]	; (800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800a1ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1f0:	e1be      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1f6:	bf00      	nop
 800a1f8:	e1ba      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a200:	d153      	bne.n	800a2aa <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a202:	4b4d      	ldr	r3, [pc, #308]	; (800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a206:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a20a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a20e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a212:	d01f      	beq.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800a214:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a218:	d805      	bhi.n	800a226 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d00a      	beq.n	800a234 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800a21e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a222:	d00f      	beq.n	800a244 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800a224:	e03d      	b.n	800a2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800a226:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a22a:	d037      	beq.n	800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800a22c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a230:	d018      	beq.n	800a264 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800a232:	e036      	b.n	800a2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a234:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a238:	4618      	mov	r0, r3
 800a23a:	f000 fc57 	bl	800aaec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a240:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a242:	e195      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a244:	f107 0318 	add.w	r3, r7, #24
 800a248:	4618      	mov	r0, r3
 800a24a:	f000 f9b7 	bl	800a5bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a24e:	69bb      	ldr	r3, [r7, #24]
 800a250:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a252:	e18d      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a254:	f107 030c 	add.w	r3, r7, #12
 800a258:	4618      	mov	r0, r3
 800a25a:	f000 fafb 	bl	800a854 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a262:	e185      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a264:	4b34      	ldr	r3, [pc, #208]	; (800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a268:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a26c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a26e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a270:	2b00      	cmp	r3, #0
 800a272:	d102      	bne.n	800a27a <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a274:	4b31      	ldr	r3, [pc, #196]	; (800a33c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a276:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a278:	e17a      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a27a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a27c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a280:	d102      	bne.n	800a288 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 800a282:	4b2f      	ldr	r3, [pc, #188]	; (800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a284:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a286:	e173      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a28a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a28e:	d102      	bne.n	800a296 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 800a290:	4b2c      	ldr	r3, [pc, #176]	; (800a344 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a292:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a294:	e16c      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a296:	2300      	movs	r3, #0
 800a298:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a29a:	e169      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a29c:	4b2a      	ldr	r3, [pc, #168]	; (800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800a29e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2a0:	e166      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2a6:	bf00      	nop
 800a2a8:	e162      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a2b0:	d15d      	bne.n	800a36e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a2b2:	4b21      	ldr	r3, [pc, #132]	; (800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a2b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2b6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a2ba:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a2c2:	d01f      	beq.n	800a304 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a2c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a2c8:	d805      	bhi.n	800a2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d00a      	beq.n	800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800a2ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a2d2:	d00f      	beq.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 800a2d4:	e047      	b.n	800a366 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 800a2d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a2da:	d041      	beq.n	800a360 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 800a2dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a2e0:	d018      	beq.n	800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800a2e2:	e040      	b.n	800a366 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a2e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f000 fbff 	bl	800aaec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2f2:	e13d      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2f4:	f107 0318 	add.w	r3, r7, #24
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f000 f95f 	bl	800a5bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a2fe:	69bb      	ldr	r3, [r7, #24]
 800a300:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a302:	e135      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a304:	f107 030c 	add.w	r3, r7, #12
 800a308:	4618      	mov	r0, r3
 800a30a:	f000 faa3 	bl	800a854 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a312:	e12d      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a314:	4b08      	ldr	r3, [pc, #32]	; (800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a318:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a31c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a31e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a320:	2b00      	cmp	r3, #0
 800a322:	d102      	bne.n	800a32a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a324:	4b05      	ldr	r3, [pc, #20]	; (800a33c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a326:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a328:	e122      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a32a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a32c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a330:	d10c      	bne.n	800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800a332:	4b03      	ldr	r3, [pc, #12]	; (800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a334:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a336:	e11b      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800a338:	58024400 	.word	0x58024400
 800a33c:	03d09000 	.word	0x03d09000
 800a340:	003d0900 	.word	0x003d0900
 800a344:	017d7840 	.word	0x017d7840
 800a348:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a34c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a34e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a352:	d102      	bne.n	800a35a <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 800a354:	4b89      	ldr	r3, [pc, #548]	; (800a57c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800a356:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a358:	e10a      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a35a:	2300      	movs	r3, #0
 800a35c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a35e:	e107      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a360:	4b87      	ldr	r3, [pc, #540]	; (800a580 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800a362:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a364:	e104      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800a366:	2300      	movs	r3, #0
 800a368:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a36a:	bf00      	nop
 800a36c:	e100      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a374:	d153      	bne.n	800a41e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a376:	4b83      	ldr	r3, [pc, #524]	; (800a584 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a37a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a37e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a386:	d01f      	beq.n	800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800a388:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a38c:	d805      	bhi.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d00a      	beq.n	800a3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800a392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a396:	d00f      	beq.n	800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 800a398:	e03d      	b.n	800a416 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800a39a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a39e:	d037      	beq.n	800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800a3a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3a4:	d018      	beq.n	800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800a3a6:	e036      	b.n	800a416 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a3a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f000 fb9d 	bl	800aaec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3b6:	e0db      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3b8:	f107 0318 	add.w	r3, r7, #24
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f000 f8fd 	bl	800a5bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a3c2:	69bb      	ldr	r3, [r7, #24]
 800a3c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3c6:	e0d3      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3c8:	f107 030c 	add.w	r3, r7, #12
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f000 fa41 	bl	800a854 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3d6:	e0cb      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a3d8:	4b6a      	ldr	r3, [pc, #424]	; (800a584 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a3da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a3e0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a3e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d102      	bne.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a3e8:	4b67      	ldr	r3, [pc, #412]	; (800a588 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800a3ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a3ec:	e0c0      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a3ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a3f4:	d102      	bne.n	800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 800a3f6:	4b65      	ldr	r3, [pc, #404]	; (800a58c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800a3f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3fa:	e0b9      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a3fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a402:	d102      	bne.n	800a40a <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 800a404:	4b5d      	ldr	r3, [pc, #372]	; (800a57c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800a406:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a408:	e0b2      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a40a:	2300      	movs	r3, #0
 800a40c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a40e:	e0af      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a410:	4b5b      	ldr	r3, [pc, #364]	; (800a580 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800a412:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a414:	e0ac      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800a416:	2300      	movs	r3, #0
 800a418:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a41a:	bf00      	nop
 800a41c:	e0a8      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a424:	d13d      	bne.n	800a4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800a426:	4b57      	ldr	r3, [pc, #348]	; (800a584 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a42a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a42e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a432:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a436:	d00c      	beq.n	800a452 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a438:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a43c:	d011      	beq.n	800a462 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d12b      	bne.n	800a49a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a442:	f107 0318 	add.w	r3, r7, #24
 800a446:	4618      	mov	r0, r3
 800a448:	f000 f8b8 	bl	800a5bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a44c:	69bb      	ldr	r3, [r7, #24]
 800a44e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a450:	e08e      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a452:	f107 030c 	add.w	r3, r7, #12
 800a456:	4618      	mov	r0, r3
 800a458:	f000 f9fc 	bl	800a854 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a460:	e086      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a462:	4b48      	ldr	r3, [pc, #288]	; (800a584 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a466:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a46a:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a46c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d102      	bne.n	800a478 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a472:	4b45      	ldr	r3, [pc, #276]	; (800a588 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800a474:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a476:	e07b      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a47a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a47e:	d102      	bne.n	800a486 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 800a480:	4b42      	ldr	r3, [pc, #264]	; (800a58c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800a482:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a484:	e074      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a488:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a48c:	d102      	bne.n	800a494 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800a48e:	4b3b      	ldr	r3, [pc, #236]	; (800a57c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800a490:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a492:	e06d      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a494:	2300      	movs	r3, #0
 800a496:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a498:	e06a      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800a49a:	2300      	movs	r3, #0
 800a49c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a49e:	bf00      	nop
 800a4a0:	e066      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4a8:	d11f      	bne.n	800a4ea <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800a4aa:	4b36      	ldr	r3, [pc, #216]	; (800a584 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a4ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a4b2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d003      	beq.n	800a4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a4ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4be:	d008      	beq.n	800a4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800a4c0:	e00f      	b.n	800a4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a4c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f000 fb10 	bl	800aaec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4d0:	e04e      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4d2:	f107 0318 	add.w	r3, r7, #24
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f000 f870 	bl	800a5bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a4dc:	6a3b      	ldr	r3, [r7, #32]
 800a4de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4e0:	e046      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4e6:	bf00      	nop
 800a4e8:	e042      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a4f0:	d13c      	bne.n	800a56c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800a4f2:	4b24      	ldr	r3, [pc, #144]	; (800a584 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a4f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4f6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a4fa:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a502:	d01e      	beq.n	800a542 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 800a504:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a508:	d805      	bhi.n	800a516 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d00d      	beq.n	800a52a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800a50e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a512:	d00e      	beq.n	800a532 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 800a514:	e026      	b.n	800a564 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800a516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a51a:	d01d      	beq.n	800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 800a51c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a520:	d01d      	beq.n	800a55e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800a522:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a526:	d014      	beq.n	800a552 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800a528:	e01c      	b.n	800a564 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a52a:	f000 f831 	bl	800a590 <HAL_RCCEx_GetD3PCLK1Freq>
 800a52e:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800a530:	e01e      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a532:	f107 0318 	add.w	r3, r7, #24
 800a536:	4618      	mov	r0, r3
 800a538:	f000 f840 	bl	800a5bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a53c:	69fb      	ldr	r3, [r7, #28]
 800a53e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a540:	e016      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a542:	f107 030c 	add.w	r3, r7, #12
 800a546:	4618      	mov	r0, r3
 800a548:	f000 f984 	bl	800a854 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a550:	e00e      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 800a552:	4b0d      	ldr	r3, [pc, #52]	; (800a588 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800a554:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a556:	e00b      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 800a558:	4b0c      	ldr	r3, [pc, #48]	; (800a58c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800a55a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a55c:	e008      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 800a55e:	4b07      	ldr	r3, [pc, #28]	; (800a57c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800a560:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a562:	e005      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800a564:	2300      	movs	r3, #0
 800a566:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a568:	bf00      	nop
 800a56a:	e001      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 800a56c:	2300      	movs	r3, #0
 800a56e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800a570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a572:	4618      	mov	r0, r3
 800a574:	3740      	adds	r7, #64	; 0x40
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}
 800a57a:	bf00      	nop
 800a57c:	017d7840 	.word	0x017d7840
 800a580:	00bb8000 	.word	0x00bb8000
 800a584:	58024400 	.word	0x58024400
 800a588:	03d09000 	.word	0x03d09000
 800a58c:	003d0900 	.word	0x003d0900

0800a590 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a594:	f7fe fe1e 	bl	80091d4 <HAL_RCC_GetHCLKFreq>
 800a598:	4601      	mov	r1, r0
 800a59a:	4b06      	ldr	r3, [pc, #24]	; (800a5b4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a59c:	6a1b      	ldr	r3, [r3, #32]
 800a59e:	091b      	lsrs	r3, r3, #4
 800a5a0:	f003 0307 	and.w	r3, r3, #7
 800a5a4:	4a04      	ldr	r2, [pc, #16]	; (800a5b8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a5a6:	5cd3      	ldrb	r3, [r2, r3]
 800a5a8:	f003 031f 	and.w	r3, r3, #31
 800a5ac:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	bd80      	pop	{r7, pc}
 800a5b4:	58024400 	.word	0x58024400
 800a5b8:	08019908 	.word	0x08019908

0800a5bc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b089      	sub	sp, #36	; 0x24
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a5c4:	4b9d      	ldr	r3, [pc, #628]	; (800a83c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a5c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5c8:	f003 0303 	and.w	r3, r3, #3
 800a5cc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a5ce:	4b9b      	ldr	r3, [pc, #620]	; (800a83c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a5d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5d2:	0b1b      	lsrs	r3, r3, #12
 800a5d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a5d8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a5da:	4b98      	ldr	r3, [pc, #608]	; (800a83c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a5dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5de:	091b      	lsrs	r3, r3, #4
 800a5e0:	f003 0301 	and.w	r3, r3, #1
 800a5e4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a5e6:	4b95      	ldr	r3, [pc, #596]	; (800a83c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a5e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5ea:	08db      	lsrs	r3, r3, #3
 800a5ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a5f0:	693a      	ldr	r2, [r7, #16]
 800a5f2:	fb02 f303 	mul.w	r3, r2, r3
 800a5f6:	ee07 3a90 	vmov	s15, r3
 800a5fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	2b00      	cmp	r3, #0
 800a606:	f000 810a 	beq.w	800a81e <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800a60a:	69bb      	ldr	r3, [r7, #24]
 800a60c:	2b01      	cmp	r3, #1
 800a60e:	d05a      	beq.n	800a6c6 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800a610:	2b01      	cmp	r3, #1
 800a612:	d302      	bcc.n	800a61a <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800a614:	2b02      	cmp	r3, #2
 800a616:	d078      	beq.n	800a70a <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800a618:	e099      	b.n	800a74e <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a61a:	4b88      	ldr	r3, [pc, #544]	; (800a83c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f003 0320 	and.w	r3, r3, #32
 800a622:	2b00      	cmp	r3, #0
 800a624:	d02d      	beq.n	800a682 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a626:	4b85      	ldr	r3, [pc, #532]	; (800a83c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	08db      	lsrs	r3, r3, #3
 800a62c:	f003 0303 	and.w	r3, r3, #3
 800a630:	4a83      	ldr	r2, [pc, #524]	; (800a840 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800a632:	fa22 f303 	lsr.w	r3, r2, r3
 800a636:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	ee07 3a90 	vmov	s15, r3
 800a63e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	ee07 3a90 	vmov	s15, r3
 800a648:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a64c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a650:	4b7a      	ldr	r3, [pc, #488]	; (800a83c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a658:	ee07 3a90 	vmov	s15, r3
 800a65c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a660:	ed97 6a03 	vldr	s12, [r7, #12]
 800a664:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a844 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800a668:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a66c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a670:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a674:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a67c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a680:	e087      	b.n	800a792 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	ee07 3a90 	vmov	s15, r3
 800a688:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a68c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a848 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800a690:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a694:	4b69      	ldr	r3, [pc, #420]	; (800a83c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a69c:	ee07 3a90 	vmov	s15, r3
 800a6a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6a4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6a8:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a844 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800a6ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a6c4:	e065      	b.n	800a792 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	ee07 3a90 	vmov	s15, r3
 800a6cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6d0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a84c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800a6d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6d8:	4b58      	ldr	r3, [pc, #352]	; (800a83c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a6da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6e0:	ee07 3a90 	vmov	s15, r3
 800a6e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6e8:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6ec:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a844 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800a6f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a700:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a704:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a708:	e043      	b.n	800a792 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	ee07 3a90 	vmov	s15, r3
 800a710:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a714:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a850 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800a718:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a71c:	4b47      	ldr	r3, [pc, #284]	; (800a83c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a71e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a724:	ee07 3a90 	vmov	s15, r3
 800a728:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a72c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a730:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a844 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800a734:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a738:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a73c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a740:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a744:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a748:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a74c:	e021      	b.n	800a792 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	ee07 3a90 	vmov	s15, r3
 800a754:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a758:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800a84c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800a75c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a760:	4b36      	ldr	r3, [pc, #216]	; (800a83c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a764:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a768:	ee07 3a90 	vmov	s15, r3
 800a76c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a770:	ed97 6a03 	vldr	s12, [r7, #12]
 800a774:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a844 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800a778:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a77c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a780:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a784:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a788:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a78c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a790:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a792:	4b2a      	ldr	r3, [pc, #168]	; (800a83c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a796:	0a5b      	lsrs	r3, r3, #9
 800a798:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a79c:	ee07 3a90 	vmov	s15, r3
 800a7a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a7a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a7ac:	edd7 6a07 	vldr	s13, [r7, #28]
 800a7b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7b8:	ee17 2a90 	vmov	r2, s15
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a7c0:	4b1e      	ldr	r3, [pc, #120]	; (800a83c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a7c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7c4:	0c1b      	lsrs	r3, r3, #16
 800a7c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7ca:	ee07 3a90 	vmov	s15, r3
 800a7ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a7d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a7da:	edd7 6a07 	vldr	s13, [r7, #28]
 800a7de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7e6:	ee17 2a90 	vmov	r2, s15
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a7ee:	4b13      	ldr	r3, [pc, #76]	; (800a83c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a7f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7f2:	0e1b      	lsrs	r3, r3, #24
 800a7f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7f8:	ee07 3a90 	vmov	s15, r3
 800a7fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a800:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a804:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a808:	edd7 6a07 	vldr	s13, [r7, #28]
 800a80c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a810:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a814:	ee17 2a90 	vmov	r2, s15
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a81c:	e008      	b.n	800a830 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2200      	movs	r2, #0
 800a822:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2200      	movs	r2, #0
 800a828:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2200      	movs	r2, #0
 800a82e:	609a      	str	r2, [r3, #8]
}
 800a830:	bf00      	nop
 800a832:	3724      	adds	r7, #36	; 0x24
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr
 800a83c:	58024400 	.word	0x58024400
 800a840:	03d09000 	.word	0x03d09000
 800a844:	46000000 	.word	0x46000000
 800a848:	4c742400 	.word	0x4c742400
 800a84c:	4a742400 	.word	0x4a742400
 800a850:	4bbebc20 	.word	0x4bbebc20

0800a854 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a854:	b480      	push	{r7}
 800a856:	b089      	sub	sp, #36	; 0x24
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a85c:	4b9d      	ldr	r3, [pc, #628]	; (800aad4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a85e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a860:	f003 0303 	and.w	r3, r3, #3
 800a864:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a866:	4b9b      	ldr	r3, [pc, #620]	; (800aad4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a86a:	0d1b      	lsrs	r3, r3, #20
 800a86c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a870:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a872:	4b98      	ldr	r3, [pc, #608]	; (800aad4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a876:	0a1b      	lsrs	r3, r3, #8
 800a878:	f003 0301 	and.w	r3, r3, #1
 800a87c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a87e:	4b95      	ldr	r3, [pc, #596]	; (800aad4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a882:	08db      	lsrs	r3, r3, #3
 800a884:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a888:	693a      	ldr	r2, [r7, #16]
 800a88a:	fb02 f303 	mul.w	r3, r2, r3
 800a88e:	ee07 3a90 	vmov	s15, r3
 800a892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a896:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	f000 810a 	beq.w	800aab6 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800a8a2:	69bb      	ldr	r3, [r7, #24]
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	d05a      	beq.n	800a95e <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	d302      	bcc.n	800a8b2 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800a8ac:	2b02      	cmp	r3, #2
 800a8ae:	d078      	beq.n	800a9a2 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800a8b0:	e099      	b.n	800a9e6 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8b2:	4b88      	ldr	r3, [pc, #544]	; (800aad4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f003 0320 	and.w	r3, r3, #32
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d02d      	beq.n	800a91a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a8be:	4b85      	ldr	r3, [pc, #532]	; (800aad4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	08db      	lsrs	r3, r3, #3
 800a8c4:	f003 0303 	and.w	r3, r3, #3
 800a8c8:	4a83      	ldr	r2, [pc, #524]	; (800aad8 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800a8ca:	fa22 f303 	lsr.w	r3, r2, r3
 800a8ce:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	ee07 3a90 	vmov	s15, r3
 800a8d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	ee07 3a90 	vmov	s15, r3
 800a8e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8e8:	4b7a      	ldr	r3, [pc, #488]	; (800aad4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a8ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8f0:	ee07 3a90 	vmov	s15, r3
 800a8f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8f8:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8fc:	eddf 5a77 	vldr	s11, [pc, #476]	; 800aadc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800a900:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a904:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a908:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a90c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a910:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a914:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a918:	e087      	b.n	800aa2a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	ee07 3a90 	vmov	s15, r3
 800a920:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a924:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800aae0 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800a928:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a92c:	4b69      	ldr	r3, [pc, #420]	; (800aad4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a92e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a934:	ee07 3a90 	vmov	s15, r3
 800a938:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a93c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a940:	eddf 5a66 	vldr	s11, [pc, #408]	; 800aadc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800a944:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a948:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a94c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a950:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a954:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a958:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a95c:	e065      	b.n	800aa2a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	ee07 3a90 	vmov	s15, r3
 800a964:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a968:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800aae4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800a96c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a970:	4b58      	ldr	r3, [pc, #352]	; (800aad4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a978:	ee07 3a90 	vmov	s15, r3
 800a97c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a980:	ed97 6a03 	vldr	s12, [r7, #12]
 800a984:	eddf 5a55 	vldr	s11, [pc, #340]	; 800aadc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800a988:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a98c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a990:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a994:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a998:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a99c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a9a0:	e043      	b.n	800aa2a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	ee07 3a90 	vmov	s15, r3
 800a9a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9ac:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800aae8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800a9b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9b4:	4b47      	ldr	r3, [pc, #284]	; (800aad4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a9b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9bc:	ee07 3a90 	vmov	s15, r3
 800a9c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9c4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9c8:	eddf 5a44 	vldr	s11, [pc, #272]	; 800aadc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800a9cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a9e4:	e021      	b.n	800aa2a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	ee07 3a90 	vmov	s15, r3
 800a9ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9f0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800aae4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800a9f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9f8:	4b36      	ldr	r3, [pc, #216]	; (800aad4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a9fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa00:	ee07 3a90 	vmov	s15, r3
 800aa04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa08:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa0c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800aadc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800aa10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa20:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa24:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa28:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800aa2a:	4b2a      	ldr	r3, [pc, #168]	; (800aad4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800aa2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa2e:	0a5b      	lsrs	r3, r3, #9
 800aa30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa34:	ee07 3a90 	vmov	s15, r3
 800aa38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aa40:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa44:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa50:	ee17 2a90 	vmov	r2, s15
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800aa58:	4b1e      	ldr	r3, [pc, #120]	; (800aad4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800aa5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa5c:	0c1b      	lsrs	r3, r3, #16
 800aa5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa62:	ee07 3a90 	vmov	s15, r3
 800aa66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aa6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa72:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa7e:	ee17 2a90 	vmov	r2, s15
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800aa86:	4b13      	ldr	r3, [pc, #76]	; (800aad4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800aa88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa8a:	0e1b      	lsrs	r3, r3, #24
 800aa8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa90:	ee07 3a90 	vmov	s15, r3
 800aa94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aa9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aaa0:	edd7 6a07 	vldr	s13, [r7, #28]
 800aaa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aaa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aaac:	ee17 2a90 	vmov	r2, s15
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800aab4:	e008      	b.n	800aac8 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2200      	movs	r2, #0
 800aaba:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2200      	movs	r2, #0
 800aac0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2200      	movs	r2, #0
 800aac6:	609a      	str	r2, [r3, #8]
}
 800aac8:	bf00      	nop
 800aaca:	3724      	adds	r7, #36	; 0x24
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr
 800aad4:	58024400 	.word	0x58024400
 800aad8:	03d09000 	.word	0x03d09000
 800aadc:	46000000 	.word	0x46000000
 800aae0:	4c742400 	.word	0x4c742400
 800aae4:	4a742400 	.word	0x4a742400
 800aae8:	4bbebc20 	.word	0x4bbebc20

0800aaec <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b089      	sub	sp, #36	; 0x24
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aaf4:	4b9d      	ldr	r3, [pc, #628]	; (800ad6c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800aaf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaf8:	f003 0303 	and.w	r3, r3, #3
 800aafc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800aafe:	4b9b      	ldr	r3, [pc, #620]	; (800ad6c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800ab00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab02:	091b      	lsrs	r3, r3, #4
 800ab04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab08:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ab0a:	4b98      	ldr	r3, [pc, #608]	; (800ad6c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800ab0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab0e:	f003 0301 	and.w	r3, r3, #1
 800ab12:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800ab14:	4b95      	ldr	r3, [pc, #596]	; (800ad6c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800ab16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab18:	08db      	lsrs	r3, r3, #3
 800ab1a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab1e:	693a      	ldr	r2, [r7, #16]
 800ab20:	fb02 f303 	mul.w	r3, r2, r3
 800ab24:	ee07 3a90 	vmov	s15, r3
 800ab28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab2c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	f000 810a 	beq.w	800ad4c <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 800ab38:	69bb      	ldr	r3, [r7, #24]
 800ab3a:	2b01      	cmp	r3, #1
 800ab3c:	d05a      	beq.n	800abf4 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800ab3e:	2b01      	cmp	r3, #1
 800ab40:	d302      	bcc.n	800ab48 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800ab42:	2b02      	cmp	r3, #2
 800ab44:	d078      	beq.n	800ac38 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800ab46:	e099      	b.n	800ac7c <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab48:	4b88      	ldr	r3, [pc, #544]	; (800ad6c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f003 0320 	and.w	r3, r3, #32
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d02d      	beq.n	800abb0 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ab54:	4b85      	ldr	r3, [pc, #532]	; (800ad6c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	08db      	lsrs	r3, r3, #3
 800ab5a:	f003 0303 	and.w	r3, r3, #3
 800ab5e:	4a84      	ldr	r2, [pc, #528]	; (800ad70 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 800ab60:	fa22 f303 	lsr.w	r3, r2, r3
 800ab64:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	ee07 3a90 	vmov	s15, r3
 800ab6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	ee07 3a90 	vmov	s15, r3
 800ab76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab7e:	4b7b      	ldr	r3, [pc, #492]	; (800ad6c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800ab80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab86:	ee07 3a90 	vmov	s15, r3
 800ab8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab8e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab92:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ad74 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800ab96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abaa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800abae:	e087      	b.n	800acc0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	ee07 3a90 	vmov	s15, r3
 800abb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ad78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800abbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abc2:	4b6a      	ldr	r3, [pc, #424]	; (800ad6c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800abc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abca:	ee07 3a90 	vmov	s15, r3
 800abce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abd2:	ed97 6a03 	vldr	s12, [r7, #12]
 800abd6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ad74 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800abda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abe2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800abf2:	e065      	b.n	800acc0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	ee07 3a90 	vmov	s15, r3
 800abfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abfe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ad7c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800ac02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac06:	4b59      	ldr	r3, [pc, #356]	; (800ad6c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800ac08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac0e:	ee07 3a90 	vmov	s15, r3
 800ac12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac16:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac1a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ad74 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800ac1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac36:	e043      	b.n	800acc0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	ee07 3a90 	vmov	s15, r3
 800ac3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac42:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ad80 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ac46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac4a:	4b48      	ldr	r3, [pc, #288]	; (800ad6c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800ac4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac52:	ee07 3a90 	vmov	s15, r3
 800ac56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac5e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ad74 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800ac62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac7a:	e021      	b.n	800acc0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	ee07 3a90 	vmov	s15, r3
 800ac82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac86:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ad7c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800ac8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac8e:	4b37      	ldr	r3, [pc, #220]	; (800ad6c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800ac90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac96:	ee07 3a90 	vmov	s15, r3
 800ac9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800aca2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ad74 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800aca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800acbe:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800acc0:	4b2a      	ldr	r3, [pc, #168]	; (800ad6c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800acc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acc4:	0a5b      	lsrs	r3, r3, #9
 800acc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acca:	ee07 3a90 	vmov	s15, r3
 800acce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800acd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800acda:	edd7 6a07 	vldr	s13, [r7, #28]
 800acde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ace2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ace6:	ee17 2a90 	vmov	r2, s15
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800acee:	4b1f      	ldr	r3, [pc, #124]	; (800ad6c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800acf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acf2:	0c1b      	lsrs	r3, r3, #16
 800acf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acf8:	ee07 3a90 	vmov	s15, r3
 800acfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad04:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad08:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad14:	ee17 2a90 	vmov	r2, s15
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800ad1c:	4b13      	ldr	r3, [pc, #76]	; (800ad6c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800ad1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad20:	0e1b      	lsrs	r3, r3, #24
 800ad22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad26:	ee07 3a90 	vmov	s15, r3
 800ad2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad32:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad36:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad42:	ee17 2a90 	vmov	r2, s15
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ad4a:	e008      	b.n	800ad5e <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2200      	movs	r2, #0
 800ad56:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	609a      	str	r2, [r3, #8]
}
 800ad5e:	bf00      	nop
 800ad60:	3724      	adds	r7, #36	; 0x24
 800ad62:	46bd      	mov	sp, r7
 800ad64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad68:	4770      	bx	lr
 800ad6a:	bf00      	nop
 800ad6c:	58024400 	.word	0x58024400
 800ad70:	03d09000 	.word	0x03d09000
 800ad74:	46000000 	.word	0x46000000
 800ad78:	4c742400 	.word	0x4c742400
 800ad7c:	4a742400 	.word	0x4a742400
 800ad80:	4bbebc20 	.word	0x4bbebc20

0800ad84 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b084      	sub	sp, #16
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ad92:	4b53      	ldr	r3, [pc, #332]	; (800aee0 <RCCEx_PLL2_Config+0x15c>)
 800ad94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad96:	f003 0303 	and.w	r3, r3, #3
 800ad9a:	2b03      	cmp	r3, #3
 800ad9c:	d101      	bne.n	800ada2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ad9e:	2301      	movs	r3, #1
 800ada0:	e099      	b.n	800aed6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ada2:	4b4f      	ldr	r3, [pc, #316]	; (800aee0 <RCCEx_PLL2_Config+0x15c>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	4a4e      	ldr	r2, [pc, #312]	; (800aee0 <RCCEx_PLL2_Config+0x15c>)
 800ada8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800adac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800adae:	f7f8 fa01 	bl	80031b4 <HAL_GetTick>
 800adb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800adb4:	e008      	b.n	800adc8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800adb6:	f7f8 f9fd 	bl	80031b4 <HAL_GetTick>
 800adba:	4602      	mov	r2, r0
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	1ad3      	subs	r3, r2, r3
 800adc0:	2b02      	cmp	r3, #2
 800adc2:	d901      	bls.n	800adc8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800adc4:	2303      	movs	r3, #3
 800adc6:	e086      	b.n	800aed6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800adc8:	4b45      	ldr	r3, [pc, #276]	; (800aee0 <RCCEx_PLL2_Config+0x15c>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800add0:	2b00      	cmp	r3, #0
 800add2:	d1f0      	bne.n	800adb6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800add4:	4b42      	ldr	r3, [pc, #264]	; (800aee0 <RCCEx_PLL2_Config+0x15c>)
 800add6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800add8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	031b      	lsls	r3, r3, #12
 800ade2:	493f      	ldr	r1, [pc, #252]	; (800aee0 <RCCEx_PLL2_Config+0x15c>)
 800ade4:	4313      	orrs	r3, r2
 800ade6:	628b      	str	r3, [r1, #40]	; 0x28
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	685b      	ldr	r3, [r3, #4]
 800adec:	3b01      	subs	r3, #1
 800adee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	689b      	ldr	r3, [r3, #8]
 800adf6:	3b01      	subs	r3, #1
 800adf8:	025b      	lsls	r3, r3, #9
 800adfa:	b29b      	uxth	r3, r3
 800adfc:	431a      	orrs	r2, r3
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	68db      	ldr	r3, [r3, #12]
 800ae02:	3b01      	subs	r3, #1
 800ae04:	041b      	lsls	r3, r3, #16
 800ae06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ae0a:	431a      	orrs	r2, r3
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	691b      	ldr	r3, [r3, #16]
 800ae10:	3b01      	subs	r3, #1
 800ae12:	061b      	lsls	r3, r3, #24
 800ae14:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ae18:	4931      	ldr	r1, [pc, #196]	; (800aee0 <RCCEx_PLL2_Config+0x15c>)
 800ae1a:	4313      	orrs	r3, r2
 800ae1c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ae1e:	4b30      	ldr	r3, [pc, #192]	; (800aee0 <RCCEx_PLL2_Config+0x15c>)
 800ae20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae22:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	695b      	ldr	r3, [r3, #20]
 800ae2a:	492d      	ldr	r1, [pc, #180]	; (800aee0 <RCCEx_PLL2_Config+0x15c>)
 800ae2c:	4313      	orrs	r3, r2
 800ae2e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ae30:	4b2b      	ldr	r3, [pc, #172]	; (800aee0 <RCCEx_PLL2_Config+0x15c>)
 800ae32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae34:	f023 0220 	bic.w	r2, r3, #32
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	699b      	ldr	r3, [r3, #24]
 800ae3c:	4928      	ldr	r1, [pc, #160]	; (800aee0 <RCCEx_PLL2_Config+0x15c>)
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ae42:	4b27      	ldr	r3, [pc, #156]	; (800aee0 <RCCEx_PLL2_Config+0x15c>)
 800ae44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae46:	4a26      	ldr	r2, [pc, #152]	; (800aee0 <RCCEx_PLL2_Config+0x15c>)
 800ae48:	f023 0310 	bic.w	r3, r3, #16
 800ae4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ae4e:	4b24      	ldr	r3, [pc, #144]	; (800aee0 <RCCEx_PLL2_Config+0x15c>)
 800ae50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae52:	4b24      	ldr	r3, [pc, #144]	; (800aee4 <RCCEx_PLL2_Config+0x160>)
 800ae54:	4013      	ands	r3, r2
 800ae56:	687a      	ldr	r2, [r7, #4]
 800ae58:	69d2      	ldr	r2, [r2, #28]
 800ae5a:	00d2      	lsls	r2, r2, #3
 800ae5c:	4920      	ldr	r1, [pc, #128]	; (800aee0 <RCCEx_PLL2_Config+0x15c>)
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ae62:	4b1f      	ldr	r3, [pc, #124]	; (800aee0 <RCCEx_PLL2_Config+0x15c>)
 800ae64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae66:	4a1e      	ldr	r2, [pc, #120]	; (800aee0 <RCCEx_PLL2_Config+0x15c>)
 800ae68:	f043 0310 	orr.w	r3, r3, #16
 800ae6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d106      	bne.n	800ae82 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ae74:	4b1a      	ldr	r3, [pc, #104]	; (800aee0 <RCCEx_PLL2_Config+0x15c>)
 800ae76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae78:	4a19      	ldr	r2, [pc, #100]	; (800aee0 <RCCEx_PLL2_Config+0x15c>)
 800ae7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ae7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ae80:	e00f      	b.n	800aea2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	d106      	bne.n	800ae96 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ae88:	4b15      	ldr	r3, [pc, #84]	; (800aee0 <RCCEx_PLL2_Config+0x15c>)
 800ae8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae8c:	4a14      	ldr	r2, [pc, #80]	; (800aee0 <RCCEx_PLL2_Config+0x15c>)
 800ae8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ae92:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ae94:	e005      	b.n	800aea2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ae96:	4b12      	ldr	r3, [pc, #72]	; (800aee0 <RCCEx_PLL2_Config+0x15c>)
 800ae98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae9a:	4a11      	ldr	r2, [pc, #68]	; (800aee0 <RCCEx_PLL2_Config+0x15c>)
 800ae9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aea0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800aea2:	4b0f      	ldr	r3, [pc, #60]	; (800aee0 <RCCEx_PLL2_Config+0x15c>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	4a0e      	ldr	r2, [pc, #56]	; (800aee0 <RCCEx_PLL2_Config+0x15c>)
 800aea8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800aeac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aeae:	f7f8 f981 	bl	80031b4 <HAL_GetTick>
 800aeb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800aeb4:	e008      	b.n	800aec8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800aeb6:	f7f8 f97d 	bl	80031b4 <HAL_GetTick>
 800aeba:	4602      	mov	r2, r0
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	1ad3      	subs	r3, r2, r3
 800aec0:	2b02      	cmp	r3, #2
 800aec2:	d901      	bls.n	800aec8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800aec4:	2303      	movs	r3, #3
 800aec6:	e006      	b.n	800aed6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800aec8:	4b05      	ldr	r3, [pc, #20]	; (800aee0 <RCCEx_PLL2_Config+0x15c>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d0f0      	beq.n	800aeb6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800aed4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3710      	adds	r7, #16
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
 800aede:	bf00      	nop
 800aee0:	58024400 	.word	0x58024400
 800aee4:	ffff0007 	.word	0xffff0007

0800aee8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b084      	sub	sp, #16
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aef2:	2300      	movs	r3, #0
 800aef4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800aef6:	4b53      	ldr	r3, [pc, #332]	; (800b044 <RCCEx_PLL3_Config+0x15c>)
 800aef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aefa:	f003 0303 	and.w	r3, r3, #3
 800aefe:	2b03      	cmp	r3, #3
 800af00:	d101      	bne.n	800af06 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800af02:	2301      	movs	r3, #1
 800af04:	e099      	b.n	800b03a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800af06:	4b4f      	ldr	r3, [pc, #316]	; (800b044 <RCCEx_PLL3_Config+0x15c>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	4a4e      	ldr	r2, [pc, #312]	; (800b044 <RCCEx_PLL3_Config+0x15c>)
 800af0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800af10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af12:	f7f8 f94f 	bl	80031b4 <HAL_GetTick>
 800af16:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800af18:	e008      	b.n	800af2c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800af1a:	f7f8 f94b 	bl	80031b4 <HAL_GetTick>
 800af1e:	4602      	mov	r2, r0
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	1ad3      	subs	r3, r2, r3
 800af24:	2b02      	cmp	r3, #2
 800af26:	d901      	bls.n	800af2c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800af28:	2303      	movs	r3, #3
 800af2a:	e086      	b.n	800b03a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800af2c:	4b45      	ldr	r3, [pc, #276]	; (800b044 <RCCEx_PLL3_Config+0x15c>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af34:	2b00      	cmp	r3, #0
 800af36:	d1f0      	bne.n	800af1a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800af38:	4b42      	ldr	r3, [pc, #264]	; (800b044 <RCCEx_PLL3_Config+0x15c>)
 800af3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af3c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	051b      	lsls	r3, r3, #20
 800af46:	493f      	ldr	r1, [pc, #252]	; (800b044 <RCCEx_PLL3_Config+0x15c>)
 800af48:	4313      	orrs	r3, r2
 800af4a:	628b      	str	r3, [r1, #40]	; 0x28
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	685b      	ldr	r3, [r3, #4]
 800af50:	3b01      	subs	r3, #1
 800af52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	689b      	ldr	r3, [r3, #8]
 800af5a:	3b01      	subs	r3, #1
 800af5c:	025b      	lsls	r3, r3, #9
 800af5e:	b29b      	uxth	r3, r3
 800af60:	431a      	orrs	r2, r3
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	68db      	ldr	r3, [r3, #12]
 800af66:	3b01      	subs	r3, #1
 800af68:	041b      	lsls	r3, r3, #16
 800af6a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800af6e:	431a      	orrs	r2, r3
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	691b      	ldr	r3, [r3, #16]
 800af74:	3b01      	subs	r3, #1
 800af76:	061b      	lsls	r3, r3, #24
 800af78:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800af7c:	4931      	ldr	r1, [pc, #196]	; (800b044 <RCCEx_PLL3_Config+0x15c>)
 800af7e:	4313      	orrs	r3, r2
 800af80:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800af82:	4b30      	ldr	r3, [pc, #192]	; (800b044 <RCCEx_PLL3_Config+0x15c>)
 800af84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af86:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	695b      	ldr	r3, [r3, #20]
 800af8e:	492d      	ldr	r1, [pc, #180]	; (800b044 <RCCEx_PLL3_Config+0x15c>)
 800af90:	4313      	orrs	r3, r2
 800af92:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800af94:	4b2b      	ldr	r3, [pc, #172]	; (800b044 <RCCEx_PLL3_Config+0x15c>)
 800af96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af98:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	699b      	ldr	r3, [r3, #24]
 800afa0:	4928      	ldr	r1, [pc, #160]	; (800b044 <RCCEx_PLL3_Config+0x15c>)
 800afa2:	4313      	orrs	r3, r2
 800afa4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800afa6:	4b27      	ldr	r3, [pc, #156]	; (800b044 <RCCEx_PLL3_Config+0x15c>)
 800afa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afaa:	4a26      	ldr	r2, [pc, #152]	; (800b044 <RCCEx_PLL3_Config+0x15c>)
 800afac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800afb0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800afb2:	4b24      	ldr	r3, [pc, #144]	; (800b044 <RCCEx_PLL3_Config+0x15c>)
 800afb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800afb6:	4b24      	ldr	r3, [pc, #144]	; (800b048 <RCCEx_PLL3_Config+0x160>)
 800afb8:	4013      	ands	r3, r2
 800afba:	687a      	ldr	r2, [r7, #4]
 800afbc:	69d2      	ldr	r2, [r2, #28]
 800afbe:	00d2      	lsls	r2, r2, #3
 800afc0:	4920      	ldr	r1, [pc, #128]	; (800b044 <RCCEx_PLL3_Config+0x15c>)
 800afc2:	4313      	orrs	r3, r2
 800afc4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800afc6:	4b1f      	ldr	r3, [pc, #124]	; (800b044 <RCCEx_PLL3_Config+0x15c>)
 800afc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afca:	4a1e      	ldr	r2, [pc, #120]	; (800b044 <RCCEx_PLL3_Config+0x15c>)
 800afcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800afd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d106      	bne.n	800afe6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800afd8:	4b1a      	ldr	r3, [pc, #104]	; (800b044 <RCCEx_PLL3_Config+0x15c>)
 800afda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afdc:	4a19      	ldr	r2, [pc, #100]	; (800b044 <RCCEx_PLL3_Config+0x15c>)
 800afde:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800afe2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800afe4:	e00f      	b.n	800b006 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	2b01      	cmp	r3, #1
 800afea:	d106      	bne.n	800affa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800afec:	4b15      	ldr	r3, [pc, #84]	; (800b044 <RCCEx_PLL3_Config+0x15c>)
 800afee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aff0:	4a14      	ldr	r2, [pc, #80]	; (800b044 <RCCEx_PLL3_Config+0x15c>)
 800aff2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800aff6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800aff8:	e005      	b.n	800b006 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800affa:	4b12      	ldr	r3, [pc, #72]	; (800b044 <RCCEx_PLL3_Config+0x15c>)
 800affc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800affe:	4a11      	ldr	r2, [pc, #68]	; (800b044 <RCCEx_PLL3_Config+0x15c>)
 800b000:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b004:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b006:	4b0f      	ldr	r3, [pc, #60]	; (800b044 <RCCEx_PLL3_Config+0x15c>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	4a0e      	ldr	r2, [pc, #56]	; (800b044 <RCCEx_PLL3_Config+0x15c>)
 800b00c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b010:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b012:	f7f8 f8cf 	bl	80031b4 <HAL_GetTick>
 800b016:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b018:	e008      	b.n	800b02c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b01a:	f7f8 f8cb 	bl	80031b4 <HAL_GetTick>
 800b01e:	4602      	mov	r2, r0
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	1ad3      	subs	r3, r2, r3
 800b024:	2b02      	cmp	r3, #2
 800b026:	d901      	bls.n	800b02c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b028:	2303      	movs	r3, #3
 800b02a:	e006      	b.n	800b03a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b02c:	4b05      	ldr	r3, [pc, #20]	; (800b044 <RCCEx_PLL3_Config+0x15c>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b034:	2b00      	cmp	r3, #0
 800b036:	d0f0      	beq.n	800b01a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b038:	7bfb      	ldrb	r3, [r7, #15]
}
 800b03a:	4618      	mov	r0, r3
 800b03c:	3710      	adds	r7, #16
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}
 800b042:	bf00      	nop
 800b044:	58024400 	.word	0x58024400
 800b048:	ffff0007 	.word	0xffff0007

0800b04c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b084      	sub	sp, #16
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b054:	2301      	movs	r3, #1
 800b056:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d067      	beq.n	800b12e <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800b064:	b2db      	uxtb	r3, r3
 800b066:	2b00      	cmp	r3, #0
 800b068:	d106      	bne.n	800b078 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2200      	movs	r2, #0
 800b06e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f7f7 fce2 	bl	8002a3c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2202      	movs	r2, #2
 800b07c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	22ca      	movs	r2, #202	; 0xca
 800b086:	625a      	str	r2, [r3, #36]	; 0x24
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	2253      	movs	r2, #83	; 0x53
 800b08e:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f000 f99f 	bl	800b3d4 <RTC_EnterInitMode>
 800b096:	4603      	mov	r3, r0
 800b098:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800b09a:	7bfb      	ldrb	r3, [r7, #15]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d13b      	bne.n	800b118 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	6899      	ldr	r1, [r3, #8]
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681a      	ldr	r2, [r3, #0]
 800b0aa:	4b23      	ldr	r3, [pc, #140]	; (800b138 <HAL_RTC_Init+0xec>)
 800b0ac:	400b      	ands	r3, r1
 800b0ae:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	6899      	ldr	r1, [r3, #8]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	685a      	ldr	r2, [r3, #4]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	691b      	ldr	r3, [r3, #16]
 800b0be:	431a      	orrs	r2, r3
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	699b      	ldr	r3, [r3, #24]
 800b0c4:	431a      	orrs	r2, r3
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	430a      	orrs	r2, r1
 800b0cc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	689b      	ldr	r3, [r3, #8]
 800b0d2:	0419      	lsls	r1, r3, #16
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	68da      	ldr	r2, [r3, #12]
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	430a      	orrs	r2, r1
 800b0de:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f000 f9a7 	bl	800b434 <RTC_ExitInitMode>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800b0ea:	7bfb      	ldrb	r3, [r7, #15]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d113      	bne.n	800b118 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f022 0203 	bic.w	r2, r2, #3
 800b0fe:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	69da      	ldr	r2, [r3, #28]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	695b      	ldr	r3, [r3, #20]
 800b10e:	431a      	orrs	r2, r3
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	430a      	orrs	r2, r1
 800b116:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	22ff      	movs	r2, #255	; 0xff
 800b11e:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800b120:	7bfb      	ldrb	r3, [r7, #15]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d103      	bne.n	800b12e <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2201      	movs	r2, #1
 800b12a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800b12e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b130:	4618      	mov	r0, r3
 800b132:	3710      	adds	r7, #16
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}
 800b138:	ff8fffbf 	.word	0xff8fffbf

0800b13c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b13c:	b590      	push	{r4, r7, lr}
 800b13e:	b087      	sub	sp, #28
 800b140:	af00      	add	r7, sp, #0
 800b142:	60f8      	str	r0, [r7, #12]
 800b144:	60b9      	str	r1, [r7, #8]
 800b146:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b14e:	2b01      	cmp	r3, #1
 800b150:	d101      	bne.n	800b156 <HAL_RTC_SetTime+0x1a>
 800b152:	2302      	movs	r3, #2
 800b154:	e089      	b.n	800b26a <HAL_RTC_SetTime+0x12e>
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	2201      	movs	r2, #1
 800b15a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	2202      	movs	r2, #2
 800b162:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	22ca      	movs	r2, #202	; 0xca
 800b16c:	625a      	str	r2, [r3, #36]	; 0x24
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	2253      	movs	r2, #83	; 0x53
 800b174:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b176:	68f8      	ldr	r0, [r7, #12]
 800b178:	f000 f92c 	bl	800b3d4 <RTC_EnterInitMode>
 800b17c:	4603      	mov	r3, r0
 800b17e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b180:	7cfb      	ldrb	r3, [r7, #19]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d161      	bne.n	800b24a <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d126      	bne.n	800b1da <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	689b      	ldr	r3, [r3, #8]
 800b192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b196:	2b00      	cmp	r3, #0
 800b198:	d102      	bne.n	800b1a0 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	2200      	movs	r2, #0
 800b19e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f000 f983 	bl	800b4b0 <RTC_ByteToBcd2>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	785b      	ldrb	r3, [r3, #1]
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f000 f97c 	bl	800b4b0 <RTC_ByteToBcd2>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b1bc:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	789b      	ldrb	r3, [r3, #2]
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f000 f974 	bl	800b4b0 <RTC_ByteToBcd2>
 800b1c8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b1ca:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	78db      	ldrb	r3, [r3, #3]
 800b1d2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b1d4:	4313      	orrs	r3, r2
 800b1d6:	617b      	str	r3, [r7, #20]
 800b1d8:	e018      	b.n	800b20c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	689b      	ldr	r3, [r3, #8]
 800b1e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d102      	bne.n	800b1ee <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	781b      	ldrb	r3, [r3, #0]
 800b1f2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	785b      	ldrb	r3, [r3, #1]
 800b1f8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b1fa:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800b1fc:	68ba      	ldr	r2, [r7, #8]
 800b1fe:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b200:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	78db      	ldrb	r3, [r3, #3]
 800b206:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b208:	4313      	orrs	r3, r2
 800b20a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	681a      	ldr	r2, [r3, #0]
 800b210:	6979      	ldr	r1, [r7, #20]
 800b212:	4b18      	ldr	r3, [pc, #96]	; (800b274 <HAL_RTC_SetTime+0x138>)
 800b214:	400b      	ands	r3, r1
 800b216:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	689a      	ldr	r2, [r3, #8]
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b226:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	6899      	ldr	r1, [r3, #8]
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	68da      	ldr	r2, [r3, #12]
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	691b      	ldr	r3, [r3, #16]
 800b236:	431a      	orrs	r2, r3
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	430a      	orrs	r2, r1
 800b23e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b240:	68f8      	ldr	r0, [r7, #12]
 800b242:	f000 f8f7 	bl	800b434 <RTC_ExitInitMode>
 800b246:	4603      	mov	r3, r0
 800b248:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	22ff      	movs	r2, #255	; 0xff
 800b250:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800b252:	7cfb      	ldrb	r3, [r7, #19]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d103      	bne.n	800b260 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	2201      	movs	r2, #1
 800b25c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	2200      	movs	r2, #0
 800b264:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800b268:	7cfb      	ldrb	r3, [r7, #19]
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	371c      	adds	r7, #28
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd90      	pop	{r4, r7, pc}
 800b272:	bf00      	nop
 800b274:	007f7f7f 	.word	0x007f7f7f

0800b278 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b278:	b590      	push	{r4, r7, lr}
 800b27a:	b087      	sub	sp, #28
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	60f8      	str	r0, [r7, #12]
 800b280:	60b9      	str	r1, [r7, #8]
 800b282:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b28a:	2b01      	cmp	r3, #1
 800b28c:	d101      	bne.n	800b292 <HAL_RTC_SetDate+0x1a>
 800b28e:	2302      	movs	r3, #2
 800b290:	e073      	b.n	800b37a <HAL_RTC_SetDate+0x102>
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	2201      	movs	r2, #1
 800b296:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	2202      	movs	r2, #2
 800b29e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d10e      	bne.n	800b2c6 <HAL_RTC_SetDate+0x4e>
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	785b      	ldrb	r3, [r3, #1]
 800b2ac:	f003 0310 	and.w	r3, r3, #16
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d008      	beq.n	800b2c6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	785b      	ldrb	r3, [r3, #1]
 800b2b8:	f023 0310 	bic.w	r3, r3, #16
 800b2bc:	b2db      	uxtb	r3, r3
 800b2be:	330a      	adds	r3, #10
 800b2c0:	b2da      	uxtb	r2, r3
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d11c      	bne.n	800b306 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	78db      	ldrb	r3, [r3, #3]
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f000 f8ed 	bl	800b4b0 <RTC_ByteToBcd2>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	785b      	ldrb	r3, [r3, #1]
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f000 f8e6 	bl	800b4b0 <RTC_ByteToBcd2>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b2e8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	789b      	ldrb	r3, [r3, #2]
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f000 f8de 	bl	800b4b0 <RTC_ByteToBcd2>
 800b2f4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b2f6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	781b      	ldrb	r3, [r3, #0]
 800b2fe:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b300:	4313      	orrs	r3, r2
 800b302:	617b      	str	r3, [r7, #20]
 800b304:	e00e      	b.n	800b324 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	78db      	ldrb	r3, [r3, #3]
 800b30a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	785b      	ldrb	r3, [r3, #1]
 800b310:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b312:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800b314:	68ba      	ldr	r2, [r7, #8]
 800b316:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b318:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	781b      	ldrb	r3, [r3, #0]
 800b31e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b320:	4313      	orrs	r3, r2
 800b322:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	22ca      	movs	r2, #202	; 0xca
 800b32a:	625a      	str	r2, [r3, #36]	; 0x24
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	2253      	movs	r2, #83	; 0x53
 800b332:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b334:	68f8      	ldr	r0, [r7, #12]
 800b336:	f000 f84d 	bl	800b3d4 <RTC_EnterInitMode>
 800b33a:	4603      	mov	r3, r0
 800b33c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b33e:	7cfb      	ldrb	r3, [r7, #19]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d10a      	bne.n	800b35a <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	681a      	ldr	r2, [r3, #0]
 800b348:	6979      	ldr	r1, [r7, #20]
 800b34a:	4b0e      	ldr	r3, [pc, #56]	; (800b384 <HAL_RTC_SetDate+0x10c>)
 800b34c:	400b      	ands	r3, r1
 800b34e:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b350:	68f8      	ldr	r0, [r7, #12]
 800b352:	f000 f86f 	bl	800b434 <RTC_ExitInitMode>
 800b356:	4603      	mov	r3, r0
 800b358:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	22ff      	movs	r2, #255	; 0xff
 800b360:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800b362:	7cfb      	ldrb	r3, [r7, #19]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d103      	bne.n	800b370 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	2201      	movs	r2, #1
 800b36c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	2200      	movs	r2, #0
 800b374:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800b378:	7cfb      	ldrb	r3, [r7, #19]


}
 800b37a:	4618      	mov	r0, r3
 800b37c:	371c      	adds	r7, #28
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd90      	pop	{r4, r7, pc}
 800b382:	bf00      	nop
 800b384:	00ffff3f 	.word	0x00ffff3f

0800b388 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b084      	sub	sp, #16
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	68da      	ldr	r2, [r3, #12]
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b39e:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800b3a0:	f7f7 ff08 	bl	80031b4 <HAL_GetTick>
 800b3a4:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b3a6:	e009      	b.n	800b3bc <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b3a8:	f7f7 ff04 	bl	80031b4 <HAL_GetTick>
 800b3ac:	4602      	mov	r2, r0
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	1ad3      	subs	r3, r2, r3
 800b3b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b3b6:	d901      	bls.n	800b3bc <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800b3b8:	2303      	movs	r3, #3
 800b3ba:	e007      	b.n	800b3cc <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	68db      	ldr	r3, [r3, #12]
 800b3c2:	f003 0320 	and.w	r3, r3, #32
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d0ee      	beq.n	800b3a8 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800b3ca:	2300      	movs	r3, #0
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3710      	adds	r7, #16
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}

0800b3d4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b084      	sub	sp, #16
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	68db      	ldr	r3, [r3, #12]
 800b3e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d11d      	bne.n	800b42a <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f04f 32ff 	mov.w	r2, #4294967295
 800b3f6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800b3f8:	f7f7 fedc 	bl	80031b4 <HAL_GetTick>
 800b3fc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b3fe:	e00d      	b.n	800b41c <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800b400:	f7f7 fed8 	bl	80031b4 <HAL_GetTick>
 800b404:	4602      	mov	r2, r0
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	1ad3      	subs	r3, r2, r3
 800b40a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b40e:	d905      	bls.n	800b41c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800b410:	2303      	movs	r3, #3
 800b412:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2203      	movs	r2, #3
 800b418:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	68db      	ldr	r3, [r3, #12]
 800b422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b426:	2b00      	cmp	r3, #0
 800b428:	d0ea      	beq.n	800b400 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800b42a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3710      	adds	r7, #16
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}

0800b434 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b084      	sub	sp, #16
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b43c:	2300      	movs	r3, #0
 800b43e:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800b440:	4b1a      	ldr	r3, [pc, #104]	; (800b4ac <RTC_ExitInitMode+0x78>)
 800b442:	68db      	ldr	r3, [r3, #12]
 800b444:	4a19      	ldr	r2, [pc, #100]	; (800b4ac <RTC_ExitInitMode+0x78>)
 800b446:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b44a:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800b44c:	4b17      	ldr	r3, [pc, #92]	; (800b4ac <RTC_ExitInitMode+0x78>)
 800b44e:	689b      	ldr	r3, [r3, #8]
 800b450:	f003 0320 	and.w	r3, r3, #32
 800b454:	2b00      	cmp	r3, #0
 800b456:	d10c      	bne.n	800b472 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f7ff ff95 	bl	800b388 <HAL_RTC_WaitForSynchro>
 800b45e:	4603      	mov	r3, r0
 800b460:	2b00      	cmp	r3, #0
 800b462:	d01e      	beq.n	800b4a2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2203      	movs	r2, #3
 800b468:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800b46c:	2303      	movs	r3, #3
 800b46e:	73fb      	strb	r3, [r7, #15]
 800b470:	e017      	b.n	800b4a2 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b472:	4b0e      	ldr	r3, [pc, #56]	; (800b4ac <RTC_ExitInitMode+0x78>)
 800b474:	689b      	ldr	r3, [r3, #8]
 800b476:	4a0d      	ldr	r2, [pc, #52]	; (800b4ac <RTC_ExitInitMode+0x78>)
 800b478:	f023 0320 	bic.w	r3, r3, #32
 800b47c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f7ff ff82 	bl	800b388 <HAL_RTC_WaitForSynchro>
 800b484:	4603      	mov	r3, r0
 800b486:	2b00      	cmp	r3, #0
 800b488:	d005      	beq.n	800b496 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2203      	movs	r2, #3
 800b48e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800b492:	2303      	movs	r3, #3
 800b494:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b496:	4b05      	ldr	r3, [pc, #20]	; (800b4ac <RTC_ExitInitMode+0x78>)
 800b498:	689b      	ldr	r3, [r3, #8]
 800b49a:	4a04      	ldr	r2, [pc, #16]	; (800b4ac <RTC_ExitInitMode+0x78>)
 800b49c:	f043 0320 	orr.w	r3, r3, #32
 800b4a0:	6093      	str	r3, [r2, #8]
  }

  return status;
 800b4a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3710      	adds	r7, #16
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}
 800b4ac:	58004000 	.word	0x58004000

0800b4b0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b085      	sub	sp, #20
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800b4be:	79fb      	ldrb	r3, [r7, #7]
 800b4c0:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800b4c2:	e005      	b.n	800b4d0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	3301      	adds	r3, #1
 800b4c8:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800b4ca:	7afb      	ldrb	r3, [r7, #11]
 800b4cc:	3b0a      	subs	r3, #10
 800b4ce:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800b4d0:	7afb      	ldrb	r3, [r7, #11]
 800b4d2:	2b09      	cmp	r3, #9
 800b4d4:	d8f6      	bhi.n	800b4c4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	b2db      	uxtb	r3, r3
 800b4da:	011b      	lsls	r3, r3, #4
 800b4dc:	b2da      	uxtb	r2, r3
 800b4de:	7afb      	ldrb	r3, [r7, #11]
 800b4e0:	4313      	orrs	r3, r2
 800b4e2:	b2db      	uxtb	r3, r3
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3714      	adds	r7, #20
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ee:	4770      	bx	lr

0800b4f0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b08a      	sub	sp, #40	; 0x28
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d101      	bne.n	800b502 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b4fe:	2301      	movs	r3, #1
 800b500:	e07c      	b.n	800b5fc <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b508:	b2db      	uxtb	r3, r3
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d10c      	bne.n	800b528 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2200      	movs	r2, #0
 800b512:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	699b      	ldr	r3, [r3, #24]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d102      	bne.n	800b522 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2202      	movs	r2, #2
 800b520:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f7f7 faa4 	bl	8002a70 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2203      	movs	r2, #3
 800b52c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f000 f867 	bl	800b604 <HAL_SD_InitCard>
 800b536:	4603      	mov	r3, r0
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d001      	beq.n	800b540 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 800b53c:	2301      	movs	r3, #1
 800b53e:	e05d      	b.n	800b5fc <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800b540:	f107 0308 	add.w	r3, r7, #8
 800b544:	4619      	mov	r1, r3
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f001 f8ce 	bl	800c6e8 <HAL_SD_GetCardStatus>
 800b54c:	4603      	mov	r3, r0
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d001      	beq.n	800b556 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 800b552:	2301      	movs	r3, #1
 800b554:	e052      	b.n	800b5fc <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800b556:	7e3b      	ldrb	r3, [r7, #24]
 800b558:	b2db      	uxtb	r3, r3
 800b55a:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800b55c:	7e7b      	ldrb	r3, [r7, #25]
 800b55e:	b2db      	uxtb	r3, r3
 800b560:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b566:	2b01      	cmp	r3, #1
 800b568:	d10a      	bne.n	800b580 <HAL_SD_Init+0x90>
 800b56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d102      	bne.n	800b576 <HAL_SD_Init+0x86>
 800b570:	6a3b      	ldr	r3, [r7, #32]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d004      	beq.n	800b580 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b57c:	65da      	str	r2, [r3, #92]	; 0x5c
 800b57e:	e00b      	b.n	800b598 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b584:	2b01      	cmp	r3, #1
 800b586:	d104      	bne.n	800b592 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b58e:	65da      	str	r2, [r3, #92]	; 0x5c
 800b590:	e002      	b.n	800b598 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2200      	movs	r2, #0
 800b596:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	68db      	ldr	r3, [r3, #12]
 800b59c:	4619      	mov	r1, r3
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f001 f984 	bl	800c8ac <HAL_SD_ConfigWideBusOperation>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d001      	beq.n	800b5ae <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	e026      	b.n	800b5fc <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800b5ae:	f7f7 fe01 	bl	80031b4 <HAL_GetTick>
 800b5b2:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800b5b4:	e011      	b.n	800b5da <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800b5b6:	f7f7 fdfd 	bl	80031b4 <HAL_GetTick>
 800b5ba:	4602      	mov	r2, r0
 800b5bc:	69fb      	ldr	r3, [r7, #28]
 800b5be:	1ad3      	subs	r3, r2, r3
 800b5c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5c4:	d109      	bne.n	800b5da <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b5cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2201      	movs	r2, #1
 800b5d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800b5d6:	2303      	movs	r3, #3
 800b5d8:	e010      	b.n	800b5fc <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f001 fa10 	bl	800ca00 <HAL_SD_GetCardState>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	2b04      	cmp	r3, #4
 800b5e4:	d1e7      	bne.n	800b5b6 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2201      	movs	r2, #1
 800b5f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b5fa:	2300      	movs	r3, #0
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3728      	adds	r7, #40	; 0x28
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}

0800b604 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b604:	b5b0      	push	{r4, r5, r7, lr}
 800b606:	b08e      	sub	sp, #56	; 0x38
 800b608:	af04      	add	r7, sp, #16
 800b60a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800b60c:	2300      	movs	r3, #0
 800b60e:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800b610:	2300      	movs	r3, #0
 800b612:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800b614:	2300      	movs	r3, #0
 800b616:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800b618:	2300      	movs	r3, #0
 800b61a:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800b61c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800b620:	f7fe fd3e 	bl	800a0a0 <HAL_RCCEx_GetPeriphCLKFreq>
 800b624:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 800b626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b628:	0a1b      	lsrs	r3, r3, #8
 800b62a:	4a40      	ldr	r2, [pc, #256]	; (800b72c <HAL_SD_InitCard+0x128>)
 800b62c:	fba2 2303 	umull	r2, r3, r2, r3
 800b630:	091b      	lsrs	r3, r3, #4
 800b632:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	699b      	ldr	r3, [r3, #24]
 800b638:	2b02      	cmp	r3, #2
 800b63a:	d107      	bne.n	800b64c <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	681a      	ldr	r2, [r3, #0]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f042 0210 	orr.w	r2, r2, #16
 800b64a:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681d      	ldr	r5, [r3, #0]
 800b650:	466c      	mov	r4, sp
 800b652:	f107 0314 	add.w	r3, r7, #20
 800b656:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b65a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b65e:	f107 0308 	add.w	r3, r7, #8
 800b662:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b664:	4628      	mov	r0, r5
 800b666:	f004 f9f5 	bl	800fa54 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	4618      	mov	r0, r3
 800b670:	f004 fa38 	bl	800fae4 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800b674:	69bb      	ldr	r3, [r7, #24]
 800b676:	005b      	lsls	r3, r3, #1
 800b678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b67a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b67e:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 800b680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b682:	2b00      	cmp	r3, #0
 800b684:	d008      	beq.n	800b698 <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800b686:	4a2a      	ldr	r2, [pc, #168]	; (800b730 <HAL_SD_InitCard+0x12c>)
 800b688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b68a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b68e:	3301      	adds	r3, #1
 800b690:	4618      	mov	r0, r3
 800b692:	f7f7 fd9b 	bl	80031cc <HAL_Delay>
 800b696:	e002      	b.n	800b69e <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 800b698:	2002      	movs	r0, #2
 800b69a:	f7f7 fd97 	bl	80031cc <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f001 fa8c 	bl	800cbbc <SD_PowerON>
 800b6a4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b6a6:	6a3b      	ldr	r3, [r7, #32]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d00b      	beq.n	800b6c4 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2201      	movs	r2, #1
 800b6b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6b8:	6a3b      	ldr	r3, [r7, #32]
 800b6ba:	431a      	orrs	r2, r3
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b6c0:	2301      	movs	r3, #1
 800b6c2:	e02e      	b.n	800b722 <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f001 f9bb 	bl	800ca40 <SD_InitCard>
 800b6ca:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b6cc:	6a3b      	ldr	r3, [r7, #32]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d00b      	beq.n	800b6ea <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2201      	movs	r2, #1
 800b6d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6de:	6a3b      	ldr	r3, [r7, #32]
 800b6e0:	431a      	orrs	r2, r3
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	e01b      	b.n	800b722 <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	f004 fa8c 	bl	800fc10 <SDMMC_CmdBlockLength>
 800b6f8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b6fa:	6a3b      	ldr	r3, [r7, #32]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d00f      	beq.n	800b720 <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	4a0b      	ldr	r2, [pc, #44]	; (800b734 <HAL_SD_InitCard+0x130>)
 800b706:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b70c:	6a3b      	ldr	r3, [r7, #32]
 800b70e:	431a      	orrs	r2, r3
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2201      	movs	r2, #1
 800b718:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b71c:	2301      	movs	r3, #1
 800b71e:	e000      	b.n	800b722 <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 800b720:	2300      	movs	r3, #0
}
 800b722:	4618      	mov	r0, r3
 800b724:	3728      	adds	r7, #40	; 0x28
 800b726:	46bd      	mov	sp, r7
 800b728:	bdb0      	pop	{r4, r5, r7, pc}
 800b72a:	bf00      	nop
 800b72c:	014f8b59 	.word	0x014f8b59
 800b730:	00012110 	.word	0x00012110
 800b734:	1fe00fff 	.word	0x1fe00fff

0800b738 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b092      	sub	sp, #72	; 0x48
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	60f8      	str	r0, [r7, #12]
 800b740:	60b9      	str	r1, [r7, #8]
 800b742:	607a      	str	r2, [r7, #4]
 800b744:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b746:	f7f7 fd35 	bl	80031b4 <HAL_GetTick>
 800b74a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d107      	bne.n	800b76a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b75e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b766:	2301      	movs	r3, #1
 800b768:	e167      	b.n	800ba3a <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b770:	b2db      	uxtb	r3, r3
 800b772:	2b01      	cmp	r3, #1
 800b774:	f040 815a 	bne.w	800ba2c <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	2200      	movs	r2, #0
 800b77c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b77e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	441a      	add	r2, r3
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b788:	429a      	cmp	r2, r3
 800b78a:	d907      	bls.n	800b79c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b790:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b798:	2301      	movs	r3, #1
 800b79a:	e14e      	b.n	800ba3a <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2203      	movs	r2, #3
 800b7a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7b0:	2b01      	cmp	r3, #1
 800b7b2:	d002      	beq.n	800b7ba <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800b7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7b6:	025b      	lsls	r3, r3, #9
 800b7b8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b7ba:	f04f 33ff 	mov.w	r3, #4294967295
 800b7be:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	025b      	lsls	r3, r3, #9
 800b7c4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b7c6:	2390      	movs	r3, #144	; 0x90
 800b7c8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b7ca:	2302      	movs	r3, #2
 800b7cc:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f107 0214 	add.w	r2, r7, #20
 800b7de:	4611      	mov	r1, r2
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f004 f9e9 	bl	800fbb8 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	68da      	ldr	r2, [r3, #12]
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b7f4:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	2b01      	cmp	r3, #1
 800b7fa:	d90a      	bls.n	800b812 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	2202      	movs	r2, #2
 800b800:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b808:	4618      	mov	r0, r3
 800b80a:	f004 fa47 	bl	800fc9c <SDMMC_CmdReadMultiBlock>
 800b80e:	6478      	str	r0, [r7, #68]	; 0x44
 800b810:	e009      	b.n	800b826 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	2201      	movs	r2, #1
 800b816:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b81e:	4618      	mov	r0, r3
 800b820:	f004 fa19 	bl	800fc56 <SDMMC_CmdReadSingleBlock>
 800b824:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b826:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d012      	beq.n	800b852 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	4a84      	ldr	r2, [pc, #528]	; (800ba44 <HAL_SD_ReadBlocks+0x30c>)
 800b832:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b83a:	431a      	orrs	r2, r3
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	2201      	movs	r2, #1
 800b844:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	2200      	movs	r2, #0
 800b84c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b84e:	2301      	movs	r3, #1
 800b850:	e0f3      	b.n	800ba3a <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800b852:	69bb      	ldr	r3, [r7, #24]
 800b854:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b856:	e058      	b.n	800b90a <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b85e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b862:	2b00      	cmp	r3, #0
 800b864:	d033      	beq.n	800b8ce <HAL_SD_ReadBlocks+0x196>
 800b866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b868:	2b1f      	cmp	r3, #31
 800b86a:	d930      	bls.n	800b8ce <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800b86c:	2300      	movs	r3, #0
 800b86e:	643b      	str	r3, [r7, #64]	; 0x40
 800b870:	e027      	b.n	800b8c2 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	4618      	mov	r0, r3
 800b878:	f004 f916 	bl	800faa8 <SDMMC_ReadFIFO>
 800b87c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800b87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b880:	b2da      	uxtb	r2, r3
 800b882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b884:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b888:	3301      	adds	r3, #1
 800b88a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800b88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b88e:	0a1b      	lsrs	r3, r3, #8
 800b890:	b2da      	uxtb	r2, r3
 800b892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b894:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b898:	3301      	adds	r3, #1
 800b89a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800b89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b89e:	0c1b      	lsrs	r3, r3, #16
 800b8a0:	b2da      	uxtb	r2, r3
 800b8a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8a4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b8a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8a8:	3301      	adds	r3, #1
 800b8aa:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800b8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ae:	0e1b      	lsrs	r3, r3, #24
 800b8b0:	b2da      	uxtb	r2, r3
 800b8b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8b4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b8b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8b8:	3301      	adds	r3, #1
 800b8ba:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 800b8bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8be:	3301      	adds	r3, #1
 800b8c0:	643b      	str	r3, [r7, #64]	; 0x40
 800b8c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8c4:	2b07      	cmp	r3, #7
 800b8c6:	d9d4      	bls.n	800b872 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800b8c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8ca:	3b20      	subs	r3, #32
 800b8cc:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800b8ce:	f7f7 fc71 	bl	80031b4 <HAL_GetTick>
 800b8d2:	4602      	mov	r2, r0
 800b8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d6:	1ad3      	subs	r3, r2, r3
 800b8d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d902      	bls.n	800b8e4 <HAL_SD_ReadBlocks+0x1ac>
 800b8de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d112      	bne.n	800b90a <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	4a56      	ldr	r2, [pc, #344]	; (800ba44 <HAL_SD_ReadBlocks+0x30c>)
 800b8ea:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	2201      	movs	r2, #1
 800b8fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	2200      	movs	r2, #0
 800b904:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800b906:	2303      	movs	r3, #3
 800b908:	e097      	b.n	800ba3a <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b910:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800b914:	2b00      	cmp	r3, #0
 800b916:	d09f      	beq.n	800b858 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	68da      	ldr	r2, [r3, #12]
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b926:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b92e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b932:	2b00      	cmp	r3, #0
 800b934:	d022      	beq.n	800b97c <HAL_SD_ReadBlocks+0x244>
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	2b01      	cmp	r3, #1
 800b93a:	d91f      	bls.n	800b97c <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b940:	2b03      	cmp	r3, #3
 800b942:	d01b      	beq.n	800b97c <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	4618      	mov	r0, r3
 800b94a:	f004 fa11 	bl	800fd70 <SDMMC_CmdStopTransfer>
 800b94e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800b950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b952:	2b00      	cmp	r3, #0
 800b954:	d012      	beq.n	800b97c <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	4a3a      	ldr	r2, [pc, #232]	; (800ba44 <HAL_SD_ReadBlocks+0x30c>)
 800b95c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b962:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b964:	431a      	orrs	r2, r3
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	2201      	movs	r2, #1
 800b96e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	2200      	movs	r2, #0
 800b976:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800b978:	2301      	movs	r3, #1
 800b97a:	e05e      	b.n	800ba3a <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b982:	f003 0308 	and.w	r3, r3, #8
 800b986:	2b00      	cmp	r3, #0
 800b988:	d012      	beq.n	800b9b0 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	4a2d      	ldr	r2, [pc, #180]	; (800ba44 <HAL_SD_ReadBlocks+0x30c>)
 800b990:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b996:	f043 0208 	orr.w	r2, r3, #8
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	2201      	movs	r2, #1
 800b9a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	e044      	b.n	800ba3a <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9b6:	f003 0302 	and.w	r3, r3, #2
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d012      	beq.n	800b9e4 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	4a20      	ldr	r2, [pc, #128]	; (800ba44 <HAL_SD_ReadBlocks+0x30c>)
 800b9c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ca:	f043 0202 	orr.w	r2, r3, #2
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2201      	movs	r2, #1
 800b9d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b9e0:	2301      	movs	r3, #1
 800b9e2:	e02a      	b.n	800ba3a <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9ea:	f003 0320 	and.w	r3, r3, #32
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d012      	beq.n	800ba18 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	4a13      	ldr	r2, [pc, #76]	; (800ba44 <HAL_SD_ReadBlocks+0x30c>)
 800b9f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9fe:	f043 0220 	orr.w	r2, r3, #32
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	2201      	movs	r2, #1
 800ba0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	2200      	movs	r2, #0
 800ba12:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ba14:	2301      	movs	r3, #1
 800ba16:	e010      	b.n	800ba3a <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	4a0a      	ldr	r2, [pc, #40]	; (800ba48 <HAL_SD_ReadBlocks+0x310>)
 800ba1e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	2201      	movs	r2, #1
 800ba24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	e006      	b.n	800ba3a <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba30:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ba38:	2301      	movs	r3, #1
  }
}
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	3748      	adds	r7, #72	; 0x48
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}
 800ba42:	bf00      	nop
 800ba44:	1fe00fff 	.word	0x1fe00fff
 800ba48:	18000f3a 	.word	0x18000f3a

0800ba4c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b092      	sub	sp, #72	; 0x48
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	60f8      	str	r0, [r7, #12]
 800ba54:	60b9      	str	r1, [r7, #8]
 800ba56:	607a      	str	r2, [r7, #4]
 800ba58:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ba5a:	f7f7 fbab 	bl	80031b4 <HAL_GetTick>
 800ba5e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d107      	bne.n	800ba7e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba72:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	e16b      	b.n	800bd56 <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ba84:	b2db      	uxtb	r3, r3
 800ba86:	2b01      	cmp	r3, #1
 800ba88:	f040 815e 	bne.w	800bd48 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ba92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	441a      	add	r2, r3
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba9c:	429a      	cmp	r2, r3
 800ba9e:	d907      	bls.n	800bab0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baa4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800baac:	2301      	movs	r3, #1
 800baae:	e152      	b.n	800bd56 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	2203      	movs	r2, #3
 800bab4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	2200      	movs	r2, #0
 800babe:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bac4:	2b01      	cmp	r3, #1
 800bac6:	d002      	beq.n	800bace <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800bac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baca:	025b      	lsls	r3, r3, #9
 800bacc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bace:	f04f 33ff 	mov.w	r3, #4294967295
 800bad2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	025b      	lsls	r3, r3, #9
 800bad8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800bada:	2390      	movs	r3, #144	; 0x90
 800badc:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800bade:	2300      	movs	r3, #0
 800bae0:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bae2:	2300      	movs	r3, #0
 800bae4:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800bae6:	2300      	movs	r3, #0
 800bae8:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	f107 0218 	add.w	r2, r7, #24
 800baf2:	4611      	mov	r1, r2
 800baf4:	4618      	mov	r0, r3
 800baf6:	f004 f85f 	bl	800fbb8 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	68da      	ldr	r2, [r3, #12]
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bb08:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	2b01      	cmp	r3, #1
 800bb0e:	d90a      	bls.n	800bb26 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	2220      	movs	r2, #32
 800bb14:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f004 f903 	bl	800fd28 <SDMMC_CmdWriteMultiBlock>
 800bb22:	6478      	str	r0, [r7, #68]	; 0x44
 800bb24:	e009      	b.n	800bb3a <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	2210      	movs	r2, #16
 800bb2a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bb32:	4618      	mov	r0, r3
 800bb34:	f004 f8d5 	bl	800fce2 <SDMMC_CmdWriteSingleBlock>
 800bb38:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800bb3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d012      	beq.n	800bb66 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	4a86      	ldr	r2, [pc, #536]	; (800bd60 <HAL_SD_WriteBlocks+0x314>)
 800bb46:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb4e:	431a      	orrs	r2, r3
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	2201      	movs	r2, #1
 800bb58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bb62:	2301      	movs	r3, #1
 800bb64:	e0f7      	b.n	800bd56 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800bb66:	69fb      	ldr	r3, [r7, #28]
 800bb68:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bb6a:	e05c      	b.n	800bc26 <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d037      	beq.n	800bbea <HAL_SD_WriteBlocks+0x19e>
 800bb7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb7c:	2b1f      	cmp	r3, #31
 800bb7e:	d934      	bls.n	800bbea <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800bb80:	2300      	movs	r3, #0
 800bb82:	643b      	str	r3, [r7, #64]	; 0x40
 800bb84:	e02b      	b.n	800bbde <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800bb86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb88:	781b      	ldrb	r3, [r3, #0]
 800bb8a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bb8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb8e:	3301      	adds	r3, #1
 800bb90:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800bb92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb94:	781b      	ldrb	r3, [r3, #0]
 800bb96:	021a      	lsls	r2, r3, #8
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	4313      	orrs	r3, r2
 800bb9c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bb9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bba0:	3301      	adds	r3, #1
 800bba2:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800bba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bba6:	781b      	ldrb	r3, [r3, #0]
 800bba8:	041a      	lsls	r2, r3, #16
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	4313      	orrs	r3, r2
 800bbae:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bbb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbb2:	3301      	adds	r3, #1
 800bbb4:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800bbb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbb8:	781b      	ldrb	r3, [r3, #0]
 800bbba:	061a      	lsls	r2, r3, #24
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	4313      	orrs	r3, r2
 800bbc0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bbc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbc4:	3301      	adds	r3, #1
 800bbc6:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f107 0214 	add.w	r2, r7, #20
 800bbd0:	4611      	mov	r1, r2
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f003 ff75 	bl	800fac2 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800bbd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbda:	3301      	adds	r3, #1
 800bbdc:	643b      	str	r3, [r7, #64]	; 0x40
 800bbde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbe0:	2b07      	cmp	r3, #7
 800bbe2:	d9d0      	bls.n	800bb86 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 800bbe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbe6:	3b20      	subs	r3, #32
 800bbe8:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800bbea:	f7f7 fae3 	bl	80031b4 <HAL_GetTick>
 800bbee:	4602      	mov	r2, r0
 800bbf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbf2:	1ad3      	subs	r3, r2, r3
 800bbf4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bbf6:	429a      	cmp	r2, r3
 800bbf8:	d902      	bls.n	800bc00 <HAL_SD_WriteBlocks+0x1b4>
 800bbfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d112      	bne.n	800bc26 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	4a56      	ldr	r2, [pc, #344]	; (800bd60 <HAL_SD_WriteBlocks+0x314>)
 800bc06:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc0e:	431a      	orrs	r2, r3
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	2201      	movs	r2, #1
 800bc18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800bc22:	2303      	movs	r3, #3
 800bc24:	e097      	b.n	800bd56 <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc2c:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d09b      	beq.n	800bb6c <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	68da      	ldr	r2, [r3, #12]
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc42:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d022      	beq.n	800bc98 <HAL_SD_WriteBlocks+0x24c>
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	2b01      	cmp	r3, #1
 800bc56:	d91f      	bls.n	800bc98 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc5c:	2b03      	cmp	r3, #3
 800bc5e:	d01b      	beq.n	800bc98 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	4618      	mov	r0, r3
 800bc66:	f004 f883 	bl	800fd70 <SDMMC_CmdStopTransfer>
 800bc6a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800bc6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d012      	beq.n	800bc98 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	4a3a      	ldr	r2, [pc, #232]	; (800bd60 <HAL_SD_WriteBlocks+0x314>)
 800bc78:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc80:	431a      	orrs	r2, r3
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	2201      	movs	r2, #1
 800bc8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	2200      	movs	r2, #0
 800bc92:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800bc94:	2301      	movs	r3, #1
 800bc96:	e05e      	b.n	800bd56 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc9e:	f003 0308 	and.w	r3, r3, #8
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d012      	beq.n	800bccc <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	4a2d      	ldr	r2, [pc, #180]	; (800bd60 <HAL_SD_WriteBlocks+0x314>)
 800bcac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcb2:	f043 0208 	orr.w	r2, r3, #8
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	2201      	movs	r2, #1
 800bcbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bcc8:	2301      	movs	r3, #1
 800bcca:	e044      	b.n	800bd56 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcd2:	f003 0302 	and.w	r3, r3, #2
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d012      	beq.n	800bd00 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	4a20      	ldr	r2, [pc, #128]	; (800bd60 <HAL_SD_WriteBlocks+0x314>)
 800bce0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bce6:	f043 0202 	orr.w	r2, r3, #2
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	2201      	movs	r2, #1
 800bcf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	e02a      	b.n	800bd56 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd06:	f003 0310 	and.w	r3, r3, #16
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d012      	beq.n	800bd34 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	4a13      	ldr	r2, [pc, #76]	; (800bd60 <HAL_SD_WriteBlocks+0x314>)
 800bd14:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd1a:	f043 0210 	orr.w	r2, r3, #16
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	2201      	movs	r2, #1
 800bd26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bd30:	2301      	movs	r3, #1
 800bd32:	e010      	b.n	800bd56 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	4a0a      	ldr	r2, [pc, #40]	; (800bd64 <HAL_SD_WriteBlocks+0x318>)
 800bd3a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	2201      	movs	r2, #1
 800bd40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800bd44:	2300      	movs	r3, #0
 800bd46:	e006      	b.n	800bd56 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd4c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bd54:	2301      	movs	r3, #1
  }
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	3748      	adds	r7, #72	; 0x48
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}
 800bd5e:	bf00      	nop
 800bd60:	1fe00fff 	.word	0x1fe00fff
 800bd64:	18000f3a 	.word	0x18000f3a

0800bd68 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b08c      	sub	sp, #48	; 0x30
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	60f8      	str	r0, [r7, #12]
 800bd70:	60b9      	str	r1, [r7, #8]
 800bd72:	607a      	str	r2, [r7, #4]
 800bd74:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d107      	bne.n	800bd90 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd84:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	e08d      	b.n	800beac <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bd96:	b2db      	uxtb	r3, r3
 800bd98:	2b01      	cmp	r3, #1
 800bd9a:	f040 8086 	bne.w	800beaa <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2200      	movs	r2, #0
 800bda2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bda4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	441a      	add	r2, r3
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdae:	429a      	cmp	r2, r3
 800bdb0:	d907      	bls.n	800bdc2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdb6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	e074      	b.n	800beac <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	2203      	movs	r2, #3
 800bdc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	2200      	movs	r2, #0
 800bdd0:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	68ba      	ldr	r2, [r7, #8]
 800bdd6:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	025a      	lsls	r2, r3, #9
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bde4:	2b01      	cmp	r3, #1
 800bde6:	d002      	beq.n	800bdee <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800bde8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdea:	025b      	lsls	r3, r3, #9
 800bdec:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bdee:	f04f 33ff 	mov.w	r3, #4294967295
 800bdf2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	025b      	lsls	r3, r3, #9
 800bdf8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800bdfa:	2390      	movs	r3, #144	; 0x90
 800bdfc:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800bdfe:	2302      	movs	r3, #2
 800be00:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800be02:	2300      	movs	r3, #0
 800be04:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800be06:	2300      	movs	r3, #0
 800be08:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f107 0210 	add.w	r2, r7, #16
 800be12:	4611      	mov	r1, r2
 800be14:	4618      	mov	r0, r3
 800be16:	f003 fecf 	bl	800fbb8 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	68da      	ldr	r2, [r3, #12]
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800be28:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	68ba      	ldr	r2, [r7, #8]
 800be30:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	2201      	movs	r2, #1
 800be38:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	2b01      	cmp	r3, #1
 800be3e:	d90a      	bls.n	800be56 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	2282      	movs	r2, #130	; 0x82
 800be44:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be4c:	4618      	mov	r0, r3
 800be4e:	f003 ff25 	bl	800fc9c <SDMMC_CmdReadMultiBlock>
 800be52:	62f8      	str	r0, [r7, #44]	; 0x2c
 800be54:	e009      	b.n	800be6a <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	2281      	movs	r2, #129	; 0x81
 800be5a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be62:	4618      	mov	r0, r3
 800be64:	f003 fef7 	bl	800fc56 <SDMMC_CmdReadSingleBlock>
 800be68:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800be6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d012      	beq.n	800be96 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	4a0f      	ldr	r2, [pc, #60]	; (800beb4 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800be76:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be7e:	431a      	orrs	r2, r3
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2201      	movs	r2, #1
 800be88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	2200      	movs	r2, #0
 800be90:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800be92:	2301      	movs	r3, #1
 800be94:	e00a      	b.n	800beac <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800bea4:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800bea6:	2300      	movs	r3, #0
 800bea8:	e000      	b.n	800beac <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800beaa:	2302      	movs	r3, #2
  }
}
 800beac:	4618      	mov	r0, r3
 800beae:	3730      	adds	r7, #48	; 0x30
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}
 800beb4:	1fe00fff 	.word	0x1fe00fff

0800beb8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b08c      	sub	sp, #48	; 0x30
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	60f8      	str	r0, [r7, #12]
 800bec0:	60b9      	str	r1, [r7, #8]
 800bec2:	607a      	str	r2, [r7, #4]
 800bec4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d107      	bne.n	800bee0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bed4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bedc:	2301      	movs	r3, #1
 800bede:	e08d      	b.n	800bffc <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bee6:	b2db      	uxtb	r3, r3
 800bee8:	2b01      	cmp	r3, #1
 800beea:	f040 8086 	bne.w	800bffa <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	2200      	movs	r2, #0
 800bef2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bef4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	441a      	add	r2, r3
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800befe:	429a      	cmp	r2, r3
 800bf00:	d907      	bls.n	800bf12 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf06:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800bf0e:	2301      	movs	r3, #1
 800bf10:	e074      	b.n	800bffc <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	2203      	movs	r2, #3
 800bf16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	68ba      	ldr	r2, [r7, #8]
 800bf26:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	025a      	lsls	r2, r3, #9
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	625a      	str	r2, [r3, #36]	; 0x24

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf34:	2b01      	cmp	r3, #1
 800bf36:	d002      	beq.n	800bf3e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800bf38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf3a:	025b      	lsls	r3, r3, #9
 800bf3c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bf3e:	f04f 33ff 	mov.w	r3, #4294967295
 800bf42:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	025b      	lsls	r3, r3, #9
 800bf48:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800bf4a:	2390      	movs	r3, #144	; 0x90
 800bf4c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bf52:	2300      	movs	r3, #0
 800bf54:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800bf56:	2300      	movs	r3, #0
 800bf58:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	f107 0210 	add.w	r2, r7, #16
 800bf62:	4611      	mov	r1, r2
 800bf64:	4618      	mov	r0, r3
 800bf66:	f003 fe27 	bl	800fbb8 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	68da      	ldr	r2, [r3, #12]
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bf78:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	68ba      	ldr	r2, [r7, #8]
 800bf80:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	2201      	movs	r2, #1
 800bf88:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	2b01      	cmp	r3, #1
 800bf8e:	d90a      	bls.n	800bfa6 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	22a0      	movs	r2, #160	; 0xa0
 800bf94:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f003 fec3 	bl	800fd28 <SDMMC_CmdWriteMultiBlock>
 800bfa2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800bfa4:	e009      	b.n	800bfba <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	2290      	movs	r2, #144	; 0x90
 800bfaa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f003 fe95 	bl	800fce2 <SDMMC_CmdWriteSingleBlock>
 800bfb8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800bfba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d012      	beq.n	800bfe6 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	4a0f      	ldr	r2, [pc, #60]	; (800c004 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800bfc6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bfcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfce:	431a      	orrs	r2, r3
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	2201      	movs	r2, #1
 800bfd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	e00a      	b.n	800bffc <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800bff4:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800bff6:	2300      	movs	r3, #0
 800bff8:	e000      	b.n	800bffc <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800bffa:	2302      	movs	r3, #2
  }
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	3730      	adds	r7, #48	; 0x30
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}
 800c004:	1fe00fff 	.word	0x1fe00fff

0800c008 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b084      	sub	sp, #16
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c014:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c01c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c020:	2b00      	cmp	r3, #0
 800c022:	d008      	beq.n	800c036 <HAL_SD_IRQHandler+0x2e>
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	f003 0308 	and.w	r3, r3, #8
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d003      	beq.n	800c036 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f001 f92a 	bl	800d288 <SD_Read_IT>
 800c034:	e19a      	b.n	800c36c <HAL_SD_IRQHandler+0x364>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c03c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c040:	2b00      	cmp	r3, #0
 800c042:	f000 80ac 	beq.w	800c19e <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c04e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681a      	ldr	r2, [r3, #0]
 800c05a:	4b9d      	ldr	r3, [pc, #628]	; (800c2d0 <HAL_SD_IRQHandler+0x2c8>)
 800c05c:	400b      	ands	r3, r1
 800c05e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c06e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	68da      	ldr	r2, [r3, #12]
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c07e:	60da      	str	r2, [r3, #12]

    if((context & SD_CONTEXT_IT) != 0U)
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	f003 0308 	and.w	r3, r3, #8
 800c086:	2b00      	cmp	r3, #0
 800c088:	d038      	beq.n	800c0fc <HAL_SD_IRQHandler+0xf4>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	f003 0302 	and.w	r3, r3, #2
 800c090:	2b00      	cmp	r3, #0
 800c092:	d104      	bne.n	800c09e <HAL_SD_IRQHandler+0x96>
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	f003 0320 	and.w	r3, r3, #32
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d011      	beq.n	800c0c2 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f003 fe64 	bl	800fd70 <SDMMC_CmdStopTransfer>
 800c0a8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d008      	beq.n	800c0c2 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	431a      	orrs	r2, r3
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f000 f959 	bl	800c374 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	4a83      	ldr	r2, [pc, #524]	; (800c2d4 <HAL_SD_IRQHandler+0x2cc>)
 800c0c8:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2201      	movs	r2, #1
 800c0ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	f003 0301 	and.w	r3, r3, #1
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d104      	bne.n	800c0ec <HAL_SD_IRQHandler+0xe4>
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	f003 0302 	and.w	r3, r3, #2
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d003      	beq.n	800c0f4 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f005 fe55 	bl	8011d9c <HAL_SD_RxCpltCallback>
 800c0f2:	e13b      	b.n	800c36c <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f005 fe47 	bl	8011d88 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c0fa:	e137      	b.n	800c36c <HAL_SD_IRQHandler+0x364>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c102:	2b00      	cmp	r3, #0
 800c104:	f000 8132 	beq.w	800c36c <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	2200      	movs	r2, #0
 800c10e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	2200      	movs	r2, #0
 800c116:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	2200      	movs	r2, #0
 800c11e:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	f003 0302 	and.w	r3, r3, #2
 800c126:	2b00      	cmp	r3, #0
 800c128:	d104      	bne.n	800c134 <HAL_SD_IRQHandler+0x12c>
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	f003 0320 	and.w	r3, r3, #32
 800c130:	2b00      	cmp	r3, #0
 800c132:	d011      	beq.n	800c158 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	4618      	mov	r0, r3
 800c13a:	f003 fe19 	bl	800fd70 <SDMMC_CmdStopTransfer>
 800c13e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800c140:	68bb      	ldr	r3, [r7, #8]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d008      	beq.n	800c158 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	431a      	orrs	r2, r3
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	f000 f90e 	bl	800c374 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2201      	movs	r2, #1
 800c15c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2200      	movs	r2, #0
 800c164:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	f003 0310 	and.w	r3, r3, #16
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d104      	bne.n	800c17a <HAL_SD_IRQHandler+0x172>
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	f003 0320 	and.w	r3, r3, #32
 800c176:	2b00      	cmp	r3, #0
 800c178:	d002      	beq.n	800c180 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f005 fe04 	bl	8011d88 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	f003 0301 	and.w	r3, r3, #1
 800c186:	2b00      	cmp	r3, #0
 800c188:	d105      	bne.n	800c196 <HAL_SD_IRQHandler+0x18e>
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	f003 0302 	and.w	r3, r3, #2
 800c190:	2b00      	cmp	r3, #0
 800c192:	f000 80eb 	beq.w	800c36c <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	f005 fe00 	bl	8011d9c <HAL_SD_RxCpltCallback>
}
 800c19c:	e0e6      	b.n	800c36c <HAL_SD_IRQHandler+0x364>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d008      	beq.n	800c1be <HAL_SD_IRQHandler+0x1b6>
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	f003 0308 	and.w	r3, r3, #8
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d003      	beq.n	800c1be <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f001 f8ac 	bl	800d314 <SD_Write_IT>
 800c1bc:	e0d6      	b.n	800c36c <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1c4:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	f000 80a2 	beq.w	800c312 <HAL_SD_IRQHandler+0x30a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1d4:	f003 0302 	and.w	r3, r3, #2
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d005      	beq.n	800c1e8 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1e0:	f043 0202 	orr.w	r2, r3, #2
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1ee:	f003 0308 	and.w	r3, r3, #8
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d005      	beq.n	800c202 <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1fa:	f043 0208 	orr.w	r2, r3, #8
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c208:	f003 0320 	and.w	r3, r3, #32
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d005      	beq.n	800c21c <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c214:	f043 0220 	orr.w	r2, r3, #32
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c222:	f003 0310 	and.w	r3, r3, #16
 800c226:	2b00      	cmp	r3, #0
 800c228:	d005      	beq.n	800c236 <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c22e:	f043 0210 	orr.w	r2, r3, #16
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	4a26      	ldr	r2, [pc, #152]	; (800c2d4 <HAL_SD_IRQHandler+0x2cc>)
 800c23c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800c24c:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	68da      	ldr	r2, [r3, #12]
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c25c:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c26c:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	68da      	ldr	r2, [r3, #12]
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c27c:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	4618      	mov	r0, r3
 800c284:	f003 fd74 	bl	800fd70 <SDMMC_CmdStopTransfer>
 800c288:	4602      	mov	r2, r0
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c28e:	431a      	orrs	r2, r3
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	68da      	ldr	r2, [r3, #12]
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c2a2:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c2ac:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	f003 0308 	and.w	r3, r3, #8
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d00f      	beq.n	800c2d8 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2201      	movs	r2, #1
 800c2bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f000 f854 	bl	800c374 <HAL_SD_ErrorCallback>
}
 800c2cc:	e04e      	b.n	800c36c <HAL_SD_IRQHandler+0x364>
 800c2ce:	bf00      	nop
 800c2d0:	ffff3ec5 	.word	0xffff3ec5
 800c2d4:	18000f3a 	.word	0x18000f3a
    else if((context & SD_CONTEXT_DMA) != 0U)
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d044      	beq.n	800c36c <HAL_SD_IRQHandler+0x364>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d040      	beq.n	800c36c <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c2f8:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	2200      	movs	r2, #0
 800c300:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2201      	movs	r2, #1
 800c306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f000 f832 	bl	800c374 <HAL_SD_ErrorCallback>
}
 800c310:	e02c      	b.n	800c36c <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d025      	beq.n	800c36c <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c328:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c330:	f003 0304 	and.w	r3, r3, #4
 800c334:	2b00      	cmp	r3, #0
 800c336:	d10c      	bne.n	800c352 <HAL_SD_IRQHandler+0x34a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	f003 0320 	and.w	r3, r3, #32
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d003      	beq.n	800c34a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f001 f84e 	bl	800d3e4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800c348:	e010      	b.n	800c36c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f001 f836 	bl	800d3bc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800c350:	e00c      	b.n	800c36c <HAL_SD_IRQHandler+0x364>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	f003 0320 	and.w	r3, r3, #32
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d003      	beq.n	800c364 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	f001 f837 	bl	800d3d0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800c362:	e003      	b.n	800c36c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800c364:	6878      	ldr	r0, [r7, #4]
 800c366:	f001 f81f 	bl	800d3a8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800c36a:	e7ff      	b.n	800c36c <HAL_SD_IRQHandler+0x364>
 800c36c:	bf00      	nop
 800c36e:	3710      	adds	r7, #16
 800c370:	46bd      	mov	sp, r7
 800c372:	bd80      	pop	{r7, pc}

0800c374 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800c374:	b480      	push	{r7}
 800c376:	b083      	sub	sp, #12
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800c37c:	bf00      	nop
 800c37e:	370c      	adds	r7, #12
 800c380:	46bd      	mov	sp, r7
 800c382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c386:	4770      	bx	lr

0800c388 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800c388:	b480      	push	{r7}
 800c38a:	b083      	sub	sp, #12
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	4603      	mov	r3, r0
 800c390:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 800c392:	bf00      	nop
 800c394:	370c      	adds	r7, #12
 800c396:	46bd      	mov	sp, r7
 800c398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39c:	4770      	bx	lr
	...

0800c3a0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b083      	sub	sp, #12
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
 800c3a8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c3ae:	0f9b      	lsrs	r3, r3, #30
 800c3b0:	b2da      	uxtb	r2, r3
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c3ba:	0e9b      	lsrs	r3, r3, #26
 800c3bc:	b2db      	uxtb	r3, r3
 800c3be:	f003 030f 	and.w	r3, r3, #15
 800c3c2:	b2da      	uxtb	r2, r3
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c3cc:	0e1b      	lsrs	r3, r3, #24
 800c3ce:	b2db      	uxtb	r3, r3
 800c3d0:	f003 0303 	and.w	r3, r3, #3
 800c3d4:	b2da      	uxtb	r2, r3
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c3de:	0c1b      	lsrs	r3, r3, #16
 800c3e0:	b2da      	uxtb	r2, r3
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c3ea:	0a1b      	lsrs	r3, r3, #8
 800c3ec:	b2da      	uxtb	r2, r3
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c3f6:	b2da      	uxtb	r2, r3
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c400:	0d1b      	lsrs	r3, r3, #20
 800c402:	b29a      	uxth	r2, r3
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c40c:	0c1b      	lsrs	r3, r3, #16
 800c40e:	b2db      	uxtb	r3, r3
 800c410:	f003 030f 	and.w	r3, r3, #15
 800c414:	b2da      	uxtb	r2, r3
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c41e:	0bdb      	lsrs	r3, r3, #15
 800c420:	b2db      	uxtb	r3, r3
 800c422:	f003 0301 	and.w	r3, r3, #1
 800c426:	b2da      	uxtb	r2, r3
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c430:	0b9b      	lsrs	r3, r3, #14
 800c432:	b2db      	uxtb	r3, r3
 800c434:	f003 0301 	and.w	r3, r3, #1
 800c438:	b2da      	uxtb	r2, r3
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c442:	0b5b      	lsrs	r3, r3, #13
 800c444:	b2db      	uxtb	r3, r3
 800c446:	f003 0301 	and.w	r3, r3, #1
 800c44a:	b2da      	uxtb	r2, r3
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c454:	0b1b      	lsrs	r3, r3, #12
 800c456:	b2db      	uxtb	r3, r3
 800c458:	f003 0301 	and.w	r3, r3, #1
 800c45c:	b2da      	uxtb	r2, r3
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	2200      	movs	r2, #0
 800c466:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d163      	bne.n	800c538 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c474:	009a      	lsls	r2, r3, #2
 800c476:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c47a:	4013      	ands	r3, r2
 800c47c:	687a      	ldr	r2, [r7, #4]
 800c47e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800c480:	0f92      	lsrs	r2, r2, #30
 800c482:	431a      	orrs	r2, r3
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c48c:	0edb      	lsrs	r3, r3, #27
 800c48e:	b2db      	uxtb	r3, r3
 800c490:	f003 0307 	and.w	r3, r3, #7
 800c494:	b2da      	uxtb	r2, r3
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c49e:	0e1b      	lsrs	r3, r3, #24
 800c4a0:	b2db      	uxtb	r3, r3
 800c4a2:	f003 0307 	and.w	r3, r3, #7
 800c4a6:	b2da      	uxtb	r2, r3
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c4b0:	0d5b      	lsrs	r3, r3, #21
 800c4b2:	b2db      	uxtb	r3, r3
 800c4b4:	f003 0307 	and.w	r3, r3, #7
 800c4b8:	b2da      	uxtb	r2, r3
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c4c2:	0c9b      	lsrs	r3, r3, #18
 800c4c4:	b2db      	uxtb	r3, r3
 800c4c6:	f003 0307 	and.w	r3, r3, #7
 800c4ca:	b2da      	uxtb	r2, r3
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c4d4:	0bdb      	lsrs	r3, r3, #15
 800c4d6:	b2db      	uxtb	r3, r3
 800c4d8:	f003 0307 	and.w	r3, r3, #7
 800c4dc:	b2da      	uxtb	r2, r3
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	691b      	ldr	r3, [r3, #16]
 800c4e6:	1c5a      	adds	r2, r3, #1
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	7e1b      	ldrb	r3, [r3, #24]
 800c4f0:	b2db      	uxtb	r3, r3
 800c4f2:	f003 0307 	and.w	r3, r3, #7
 800c4f6:	3302      	adds	r3, #2
 800c4f8:	2201      	movs	r2, #1
 800c4fa:	fa02 f303 	lsl.w	r3, r2, r3
 800c4fe:	687a      	ldr	r2, [r7, #4]
 800c500:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800c502:	fb02 f203 	mul.w	r2, r2, r3
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	7a1b      	ldrb	r3, [r3, #8]
 800c50e:	b2db      	uxtb	r3, r3
 800c510:	f003 030f 	and.w	r3, r3, #15
 800c514:	2201      	movs	r2, #1
 800c516:	409a      	lsls	r2, r3
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c520:	687a      	ldr	r2, [r7, #4]
 800c522:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800c524:	0a52      	lsrs	r2, r2, #9
 800c526:	fb02 f203 	mul.w	r2, r2, r3
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c534:	659a      	str	r2, [r3, #88]	; 0x58
 800c536:	e031      	b.n	800c59c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c53c:	2b01      	cmp	r3, #1
 800c53e:	d11d      	bne.n	800c57c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c544:	041b      	lsls	r3, r3, #16
 800c546:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c54e:	0c1b      	lsrs	r3, r3, #16
 800c550:	431a      	orrs	r2, r3
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	691b      	ldr	r3, [r3, #16]
 800c55a:	3301      	adds	r3, #1
 800c55c:	029a      	lsls	r2, r3, #10
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c570:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	659a      	str	r2, [r3, #88]	; 0x58
 800c57a:	e00f      	b.n	800c59c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	4a58      	ldr	r2, [pc, #352]	; (800c6e4 <HAL_SD_GetCardCSD+0x344>)
 800c582:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c588:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2201      	movs	r2, #1
 800c594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c598:	2301      	movs	r3, #1
 800c59a:	e09d      	b.n	800c6d8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c5a0:	0b9b      	lsrs	r3, r3, #14
 800c5a2:	b2db      	uxtb	r3, r3
 800c5a4:	f003 0301 	and.w	r3, r3, #1
 800c5a8:	b2da      	uxtb	r2, r3
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c5b2:	09db      	lsrs	r3, r3, #7
 800c5b4:	b2db      	uxtb	r3, r3
 800c5b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5ba:	b2da      	uxtb	r2, r3
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c5c4:	b2db      	uxtb	r3, r3
 800c5c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5ca:	b2da      	uxtb	r2, r3
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5d4:	0fdb      	lsrs	r3, r3, #31
 800c5d6:	b2da      	uxtb	r2, r3
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5e0:	0f5b      	lsrs	r3, r3, #29
 800c5e2:	b2db      	uxtb	r3, r3
 800c5e4:	f003 0303 	and.w	r3, r3, #3
 800c5e8:	b2da      	uxtb	r2, r3
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5f2:	0e9b      	lsrs	r3, r3, #26
 800c5f4:	b2db      	uxtb	r3, r3
 800c5f6:	f003 0307 	and.w	r3, r3, #7
 800c5fa:	b2da      	uxtb	r2, r3
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c604:	0d9b      	lsrs	r3, r3, #22
 800c606:	b2db      	uxtb	r3, r3
 800c608:	f003 030f 	and.w	r3, r3, #15
 800c60c:	b2da      	uxtb	r2, r3
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c616:	0d5b      	lsrs	r3, r3, #21
 800c618:	b2db      	uxtb	r3, r3
 800c61a:	f003 0301 	and.w	r3, r3, #1
 800c61e:	b2da      	uxtb	r2, r3
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	2200      	movs	r2, #0
 800c62a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c632:	0c1b      	lsrs	r3, r3, #16
 800c634:	b2db      	uxtb	r3, r3
 800c636:	f003 0301 	and.w	r3, r3, #1
 800c63a:	b2da      	uxtb	r2, r3
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c646:	0bdb      	lsrs	r3, r3, #15
 800c648:	b2db      	uxtb	r3, r3
 800c64a:	f003 0301 	and.w	r3, r3, #1
 800c64e:	b2da      	uxtb	r2, r3
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c65a:	0b9b      	lsrs	r3, r3, #14
 800c65c:	b2db      	uxtb	r3, r3
 800c65e:	f003 0301 	and.w	r3, r3, #1
 800c662:	b2da      	uxtb	r2, r3
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c66e:	0b5b      	lsrs	r3, r3, #13
 800c670:	b2db      	uxtb	r3, r3
 800c672:	f003 0301 	and.w	r3, r3, #1
 800c676:	b2da      	uxtb	r2, r3
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c682:	0b1b      	lsrs	r3, r3, #12
 800c684:	b2db      	uxtb	r3, r3
 800c686:	f003 0301 	and.w	r3, r3, #1
 800c68a:	b2da      	uxtb	r2, r3
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c696:	0a9b      	lsrs	r3, r3, #10
 800c698:	b2db      	uxtb	r3, r3
 800c69a:	f003 0303 	and.w	r3, r3, #3
 800c69e:	b2da      	uxtb	r2, r3
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6aa:	0a1b      	lsrs	r3, r3, #8
 800c6ac:	b2db      	uxtb	r3, r3
 800c6ae:	f003 0303 	and.w	r3, r3, #3
 800c6b2:	b2da      	uxtb	r2, r3
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6be:	085b      	lsrs	r3, r3, #1
 800c6c0:	b2db      	uxtb	r3, r3
 800c6c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6c6:	b2da      	uxtb	r2, r3
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	2201      	movs	r2, #1
 800c6d2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800c6d6:	2300      	movs	r3, #0
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	370c      	adds	r7, #12
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e2:	4770      	bx	lr
 800c6e4:	1fe00fff 	.word	0x1fe00fff

0800c6e8 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b094      	sub	sp, #80	; 0x50
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
 800c6f0:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800c6f8:	f107 0308 	add.w	r3, r7, #8
 800c6fc:	4619      	mov	r1, r3
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f000 fb64 	bl	800cdcc <SD_SendSDStatus>
 800c704:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800c706:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d011      	beq.n	800c730 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	4a4f      	ldr	r2, [pc, #316]	; (800c850 <HAL_SD_GetCardStatus+0x168>)
 800c712:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c718:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c71a:	431a      	orrs	r2, r3
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2201      	movs	r2, #1
 800c724:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800c728:	2301      	movs	r3, #1
 800c72a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800c72e:	e070      	b.n	800c812 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	099b      	lsrs	r3, r3, #6
 800c734:	b2db      	uxtb	r3, r3
 800c736:	f003 0303 	and.w	r3, r3, #3
 800c73a:	b2da      	uxtb	r2, r3
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	095b      	lsrs	r3, r3, #5
 800c744:	b2db      	uxtb	r3, r3
 800c746:	f003 0301 	and.w	r3, r3, #1
 800c74a:	b2da      	uxtb	r2, r3
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	0a1b      	lsrs	r3, r3, #8
 800c754:	b29b      	uxth	r3, r3
 800c756:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c75a:	b29a      	uxth	r2, r3
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	0e1b      	lsrs	r3, r3, #24
 800c760:	b29b      	uxth	r3, r3
 800c762:	4313      	orrs	r3, r2
 800c764:	b29a      	uxth	r2, r3
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	061a      	lsls	r2, r3, #24
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	021b      	lsls	r3, r3, #8
 800c772:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c776:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	0a1b      	lsrs	r3, r3, #8
 800c77c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c780:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	0e1b      	lsrs	r3, r3, #24
 800c786:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800c78c:	693b      	ldr	r3, [r7, #16]
 800c78e:	b2da      	uxtb	r2, r3
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800c794:	693b      	ldr	r3, [r7, #16]
 800c796:	0a1b      	lsrs	r3, r3, #8
 800c798:	b2da      	uxtb	r2, r3
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800c79e:	693b      	ldr	r3, [r7, #16]
 800c7a0:	0d1b      	lsrs	r3, r3, #20
 800c7a2:	b2db      	uxtb	r3, r3
 800c7a4:	f003 030f 	and.w	r3, r3, #15
 800c7a8:	b2da      	uxtb	r2, r3
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	0c1b      	lsrs	r3, r3, #16
 800c7b2:	b29b      	uxth	r3, r3
 800c7b4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c7b8:	b29a      	uxth	r2, r3
 800c7ba:	697b      	ldr	r3, [r7, #20]
 800c7bc:	b29b      	uxth	r3, r3
 800c7be:	b2db      	uxtb	r3, r3
 800c7c0:	b29b      	uxth	r3, r3
 800c7c2:	4313      	orrs	r3, r2
 800c7c4:	b29a      	uxth	r2, r3
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800c7ca:	697b      	ldr	r3, [r7, #20]
 800c7cc:	0a9b      	lsrs	r3, r3, #10
 800c7ce:	b2db      	uxtb	r3, r3
 800c7d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c7d4:	b2da      	uxtb	r2, r3
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800c7da:	697b      	ldr	r3, [r7, #20]
 800c7dc:	0a1b      	lsrs	r3, r3, #8
 800c7de:	b2db      	uxtb	r3, r3
 800c7e0:	f003 0303 	and.w	r3, r3, #3
 800c7e4:	b2da      	uxtb	r2, r3
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800c7ea:	697b      	ldr	r3, [r7, #20]
 800c7ec:	091b      	lsrs	r3, r3, #4
 800c7ee:	b2db      	uxtb	r3, r3
 800c7f0:	f003 030f 	and.w	r3, r3, #15
 800c7f4:	b2da      	uxtb	r2, r3
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	b2db      	uxtb	r3, r3
 800c7fe:	f003 030f 	and.w	r3, r3, #15
 800c802:	b2da      	uxtb	r2, r3
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800c808:	69bb      	ldr	r3, [r7, #24]
 800c80a:	0e1b      	lsrs	r3, r3, #24
 800c80c:	b2da      	uxtb	r2, r3
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c81a:	4618      	mov	r0, r3
 800c81c:	f003 f9f8 	bl	800fc10 <SDMMC_CmdBlockLength>
 800c820:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800c822:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c824:	2b00      	cmp	r3, #0
 800c826:	d00d      	beq.n	800c844 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	4a08      	ldr	r2, [pc, #32]	; (800c850 <HAL_SD_GetCardStatus+0x168>)
 800c82e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c834:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2201      	movs	r2, #1
 800c83a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800c83e:	2301      	movs	r3, #1
 800c840:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800c844:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800c848:	4618      	mov	r0, r3
 800c84a:	3750      	adds	r7, #80	; 0x50
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}
 800c850:	1fe00fff 	.word	0x1fe00fff

0800c854 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800c854:	b480      	push	{r7}
 800c856:	b083      	sub	sp, #12
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
 800c85c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800c89e:	2300      	movs	r3, #0
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	370c      	adds	r7, #12
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8aa:	4770      	bx	lr

0800c8ac <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800c8ac:	b5b0      	push	{r4, r5, r7, lr}
 800c8ae:	b08e      	sub	sp, #56	; 0x38
 800c8b0:	af04      	add	r7, sp, #16
 800c8b2:	6078      	str	r0, [r7, #4]
 800c8b4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2203      	movs	r2, #3
 800c8c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8c8:	2b03      	cmp	r3, #3
 800c8ca:	d02e      	beq.n	800c92a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c8d2:	d106      	bne.n	800c8e2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	639a      	str	r2, [r3, #56]	; 0x38
 800c8e0:	e029      	b.n	800c936 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c8e8:	d10a      	bne.n	800c900 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f000 fb66 	bl	800cfbc <SD_WideBus_Enable>
 800c8f0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8f6:	6a3b      	ldr	r3, [r7, #32]
 800c8f8:	431a      	orrs	r2, r3
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	639a      	str	r2, [r3, #56]	; 0x38
 800c8fe:	e01a      	b.n	800c936 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d10a      	bne.n	800c91c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f000 fba3 	bl	800d052 <SD_WideBus_Disable>
 800c90c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c912:	6a3b      	ldr	r3, [r7, #32]
 800c914:	431a      	orrs	r2, r3
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	639a      	str	r2, [r3, #56]	; 0x38
 800c91a:	e00c      	b.n	800c936 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c920:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	639a      	str	r2, [r3, #56]	; 0x38
 800c928:	e005      	b.n	800c936 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c92e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d007      	beq.n	800c94e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	4a2e      	ldr	r2, [pc, #184]	; (800c9fc <HAL_SD_ConfigWideBusOperation+0x150>)
 800c944:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800c946:	2301      	movs	r3, #1
 800c948:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c94c:	e034      	b.n	800c9b8 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	685b      	ldr	r3, [r3, #4]
 800c952:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	689b      	ldr	r3, [r3, #8]
 800c958:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	691b      	ldr	r3, [r3, #16]
 800c962:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	695b      	ldr	r3, [r3, #20]
 800c968:	2b03      	cmp	r3, #3
 800c96a:	d903      	bls.n	800c974 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	695b      	ldr	r3, [r3, #20]
 800c970:	61bb      	str	r3, [r7, #24]
 800c972:	e012      	b.n	800c99a <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c97c:	d103      	bne.n	800c986 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	695b      	ldr	r3, [r3, #20]
 800c982:	61bb      	str	r3, [r7, #24]
 800c984:	e009      	b.n	800c99a <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c98a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c98e:	d102      	bne.n	800c996 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800c990:	2302      	movs	r3, #2
 800c992:	61bb      	str	r3, [r7, #24]
 800c994:	e001      	b.n	800c99a <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800c996:	2304      	movs	r3, #4
 800c998:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681d      	ldr	r5, [r3, #0]
 800c99e:	466c      	mov	r4, sp
 800c9a0:	f107 0314 	add.w	r3, r7, #20
 800c9a4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c9a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c9ac:	f107 0308 	add.w	r3, r7, #8
 800c9b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c9b2:	4628      	mov	r0, r5
 800c9b4:	f003 f84e 	bl	800fa54 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f003 f925 	bl	800fc10 <SDMMC_CmdBlockLength>
 800c9c6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c9c8:	6a3b      	ldr	r3, [r7, #32]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d00c      	beq.n	800c9e8 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	4a0a      	ldr	r2, [pc, #40]	; (800c9fc <HAL_SD_ConfigWideBusOperation+0x150>)
 800c9d4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c9da:	6a3b      	ldr	r3, [r7, #32]
 800c9dc:	431a      	orrs	r2, r3
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2201      	movs	r2, #1
 800c9ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800c9f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	3728      	adds	r7, #40	; 0x28
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bdb0      	pop	{r4, r5, r7, pc}
 800c9fc:	1fe00fff 	.word	0x1fe00fff

0800ca00 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b086      	sub	sp, #24
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800ca08:	2300      	movs	r3, #0
 800ca0a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ca0c:	f107 030c 	add.w	r3, r7, #12
 800ca10:	4619      	mov	r1, r3
 800ca12:	6878      	ldr	r0, [r7, #4]
 800ca14:	f000 faaa 	bl	800cf6c <SD_SendStatus>
 800ca18:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ca1a:	697b      	ldr	r3, [r7, #20]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d005      	beq.n	800ca2c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca24:	697b      	ldr	r3, [r7, #20]
 800ca26:	431a      	orrs	r2, r3
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	0a5b      	lsrs	r3, r3, #9
 800ca30:	f003 030f 	and.w	r3, r3, #15
 800ca34:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ca36:	693b      	ldr	r3, [r7, #16]
}
 800ca38:	4618      	mov	r0, r3
 800ca3a:	3718      	adds	r7, #24
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}

0800ca40 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ca40:	b590      	push	{r4, r7, lr}
 800ca42:	b091      	sub	sp, #68	; 0x44
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800ca48:	2301      	movs	r3, #1
 800ca4a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	4618      	mov	r0, r3
 800ca52:	f003 f858 	bl	800fb06 <SDMMC_GetPowerState>
 800ca56:	4603      	mov	r3, r0
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d102      	bne.n	800ca62 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ca5c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ca60:	e0a8      	b.n	800cbb4 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca66:	2b03      	cmp	r3, #3
 800ca68:	d02e      	beq.n	800cac8 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f003 faa4 	bl	800ffbc <SDMMC_CmdSendCID>
 800ca74:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ca76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d001      	beq.n	800ca80 <SD_InitCard+0x40>
    {
      return errorstate;
 800ca7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca7e:	e099      	b.n	800cbb4 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	2100      	movs	r1, #0
 800ca86:	4618      	mov	r0, r3
 800ca88:	f003 f883 	bl	800fb92 <SDMMC_GetResponse>
 800ca8c:	4602      	mov	r2, r0
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	2104      	movs	r1, #4
 800ca98:	4618      	mov	r0, r3
 800ca9a:	f003 f87a 	bl	800fb92 <SDMMC_GetResponse>
 800ca9e:	4602      	mov	r2, r0
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	2108      	movs	r1, #8
 800caaa:	4618      	mov	r0, r3
 800caac:	f003 f871 	bl	800fb92 <SDMMC_GetResponse>
 800cab0:	4602      	mov	r2, r0
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	210c      	movs	r1, #12
 800cabc:	4618      	mov	r0, r3
 800cabe:	f003 f868 	bl	800fb92 <SDMMC_GetResponse>
 800cac2:	4602      	mov	r2, r0
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cacc:	2b03      	cmp	r3, #3
 800cace:	d00d      	beq.n	800caec <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	f107 020e 	add.w	r2, r7, #14
 800cad8:	4611      	mov	r1, r2
 800cada:	4618      	mov	r0, r3
 800cadc:	f003 faad 	bl	801003a <SDMMC_CmdSetRelAdd>
 800cae0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800cae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d001      	beq.n	800caec <SD_InitCard+0xac>
    {
      return errorstate;
 800cae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800caea:	e063      	b.n	800cbb4 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caf0:	2b03      	cmp	r3, #3
 800caf2:	d036      	beq.n	800cb62 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800caf4:	89fb      	ldrh	r3, [r7, #14]
 800caf6:	461a      	mov	r2, r3
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681a      	ldr	r2, [r3, #0]
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb04:	041b      	lsls	r3, r3, #16
 800cb06:	4619      	mov	r1, r3
 800cb08:	4610      	mov	r0, r2
 800cb0a:	f003 fa76 	bl	800fffa <SDMMC_CmdSendCSD>
 800cb0e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800cb10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d001      	beq.n	800cb1a <SD_InitCard+0xda>
    {
      return errorstate;
 800cb16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb18:	e04c      	b.n	800cbb4 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	2100      	movs	r1, #0
 800cb20:	4618      	mov	r0, r3
 800cb22:	f003 f836 	bl	800fb92 <SDMMC_GetResponse>
 800cb26:	4602      	mov	r2, r0
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	2104      	movs	r1, #4
 800cb32:	4618      	mov	r0, r3
 800cb34:	f003 f82d 	bl	800fb92 <SDMMC_GetResponse>
 800cb38:	4602      	mov	r2, r0
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	2108      	movs	r1, #8
 800cb44:	4618      	mov	r0, r3
 800cb46:	f003 f824 	bl	800fb92 <SDMMC_GetResponse>
 800cb4a:	4602      	mov	r2, r0
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	210c      	movs	r1, #12
 800cb56:	4618      	mov	r0, r3
 800cb58:	f003 f81b 	bl	800fb92 <SDMMC_GetResponse>
 800cb5c:	4602      	mov	r2, r0
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	2104      	movs	r1, #4
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f003 f812 	bl	800fb92 <SDMMC_GetResponse>
 800cb6e:	4603      	mov	r3, r0
 800cb70:	0d1a      	lsrs	r2, r3, #20
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800cb76:	f107 0310 	add.w	r3, r7, #16
 800cb7a:	4619      	mov	r1, r3
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f7ff fc0f 	bl	800c3a0 <HAL_SD_GetCardCSD>
 800cb82:	4603      	mov	r3, r0
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d002      	beq.n	800cb8e <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cb88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cb8c:	e012      	b.n	800cbb4 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	6819      	ldr	r1, [r3, #0]
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb96:	041b      	lsls	r3, r3, #16
 800cb98:	f04f 0400 	mov.w	r4, #0
 800cb9c:	461a      	mov	r2, r3
 800cb9e:	4623      	mov	r3, r4
 800cba0:	4608      	mov	r0, r1
 800cba2:	f003 f921 	bl	800fde8 <SDMMC_CmdSelDesel>
 800cba6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800cba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d001      	beq.n	800cbb2 <SD_InitCard+0x172>
  {
    return errorstate;
 800cbae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbb0:	e000      	b.n	800cbb4 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800cbb2:	2300      	movs	r3, #0
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3744      	adds	r7, #68	; 0x44
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd90      	pop	{r4, r7, pc}

0800cbbc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b088      	sub	sp, #32
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	61fb      	str	r3, [r7, #28]
 800cbcc:	2300      	movs	r3, #0
 800cbce:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 800cbd0:	f7f6 faf0 	bl	80031b4 <HAL_GetTick>
 800cbd4:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f003 f928 	bl	800fe30 <SDMMC_CmdGoIdleState>
 800cbe0:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cbe2:	693b      	ldr	r3, [r7, #16]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d001      	beq.n	800cbec <SD_PowerON+0x30>
  {
    return errorstate;
 800cbe8:	693b      	ldr	r3, [r7, #16]
 800cbea:	e0e9      	b.n	800cdc0 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f003 f93b 	bl	800fe6c <SDMMC_CmdOperCond>
 800cbf6:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cbf8:	693b      	ldr	r3, [r7, #16]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d00d      	beq.n	800cc1a <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2200      	movs	r2, #0
 800cc02:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f003 f911 	bl	800fe30 <SDMMC_CmdGoIdleState>
 800cc0e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cc10:	693b      	ldr	r3, [r7, #16]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d004      	beq.n	800cc20 <SD_PowerON+0x64>
    {
      return errorstate;
 800cc16:	693b      	ldr	r3, [r7, #16]
 800cc18:	e0d2      	b.n	800cdc0 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2201      	movs	r2, #1
 800cc1e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc24:	2b01      	cmp	r3, #1
 800cc26:	d137      	bne.n	800cc98 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	2100      	movs	r1, #0
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f003 f93c 	bl	800feac <SDMMC_CmdAppCommand>
 800cc34:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cc36:	693b      	ldr	r3, [r7, #16]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d02d      	beq.n	800cc98 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cc3c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cc40:	e0be      	b.n	800cdc0 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	2100      	movs	r1, #0
 800cc48:	4618      	mov	r0, r3
 800cc4a:	f003 f92f 	bl	800feac <SDMMC_CmdAppCommand>
 800cc4e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cc50:	693b      	ldr	r3, [r7, #16]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d001      	beq.n	800cc5a <SD_PowerON+0x9e>
    {
      return errorstate;
 800cc56:	693b      	ldr	r3, [r7, #16]
 800cc58:	e0b2      	b.n	800cdc0 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	495a      	ldr	r1, [pc, #360]	; (800cdc8 <SD_PowerON+0x20c>)
 800cc60:	4618      	mov	r0, r3
 800cc62:	f003 f946 	bl	800fef2 <SDMMC_CmdAppOperCommand>
 800cc66:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cc68:	693b      	ldr	r3, [r7, #16]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d002      	beq.n	800cc74 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cc6e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cc72:	e0a5      	b.n	800cdc0 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	2100      	movs	r1, #0
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f002 ff89 	bl	800fb92 <SDMMC_GetResponse>
 800cc80:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800cc82:	69fb      	ldr	r3, [r7, #28]
 800cc84:	0fdb      	lsrs	r3, r3, #31
 800cc86:	2b01      	cmp	r3, #1
 800cc88:	d101      	bne.n	800cc8e <SD_PowerON+0xd2>
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	e000      	b.n	800cc90 <SD_PowerON+0xd4>
 800cc8e:	2300      	movs	r3, #0
 800cc90:	61bb      	str	r3, [r7, #24]

    count++;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	3301      	adds	r3, #1
 800cc96:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800cc9e:	4293      	cmp	r3, r2
 800cca0:	d802      	bhi.n	800cca8 <SD_PowerON+0xec>
 800cca2:	69bb      	ldr	r3, [r7, #24]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d0cc      	beq.n	800cc42 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ccae:	4293      	cmp	r3, r2
 800ccb0:	d902      	bls.n	800ccb8 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ccb2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ccb6:	e083      	b.n	800cdc0 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800ccb8:	69fb      	ldr	r3, [r7, #28]
 800ccba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d07d      	beq.n	800cdbe <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	2201      	movs	r2, #1
 800ccc6:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	699b      	ldr	r3, [r3, #24]
 800cccc:	2b02      	cmp	r3, #2
 800ccce:	d176      	bne.n	800cdbe <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800ccd0:	69fb      	ldr	r3, [r7, #28]
 800ccd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d071      	beq.n	800cdbe <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cce0:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	681a      	ldr	r2, [r3, #0]
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	f042 0208 	orr.w	r2, r2, #8
 800ccf0:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f003 fa06 	bl	8010108 <SDMMC_CmdVoltageSwitch>
 800ccfc:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d00c      	beq.n	800cd1e <SD_PowerON+0x162>
        {
          return errorstate;
 800cd04:	693b      	ldr	r3, [r7, #16]
 800cd06:	e05b      	b.n	800cdc0 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cd08:	f7f6 fa54 	bl	80031b4 <HAL_GetTick>
 800cd0c:	4602      	mov	r2, r0
 800cd0e:	697b      	ldr	r3, [r7, #20]
 800cd10:	1ad3      	subs	r3, r2, r3
 800cd12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd16:	d102      	bne.n	800cd1e <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800cd18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cd1c:	e050      	b.n	800cdc0 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cd28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cd2c:	d1ec      	bne.n	800cd08 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800cd36:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cd42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd46:	d002      	beq.n	800cd4e <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800cd48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cd4c:	e038      	b.n	800cdc0 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800cd4e:	2001      	movs	r0, #1
 800cd50:	f7ff fb1a 	bl	800c388 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	681a      	ldr	r2, [r3, #0]
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	f042 0204 	orr.w	r2, r2, #4
 800cd62:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800cd64:	e00a      	b.n	800cd7c <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cd66:	f7f6 fa25 	bl	80031b4 <HAL_GetTick>
 800cd6a:	4602      	mov	r2, r0
 800cd6c:	697b      	ldr	r3, [r7, #20]
 800cd6e:	1ad3      	subs	r3, r2, r3
 800cd70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd74:	d102      	bne.n	800cd7c <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800cd76:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cd7a:	e021      	b.n	800cdc0 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cd8a:	d1ec      	bne.n	800cd66 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800cd94:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cda0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cda4:	d102      	bne.n	800cdac <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800cda6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cdaa:	e009      	b.n	800cdc0 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	2213      	movs	r2, #19
 800cdb2:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	f04f 32ff 	mov.w	r2, #4294967295
 800cdbc:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800cdbe:	2300      	movs	r3, #0
}
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	3720      	adds	r7, #32
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}
 800cdc8:	c1100000 	.word	0xc1100000

0800cdcc <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b08c      	sub	sp, #48	; 0x30
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cdd6:	f7f6 f9ed 	bl	80031b4 <HAL_GetTick>
 800cdda:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	2100      	movs	r1, #0
 800cde6:	4618      	mov	r0, r3
 800cde8:	f002 fed3 	bl	800fb92 <SDMMC_GetResponse>
 800cdec:	4603      	mov	r3, r0
 800cdee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cdf2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cdf6:	d102      	bne.n	800cdfe <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800cdf8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cdfc:	e0b0      	b.n	800cf60 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	2140      	movs	r1, #64	; 0x40
 800ce04:	4618      	mov	r0, r3
 800ce06:	f002 ff03 	bl	800fc10 <SDMMC_CmdBlockLength>
 800ce0a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ce0c:	6a3b      	ldr	r3, [r7, #32]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d005      	beq.n	800ce1e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800ce1a:	6a3b      	ldr	r3, [r7, #32]
 800ce1c:	e0a0      	b.n	800cf60 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681a      	ldr	r2, [r3, #0]
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce26:	041b      	lsls	r3, r3, #16
 800ce28:	4619      	mov	r1, r3
 800ce2a:	4610      	mov	r0, r2
 800ce2c:	f003 f83e 	bl	800feac <SDMMC_CmdAppCommand>
 800ce30:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ce32:	6a3b      	ldr	r3, [r7, #32]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d005      	beq.n	800ce44 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800ce40:	6a3b      	ldr	r3, [r7, #32]
 800ce42:	e08d      	b.n	800cf60 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ce44:	f04f 33ff 	mov.w	r3, #4294967295
 800ce48:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800ce4a:	2340      	movs	r3, #64	; 0x40
 800ce4c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800ce4e:	2360      	movs	r3, #96	; 0x60
 800ce50:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ce52:	2302      	movs	r3, #2
 800ce54:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ce56:	2300      	movs	r3, #0
 800ce58:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	f107 0208 	add.w	r2, r7, #8
 800ce66:	4611      	mov	r1, r2
 800ce68:	4618      	mov	r0, r3
 800ce6a:	f002 fea5 	bl	800fbb8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	4618      	mov	r0, r3
 800ce74:	f003 f926 	bl	80100c4 <SDMMC_CmdStatusRegister>
 800ce78:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ce7a:	6a3b      	ldr	r3, [r7, #32]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d02b      	beq.n	800ced8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800ce88:	6a3b      	ldr	r3, [r7, #32]
 800ce8a:	e069      	b.n	800cf60 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d013      	beq.n	800cec2 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ce9e:	e00d      	b.n	800cebc <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	4618      	mov	r0, r3
 800cea6:	f002 fdff 	bl	800faa8 <SDMMC_ReadFIFO>
 800ceaa:	4602      	mov	r2, r0
 800ceac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceae:	601a      	str	r2, [r3, #0]
        pData++;
 800ceb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceb2:	3304      	adds	r3, #4
 800ceb4:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800ceb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceb8:	3301      	adds	r3, #1
 800ceba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cebe:	2b07      	cmp	r3, #7
 800cec0:	d9ee      	bls.n	800cea0 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cec2:	f7f6 f977 	bl	80031b4 <HAL_GetTick>
 800cec6:	4602      	mov	r2, r0
 800cec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceca:	1ad3      	subs	r3, r2, r3
 800cecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ced0:	d102      	bne.n	800ced8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ced2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ced6:	e043      	b.n	800cf60 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cede:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d0d2      	beq.n	800ce8c <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ceec:	f003 0308 	and.w	r3, r3, #8
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d001      	beq.n	800cef8 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800cef4:	2308      	movs	r3, #8
 800cef6:	e033      	b.n	800cf60 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cefe:	f003 0302 	and.w	r3, r3, #2
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d001      	beq.n	800cf0a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800cf06:	2302      	movs	r3, #2
 800cf08:	e02a      	b.n	800cf60 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf10:	f003 0320 	and.w	r3, r3, #32
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d017      	beq.n	800cf48 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800cf18:	2320      	movs	r3, #32
 800cf1a:	e021      	b.n	800cf60 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	4618      	mov	r0, r3
 800cf22:	f002 fdc1 	bl	800faa8 <SDMMC_ReadFIFO>
 800cf26:	4602      	mov	r2, r0
 800cf28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf2a:	601a      	str	r2, [r3, #0]
    pData++;
 800cf2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf2e:	3304      	adds	r3, #4
 800cf30:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cf32:	f7f6 f93f 	bl	80031b4 <HAL_GetTick>
 800cf36:	4602      	mov	r2, r0
 800cf38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf3a:	1ad3      	subs	r3, r2, r3
 800cf3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf40:	d102      	bne.n	800cf48 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800cf42:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cf46:	e00b      	b.n	800cf60 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d1e2      	bne.n	800cf1c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	4a03      	ldr	r2, [pc, #12]	; (800cf68 <SD_SendSDStatus+0x19c>)
 800cf5c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800cf5e:	2300      	movs	r3, #0
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	3730      	adds	r7, #48	; 0x30
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}
 800cf68:	18000f3a 	.word	0x18000f3a

0800cf6c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b084      	sub	sp, #16
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
 800cf74:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d102      	bne.n	800cf82 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800cf7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cf80:	e018      	b.n	800cfb4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681a      	ldr	r2, [r3, #0]
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf8a:	041b      	lsls	r3, r3, #16
 800cf8c:	4619      	mov	r1, r3
 800cf8e:	4610      	mov	r0, r2
 800cf90:	f003 f875 	bl	801007e <SDMMC_CmdSendStatus>
 800cf94:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d001      	beq.n	800cfa0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	e009      	b.n	800cfb4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	2100      	movs	r1, #0
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f002 fdf3 	bl	800fb92 <SDMMC_GetResponse>
 800cfac:	4602      	mov	r2, r0
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800cfb2:	2300      	movs	r3, #0
}
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	3710      	adds	r7, #16
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}

0800cfbc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b086      	sub	sp, #24
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	60fb      	str	r3, [r7, #12]
 800cfc8:	2300      	movs	r3, #0
 800cfca:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	2100      	movs	r1, #0
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f002 fddd 	bl	800fb92 <SDMMC_GetResponse>
 800cfd8:	4603      	mov	r3, r0
 800cfda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cfde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cfe2:	d102      	bne.n	800cfea <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800cfe4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cfe8:	e02f      	b.n	800d04a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800cfea:	f107 030c 	add.w	r3, r7, #12
 800cfee:	4619      	mov	r1, r3
 800cff0:	6878      	ldr	r0, [r7, #4]
 800cff2:	f000 f879 	bl	800d0e8 <SD_FindSCR>
 800cff6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cff8:	697b      	ldr	r3, [r7, #20]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d001      	beq.n	800d002 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	e023      	b.n	800d04a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d002:	693b      	ldr	r3, [r7, #16]
 800d004:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d01c      	beq.n	800d046 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681a      	ldr	r2, [r3, #0]
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d014:	041b      	lsls	r3, r3, #16
 800d016:	4619      	mov	r1, r3
 800d018:	4610      	mov	r0, r2
 800d01a:	f002 ff47 	bl	800feac <SDMMC_CmdAppCommand>
 800d01e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d020:	697b      	ldr	r3, [r7, #20]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d001      	beq.n	800d02a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d026:	697b      	ldr	r3, [r7, #20]
 800d028:	e00f      	b.n	800d04a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	2102      	movs	r1, #2
 800d030:	4618      	mov	r0, r3
 800d032:	f002 ff7e 	bl	800ff32 <SDMMC_CmdBusWidth>
 800d036:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d038:	697b      	ldr	r3, [r7, #20]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d001      	beq.n	800d042 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d03e:	697b      	ldr	r3, [r7, #20]
 800d040:	e003      	b.n	800d04a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d042:	2300      	movs	r3, #0
 800d044:	e001      	b.n	800d04a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d046:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d04a:	4618      	mov	r0, r3
 800d04c:	3718      	adds	r7, #24
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd80      	pop	{r7, pc}

0800d052 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d052:	b580      	push	{r7, lr}
 800d054:	b086      	sub	sp, #24
 800d056:	af00      	add	r7, sp, #0
 800d058:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d05a:	2300      	movs	r3, #0
 800d05c:	60fb      	str	r3, [r7, #12]
 800d05e:	2300      	movs	r3, #0
 800d060:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	2100      	movs	r1, #0
 800d068:	4618      	mov	r0, r3
 800d06a:	f002 fd92 	bl	800fb92 <SDMMC_GetResponse>
 800d06e:	4603      	mov	r3, r0
 800d070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d074:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d078:	d102      	bne.n	800d080 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d07a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d07e:	e02f      	b.n	800d0e0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d080:	f107 030c 	add.w	r3, r7, #12
 800d084:	4619      	mov	r1, r3
 800d086:	6878      	ldr	r0, [r7, #4]
 800d088:	f000 f82e 	bl	800d0e8 <SD_FindSCR>
 800d08c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d001      	beq.n	800d098 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d094:	697b      	ldr	r3, [r7, #20]
 800d096:	e023      	b.n	800d0e0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d098:	693b      	ldr	r3, [r7, #16]
 800d09a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d01c      	beq.n	800d0dc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681a      	ldr	r2, [r3, #0]
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d0aa:	041b      	lsls	r3, r3, #16
 800d0ac:	4619      	mov	r1, r3
 800d0ae:	4610      	mov	r0, r2
 800d0b0:	f002 fefc 	bl	800feac <SDMMC_CmdAppCommand>
 800d0b4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d0b6:	697b      	ldr	r3, [r7, #20]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d001      	beq.n	800d0c0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800d0bc:	697b      	ldr	r3, [r7, #20]
 800d0be:	e00f      	b.n	800d0e0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	2100      	movs	r1, #0
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f002 ff33 	bl	800ff32 <SDMMC_CmdBusWidth>
 800d0cc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d0ce:	697b      	ldr	r3, [r7, #20]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d001      	beq.n	800d0d8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800d0d4:	697b      	ldr	r3, [r7, #20]
 800d0d6:	e003      	b.n	800d0e0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d0d8:	2300      	movs	r3, #0
 800d0da:	e001      	b.n	800d0e0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d0dc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	3718      	adds	r7, #24
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}

0800d0e8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b08e      	sub	sp, #56	; 0x38
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
 800d0f0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d0f2:	f7f6 f85f 	bl	80031b4 <HAL_GetTick>
 800d0f6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	60bb      	str	r3, [r7, #8]
 800d100:	2300      	movs	r3, #0
 800d102:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	2108      	movs	r1, #8
 800d10e:	4618      	mov	r0, r3
 800d110:	f002 fd7e 	bl	800fc10 <SDMMC_CmdBlockLength>
 800d114:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d001      	beq.n	800d120 <SD_FindSCR+0x38>
  {
    return errorstate;
 800d11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d11e:	e0ad      	b.n	800d27c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681a      	ldr	r2, [r3, #0]
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d128:	041b      	lsls	r3, r3, #16
 800d12a:	4619      	mov	r1, r3
 800d12c:	4610      	mov	r0, r2
 800d12e:	f002 febd 	bl	800feac <SDMMC_CmdAppCommand>
 800d132:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d136:	2b00      	cmp	r3, #0
 800d138:	d001      	beq.n	800d13e <SD_FindSCR+0x56>
  {
    return errorstate;
 800d13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d13c:	e09e      	b.n	800d27c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d13e:	f04f 33ff 	mov.w	r3, #4294967295
 800d142:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800d144:	2308      	movs	r3, #8
 800d146:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800d148:	2330      	movs	r3, #48	; 0x30
 800d14a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d14c:	2302      	movs	r3, #2
 800d14e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d150:	2300      	movs	r3, #0
 800d152:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d154:	2301      	movs	r3, #1
 800d156:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	f107 0210 	add.w	r2, r7, #16
 800d160:	4611      	mov	r1, r2
 800d162:	4618      	mov	r0, r3
 800d164:	f002 fd28 	bl	800fbb8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	4618      	mov	r0, r3
 800d16e:	f002 ff03 	bl	800ff78 <SDMMC_CmdSendSCR>
 800d172:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d176:	2b00      	cmp	r3, #0
 800d178:	d027      	beq.n	800d1ca <SD_FindSCR+0xe2>
  {
    return errorstate;
 800d17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d17c:	e07e      	b.n	800d27c <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d184:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d113      	bne.n	800d1b4 <SD_FindSCR+0xcc>
 800d18c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d110      	bne.n	800d1b4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	4618      	mov	r0, r3
 800d198:	f002 fc86 	bl	800faa8 <SDMMC_ReadFIFO>
 800d19c:	4603      	mov	r3, r0
 800d19e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	f002 fc7f 	bl	800faa8 <SDMMC_ReadFIFO>
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	60fb      	str	r3, [r7, #12]
      index++;
 800d1ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1b0:	3301      	adds	r3, #1
 800d1b2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d1b4:	f7f5 fffe 	bl	80031b4 <HAL_GetTick>
 800d1b8:	4602      	mov	r2, r0
 800d1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1bc:	1ad3      	subs	r3, r2, r3
 800d1be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1c2:	d102      	bne.n	800d1ca <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d1c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d1c8:	e058      	b.n	800d27c <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d1d0:	f240 532a 	movw	r3, #1322	; 0x52a
 800d1d4:	4013      	ands	r3, r2
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d0d1      	beq.n	800d17e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1e0:	f003 0308 	and.w	r3, r3, #8
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d005      	beq.n	800d1f4 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	2208      	movs	r2, #8
 800d1ee:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d1f0:	2308      	movs	r3, #8
 800d1f2:	e043      	b.n	800d27c <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1fa:	f003 0302 	and.w	r3, r3, #2
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d005      	beq.n	800d20e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	2202      	movs	r2, #2
 800d208:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d20a:	2302      	movs	r3, #2
 800d20c:	e036      	b.n	800d27c <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d214:	f003 0320 	and.w	r3, r3, #32
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d005      	beq.n	800d228 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	2220      	movs	r2, #32
 800d222:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800d224:	2320      	movs	r3, #32
 800d226:	e029      	b.n	800d27c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	4a15      	ldr	r2, [pc, #84]	; (800d284 <SD_FindSCR+0x19c>)
 800d22e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	061a      	lsls	r2, r3, #24
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	021b      	lsls	r3, r3, #8
 800d238:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d23c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	0a1b      	lsrs	r3, r3, #8
 800d242:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d246:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	0e1b      	lsrs	r3, r3, #24
 800d24c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d250:	601a      	str	r2, [r3, #0]
    scr++;
 800d252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d254:	3304      	adds	r3, #4
 800d256:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	061a      	lsls	r2, r3, #24
 800d25c:	68bb      	ldr	r3, [r7, #8]
 800d25e:	021b      	lsls	r3, r3, #8
 800d260:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d264:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	0a1b      	lsrs	r3, r3, #8
 800d26a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d26e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d270:	68bb      	ldr	r3, [r7, #8]
 800d272:	0e1b      	lsrs	r3, r3, #24
 800d274:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d278:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800d27a:	2300      	movs	r3, #0
}
 800d27c:	4618      	mov	r0, r3
 800d27e:	3738      	adds	r7, #56	; 0x38
 800d280:	46bd      	mov	sp, r7
 800d282:	bd80      	pop	{r7, pc}
 800d284:	18000f3a 	.word	0x18000f3a

0800d288 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b086      	sub	sp, #24
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d294:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d29a:	2b1f      	cmp	r3, #31
 800d29c:	d936      	bls.n	800d30c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800d29e:	2300      	movs	r3, #0
 800d2a0:	617b      	str	r3, [r7, #20]
 800d2a2:	e027      	b.n	800d2f4 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	f002 fbfd 	bl	800faa8 <SDMMC_ReadFIFO>
 800d2ae:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	b2da      	uxtb	r2, r3
 800d2b4:	693b      	ldr	r3, [r7, #16]
 800d2b6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d2b8:	693b      	ldr	r3, [r7, #16]
 800d2ba:	3301      	adds	r3, #1
 800d2bc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	0a1b      	lsrs	r3, r3, #8
 800d2c2:	b2da      	uxtb	r2, r3
 800d2c4:	693b      	ldr	r3, [r7, #16]
 800d2c6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d2c8:	693b      	ldr	r3, [r7, #16]
 800d2ca:	3301      	adds	r3, #1
 800d2cc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	0c1b      	lsrs	r3, r3, #16
 800d2d2:	b2da      	uxtb	r2, r3
 800d2d4:	693b      	ldr	r3, [r7, #16]
 800d2d6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d2d8:	693b      	ldr	r3, [r7, #16]
 800d2da:	3301      	adds	r3, #1
 800d2dc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	0e1b      	lsrs	r3, r3, #24
 800d2e2:	b2da      	uxtb	r2, r3
 800d2e4:	693b      	ldr	r3, [r7, #16]
 800d2e6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	3301      	adds	r3, #1
 800d2ec:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800d2ee:	697b      	ldr	r3, [r7, #20]
 800d2f0:	3301      	adds	r3, #1
 800d2f2:	617b      	str	r3, [r7, #20]
 800d2f4:	697b      	ldr	r3, [r7, #20]
 800d2f6:	2b07      	cmp	r3, #7
 800d2f8:	d9d4      	bls.n	800d2a4 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	693a      	ldr	r2, [r7, #16]
 800d2fe:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d304:	f1a3 0220 	sub.w	r2, r3, #32
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800d30c:	bf00      	nop
 800d30e:	3718      	adds	r7, #24
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}

0800d314 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b086      	sub	sp, #24
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	6a1b      	ldr	r3, [r3, #32]
 800d320:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d326:	2b1f      	cmp	r3, #31
 800d328:	d93a      	bls.n	800d3a0 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800d32a:	2300      	movs	r3, #0
 800d32c:	617b      	str	r3, [r7, #20]
 800d32e:	e02b      	b.n	800d388 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800d330:	693b      	ldr	r3, [r7, #16]
 800d332:	781b      	ldrb	r3, [r3, #0]
 800d334:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d336:	693b      	ldr	r3, [r7, #16]
 800d338:	3301      	adds	r3, #1
 800d33a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	781b      	ldrb	r3, [r3, #0]
 800d340:	021a      	lsls	r2, r3, #8
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	4313      	orrs	r3, r2
 800d346:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	3301      	adds	r3, #1
 800d34c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800d34e:	693b      	ldr	r3, [r7, #16]
 800d350:	781b      	ldrb	r3, [r3, #0]
 800d352:	041a      	lsls	r2, r3, #16
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	4313      	orrs	r3, r2
 800d358:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d35a:	693b      	ldr	r3, [r7, #16]
 800d35c:	3301      	adds	r3, #1
 800d35e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800d360:	693b      	ldr	r3, [r7, #16]
 800d362:	781b      	ldrb	r3, [r3, #0]
 800d364:	061a      	lsls	r2, r3, #24
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	4313      	orrs	r3, r2
 800d36a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d36c:	693b      	ldr	r3, [r7, #16]
 800d36e:	3301      	adds	r3, #1
 800d370:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	f107 020c 	add.w	r2, r7, #12
 800d37a:	4611      	mov	r1, r2
 800d37c:	4618      	mov	r0, r3
 800d37e:	f002 fba0 	bl	800fac2 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800d382:	697b      	ldr	r3, [r7, #20]
 800d384:	3301      	adds	r3, #1
 800d386:	617b      	str	r3, [r7, #20]
 800d388:	697b      	ldr	r3, [r7, #20]
 800d38a:	2b07      	cmp	r3, #7
 800d38c:	d9d0      	bls.n	800d330 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	693a      	ldr	r2, [r7, #16]
 800d392:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d398:	f1a3 0220 	sub.w	r2, r3, #32
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800d3a0:	bf00      	nop
 800d3a2:	3718      	adds	r7, #24
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}

0800d3a8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800d3a8:	b480      	push	{r7}
 800d3aa:	b083      	sub	sp, #12
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800d3b0:	bf00      	nop
 800d3b2:	370c      	adds	r7, #12
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ba:	4770      	bx	lr

0800d3bc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800d3bc:	b480      	push	{r7}
 800d3be:	b083      	sub	sp, #12
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800d3c4:	bf00      	nop
 800d3c6:	370c      	adds	r7, #12
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ce:	4770      	bx	lr

0800d3d0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800d3d0:	b480      	push	{r7}
 800d3d2:	b083      	sub	sp, #12
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800d3d8:	bf00      	nop
 800d3da:	370c      	adds	r7, #12
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e2:	4770      	bx	lr

0800d3e4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800d3e4:	b480      	push	{r7}
 800d3e6:	b083      	sub	sp, #12
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800d3ec:	bf00      	nop
 800d3ee:	370c      	adds	r7, #12
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f6:	4770      	bx	lr

0800d3f8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b084      	sub	sp, #16
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 800d400:	2300      	movs	r3, #0
 800d402:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d101      	bne.n	800d40e <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800d40a:	2301      	movs	r3, #1
 800d40c:	e0e2      	b.n	800d5d4 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2200      	movs	r2, #0
 800d412:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	4a70      	ldr	r2, [pc, #448]	; (800d5dc <HAL_SPI_Init+0x1e4>)
 800d41a:	4293      	cmp	r3, r2
 800d41c:	d00f      	beq.n	800d43e <HAL_SPI_Init+0x46>
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	4a6f      	ldr	r2, [pc, #444]	; (800d5e0 <HAL_SPI_Init+0x1e8>)
 800d424:	4293      	cmp	r3, r2
 800d426:	d00a      	beq.n	800d43e <HAL_SPI_Init+0x46>
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	4a6d      	ldr	r2, [pc, #436]	; (800d5e4 <HAL_SPI_Init+0x1ec>)
 800d42e:	4293      	cmp	r3, r2
 800d430:	d005      	beq.n	800d43e <HAL_SPI_Init+0x46>
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	68db      	ldr	r3, [r3, #12]
 800d436:	2b0f      	cmp	r3, #15
 800d438:	d901      	bls.n	800d43e <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800d43a:	2301      	movs	r3, #1
 800d43c:	e0ca      	b.n	800d5d4 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f001 f870 	bl	800e524 <SPI_GetPacketSize>
 800d444:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	4a64      	ldr	r2, [pc, #400]	; (800d5dc <HAL_SPI_Init+0x1e4>)
 800d44c:	4293      	cmp	r3, r2
 800d44e:	d00c      	beq.n	800d46a <HAL_SPI_Init+0x72>
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	4a62      	ldr	r2, [pc, #392]	; (800d5e0 <HAL_SPI_Init+0x1e8>)
 800d456:	4293      	cmp	r3, r2
 800d458:	d007      	beq.n	800d46a <HAL_SPI_Init+0x72>
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	4a61      	ldr	r2, [pc, #388]	; (800d5e4 <HAL_SPI_Init+0x1ec>)
 800d460:	4293      	cmp	r3, r2
 800d462:	d002      	beq.n	800d46a <HAL_SPI_Init+0x72>
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	2b08      	cmp	r3, #8
 800d468:	d811      	bhi.n	800d48e <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d46e:	4a5b      	ldr	r2, [pc, #364]	; (800d5dc <HAL_SPI_Init+0x1e4>)
 800d470:	4293      	cmp	r3, r2
 800d472:	d009      	beq.n	800d488 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	4a59      	ldr	r2, [pc, #356]	; (800d5e0 <HAL_SPI_Init+0x1e8>)
 800d47a:	4293      	cmp	r3, r2
 800d47c:	d004      	beq.n	800d488 <HAL_SPI_Init+0x90>
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	4a58      	ldr	r2, [pc, #352]	; (800d5e4 <HAL_SPI_Init+0x1ec>)
 800d484:	4293      	cmp	r3, r2
 800d486:	d104      	bne.n	800d492 <HAL_SPI_Init+0x9a>
 800d488:	68bb      	ldr	r3, [r7, #8]
 800d48a:	2b10      	cmp	r3, #16
 800d48c:	d901      	bls.n	800d492 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800d48e:	2301      	movs	r3, #1
 800d490:	e0a0      	b.n	800d5d4 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d498:	b2db      	uxtb	r3, r3
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d106      	bne.n	800d4ac <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d4a6:	6878      	ldr	r0, [r7, #4]
 800d4a8:	f7f5 fb56 	bl	8002b58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2202      	movs	r2, #2
 800d4b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	681a      	ldr	r2, [r3, #0]
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	f022 0201 	bic.w	r2, r2, #1
 800d4c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	699b      	ldr	r3, [r3, #24]
 800d4c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d4cc:	d110      	bne.n	800d4f0 <HAL_SPI_Init+0xf8>
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	685b      	ldr	r3, [r3, #4]
 800d4d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d4d6:	d10b      	bne.n	800d4f0 <HAL_SPI_Init+0xf8>
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d107      	bne.n	800d4f0 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	681a      	ldr	r2, [r3, #0]
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d4ee:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	69da      	ldr	r2, [r3, #28]
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4f8:	431a      	orrs	r2, r3
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	431a      	orrs	r2, r3
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d502:	ea42 0103 	orr.w	r1, r2, r3
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	68da      	ldr	r2, [r3, #12]
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	430a      	orrs	r2, r1
 800d510:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d51a:	431a      	orrs	r2, r3
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d520:	431a      	orrs	r2, r3
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	699b      	ldr	r3, [r3, #24]
 800d526:	431a      	orrs	r2, r3
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	691b      	ldr	r3, [r3, #16]
 800d52c:	431a      	orrs	r2, r3
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	695b      	ldr	r3, [r3, #20]
 800d532:	431a      	orrs	r2, r3
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	6a1b      	ldr	r3, [r3, #32]
 800d538:	431a      	orrs	r2, r3
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	685b      	ldr	r3, [r3, #4]
 800d53e:	431a      	orrs	r2, r3
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d544:	431a      	orrs	r2, r3
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	689b      	ldr	r3, [r3, #8]
 800d54a:	431a      	orrs	r2, r3
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d550:	ea42 0103 	orr.w	r1, r2, r3
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	430a      	orrs	r2, r1
 800d55e:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	685b      	ldr	r3, [r3, #4]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d113      	bne.n	800d590 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	689b      	ldr	r3, [r3, #8]
 800d56e:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d57a:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	689b      	ldr	r3, [r3, #8]
 800d582:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d58e:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	f022 0201 	bic.w	r2, r2, #1
 800d59e:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	685b      	ldr	r3, [r3, #4]
 800d5a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d00a      	beq.n	800d5c2 <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	68db      	ldr	r3, [r3, #12]
 800d5b2:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	430a      	orrs	r2, r1
 800d5c0:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	2201      	movs	r2, #1
 800d5ce:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800d5d2:	2300      	movs	r3, #0
}
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	3710      	adds	r7, #16
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	bd80      	pop	{r7, pc}
 800d5dc:	40013000 	.word	0x40013000
 800d5e0:	40003800 	.word	0x40003800
 800d5e4:	40003c00 	.word	0x40003c00

0800d5e8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b08a      	sub	sp, #40	; 0x28
 800d5ec:	af02      	add	r7, sp, #8
 800d5ee:	60f8      	str	r0, [r7, #12]
 800d5f0:	60b9      	str	r1, [r7, #8]
 800d5f2:	603b      	str	r3, [r7, #0]
 800d5f4:	4613      	mov	r3, r2
 800d5f6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	3320      	adds	r3, #32
 800d5fe:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d600:	2300      	movs	r3, #0
 800d602:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d60a:	2b01      	cmp	r3, #1
 800d60c:	d101      	bne.n	800d612 <HAL_SPI_Transmit+0x2a>
 800d60e:	2302      	movs	r3, #2
 800d610:	e1d7      	b.n	800d9c2 <HAL_SPI_Transmit+0x3da>
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	2201      	movs	r2, #1
 800d616:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d61a:	f7f5 fdcb 	bl	80031b4 <HAL_GetTick>
 800d61e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d626:	b2db      	uxtb	r3, r3
 800d628:	2b01      	cmp	r3, #1
 800d62a:	d007      	beq.n	800d63c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800d62c:	2302      	movs	r3, #2
 800d62e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	2200      	movs	r2, #0
 800d634:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d638:	7efb      	ldrb	r3, [r7, #27]
 800d63a:	e1c2      	b.n	800d9c2 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800d63c:	68bb      	ldr	r3, [r7, #8]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d002      	beq.n	800d648 <HAL_SPI_Transmit+0x60>
 800d642:	88fb      	ldrh	r3, [r7, #6]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d107      	bne.n	800d658 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800d648:	2301      	movs	r3, #1
 800d64a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	2200      	movs	r2, #0
 800d650:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d654:	7efb      	ldrb	r3, [r7, #27]
 800d656:	e1b4      	b.n	800d9c2 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	2203      	movs	r2, #3
 800d65c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	2200      	movs	r2, #0
 800d664:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	68ba      	ldr	r2, [r7, #8]
 800d66c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	88fa      	ldrh	r2, [r7, #6]
 800d672:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	88fa      	ldrh	r2, [r7, #6]
 800d67a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	2200      	movs	r2, #0
 800d682:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	2200      	movs	r2, #0
 800d688:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	2200      	movs	r2, #0
 800d690:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	2200      	movs	r2, #0
 800d698:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	2200      	movs	r2, #0
 800d69e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	689b      	ldr	r3, [r3, #8]
 800d6a4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800d6a8:	d107      	bne.n	800d6ba <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	681a      	ldr	r2, [r3, #0]
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d6b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	685a      	ldr	r2, [r3, #4]
 800d6c0:	4b96      	ldr	r3, [pc, #600]	; (800d91c <HAL_SPI_Transmit+0x334>)
 800d6c2:	4013      	ands	r3, r2
 800d6c4:	88f9      	ldrh	r1, [r7, #6]
 800d6c6:	68fa      	ldr	r2, [r7, #12]
 800d6c8:	6812      	ldr	r2, [r2, #0]
 800d6ca:	430b      	orrs	r3, r1
 800d6cc:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	681a      	ldr	r2, [r3, #0]
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	f042 0201 	orr.w	r2, r2, #1
 800d6dc:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	685b      	ldr	r3, [r3, #4]
 800d6e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d6e6:	d107      	bne.n	800d6f8 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	681a      	ldr	r2, [r3, #0]
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d6f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	68db      	ldr	r3, [r3, #12]
 800d6fc:	2b0f      	cmp	r3, #15
 800d6fe:	d947      	bls.n	800d790 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d700:	e03f      	b.n	800d782 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	695b      	ldr	r3, [r3, #20]
 800d708:	f003 0302 	and.w	r3, r3, #2
 800d70c:	2b02      	cmp	r3, #2
 800d70e:	d114      	bne.n	800d73a <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	6812      	ldr	r2, [r2, #0]
 800d71a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d720:	1d1a      	adds	r2, r3, #4
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d72c:	b29b      	uxth	r3, r3
 800d72e:	3b01      	subs	r3, #1
 800d730:	b29a      	uxth	r2, r3
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d738:	e023      	b.n	800d782 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d73a:	f7f5 fd3b 	bl	80031b4 <HAL_GetTick>
 800d73e:	4602      	mov	r2, r0
 800d740:	697b      	ldr	r3, [r7, #20]
 800d742:	1ad3      	subs	r3, r2, r3
 800d744:	683a      	ldr	r2, [r7, #0]
 800d746:	429a      	cmp	r2, r3
 800d748:	d803      	bhi.n	800d752 <HAL_SPI_Transmit+0x16a>
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d750:	d102      	bne.n	800d758 <HAL_SPI_Transmit+0x170>
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d114      	bne.n	800d782 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d758:	68f8      	ldr	r0, [r7, #12]
 800d75a:	f000 fe15 	bl	800e388 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	2200      	movs	r2, #0
 800d762:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d76c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	2201      	movs	r2, #1
 800d77a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d77e:	2301      	movs	r3, #1
 800d780:	e11f      	b.n	800d9c2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d788:	b29b      	uxth	r3, r3
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d1b9      	bne.n	800d702 <HAL_SPI_Transmit+0x11a>
 800d78e:	e0f2      	b.n	800d976 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	68db      	ldr	r3, [r3, #12]
 800d794:	2b07      	cmp	r3, #7
 800d796:	f240 80e7 	bls.w	800d968 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d79a:	e05d      	b.n	800d858 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	695b      	ldr	r3, [r3, #20]
 800d7a2:	f003 0302 	and.w	r3, r3, #2
 800d7a6:	2b02      	cmp	r3, #2
 800d7a8:	d132      	bne.n	800d810 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d7b0:	b29b      	uxth	r3, r3
 800d7b2:	2b01      	cmp	r3, #1
 800d7b4:	d918      	bls.n	800d7e8 <HAL_SPI_Transmit+0x200>
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d014      	beq.n	800d7e8 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	6812      	ldr	r2, [r2, #0]
 800d7c8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d7ce:	1d1a      	adds	r2, r3, #4
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d7da:	b29b      	uxth	r3, r3
 800d7dc:	3b02      	subs	r3, #2
 800d7de:	b29a      	uxth	r2, r3
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d7e6:	e037      	b.n	800d858 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d7ec:	881a      	ldrh	r2, [r3, #0]
 800d7ee:	69fb      	ldr	r3, [r7, #28]
 800d7f0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d7f6:	1c9a      	adds	r2, r3, #2
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d802:	b29b      	uxth	r3, r3
 800d804:	3b01      	subs	r3, #1
 800d806:	b29a      	uxth	r2, r3
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d80e:	e023      	b.n	800d858 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d810:	f7f5 fcd0 	bl	80031b4 <HAL_GetTick>
 800d814:	4602      	mov	r2, r0
 800d816:	697b      	ldr	r3, [r7, #20]
 800d818:	1ad3      	subs	r3, r2, r3
 800d81a:	683a      	ldr	r2, [r7, #0]
 800d81c:	429a      	cmp	r2, r3
 800d81e:	d803      	bhi.n	800d828 <HAL_SPI_Transmit+0x240>
 800d820:	683b      	ldr	r3, [r7, #0]
 800d822:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d826:	d102      	bne.n	800d82e <HAL_SPI_Transmit+0x246>
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d114      	bne.n	800d858 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d82e:	68f8      	ldr	r0, [r7, #12]
 800d830:	f000 fdaa 	bl	800e388 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	2200      	movs	r2, #0
 800d838:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d842:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	2201      	movs	r2, #1
 800d850:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d854:	2301      	movs	r3, #1
 800d856:	e0b4      	b.n	800d9c2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d85e:	b29b      	uxth	r3, r3
 800d860:	2b00      	cmp	r3, #0
 800d862:	d19b      	bne.n	800d79c <HAL_SPI_Transmit+0x1b4>
 800d864:	e087      	b.n	800d976 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	695b      	ldr	r3, [r3, #20]
 800d86c:	f003 0302 	and.w	r3, r3, #2
 800d870:	2b02      	cmp	r3, #2
 800d872:	d155      	bne.n	800d920 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d87a:	b29b      	uxth	r3, r3
 800d87c:	2b03      	cmp	r3, #3
 800d87e:	d918      	bls.n	800d8b2 <HAL_SPI_Transmit+0x2ca>
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d884:	2b40      	cmp	r3, #64	; 0x40
 800d886:	d914      	bls.n	800d8b2 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	6812      	ldr	r2, [r2, #0]
 800d892:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d898:	1d1a      	adds	r2, r3, #4
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d8a4:	b29b      	uxth	r3, r3
 800d8a6:	3b04      	subs	r3, #4
 800d8a8:	b29a      	uxth	r2, r3
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d8b0:	e05a      	b.n	800d968 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d8b8:	b29b      	uxth	r3, r3
 800d8ba:	2b01      	cmp	r3, #1
 800d8bc:	d917      	bls.n	800d8ee <HAL_SPI_Transmit+0x306>
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d013      	beq.n	800d8ee <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8ca:	881a      	ldrh	r2, [r3, #0]
 800d8cc:	69fb      	ldr	r3, [r7, #28]
 800d8ce:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8d4:	1c9a      	adds	r2, r3, #2
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d8e0:	b29b      	uxth	r3, r3
 800d8e2:	3b02      	subs	r3, #2
 800d8e4:	b29a      	uxth	r2, r3
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d8ec:	e03c      	b.n	800d968 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	3320      	adds	r3, #32
 800d8f8:	7812      	ldrb	r2, [r2, #0]
 800d8fa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d900:	1c5a      	adds	r2, r3, #1
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d90c:	b29b      	uxth	r3, r3
 800d90e:	3b01      	subs	r3, #1
 800d910:	b29a      	uxth	r2, r3
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d918:	e026      	b.n	800d968 <HAL_SPI_Transmit+0x380>
 800d91a:	bf00      	nop
 800d91c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d920:	f7f5 fc48 	bl	80031b4 <HAL_GetTick>
 800d924:	4602      	mov	r2, r0
 800d926:	697b      	ldr	r3, [r7, #20]
 800d928:	1ad3      	subs	r3, r2, r3
 800d92a:	683a      	ldr	r2, [r7, #0]
 800d92c:	429a      	cmp	r2, r3
 800d92e:	d803      	bhi.n	800d938 <HAL_SPI_Transmit+0x350>
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d936:	d102      	bne.n	800d93e <HAL_SPI_Transmit+0x356>
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d114      	bne.n	800d968 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d93e:	68f8      	ldr	r0, [r7, #12]
 800d940:	f000 fd22 	bl	800e388 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	2200      	movs	r2, #0
 800d948:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d952:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	2201      	movs	r2, #1
 800d960:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d964:	2301      	movs	r3, #1
 800d966:	e02c      	b.n	800d9c2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d96e:	b29b      	uxth	r3, r3
 800d970:	2b00      	cmp	r3, #0
 800d972:	f47f af78 	bne.w	800d866 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	9300      	str	r3, [sp, #0]
 800d97a:	697b      	ldr	r3, [r7, #20]
 800d97c:	2200      	movs	r2, #0
 800d97e:	2108      	movs	r1, #8
 800d980:	68f8      	ldr	r0, [r7, #12]
 800d982:	f000 fda1 	bl	800e4c8 <SPI_WaitOnFlagUntilTimeout>
 800d986:	4603      	mov	r3, r0
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d007      	beq.n	800d99c <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d992:	f043 0220 	orr.w	r2, r3, #32
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d99c:	68f8      	ldr	r0, [r7, #12]
 800d99e:	f000 fcf3 	bl	800e388 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	2201      	movs	r2, #1
 800d9ae:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d001      	beq.n	800d9c0 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800d9bc:	2301      	movs	r3, #1
 800d9be:	e000      	b.n	800d9c2 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800d9c0:	7efb      	ldrb	r3, [r7, #27]
}
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	3720      	adds	r7, #32
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	bd80      	pop	{r7, pc}
 800d9ca:	bf00      	nop

0800d9cc <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b08a      	sub	sp, #40	; 0x28
 800d9d0:	af02      	add	r7, sp, #8
 800d9d2:	60f8      	str	r0, [r7, #12]
 800d9d4:	60b9      	str	r1, [r7, #8]
 800d9d6:	603b      	str	r3, [r7, #0]
 800d9d8:	4613      	mov	r3, r2
 800d9da:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d9dc:	2300      	movs	r3, #0
 800d9de:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	3330      	adds	r3, #48	; 0x30
 800d9e6:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	685b      	ldr	r3, [r3, #4]
 800d9ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d9f0:	d112      	bne.n	800da18 <HAL_SPI_Receive+0x4c>
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	689b      	ldr	r3, [r3, #8]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d10e      	bne.n	800da18 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	2204      	movs	r2, #4
 800d9fe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800da02:	88fa      	ldrh	r2, [r7, #6]
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	9300      	str	r3, [sp, #0]
 800da08:	4613      	mov	r3, r2
 800da0a:	68ba      	ldr	r2, [r7, #8]
 800da0c:	68b9      	ldr	r1, [r7, #8]
 800da0e:	68f8      	ldr	r0, [r7, #12]
 800da10:	f000 f9ce 	bl	800ddb0 <HAL_SPI_TransmitReceive>
 800da14:	4603      	mov	r3, r0
 800da16:	e1c7      	b.n	800dda8 <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800da1e:	2b01      	cmp	r3, #1
 800da20:	d101      	bne.n	800da26 <HAL_SPI_Receive+0x5a>
 800da22:	2302      	movs	r3, #2
 800da24:	e1c0      	b.n	800dda8 <HAL_SPI_Receive+0x3dc>
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	2201      	movs	r2, #1
 800da2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800da2e:	f7f5 fbc1 	bl	80031b4 <HAL_GetTick>
 800da32:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800da3a:	b2db      	uxtb	r3, r3
 800da3c:	2b01      	cmp	r3, #1
 800da3e:	d007      	beq.n	800da50 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800da40:	2302      	movs	r3, #2
 800da42:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	2200      	movs	r2, #0
 800da48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800da4c:	7ffb      	ldrb	r3, [r7, #31]
 800da4e:	e1ab      	b.n	800dda8 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800da50:	68bb      	ldr	r3, [r7, #8]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d002      	beq.n	800da5c <HAL_SPI_Receive+0x90>
 800da56:	88fb      	ldrh	r3, [r7, #6]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d107      	bne.n	800da6c <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800da5c:	2301      	movs	r3, #1
 800da5e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	2200      	movs	r2, #0
 800da64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800da68:	7ffb      	ldrb	r3, [r7, #31]
 800da6a:	e19d      	b.n	800dda8 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	2204      	movs	r2, #4
 800da70:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	2200      	movs	r2, #0
 800da78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	68ba      	ldr	r2, [r7, #8]
 800da80:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	88fa      	ldrh	r2, [r7, #6]
 800da86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	88fa      	ldrh	r2, [r7, #6]
 800da8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	2200      	movs	r2, #0
 800da96:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	2200      	movs	r2, #0
 800da9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	2200      	movs	r2, #0
 800daa4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	2200      	movs	r2, #0
 800daac:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	2200      	movs	r2, #0
 800dab2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	689b      	ldr	r3, [r3, #8]
 800dab8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800dabc:	d107      	bne.n	800dace <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	681a      	ldr	r2, [r3, #0]
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dacc:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	685a      	ldr	r2, [r3, #4]
 800dad4:	4b94      	ldr	r3, [pc, #592]	; (800dd28 <HAL_SPI_Receive+0x35c>)
 800dad6:	4013      	ands	r3, r2
 800dad8:	88f9      	ldrh	r1, [r7, #6]
 800dada:	68fa      	ldr	r2, [r7, #12]
 800dadc:	6812      	ldr	r2, [r2, #0]
 800dade:	430b      	orrs	r3, r1
 800dae0:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	681a      	ldr	r2, [r3, #0]
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	f042 0201 	orr.w	r2, r2, #1
 800daf0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	685b      	ldr	r3, [r3, #4]
 800daf6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dafa:	d107      	bne.n	800db0c <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	681a      	ldr	r2, [r3, #0]
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800db0a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	68db      	ldr	r3, [r3, #12]
 800db10:	2b0f      	cmp	r3, #15
 800db12:	d948      	bls.n	800dba6 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800db14:	e040      	b.n	800db98 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	695a      	ldr	r2, [r3, #20]
 800db1c:	f248 0308 	movw	r3, #32776	; 0x8008
 800db20:	4013      	ands	r3, r2
 800db22:	2b00      	cmp	r3, #0
 800db24:	d014      	beq.n	800db50 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	681a      	ldr	r2, [r3, #0]
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db2e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800db30:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db36:	1d1a      	adds	r2, r3, #4
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800db42:	b29b      	uxth	r3, r3
 800db44:	3b01      	subs	r3, #1
 800db46:	b29a      	uxth	r2, r3
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800db4e:	e023      	b.n	800db98 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800db50:	f7f5 fb30 	bl	80031b4 <HAL_GetTick>
 800db54:	4602      	mov	r2, r0
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	1ad3      	subs	r3, r2, r3
 800db5a:	683a      	ldr	r2, [r7, #0]
 800db5c:	429a      	cmp	r2, r3
 800db5e:	d803      	bhi.n	800db68 <HAL_SPI_Receive+0x19c>
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db66:	d102      	bne.n	800db6e <HAL_SPI_Receive+0x1a2>
 800db68:	683b      	ldr	r3, [r7, #0]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d114      	bne.n	800db98 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800db6e:	68f8      	ldr	r0, [r7, #12]
 800db70:	f000 fc0a 	bl	800e388 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	2200      	movs	r2, #0
 800db78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db82:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	2201      	movs	r2, #1
 800db90:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800db94:	2301      	movs	r3, #1
 800db96:	e107      	b.n	800dda8 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800db9e:	b29b      	uxth	r3, r3
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d1b8      	bne.n	800db16 <HAL_SPI_Receive+0x14a>
 800dba4:	e0ed      	b.n	800dd82 <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	68db      	ldr	r3, [r3, #12]
 800dbaa:	2b07      	cmp	r3, #7
 800dbac:	f240 80e2 	bls.w	800dd74 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800dbb0:	e05b      	b.n	800dc6a <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	695b      	ldr	r3, [r3, #20]
 800dbb8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d030      	beq.n	800dc22 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	695b      	ldr	r3, [r3, #20]
 800dbc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d014      	beq.n	800dbf8 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	681a      	ldr	r2, [r3, #0]
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dbd6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800dbd8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dbde:	1d1a      	adds	r2, r3, #4
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dbea:	b29b      	uxth	r3, r3
 800dbec:	3b02      	subs	r3, #2
 800dbee:	b29a      	uxth	r2, r3
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dbf6:	e038      	b.n	800dc6a <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dbfc:	69ba      	ldr	r2, [r7, #24]
 800dbfe:	8812      	ldrh	r2, [r2, #0]
 800dc00:	b292      	uxth	r2, r2
 800dc02:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc08:	1c9a      	adds	r2, r3, #2
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dc14:	b29b      	uxth	r3, r3
 800dc16:	3b01      	subs	r3, #1
 800dc18:	b29a      	uxth	r2, r3
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dc20:	e023      	b.n	800dc6a <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dc22:	f7f5 fac7 	bl	80031b4 <HAL_GetTick>
 800dc26:	4602      	mov	r2, r0
 800dc28:	697b      	ldr	r3, [r7, #20]
 800dc2a:	1ad3      	subs	r3, r2, r3
 800dc2c:	683a      	ldr	r2, [r7, #0]
 800dc2e:	429a      	cmp	r2, r3
 800dc30:	d803      	bhi.n	800dc3a <HAL_SPI_Receive+0x26e>
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc38:	d102      	bne.n	800dc40 <HAL_SPI_Receive+0x274>
 800dc3a:	683b      	ldr	r3, [r7, #0]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d114      	bne.n	800dc6a <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dc40:	68f8      	ldr	r0, [r7, #12]
 800dc42:	f000 fba1 	bl	800e388 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	2200      	movs	r2, #0
 800dc4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc54:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	2201      	movs	r2, #1
 800dc62:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800dc66:	2301      	movs	r3, #1
 800dc68:	e09e      	b.n	800dda8 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dc70:	b29b      	uxth	r3, r3
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d19d      	bne.n	800dbb2 <HAL_SPI_Receive+0x1e6>
 800dc76:	e084      	b.n	800dd82 <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	695b      	ldr	r3, [r3, #20]
 800dc7e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d052      	beq.n	800dd2c <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	695b      	ldr	r3, [r3, #20]
 800dc8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d014      	beq.n	800dcbe <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	681a      	ldr	r2, [r3, #0]
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc9c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800dc9e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dca4:	1d1a      	adds	r2, r3, #4
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dcb0:	b29b      	uxth	r3, r3
 800dcb2:	3b04      	subs	r3, #4
 800dcb4:	b29a      	uxth	r2, r3
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dcbc:	e05a      	b.n	800dd74 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	695b      	ldr	r3, [r3, #20]
 800dcc4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800dcc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dccc:	d914      	bls.n	800dcf8 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dcd2:	69ba      	ldr	r2, [r7, #24]
 800dcd4:	8812      	ldrh	r2, [r2, #0]
 800dcd6:	b292      	uxth	r2, r2
 800dcd8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dcde:	1c9a      	adds	r2, r3, #2
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dcea:	b29b      	uxth	r3, r3
 800dcec:	3b02      	subs	r3, #2
 800dcee:	b29a      	uxth	r2, r3
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dcf6:	e03d      	b.n	800dd74 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd04:	7812      	ldrb	r2, [r2, #0]
 800dd06:	b2d2      	uxtb	r2, r2
 800dd08:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd0e:	1c5a      	adds	r2, r3, #1
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dd1a:	b29b      	uxth	r3, r3
 800dd1c:	3b01      	subs	r3, #1
 800dd1e:	b29a      	uxth	r2, r3
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dd26:	e025      	b.n	800dd74 <HAL_SPI_Receive+0x3a8>
 800dd28:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dd2c:	f7f5 fa42 	bl	80031b4 <HAL_GetTick>
 800dd30:	4602      	mov	r2, r0
 800dd32:	697b      	ldr	r3, [r7, #20]
 800dd34:	1ad3      	subs	r3, r2, r3
 800dd36:	683a      	ldr	r2, [r7, #0]
 800dd38:	429a      	cmp	r2, r3
 800dd3a:	d803      	bhi.n	800dd44 <HAL_SPI_Receive+0x378>
 800dd3c:	683b      	ldr	r3, [r7, #0]
 800dd3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd42:	d102      	bne.n	800dd4a <HAL_SPI_Receive+0x37e>
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d114      	bne.n	800dd74 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dd4a:	68f8      	ldr	r0, [r7, #12]
 800dd4c:	f000 fb1c 	bl	800e388 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	2200      	movs	r2, #0
 800dd54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	2201      	movs	r2, #1
 800dd6c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800dd70:	2301      	movs	r3, #1
 800dd72:	e019      	b.n	800dda8 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dd7a:	b29b      	uxth	r3, r3
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	f47f af7b 	bne.w	800dc78 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800dd82:	68f8      	ldr	r0, [r7, #12]
 800dd84:	f000 fb00 	bl	800e388 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	2201      	movs	r2, #1
 800dd94:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d001      	beq.n	800dda6 <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800dda2:	2301      	movs	r3, #1
 800dda4:	e000      	b.n	800dda8 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800dda6:	7ffb      	ldrb	r3, [r7, #31]
}
 800dda8:	4618      	mov	r0, r3
 800ddaa:	3720      	adds	r7, #32
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd80      	pop	{r7, pc}

0800ddb0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b08e      	sub	sp, #56	; 0x38
 800ddb4:	af02      	add	r7, sp, #8
 800ddb6:	60f8      	str	r0, [r7, #12]
 800ddb8:	60b9      	str	r1, [r7, #8]
 800ddba:	607a      	str	r2, [r7, #4]
 800ddbc:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	3320      	adds	r3, #32
 800ddca:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	3330      	adds	r3, #48	; 0x30
 800ddd2:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ddda:	2b01      	cmp	r3, #1
 800dddc:	d101      	bne.n	800dde2 <HAL_SPI_TransmitReceive+0x32>
 800ddde:	2302      	movs	r3, #2
 800dde0:	e2ce      	b.n	800e380 <HAL_SPI_TransmitReceive+0x5d0>
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	2201      	movs	r2, #1
 800dde6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ddea:	f7f5 f9e3 	bl	80031b4 <HAL_GetTick>
 800ddee:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800ddf0:	887b      	ldrh	r3, [r7, #2]
 800ddf2:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800ddf4:	887b      	ldrh	r3, [r7, #2]
 800ddf6:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ddfe:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	685b      	ldr	r3, [r3, #4]
 800de04:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800de06:	7efb      	ldrb	r3, [r7, #27]
 800de08:	2b01      	cmp	r3, #1
 800de0a:	d014      	beq.n	800de36 <HAL_SPI_TransmitReceive+0x86>
 800de0c:	697b      	ldr	r3, [r7, #20]
 800de0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800de12:	d106      	bne.n	800de22 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	689b      	ldr	r3, [r3, #8]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d102      	bne.n	800de22 <HAL_SPI_TransmitReceive+0x72>
 800de1c:	7efb      	ldrb	r3, [r7, #27]
 800de1e:	2b04      	cmp	r3, #4
 800de20:	d009      	beq.n	800de36 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800de22:	2302      	movs	r3, #2
 800de24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	2200      	movs	r2, #0
 800de2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800de30:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800de34:	e2a4      	b.n	800e380 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800de36:	68bb      	ldr	r3, [r7, #8]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d005      	beq.n	800de48 <HAL_SPI_TransmitReceive+0x98>
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d002      	beq.n	800de48 <HAL_SPI_TransmitReceive+0x98>
 800de42:	887b      	ldrh	r3, [r7, #2]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d109      	bne.n	800de5c <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800de48:	2301      	movs	r3, #1
 800de4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	2200      	movs	r2, #0
 800de52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800de56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800de5a:	e291      	b.n	800e380 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800de62:	b2db      	uxtb	r3, r3
 800de64:	2b04      	cmp	r3, #4
 800de66:	d003      	beq.n	800de70 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	2205      	movs	r2, #5
 800de6c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	2200      	movs	r2, #0
 800de74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	687a      	ldr	r2, [r7, #4]
 800de7c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	887a      	ldrh	r2, [r7, #2]
 800de82:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	887a      	ldrh	r2, [r7, #2]
 800de8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	68ba      	ldr	r2, [r7, #8]
 800de92:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	887a      	ldrh	r2, [r7, #2]
 800de98:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	887a      	ldrh	r2, [r7, #2]
 800dea0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	2200      	movs	r2, #0
 800dea8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	2200      	movs	r2, #0
 800deae:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	685a      	ldr	r2, [r3, #4]
 800deb6:	4b9f      	ldr	r3, [pc, #636]	; (800e134 <HAL_SPI_TransmitReceive+0x384>)
 800deb8:	4013      	ands	r3, r2
 800deba:	8879      	ldrh	r1, [r7, #2]
 800debc:	68fa      	ldr	r2, [r7, #12]
 800debe:	6812      	ldr	r2, [r2, #0]
 800dec0:	430b      	orrs	r3, r1
 800dec2:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	681a      	ldr	r2, [r3, #0]
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	f042 0201 	orr.w	r2, r2, #1
 800ded2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	685b      	ldr	r3, [r3, #4]
 800ded8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dedc:	d107      	bne.n	800deee <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	681a      	ldr	r2, [r3, #0]
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800deec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	68db      	ldr	r3, [r3, #12]
 800def2:	2b0f      	cmp	r3, #15
 800def4:	d970      	bls.n	800dfd8 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800def6:	e068      	b.n	800dfca <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	695b      	ldr	r3, [r3, #20]
 800defe:	f003 0302 	and.w	r3, r3, #2
 800df02:	2b02      	cmp	r3, #2
 800df04:	d11a      	bne.n	800df3c <HAL_SPI_TransmitReceive+0x18c>
 800df06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d017      	beq.n	800df3c <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	6812      	ldr	r2, [r2, #0]
 800df16:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df1c:	1d1a      	adds	r2, r3, #4
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800df28:	b29b      	uxth	r3, r3
 800df2a:	3b01      	subs	r3, #1
 800df2c:	b29a      	uxth	r2, r3
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800df3a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	695a      	ldr	r2, [r3, #20]
 800df42:	f248 0308 	movw	r3, #32776	; 0x8008
 800df46:	4013      	ands	r3, r2
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d01a      	beq.n	800df82 <HAL_SPI_TransmitReceive+0x1d2>
 800df4c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d017      	beq.n	800df82 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	681a      	ldr	r2, [r3, #0]
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df5a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800df5c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df62:	1d1a      	adds	r2, r3, #4
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800df6e:	b29b      	uxth	r3, r3
 800df70:	3b01      	subs	r3, #1
 800df72:	b29a      	uxth	r2, r3
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800df80:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800df82:	f7f5 f917 	bl	80031b4 <HAL_GetTick>
 800df86:	4602      	mov	r2, r0
 800df88:	69fb      	ldr	r3, [r7, #28]
 800df8a:	1ad3      	subs	r3, r2, r3
 800df8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800df8e:	429a      	cmp	r2, r3
 800df90:	d803      	bhi.n	800df9a <HAL_SPI_TransmitReceive+0x1ea>
 800df92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df98:	d102      	bne.n	800dfa0 <HAL_SPI_TransmitReceive+0x1f0>
 800df9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d114      	bne.n	800dfca <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800dfa0:	68f8      	ldr	r0, [r7, #12]
 800dfa2:	f000 f9f1 	bl	800e388 <SPI_CloseTransfer>
      
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dfb4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	2201      	movs	r2, #1
 800dfc2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800dfc6:	2301      	movs	r3, #1
 800dfc8:	e1da      	b.n	800e380 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800dfca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d193      	bne.n	800def8 <HAL_SPI_TransmitReceive+0x148>
 800dfd0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d190      	bne.n	800def8 <HAL_SPI_TransmitReceive+0x148>
 800dfd6:	e1ac      	b.n	800e332 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	68db      	ldr	r3, [r3, #12]
 800dfdc:	2b07      	cmp	r3, #7
 800dfde:	f240 81a0 	bls.w	800e322 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800dfe2:	e0a9      	b.n	800e138 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	695b      	ldr	r3, [r3, #20]
 800dfea:	f003 0302 	and.w	r3, r3, #2
 800dfee:	2b02      	cmp	r3, #2
 800dff0:	d139      	bne.n	800e066 <HAL_SPI_TransmitReceive+0x2b6>
 800dff2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d036      	beq.n	800e066 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800dff8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dffa:	2b01      	cmp	r3, #1
 800dffc:	d91c      	bls.n	800e038 <HAL_SPI_TransmitReceive+0x288>
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e002:	2b00      	cmp	r3, #0
 800e004:	d018      	beq.n	800e038 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	6812      	ldr	r2, [r2, #0]
 800e010:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e016:	1d1a      	adds	r2, r3, #4
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e022:	b29b      	uxth	r3, r3
 800e024:	3b02      	subs	r3, #2
 800e026:	b29a      	uxth	r2, r3
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e034:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e036:	e016      	b.n	800e066 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e03c:	881a      	ldrh	r2, [r3, #0]
 800e03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e040:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e046:	1c9a      	adds	r2, r3, #2
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e052:	b29b      	uxth	r3, r3
 800e054:	3b01      	subs	r3, #1
 800e056:	b29a      	uxth	r2, r3
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e064:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	695b      	ldr	r3, [r3, #20]
 800e06c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e070:	2b00      	cmp	r3, #0
 800e072:	d03a      	beq.n	800e0ea <HAL_SPI_TransmitReceive+0x33a>
 800e074:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e076:	2b00      	cmp	r3, #0
 800e078:	d037      	beq.n	800e0ea <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	695b      	ldr	r3, [r3, #20]
 800e080:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e084:	2b00      	cmp	r3, #0
 800e086:	d018      	beq.n	800e0ba <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	681a      	ldr	r2, [r3, #0]
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e090:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e092:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e098:	1d1a      	adds	r2, r3, #4
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e0a4:	b29b      	uxth	r3, r3
 800e0a6:	3b02      	subs	r3, #2
 800e0a8:	b29a      	uxth	r2, r3
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e0b6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e0b8:	e017      	b.n	800e0ea <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0be:	6a3a      	ldr	r2, [r7, #32]
 800e0c0:	8812      	ldrh	r2, [r2, #0]
 800e0c2:	b292      	uxth	r2, r2
 800e0c4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0ca:	1c9a      	adds	r2, r3, #2
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e0d6:	b29b      	uxth	r3, r3
 800e0d8:	3b01      	subs	r3, #1
 800e0da:	b29a      	uxth	r2, r3
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e0e8:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e0ea:	f7f5 f863 	bl	80031b4 <HAL_GetTick>
 800e0ee:	4602      	mov	r2, r0
 800e0f0:	69fb      	ldr	r3, [r7, #28]
 800e0f2:	1ad3      	subs	r3, r2, r3
 800e0f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e0f6:	429a      	cmp	r2, r3
 800e0f8:	d803      	bhi.n	800e102 <HAL_SPI_TransmitReceive+0x352>
 800e0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e100:	d102      	bne.n	800e108 <HAL_SPI_TransmitReceive+0x358>
 800e102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e104:	2b00      	cmp	r3, #0
 800e106:	d117      	bne.n	800e138 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800e108:	68f8      	ldr	r0, [r7, #12]
 800e10a:	f000 f93d 	bl	800e388 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	2200      	movs	r2, #0
 800e112:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e11c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	2201      	movs	r2, #1
 800e12a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800e12e:	2301      	movs	r3, #1
 800e130:	e126      	b.n	800e380 <HAL_SPI_TransmitReceive+0x5d0>
 800e132:	bf00      	nop
 800e134:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e138:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	f47f af52 	bne.w	800dfe4 <HAL_SPI_TransmitReceive+0x234>
 800e140:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e142:	2b00      	cmp	r3, #0
 800e144:	f47f af4e 	bne.w	800dfe4 <HAL_SPI_TransmitReceive+0x234>
 800e148:	e0f3      	b.n	800e332 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	695b      	ldr	r3, [r3, #20]
 800e150:	f003 0302 	and.w	r3, r3, #2
 800e154:	2b02      	cmp	r3, #2
 800e156:	d15a      	bne.n	800e20e <HAL_SPI_TransmitReceive+0x45e>
 800e158:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d057      	beq.n	800e20e <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800e15e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e160:	2b03      	cmp	r3, #3
 800e162:	d91c      	bls.n	800e19e <HAL_SPI_TransmitReceive+0x3ee>
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e168:	2b40      	cmp	r3, #64	; 0x40
 800e16a:	d918      	bls.n	800e19e <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	6812      	ldr	r2, [r2, #0]
 800e176:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e17c:	1d1a      	adds	r2, r3, #4
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e188:	b29b      	uxth	r3, r3
 800e18a:	3b04      	subs	r3, #4
 800e18c:	b29a      	uxth	r2, r3
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e19a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e19c:	e037      	b.n	800e20e <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e19e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e1a0:	2b01      	cmp	r3, #1
 800e1a2:	d91b      	bls.n	800e1dc <HAL_SPI_TransmitReceive+0x42c>
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d017      	beq.n	800e1dc <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e1b0:	881a      	ldrh	r2, [r3, #0]
 800e1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1b4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e1ba:	1c9a      	adds	r2, r3, #2
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e1c6:	b29b      	uxth	r3, r3
 800e1c8:	3b02      	subs	r3, #2
 800e1ca:	b29a      	uxth	r2, r3
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e1d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e1da:	e018      	b.n	800e20e <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	3320      	adds	r3, #32
 800e1e6:	7812      	ldrb	r2, [r2, #0]
 800e1e8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e1ee:	1c5a      	adds	r2, r3, #1
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e1fa:	b29b      	uxth	r3, r3
 800e1fc:	3b01      	subs	r3, #1
 800e1fe:	b29a      	uxth	r2, r3
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e20c:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	695b      	ldr	r3, [r3, #20]
 800e214:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d05e      	beq.n	800e2da <HAL_SPI_TransmitReceive+0x52a>
 800e21c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d05b      	beq.n	800e2da <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	695b      	ldr	r3, [r3, #20]
 800e228:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d018      	beq.n	800e262 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	681a      	ldr	r2, [r3, #0]
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e238:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e23a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e240:	1d1a      	adds	r2, r3, #4
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e24c:	b29b      	uxth	r3, r3
 800e24e:	3b04      	subs	r3, #4
 800e250:	b29a      	uxth	r2, r3
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e25e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e260:	e03b      	b.n	800e2da <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	695b      	ldr	r3, [r3, #20]
 800e268:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e26c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e270:	d918      	bls.n	800e2a4 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e276:	6a3a      	ldr	r2, [r7, #32]
 800e278:	8812      	ldrh	r2, [r2, #0]
 800e27a:	b292      	uxth	r2, r2
 800e27c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e282:	1c9a      	adds	r2, r3, #2
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e28e:	b29b      	uxth	r3, r3
 800e290:	3b02      	subs	r3, #2
 800e292:	b29a      	uxth	r2, r3
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e2a0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e2a2:	e01a      	b.n	800e2da <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2b0:	7812      	ldrb	r2, [r2, #0]
 800e2b2:	b2d2      	uxtb	r2, r2
 800e2b4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2ba:	1c5a      	adds	r2, r3, #1
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e2c6:	b29b      	uxth	r3, r3
 800e2c8:	3b01      	subs	r3, #1
 800e2ca:	b29a      	uxth	r2, r3
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e2d8:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e2da:	f7f4 ff6b 	bl	80031b4 <HAL_GetTick>
 800e2de:	4602      	mov	r2, r0
 800e2e0:	69fb      	ldr	r3, [r7, #28]
 800e2e2:	1ad3      	subs	r3, r2, r3
 800e2e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e2e6:	429a      	cmp	r2, r3
 800e2e8:	d803      	bhi.n	800e2f2 <HAL_SPI_TransmitReceive+0x542>
 800e2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2f0:	d102      	bne.n	800e2f8 <HAL_SPI_TransmitReceive+0x548>
 800e2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d114      	bne.n	800e322 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800e2f8:	68f8      	ldr	r0, [r7, #12]
 800e2fa:	f000 f845 	bl	800e388 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	2200      	movs	r2, #0
 800e302:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e30c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	2201      	movs	r2, #1
 800e31a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800e31e:	2301      	movs	r3, #1
 800e320:	e02e      	b.n	800e380 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e322:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e324:	2b00      	cmp	r3, #0
 800e326:	f47f af10 	bne.w	800e14a <HAL_SPI_TransmitReceive+0x39a>
 800e32a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	f47f af0c 	bne.w	800e14a <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800e332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e334:	9300      	str	r3, [sp, #0]
 800e336:	69fb      	ldr	r3, [r7, #28]
 800e338:	2200      	movs	r2, #0
 800e33a:	2108      	movs	r1, #8
 800e33c:	68f8      	ldr	r0, [r7, #12]
 800e33e:	f000 f8c3 	bl	800e4c8 <SPI_WaitOnFlagUntilTimeout>
 800e342:	4603      	mov	r3, r0
 800e344:	2b00      	cmp	r3, #0
 800e346:	d007      	beq.n	800e358 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e34e:	f043 0220 	orr.w	r2, r3, #32
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e358:	68f8      	ldr	r0, [r7, #12]
 800e35a:	f000 f815 	bl	800e388 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	2200      	movs	r2, #0
 800e362:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	2201      	movs	r2, #1
 800e36a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e374:	2b00      	cmp	r3, #0
 800e376:	d001      	beq.n	800e37c <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800e378:	2301      	movs	r3, #1
 800e37a:	e001      	b.n	800e380 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800e37c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800e380:	4618      	mov	r0, r3
 800e382:	3730      	adds	r7, #48	; 0x30
 800e384:	46bd      	mov	sp, r7
 800e386:	bd80      	pop	{r7, pc}

0800e388 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e388:	b480      	push	{r7}
 800e38a:	b085      	sub	sp, #20
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	695b      	ldr	r3, [r3, #20]
 800e396:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	699a      	ldr	r2, [r3, #24]
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	f042 0208 	orr.w	r2, r2, #8
 800e3a6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	699a      	ldr	r2, [r3, #24]
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	f042 0210 	orr.w	r2, r2, #16
 800e3b6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	681a      	ldr	r2, [r3, #0]
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	f022 0201 	bic.w	r2, r2, #1
 800e3c6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	6919      	ldr	r1, [r3, #16]
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681a      	ldr	r2, [r3, #0]
 800e3d2:	4b3c      	ldr	r3, [pc, #240]	; (800e4c4 <SPI_CloseTransfer+0x13c>)
 800e3d4:	400b      	ands	r3, r1
 800e3d6:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	689a      	ldr	r2, [r3, #8]
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e3e6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e3ee:	b2db      	uxtb	r3, r3
 800e3f0:	2b04      	cmp	r3, #4
 800e3f2:	d014      	beq.n	800e41e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	f003 0320 	and.w	r3, r3, #32
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d00f      	beq.n	800e41e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e404:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	699a      	ldr	r2, [r3, #24]
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	f042 0220 	orr.w	r2, r2, #32
 800e41c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e424:	b2db      	uxtb	r3, r3
 800e426:	2b03      	cmp	r3, #3
 800e428:	d014      	beq.n	800e454 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e430:	2b00      	cmp	r3, #0
 800e432:	d00f      	beq.n	800e454 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e43a:	f043 0204 	orr.w	r2, r3, #4
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	699a      	ldr	r2, [r3, #24]
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e452:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d00f      	beq.n	800e47e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e464:	f043 0201 	orr.w	r2, r3, #1
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	699a      	ldr	r2, [r3, #24]
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e47c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e484:	2b00      	cmp	r3, #0
 800e486:	d00f      	beq.n	800e4a8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e48e:	f043 0208 	orr.w	r2, r3, #8
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	699a      	ldr	r2, [r3, #24]
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e4a6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800e4b8:	bf00      	nop
 800e4ba:	3714      	adds	r7, #20
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c2:	4770      	bx	lr
 800e4c4:	fffffc90 	.word	0xfffffc90

0800e4c8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b084      	sub	sp, #16
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	60f8      	str	r0, [r7, #12]
 800e4d0:	60b9      	str	r1, [r7, #8]
 800e4d2:	603b      	str	r3, [r7, #0]
 800e4d4:	4613      	mov	r3, r2
 800e4d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e4d8:	e010      	b.n	800e4fc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e4da:	f7f4 fe6b 	bl	80031b4 <HAL_GetTick>
 800e4de:	4602      	mov	r2, r0
 800e4e0:	683b      	ldr	r3, [r7, #0]
 800e4e2:	1ad3      	subs	r3, r2, r3
 800e4e4:	69ba      	ldr	r2, [r7, #24]
 800e4e6:	429a      	cmp	r2, r3
 800e4e8:	d803      	bhi.n	800e4f2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800e4ea:	69bb      	ldr	r3, [r7, #24]
 800e4ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4f0:	d102      	bne.n	800e4f8 <SPI_WaitOnFlagUntilTimeout+0x30>
 800e4f2:	69bb      	ldr	r3, [r7, #24]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d101      	bne.n	800e4fc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800e4f8:	2303      	movs	r3, #3
 800e4fa:	e00f      	b.n	800e51c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	695a      	ldr	r2, [r3, #20]
 800e502:	68bb      	ldr	r3, [r7, #8]
 800e504:	4013      	ands	r3, r2
 800e506:	68ba      	ldr	r2, [r7, #8]
 800e508:	429a      	cmp	r2, r3
 800e50a:	bf0c      	ite	eq
 800e50c:	2301      	moveq	r3, #1
 800e50e:	2300      	movne	r3, #0
 800e510:	b2db      	uxtb	r3, r3
 800e512:	461a      	mov	r2, r3
 800e514:	79fb      	ldrb	r3, [r7, #7]
 800e516:	429a      	cmp	r2, r3
 800e518:	d0df      	beq.n	800e4da <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800e51a:	2300      	movs	r3, #0
}
 800e51c:	4618      	mov	r0, r3
 800e51e:	3710      	adds	r7, #16
 800e520:	46bd      	mov	sp, r7
 800e522:	bd80      	pop	{r7, pc}

0800e524 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800e524:	b480      	push	{r7}
 800e526:	b085      	sub	sp, #20
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e530:	095b      	lsrs	r3, r3, #5
 800e532:	3301      	adds	r3, #1
 800e534:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	68db      	ldr	r3, [r3, #12]
 800e53a:	3301      	adds	r3, #1
 800e53c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e53e:	68bb      	ldr	r3, [r7, #8]
 800e540:	3307      	adds	r3, #7
 800e542:	08db      	lsrs	r3, r3, #3
 800e544:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e546:	68bb      	ldr	r3, [r7, #8]
 800e548:	68fa      	ldr	r2, [r7, #12]
 800e54a:	fb02 f303 	mul.w	r3, r2, r3
}
 800e54e:	4618      	mov	r0, r3
 800e550:	3714      	adds	r7, #20
 800e552:	46bd      	mov	sp, r7
 800e554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e558:	4770      	bx	lr

0800e55a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e55a:	b580      	push	{r7, lr}
 800e55c:	b082      	sub	sp, #8
 800e55e:	af00      	add	r7, sp, #0
 800e560:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d101      	bne.n	800e56c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e568:	2301      	movs	r3, #1
 800e56a:	e042      	b.n	800e5f2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e572:	2b00      	cmp	r3, #0
 800e574:	d106      	bne.n	800e584 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	2200      	movs	r2, #0
 800e57a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e57e:	6878      	ldr	r0, [r7, #4]
 800e580:	f7f4 fb34 	bl	8002bec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2224      	movs	r2, #36	; 0x24
 800e588:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	681a      	ldr	r2, [r3, #0]
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	f022 0201 	bic.w	r2, r2, #1
 800e59a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e59c:	6878      	ldr	r0, [r7, #4]
 800e59e:	f000 f95f 	bl	800e860 <UART_SetConfig>
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	2b01      	cmp	r3, #1
 800e5a6:	d101      	bne.n	800e5ac <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	e022      	b.n	800e5f2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d002      	beq.n	800e5ba <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e5b4:	6878      	ldr	r0, [r7, #4]
 800e5b6:	f000 ff03 	bl	800f3c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	685a      	ldr	r2, [r3, #4]
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e5c8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	689a      	ldr	r2, [r3, #8]
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e5d8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	681a      	ldr	r2, [r3, #0]
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	f042 0201 	orr.w	r2, r2, #1
 800e5e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e5ea:	6878      	ldr	r0, [r7, #4]
 800e5ec:	f000 ff8a 	bl	800f504 <UART_CheckIdleState>
 800e5f0:	4603      	mov	r3, r0
}
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	3708      	adds	r7, #8
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	bd80      	pop	{r7, pc}

0800e5fa <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e5fa:	b580      	push	{r7, lr}
 800e5fc:	b08a      	sub	sp, #40	; 0x28
 800e5fe:	af02      	add	r7, sp, #8
 800e600:	60f8      	str	r0, [r7, #12]
 800e602:	60b9      	str	r1, [r7, #8]
 800e604:	603b      	str	r3, [r7, #0]
 800e606:	4613      	mov	r3, r2
 800e608:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e610:	2b20      	cmp	r3, #32
 800e612:	f040 8083 	bne.w	800e71c <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800e616:	68bb      	ldr	r3, [r7, #8]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d002      	beq.n	800e622 <HAL_UART_Transmit+0x28>
 800e61c:	88fb      	ldrh	r3, [r7, #6]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d101      	bne.n	800e626 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800e622:	2301      	movs	r3, #1
 800e624:	e07b      	b.n	800e71e <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e62c:	2b01      	cmp	r3, #1
 800e62e:	d101      	bne.n	800e634 <HAL_UART_Transmit+0x3a>
 800e630:	2302      	movs	r3, #2
 800e632:	e074      	b.n	800e71e <HAL_UART_Transmit+0x124>
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	2201      	movs	r2, #1
 800e638:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	2200      	movs	r2, #0
 800e640:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	2221      	movs	r2, #33	; 0x21
 800e648:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800e64c:	f7f4 fdb2 	bl	80031b4 <HAL_GetTick>
 800e650:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	88fa      	ldrh	r2, [r7, #6]
 800e656:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	88fa      	ldrh	r2, [r7, #6]
 800e65e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	689b      	ldr	r3, [r3, #8]
 800e666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e66a:	d108      	bne.n	800e67e <HAL_UART_Transmit+0x84>
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	691b      	ldr	r3, [r3, #16]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d104      	bne.n	800e67e <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800e674:	2300      	movs	r3, #0
 800e676:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e678:	68bb      	ldr	r3, [r7, #8]
 800e67a:	61bb      	str	r3, [r7, #24]
 800e67c:	e003      	b.n	800e686 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800e67e:	68bb      	ldr	r3, [r7, #8]
 800e680:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e682:	2300      	movs	r3, #0
 800e684:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	2200      	movs	r2, #0
 800e68a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800e68e:	e02c      	b.n	800e6ea <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	9300      	str	r3, [sp, #0]
 800e694:	697b      	ldr	r3, [r7, #20]
 800e696:	2200      	movs	r2, #0
 800e698:	2180      	movs	r1, #128	; 0x80
 800e69a:	68f8      	ldr	r0, [r7, #12]
 800e69c:	f000 ff7a 	bl	800f594 <UART_WaitOnFlagUntilTimeout>
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d001      	beq.n	800e6aa <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800e6a6:	2303      	movs	r3, #3
 800e6a8:	e039      	b.n	800e71e <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800e6aa:	69fb      	ldr	r3, [r7, #28]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d10b      	bne.n	800e6c8 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e6b0:	69bb      	ldr	r3, [r7, #24]
 800e6b2:	881b      	ldrh	r3, [r3, #0]
 800e6b4:	461a      	mov	r2, r3
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e6be:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e6c0:	69bb      	ldr	r3, [r7, #24]
 800e6c2:	3302      	adds	r3, #2
 800e6c4:	61bb      	str	r3, [r7, #24]
 800e6c6:	e007      	b.n	800e6d8 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e6c8:	69fb      	ldr	r3, [r7, #28]
 800e6ca:	781a      	ldrb	r2, [r3, #0]
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e6d2:	69fb      	ldr	r3, [r7, #28]
 800e6d4:	3301      	adds	r3, #1
 800e6d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e6de:	b29b      	uxth	r3, r3
 800e6e0:	3b01      	subs	r3, #1
 800e6e2:	b29a      	uxth	r2, r3
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e6f0:	b29b      	uxth	r3, r3
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d1cc      	bne.n	800e690 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e6f6:	683b      	ldr	r3, [r7, #0]
 800e6f8:	9300      	str	r3, [sp, #0]
 800e6fa:	697b      	ldr	r3, [r7, #20]
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	2140      	movs	r1, #64	; 0x40
 800e700:	68f8      	ldr	r0, [r7, #12]
 800e702:	f000 ff47 	bl	800f594 <UART_WaitOnFlagUntilTimeout>
 800e706:	4603      	mov	r3, r0
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d001      	beq.n	800e710 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800e70c:	2303      	movs	r3, #3
 800e70e:	e006      	b.n	800e71e <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	2220      	movs	r2, #32
 800e714:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800e718:	2300      	movs	r3, #0
 800e71a:	e000      	b.n	800e71e <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800e71c:	2302      	movs	r3, #2
  }
}
 800e71e:	4618      	mov	r0, r3
 800e720:	3720      	adds	r7, #32
 800e722:	46bd      	mov	sp, r7
 800e724:	bd80      	pop	{r7, pc}
	...

0800e728 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b084      	sub	sp, #16
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	60f8      	str	r0, [r7, #12]
 800e730:	60b9      	str	r1, [r7, #8]
 800e732:	4613      	mov	r3, r2
 800e734:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e73c:	2b20      	cmp	r3, #32
 800e73e:	d170      	bne.n	800e822 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 800e740:	68bb      	ldr	r3, [r7, #8]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d002      	beq.n	800e74c <HAL_UART_Receive_DMA+0x24>
 800e746:	88fb      	ldrh	r3, [r7, #6]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d101      	bne.n	800e750 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800e74c:	2301      	movs	r3, #1
 800e74e:	e069      	b.n	800e824 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e756:	2b01      	cmp	r3, #1
 800e758:	d101      	bne.n	800e75e <HAL_UART_Receive_DMA+0x36>
 800e75a:	2302      	movs	r3, #2
 800e75c:	e062      	b.n	800e824 <HAL_UART_Receive_DMA+0xfc>
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	2201      	movs	r2, #1
 800e762:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	68ba      	ldr	r2, [r7, #8]
 800e76a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	88fa      	ldrh	r2, [r7, #6]
 800e770:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	2200      	movs	r2, #0
 800e778:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	2222      	movs	r2, #34	; 0x22
 800e780:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d02c      	beq.n	800e7e6 <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e790:	4a26      	ldr	r2, [pc, #152]	; (800e82c <HAL_UART_Receive_DMA+0x104>)
 800e792:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e798:	4a25      	ldr	r2, [pc, #148]	; (800e830 <HAL_UART_Receive_DMA+0x108>)
 800e79a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e7a0:	4a24      	ldr	r2, [pc, #144]	; (800e834 <HAL_UART_Receive_DMA+0x10c>)
 800e7a2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e7a8:	2200      	movs	r2, #0
 800e7aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	3324      	adds	r3, #36	; 0x24
 800e7b6:	4619      	mov	r1, r3
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e7bc:	461a      	mov	r2, r3
 800e7be:	88fb      	ldrh	r3, [r7, #6]
 800e7c0:	f7f5 f99e 	bl	8003b00 <HAL_DMA_Start_IT>
 800e7c4:	4603      	mov	r3, r0
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d00d      	beq.n	800e7e6 <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	2210      	movs	r2, #16
 800e7ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	2220      	movs	r2, #32
 800e7de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800e7e2:	2301      	movs	r3, #1
 800e7e4:	e01e      	b.n	800e824 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	681a      	ldr	r2, [r3, #0]
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e7fc:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	689a      	ldr	r2, [r3, #8]
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	f042 0201 	orr.w	r2, r2, #1
 800e80c:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	689a      	ldr	r2, [r3, #8]
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e81c:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800e81e:	2300      	movs	r3, #0
 800e820:	e000      	b.n	800e824 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 800e822:	2302      	movs	r3, #2
  }
}
 800e824:	4618      	mov	r0, r3
 800e826:	3710      	adds	r7, #16
 800e828:	46bd      	mov	sp, r7
 800e82a:	bd80      	pop	{r7, pc}
 800e82c:	0800f719 	.word	0x0800f719
 800e830:	0800f77f 	.word	0x0800f77f
 800e834:	0800f79b 	.word	0x0800f79b

0800e838 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e838:	b480      	push	{r7}
 800e83a:	b083      	sub	sp, #12
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800e840:	bf00      	nop
 800e842:	370c      	adds	r7, #12
 800e844:	46bd      	mov	sp, r7
 800e846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84a:	4770      	bx	lr

0800e84c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e84c:	b480      	push	{r7}
 800e84e:	b083      	sub	sp, #12
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e854:	bf00      	nop
 800e856:	370c      	adds	r7, #12
 800e858:	46bd      	mov	sp, r7
 800e85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85e:	4770      	bx	lr

0800e860 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e860:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800e864:	b08e      	sub	sp, #56	; 0x38
 800e866:	af00      	add	r7, sp, #0
 800e868:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e86a:	2300      	movs	r3, #0
 800e86c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	689a      	ldr	r2, [r3, #8]
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	691b      	ldr	r3, [r3, #16]
 800e878:	431a      	orrs	r2, r3
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	695b      	ldr	r3, [r3, #20]
 800e87e:	431a      	orrs	r2, r3
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	69db      	ldr	r3, [r3, #28]
 800e884:	4313      	orrs	r3, r2
 800e886:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e88c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e88e:	4313      	orrs	r3, r2
 800e890:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	681a      	ldr	r2, [r3, #0]
 800e898:	4bc1      	ldr	r3, [pc, #772]	; (800eba0 <UART_SetConfig+0x340>)
 800e89a:	4013      	ands	r3, r2
 800e89c:	687a      	ldr	r2, [r7, #4]
 800e89e:	6812      	ldr	r2, [r2, #0]
 800e8a0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e8a2:	430b      	orrs	r3, r1
 800e8a4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	685b      	ldr	r3, [r3, #4]
 800e8ac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	68da      	ldr	r2, [r3, #12]
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	430a      	orrs	r2, r1
 800e8ba:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	699b      	ldr	r3, [r3, #24]
 800e8c0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	4ab7      	ldr	r2, [pc, #732]	; (800eba4 <UART_SetConfig+0x344>)
 800e8c8:	4293      	cmp	r3, r2
 800e8ca:	d004      	beq.n	800e8d6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	6a1b      	ldr	r3, [r3, #32]
 800e8d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e8d2:	4313      	orrs	r3, r2
 800e8d4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	689a      	ldr	r2, [r3, #8]
 800e8dc:	4bb2      	ldr	r3, [pc, #712]	; (800eba8 <UART_SetConfig+0x348>)
 800e8de:	4013      	ands	r3, r2
 800e8e0:	687a      	ldr	r2, [r7, #4]
 800e8e2:	6812      	ldr	r2, [r2, #0]
 800e8e4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e8e6:	430b      	orrs	r3, r1
 800e8e8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8f0:	f023 010f 	bic.w	r1, r3, #15
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	430a      	orrs	r2, r1
 800e8fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	4aa9      	ldr	r2, [pc, #676]	; (800ebac <UART_SetConfig+0x34c>)
 800e906:	4293      	cmp	r3, r2
 800e908:	d177      	bne.n	800e9fa <UART_SetConfig+0x19a>
 800e90a:	4ba9      	ldr	r3, [pc, #676]	; (800ebb0 <UART_SetConfig+0x350>)
 800e90c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e90e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e912:	2b28      	cmp	r3, #40	; 0x28
 800e914:	d86c      	bhi.n	800e9f0 <UART_SetConfig+0x190>
 800e916:	a201      	add	r2, pc, #4	; (adr r2, 800e91c <UART_SetConfig+0xbc>)
 800e918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e91c:	0800e9c1 	.word	0x0800e9c1
 800e920:	0800e9f1 	.word	0x0800e9f1
 800e924:	0800e9f1 	.word	0x0800e9f1
 800e928:	0800e9f1 	.word	0x0800e9f1
 800e92c:	0800e9f1 	.word	0x0800e9f1
 800e930:	0800e9f1 	.word	0x0800e9f1
 800e934:	0800e9f1 	.word	0x0800e9f1
 800e938:	0800e9f1 	.word	0x0800e9f1
 800e93c:	0800e9c9 	.word	0x0800e9c9
 800e940:	0800e9f1 	.word	0x0800e9f1
 800e944:	0800e9f1 	.word	0x0800e9f1
 800e948:	0800e9f1 	.word	0x0800e9f1
 800e94c:	0800e9f1 	.word	0x0800e9f1
 800e950:	0800e9f1 	.word	0x0800e9f1
 800e954:	0800e9f1 	.word	0x0800e9f1
 800e958:	0800e9f1 	.word	0x0800e9f1
 800e95c:	0800e9d1 	.word	0x0800e9d1
 800e960:	0800e9f1 	.word	0x0800e9f1
 800e964:	0800e9f1 	.word	0x0800e9f1
 800e968:	0800e9f1 	.word	0x0800e9f1
 800e96c:	0800e9f1 	.word	0x0800e9f1
 800e970:	0800e9f1 	.word	0x0800e9f1
 800e974:	0800e9f1 	.word	0x0800e9f1
 800e978:	0800e9f1 	.word	0x0800e9f1
 800e97c:	0800e9d9 	.word	0x0800e9d9
 800e980:	0800e9f1 	.word	0x0800e9f1
 800e984:	0800e9f1 	.word	0x0800e9f1
 800e988:	0800e9f1 	.word	0x0800e9f1
 800e98c:	0800e9f1 	.word	0x0800e9f1
 800e990:	0800e9f1 	.word	0x0800e9f1
 800e994:	0800e9f1 	.word	0x0800e9f1
 800e998:	0800e9f1 	.word	0x0800e9f1
 800e99c:	0800e9e1 	.word	0x0800e9e1
 800e9a0:	0800e9f1 	.word	0x0800e9f1
 800e9a4:	0800e9f1 	.word	0x0800e9f1
 800e9a8:	0800e9f1 	.word	0x0800e9f1
 800e9ac:	0800e9f1 	.word	0x0800e9f1
 800e9b0:	0800e9f1 	.word	0x0800e9f1
 800e9b4:	0800e9f1 	.word	0x0800e9f1
 800e9b8:	0800e9f1 	.word	0x0800e9f1
 800e9bc:	0800e9e9 	.word	0x0800e9e9
 800e9c0:	2301      	movs	r3, #1
 800e9c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9c6:	e233      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800e9c8:	2304      	movs	r3, #4
 800e9ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9ce:	e22f      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800e9d0:	2308      	movs	r3, #8
 800e9d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9d6:	e22b      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800e9d8:	2310      	movs	r3, #16
 800e9da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9de:	e227      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800e9e0:	2320      	movs	r3, #32
 800e9e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9e6:	e223      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800e9e8:	2340      	movs	r3, #64	; 0x40
 800e9ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9ee:	e21f      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800e9f0:	2380      	movs	r3, #128	; 0x80
 800e9f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9f6:	bf00      	nop
 800e9f8:	e21a      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	4a6d      	ldr	r2, [pc, #436]	; (800ebb4 <UART_SetConfig+0x354>)
 800ea00:	4293      	cmp	r3, r2
 800ea02:	d132      	bne.n	800ea6a <UART_SetConfig+0x20a>
 800ea04:	4b6a      	ldr	r3, [pc, #424]	; (800ebb0 <UART_SetConfig+0x350>)
 800ea06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea08:	f003 0307 	and.w	r3, r3, #7
 800ea0c:	2b05      	cmp	r3, #5
 800ea0e:	d827      	bhi.n	800ea60 <UART_SetConfig+0x200>
 800ea10:	a201      	add	r2, pc, #4	; (adr r2, 800ea18 <UART_SetConfig+0x1b8>)
 800ea12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea16:	bf00      	nop
 800ea18:	0800ea31 	.word	0x0800ea31
 800ea1c:	0800ea39 	.word	0x0800ea39
 800ea20:	0800ea41 	.word	0x0800ea41
 800ea24:	0800ea49 	.word	0x0800ea49
 800ea28:	0800ea51 	.word	0x0800ea51
 800ea2c:	0800ea59 	.word	0x0800ea59
 800ea30:	2300      	movs	r3, #0
 800ea32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea36:	e1fb      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800ea38:	2304      	movs	r3, #4
 800ea3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea3e:	e1f7      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800ea40:	2308      	movs	r3, #8
 800ea42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea46:	e1f3      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800ea48:	2310      	movs	r3, #16
 800ea4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea4e:	e1ef      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800ea50:	2320      	movs	r3, #32
 800ea52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea56:	e1eb      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800ea58:	2340      	movs	r3, #64	; 0x40
 800ea5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea5e:	e1e7      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800ea60:	2380      	movs	r3, #128	; 0x80
 800ea62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea66:	bf00      	nop
 800ea68:	e1e2      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	4a52      	ldr	r2, [pc, #328]	; (800ebb8 <UART_SetConfig+0x358>)
 800ea70:	4293      	cmp	r3, r2
 800ea72:	d132      	bne.n	800eada <UART_SetConfig+0x27a>
 800ea74:	4b4e      	ldr	r3, [pc, #312]	; (800ebb0 <UART_SetConfig+0x350>)
 800ea76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea78:	f003 0307 	and.w	r3, r3, #7
 800ea7c:	2b05      	cmp	r3, #5
 800ea7e:	d827      	bhi.n	800ead0 <UART_SetConfig+0x270>
 800ea80:	a201      	add	r2, pc, #4	; (adr r2, 800ea88 <UART_SetConfig+0x228>)
 800ea82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea86:	bf00      	nop
 800ea88:	0800eaa1 	.word	0x0800eaa1
 800ea8c:	0800eaa9 	.word	0x0800eaa9
 800ea90:	0800eab1 	.word	0x0800eab1
 800ea94:	0800eab9 	.word	0x0800eab9
 800ea98:	0800eac1 	.word	0x0800eac1
 800ea9c:	0800eac9 	.word	0x0800eac9
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eaa6:	e1c3      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800eaa8:	2304      	movs	r3, #4
 800eaaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eaae:	e1bf      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800eab0:	2308      	movs	r3, #8
 800eab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eab6:	e1bb      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800eab8:	2310      	movs	r3, #16
 800eaba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eabe:	e1b7      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800eac0:	2320      	movs	r3, #32
 800eac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eac6:	e1b3      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800eac8:	2340      	movs	r3, #64	; 0x40
 800eaca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eace:	e1af      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800ead0:	2380      	movs	r3, #128	; 0x80
 800ead2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ead6:	bf00      	nop
 800ead8:	e1aa      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	4a37      	ldr	r2, [pc, #220]	; (800ebbc <UART_SetConfig+0x35c>)
 800eae0:	4293      	cmp	r3, r2
 800eae2:	d132      	bne.n	800eb4a <UART_SetConfig+0x2ea>
 800eae4:	4b32      	ldr	r3, [pc, #200]	; (800ebb0 <UART_SetConfig+0x350>)
 800eae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eae8:	f003 0307 	and.w	r3, r3, #7
 800eaec:	2b05      	cmp	r3, #5
 800eaee:	d827      	bhi.n	800eb40 <UART_SetConfig+0x2e0>
 800eaf0:	a201      	add	r2, pc, #4	; (adr r2, 800eaf8 <UART_SetConfig+0x298>)
 800eaf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaf6:	bf00      	nop
 800eaf8:	0800eb11 	.word	0x0800eb11
 800eafc:	0800eb19 	.word	0x0800eb19
 800eb00:	0800eb21 	.word	0x0800eb21
 800eb04:	0800eb29 	.word	0x0800eb29
 800eb08:	0800eb31 	.word	0x0800eb31
 800eb0c:	0800eb39 	.word	0x0800eb39
 800eb10:	2300      	movs	r3, #0
 800eb12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb16:	e18b      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800eb18:	2304      	movs	r3, #4
 800eb1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb1e:	e187      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800eb20:	2308      	movs	r3, #8
 800eb22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb26:	e183      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800eb28:	2310      	movs	r3, #16
 800eb2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb2e:	e17f      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800eb30:	2320      	movs	r3, #32
 800eb32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb36:	e17b      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800eb38:	2340      	movs	r3, #64	; 0x40
 800eb3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb3e:	e177      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800eb40:	2380      	movs	r3, #128	; 0x80
 800eb42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb46:	bf00      	nop
 800eb48:	e172      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	4a1c      	ldr	r2, [pc, #112]	; (800ebc0 <UART_SetConfig+0x360>)
 800eb50:	4293      	cmp	r3, r2
 800eb52:	d144      	bne.n	800ebde <UART_SetConfig+0x37e>
 800eb54:	4b16      	ldr	r3, [pc, #88]	; (800ebb0 <UART_SetConfig+0x350>)
 800eb56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb58:	f003 0307 	and.w	r3, r3, #7
 800eb5c:	2b05      	cmp	r3, #5
 800eb5e:	d839      	bhi.n	800ebd4 <UART_SetConfig+0x374>
 800eb60:	a201      	add	r2, pc, #4	; (adr r2, 800eb68 <UART_SetConfig+0x308>)
 800eb62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb66:	bf00      	nop
 800eb68:	0800eb81 	.word	0x0800eb81
 800eb6c:	0800eb89 	.word	0x0800eb89
 800eb70:	0800eb91 	.word	0x0800eb91
 800eb74:	0800eb99 	.word	0x0800eb99
 800eb78:	0800ebc5 	.word	0x0800ebc5
 800eb7c:	0800ebcd 	.word	0x0800ebcd
 800eb80:	2300      	movs	r3, #0
 800eb82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb86:	e153      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800eb88:	2304      	movs	r3, #4
 800eb8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb8e:	e14f      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800eb90:	2308      	movs	r3, #8
 800eb92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb96:	e14b      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800eb98:	2310      	movs	r3, #16
 800eb9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb9e:	e147      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800eba0:	cfff69f3 	.word	0xcfff69f3
 800eba4:	58000c00 	.word	0x58000c00
 800eba8:	11fff4ff 	.word	0x11fff4ff
 800ebac:	40011000 	.word	0x40011000
 800ebb0:	58024400 	.word	0x58024400
 800ebb4:	40004400 	.word	0x40004400
 800ebb8:	40004800 	.word	0x40004800
 800ebbc:	40004c00 	.word	0x40004c00
 800ebc0:	40005000 	.word	0x40005000
 800ebc4:	2320      	movs	r3, #32
 800ebc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebca:	e131      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800ebcc:	2340      	movs	r3, #64	; 0x40
 800ebce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebd2:	e12d      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800ebd4:	2380      	movs	r3, #128	; 0x80
 800ebd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebda:	bf00      	nop
 800ebdc:	e128      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	4ab6      	ldr	r2, [pc, #728]	; (800eebc <UART_SetConfig+0x65c>)
 800ebe4:	4293      	cmp	r3, r2
 800ebe6:	d178      	bne.n	800ecda <UART_SetConfig+0x47a>
 800ebe8:	4bb5      	ldr	r3, [pc, #724]	; (800eec0 <UART_SetConfig+0x660>)
 800ebea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ebf0:	2b28      	cmp	r3, #40	; 0x28
 800ebf2:	d86d      	bhi.n	800ecd0 <UART_SetConfig+0x470>
 800ebf4:	a201      	add	r2, pc, #4	; (adr r2, 800ebfc <UART_SetConfig+0x39c>)
 800ebf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebfa:	bf00      	nop
 800ebfc:	0800eca1 	.word	0x0800eca1
 800ec00:	0800ecd1 	.word	0x0800ecd1
 800ec04:	0800ecd1 	.word	0x0800ecd1
 800ec08:	0800ecd1 	.word	0x0800ecd1
 800ec0c:	0800ecd1 	.word	0x0800ecd1
 800ec10:	0800ecd1 	.word	0x0800ecd1
 800ec14:	0800ecd1 	.word	0x0800ecd1
 800ec18:	0800ecd1 	.word	0x0800ecd1
 800ec1c:	0800eca9 	.word	0x0800eca9
 800ec20:	0800ecd1 	.word	0x0800ecd1
 800ec24:	0800ecd1 	.word	0x0800ecd1
 800ec28:	0800ecd1 	.word	0x0800ecd1
 800ec2c:	0800ecd1 	.word	0x0800ecd1
 800ec30:	0800ecd1 	.word	0x0800ecd1
 800ec34:	0800ecd1 	.word	0x0800ecd1
 800ec38:	0800ecd1 	.word	0x0800ecd1
 800ec3c:	0800ecb1 	.word	0x0800ecb1
 800ec40:	0800ecd1 	.word	0x0800ecd1
 800ec44:	0800ecd1 	.word	0x0800ecd1
 800ec48:	0800ecd1 	.word	0x0800ecd1
 800ec4c:	0800ecd1 	.word	0x0800ecd1
 800ec50:	0800ecd1 	.word	0x0800ecd1
 800ec54:	0800ecd1 	.word	0x0800ecd1
 800ec58:	0800ecd1 	.word	0x0800ecd1
 800ec5c:	0800ecb9 	.word	0x0800ecb9
 800ec60:	0800ecd1 	.word	0x0800ecd1
 800ec64:	0800ecd1 	.word	0x0800ecd1
 800ec68:	0800ecd1 	.word	0x0800ecd1
 800ec6c:	0800ecd1 	.word	0x0800ecd1
 800ec70:	0800ecd1 	.word	0x0800ecd1
 800ec74:	0800ecd1 	.word	0x0800ecd1
 800ec78:	0800ecd1 	.word	0x0800ecd1
 800ec7c:	0800ecc1 	.word	0x0800ecc1
 800ec80:	0800ecd1 	.word	0x0800ecd1
 800ec84:	0800ecd1 	.word	0x0800ecd1
 800ec88:	0800ecd1 	.word	0x0800ecd1
 800ec8c:	0800ecd1 	.word	0x0800ecd1
 800ec90:	0800ecd1 	.word	0x0800ecd1
 800ec94:	0800ecd1 	.word	0x0800ecd1
 800ec98:	0800ecd1 	.word	0x0800ecd1
 800ec9c:	0800ecc9 	.word	0x0800ecc9
 800eca0:	2301      	movs	r3, #1
 800eca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eca6:	e0c3      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800eca8:	2304      	movs	r3, #4
 800ecaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ecae:	e0bf      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800ecb0:	2308      	movs	r3, #8
 800ecb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ecb6:	e0bb      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800ecb8:	2310      	movs	r3, #16
 800ecba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ecbe:	e0b7      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800ecc0:	2320      	movs	r3, #32
 800ecc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ecc6:	e0b3      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800ecc8:	2340      	movs	r3, #64	; 0x40
 800ecca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ecce:	e0af      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800ecd0:	2380      	movs	r3, #128	; 0x80
 800ecd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ecd6:	bf00      	nop
 800ecd8:	e0aa      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	4a79      	ldr	r2, [pc, #484]	; (800eec4 <UART_SetConfig+0x664>)
 800ece0:	4293      	cmp	r3, r2
 800ece2:	d132      	bne.n	800ed4a <UART_SetConfig+0x4ea>
 800ece4:	4b76      	ldr	r3, [pc, #472]	; (800eec0 <UART_SetConfig+0x660>)
 800ece6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ece8:	f003 0307 	and.w	r3, r3, #7
 800ecec:	2b05      	cmp	r3, #5
 800ecee:	d827      	bhi.n	800ed40 <UART_SetConfig+0x4e0>
 800ecf0:	a201      	add	r2, pc, #4	; (adr r2, 800ecf8 <UART_SetConfig+0x498>)
 800ecf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecf6:	bf00      	nop
 800ecf8:	0800ed11 	.word	0x0800ed11
 800ecfc:	0800ed19 	.word	0x0800ed19
 800ed00:	0800ed21 	.word	0x0800ed21
 800ed04:	0800ed29 	.word	0x0800ed29
 800ed08:	0800ed31 	.word	0x0800ed31
 800ed0c:	0800ed39 	.word	0x0800ed39
 800ed10:	2300      	movs	r3, #0
 800ed12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed16:	e08b      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800ed18:	2304      	movs	r3, #4
 800ed1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed1e:	e087      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800ed20:	2308      	movs	r3, #8
 800ed22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed26:	e083      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800ed28:	2310      	movs	r3, #16
 800ed2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed2e:	e07f      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800ed30:	2320      	movs	r3, #32
 800ed32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed36:	e07b      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800ed38:	2340      	movs	r3, #64	; 0x40
 800ed3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed3e:	e077      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800ed40:	2380      	movs	r3, #128	; 0x80
 800ed42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed46:	bf00      	nop
 800ed48:	e072      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	4a5e      	ldr	r2, [pc, #376]	; (800eec8 <UART_SetConfig+0x668>)
 800ed50:	4293      	cmp	r3, r2
 800ed52:	d132      	bne.n	800edba <UART_SetConfig+0x55a>
 800ed54:	4b5a      	ldr	r3, [pc, #360]	; (800eec0 <UART_SetConfig+0x660>)
 800ed56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed58:	f003 0307 	and.w	r3, r3, #7
 800ed5c:	2b05      	cmp	r3, #5
 800ed5e:	d827      	bhi.n	800edb0 <UART_SetConfig+0x550>
 800ed60:	a201      	add	r2, pc, #4	; (adr r2, 800ed68 <UART_SetConfig+0x508>)
 800ed62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed66:	bf00      	nop
 800ed68:	0800ed81 	.word	0x0800ed81
 800ed6c:	0800ed89 	.word	0x0800ed89
 800ed70:	0800ed91 	.word	0x0800ed91
 800ed74:	0800ed99 	.word	0x0800ed99
 800ed78:	0800eda1 	.word	0x0800eda1
 800ed7c:	0800eda9 	.word	0x0800eda9
 800ed80:	2300      	movs	r3, #0
 800ed82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed86:	e053      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800ed88:	2304      	movs	r3, #4
 800ed8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed8e:	e04f      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800ed90:	2308      	movs	r3, #8
 800ed92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed96:	e04b      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800ed98:	2310      	movs	r3, #16
 800ed9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed9e:	e047      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800eda0:	2320      	movs	r3, #32
 800eda2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eda6:	e043      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800eda8:	2340      	movs	r3, #64	; 0x40
 800edaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edae:	e03f      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800edb0:	2380      	movs	r3, #128	; 0x80
 800edb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edb6:	bf00      	nop
 800edb8:	e03a      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	4a43      	ldr	r2, [pc, #268]	; (800eecc <UART_SetConfig+0x66c>)
 800edc0:	4293      	cmp	r3, r2
 800edc2:	d132      	bne.n	800ee2a <UART_SetConfig+0x5ca>
 800edc4:	4b3e      	ldr	r3, [pc, #248]	; (800eec0 <UART_SetConfig+0x660>)
 800edc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800edc8:	f003 0307 	and.w	r3, r3, #7
 800edcc:	2b05      	cmp	r3, #5
 800edce:	d827      	bhi.n	800ee20 <UART_SetConfig+0x5c0>
 800edd0:	a201      	add	r2, pc, #4	; (adr r2, 800edd8 <UART_SetConfig+0x578>)
 800edd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edd6:	bf00      	nop
 800edd8:	0800edf1 	.word	0x0800edf1
 800eddc:	0800edf9 	.word	0x0800edf9
 800ede0:	0800ee01 	.word	0x0800ee01
 800ede4:	0800ee09 	.word	0x0800ee09
 800ede8:	0800ee11 	.word	0x0800ee11
 800edec:	0800ee19 	.word	0x0800ee19
 800edf0:	2302      	movs	r3, #2
 800edf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edf6:	e01b      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800edf8:	2304      	movs	r3, #4
 800edfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edfe:	e017      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800ee00:	2308      	movs	r3, #8
 800ee02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee06:	e013      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800ee08:	2310      	movs	r3, #16
 800ee0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee0e:	e00f      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800ee10:	2320      	movs	r3, #32
 800ee12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee16:	e00b      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800ee18:	2340      	movs	r3, #64	; 0x40
 800ee1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee1e:	e007      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800ee20:	2380      	movs	r3, #128	; 0x80
 800ee22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee26:	bf00      	nop
 800ee28:	e002      	b.n	800ee30 <UART_SetConfig+0x5d0>
 800ee2a:	2380      	movs	r3, #128	; 0x80
 800ee2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	4a25      	ldr	r2, [pc, #148]	; (800eecc <UART_SetConfig+0x66c>)
 800ee36:	4293      	cmp	r3, r2
 800ee38:	f040 80b8 	bne.w	800efac <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ee3c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ee40:	2b08      	cmp	r3, #8
 800ee42:	d019      	beq.n	800ee78 <UART_SetConfig+0x618>
 800ee44:	2b08      	cmp	r3, #8
 800ee46:	dc04      	bgt.n	800ee52 <UART_SetConfig+0x5f2>
 800ee48:	2b02      	cmp	r3, #2
 800ee4a:	d009      	beq.n	800ee60 <UART_SetConfig+0x600>
 800ee4c:	2b04      	cmp	r3, #4
 800ee4e:	d00b      	beq.n	800ee68 <UART_SetConfig+0x608>
 800ee50:	e042      	b.n	800eed8 <UART_SetConfig+0x678>
 800ee52:	2b20      	cmp	r3, #32
 800ee54:	d02b      	beq.n	800eeae <UART_SetConfig+0x64e>
 800ee56:	2b40      	cmp	r3, #64	; 0x40
 800ee58:	d02c      	beq.n	800eeb4 <UART_SetConfig+0x654>
 800ee5a:	2b10      	cmp	r3, #16
 800ee5c:	d014      	beq.n	800ee88 <UART_SetConfig+0x628>
 800ee5e:	e03b      	b.n	800eed8 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ee60:	f7fb fb96 	bl	800a590 <HAL_RCCEx_GetD3PCLK1Freq>
 800ee64:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ee66:	e03d      	b.n	800eee4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ee68:	f107 0314 	add.w	r3, r7, #20
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	f7fb fba5 	bl	800a5bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ee72:	69bb      	ldr	r3, [r7, #24]
 800ee74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ee76:	e035      	b.n	800eee4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ee78:	f107 0308 	add.w	r3, r7, #8
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f7fb fce9 	bl	800a854 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ee86:	e02d      	b.n	800eee4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ee88:	4b0d      	ldr	r3, [pc, #52]	; (800eec0 <UART_SetConfig+0x660>)
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	f003 0320 	and.w	r3, r3, #32
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d009      	beq.n	800eea8 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ee94:	4b0a      	ldr	r3, [pc, #40]	; (800eec0 <UART_SetConfig+0x660>)
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	08db      	lsrs	r3, r3, #3
 800ee9a:	f003 0303 	and.w	r3, r3, #3
 800ee9e:	4a0c      	ldr	r2, [pc, #48]	; (800eed0 <UART_SetConfig+0x670>)
 800eea0:	fa22 f303 	lsr.w	r3, r2, r3
 800eea4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800eea6:	e01d      	b.n	800eee4 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800eea8:	4b09      	ldr	r3, [pc, #36]	; (800eed0 <UART_SetConfig+0x670>)
 800eeaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800eeac:	e01a      	b.n	800eee4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800eeae:	4b09      	ldr	r3, [pc, #36]	; (800eed4 <UART_SetConfig+0x674>)
 800eeb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800eeb2:	e017      	b.n	800eee4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eeb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eeb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800eeba:	e013      	b.n	800eee4 <UART_SetConfig+0x684>
 800eebc:	40011400 	.word	0x40011400
 800eec0:	58024400 	.word	0x58024400
 800eec4:	40007800 	.word	0x40007800
 800eec8:	40007c00 	.word	0x40007c00
 800eecc:	58000c00 	.word	0x58000c00
 800eed0:	03d09000 	.word	0x03d09000
 800eed4:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800eed8:	2300      	movs	r3, #0
 800eeda:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800eedc:	2301      	movs	r3, #1
 800eede:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800eee2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800eee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	f000 824d 	beq.w	800f386 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eef0:	4aad      	ldr	r2, [pc, #692]	; (800f1a8 <UART_SetConfig+0x948>)
 800eef2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eef6:	461a      	mov	r2, r3
 800eef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eefa:	fbb3 f3f2 	udiv	r3, r3, r2
 800eefe:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	685a      	ldr	r2, [r3, #4]
 800ef04:	4613      	mov	r3, r2
 800ef06:	005b      	lsls	r3, r3, #1
 800ef08:	4413      	add	r3, r2
 800ef0a:	6a3a      	ldr	r2, [r7, #32]
 800ef0c:	429a      	cmp	r2, r3
 800ef0e:	d305      	bcc.n	800ef1c <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	685b      	ldr	r3, [r3, #4]
 800ef14:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ef16:	6a3a      	ldr	r2, [r7, #32]
 800ef18:	429a      	cmp	r2, r3
 800ef1a:	d903      	bls.n	800ef24 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800ef1c:	2301      	movs	r3, #1
 800ef1e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ef22:	e230      	b.n	800f386 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ef24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef26:	4618      	mov	r0, r3
 800ef28:	f04f 0100 	mov.w	r1, #0
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef30:	4a9d      	ldr	r2, [pc, #628]	; (800f1a8 <UART_SetConfig+0x948>)
 800ef32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ef36:	b29b      	uxth	r3, r3
 800ef38:	f04f 0400 	mov.w	r4, #0
 800ef3c:	461a      	mov	r2, r3
 800ef3e:	4623      	mov	r3, r4
 800ef40:	f7f1 fa26 	bl	8000390 <__aeabi_uldivmod>
 800ef44:	4603      	mov	r3, r0
 800ef46:	460c      	mov	r4, r1
 800ef48:	4619      	mov	r1, r3
 800ef4a:	4622      	mov	r2, r4
 800ef4c:	f04f 0300 	mov.w	r3, #0
 800ef50:	f04f 0400 	mov.w	r4, #0
 800ef54:	0214      	lsls	r4, r2, #8
 800ef56:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800ef5a:	020b      	lsls	r3, r1, #8
 800ef5c:	687a      	ldr	r2, [r7, #4]
 800ef5e:	6852      	ldr	r2, [r2, #4]
 800ef60:	0852      	lsrs	r2, r2, #1
 800ef62:	4611      	mov	r1, r2
 800ef64:	f04f 0200 	mov.w	r2, #0
 800ef68:	eb13 0b01 	adds.w	fp, r3, r1
 800ef6c:	eb44 0c02 	adc.w	ip, r4, r2
 800ef70:	4658      	mov	r0, fp
 800ef72:	4661      	mov	r1, ip
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	685b      	ldr	r3, [r3, #4]
 800ef78:	f04f 0400 	mov.w	r4, #0
 800ef7c:	461a      	mov	r2, r3
 800ef7e:	4623      	mov	r3, r4
 800ef80:	f7f1 fa06 	bl	8000390 <__aeabi_uldivmod>
 800ef84:	4603      	mov	r3, r0
 800ef86:	460c      	mov	r4, r1
 800ef88:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ef8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ef90:	d308      	bcc.n	800efa4 <UART_SetConfig+0x744>
 800ef92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ef98:	d204      	bcs.n	800efa4 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800efa0:	60da      	str	r2, [r3, #12]
 800efa2:	e1f0      	b.n	800f386 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800efa4:	2301      	movs	r3, #1
 800efa6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800efaa:	e1ec      	b.n	800f386 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	69db      	ldr	r3, [r3, #28]
 800efb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800efb4:	f040 8100 	bne.w	800f1b8 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800efb8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800efbc:	2b40      	cmp	r3, #64	; 0x40
 800efbe:	f200 80b7 	bhi.w	800f130 <UART_SetConfig+0x8d0>
 800efc2:	a201      	add	r2, pc, #4	; (adr r2, 800efc8 <UART_SetConfig+0x768>)
 800efc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efc8:	0800f0cd 	.word	0x0800f0cd
 800efcc:	0800f0d5 	.word	0x0800f0d5
 800efd0:	0800f131 	.word	0x0800f131
 800efd4:	0800f131 	.word	0x0800f131
 800efd8:	0800f0dd 	.word	0x0800f0dd
 800efdc:	0800f131 	.word	0x0800f131
 800efe0:	0800f131 	.word	0x0800f131
 800efe4:	0800f131 	.word	0x0800f131
 800efe8:	0800f0ed 	.word	0x0800f0ed
 800efec:	0800f131 	.word	0x0800f131
 800eff0:	0800f131 	.word	0x0800f131
 800eff4:	0800f131 	.word	0x0800f131
 800eff8:	0800f131 	.word	0x0800f131
 800effc:	0800f131 	.word	0x0800f131
 800f000:	0800f131 	.word	0x0800f131
 800f004:	0800f131 	.word	0x0800f131
 800f008:	0800f0fd 	.word	0x0800f0fd
 800f00c:	0800f131 	.word	0x0800f131
 800f010:	0800f131 	.word	0x0800f131
 800f014:	0800f131 	.word	0x0800f131
 800f018:	0800f131 	.word	0x0800f131
 800f01c:	0800f131 	.word	0x0800f131
 800f020:	0800f131 	.word	0x0800f131
 800f024:	0800f131 	.word	0x0800f131
 800f028:	0800f131 	.word	0x0800f131
 800f02c:	0800f131 	.word	0x0800f131
 800f030:	0800f131 	.word	0x0800f131
 800f034:	0800f131 	.word	0x0800f131
 800f038:	0800f131 	.word	0x0800f131
 800f03c:	0800f131 	.word	0x0800f131
 800f040:	0800f131 	.word	0x0800f131
 800f044:	0800f131 	.word	0x0800f131
 800f048:	0800f123 	.word	0x0800f123
 800f04c:	0800f131 	.word	0x0800f131
 800f050:	0800f131 	.word	0x0800f131
 800f054:	0800f131 	.word	0x0800f131
 800f058:	0800f131 	.word	0x0800f131
 800f05c:	0800f131 	.word	0x0800f131
 800f060:	0800f131 	.word	0x0800f131
 800f064:	0800f131 	.word	0x0800f131
 800f068:	0800f131 	.word	0x0800f131
 800f06c:	0800f131 	.word	0x0800f131
 800f070:	0800f131 	.word	0x0800f131
 800f074:	0800f131 	.word	0x0800f131
 800f078:	0800f131 	.word	0x0800f131
 800f07c:	0800f131 	.word	0x0800f131
 800f080:	0800f131 	.word	0x0800f131
 800f084:	0800f131 	.word	0x0800f131
 800f088:	0800f131 	.word	0x0800f131
 800f08c:	0800f131 	.word	0x0800f131
 800f090:	0800f131 	.word	0x0800f131
 800f094:	0800f131 	.word	0x0800f131
 800f098:	0800f131 	.word	0x0800f131
 800f09c:	0800f131 	.word	0x0800f131
 800f0a0:	0800f131 	.word	0x0800f131
 800f0a4:	0800f131 	.word	0x0800f131
 800f0a8:	0800f131 	.word	0x0800f131
 800f0ac:	0800f131 	.word	0x0800f131
 800f0b0:	0800f131 	.word	0x0800f131
 800f0b4:	0800f131 	.word	0x0800f131
 800f0b8:	0800f131 	.word	0x0800f131
 800f0bc:	0800f131 	.word	0x0800f131
 800f0c0:	0800f131 	.word	0x0800f131
 800f0c4:	0800f131 	.word	0x0800f131
 800f0c8:	0800f129 	.word	0x0800f129
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f0cc:	f7fa f8b2 	bl	8009234 <HAL_RCC_GetPCLK1Freq>
 800f0d0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f0d2:	e033      	b.n	800f13c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f0d4:	f7fa f8c4 	bl	8009260 <HAL_RCC_GetPCLK2Freq>
 800f0d8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f0da:	e02f      	b.n	800f13c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f0dc:	f107 0314 	add.w	r3, r7, #20
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	f7fb fa6b 	bl	800a5bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f0e6:	69bb      	ldr	r3, [r7, #24]
 800f0e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f0ea:	e027      	b.n	800f13c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f0ec:	f107 0308 	add.w	r3, r7, #8
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	f7fb fbaf 	bl	800a854 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f0fa:	e01f      	b.n	800f13c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f0fc:	4b2b      	ldr	r3, [pc, #172]	; (800f1ac <UART_SetConfig+0x94c>)
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	f003 0320 	and.w	r3, r3, #32
 800f104:	2b00      	cmp	r3, #0
 800f106:	d009      	beq.n	800f11c <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f108:	4b28      	ldr	r3, [pc, #160]	; (800f1ac <UART_SetConfig+0x94c>)
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	08db      	lsrs	r3, r3, #3
 800f10e:	f003 0303 	and.w	r3, r3, #3
 800f112:	4a27      	ldr	r2, [pc, #156]	; (800f1b0 <UART_SetConfig+0x950>)
 800f114:	fa22 f303 	lsr.w	r3, r2, r3
 800f118:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f11a:	e00f      	b.n	800f13c <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800f11c:	4b24      	ldr	r3, [pc, #144]	; (800f1b0 <UART_SetConfig+0x950>)
 800f11e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f120:	e00c      	b.n	800f13c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f122:	4b24      	ldr	r3, [pc, #144]	; (800f1b4 <UART_SetConfig+0x954>)
 800f124:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f126:	e009      	b.n	800f13c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f128:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f12c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f12e:	e005      	b.n	800f13c <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800f130:	2300      	movs	r3, #0
 800f132:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f134:	2301      	movs	r3, #1
 800f136:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f13a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f13e:	2b00      	cmp	r3, #0
 800f140:	f000 8121 	beq.w	800f386 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f148:	4a17      	ldr	r2, [pc, #92]	; (800f1a8 <UART_SetConfig+0x948>)
 800f14a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f14e:	461a      	mov	r2, r3
 800f150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f152:	fbb3 f3f2 	udiv	r3, r3, r2
 800f156:	005a      	lsls	r2, r3, #1
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	685b      	ldr	r3, [r3, #4]
 800f15c:	085b      	lsrs	r3, r3, #1
 800f15e:	441a      	add	r2, r3
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	685b      	ldr	r3, [r3, #4]
 800f164:	fbb2 f3f3 	udiv	r3, r2, r3
 800f168:	b29b      	uxth	r3, r3
 800f16a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f16e:	2b0f      	cmp	r3, #15
 800f170:	d916      	bls.n	800f1a0 <UART_SetConfig+0x940>
 800f172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f178:	d212      	bcs.n	800f1a0 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f17c:	b29b      	uxth	r3, r3
 800f17e:	f023 030f 	bic.w	r3, r3, #15
 800f182:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f186:	085b      	lsrs	r3, r3, #1
 800f188:	b29b      	uxth	r3, r3
 800f18a:	f003 0307 	and.w	r3, r3, #7
 800f18e:	b29a      	uxth	r2, r3
 800f190:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f192:	4313      	orrs	r3, r2
 800f194:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f19c:	60da      	str	r2, [r3, #12]
 800f19e:	e0f2      	b.n	800f386 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800f1a0:	2301      	movs	r3, #1
 800f1a2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f1a6:	e0ee      	b.n	800f386 <UART_SetConfig+0xb26>
 800f1a8:	08019930 	.word	0x08019930
 800f1ac:	58024400 	.word	0x58024400
 800f1b0:	03d09000 	.word	0x03d09000
 800f1b4:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800f1b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f1bc:	2b40      	cmp	r3, #64	; 0x40
 800f1be:	f200 80b7 	bhi.w	800f330 <UART_SetConfig+0xad0>
 800f1c2:	a201      	add	r2, pc, #4	; (adr r2, 800f1c8 <UART_SetConfig+0x968>)
 800f1c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1c8:	0800f2cd 	.word	0x0800f2cd
 800f1cc:	0800f2d5 	.word	0x0800f2d5
 800f1d0:	0800f331 	.word	0x0800f331
 800f1d4:	0800f331 	.word	0x0800f331
 800f1d8:	0800f2dd 	.word	0x0800f2dd
 800f1dc:	0800f331 	.word	0x0800f331
 800f1e0:	0800f331 	.word	0x0800f331
 800f1e4:	0800f331 	.word	0x0800f331
 800f1e8:	0800f2ed 	.word	0x0800f2ed
 800f1ec:	0800f331 	.word	0x0800f331
 800f1f0:	0800f331 	.word	0x0800f331
 800f1f4:	0800f331 	.word	0x0800f331
 800f1f8:	0800f331 	.word	0x0800f331
 800f1fc:	0800f331 	.word	0x0800f331
 800f200:	0800f331 	.word	0x0800f331
 800f204:	0800f331 	.word	0x0800f331
 800f208:	0800f2fd 	.word	0x0800f2fd
 800f20c:	0800f331 	.word	0x0800f331
 800f210:	0800f331 	.word	0x0800f331
 800f214:	0800f331 	.word	0x0800f331
 800f218:	0800f331 	.word	0x0800f331
 800f21c:	0800f331 	.word	0x0800f331
 800f220:	0800f331 	.word	0x0800f331
 800f224:	0800f331 	.word	0x0800f331
 800f228:	0800f331 	.word	0x0800f331
 800f22c:	0800f331 	.word	0x0800f331
 800f230:	0800f331 	.word	0x0800f331
 800f234:	0800f331 	.word	0x0800f331
 800f238:	0800f331 	.word	0x0800f331
 800f23c:	0800f331 	.word	0x0800f331
 800f240:	0800f331 	.word	0x0800f331
 800f244:	0800f331 	.word	0x0800f331
 800f248:	0800f323 	.word	0x0800f323
 800f24c:	0800f331 	.word	0x0800f331
 800f250:	0800f331 	.word	0x0800f331
 800f254:	0800f331 	.word	0x0800f331
 800f258:	0800f331 	.word	0x0800f331
 800f25c:	0800f331 	.word	0x0800f331
 800f260:	0800f331 	.word	0x0800f331
 800f264:	0800f331 	.word	0x0800f331
 800f268:	0800f331 	.word	0x0800f331
 800f26c:	0800f331 	.word	0x0800f331
 800f270:	0800f331 	.word	0x0800f331
 800f274:	0800f331 	.word	0x0800f331
 800f278:	0800f331 	.word	0x0800f331
 800f27c:	0800f331 	.word	0x0800f331
 800f280:	0800f331 	.word	0x0800f331
 800f284:	0800f331 	.word	0x0800f331
 800f288:	0800f331 	.word	0x0800f331
 800f28c:	0800f331 	.word	0x0800f331
 800f290:	0800f331 	.word	0x0800f331
 800f294:	0800f331 	.word	0x0800f331
 800f298:	0800f331 	.word	0x0800f331
 800f29c:	0800f331 	.word	0x0800f331
 800f2a0:	0800f331 	.word	0x0800f331
 800f2a4:	0800f331 	.word	0x0800f331
 800f2a8:	0800f331 	.word	0x0800f331
 800f2ac:	0800f331 	.word	0x0800f331
 800f2b0:	0800f331 	.word	0x0800f331
 800f2b4:	0800f331 	.word	0x0800f331
 800f2b8:	0800f331 	.word	0x0800f331
 800f2bc:	0800f331 	.word	0x0800f331
 800f2c0:	0800f331 	.word	0x0800f331
 800f2c4:	0800f331 	.word	0x0800f331
 800f2c8:	0800f329 	.word	0x0800f329
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f2cc:	f7f9 ffb2 	bl	8009234 <HAL_RCC_GetPCLK1Freq>
 800f2d0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f2d2:	e033      	b.n	800f33c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f2d4:	f7f9 ffc4 	bl	8009260 <HAL_RCC_GetPCLK2Freq>
 800f2d8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f2da:	e02f      	b.n	800f33c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f2dc:	f107 0314 	add.w	r3, r7, #20
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	f7fb f96b 	bl	800a5bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f2e6:	69bb      	ldr	r3, [r7, #24]
 800f2e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f2ea:	e027      	b.n	800f33c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f2ec:	f107 0308 	add.w	r3, r7, #8
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	f7fb faaf 	bl	800a854 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f2fa:	e01f      	b.n	800f33c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f2fc:	4b2c      	ldr	r3, [pc, #176]	; (800f3b0 <UART_SetConfig+0xb50>)
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	f003 0320 	and.w	r3, r3, #32
 800f304:	2b00      	cmp	r3, #0
 800f306:	d009      	beq.n	800f31c <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f308:	4b29      	ldr	r3, [pc, #164]	; (800f3b0 <UART_SetConfig+0xb50>)
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	08db      	lsrs	r3, r3, #3
 800f30e:	f003 0303 	and.w	r3, r3, #3
 800f312:	4a28      	ldr	r2, [pc, #160]	; (800f3b4 <UART_SetConfig+0xb54>)
 800f314:	fa22 f303 	lsr.w	r3, r2, r3
 800f318:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f31a:	e00f      	b.n	800f33c <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800f31c:	4b25      	ldr	r3, [pc, #148]	; (800f3b4 <UART_SetConfig+0xb54>)
 800f31e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f320:	e00c      	b.n	800f33c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f322:	4b25      	ldr	r3, [pc, #148]	; (800f3b8 <UART_SetConfig+0xb58>)
 800f324:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f326:	e009      	b.n	800f33c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f328:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f32c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f32e:	e005      	b.n	800f33c <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800f330:	2300      	movs	r3, #0
 800f332:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f334:	2301      	movs	r3, #1
 800f336:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f33a:	bf00      	nop
    }

    if (pclk != 0U)
 800f33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d021      	beq.n	800f386 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f346:	4a1d      	ldr	r2, [pc, #116]	; (800f3bc <UART_SetConfig+0xb5c>)
 800f348:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f34c:	461a      	mov	r2, r3
 800f34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f350:	fbb3 f2f2 	udiv	r2, r3, r2
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	685b      	ldr	r3, [r3, #4]
 800f358:	085b      	lsrs	r3, r3, #1
 800f35a:	441a      	add	r2, r3
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	685b      	ldr	r3, [r3, #4]
 800f360:	fbb2 f3f3 	udiv	r3, r2, r3
 800f364:	b29b      	uxth	r3, r3
 800f366:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f36a:	2b0f      	cmp	r3, #15
 800f36c:	d908      	bls.n	800f380 <UART_SetConfig+0xb20>
 800f36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f374:	d204      	bcs.n	800f380 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f37c:	60da      	str	r2, [r3, #12]
 800f37e:	e002      	b.n	800f386 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800f380:	2301      	movs	r3, #1
 800f382:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	2201      	movs	r2, #1
 800f38a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	2201      	movs	r2, #1
 800f392:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	2200      	movs	r2, #0
 800f39a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	2200      	movs	r2, #0
 800f3a0:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800f3a2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	3738      	adds	r7, #56	; 0x38
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800f3b0:	58024400 	.word	0x58024400
 800f3b4:	03d09000 	.word	0x03d09000
 800f3b8:	003d0900 	.word	0x003d0900
 800f3bc:	08019930 	.word	0x08019930

0800f3c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f3c0:	b480      	push	{r7}
 800f3c2:	b083      	sub	sp, #12
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3cc:	f003 0301 	and.w	r3, r3, #1
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d00a      	beq.n	800f3ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	685b      	ldr	r3, [r3, #4]
 800f3da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	430a      	orrs	r2, r1
 800f3e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3ee:	f003 0302 	and.w	r3, r3, #2
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d00a      	beq.n	800f40c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	685b      	ldr	r3, [r3, #4]
 800f3fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	430a      	orrs	r2, r1
 800f40a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f410:	f003 0304 	and.w	r3, r3, #4
 800f414:	2b00      	cmp	r3, #0
 800f416:	d00a      	beq.n	800f42e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	685b      	ldr	r3, [r3, #4]
 800f41e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	430a      	orrs	r2, r1
 800f42c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f432:	f003 0308 	and.w	r3, r3, #8
 800f436:	2b00      	cmp	r3, #0
 800f438:	d00a      	beq.n	800f450 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	685b      	ldr	r3, [r3, #4]
 800f440:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	430a      	orrs	r2, r1
 800f44e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f454:	f003 0310 	and.w	r3, r3, #16
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d00a      	beq.n	800f472 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	689b      	ldr	r3, [r3, #8]
 800f462:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	430a      	orrs	r2, r1
 800f470:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f476:	f003 0320 	and.w	r3, r3, #32
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d00a      	beq.n	800f494 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	689b      	ldr	r3, [r3, #8]
 800f484:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	430a      	orrs	r2, r1
 800f492:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d01a      	beq.n	800f4d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	685b      	ldr	r3, [r3, #4]
 800f4a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	430a      	orrs	r2, r1
 800f4b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f4be:	d10a      	bne.n	800f4d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	685b      	ldr	r3, [r3, #4]
 800f4c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	430a      	orrs	r2, r1
 800f4d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d00a      	beq.n	800f4f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	685b      	ldr	r3, [r3, #4]
 800f4e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	430a      	orrs	r2, r1
 800f4f6:	605a      	str	r2, [r3, #4]
  }
}
 800f4f8:	bf00      	nop
 800f4fa:	370c      	adds	r7, #12
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f502:	4770      	bx	lr

0800f504 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b086      	sub	sp, #24
 800f508:	af02      	add	r7, sp, #8
 800f50a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	2200      	movs	r2, #0
 800f510:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800f514:	f7f3 fe4e 	bl	80031b4 <HAL_GetTick>
 800f518:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	f003 0308 	and.w	r3, r3, #8
 800f524:	2b08      	cmp	r3, #8
 800f526:	d10e      	bne.n	800f546 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f528:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f52c:	9300      	str	r3, [sp, #0]
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	2200      	movs	r2, #0
 800f532:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f536:	6878      	ldr	r0, [r7, #4]
 800f538:	f000 f82c 	bl	800f594 <UART_WaitOnFlagUntilTimeout>
 800f53c:	4603      	mov	r3, r0
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d001      	beq.n	800f546 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f542:	2303      	movs	r3, #3
 800f544:	e022      	b.n	800f58c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	f003 0304 	and.w	r3, r3, #4
 800f550:	2b04      	cmp	r3, #4
 800f552:	d10e      	bne.n	800f572 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f554:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f558:	9300      	str	r3, [sp, #0]
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	2200      	movs	r2, #0
 800f55e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f562:	6878      	ldr	r0, [r7, #4]
 800f564:	f000 f816 	bl	800f594 <UART_WaitOnFlagUntilTimeout>
 800f568:	4603      	mov	r3, r0
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d001      	beq.n	800f572 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f56e:	2303      	movs	r3, #3
 800f570:	e00c      	b.n	800f58c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	2220      	movs	r2, #32
 800f576:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	2220      	movs	r2, #32
 800f57e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	2200      	movs	r2, #0
 800f586:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800f58a:	2300      	movs	r3, #0
}
 800f58c:	4618      	mov	r0, r3
 800f58e:	3710      	adds	r7, #16
 800f590:	46bd      	mov	sp, r7
 800f592:	bd80      	pop	{r7, pc}

0800f594 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b084      	sub	sp, #16
 800f598:	af00      	add	r7, sp, #0
 800f59a:	60f8      	str	r0, [r7, #12]
 800f59c:	60b9      	str	r1, [r7, #8]
 800f59e:	603b      	str	r3, [r7, #0]
 800f5a0:	4613      	mov	r3, r2
 800f5a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f5a4:	e062      	b.n	800f66c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f5a6:	69bb      	ldr	r3, [r7, #24]
 800f5a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5ac:	d05e      	beq.n	800f66c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f5ae:	f7f3 fe01 	bl	80031b4 <HAL_GetTick>
 800f5b2:	4602      	mov	r2, r0
 800f5b4:	683b      	ldr	r3, [r7, #0]
 800f5b6:	1ad3      	subs	r3, r2, r3
 800f5b8:	69ba      	ldr	r2, [r7, #24]
 800f5ba:	429a      	cmp	r2, r3
 800f5bc:	d302      	bcc.n	800f5c4 <UART_WaitOnFlagUntilTimeout+0x30>
 800f5be:	69bb      	ldr	r3, [r7, #24]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d11d      	bne.n	800f600 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	681a      	ldr	r2, [r3, #0]
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f5d2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	689a      	ldr	r2, [r3, #8]
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	f022 0201 	bic.w	r2, r2, #1
 800f5e2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	2220      	movs	r2, #32
 800f5e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	2220      	movs	r2, #32
 800f5f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800f5fc:	2303      	movs	r3, #3
 800f5fe:	e045      	b.n	800f68c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	f003 0304 	and.w	r3, r3, #4
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d02e      	beq.n	800f66c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	69db      	ldr	r3, [r3, #28]
 800f614:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f618:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f61c:	d126      	bne.n	800f66c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f626:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	681a      	ldr	r2, [r3, #0]
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f636:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	689a      	ldr	r2, [r3, #8]
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	f022 0201 	bic.w	r2, r2, #1
 800f646:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	2220      	movs	r2, #32
 800f64c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	2220      	movs	r2, #32
 800f654:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	2220      	movs	r2, #32
 800f65c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	2200      	movs	r2, #0
 800f664:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800f668:	2303      	movs	r3, #3
 800f66a:	e00f      	b.n	800f68c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	69da      	ldr	r2, [r3, #28]
 800f672:	68bb      	ldr	r3, [r7, #8]
 800f674:	4013      	ands	r3, r2
 800f676:	68ba      	ldr	r2, [r7, #8]
 800f678:	429a      	cmp	r2, r3
 800f67a:	bf0c      	ite	eq
 800f67c:	2301      	moveq	r3, #1
 800f67e:	2300      	movne	r3, #0
 800f680:	b2db      	uxtb	r3, r3
 800f682:	461a      	mov	r2, r3
 800f684:	79fb      	ldrb	r3, [r7, #7]
 800f686:	429a      	cmp	r2, r3
 800f688:	d08d      	beq.n	800f5a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f68a:	2300      	movs	r3, #0
}
 800f68c:	4618      	mov	r0, r3
 800f68e:	3710      	adds	r7, #16
 800f690:	46bd      	mov	sp, r7
 800f692:	bd80      	pop	{r7, pc}

0800f694 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f694:	b480      	push	{r7}
 800f696:	b083      	sub	sp, #12
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	681a      	ldr	r2, [r3, #0]
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800f6aa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	689a      	ldr	r2, [r3, #8]
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800f6ba:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	2220      	movs	r2, #32
 800f6c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800f6c4:	bf00      	nop
 800f6c6:	370c      	adds	r7, #12
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ce:	4770      	bx	lr

0800f6d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f6d0:	b480      	push	{r7}
 800f6d2:	b083      	sub	sp, #12
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	681a      	ldr	r2, [r3, #0]
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f6e6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	6899      	ldr	r1, [r3, #8]
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	681a      	ldr	r2, [r3, #0]
 800f6f2:	4b08      	ldr	r3, [pc, #32]	; (800f714 <UART_EndRxTransfer+0x44>)
 800f6f4:	400b      	ands	r3, r1
 800f6f6:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	2220      	movs	r2, #32
 800f6fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	2200      	movs	r2, #0
 800f704:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800f706:	bf00      	nop
 800f708:	370c      	adds	r7, #12
 800f70a:	46bd      	mov	sp, r7
 800f70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f710:	4770      	bx	lr
 800f712:	bf00      	nop
 800f714:	effffffe 	.word	0xeffffffe

0800f718 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f718:	b580      	push	{r7, lr}
 800f71a:	b084      	sub	sp, #16
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f724:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	69db      	ldr	r3, [r3, #28]
 800f72a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f72e:	d01f      	beq.n	800f770 <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	2200      	movs	r2, #0
 800f734:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	681a      	ldr	r2, [r3, #0]
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f746:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	689a      	ldr	r2, [r3, #8]
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	f022 0201 	bic.w	r2, r2, #1
 800f756:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	689a      	ldr	r2, [r3, #8]
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f766:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	2220      	movs	r2, #32
 800f76c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800f770:	68f8      	ldr	r0, [r7, #12]
 800f772:	f7ff f861 	bl	800e838 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f776:	bf00      	nop
 800f778:	3710      	adds	r7, #16
 800f77a:	46bd      	mov	sp, r7
 800f77c:	bd80      	pop	{r7, pc}

0800f77e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f77e:	b580      	push	{r7, lr}
 800f780:	b084      	sub	sp, #16
 800f782:	af00      	add	r7, sp, #0
 800f784:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f78a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800f78c:	68f8      	ldr	r0, [r7, #12]
 800f78e:	f7f1 f8b3 	bl	80008f8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f792:	bf00      	nop
 800f794:	3710      	adds	r7, #16
 800f796:	46bd      	mov	sp, r7
 800f798:	bd80      	pop	{r7, pc}

0800f79a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f79a:	b580      	push	{r7, lr}
 800f79c:	b086      	sub	sp, #24
 800f79e:	af00      	add	r7, sp, #0
 800f7a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7a6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f7a8:	697b      	ldr	r3, [r7, #20]
 800f7aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f7ae:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f7b0:	697b      	ldr	r3, [r7, #20]
 800f7b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f7b6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f7b8:	697b      	ldr	r3, [r7, #20]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	689b      	ldr	r3, [r3, #8]
 800f7be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f7c2:	2b80      	cmp	r3, #128	; 0x80
 800f7c4:	d109      	bne.n	800f7da <UART_DMAError+0x40>
 800f7c6:	693b      	ldr	r3, [r7, #16]
 800f7c8:	2b21      	cmp	r3, #33	; 0x21
 800f7ca:	d106      	bne.n	800f7da <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f7cc:	697b      	ldr	r3, [r7, #20]
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800f7d4:	6978      	ldr	r0, [r7, #20]
 800f7d6:	f7ff ff5d 	bl	800f694 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f7da:	697b      	ldr	r3, [r7, #20]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	689b      	ldr	r3, [r3, #8]
 800f7e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7e4:	2b40      	cmp	r3, #64	; 0x40
 800f7e6:	d109      	bne.n	800f7fc <UART_DMAError+0x62>
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	2b22      	cmp	r3, #34	; 0x22
 800f7ec:	d106      	bne.n	800f7fc <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f7ee:	697b      	ldr	r3, [r7, #20]
 800f7f0:	2200      	movs	r2, #0
 800f7f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800f7f6:	6978      	ldr	r0, [r7, #20]
 800f7f8:	f7ff ff6a 	bl	800f6d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f7fc:	697b      	ldr	r3, [r7, #20]
 800f7fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f802:	f043 0210 	orr.w	r2, r3, #16
 800f806:	697b      	ldr	r3, [r7, #20]
 800f808:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f80c:	6978      	ldr	r0, [r7, #20]
 800f80e:	f7ff f81d 	bl	800e84c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f812:	bf00      	nop
 800f814:	3718      	adds	r7, #24
 800f816:	46bd      	mov	sp, r7
 800f818:	bd80      	pop	{r7, pc}

0800f81a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f81a:	b480      	push	{r7}
 800f81c:	b085      	sub	sp, #20
 800f81e:	af00      	add	r7, sp, #0
 800f820:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800f828:	2b01      	cmp	r3, #1
 800f82a:	d101      	bne.n	800f830 <HAL_UARTEx_DisableFifoMode+0x16>
 800f82c:	2302      	movs	r3, #2
 800f82e:	e027      	b.n	800f880 <HAL_UARTEx_DisableFifoMode+0x66>
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	2201      	movs	r2, #1
 800f834:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	2224      	movs	r2, #36	; 0x24
 800f83c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	681a      	ldr	r2, [r3, #0]
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	f022 0201 	bic.w	r2, r2, #1
 800f856:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f85e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	2200      	movs	r2, #0
 800f864:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	68fa      	ldr	r2, [r7, #12]
 800f86c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	2220      	movs	r2, #32
 800f872:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	2200      	movs	r2, #0
 800f87a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800f87e:	2300      	movs	r3, #0
}
 800f880:	4618      	mov	r0, r3
 800f882:	3714      	adds	r7, #20
 800f884:	46bd      	mov	sp, r7
 800f886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f88a:	4770      	bx	lr

0800f88c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b084      	sub	sp, #16
 800f890:	af00      	add	r7, sp, #0
 800f892:	6078      	str	r0, [r7, #4]
 800f894:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800f89c:	2b01      	cmp	r3, #1
 800f89e:	d101      	bne.n	800f8a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f8a0:	2302      	movs	r3, #2
 800f8a2:	e02d      	b.n	800f900 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	2201      	movs	r2, #1
 800f8a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	2224      	movs	r2, #36	; 0x24
 800f8b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	681a      	ldr	r2, [r3, #0]
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	f022 0201 	bic.w	r2, r2, #1
 800f8ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	689b      	ldr	r3, [r3, #8]
 800f8d2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	683a      	ldr	r2, [r7, #0]
 800f8dc:	430a      	orrs	r2, r1
 800f8de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f8e0:	6878      	ldr	r0, [r7, #4]
 800f8e2:	f000 f84f 	bl	800f984 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	68fa      	ldr	r2, [r7, #12]
 800f8ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	2220      	movs	r2, #32
 800f8f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800f8fe:	2300      	movs	r3, #0
}
 800f900:	4618      	mov	r0, r3
 800f902:	3710      	adds	r7, #16
 800f904:	46bd      	mov	sp, r7
 800f906:	bd80      	pop	{r7, pc}

0800f908 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	b084      	sub	sp, #16
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
 800f910:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800f918:	2b01      	cmp	r3, #1
 800f91a:	d101      	bne.n	800f920 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f91c:	2302      	movs	r3, #2
 800f91e:	e02d      	b.n	800f97c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	2201      	movs	r2, #1
 800f924:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	2224      	movs	r2, #36	; 0x24
 800f92c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	681a      	ldr	r2, [r3, #0]
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	f022 0201 	bic.w	r2, r2, #1
 800f946:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	689b      	ldr	r3, [r3, #8]
 800f94e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	683a      	ldr	r2, [r7, #0]
 800f958:	430a      	orrs	r2, r1
 800f95a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f95c:	6878      	ldr	r0, [r7, #4]
 800f95e:	f000 f811 	bl	800f984 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	68fa      	ldr	r2, [r7, #12]
 800f968:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	2220      	movs	r2, #32
 800f96e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	2200      	movs	r2, #0
 800f976:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800f97a:	2300      	movs	r3, #0
}
 800f97c:	4618      	mov	r0, r3
 800f97e:	3710      	adds	r7, #16
 800f980:	46bd      	mov	sp, r7
 800f982:	bd80      	pop	{r7, pc}

0800f984 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f984:	b480      	push	{r7}
 800f986:	b089      	sub	sp, #36	; 0x24
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800f98c:	4a2f      	ldr	r2, [pc, #188]	; (800fa4c <UARTEx_SetNbDataToProcess+0xc8>)
 800f98e:	f107 0314 	add.w	r3, r7, #20
 800f992:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f996:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800f99a:	4a2d      	ldr	r2, [pc, #180]	; (800fa50 <UARTEx_SetNbDataToProcess+0xcc>)
 800f99c:	f107 030c 	add.w	r3, r7, #12
 800f9a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f9a4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d108      	bne.n	800f9c2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	2201      	movs	r2, #1
 800f9b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	2201      	movs	r2, #1
 800f9bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f9c0:	e03d      	b.n	800fa3e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f9c2:	2310      	movs	r3, #16
 800f9c4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f9c6:	2310      	movs	r3, #16
 800f9c8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	689b      	ldr	r3, [r3, #8]
 800f9d0:	0e5b      	lsrs	r3, r3, #25
 800f9d2:	b2db      	uxtb	r3, r3
 800f9d4:	f003 0307 	and.w	r3, r3, #7
 800f9d8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	689b      	ldr	r3, [r3, #8]
 800f9e0:	0f5b      	lsrs	r3, r3, #29
 800f9e2:	b2db      	uxtb	r3, r3
 800f9e4:	f003 0307 	and.w	r3, r3, #7
 800f9e8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800f9ea:	7fbb      	ldrb	r3, [r7, #30]
 800f9ec:	7f3a      	ldrb	r2, [r7, #28]
 800f9ee:	f107 0120 	add.w	r1, r7, #32
 800f9f2:	440a      	add	r2, r1
 800f9f4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800f9f8:	fb02 f303 	mul.w	r3, r2, r3
 800f9fc:	7f3a      	ldrb	r2, [r7, #28]
 800f9fe:	f107 0120 	add.w	r1, r7, #32
 800fa02:	440a      	add	r2, r1
 800fa04:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800fa08:	fb93 f3f2 	sdiv	r3, r3, r2
 800fa0c:	b29a      	uxth	r2, r3
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800fa14:	7ffb      	ldrb	r3, [r7, #31]
 800fa16:	7f7a      	ldrb	r2, [r7, #29]
 800fa18:	f107 0120 	add.w	r1, r7, #32
 800fa1c:	440a      	add	r2, r1
 800fa1e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800fa22:	fb02 f303 	mul.w	r3, r2, r3
 800fa26:	7f7a      	ldrb	r2, [r7, #29]
 800fa28:	f107 0120 	add.w	r1, r7, #32
 800fa2c:	440a      	add	r2, r1
 800fa2e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800fa32:	fb93 f3f2 	sdiv	r3, r3, r2
 800fa36:	b29a      	uxth	r2, r3
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800fa3e:	bf00      	nop
 800fa40:	3724      	adds	r7, #36	; 0x24
 800fa42:	46bd      	mov	sp, r7
 800fa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa48:	4770      	bx	lr
 800fa4a:	bf00      	nop
 800fa4c:	08019870 	.word	0x08019870
 800fa50:	08019878 	.word	0x08019878

0800fa54 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800fa54:	b084      	sub	sp, #16
 800fa56:	b480      	push	{r7}
 800fa58:	b085      	sub	sp, #20
 800fa5a:	af00      	add	r7, sp, #0
 800fa5c:	6078      	str	r0, [r7, #4]
 800fa5e:	f107 001c 	add.w	r0, r7, #28
 800fa62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800fa66:	2300      	movs	r3, #0
 800fa68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800fa6a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800fa6c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800fa6e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800fa70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800fa72:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800fa74:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800fa76:	431a      	orrs	r2, r3
             Init.ClockDiv
 800fa78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800fa7a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800fa7c:	68fa      	ldr	r2, [r7, #12]
 800fa7e:	4313      	orrs	r3, r2
 800fa80:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	685a      	ldr	r2, [r3, #4]
 800fa86:	4b07      	ldr	r3, [pc, #28]	; (800faa4 <SDMMC_Init+0x50>)
 800fa88:	4013      	ands	r3, r2
 800fa8a:	68fa      	ldr	r2, [r7, #12]
 800fa8c:	431a      	orrs	r2, r3
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800fa92:	2300      	movs	r3, #0
}
 800fa94:	4618      	mov	r0, r3
 800fa96:	3714      	adds	r7, #20
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9e:	b004      	add	sp, #16
 800faa0:	4770      	bx	lr
 800faa2:	bf00      	nop
 800faa4:	ffc02c00 	.word	0xffc02c00

0800faa8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800faa8:	b480      	push	{r7}
 800faaa:	b083      	sub	sp, #12
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800fab6:	4618      	mov	r0, r3
 800fab8:	370c      	adds	r7, #12
 800faba:	46bd      	mov	sp, r7
 800fabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac0:	4770      	bx	lr

0800fac2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800fac2:	b480      	push	{r7}
 800fac4:	b083      	sub	sp, #12
 800fac6:	af00      	add	r7, sp, #0
 800fac8:	6078      	str	r0, [r7, #4]
 800faca:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800facc:	683b      	ldr	r3, [r7, #0]
 800face:	681a      	ldr	r2, [r3, #0]
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fad6:	2300      	movs	r3, #0
}
 800fad8:	4618      	mov	r0, r3
 800fada:	370c      	adds	r7, #12
 800fadc:	46bd      	mov	sp, r7
 800fade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae2:	4770      	bx	lr

0800fae4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800fae4:	b480      	push	{r7}
 800fae6:	b083      	sub	sp, #12
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	f043 0203 	orr.w	r2, r3, #3
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800faf8:	2300      	movs	r3, #0
}
 800fafa:	4618      	mov	r0, r3
 800fafc:	370c      	adds	r7, #12
 800fafe:	46bd      	mov	sp, r7
 800fb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb04:	4770      	bx	lr

0800fb06 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800fb06:	b480      	push	{r7}
 800fb08:	b083      	sub	sp, #12
 800fb0a:	af00      	add	r7, sp, #0
 800fb0c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	f003 0303 	and.w	r3, r3, #3
}
 800fb16:	4618      	mov	r0, r3
 800fb18:	370c      	adds	r7, #12
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb20:	4770      	bx	lr
	...

0800fb24 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800fb24:	b480      	push	{r7}
 800fb26:	b085      	sub	sp, #20
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
 800fb2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800fb2e:	2300      	movs	r3, #0
 800fb30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800fb32:	683b      	ldr	r3, [r7, #0]
 800fb34:	681a      	ldr	r2, [r3, #0]
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800fb3a:	683b      	ldr	r3, [r7, #0]
 800fb3c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800fb3e:	683b      	ldr	r3, [r7, #0]
 800fb40:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800fb42:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800fb44:	683b      	ldr	r3, [r7, #0]
 800fb46:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800fb48:	431a      	orrs	r2, r3
                       Command->CPSM);
 800fb4a:	683b      	ldr	r3, [r7, #0]
 800fb4c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800fb4e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800fb50:	68fa      	ldr	r2, [r7, #12]
 800fb52:	4313      	orrs	r3, r2
 800fb54:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	68da      	ldr	r2, [r3, #12]
 800fb5a:	4b06      	ldr	r3, [pc, #24]	; (800fb74 <SDMMC_SendCommand+0x50>)
 800fb5c:	4013      	ands	r3, r2
 800fb5e:	68fa      	ldr	r2, [r7, #12]
 800fb60:	431a      	orrs	r2, r3
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800fb66:	2300      	movs	r3, #0
}
 800fb68:	4618      	mov	r0, r3
 800fb6a:	3714      	adds	r7, #20
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb72:	4770      	bx	lr
 800fb74:	fffee0c0 	.word	0xfffee0c0

0800fb78 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800fb78:	b480      	push	{r7}
 800fb7a:	b083      	sub	sp, #12
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	691b      	ldr	r3, [r3, #16]
 800fb84:	b2db      	uxtb	r3, r3
}
 800fb86:	4618      	mov	r0, r3
 800fb88:	370c      	adds	r7, #12
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb90:	4770      	bx	lr

0800fb92 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800fb92:	b480      	push	{r7}
 800fb94:	b085      	sub	sp, #20
 800fb96:	af00      	add	r7, sp, #0
 800fb98:	6078      	str	r0, [r7, #4]
 800fb9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	3314      	adds	r3, #20
 800fba0:	461a      	mov	r2, r3
 800fba2:	683b      	ldr	r3, [r7, #0]
 800fba4:	4413      	add	r3, r2
 800fba6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	681b      	ldr	r3, [r3, #0]
}
 800fbac:	4618      	mov	r0, r3
 800fbae:	3714      	adds	r7, #20
 800fbb0:	46bd      	mov	sp, r7
 800fbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb6:	4770      	bx	lr

0800fbb8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800fbb8:	b480      	push	{r7}
 800fbba:	b085      	sub	sp, #20
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
 800fbc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800fbc6:	683b      	ldr	r3, [r7, #0]
 800fbc8:	681a      	ldr	r2, [r3, #0]
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800fbce:	683b      	ldr	r3, [r7, #0]
 800fbd0:	685a      	ldr	r2, [r3, #4]
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800fbd6:	683b      	ldr	r3, [r7, #0]
 800fbd8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800fbda:	683b      	ldr	r3, [r7, #0]
 800fbdc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800fbde:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800fbe0:	683b      	ldr	r3, [r7, #0]
 800fbe2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800fbe4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800fbe6:	683b      	ldr	r3, [r7, #0]
 800fbe8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800fbea:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800fbec:	68fa      	ldr	r2, [r7, #12]
 800fbee:	4313      	orrs	r3, r2
 800fbf0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbf6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	431a      	orrs	r2, r3
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800fc02:	2300      	movs	r3, #0

}
 800fc04:	4618      	mov	r0, r3
 800fc06:	3714      	adds	r7, #20
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0e:	4770      	bx	lr

0800fc10 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b088      	sub	sp, #32
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
 800fc18:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800fc1a:	683b      	ldr	r3, [r7, #0]
 800fc1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800fc1e:	2310      	movs	r3, #16
 800fc20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fc22:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fc26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fc28:	2300      	movs	r3, #0
 800fc2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fc2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fc30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fc32:	f107 0308 	add.w	r3, r7, #8
 800fc36:	4619      	mov	r1, r3
 800fc38:	6878      	ldr	r0, [r7, #4]
 800fc3a:	f7ff ff73 	bl	800fb24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800fc3e:	f241 3288 	movw	r2, #5000	; 0x1388
 800fc42:	2110      	movs	r1, #16
 800fc44:	6878      	ldr	r0, [r7, #4]
 800fc46:	f000 faaf 	bl	80101a8 <SDMMC_GetCmdResp1>
 800fc4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fc4c:	69fb      	ldr	r3, [r7, #28]
}
 800fc4e:	4618      	mov	r0, r3
 800fc50:	3720      	adds	r7, #32
 800fc52:	46bd      	mov	sp, r7
 800fc54:	bd80      	pop	{r7, pc}

0800fc56 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800fc56:	b580      	push	{r7, lr}
 800fc58:	b088      	sub	sp, #32
 800fc5a:	af00      	add	r7, sp, #0
 800fc5c:	6078      	str	r0, [r7, #4]
 800fc5e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800fc60:	683b      	ldr	r3, [r7, #0]
 800fc62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800fc64:	2311      	movs	r3, #17
 800fc66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fc68:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fc6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fc6e:	2300      	movs	r3, #0
 800fc70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fc72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fc76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fc78:	f107 0308 	add.w	r3, r7, #8
 800fc7c:	4619      	mov	r1, r3
 800fc7e:	6878      	ldr	r0, [r7, #4]
 800fc80:	f7ff ff50 	bl	800fb24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800fc84:	f241 3288 	movw	r2, #5000	; 0x1388
 800fc88:	2111      	movs	r1, #17
 800fc8a:	6878      	ldr	r0, [r7, #4]
 800fc8c:	f000 fa8c 	bl	80101a8 <SDMMC_GetCmdResp1>
 800fc90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fc92:	69fb      	ldr	r3, [r7, #28]
}
 800fc94:	4618      	mov	r0, r3
 800fc96:	3720      	adds	r7, #32
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	bd80      	pop	{r7, pc}

0800fc9c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b088      	sub	sp, #32
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
 800fca4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800fca6:	683b      	ldr	r3, [r7, #0]
 800fca8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800fcaa:	2312      	movs	r3, #18
 800fcac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fcae:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fcb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fcb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fcbc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fcbe:	f107 0308 	add.w	r3, r7, #8
 800fcc2:	4619      	mov	r1, r3
 800fcc4:	6878      	ldr	r0, [r7, #4]
 800fcc6:	f7ff ff2d 	bl	800fb24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800fcca:	f241 3288 	movw	r2, #5000	; 0x1388
 800fcce:	2112      	movs	r1, #18
 800fcd0:	6878      	ldr	r0, [r7, #4]
 800fcd2:	f000 fa69 	bl	80101a8 <SDMMC_GetCmdResp1>
 800fcd6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fcd8:	69fb      	ldr	r3, [r7, #28]
}
 800fcda:	4618      	mov	r0, r3
 800fcdc:	3720      	adds	r7, #32
 800fcde:	46bd      	mov	sp, r7
 800fce0:	bd80      	pop	{r7, pc}

0800fce2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800fce2:	b580      	push	{r7, lr}
 800fce4:	b088      	sub	sp, #32
 800fce6:	af00      	add	r7, sp, #0
 800fce8:	6078      	str	r0, [r7, #4]
 800fcea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800fcec:	683b      	ldr	r3, [r7, #0]
 800fcee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800fcf0:	2318      	movs	r3, #24
 800fcf2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fcf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fcf8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fcfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fd02:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fd04:	f107 0308 	add.w	r3, r7, #8
 800fd08:	4619      	mov	r1, r3
 800fd0a:	6878      	ldr	r0, [r7, #4]
 800fd0c:	f7ff ff0a 	bl	800fb24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800fd10:	f241 3288 	movw	r2, #5000	; 0x1388
 800fd14:	2118      	movs	r1, #24
 800fd16:	6878      	ldr	r0, [r7, #4]
 800fd18:	f000 fa46 	bl	80101a8 <SDMMC_GetCmdResp1>
 800fd1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fd1e:	69fb      	ldr	r3, [r7, #28]
}
 800fd20:	4618      	mov	r0, r3
 800fd22:	3720      	adds	r7, #32
 800fd24:	46bd      	mov	sp, r7
 800fd26:	bd80      	pop	{r7, pc}

0800fd28 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b088      	sub	sp, #32
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
 800fd30:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800fd32:	683b      	ldr	r3, [r7, #0]
 800fd34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800fd36:	2319      	movs	r3, #25
 800fd38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fd3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fd3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fd40:	2300      	movs	r3, #0
 800fd42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fd44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fd48:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fd4a:	f107 0308 	add.w	r3, r7, #8
 800fd4e:	4619      	mov	r1, r3
 800fd50:	6878      	ldr	r0, [r7, #4]
 800fd52:	f7ff fee7 	bl	800fb24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800fd56:	f241 3288 	movw	r2, #5000	; 0x1388
 800fd5a:	2119      	movs	r1, #25
 800fd5c:	6878      	ldr	r0, [r7, #4]
 800fd5e:	f000 fa23 	bl	80101a8 <SDMMC_GetCmdResp1>
 800fd62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fd64:	69fb      	ldr	r3, [r7, #28]
}
 800fd66:	4618      	mov	r0, r3
 800fd68:	3720      	adds	r7, #32
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	bd80      	pop	{r7, pc}
	...

0800fd70 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b088      	sub	sp, #32
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800fd78:	2300      	movs	r3, #0
 800fd7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800fd7c:	230c      	movs	r3, #12
 800fd7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fd80:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fd84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fd86:	2300      	movs	r3, #0
 800fd88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fd8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fd8e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	68db      	ldr	r3, [r3, #12]
 800fd94:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	68db      	ldr	r3, [r3, #12]
 800fda0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fda8:	f107 0308 	add.w	r3, r7, #8
 800fdac:	4619      	mov	r1, r3
 800fdae:	6878      	ldr	r0, [r7, #4]
 800fdb0:	f7ff feb8 	bl	800fb24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800fdb4:	4a0b      	ldr	r2, [pc, #44]	; (800fde4 <SDMMC_CmdStopTransfer+0x74>)
 800fdb6:	210c      	movs	r1, #12
 800fdb8:	6878      	ldr	r0, [r7, #4]
 800fdba:	f000 f9f5 	bl	80101a8 <SDMMC_GetCmdResp1>
 800fdbe:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	68db      	ldr	r3, [r3, #12]
 800fdc4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800fdcc:	69fb      	ldr	r3, [r7, #28]
 800fdce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fdd2:	d101      	bne.n	800fdd8 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800fdd4:	2300      	movs	r3, #0
 800fdd6:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800fdd8:	69fb      	ldr	r3, [r7, #28]
}
 800fdda:	4618      	mov	r0, r3
 800fddc:	3720      	adds	r7, #32
 800fdde:	46bd      	mov	sp, r7
 800fde0:	bd80      	pop	{r7, pc}
 800fde2:	bf00      	nop
 800fde4:	05f5e100 	.word	0x05f5e100

0800fde8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b08a      	sub	sp, #40	; 0x28
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	60f8      	str	r0, [r7, #12]
 800fdf0:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800fdf4:	683b      	ldr	r3, [r7, #0]
 800fdf6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800fdf8:	2307      	movs	r3, #7
 800fdfa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fdfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fe00:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fe02:	2300      	movs	r3, #0
 800fe04:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fe06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fe0a:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fe0c:	f107 0310 	add.w	r3, r7, #16
 800fe10:	4619      	mov	r1, r3
 800fe12:	68f8      	ldr	r0, [r7, #12]
 800fe14:	f7ff fe86 	bl	800fb24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800fe18:	f241 3288 	movw	r2, #5000	; 0x1388
 800fe1c:	2107      	movs	r1, #7
 800fe1e:	68f8      	ldr	r0, [r7, #12]
 800fe20:	f000 f9c2 	bl	80101a8 <SDMMC_GetCmdResp1>
 800fe24:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800fe26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fe28:	4618      	mov	r0, r3
 800fe2a:	3728      	adds	r7, #40	; 0x28
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	bd80      	pop	{r7, pc}

0800fe30 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b088      	sub	sp, #32
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800fe38:	2300      	movs	r3, #0
 800fe3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800fe40:	2300      	movs	r3, #0
 800fe42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fe44:	2300      	movs	r3, #0
 800fe46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fe48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fe4c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fe4e:	f107 0308 	add.w	r3, r7, #8
 800fe52:	4619      	mov	r1, r3
 800fe54:	6878      	ldr	r0, [r7, #4]
 800fe56:	f7ff fe65 	bl	800fb24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800fe5a:	6878      	ldr	r0, [r7, #4]
 800fe5c:	f000 f976 	bl	801014c <SDMMC_GetCmdError>
 800fe60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fe62:	69fb      	ldr	r3, [r7, #28]
}
 800fe64:	4618      	mov	r0, r3
 800fe66:	3720      	adds	r7, #32
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	bd80      	pop	{r7, pc}

0800fe6c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b088      	sub	sp, #32
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800fe74:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800fe78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800fe7a:	2308      	movs	r3, #8
 800fe7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fe7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fe82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fe84:	2300      	movs	r3, #0
 800fe86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fe88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fe8c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fe8e:	f107 0308 	add.w	r3, r7, #8
 800fe92:	4619      	mov	r1, r3
 800fe94:	6878      	ldr	r0, [r7, #4]
 800fe96:	f7ff fe45 	bl	800fb24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800fe9a:	6878      	ldr	r0, [r7, #4]
 800fe9c:	f000 fb78 	bl	8010590 <SDMMC_GetCmdResp7>
 800fea0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fea2:	69fb      	ldr	r3, [r7, #28]
}
 800fea4:	4618      	mov	r0, r3
 800fea6:	3720      	adds	r7, #32
 800fea8:	46bd      	mov	sp, r7
 800feaa:	bd80      	pop	{r7, pc}

0800feac <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800feac:	b580      	push	{r7, lr}
 800feae:	b088      	sub	sp, #32
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	6078      	str	r0, [r7, #4]
 800feb4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800feb6:	683b      	ldr	r3, [r7, #0]
 800feb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800feba:	2337      	movs	r3, #55	; 0x37
 800febc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800febe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fec2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fec4:	2300      	movs	r3, #0
 800fec6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fec8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fecc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fece:	f107 0308 	add.w	r3, r7, #8
 800fed2:	4619      	mov	r1, r3
 800fed4:	6878      	ldr	r0, [r7, #4]
 800fed6:	f7ff fe25 	bl	800fb24 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800feda:	f241 3288 	movw	r2, #5000	; 0x1388
 800fede:	2137      	movs	r1, #55	; 0x37
 800fee0:	6878      	ldr	r0, [r7, #4]
 800fee2:	f000 f961 	bl	80101a8 <SDMMC_GetCmdResp1>
 800fee6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fee8:	69fb      	ldr	r3, [r7, #28]
}
 800feea:	4618      	mov	r0, r3
 800feec:	3720      	adds	r7, #32
 800feee:	46bd      	mov	sp, r7
 800fef0:	bd80      	pop	{r7, pc}

0800fef2 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fef2:	b580      	push	{r7, lr}
 800fef4:	b088      	sub	sp, #32
 800fef6:	af00      	add	r7, sp, #0
 800fef8:	6078      	str	r0, [r7, #4]
 800fefa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ff00:	2329      	movs	r3, #41	; 0x29
 800ff02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ff04:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ff08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ff0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ff12:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ff14:	f107 0308 	add.w	r3, r7, #8
 800ff18:	4619      	mov	r1, r3
 800ff1a:	6878      	ldr	r0, [r7, #4]
 800ff1c:	f7ff fe02 	bl	800fb24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ff20:	6878      	ldr	r0, [r7, #4]
 800ff22:	f000 fa7d 	bl	8010420 <SDMMC_GetCmdResp3>
 800ff26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ff28:	69fb      	ldr	r3, [r7, #28]
}
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	3720      	adds	r7, #32
 800ff2e:	46bd      	mov	sp, r7
 800ff30:	bd80      	pop	{r7, pc}

0800ff32 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800ff32:	b580      	push	{r7, lr}
 800ff34:	b088      	sub	sp, #32
 800ff36:	af00      	add	r7, sp, #0
 800ff38:	6078      	str	r0, [r7, #4]
 800ff3a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ff40:	2306      	movs	r3, #6
 800ff42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ff44:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ff48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ff4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ff52:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ff54:	f107 0308 	add.w	r3, r7, #8
 800ff58:	4619      	mov	r1, r3
 800ff5a:	6878      	ldr	r0, [r7, #4]
 800ff5c:	f7ff fde2 	bl	800fb24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800ff60:	f241 3288 	movw	r2, #5000	; 0x1388
 800ff64:	2106      	movs	r1, #6
 800ff66:	6878      	ldr	r0, [r7, #4]
 800ff68:	f000 f91e 	bl	80101a8 <SDMMC_GetCmdResp1>
 800ff6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ff6e:	69fb      	ldr	r3, [r7, #28]
}
 800ff70:	4618      	mov	r0, r3
 800ff72:	3720      	adds	r7, #32
 800ff74:	46bd      	mov	sp, r7
 800ff76:	bd80      	pop	{r7, pc}

0800ff78 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b088      	sub	sp, #32
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ff80:	2300      	movs	r3, #0
 800ff82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ff84:	2333      	movs	r3, #51	; 0x33
 800ff86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ff88:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ff8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ff8e:	2300      	movs	r3, #0
 800ff90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ff92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ff96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ff98:	f107 0308 	add.w	r3, r7, #8
 800ff9c:	4619      	mov	r1, r3
 800ff9e:	6878      	ldr	r0, [r7, #4]
 800ffa0:	f7ff fdc0 	bl	800fb24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800ffa4:	f241 3288 	movw	r2, #5000	; 0x1388
 800ffa8:	2133      	movs	r1, #51	; 0x33
 800ffaa:	6878      	ldr	r0, [r7, #4]
 800ffac:	f000 f8fc 	bl	80101a8 <SDMMC_GetCmdResp1>
 800ffb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ffb2:	69fb      	ldr	r3, [r7, #28]
}
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	3720      	adds	r7, #32
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	bd80      	pop	{r7, pc}

0800ffbc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b088      	sub	sp, #32
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ffc8:	2302      	movs	r3, #2
 800ffca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ffcc:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ffd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ffd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ffda:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ffdc:	f107 0308 	add.w	r3, r7, #8
 800ffe0:	4619      	mov	r1, r3
 800ffe2:	6878      	ldr	r0, [r7, #4]
 800ffe4:	f7ff fd9e 	bl	800fb24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ffe8:	6878      	ldr	r0, [r7, #4]
 800ffea:	f000 f9cf 	bl	801038c <SDMMC_GetCmdResp2>
 800ffee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fff0:	69fb      	ldr	r3, [r7, #28]
}
 800fff2:	4618      	mov	r0, r3
 800fff4:	3720      	adds	r7, #32
 800fff6:	46bd      	mov	sp, r7
 800fff8:	bd80      	pop	{r7, pc}

0800fffa <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fffa:	b580      	push	{r7, lr}
 800fffc:	b088      	sub	sp, #32
 800fffe:	af00      	add	r7, sp, #0
 8010000:	6078      	str	r0, [r7, #4]
 8010002:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010004:	683b      	ldr	r3, [r7, #0]
 8010006:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010008:	2309      	movs	r3, #9
 801000a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801000c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010010:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010012:	2300      	movs	r3, #0
 8010014:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801001a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801001c:	f107 0308 	add.w	r3, r7, #8
 8010020:	4619      	mov	r1, r3
 8010022:	6878      	ldr	r0, [r7, #4]
 8010024:	f7ff fd7e 	bl	800fb24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010028:	6878      	ldr	r0, [r7, #4]
 801002a:	f000 f9af 	bl	801038c <SDMMC_GetCmdResp2>
 801002e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010030:	69fb      	ldr	r3, [r7, #28]
}
 8010032:	4618      	mov	r0, r3
 8010034:	3720      	adds	r7, #32
 8010036:	46bd      	mov	sp, r7
 8010038:	bd80      	pop	{r7, pc}

0801003a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 801003a:	b580      	push	{r7, lr}
 801003c:	b088      	sub	sp, #32
 801003e:	af00      	add	r7, sp, #0
 8010040:	6078      	str	r0, [r7, #4]
 8010042:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010044:	2300      	movs	r3, #0
 8010046:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010048:	2303      	movs	r3, #3
 801004a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801004c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010050:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010052:	2300      	movs	r3, #0
 8010054:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010056:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801005a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801005c:	f107 0308 	add.w	r3, r7, #8
 8010060:	4619      	mov	r1, r3
 8010062:	6878      	ldr	r0, [r7, #4]
 8010064:	f7ff fd5e 	bl	800fb24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010068:	683a      	ldr	r2, [r7, #0]
 801006a:	2103      	movs	r1, #3
 801006c:	6878      	ldr	r0, [r7, #4]
 801006e:	f000 fa17 	bl	80104a0 <SDMMC_GetCmdResp6>
 8010072:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010074:	69fb      	ldr	r3, [r7, #28]
}
 8010076:	4618      	mov	r0, r3
 8010078:	3720      	adds	r7, #32
 801007a:	46bd      	mov	sp, r7
 801007c:	bd80      	pop	{r7, pc}

0801007e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801007e:	b580      	push	{r7, lr}
 8010080:	b088      	sub	sp, #32
 8010082:	af00      	add	r7, sp, #0
 8010084:	6078      	str	r0, [r7, #4]
 8010086:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010088:	683b      	ldr	r3, [r7, #0]
 801008a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801008c:	230d      	movs	r3, #13
 801008e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010090:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010094:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010096:	2300      	movs	r3, #0
 8010098:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801009a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801009e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80100a0:	f107 0308 	add.w	r3, r7, #8
 80100a4:	4619      	mov	r1, r3
 80100a6:	6878      	ldr	r0, [r7, #4]
 80100a8:	f7ff fd3c 	bl	800fb24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80100ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80100b0:	210d      	movs	r1, #13
 80100b2:	6878      	ldr	r0, [r7, #4]
 80100b4:	f000 f878 	bl	80101a8 <SDMMC_GetCmdResp1>
 80100b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80100ba:	69fb      	ldr	r3, [r7, #28]
}
 80100bc:	4618      	mov	r0, r3
 80100be:	3720      	adds	r7, #32
 80100c0:	46bd      	mov	sp, r7
 80100c2:	bd80      	pop	{r7, pc}

080100c4 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b088      	sub	sp, #32
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80100cc:	2300      	movs	r3, #0
 80100ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80100d0:	230d      	movs	r3, #13
 80100d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80100d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80100d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80100da:	2300      	movs	r3, #0
 80100dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80100de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80100e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80100e4:	f107 0308 	add.w	r3, r7, #8
 80100e8:	4619      	mov	r1, r3
 80100ea:	6878      	ldr	r0, [r7, #4]
 80100ec:	f7ff fd1a 	bl	800fb24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80100f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80100f4:	210d      	movs	r1, #13
 80100f6:	6878      	ldr	r0, [r7, #4]
 80100f8:	f000 f856 	bl	80101a8 <SDMMC_GetCmdResp1>
 80100fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80100fe:	69fb      	ldr	r3, [r7, #28]
}
 8010100:	4618      	mov	r0, r3
 8010102:	3720      	adds	r7, #32
 8010104:	46bd      	mov	sp, r7
 8010106:	bd80      	pop	{r7, pc}

08010108 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8010108:	b580      	push	{r7, lr}
 801010a:	b088      	sub	sp, #32
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8010110:	2300      	movs	r3, #0
 8010112:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8010114:	230b      	movs	r3, #11
 8010116:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010118:	f44f 7380 	mov.w	r3, #256	; 0x100
 801011c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801011e:	2300      	movs	r3, #0
 8010120:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010122:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010126:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010128:	f107 0308 	add.w	r3, r7, #8
 801012c:	4619      	mov	r1, r3
 801012e:	6878      	ldr	r0, [r7, #4]
 8010130:	f7ff fcf8 	bl	800fb24 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8010134:	f241 3288 	movw	r2, #5000	; 0x1388
 8010138:	210b      	movs	r1, #11
 801013a:	6878      	ldr	r0, [r7, #4]
 801013c:	f000 f834 	bl	80101a8 <SDMMC_GetCmdResp1>
 8010140:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010142:	69fb      	ldr	r3, [r7, #28]
}
 8010144:	4618      	mov	r0, r3
 8010146:	3720      	adds	r7, #32
 8010148:	46bd      	mov	sp, r7
 801014a:	bd80      	pop	{r7, pc}

0801014c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 801014c:	b480      	push	{r7}
 801014e:	b085      	sub	sp, #20
 8010150:	af00      	add	r7, sp, #0
 8010152:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010154:	4b11      	ldr	r3, [pc, #68]	; (801019c <SDMMC_GetCmdError+0x50>)
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	4a11      	ldr	r2, [pc, #68]	; (80101a0 <SDMMC_GetCmdError+0x54>)
 801015a:	fba2 2303 	umull	r2, r3, r2, r3
 801015e:	0a5b      	lsrs	r3, r3, #9
 8010160:	f241 3288 	movw	r2, #5000	; 0x1388
 8010164:	fb02 f303 	mul.w	r3, r2, r3
 8010168:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	1e5a      	subs	r2, r3, #1
 801016e:	60fa      	str	r2, [r7, #12]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d102      	bne.n	801017a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010174:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010178:	e009      	b.n	801018e <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801017e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010182:	2b00      	cmp	r3, #0
 8010184:	d0f1      	beq.n	801016a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	4a06      	ldr	r2, [pc, #24]	; (80101a4 <SDMMC_GetCmdError+0x58>)
 801018a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 801018c:	2300      	movs	r3, #0
}
 801018e:	4618      	mov	r0, r3
 8010190:	3714      	adds	r7, #20
 8010192:	46bd      	mov	sp, r7
 8010194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010198:	4770      	bx	lr
 801019a:	bf00      	nop
 801019c:	24000044 	.word	0x24000044
 80101a0:	10624dd3 	.word	0x10624dd3
 80101a4:	002000c5 	.word	0x002000c5

080101a8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b088      	sub	sp, #32
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	60f8      	str	r0, [r7, #12]
 80101b0:	460b      	mov	r3, r1
 80101b2:	607a      	str	r2, [r7, #4]
 80101b4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80101b6:	4b70      	ldr	r3, [pc, #448]	; (8010378 <SDMMC_GetCmdResp1+0x1d0>)
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	4a70      	ldr	r2, [pc, #448]	; (801037c <SDMMC_GetCmdResp1+0x1d4>)
 80101bc:	fba2 2303 	umull	r2, r3, r2, r3
 80101c0:	0a5a      	lsrs	r2, r3, #9
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	fb02 f303 	mul.w	r3, r2, r3
 80101c8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80101ca:	69fb      	ldr	r3, [r7, #28]
 80101cc:	1e5a      	subs	r2, r3, #1
 80101ce:	61fa      	str	r2, [r7, #28]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d102      	bne.n	80101da <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80101d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80101d8:	e0c9      	b.n	801036e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101de:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80101e0:	69ba      	ldr	r2, [r7, #24]
 80101e2:	4b67      	ldr	r3, [pc, #412]	; (8010380 <SDMMC_GetCmdResp1+0x1d8>)
 80101e4:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d0ef      	beq.n	80101ca <SDMMC_GetCmdResp1+0x22>
 80101ea:	69bb      	ldr	r3, [r7, #24]
 80101ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d1ea      	bne.n	80101ca <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101f8:	f003 0304 	and.w	r3, r3, #4
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d004      	beq.n	801020a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	2204      	movs	r2, #4
 8010204:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010206:	2304      	movs	r3, #4
 8010208:	e0b1      	b.n	801036e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801020e:	f003 0301 	and.w	r3, r3, #1
 8010212:	2b00      	cmp	r3, #0
 8010214:	d004      	beq.n	8010220 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	2201      	movs	r2, #1
 801021a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801021c:	2301      	movs	r3, #1
 801021e:	e0a6      	b.n	801036e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	4a58      	ldr	r2, [pc, #352]	; (8010384 <SDMMC_GetCmdResp1+0x1dc>)
 8010224:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010226:	68f8      	ldr	r0, [r7, #12]
 8010228:	f7ff fca6 	bl	800fb78 <SDMMC_GetCommandResponse>
 801022c:	4603      	mov	r3, r0
 801022e:	461a      	mov	r2, r3
 8010230:	7afb      	ldrb	r3, [r7, #11]
 8010232:	4293      	cmp	r3, r2
 8010234:	d001      	beq.n	801023a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010236:	2301      	movs	r3, #1
 8010238:	e099      	b.n	801036e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801023a:	2100      	movs	r1, #0
 801023c:	68f8      	ldr	r0, [r7, #12]
 801023e:	f7ff fca8 	bl	800fb92 <SDMMC_GetResponse>
 8010242:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010244:	697a      	ldr	r2, [r7, #20]
 8010246:	4b50      	ldr	r3, [pc, #320]	; (8010388 <SDMMC_GetCmdResp1+0x1e0>)
 8010248:	4013      	ands	r3, r2
 801024a:	2b00      	cmp	r3, #0
 801024c:	d101      	bne.n	8010252 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801024e:	2300      	movs	r3, #0
 8010250:	e08d      	b.n	801036e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010252:	697b      	ldr	r3, [r7, #20]
 8010254:	2b00      	cmp	r3, #0
 8010256:	da02      	bge.n	801025e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010258:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801025c:	e087      	b.n	801036e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801025e:	697b      	ldr	r3, [r7, #20]
 8010260:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010264:	2b00      	cmp	r3, #0
 8010266:	d001      	beq.n	801026c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010268:	2340      	movs	r3, #64	; 0x40
 801026a:	e080      	b.n	801036e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 801026c:	697b      	ldr	r3, [r7, #20]
 801026e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010272:	2b00      	cmp	r3, #0
 8010274:	d001      	beq.n	801027a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010276:	2380      	movs	r3, #128	; 0x80
 8010278:	e079      	b.n	801036e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801027a:	697b      	ldr	r3, [r7, #20]
 801027c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010280:	2b00      	cmp	r3, #0
 8010282:	d002      	beq.n	801028a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010284:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010288:	e071      	b.n	801036e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801028a:	697b      	ldr	r3, [r7, #20]
 801028c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010290:	2b00      	cmp	r3, #0
 8010292:	d002      	beq.n	801029a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010294:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010298:	e069      	b.n	801036e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801029a:	697b      	ldr	r3, [r7, #20]
 801029c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d002      	beq.n	80102aa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80102a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80102a8:	e061      	b.n	801036e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80102aa:	697b      	ldr	r3, [r7, #20]
 80102ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d002      	beq.n	80102ba <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80102b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80102b8:	e059      	b.n	801036e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80102ba:	697b      	ldr	r3, [r7, #20]
 80102bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d002      	beq.n	80102ca <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80102c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80102c8:	e051      	b.n	801036e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80102ca:	697b      	ldr	r3, [r7, #20]
 80102cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d002      	beq.n	80102da <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80102d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80102d8:	e049      	b.n	801036e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80102da:	697b      	ldr	r3, [r7, #20]
 80102dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d002      	beq.n	80102ea <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80102e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80102e8:	e041      	b.n	801036e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80102ea:	697b      	ldr	r3, [r7, #20]
 80102ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d002      	beq.n	80102fa <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80102f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80102f8:	e039      	b.n	801036e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80102fa:	697b      	ldr	r3, [r7, #20]
 80102fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010300:	2b00      	cmp	r3, #0
 8010302:	d002      	beq.n	801030a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010304:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010308:	e031      	b.n	801036e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801030a:	697b      	ldr	r3, [r7, #20]
 801030c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010310:	2b00      	cmp	r3, #0
 8010312:	d002      	beq.n	801031a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010314:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010318:	e029      	b.n	801036e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801031a:	697b      	ldr	r3, [r7, #20]
 801031c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010320:	2b00      	cmp	r3, #0
 8010322:	d002      	beq.n	801032a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010324:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010328:	e021      	b.n	801036e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801032a:	697b      	ldr	r3, [r7, #20]
 801032c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010330:	2b00      	cmp	r3, #0
 8010332:	d002      	beq.n	801033a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010334:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010338:	e019      	b.n	801036e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801033a:	697b      	ldr	r3, [r7, #20]
 801033c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010340:	2b00      	cmp	r3, #0
 8010342:	d002      	beq.n	801034a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010344:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010348:	e011      	b.n	801036e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801034a:	697b      	ldr	r3, [r7, #20]
 801034c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010350:	2b00      	cmp	r3, #0
 8010352:	d002      	beq.n	801035a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010354:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010358:	e009      	b.n	801036e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801035a:	697b      	ldr	r3, [r7, #20]
 801035c:	f003 0308 	and.w	r3, r3, #8
 8010360:	2b00      	cmp	r3, #0
 8010362:	d002      	beq.n	801036a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010364:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010368:	e001      	b.n	801036e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801036a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801036e:	4618      	mov	r0, r3
 8010370:	3720      	adds	r7, #32
 8010372:	46bd      	mov	sp, r7
 8010374:	bd80      	pop	{r7, pc}
 8010376:	bf00      	nop
 8010378:	24000044 	.word	0x24000044
 801037c:	10624dd3 	.word	0x10624dd3
 8010380:	00200045 	.word	0x00200045
 8010384:	002000c5 	.word	0x002000c5
 8010388:	fdffe008 	.word	0xfdffe008

0801038c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 801038c:	b480      	push	{r7}
 801038e:	b085      	sub	sp, #20
 8010390:	af00      	add	r7, sp, #0
 8010392:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010394:	4b1f      	ldr	r3, [pc, #124]	; (8010414 <SDMMC_GetCmdResp2+0x88>)
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	4a1f      	ldr	r2, [pc, #124]	; (8010418 <SDMMC_GetCmdResp2+0x8c>)
 801039a:	fba2 2303 	umull	r2, r3, r2, r3
 801039e:	0a5b      	lsrs	r3, r3, #9
 80103a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80103a4:	fb02 f303 	mul.w	r3, r2, r3
 80103a8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	1e5a      	subs	r2, r3, #1
 80103ae:	60fa      	str	r2, [r7, #12]
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d102      	bne.n	80103ba <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80103b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80103b8:	e026      	b.n	8010408 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80103be:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80103c0:	68bb      	ldr	r3, [r7, #8]
 80103c2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d0ef      	beq.n	80103aa <SDMMC_GetCmdResp2+0x1e>
 80103ca:	68bb      	ldr	r3, [r7, #8]
 80103cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d1ea      	bne.n	80103aa <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80103d8:	f003 0304 	and.w	r3, r3, #4
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d004      	beq.n	80103ea <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	2204      	movs	r2, #4
 80103e4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80103e6:	2304      	movs	r3, #4
 80103e8:	e00e      	b.n	8010408 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80103ee:	f003 0301 	and.w	r3, r3, #1
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d004      	beq.n	8010400 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	2201      	movs	r2, #1
 80103fa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80103fc:	2301      	movs	r3, #1
 80103fe:	e003      	b.n	8010408 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	4a06      	ldr	r2, [pc, #24]	; (801041c <SDMMC_GetCmdResp2+0x90>)
 8010404:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010406:	2300      	movs	r3, #0
}
 8010408:	4618      	mov	r0, r3
 801040a:	3714      	adds	r7, #20
 801040c:	46bd      	mov	sp, r7
 801040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010412:	4770      	bx	lr
 8010414:	24000044 	.word	0x24000044
 8010418:	10624dd3 	.word	0x10624dd3
 801041c:	002000c5 	.word	0x002000c5

08010420 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8010420:	b480      	push	{r7}
 8010422:	b085      	sub	sp, #20
 8010424:	af00      	add	r7, sp, #0
 8010426:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010428:	4b1a      	ldr	r3, [pc, #104]	; (8010494 <SDMMC_GetCmdResp3+0x74>)
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	4a1a      	ldr	r2, [pc, #104]	; (8010498 <SDMMC_GetCmdResp3+0x78>)
 801042e:	fba2 2303 	umull	r2, r3, r2, r3
 8010432:	0a5b      	lsrs	r3, r3, #9
 8010434:	f241 3288 	movw	r2, #5000	; 0x1388
 8010438:	fb02 f303 	mul.w	r3, r2, r3
 801043c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	1e5a      	subs	r2, r3, #1
 8010442:	60fa      	str	r2, [r7, #12]
 8010444:	2b00      	cmp	r3, #0
 8010446:	d102      	bne.n	801044e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010448:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801044c:	e01b      	b.n	8010486 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010452:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010454:	68bb      	ldr	r3, [r7, #8]
 8010456:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801045a:	2b00      	cmp	r3, #0
 801045c:	d0ef      	beq.n	801043e <SDMMC_GetCmdResp3+0x1e>
 801045e:	68bb      	ldr	r3, [r7, #8]
 8010460:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010464:	2b00      	cmp	r3, #0
 8010466:	d1ea      	bne.n	801043e <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801046c:	f003 0304 	and.w	r3, r3, #4
 8010470:	2b00      	cmp	r3, #0
 8010472:	d004      	beq.n	801047e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	2204      	movs	r2, #4
 8010478:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801047a:	2304      	movs	r3, #4
 801047c:	e003      	b.n	8010486 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	4a06      	ldr	r2, [pc, #24]	; (801049c <SDMMC_GetCmdResp3+0x7c>)
 8010482:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010484:	2300      	movs	r3, #0
}
 8010486:	4618      	mov	r0, r3
 8010488:	3714      	adds	r7, #20
 801048a:	46bd      	mov	sp, r7
 801048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010490:	4770      	bx	lr
 8010492:	bf00      	nop
 8010494:	24000044 	.word	0x24000044
 8010498:	10624dd3 	.word	0x10624dd3
 801049c:	002000c5 	.word	0x002000c5

080104a0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80104a0:	b580      	push	{r7, lr}
 80104a2:	b088      	sub	sp, #32
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	60f8      	str	r0, [r7, #12]
 80104a8:	460b      	mov	r3, r1
 80104aa:	607a      	str	r2, [r7, #4]
 80104ac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80104ae:	4b35      	ldr	r3, [pc, #212]	; (8010584 <SDMMC_GetCmdResp6+0xe4>)
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	4a35      	ldr	r2, [pc, #212]	; (8010588 <SDMMC_GetCmdResp6+0xe8>)
 80104b4:	fba2 2303 	umull	r2, r3, r2, r3
 80104b8:	0a5b      	lsrs	r3, r3, #9
 80104ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80104be:	fb02 f303 	mul.w	r3, r2, r3
 80104c2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80104c4:	69fb      	ldr	r3, [r7, #28]
 80104c6:	1e5a      	subs	r2, r3, #1
 80104c8:	61fa      	str	r2, [r7, #28]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d102      	bne.n	80104d4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80104ce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80104d2:	e052      	b.n	801057a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80104d8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80104da:	69bb      	ldr	r3, [r7, #24]
 80104dc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d0ef      	beq.n	80104c4 <SDMMC_GetCmdResp6+0x24>
 80104e4:	69bb      	ldr	r3, [r7, #24]
 80104e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d1ea      	bne.n	80104c4 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80104f2:	f003 0304 	and.w	r3, r3, #4
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d004      	beq.n	8010504 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	2204      	movs	r2, #4
 80104fe:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010500:	2304      	movs	r3, #4
 8010502:	e03a      	b.n	801057a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010508:	f003 0301 	and.w	r3, r3, #1
 801050c:	2b00      	cmp	r3, #0
 801050e:	d004      	beq.n	801051a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	2201      	movs	r2, #1
 8010514:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010516:	2301      	movs	r3, #1
 8010518:	e02f      	b.n	801057a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801051a:	68f8      	ldr	r0, [r7, #12]
 801051c:	f7ff fb2c 	bl	800fb78 <SDMMC_GetCommandResponse>
 8010520:	4603      	mov	r3, r0
 8010522:	461a      	mov	r2, r3
 8010524:	7afb      	ldrb	r3, [r7, #11]
 8010526:	4293      	cmp	r3, r2
 8010528:	d001      	beq.n	801052e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801052a:	2301      	movs	r3, #1
 801052c:	e025      	b.n	801057a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	4a16      	ldr	r2, [pc, #88]	; (801058c <SDMMC_GetCmdResp6+0xec>)
 8010532:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010534:	2100      	movs	r1, #0
 8010536:	68f8      	ldr	r0, [r7, #12]
 8010538:	f7ff fb2b 	bl	800fb92 <SDMMC_GetResponse>
 801053c:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 801053e:	697b      	ldr	r3, [r7, #20]
 8010540:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010544:	2b00      	cmp	r3, #0
 8010546:	d106      	bne.n	8010556 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8010548:	697b      	ldr	r3, [r7, #20]
 801054a:	0c1b      	lsrs	r3, r3, #16
 801054c:	b29a      	uxth	r2, r3
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8010552:	2300      	movs	r3, #0
 8010554:	e011      	b.n	801057a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010556:	697b      	ldr	r3, [r7, #20]
 8010558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801055c:	2b00      	cmp	r3, #0
 801055e:	d002      	beq.n	8010566 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010560:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010564:	e009      	b.n	801057a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010566:	697b      	ldr	r3, [r7, #20]
 8010568:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801056c:	2b00      	cmp	r3, #0
 801056e:	d002      	beq.n	8010576 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010570:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010574:	e001      	b.n	801057a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010576:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801057a:	4618      	mov	r0, r3
 801057c:	3720      	adds	r7, #32
 801057e:	46bd      	mov	sp, r7
 8010580:	bd80      	pop	{r7, pc}
 8010582:	bf00      	nop
 8010584:	24000044 	.word	0x24000044
 8010588:	10624dd3 	.word	0x10624dd3
 801058c:	002000c5 	.word	0x002000c5

08010590 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8010590:	b480      	push	{r7}
 8010592:	b085      	sub	sp, #20
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010598:	4b22      	ldr	r3, [pc, #136]	; (8010624 <SDMMC_GetCmdResp7+0x94>)
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	4a22      	ldr	r2, [pc, #136]	; (8010628 <SDMMC_GetCmdResp7+0x98>)
 801059e:	fba2 2303 	umull	r2, r3, r2, r3
 80105a2:	0a5b      	lsrs	r3, r3, #9
 80105a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80105a8:	fb02 f303 	mul.w	r3, r2, r3
 80105ac:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	1e5a      	subs	r2, r3, #1
 80105b2:	60fa      	str	r2, [r7, #12]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d102      	bne.n	80105be <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80105b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80105bc:	e02c      	b.n	8010618 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105c2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80105c4:	68bb      	ldr	r3, [r7, #8]
 80105c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d0ef      	beq.n	80105ae <SDMMC_GetCmdResp7+0x1e>
 80105ce:	68bb      	ldr	r3, [r7, #8]
 80105d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d1ea      	bne.n	80105ae <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105dc:	f003 0304 	and.w	r3, r3, #4
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d004      	beq.n	80105ee <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	2204      	movs	r2, #4
 80105e8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80105ea:	2304      	movs	r3, #4
 80105ec:	e014      	b.n	8010618 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105f2:	f003 0301 	and.w	r3, r3, #1
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d004      	beq.n	8010604 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	2201      	movs	r2, #1
 80105fe:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010600:	2301      	movs	r3, #1
 8010602:	e009      	b.n	8010618 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801060c:	2b00      	cmp	r3, #0
 801060e:	d002      	beq.n	8010616 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	2240      	movs	r2, #64	; 0x40
 8010614:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010616:	2300      	movs	r3, #0

}
 8010618:	4618      	mov	r0, r3
 801061a:	3714      	adds	r7, #20
 801061c:	46bd      	mov	sp, r7
 801061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010622:	4770      	bx	lr
 8010624:	24000044 	.word	0x24000044
 8010628:	10624dd3 	.word	0x10624dd3

0801062c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801062c:	b084      	sub	sp, #16
 801062e:	b580      	push	{r7, lr}
 8010630:	b084      	sub	sp, #16
 8010632:	af00      	add	r7, sp, #0
 8010634:	6078      	str	r0, [r7, #4]
 8010636:	f107 001c 	add.w	r0, r7, #28
 801063a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801063e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010640:	2b01      	cmp	r3, #1
 8010642:	d120      	bne.n	8010686 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010648:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	68da      	ldr	r2, [r3, #12]
 8010654:	4b25      	ldr	r3, [pc, #148]	; (80106ec <USB_CoreInit+0xc0>)
 8010656:	4013      	ands	r3, r2
 8010658:	687a      	ldr	r2, [r7, #4]
 801065a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	68db      	ldr	r3, [r3, #12]
 8010660:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8010668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801066a:	2b01      	cmp	r3, #1
 801066c:	d105      	bne.n	801067a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	68db      	ldr	r3, [r3, #12]
 8010672:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 801067a:	6878      	ldr	r0, [r7, #4]
 801067c:	f001 fabe 	bl	8011bfc <USB_CoreReset>
 8010680:	4603      	mov	r3, r0
 8010682:	73fb      	strb	r3, [r7, #15]
 8010684:	e01a      	b.n	80106bc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	68db      	ldr	r3, [r3, #12]
 801068a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8010692:	6878      	ldr	r0, [r7, #4]
 8010694:	f001 fab2 	bl	8011bfc <USB_CoreReset>
 8010698:	4603      	mov	r3, r0
 801069a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801069c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d106      	bne.n	80106b0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	639a      	str	r2, [r3, #56]	; 0x38
 80106ae:	e005      	b.n	80106bc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80106bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106be:	2b01      	cmp	r3, #1
 80106c0:	d10b      	bne.n	80106da <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	689b      	ldr	r3, [r3, #8]
 80106c6:	f043 0206 	orr.w	r2, r3, #6
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	689b      	ldr	r3, [r3, #8]
 80106d2:	f043 0220 	orr.w	r2, r3, #32
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80106da:	7bfb      	ldrb	r3, [r7, #15]
}
 80106dc:	4618      	mov	r0, r3
 80106de:	3710      	adds	r7, #16
 80106e0:	46bd      	mov	sp, r7
 80106e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80106e6:	b004      	add	sp, #16
 80106e8:	4770      	bx	lr
 80106ea:	bf00      	nop
 80106ec:	ffbdffbf 	.word	0xffbdffbf

080106f0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80106f0:	b480      	push	{r7}
 80106f2:	b087      	sub	sp, #28
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	60f8      	str	r0, [r7, #12]
 80106f8:	60b9      	str	r1, [r7, #8]
 80106fa:	4613      	mov	r3, r2
 80106fc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80106fe:	79fb      	ldrb	r3, [r7, #7]
 8010700:	2b02      	cmp	r3, #2
 8010702:	d165      	bne.n	80107d0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8010704:	68bb      	ldr	r3, [r7, #8]
 8010706:	4a41      	ldr	r2, [pc, #260]	; (801080c <USB_SetTurnaroundTime+0x11c>)
 8010708:	4293      	cmp	r3, r2
 801070a:	d906      	bls.n	801071a <USB_SetTurnaroundTime+0x2a>
 801070c:	68bb      	ldr	r3, [r7, #8]
 801070e:	4a40      	ldr	r2, [pc, #256]	; (8010810 <USB_SetTurnaroundTime+0x120>)
 8010710:	4293      	cmp	r3, r2
 8010712:	d802      	bhi.n	801071a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8010714:	230f      	movs	r3, #15
 8010716:	617b      	str	r3, [r7, #20]
 8010718:	e062      	b.n	80107e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801071a:	68bb      	ldr	r3, [r7, #8]
 801071c:	4a3c      	ldr	r2, [pc, #240]	; (8010810 <USB_SetTurnaroundTime+0x120>)
 801071e:	4293      	cmp	r3, r2
 8010720:	d906      	bls.n	8010730 <USB_SetTurnaroundTime+0x40>
 8010722:	68bb      	ldr	r3, [r7, #8]
 8010724:	4a3b      	ldr	r2, [pc, #236]	; (8010814 <USB_SetTurnaroundTime+0x124>)
 8010726:	4293      	cmp	r3, r2
 8010728:	d802      	bhi.n	8010730 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801072a:	230e      	movs	r3, #14
 801072c:	617b      	str	r3, [r7, #20]
 801072e:	e057      	b.n	80107e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8010730:	68bb      	ldr	r3, [r7, #8]
 8010732:	4a38      	ldr	r2, [pc, #224]	; (8010814 <USB_SetTurnaroundTime+0x124>)
 8010734:	4293      	cmp	r3, r2
 8010736:	d906      	bls.n	8010746 <USB_SetTurnaroundTime+0x56>
 8010738:	68bb      	ldr	r3, [r7, #8]
 801073a:	4a37      	ldr	r2, [pc, #220]	; (8010818 <USB_SetTurnaroundTime+0x128>)
 801073c:	4293      	cmp	r3, r2
 801073e:	d802      	bhi.n	8010746 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8010740:	230d      	movs	r3, #13
 8010742:	617b      	str	r3, [r7, #20]
 8010744:	e04c      	b.n	80107e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8010746:	68bb      	ldr	r3, [r7, #8]
 8010748:	4a33      	ldr	r2, [pc, #204]	; (8010818 <USB_SetTurnaroundTime+0x128>)
 801074a:	4293      	cmp	r3, r2
 801074c:	d906      	bls.n	801075c <USB_SetTurnaroundTime+0x6c>
 801074e:	68bb      	ldr	r3, [r7, #8]
 8010750:	4a32      	ldr	r2, [pc, #200]	; (801081c <USB_SetTurnaroundTime+0x12c>)
 8010752:	4293      	cmp	r3, r2
 8010754:	d802      	bhi.n	801075c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8010756:	230c      	movs	r3, #12
 8010758:	617b      	str	r3, [r7, #20]
 801075a:	e041      	b.n	80107e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 801075c:	68bb      	ldr	r3, [r7, #8]
 801075e:	4a2f      	ldr	r2, [pc, #188]	; (801081c <USB_SetTurnaroundTime+0x12c>)
 8010760:	4293      	cmp	r3, r2
 8010762:	d906      	bls.n	8010772 <USB_SetTurnaroundTime+0x82>
 8010764:	68bb      	ldr	r3, [r7, #8]
 8010766:	4a2e      	ldr	r2, [pc, #184]	; (8010820 <USB_SetTurnaroundTime+0x130>)
 8010768:	4293      	cmp	r3, r2
 801076a:	d802      	bhi.n	8010772 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 801076c:	230b      	movs	r3, #11
 801076e:	617b      	str	r3, [r7, #20]
 8010770:	e036      	b.n	80107e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8010772:	68bb      	ldr	r3, [r7, #8]
 8010774:	4a2a      	ldr	r2, [pc, #168]	; (8010820 <USB_SetTurnaroundTime+0x130>)
 8010776:	4293      	cmp	r3, r2
 8010778:	d906      	bls.n	8010788 <USB_SetTurnaroundTime+0x98>
 801077a:	68bb      	ldr	r3, [r7, #8]
 801077c:	4a29      	ldr	r2, [pc, #164]	; (8010824 <USB_SetTurnaroundTime+0x134>)
 801077e:	4293      	cmp	r3, r2
 8010780:	d802      	bhi.n	8010788 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8010782:	230a      	movs	r3, #10
 8010784:	617b      	str	r3, [r7, #20]
 8010786:	e02b      	b.n	80107e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8010788:	68bb      	ldr	r3, [r7, #8]
 801078a:	4a26      	ldr	r2, [pc, #152]	; (8010824 <USB_SetTurnaroundTime+0x134>)
 801078c:	4293      	cmp	r3, r2
 801078e:	d906      	bls.n	801079e <USB_SetTurnaroundTime+0xae>
 8010790:	68bb      	ldr	r3, [r7, #8]
 8010792:	4a25      	ldr	r2, [pc, #148]	; (8010828 <USB_SetTurnaroundTime+0x138>)
 8010794:	4293      	cmp	r3, r2
 8010796:	d802      	bhi.n	801079e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8010798:	2309      	movs	r3, #9
 801079a:	617b      	str	r3, [r7, #20]
 801079c:	e020      	b.n	80107e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801079e:	68bb      	ldr	r3, [r7, #8]
 80107a0:	4a21      	ldr	r2, [pc, #132]	; (8010828 <USB_SetTurnaroundTime+0x138>)
 80107a2:	4293      	cmp	r3, r2
 80107a4:	d906      	bls.n	80107b4 <USB_SetTurnaroundTime+0xc4>
 80107a6:	68bb      	ldr	r3, [r7, #8]
 80107a8:	4a20      	ldr	r2, [pc, #128]	; (801082c <USB_SetTurnaroundTime+0x13c>)
 80107aa:	4293      	cmp	r3, r2
 80107ac:	d802      	bhi.n	80107b4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80107ae:	2308      	movs	r3, #8
 80107b0:	617b      	str	r3, [r7, #20]
 80107b2:	e015      	b.n	80107e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80107b4:	68bb      	ldr	r3, [r7, #8]
 80107b6:	4a1d      	ldr	r2, [pc, #116]	; (801082c <USB_SetTurnaroundTime+0x13c>)
 80107b8:	4293      	cmp	r3, r2
 80107ba:	d906      	bls.n	80107ca <USB_SetTurnaroundTime+0xda>
 80107bc:	68bb      	ldr	r3, [r7, #8]
 80107be:	4a1c      	ldr	r2, [pc, #112]	; (8010830 <USB_SetTurnaroundTime+0x140>)
 80107c0:	4293      	cmp	r3, r2
 80107c2:	d802      	bhi.n	80107ca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80107c4:	2307      	movs	r3, #7
 80107c6:	617b      	str	r3, [r7, #20]
 80107c8:	e00a      	b.n	80107e0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80107ca:	2306      	movs	r3, #6
 80107cc:	617b      	str	r3, [r7, #20]
 80107ce:	e007      	b.n	80107e0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80107d0:	79fb      	ldrb	r3, [r7, #7]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d102      	bne.n	80107dc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80107d6:	2309      	movs	r3, #9
 80107d8:	617b      	str	r3, [r7, #20]
 80107da:	e001      	b.n	80107e0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80107dc:	2309      	movs	r3, #9
 80107de:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	68db      	ldr	r3, [r3, #12]
 80107e4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	68da      	ldr	r2, [r3, #12]
 80107f0:	697b      	ldr	r3, [r7, #20]
 80107f2:	029b      	lsls	r3, r3, #10
 80107f4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80107f8:	431a      	orrs	r2, r3
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80107fe:	2300      	movs	r3, #0
}
 8010800:	4618      	mov	r0, r3
 8010802:	371c      	adds	r7, #28
 8010804:	46bd      	mov	sp, r7
 8010806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080a:	4770      	bx	lr
 801080c:	00d8acbf 	.word	0x00d8acbf
 8010810:	00e4e1bf 	.word	0x00e4e1bf
 8010814:	00f423ff 	.word	0x00f423ff
 8010818:	0106737f 	.word	0x0106737f
 801081c:	011a499f 	.word	0x011a499f
 8010820:	01312cff 	.word	0x01312cff
 8010824:	014ca43f 	.word	0x014ca43f
 8010828:	016e35ff 	.word	0x016e35ff
 801082c:	01a6ab1f 	.word	0x01a6ab1f
 8010830:	01e847ff 	.word	0x01e847ff

08010834 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010834:	b480      	push	{r7}
 8010836:	b083      	sub	sp, #12
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	689b      	ldr	r3, [r3, #8]
 8010840:	f043 0201 	orr.w	r2, r3, #1
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010848:	2300      	movs	r3, #0
}
 801084a:	4618      	mov	r0, r3
 801084c:	370c      	adds	r7, #12
 801084e:	46bd      	mov	sp, r7
 8010850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010854:	4770      	bx	lr

08010856 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010856:	b480      	push	{r7}
 8010858:	b083      	sub	sp, #12
 801085a:	af00      	add	r7, sp, #0
 801085c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	689b      	ldr	r3, [r3, #8]
 8010862:	f023 0201 	bic.w	r2, r3, #1
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801086a:	2300      	movs	r3, #0
}
 801086c:	4618      	mov	r0, r3
 801086e:	370c      	adds	r7, #12
 8010870:	46bd      	mov	sp, r7
 8010872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010876:	4770      	bx	lr

08010878 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8010878:	b580      	push	{r7, lr}
 801087a:	b082      	sub	sp, #8
 801087c:	af00      	add	r7, sp, #0
 801087e:	6078      	str	r0, [r7, #4]
 8010880:	460b      	mov	r3, r1
 8010882:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	68db      	ldr	r3, [r3, #12]
 8010888:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010890:	78fb      	ldrb	r3, [r7, #3]
 8010892:	2b01      	cmp	r3, #1
 8010894:	d106      	bne.n	80108a4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	68db      	ldr	r3, [r3, #12]
 801089a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	60da      	str	r2, [r3, #12]
 80108a2:	e00b      	b.n	80108bc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80108a4:	78fb      	ldrb	r3, [r7, #3]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d106      	bne.n	80108b8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	68db      	ldr	r3, [r3, #12]
 80108ae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	60da      	str	r2, [r3, #12]
 80108b6:	e001      	b.n	80108bc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80108b8:	2301      	movs	r3, #1
 80108ba:	e003      	b.n	80108c4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80108bc:	2032      	movs	r0, #50	; 0x32
 80108be:	f7f2 fc85 	bl	80031cc <HAL_Delay>

  return HAL_OK;
 80108c2:	2300      	movs	r3, #0
}
 80108c4:	4618      	mov	r0, r3
 80108c6:	3708      	adds	r7, #8
 80108c8:	46bd      	mov	sp, r7
 80108ca:	bd80      	pop	{r7, pc}

080108cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80108cc:	b084      	sub	sp, #16
 80108ce:	b580      	push	{r7, lr}
 80108d0:	b086      	sub	sp, #24
 80108d2:	af00      	add	r7, sp, #0
 80108d4:	6078      	str	r0, [r7, #4]
 80108d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80108da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80108de:	2300      	movs	r3, #0
 80108e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80108e6:	2300      	movs	r3, #0
 80108e8:	613b      	str	r3, [r7, #16]
 80108ea:	e009      	b.n	8010900 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80108ec:	687a      	ldr	r2, [r7, #4]
 80108ee:	693b      	ldr	r3, [r7, #16]
 80108f0:	3340      	adds	r3, #64	; 0x40
 80108f2:	009b      	lsls	r3, r3, #2
 80108f4:	4413      	add	r3, r2
 80108f6:	2200      	movs	r2, #0
 80108f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80108fa:	693b      	ldr	r3, [r7, #16]
 80108fc:	3301      	adds	r3, #1
 80108fe:	613b      	str	r3, [r7, #16]
 8010900:	693b      	ldr	r3, [r7, #16]
 8010902:	2b0e      	cmp	r3, #14
 8010904:	d9f2      	bls.n	80108ec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8010906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010908:	2b00      	cmp	r3, #0
 801090a:	d11c      	bne.n	8010946 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010912:	685b      	ldr	r3, [r3, #4]
 8010914:	68fa      	ldr	r2, [r7, #12]
 8010916:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801091a:	f043 0302 	orr.w	r3, r3, #2
 801091e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010924:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	601a      	str	r2, [r3, #0]
 8010944:	e005      	b.n	8010952 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801094a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010958:	461a      	mov	r2, r3
 801095a:	2300      	movs	r3, #0
 801095c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010964:	4619      	mov	r1, r3
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801096c:	461a      	mov	r2, r3
 801096e:	680b      	ldr	r3, [r1, #0]
 8010970:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010974:	2b01      	cmp	r3, #1
 8010976:	d10c      	bne.n	8010992 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8010978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801097a:	2b00      	cmp	r3, #0
 801097c:	d104      	bne.n	8010988 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801097e:	2100      	movs	r1, #0
 8010980:	6878      	ldr	r0, [r7, #4]
 8010982:	f000 f949 	bl	8010c18 <USB_SetDevSpeed>
 8010986:	e008      	b.n	801099a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8010988:	2101      	movs	r1, #1
 801098a:	6878      	ldr	r0, [r7, #4]
 801098c:	f000 f944 	bl	8010c18 <USB_SetDevSpeed>
 8010990:	e003      	b.n	801099a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8010992:	2103      	movs	r1, #3
 8010994:	6878      	ldr	r0, [r7, #4]
 8010996:	f000 f93f 	bl	8010c18 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801099a:	2110      	movs	r1, #16
 801099c:	6878      	ldr	r0, [r7, #4]
 801099e:	f000 f8f3 	bl	8010b88 <USB_FlushTxFifo>
 80109a2:	4603      	mov	r3, r0
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d001      	beq.n	80109ac <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80109a8:	2301      	movs	r3, #1
 80109aa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80109ac:	6878      	ldr	r0, [r7, #4]
 80109ae:	f000 f911 	bl	8010bd4 <USB_FlushRxFifo>
 80109b2:	4603      	mov	r3, r0
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d001      	beq.n	80109bc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80109b8:	2301      	movs	r3, #1
 80109ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80109c2:	461a      	mov	r2, r3
 80109c4:	2300      	movs	r3, #0
 80109c6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80109ce:	461a      	mov	r2, r3
 80109d0:	2300      	movs	r3, #0
 80109d2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80109da:	461a      	mov	r2, r3
 80109dc:	2300      	movs	r3, #0
 80109de:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80109e0:	2300      	movs	r3, #0
 80109e2:	613b      	str	r3, [r7, #16]
 80109e4:	e043      	b.n	8010a6e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80109e6:	693b      	ldr	r3, [r7, #16]
 80109e8:	015a      	lsls	r2, r3, #5
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	4413      	add	r3, r2
 80109ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80109f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80109fc:	d118      	bne.n	8010a30 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80109fe:	693b      	ldr	r3, [r7, #16]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d10a      	bne.n	8010a1a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010a04:	693b      	ldr	r3, [r7, #16]
 8010a06:	015a      	lsls	r2, r3, #5
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	4413      	add	r3, r2
 8010a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a10:	461a      	mov	r2, r3
 8010a12:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010a16:	6013      	str	r3, [r2, #0]
 8010a18:	e013      	b.n	8010a42 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8010a1a:	693b      	ldr	r3, [r7, #16]
 8010a1c:	015a      	lsls	r2, r3, #5
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	4413      	add	r3, r2
 8010a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a26:	461a      	mov	r2, r3
 8010a28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010a2c:	6013      	str	r3, [r2, #0]
 8010a2e:	e008      	b.n	8010a42 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010a30:	693b      	ldr	r3, [r7, #16]
 8010a32:	015a      	lsls	r2, r3, #5
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	4413      	add	r3, r2
 8010a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a3c:	461a      	mov	r2, r3
 8010a3e:	2300      	movs	r3, #0
 8010a40:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8010a42:	693b      	ldr	r3, [r7, #16]
 8010a44:	015a      	lsls	r2, r3, #5
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	4413      	add	r3, r2
 8010a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a4e:	461a      	mov	r2, r3
 8010a50:	2300      	movs	r3, #0
 8010a52:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010a54:	693b      	ldr	r3, [r7, #16]
 8010a56:	015a      	lsls	r2, r3, #5
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	4413      	add	r3, r2
 8010a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a60:	461a      	mov	r2, r3
 8010a62:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010a66:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010a68:	693b      	ldr	r3, [r7, #16]
 8010a6a:	3301      	adds	r3, #1
 8010a6c:	613b      	str	r3, [r7, #16]
 8010a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a70:	693a      	ldr	r2, [r7, #16]
 8010a72:	429a      	cmp	r2, r3
 8010a74:	d3b7      	bcc.n	80109e6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010a76:	2300      	movs	r3, #0
 8010a78:	613b      	str	r3, [r7, #16]
 8010a7a:	e043      	b.n	8010b04 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010a7c:	693b      	ldr	r3, [r7, #16]
 8010a7e:	015a      	lsls	r2, r3, #5
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	4413      	add	r3, r2
 8010a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010a8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010a92:	d118      	bne.n	8010ac6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8010a94:	693b      	ldr	r3, [r7, #16]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d10a      	bne.n	8010ab0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8010a9a:	693b      	ldr	r3, [r7, #16]
 8010a9c:	015a      	lsls	r2, r3, #5
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	4413      	add	r3, r2
 8010aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010aa6:	461a      	mov	r2, r3
 8010aa8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010aac:	6013      	str	r3, [r2, #0]
 8010aae:	e013      	b.n	8010ad8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8010ab0:	693b      	ldr	r3, [r7, #16]
 8010ab2:	015a      	lsls	r2, r3, #5
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	4413      	add	r3, r2
 8010ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010abc:	461a      	mov	r2, r3
 8010abe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010ac2:	6013      	str	r3, [r2, #0]
 8010ac4:	e008      	b.n	8010ad8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8010ac6:	693b      	ldr	r3, [r7, #16]
 8010ac8:	015a      	lsls	r2, r3, #5
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	4413      	add	r3, r2
 8010ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ad2:	461a      	mov	r2, r3
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8010ad8:	693b      	ldr	r3, [r7, #16]
 8010ada:	015a      	lsls	r2, r3, #5
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	4413      	add	r3, r2
 8010ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ae4:	461a      	mov	r2, r3
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8010aea:	693b      	ldr	r3, [r7, #16]
 8010aec:	015a      	lsls	r2, r3, #5
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	4413      	add	r3, r2
 8010af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010af6:	461a      	mov	r2, r3
 8010af8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010afc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010afe:	693b      	ldr	r3, [r7, #16]
 8010b00:	3301      	adds	r3, #1
 8010b02:	613b      	str	r3, [r7, #16]
 8010b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b06:	693a      	ldr	r2, [r7, #16]
 8010b08:	429a      	cmp	r2, r3
 8010b0a:	d3b7      	bcc.n	8010a7c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b12:	691b      	ldr	r3, [r3, #16]
 8010b14:	68fa      	ldr	r2, [r7, #12]
 8010b16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010b1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010b1e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	2200      	movs	r2, #0
 8010b24:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8010b2c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8010b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d105      	bne.n	8010b40 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	699b      	ldr	r3, [r3, #24]
 8010b38:	f043 0210 	orr.w	r2, r3, #16
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	699a      	ldr	r2, [r3, #24]
 8010b44:	4b0e      	ldr	r3, [pc, #56]	; (8010b80 <USB_DevInit+0x2b4>)
 8010b46:	4313      	orrs	r3, r2
 8010b48:	687a      	ldr	r2, [r7, #4]
 8010b4a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8010b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d005      	beq.n	8010b5e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	699b      	ldr	r3, [r3, #24]
 8010b56:	f043 0208 	orr.w	r2, r3, #8
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8010b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b60:	2b01      	cmp	r3, #1
 8010b62:	d105      	bne.n	8010b70 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	699a      	ldr	r2, [r3, #24]
 8010b68:	4b06      	ldr	r3, [pc, #24]	; (8010b84 <USB_DevInit+0x2b8>)
 8010b6a:	4313      	orrs	r3, r2
 8010b6c:	687a      	ldr	r2, [r7, #4]
 8010b6e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8010b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b72:	4618      	mov	r0, r3
 8010b74:	3718      	adds	r7, #24
 8010b76:	46bd      	mov	sp, r7
 8010b78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010b7c:	b004      	add	sp, #16
 8010b7e:	4770      	bx	lr
 8010b80:	803c3800 	.word	0x803c3800
 8010b84:	40000004 	.word	0x40000004

08010b88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010b88:	b480      	push	{r7}
 8010b8a:	b085      	sub	sp, #20
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	6078      	str	r0, [r7, #4]
 8010b90:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8010b92:	2300      	movs	r3, #0
 8010b94:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010b96:	683b      	ldr	r3, [r7, #0]
 8010b98:	019b      	lsls	r3, r3, #6
 8010b9a:	f043 0220 	orr.w	r2, r3, #32
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	3301      	adds	r3, #1
 8010ba6:	60fb      	str	r3, [r7, #12]
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	4a09      	ldr	r2, [pc, #36]	; (8010bd0 <USB_FlushTxFifo+0x48>)
 8010bac:	4293      	cmp	r3, r2
 8010bae:	d901      	bls.n	8010bb4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8010bb0:	2303      	movs	r3, #3
 8010bb2:	e006      	b.n	8010bc2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	691b      	ldr	r3, [r3, #16]
 8010bb8:	f003 0320 	and.w	r3, r3, #32
 8010bbc:	2b20      	cmp	r3, #32
 8010bbe:	d0f0      	beq.n	8010ba2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8010bc0:	2300      	movs	r3, #0
}
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	3714      	adds	r7, #20
 8010bc6:	46bd      	mov	sp, r7
 8010bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bcc:	4770      	bx	lr
 8010bce:	bf00      	nop
 8010bd0:	00030d40 	.word	0x00030d40

08010bd4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8010bd4:	b480      	push	{r7}
 8010bd6:	b085      	sub	sp, #20
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8010bdc:	2300      	movs	r3, #0
 8010bde:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	2210      	movs	r2, #16
 8010be4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	3301      	adds	r3, #1
 8010bea:	60fb      	str	r3, [r7, #12]
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	4a09      	ldr	r2, [pc, #36]	; (8010c14 <USB_FlushRxFifo+0x40>)
 8010bf0:	4293      	cmp	r3, r2
 8010bf2:	d901      	bls.n	8010bf8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8010bf4:	2303      	movs	r3, #3
 8010bf6:	e006      	b.n	8010c06 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	691b      	ldr	r3, [r3, #16]
 8010bfc:	f003 0310 	and.w	r3, r3, #16
 8010c00:	2b10      	cmp	r3, #16
 8010c02:	d0f0      	beq.n	8010be6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8010c04:	2300      	movs	r3, #0
}
 8010c06:	4618      	mov	r0, r3
 8010c08:	3714      	adds	r7, #20
 8010c0a:	46bd      	mov	sp, r7
 8010c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c10:	4770      	bx	lr
 8010c12:	bf00      	nop
 8010c14:	00030d40 	.word	0x00030d40

08010c18 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8010c18:	b480      	push	{r7}
 8010c1a:	b085      	sub	sp, #20
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	6078      	str	r0, [r7, #4]
 8010c20:	460b      	mov	r3, r1
 8010c22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c2e:	681a      	ldr	r2, [r3, #0]
 8010c30:	78fb      	ldrb	r3, [r7, #3]
 8010c32:	68f9      	ldr	r1, [r7, #12]
 8010c34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010c38:	4313      	orrs	r3, r2
 8010c3a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8010c3c:	2300      	movs	r3, #0
}
 8010c3e:	4618      	mov	r0, r3
 8010c40:	3714      	adds	r7, #20
 8010c42:	46bd      	mov	sp, r7
 8010c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c48:	4770      	bx	lr

08010c4a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8010c4a:	b480      	push	{r7}
 8010c4c:	b087      	sub	sp, #28
 8010c4e:	af00      	add	r7, sp, #0
 8010c50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8010c56:	693b      	ldr	r3, [r7, #16]
 8010c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c5c:	689b      	ldr	r3, [r3, #8]
 8010c5e:	f003 0306 	and.w	r3, r3, #6
 8010c62:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d102      	bne.n	8010c70 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	75fb      	strb	r3, [r7, #23]
 8010c6e:	e00a      	b.n	8010c86 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	2b02      	cmp	r3, #2
 8010c74:	d002      	beq.n	8010c7c <USB_GetDevSpeed+0x32>
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	2b06      	cmp	r3, #6
 8010c7a:	d102      	bne.n	8010c82 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8010c7c:	2302      	movs	r3, #2
 8010c7e:	75fb      	strb	r3, [r7, #23]
 8010c80:	e001      	b.n	8010c86 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8010c82:	230f      	movs	r3, #15
 8010c84:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8010c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c88:	4618      	mov	r0, r3
 8010c8a:	371c      	adds	r7, #28
 8010c8c:	46bd      	mov	sp, r7
 8010c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c92:	4770      	bx	lr

08010c94 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010c94:	b480      	push	{r7}
 8010c96:	b085      	sub	sp, #20
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	6078      	str	r0, [r7, #4]
 8010c9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010ca2:	683b      	ldr	r3, [r7, #0]
 8010ca4:	781b      	ldrb	r3, [r3, #0]
 8010ca6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010ca8:	683b      	ldr	r3, [r7, #0]
 8010caa:	785b      	ldrb	r3, [r3, #1]
 8010cac:	2b01      	cmp	r3, #1
 8010cae:	d139      	bne.n	8010d24 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010cb6:	69da      	ldr	r2, [r3, #28]
 8010cb8:	683b      	ldr	r3, [r7, #0]
 8010cba:	781b      	ldrb	r3, [r3, #0]
 8010cbc:	f003 030f 	and.w	r3, r3, #15
 8010cc0:	2101      	movs	r1, #1
 8010cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8010cc6:	b29b      	uxth	r3, r3
 8010cc8:	68f9      	ldr	r1, [r7, #12]
 8010cca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010cce:	4313      	orrs	r3, r2
 8010cd0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8010cd2:	68bb      	ldr	r3, [r7, #8]
 8010cd4:	015a      	lsls	r2, r3, #5
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	4413      	add	r3, r2
 8010cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d153      	bne.n	8010d90 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010ce8:	68bb      	ldr	r3, [r7, #8]
 8010cea:	015a      	lsls	r2, r3, #5
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	4413      	add	r3, r2
 8010cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010cf4:	681a      	ldr	r2, [r3, #0]
 8010cf6:	683b      	ldr	r3, [r7, #0]
 8010cf8:	689b      	ldr	r3, [r3, #8]
 8010cfa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010cfe:	683b      	ldr	r3, [r7, #0]
 8010d00:	78db      	ldrb	r3, [r3, #3]
 8010d02:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010d04:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010d06:	68bb      	ldr	r3, [r7, #8]
 8010d08:	059b      	lsls	r3, r3, #22
 8010d0a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010d0c:	431a      	orrs	r2, r3
 8010d0e:	68bb      	ldr	r3, [r7, #8]
 8010d10:	0159      	lsls	r1, r3, #5
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	440b      	add	r3, r1
 8010d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d1a:	4619      	mov	r1, r3
 8010d1c:	4b20      	ldr	r3, [pc, #128]	; (8010da0 <USB_ActivateEndpoint+0x10c>)
 8010d1e:	4313      	orrs	r3, r2
 8010d20:	600b      	str	r3, [r1, #0]
 8010d22:	e035      	b.n	8010d90 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d2a:	69da      	ldr	r2, [r3, #28]
 8010d2c:	683b      	ldr	r3, [r7, #0]
 8010d2e:	781b      	ldrb	r3, [r3, #0]
 8010d30:	f003 030f 	and.w	r3, r3, #15
 8010d34:	2101      	movs	r1, #1
 8010d36:	fa01 f303 	lsl.w	r3, r1, r3
 8010d3a:	041b      	lsls	r3, r3, #16
 8010d3c:	68f9      	ldr	r1, [r7, #12]
 8010d3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010d42:	4313      	orrs	r3, r2
 8010d44:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8010d46:	68bb      	ldr	r3, [r7, #8]
 8010d48:	015a      	lsls	r2, r3, #5
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	4413      	add	r3, r2
 8010d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d119      	bne.n	8010d90 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010d5c:	68bb      	ldr	r3, [r7, #8]
 8010d5e:	015a      	lsls	r2, r3, #5
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	4413      	add	r3, r2
 8010d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d68:	681a      	ldr	r2, [r3, #0]
 8010d6a:	683b      	ldr	r3, [r7, #0]
 8010d6c:	689b      	ldr	r3, [r3, #8]
 8010d6e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8010d72:	683b      	ldr	r3, [r7, #0]
 8010d74:	78db      	ldrb	r3, [r3, #3]
 8010d76:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010d78:	430b      	orrs	r3, r1
 8010d7a:	431a      	orrs	r2, r3
 8010d7c:	68bb      	ldr	r3, [r7, #8]
 8010d7e:	0159      	lsls	r1, r3, #5
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	440b      	add	r3, r1
 8010d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d88:	4619      	mov	r1, r3
 8010d8a:	4b05      	ldr	r3, [pc, #20]	; (8010da0 <USB_ActivateEndpoint+0x10c>)
 8010d8c:	4313      	orrs	r3, r2
 8010d8e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8010d90:	2300      	movs	r3, #0
}
 8010d92:	4618      	mov	r0, r3
 8010d94:	3714      	adds	r7, #20
 8010d96:	46bd      	mov	sp, r7
 8010d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d9c:	4770      	bx	lr
 8010d9e:	bf00      	nop
 8010da0:	10008000 	.word	0x10008000

08010da4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010da4:	b480      	push	{r7}
 8010da6:	b085      	sub	sp, #20
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
 8010dac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010db2:	683b      	ldr	r3, [r7, #0]
 8010db4:	781b      	ldrb	r3, [r3, #0]
 8010db6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8010db8:	683b      	ldr	r3, [r7, #0]
 8010dba:	785b      	ldrb	r3, [r3, #1]
 8010dbc:	2b01      	cmp	r3, #1
 8010dbe:	d161      	bne.n	8010e84 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010dc0:	68bb      	ldr	r3, [r7, #8]
 8010dc2:	015a      	lsls	r2, r3, #5
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	4413      	add	r3, r2
 8010dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010dd6:	d11f      	bne.n	8010e18 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8010dd8:	68bb      	ldr	r3, [r7, #8]
 8010dda:	015a      	lsls	r2, r3, #5
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	4413      	add	r3, r2
 8010de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	68ba      	ldr	r2, [r7, #8]
 8010de8:	0151      	lsls	r1, r2, #5
 8010dea:	68fa      	ldr	r2, [r7, #12]
 8010dec:	440a      	add	r2, r1
 8010dee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010df2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010df6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8010df8:	68bb      	ldr	r3, [r7, #8]
 8010dfa:	015a      	lsls	r2, r3, #5
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	4413      	add	r3, r2
 8010e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	68ba      	ldr	r2, [r7, #8]
 8010e08:	0151      	lsls	r1, r2, #5
 8010e0a:	68fa      	ldr	r2, [r7, #12]
 8010e0c:	440a      	add	r2, r1
 8010e0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010e12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010e16:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010e20:	683b      	ldr	r3, [r7, #0]
 8010e22:	781b      	ldrb	r3, [r3, #0]
 8010e24:	f003 030f 	and.w	r3, r3, #15
 8010e28:	2101      	movs	r1, #1
 8010e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8010e2e:	b29b      	uxth	r3, r3
 8010e30:	43db      	mvns	r3, r3
 8010e32:	68f9      	ldr	r1, [r7, #12]
 8010e34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010e38:	4013      	ands	r3, r2
 8010e3a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e42:	69da      	ldr	r2, [r3, #28]
 8010e44:	683b      	ldr	r3, [r7, #0]
 8010e46:	781b      	ldrb	r3, [r3, #0]
 8010e48:	f003 030f 	and.w	r3, r3, #15
 8010e4c:	2101      	movs	r1, #1
 8010e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8010e52:	b29b      	uxth	r3, r3
 8010e54:	43db      	mvns	r3, r3
 8010e56:	68f9      	ldr	r1, [r7, #12]
 8010e58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010e5c:	4013      	ands	r3, r2
 8010e5e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8010e60:	68bb      	ldr	r3, [r7, #8]
 8010e62:	015a      	lsls	r2, r3, #5
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	4413      	add	r3, r2
 8010e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e6c:	681a      	ldr	r2, [r3, #0]
 8010e6e:	68bb      	ldr	r3, [r7, #8]
 8010e70:	0159      	lsls	r1, r3, #5
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	440b      	add	r3, r1
 8010e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e7a:	4619      	mov	r1, r3
 8010e7c:	4b35      	ldr	r3, [pc, #212]	; (8010f54 <USB_DeactivateEndpoint+0x1b0>)
 8010e7e:	4013      	ands	r3, r2
 8010e80:	600b      	str	r3, [r1, #0]
 8010e82:	e060      	b.n	8010f46 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010e84:	68bb      	ldr	r3, [r7, #8]
 8010e86:	015a      	lsls	r2, r3, #5
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	4413      	add	r3, r2
 8010e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010e96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010e9a:	d11f      	bne.n	8010edc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8010e9c:	68bb      	ldr	r3, [r7, #8]
 8010e9e:	015a      	lsls	r2, r3, #5
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	4413      	add	r3, r2
 8010ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	68ba      	ldr	r2, [r7, #8]
 8010eac:	0151      	lsls	r1, r2, #5
 8010eae:	68fa      	ldr	r2, [r7, #12]
 8010eb0:	440a      	add	r2, r1
 8010eb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010eb6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010eba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8010ebc:	68bb      	ldr	r3, [r7, #8]
 8010ebe:	015a      	lsls	r2, r3, #5
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	4413      	add	r3, r2
 8010ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	68ba      	ldr	r2, [r7, #8]
 8010ecc:	0151      	lsls	r1, r2, #5
 8010ece:	68fa      	ldr	r2, [r7, #12]
 8010ed0:	440a      	add	r2, r1
 8010ed2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010ed6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010eda:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ee2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010ee4:	683b      	ldr	r3, [r7, #0]
 8010ee6:	781b      	ldrb	r3, [r3, #0]
 8010ee8:	f003 030f 	and.w	r3, r3, #15
 8010eec:	2101      	movs	r1, #1
 8010eee:	fa01 f303 	lsl.w	r3, r1, r3
 8010ef2:	041b      	lsls	r3, r3, #16
 8010ef4:	43db      	mvns	r3, r3
 8010ef6:	68f9      	ldr	r1, [r7, #12]
 8010ef8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010efc:	4013      	ands	r3, r2
 8010efe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f06:	69da      	ldr	r2, [r3, #28]
 8010f08:	683b      	ldr	r3, [r7, #0]
 8010f0a:	781b      	ldrb	r3, [r3, #0]
 8010f0c:	f003 030f 	and.w	r3, r3, #15
 8010f10:	2101      	movs	r1, #1
 8010f12:	fa01 f303 	lsl.w	r3, r1, r3
 8010f16:	041b      	lsls	r3, r3, #16
 8010f18:	43db      	mvns	r3, r3
 8010f1a:	68f9      	ldr	r1, [r7, #12]
 8010f1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010f20:	4013      	ands	r3, r2
 8010f22:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8010f24:	68bb      	ldr	r3, [r7, #8]
 8010f26:	015a      	lsls	r2, r3, #5
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	4413      	add	r3, r2
 8010f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f30:	681a      	ldr	r2, [r3, #0]
 8010f32:	68bb      	ldr	r3, [r7, #8]
 8010f34:	0159      	lsls	r1, r3, #5
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	440b      	add	r3, r1
 8010f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f3e:	4619      	mov	r1, r3
 8010f40:	4b05      	ldr	r3, [pc, #20]	; (8010f58 <USB_DeactivateEndpoint+0x1b4>)
 8010f42:	4013      	ands	r3, r2
 8010f44:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8010f46:	2300      	movs	r3, #0
}
 8010f48:	4618      	mov	r0, r3
 8010f4a:	3714      	adds	r7, #20
 8010f4c:	46bd      	mov	sp, r7
 8010f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f52:	4770      	bx	lr
 8010f54:	ec337800 	.word	0xec337800
 8010f58:	eff37800 	.word	0xeff37800

08010f5c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010f5c:	b580      	push	{r7, lr}
 8010f5e:	b08a      	sub	sp, #40	; 0x28
 8010f60:	af02      	add	r7, sp, #8
 8010f62:	60f8      	str	r0, [r7, #12]
 8010f64:	60b9      	str	r1, [r7, #8]
 8010f66:	4613      	mov	r3, r2
 8010f68:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8010f6e:	68bb      	ldr	r3, [r7, #8]
 8010f70:	781b      	ldrb	r3, [r3, #0]
 8010f72:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010f74:	68bb      	ldr	r3, [r7, #8]
 8010f76:	785b      	ldrb	r3, [r3, #1]
 8010f78:	2b01      	cmp	r3, #1
 8010f7a:	f040 8163 	bne.w	8011244 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010f7e:	68bb      	ldr	r3, [r7, #8]
 8010f80:	695b      	ldr	r3, [r3, #20]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d132      	bne.n	8010fec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010f86:	69bb      	ldr	r3, [r7, #24]
 8010f88:	015a      	lsls	r2, r3, #5
 8010f8a:	69fb      	ldr	r3, [r7, #28]
 8010f8c:	4413      	add	r3, r2
 8010f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f92:	691a      	ldr	r2, [r3, #16]
 8010f94:	69bb      	ldr	r3, [r7, #24]
 8010f96:	0159      	lsls	r1, r3, #5
 8010f98:	69fb      	ldr	r3, [r7, #28]
 8010f9a:	440b      	add	r3, r1
 8010f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fa0:	4619      	mov	r1, r3
 8010fa2:	4ba5      	ldr	r3, [pc, #660]	; (8011238 <USB_EPStartXfer+0x2dc>)
 8010fa4:	4013      	ands	r3, r2
 8010fa6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010fa8:	69bb      	ldr	r3, [r7, #24]
 8010faa:	015a      	lsls	r2, r3, #5
 8010fac:	69fb      	ldr	r3, [r7, #28]
 8010fae:	4413      	add	r3, r2
 8010fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fb4:	691b      	ldr	r3, [r3, #16]
 8010fb6:	69ba      	ldr	r2, [r7, #24]
 8010fb8:	0151      	lsls	r1, r2, #5
 8010fba:	69fa      	ldr	r2, [r7, #28]
 8010fbc:	440a      	add	r2, r1
 8010fbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010fc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010fc6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010fc8:	69bb      	ldr	r3, [r7, #24]
 8010fca:	015a      	lsls	r2, r3, #5
 8010fcc:	69fb      	ldr	r3, [r7, #28]
 8010fce:	4413      	add	r3, r2
 8010fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fd4:	691a      	ldr	r2, [r3, #16]
 8010fd6:	69bb      	ldr	r3, [r7, #24]
 8010fd8:	0159      	lsls	r1, r3, #5
 8010fda:	69fb      	ldr	r3, [r7, #28]
 8010fdc:	440b      	add	r3, r1
 8010fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fe2:	4619      	mov	r1, r3
 8010fe4:	4b95      	ldr	r3, [pc, #596]	; (801123c <USB_EPStartXfer+0x2e0>)
 8010fe6:	4013      	ands	r3, r2
 8010fe8:	610b      	str	r3, [r1, #16]
 8010fea:	e074      	b.n	80110d6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010fec:	69bb      	ldr	r3, [r7, #24]
 8010fee:	015a      	lsls	r2, r3, #5
 8010ff0:	69fb      	ldr	r3, [r7, #28]
 8010ff2:	4413      	add	r3, r2
 8010ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ff8:	691a      	ldr	r2, [r3, #16]
 8010ffa:	69bb      	ldr	r3, [r7, #24]
 8010ffc:	0159      	lsls	r1, r3, #5
 8010ffe:	69fb      	ldr	r3, [r7, #28]
 8011000:	440b      	add	r3, r1
 8011002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011006:	4619      	mov	r1, r3
 8011008:	4b8c      	ldr	r3, [pc, #560]	; (801123c <USB_EPStartXfer+0x2e0>)
 801100a:	4013      	ands	r3, r2
 801100c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801100e:	69bb      	ldr	r3, [r7, #24]
 8011010:	015a      	lsls	r2, r3, #5
 8011012:	69fb      	ldr	r3, [r7, #28]
 8011014:	4413      	add	r3, r2
 8011016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801101a:	691a      	ldr	r2, [r3, #16]
 801101c:	69bb      	ldr	r3, [r7, #24]
 801101e:	0159      	lsls	r1, r3, #5
 8011020:	69fb      	ldr	r3, [r7, #28]
 8011022:	440b      	add	r3, r1
 8011024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011028:	4619      	mov	r1, r3
 801102a:	4b83      	ldr	r3, [pc, #524]	; (8011238 <USB_EPStartXfer+0x2dc>)
 801102c:	4013      	ands	r3, r2
 801102e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8011030:	69bb      	ldr	r3, [r7, #24]
 8011032:	015a      	lsls	r2, r3, #5
 8011034:	69fb      	ldr	r3, [r7, #28]
 8011036:	4413      	add	r3, r2
 8011038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801103c:	691a      	ldr	r2, [r3, #16]
 801103e:	68bb      	ldr	r3, [r7, #8]
 8011040:	6959      	ldr	r1, [r3, #20]
 8011042:	68bb      	ldr	r3, [r7, #8]
 8011044:	689b      	ldr	r3, [r3, #8]
 8011046:	440b      	add	r3, r1
 8011048:	1e59      	subs	r1, r3, #1
 801104a:	68bb      	ldr	r3, [r7, #8]
 801104c:	689b      	ldr	r3, [r3, #8]
 801104e:	fbb1 f3f3 	udiv	r3, r1, r3
 8011052:	04d9      	lsls	r1, r3, #19
 8011054:	4b7a      	ldr	r3, [pc, #488]	; (8011240 <USB_EPStartXfer+0x2e4>)
 8011056:	400b      	ands	r3, r1
 8011058:	69b9      	ldr	r1, [r7, #24]
 801105a:	0148      	lsls	r0, r1, #5
 801105c:	69f9      	ldr	r1, [r7, #28]
 801105e:	4401      	add	r1, r0
 8011060:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011064:	4313      	orrs	r3, r2
 8011066:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011068:	69bb      	ldr	r3, [r7, #24]
 801106a:	015a      	lsls	r2, r3, #5
 801106c:	69fb      	ldr	r3, [r7, #28]
 801106e:	4413      	add	r3, r2
 8011070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011074:	691a      	ldr	r2, [r3, #16]
 8011076:	68bb      	ldr	r3, [r7, #8]
 8011078:	695b      	ldr	r3, [r3, #20]
 801107a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801107e:	69b9      	ldr	r1, [r7, #24]
 8011080:	0148      	lsls	r0, r1, #5
 8011082:	69f9      	ldr	r1, [r7, #28]
 8011084:	4401      	add	r1, r0
 8011086:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801108a:	4313      	orrs	r3, r2
 801108c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801108e:	68bb      	ldr	r3, [r7, #8]
 8011090:	78db      	ldrb	r3, [r3, #3]
 8011092:	2b01      	cmp	r3, #1
 8011094:	d11f      	bne.n	80110d6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8011096:	69bb      	ldr	r3, [r7, #24]
 8011098:	015a      	lsls	r2, r3, #5
 801109a:	69fb      	ldr	r3, [r7, #28]
 801109c:	4413      	add	r3, r2
 801109e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80110a2:	691b      	ldr	r3, [r3, #16]
 80110a4:	69ba      	ldr	r2, [r7, #24]
 80110a6:	0151      	lsls	r1, r2, #5
 80110a8:	69fa      	ldr	r2, [r7, #28]
 80110aa:	440a      	add	r2, r1
 80110ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80110b0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80110b4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80110b6:	69bb      	ldr	r3, [r7, #24]
 80110b8:	015a      	lsls	r2, r3, #5
 80110ba:	69fb      	ldr	r3, [r7, #28]
 80110bc:	4413      	add	r3, r2
 80110be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80110c2:	691b      	ldr	r3, [r3, #16]
 80110c4:	69ba      	ldr	r2, [r7, #24]
 80110c6:	0151      	lsls	r1, r2, #5
 80110c8:	69fa      	ldr	r2, [r7, #28]
 80110ca:	440a      	add	r2, r1
 80110cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80110d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80110d4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80110d6:	79fb      	ldrb	r3, [r7, #7]
 80110d8:	2b01      	cmp	r3, #1
 80110da:	d14b      	bne.n	8011174 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80110dc:	68bb      	ldr	r3, [r7, #8]
 80110de:	691b      	ldr	r3, [r3, #16]
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d009      	beq.n	80110f8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80110e4:	69bb      	ldr	r3, [r7, #24]
 80110e6:	015a      	lsls	r2, r3, #5
 80110e8:	69fb      	ldr	r3, [r7, #28]
 80110ea:	4413      	add	r3, r2
 80110ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80110f0:	461a      	mov	r2, r3
 80110f2:	68bb      	ldr	r3, [r7, #8]
 80110f4:	691b      	ldr	r3, [r3, #16]
 80110f6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80110f8:	68bb      	ldr	r3, [r7, #8]
 80110fa:	78db      	ldrb	r3, [r3, #3]
 80110fc:	2b01      	cmp	r3, #1
 80110fe:	d128      	bne.n	8011152 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011100:	69fb      	ldr	r3, [r7, #28]
 8011102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011106:	689b      	ldr	r3, [r3, #8]
 8011108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801110c:	2b00      	cmp	r3, #0
 801110e:	d110      	bne.n	8011132 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011110:	69bb      	ldr	r3, [r7, #24]
 8011112:	015a      	lsls	r2, r3, #5
 8011114:	69fb      	ldr	r3, [r7, #28]
 8011116:	4413      	add	r3, r2
 8011118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	69ba      	ldr	r2, [r7, #24]
 8011120:	0151      	lsls	r1, r2, #5
 8011122:	69fa      	ldr	r2, [r7, #28]
 8011124:	440a      	add	r2, r1
 8011126:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801112a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801112e:	6013      	str	r3, [r2, #0]
 8011130:	e00f      	b.n	8011152 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011132:	69bb      	ldr	r3, [r7, #24]
 8011134:	015a      	lsls	r2, r3, #5
 8011136:	69fb      	ldr	r3, [r7, #28]
 8011138:	4413      	add	r3, r2
 801113a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	69ba      	ldr	r2, [r7, #24]
 8011142:	0151      	lsls	r1, r2, #5
 8011144:	69fa      	ldr	r2, [r7, #28]
 8011146:	440a      	add	r2, r1
 8011148:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801114c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011150:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011152:	69bb      	ldr	r3, [r7, #24]
 8011154:	015a      	lsls	r2, r3, #5
 8011156:	69fb      	ldr	r3, [r7, #28]
 8011158:	4413      	add	r3, r2
 801115a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	69ba      	ldr	r2, [r7, #24]
 8011162:	0151      	lsls	r1, r2, #5
 8011164:	69fa      	ldr	r2, [r7, #28]
 8011166:	440a      	add	r2, r1
 8011168:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801116c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011170:	6013      	str	r3, [r2, #0]
 8011172:	e133      	b.n	80113dc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011174:	69bb      	ldr	r3, [r7, #24]
 8011176:	015a      	lsls	r2, r3, #5
 8011178:	69fb      	ldr	r3, [r7, #28]
 801117a:	4413      	add	r3, r2
 801117c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	69ba      	ldr	r2, [r7, #24]
 8011184:	0151      	lsls	r1, r2, #5
 8011186:	69fa      	ldr	r2, [r7, #28]
 8011188:	440a      	add	r2, r1
 801118a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801118e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011192:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011194:	68bb      	ldr	r3, [r7, #8]
 8011196:	78db      	ldrb	r3, [r3, #3]
 8011198:	2b01      	cmp	r3, #1
 801119a:	d015      	beq.n	80111c8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801119c:	68bb      	ldr	r3, [r7, #8]
 801119e:	695b      	ldr	r3, [r3, #20]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	f000 811b 	beq.w	80113dc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80111a6:	69fb      	ldr	r3, [r7, #28]
 80111a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80111ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80111ae:	68bb      	ldr	r3, [r7, #8]
 80111b0:	781b      	ldrb	r3, [r3, #0]
 80111b2:	f003 030f 	and.w	r3, r3, #15
 80111b6:	2101      	movs	r1, #1
 80111b8:	fa01 f303 	lsl.w	r3, r1, r3
 80111bc:	69f9      	ldr	r1, [r7, #28]
 80111be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80111c2:	4313      	orrs	r3, r2
 80111c4:	634b      	str	r3, [r1, #52]	; 0x34
 80111c6:	e109      	b.n	80113dc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80111c8:	69fb      	ldr	r3, [r7, #28]
 80111ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80111ce:	689b      	ldr	r3, [r3, #8]
 80111d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d110      	bne.n	80111fa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80111d8:	69bb      	ldr	r3, [r7, #24]
 80111da:	015a      	lsls	r2, r3, #5
 80111dc:	69fb      	ldr	r3, [r7, #28]
 80111de:	4413      	add	r3, r2
 80111e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	69ba      	ldr	r2, [r7, #24]
 80111e8:	0151      	lsls	r1, r2, #5
 80111ea:	69fa      	ldr	r2, [r7, #28]
 80111ec:	440a      	add	r2, r1
 80111ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80111f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80111f6:	6013      	str	r3, [r2, #0]
 80111f8:	e00f      	b.n	801121a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80111fa:	69bb      	ldr	r3, [r7, #24]
 80111fc:	015a      	lsls	r2, r3, #5
 80111fe:	69fb      	ldr	r3, [r7, #28]
 8011200:	4413      	add	r3, r2
 8011202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	69ba      	ldr	r2, [r7, #24]
 801120a:	0151      	lsls	r1, r2, #5
 801120c:	69fa      	ldr	r2, [r7, #28]
 801120e:	440a      	add	r2, r1
 8011210:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011218:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801121a:	68bb      	ldr	r3, [r7, #8]
 801121c:	68d9      	ldr	r1, [r3, #12]
 801121e:	68bb      	ldr	r3, [r7, #8]
 8011220:	781a      	ldrb	r2, [r3, #0]
 8011222:	68bb      	ldr	r3, [r7, #8]
 8011224:	695b      	ldr	r3, [r3, #20]
 8011226:	b298      	uxth	r0, r3
 8011228:	79fb      	ldrb	r3, [r7, #7]
 801122a:	9300      	str	r3, [sp, #0]
 801122c:	4603      	mov	r3, r0
 801122e:	68f8      	ldr	r0, [r7, #12]
 8011230:	f000 fa38 	bl	80116a4 <USB_WritePacket>
 8011234:	e0d2      	b.n	80113dc <USB_EPStartXfer+0x480>
 8011236:	bf00      	nop
 8011238:	e007ffff 	.word	0xe007ffff
 801123c:	fff80000 	.word	0xfff80000
 8011240:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011244:	69bb      	ldr	r3, [r7, #24]
 8011246:	015a      	lsls	r2, r3, #5
 8011248:	69fb      	ldr	r3, [r7, #28]
 801124a:	4413      	add	r3, r2
 801124c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011250:	691a      	ldr	r2, [r3, #16]
 8011252:	69bb      	ldr	r3, [r7, #24]
 8011254:	0159      	lsls	r1, r3, #5
 8011256:	69fb      	ldr	r3, [r7, #28]
 8011258:	440b      	add	r3, r1
 801125a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801125e:	4619      	mov	r1, r3
 8011260:	4b61      	ldr	r3, [pc, #388]	; (80113e8 <USB_EPStartXfer+0x48c>)
 8011262:	4013      	ands	r3, r2
 8011264:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8011266:	69bb      	ldr	r3, [r7, #24]
 8011268:	015a      	lsls	r2, r3, #5
 801126a:	69fb      	ldr	r3, [r7, #28]
 801126c:	4413      	add	r3, r2
 801126e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011272:	691a      	ldr	r2, [r3, #16]
 8011274:	69bb      	ldr	r3, [r7, #24]
 8011276:	0159      	lsls	r1, r3, #5
 8011278:	69fb      	ldr	r3, [r7, #28]
 801127a:	440b      	add	r3, r1
 801127c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011280:	4619      	mov	r1, r3
 8011282:	4b5a      	ldr	r3, [pc, #360]	; (80113ec <USB_EPStartXfer+0x490>)
 8011284:	4013      	ands	r3, r2
 8011286:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8011288:	68bb      	ldr	r3, [r7, #8]
 801128a:	695b      	ldr	r3, [r3, #20]
 801128c:	2b00      	cmp	r3, #0
 801128e:	d123      	bne.n	80112d8 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8011290:	69bb      	ldr	r3, [r7, #24]
 8011292:	015a      	lsls	r2, r3, #5
 8011294:	69fb      	ldr	r3, [r7, #28]
 8011296:	4413      	add	r3, r2
 8011298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801129c:	691a      	ldr	r2, [r3, #16]
 801129e:	68bb      	ldr	r3, [r7, #8]
 80112a0:	689b      	ldr	r3, [r3, #8]
 80112a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80112a6:	69b9      	ldr	r1, [r7, #24]
 80112a8:	0148      	lsls	r0, r1, #5
 80112aa:	69f9      	ldr	r1, [r7, #28]
 80112ac:	4401      	add	r1, r0
 80112ae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80112b2:	4313      	orrs	r3, r2
 80112b4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80112b6:	69bb      	ldr	r3, [r7, #24]
 80112b8:	015a      	lsls	r2, r3, #5
 80112ba:	69fb      	ldr	r3, [r7, #28]
 80112bc:	4413      	add	r3, r2
 80112be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80112c2:	691b      	ldr	r3, [r3, #16]
 80112c4:	69ba      	ldr	r2, [r7, #24]
 80112c6:	0151      	lsls	r1, r2, #5
 80112c8:	69fa      	ldr	r2, [r7, #28]
 80112ca:	440a      	add	r2, r1
 80112cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80112d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80112d4:	6113      	str	r3, [r2, #16]
 80112d6:	e033      	b.n	8011340 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80112d8:	68bb      	ldr	r3, [r7, #8]
 80112da:	695a      	ldr	r2, [r3, #20]
 80112dc:	68bb      	ldr	r3, [r7, #8]
 80112de:	689b      	ldr	r3, [r3, #8]
 80112e0:	4413      	add	r3, r2
 80112e2:	1e5a      	subs	r2, r3, #1
 80112e4:	68bb      	ldr	r3, [r7, #8]
 80112e6:	689b      	ldr	r3, [r3, #8]
 80112e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80112ec:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80112ee:	69bb      	ldr	r3, [r7, #24]
 80112f0:	015a      	lsls	r2, r3, #5
 80112f2:	69fb      	ldr	r3, [r7, #28]
 80112f4:	4413      	add	r3, r2
 80112f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80112fa:	691a      	ldr	r2, [r3, #16]
 80112fc:	8afb      	ldrh	r3, [r7, #22]
 80112fe:	04d9      	lsls	r1, r3, #19
 8011300:	4b3b      	ldr	r3, [pc, #236]	; (80113f0 <USB_EPStartXfer+0x494>)
 8011302:	400b      	ands	r3, r1
 8011304:	69b9      	ldr	r1, [r7, #24]
 8011306:	0148      	lsls	r0, r1, #5
 8011308:	69f9      	ldr	r1, [r7, #28]
 801130a:	4401      	add	r1, r0
 801130c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011310:	4313      	orrs	r3, r2
 8011312:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8011314:	69bb      	ldr	r3, [r7, #24]
 8011316:	015a      	lsls	r2, r3, #5
 8011318:	69fb      	ldr	r3, [r7, #28]
 801131a:	4413      	add	r3, r2
 801131c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011320:	691a      	ldr	r2, [r3, #16]
 8011322:	68bb      	ldr	r3, [r7, #8]
 8011324:	689b      	ldr	r3, [r3, #8]
 8011326:	8af9      	ldrh	r1, [r7, #22]
 8011328:	fb01 f303 	mul.w	r3, r1, r3
 801132c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011330:	69b9      	ldr	r1, [r7, #24]
 8011332:	0148      	lsls	r0, r1, #5
 8011334:	69f9      	ldr	r1, [r7, #28]
 8011336:	4401      	add	r1, r0
 8011338:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801133c:	4313      	orrs	r3, r2
 801133e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8011340:	79fb      	ldrb	r3, [r7, #7]
 8011342:	2b01      	cmp	r3, #1
 8011344:	d10d      	bne.n	8011362 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8011346:	68bb      	ldr	r3, [r7, #8]
 8011348:	68db      	ldr	r3, [r3, #12]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d009      	beq.n	8011362 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801134e:	68bb      	ldr	r3, [r7, #8]
 8011350:	68d9      	ldr	r1, [r3, #12]
 8011352:	69bb      	ldr	r3, [r7, #24]
 8011354:	015a      	lsls	r2, r3, #5
 8011356:	69fb      	ldr	r3, [r7, #28]
 8011358:	4413      	add	r3, r2
 801135a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801135e:	460a      	mov	r2, r1
 8011360:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8011362:	68bb      	ldr	r3, [r7, #8]
 8011364:	78db      	ldrb	r3, [r3, #3]
 8011366:	2b01      	cmp	r3, #1
 8011368:	d128      	bne.n	80113bc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801136a:	69fb      	ldr	r3, [r7, #28]
 801136c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011370:	689b      	ldr	r3, [r3, #8]
 8011372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011376:	2b00      	cmp	r3, #0
 8011378:	d110      	bne.n	801139c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801137a:	69bb      	ldr	r3, [r7, #24]
 801137c:	015a      	lsls	r2, r3, #5
 801137e:	69fb      	ldr	r3, [r7, #28]
 8011380:	4413      	add	r3, r2
 8011382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	69ba      	ldr	r2, [r7, #24]
 801138a:	0151      	lsls	r1, r2, #5
 801138c:	69fa      	ldr	r2, [r7, #28]
 801138e:	440a      	add	r2, r1
 8011390:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011394:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011398:	6013      	str	r3, [r2, #0]
 801139a:	e00f      	b.n	80113bc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801139c:	69bb      	ldr	r3, [r7, #24]
 801139e:	015a      	lsls	r2, r3, #5
 80113a0:	69fb      	ldr	r3, [r7, #28]
 80113a2:	4413      	add	r3, r2
 80113a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	69ba      	ldr	r2, [r7, #24]
 80113ac:	0151      	lsls	r1, r2, #5
 80113ae:	69fa      	ldr	r2, [r7, #28]
 80113b0:	440a      	add	r2, r1
 80113b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80113b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80113ba:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80113bc:	69bb      	ldr	r3, [r7, #24]
 80113be:	015a      	lsls	r2, r3, #5
 80113c0:	69fb      	ldr	r3, [r7, #28]
 80113c2:	4413      	add	r3, r2
 80113c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	69ba      	ldr	r2, [r7, #24]
 80113cc:	0151      	lsls	r1, r2, #5
 80113ce:	69fa      	ldr	r2, [r7, #28]
 80113d0:	440a      	add	r2, r1
 80113d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80113d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80113da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80113dc:	2300      	movs	r3, #0
}
 80113de:	4618      	mov	r0, r3
 80113e0:	3720      	adds	r7, #32
 80113e2:	46bd      	mov	sp, r7
 80113e4:	bd80      	pop	{r7, pc}
 80113e6:	bf00      	nop
 80113e8:	fff80000 	.word	0xfff80000
 80113ec:	e007ffff 	.word	0xe007ffff
 80113f0:	1ff80000 	.word	0x1ff80000

080113f4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80113f4:	b480      	push	{r7}
 80113f6:	b087      	sub	sp, #28
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	60f8      	str	r0, [r7, #12]
 80113fc:	60b9      	str	r1, [r7, #8]
 80113fe:	4613      	mov	r3, r2
 8011400:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8011406:	68bb      	ldr	r3, [r7, #8]
 8011408:	781b      	ldrb	r3, [r3, #0]
 801140a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801140c:	68bb      	ldr	r3, [r7, #8]
 801140e:	785b      	ldrb	r3, [r3, #1]
 8011410:	2b01      	cmp	r3, #1
 8011412:	f040 80cd 	bne.w	80115b0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8011416:	68bb      	ldr	r3, [r7, #8]
 8011418:	695b      	ldr	r3, [r3, #20]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d132      	bne.n	8011484 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801141e:	693b      	ldr	r3, [r7, #16]
 8011420:	015a      	lsls	r2, r3, #5
 8011422:	697b      	ldr	r3, [r7, #20]
 8011424:	4413      	add	r3, r2
 8011426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801142a:	691a      	ldr	r2, [r3, #16]
 801142c:	693b      	ldr	r3, [r7, #16]
 801142e:	0159      	lsls	r1, r3, #5
 8011430:	697b      	ldr	r3, [r7, #20]
 8011432:	440b      	add	r3, r1
 8011434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011438:	4619      	mov	r1, r3
 801143a:	4b98      	ldr	r3, [pc, #608]	; (801169c <USB_EP0StartXfer+0x2a8>)
 801143c:	4013      	ands	r3, r2
 801143e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011440:	693b      	ldr	r3, [r7, #16]
 8011442:	015a      	lsls	r2, r3, #5
 8011444:	697b      	ldr	r3, [r7, #20]
 8011446:	4413      	add	r3, r2
 8011448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801144c:	691b      	ldr	r3, [r3, #16]
 801144e:	693a      	ldr	r2, [r7, #16]
 8011450:	0151      	lsls	r1, r2, #5
 8011452:	697a      	ldr	r2, [r7, #20]
 8011454:	440a      	add	r2, r1
 8011456:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801145a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801145e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011460:	693b      	ldr	r3, [r7, #16]
 8011462:	015a      	lsls	r2, r3, #5
 8011464:	697b      	ldr	r3, [r7, #20]
 8011466:	4413      	add	r3, r2
 8011468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801146c:	691a      	ldr	r2, [r3, #16]
 801146e:	693b      	ldr	r3, [r7, #16]
 8011470:	0159      	lsls	r1, r3, #5
 8011472:	697b      	ldr	r3, [r7, #20]
 8011474:	440b      	add	r3, r1
 8011476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801147a:	4619      	mov	r1, r3
 801147c:	4b88      	ldr	r3, [pc, #544]	; (80116a0 <USB_EP0StartXfer+0x2ac>)
 801147e:	4013      	ands	r3, r2
 8011480:	610b      	str	r3, [r1, #16]
 8011482:	e04e      	b.n	8011522 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011484:	693b      	ldr	r3, [r7, #16]
 8011486:	015a      	lsls	r2, r3, #5
 8011488:	697b      	ldr	r3, [r7, #20]
 801148a:	4413      	add	r3, r2
 801148c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011490:	691a      	ldr	r2, [r3, #16]
 8011492:	693b      	ldr	r3, [r7, #16]
 8011494:	0159      	lsls	r1, r3, #5
 8011496:	697b      	ldr	r3, [r7, #20]
 8011498:	440b      	add	r3, r1
 801149a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801149e:	4619      	mov	r1, r3
 80114a0:	4b7f      	ldr	r3, [pc, #508]	; (80116a0 <USB_EP0StartXfer+0x2ac>)
 80114a2:	4013      	ands	r3, r2
 80114a4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80114a6:	693b      	ldr	r3, [r7, #16]
 80114a8:	015a      	lsls	r2, r3, #5
 80114aa:	697b      	ldr	r3, [r7, #20]
 80114ac:	4413      	add	r3, r2
 80114ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80114b2:	691a      	ldr	r2, [r3, #16]
 80114b4:	693b      	ldr	r3, [r7, #16]
 80114b6:	0159      	lsls	r1, r3, #5
 80114b8:	697b      	ldr	r3, [r7, #20]
 80114ba:	440b      	add	r3, r1
 80114bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80114c0:	4619      	mov	r1, r3
 80114c2:	4b76      	ldr	r3, [pc, #472]	; (801169c <USB_EP0StartXfer+0x2a8>)
 80114c4:	4013      	ands	r3, r2
 80114c6:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 80114c8:	68bb      	ldr	r3, [r7, #8]
 80114ca:	695a      	ldr	r2, [r3, #20]
 80114cc:	68bb      	ldr	r3, [r7, #8]
 80114ce:	689b      	ldr	r3, [r3, #8]
 80114d0:	429a      	cmp	r2, r3
 80114d2:	d903      	bls.n	80114dc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80114d4:	68bb      	ldr	r3, [r7, #8]
 80114d6:	689a      	ldr	r2, [r3, #8]
 80114d8:	68bb      	ldr	r3, [r7, #8]
 80114da:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80114dc:	693b      	ldr	r3, [r7, #16]
 80114de:	015a      	lsls	r2, r3, #5
 80114e0:	697b      	ldr	r3, [r7, #20]
 80114e2:	4413      	add	r3, r2
 80114e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80114e8:	691b      	ldr	r3, [r3, #16]
 80114ea:	693a      	ldr	r2, [r7, #16]
 80114ec:	0151      	lsls	r1, r2, #5
 80114ee:	697a      	ldr	r2, [r7, #20]
 80114f0:	440a      	add	r2, r1
 80114f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80114f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80114fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80114fc:	693b      	ldr	r3, [r7, #16]
 80114fe:	015a      	lsls	r2, r3, #5
 8011500:	697b      	ldr	r3, [r7, #20]
 8011502:	4413      	add	r3, r2
 8011504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011508:	691a      	ldr	r2, [r3, #16]
 801150a:	68bb      	ldr	r3, [r7, #8]
 801150c:	695b      	ldr	r3, [r3, #20]
 801150e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011512:	6939      	ldr	r1, [r7, #16]
 8011514:	0148      	lsls	r0, r1, #5
 8011516:	6979      	ldr	r1, [r7, #20]
 8011518:	4401      	add	r1, r0
 801151a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801151e:	4313      	orrs	r3, r2
 8011520:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8011522:	79fb      	ldrb	r3, [r7, #7]
 8011524:	2b01      	cmp	r3, #1
 8011526:	d11e      	bne.n	8011566 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8011528:	68bb      	ldr	r3, [r7, #8]
 801152a:	691b      	ldr	r3, [r3, #16]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d009      	beq.n	8011544 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8011530:	693b      	ldr	r3, [r7, #16]
 8011532:	015a      	lsls	r2, r3, #5
 8011534:	697b      	ldr	r3, [r7, #20]
 8011536:	4413      	add	r3, r2
 8011538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801153c:	461a      	mov	r2, r3
 801153e:	68bb      	ldr	r3, [r7, #8]
 8011540:	691b      	ldr	r3, [r3, #16]
 8011542:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011544:	693b      	ldr	r3, [r7, #16]
 8011546:	015a      	lsls	r2, r3, #5
 8011548:	697b      	ldr	r3, [r7, #20]
 801154a:	4413      	add	r3, r2
 801154c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	693a      	ldr	r2, [r7, #16]
 8011554:	0151      	lsls	r1, r2, #5
 8011556:	697a      	ldr	r2, [r7, #20]
 8011558:	440a      	add	r2, r1
 801155a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801155e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011562:	6013      	str	r3, [r2, #0]
 8011564:	e092      	b.n	801168c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011566:	693b      	ldr	r3, [r7, #16]
 8011568:	015a      	lsls	r2, r3, #5
 801156a:	697b      	ldr	r3, [r7, #20]
 801156c:	4413      	add	r3, r2
 801156e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	693a      	ldr	r2, [r7, #16]
 8011576:	0151      	lsls	r1, r2, #5
 8011578:	697a      	ldr	r2, [r7, #20]
 801157a:	440a      	add	r2, r1
 801157c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011580:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011584:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8011586:	68bb      	ldr	r3, [r7, #8]
 8011588:	695b      	ldr	r3, [r3, #20]
 801158a:	2b00      	cmp	r3, #0
 801158c:	d07e      	beq.n	801168c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801158e:	697b      	ldr	r3, [r7, #20]
 8011590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011594:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011596:	68bb      	ldr	r3, [r7, #8]
 8011598:	781b      	ldrb	r3, [r3, #0]
 801159a:	f003 030f 	and.w	r3, r3, #15
 801159e:	2101      	movs	r1, #1
 80115a0:	fa01 f303 	lsl.w	r3, r1, r3
 80115a4:	6979      	ldr	r1, [r7, #20]
 80115a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80115aa:	4313      	orrs	r3, r2
 80115ac:	634b      	str	r3, [r1, #52]	; 0x34
 80115ae:	e06d      	b.n	801168c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80115b0:	693b      	ldr	r3, [r7, #16]
 80115b2:	015a      	lsls	r2, r3, #5
 80115b4:	697b      	ldr	r3, [r7, #20]
 80115b6:	4413      	add	r3, r2
 80115b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80115bc:	691a      	ldr	r2, [r3, #16]
 80115be:	693b      	ldr	r3, [r7, #16]
 80115c0:	0159      	lsls	r1, r3, #5
 80115c2:	697b      	ldr	r3, [r7, #20]
 80115c4:	440b      	add	r3, r1
 80115c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80115ca:	4619      	mov	r1, r3
 80115cc:	4b34      	ldr	r3, [pc, #208]	; (80116a0 <USB_EP0StartXfer+0x2ac>)
 80115ce:	4013      	ands	r3, r2
 80115d0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80115d2:	693b      	ldr	r3, [r7, #16]
 80115d4:	015a      	lsls	r2, r3, #5
 80115d6:	697b      	ldr	r3, [r7, #20]
 80115d8:	4413      	add	r3, r2
 80115da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80115de:	691a      	ldr	r2, [r3, #16]
 80115e0:	693b      	ldr	r3, [r7, #16]
 80115e2:	0159      	lsls	r1, r3, #5
 80115e4:	697b      	ldr	r3, [r7, #20]
 80115e6:	440b      	add	r3, r1
 80115e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80115ec:	4619      	mov	r1, r3
 80115ee:	4b2b      	ldr	r3, [pc, #172]	; (801169c <USB_EP0StartXfer+0x2a8>)
 80115f0:	4013      	ands	r3, r2
 80115f2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80115f4:	68bb      	ldr	r3, [r7, #8]
 80115f6:	695b      	ldr	r3, [r3, #20]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d003      	beq.n	8011604 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80115fc:	68bb      	ldr	r3, [r7, #8]
 80115fe:	689a      	ldr	r2, [r3, #8]
 8011600:	68bb      	ldr	r3, [r7, #8]
 8011602:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011604:	693b      	ldr	r3, [r7, #16]
 8011606:	015a      	lsls	r2, r3, #5
 8011608:	697b      	ldr	r3, [r7, #20]
 801160a:	4413      	add	r3, r2
 801160c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011610:	691b      	ldr	r3, [r3, #16]
 8011612:	693a      	ldr	r2, [r7, #16]
 8011614:	0151      	lsls	r1, r2, #5
 8011616:	697a      	ldr	r2, [r7, #20]
 8011618:	440a      	add	r2, r1
 801161a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801161e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011622:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8011624:	693b      	ldr	r3, [r7, #16]
 8011626:	015a      	lsls	r2, r3, #5
 8011628:	697b      	ldr	r3, [r7, #20]
 801162a:	4413      	add	r3, r2
 801162c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011630:	691a      	ldr	r2, [r3, #16]
 8011632:	68bb      	ldr	r3, [r7, #8]
 8011634:	689b      	ldr	r3, [r3, #8]
 8011636:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801163a:	6939      	ldr	r1, [r7, #16]
 801163c:	0148      	lsls	r0, r1, #5
 801163e:	6979      	ldr	r1, [r7, #20]
 8011640:	4401      	add	r1, r0
 8011642:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011646:	4313      	orrs	r3, r2
 8011648:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 801164a:	79fb      	ldrb	r3, [r7, #7]
 801164c:	2b01      	cmp	r3, #1
 801164e:	d10d      	bne.n	801166c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8011650:	68bb      	ldr	r3, [r7, #8]
 8011652:	68db      	ldr	r3, [r3, #12]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d009      	beq.n	801166c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8011658:	68bb      	ldr	r3, [r7, #8]
 801165a:	68d9      	ldr	r1, [r3, #12]
 801165c:	693b      	ldr	r3, [r7, #16]
 801165e:	015a      	lsls	r2, r3, #5
 8011660:	697b      	ldr	r3, [r7, #20]
 8011662:	4413      	add	r3, r2
 8011664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011668:	460a      	mov	r2, r1
 801166a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801166c:	693b      	ldr	r3, [r7, #16]
 801166e:	015a      	lsls	r2, r3, #5
 8011670:	697b      	ldr	r3, [r7, #20]
 8011672:	4413      	add	r3, r2
 8011674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	693a      	ldr	r2, [r7, #16]
 801167c:	0151      	lsls	r1, r2, #5
 801167e:	697a      	ldr	r2, [r7, #20]
 8011680:	440a      	add	r2, r1
 8011682:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011686:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801168a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801168c:	2300      	movs	r3, #0
}
 801168e:	4618      	mov	r0, r3
 8011690:	371c      	adds	r7, #28
 8011692:	46bd      	mov	sp, r7
 8011694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011698:	4770      	bx	lr
 801169a:	bf00      	nop
 801169c:	e007ffff 	.word	0xe007ffff
 80116a0:	fff80000 	.word	0xfff80000

080116a4 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80116a4:	b480      	push	{r7}
 80116a6:	b089      	sub	sp, #36	; 0x24
 80116a8:	af00      	add	r7, sp, #0
 80116aa:	60f8      	str	r0, [r7, #12]
 80116ac:	60b9      	str	r1, [r7, #8]
 80116ae:	4611      	mov	r1, r2
 80116b0:	461a      	mov	r2, r3
 80116b2:	460b      	mov	r3, r1
 80116b4:	71fb      	strb	r3, [r7, #7]
 80116b6:	4613      	mov	r3, r2
 80116b8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80116be:	68bb      	ldr	r3, [r7, #8]
 80116c0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80116c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d11a      	bne.n	8011700 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80116ca:	88bb      	ldrh	r3, [r7, #4]
 80116cc:	3303      	adds	r3, #3
 80116ce:	089b      	lsrs	r3, r3, #2
 80116d0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80116d2:	2300      	movs	r3, #0
 80116d4:	61bb      	str	r3, [r7, #24]
 80116d6:	e00f      	b.n	80116f8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80116d8:	79fb      	ldrb	r3, [r7, #7]
 80116da:	031a      	lsls	r2, r3, #12
 80116dc:	697b      	ldr	r3, [r7, #20]
 80116de:	4413      	add	r3, r2
 80116e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80116e4:	461a      	mov	r2, r3
 80116e6:	69fb      	ldr	r3, [r7, #28]
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	6013      	str	r3, [r2, #0]
      pSrc++;
 80116ec:	69fb      	ldr	r3, [r7, #28]
 80116ee:	3304      	adds	r3, #4
 80116f0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80116f2:	69bb      	ldr	r3, [r7, #24]
 80116f4:	3301      	adds	r3, #1
 80116f6:	61bb      	str	r3, [r7, #24]
 80116f8:	69ba      	ldr	r2, [r7, #24]
 80116fa:	693b      	ldr	r3, [r7, #16]
 80116fc:	429a      	cmp	r2, r3
 80116fe:	d3eb      	bcc.n	80116d8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8011700:	2300      	movs	r3, #0
}
 8011702:	4618      	mov	r0, r3
 8011704:	3724      	adds	r7, #36	; 0x24
 8011706:	46bd      	mov	sp, r7
 8011708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801170c:	4770      	bx	lr

0801170e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801170e:	b480      	push	{r7}
 8011710:	b089      	sub	sp, #36	; 0x24
 8011712:	af00      	add	r7, sp, #0
 8011714:	60f8      	str	r0, [r7, #12]
 8011716:	60b9      	str	r1, [r7, #8]
 8011718:	4613      	mov	r3, r2
 801171a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8011720:	68bb      	ldr	r3, [r7, #8]
 8011722:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8011724:	88fb      	ldrh	r3, [r7, #6]
 8011726:	3303      	adds	r3, #3
 8011728:	089b      	lsrs	r3, r3, #2
 801172a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 801172c:	2300      	movs	r3, #0
 801172e:	61bb      	str	r3, [r7, #24]
 8011730:	e00b      	b.n	801174a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8011732:	697b      	ldr	r3, [r7, #20]
 8011734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011738:	681a      	ldr	r2, [r3, #0]
 801173a:	69fb      	ldr	r3, [r7, #28]
 801173c:	601a      	str	r2, [r3, #0]
    pDest++;
 801173e:	69fb      	ldr	r3, [r7, #28]
 8011740:	3304      	adds	r3, #4
 8011742:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8011744:	69bb      	ldr	r3, [r7, #24]
 8011746:	3301      	adds	r3, #1
 8011748:	61bb      	str	r3, [r7, #24]
 801174a:	69ba      	ldr	r2, [r7, #24]
 801174c:	693b      	ldr	r3, [r7, #16]
 801174e:	429a      	cmp	r2, r3
 8011750:	d3ef      	bcc.n	8011732 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8011752:	69fb      	ldr	r3, [r7, #28]
}
 8011754:	4618      	mov	r0, r3
 8011756:	3724      	adds	r7, #36	; 0x24
 8011758:	46bd      	mov	sp, r7
 801175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801175e:	4770      	bx	lr

08011760 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011760:	b480      	push	{r7}
 8011762:	b085      	sub	sp, #20
 8011764:	af00      	add	r7, sp, #0
 8011766:	6078      	str	r0, [r7, #4]
 8011768:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801176e:	683b      	ldr	r3, [r7, #0]
 8011770:	781b      	ldrb	r3, [r3, #0]
 8011772:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011774:	683b      	ldr	r3, [r7, #0]
 8011776:	785b      	ldrb	r3, [r3, #1]
 8011778:	2b01      	cmp	r3, #1
 801177a:	d12c      	bne.n	80117d6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801177c:	68bb      	ldr	r3, [r7, #8]
 801177e:	015a      	lsls	r2, r3, #5
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	4413      	add	r3, r2
 8011784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	2b00      	cmp	r3, #0
 801178c:	db12      	blt.n	80117b4 <USB_EPSetStall+0x54>
 801178e:	68bb      	ldr	r3, [r7, #8]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d00f      	beq.n	80117b4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8011794:	68bb      	ldr	r3, [r7, #8]
 8011796:	015a      	lsls	r2, r3, #5
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	4413      	add	r3, r2
 801179c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	68ba      	ldr	r2, [r7, #8]
 80117a4:	0151      	lsls	r1, r2, #5
 80117a6:	68fa      	ldr	r2, [r7, #12]
 80117a8:	440a      	add	r2, r1
 80117aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80117ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80117b2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80117b4:	68bb      	ldr	r3, [r7, #8]
 80117b6:	015a      	lsls	r2, r3, #5
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	4413      	add	r3, r2
 80117bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	68ba      	ldr	r2, [r7, #8]
 80117c4:	0151      	lsls	r1, r2, #5
 80117c6:	68fa      	ldr	r2, [r7, #12]
 80117c8:	440a      	add	r2, r1
 80117ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80117ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80117d2:	6013      	str	r3, [r2, #0]
 80117d4:	e02b      	b.n	801182e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80117d6:	68bb      	ldr	r3, [r7, #8]
 80117d8:	015a      	lsls	r2, r3, #5
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	4413      	add	r3, r2
 80117de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	db12      	blt.n	801180e <USB_EPSetStall+0xae>
 80117e8:	68bb      	ldr	r3, [r7, #8]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d00f      	beq.n	801180e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80117ee:	68bb      	ldr	r3, [r7, #8]
 80117f0:	015a      	lsls	r2, r3, #5
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	4413      	add	r3, r2
 80117f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	68ba      	ldr	r2, [r7, #8]
 80117fe:	0151      	lsls	r1, r2, #5
 8011800:	68fa      	ldr	r2, [r7, #12]
 8011802:	440a      	add	r2, r1
 8011804:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011808:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801180c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801180e:	68bb      	ldr	r3, [r7, #8]
 8011810:	015a      	lsls	r2, r3, #5
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	4413      	add	r3, r2
 8011816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	68ba      	ldr	r2, [r7, #8]
 801181e:	0151      	lsls	r1, r2, #5
 8011820:	68fa      	ldr	r2, [r7, #12]
 8011822:	440a      	add	r2, r1
 8011824:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011828:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801182c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801182e:	2300      	movs	r3, #0
}
 8011830:	4618      	mov	r0, r3
 8011832:	3714      	adds	r7, #20
 8011834:	46bd      	mov	sp, r7
 8011836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801183a:	4770      	bx	lr

0801183c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801183c:	b480      	push	{r7}
 801183e:	b085      	sub	sp, #20
 8011840:	af00      	add	r7, sp, #0
 8011842:	6078      	str	r0, [r7, #4]
 8011844:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801184a:	683b      	ldr	r3, [r7, #0]
 801184c:	781b      	ldrb	r3, [r3, #0]
 801184e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011850:	683b      	ldr	r3, [r7, #0]
 8011852:	785b      	ldrb	r3, [r3, #1]
 8011854:	2b01      	cmp	r3, #1
 8011856:	d128      	bne.n	80118aa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8011858:	68bb      	ldr	r3, [r7, #8]
 801185a:	015a      	lsls	r2, r3, #5
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	4413      	add	r3, r2
 8011860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	68ba      	ldr	r2, [r7, #8]
 8011868:	0151      	lsls	r1, r2, #5
 801186a:	68fa      	ldr	r2, [r7, #12]
 801186c:	440a      	add	r2, r1
 801186e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011872:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011876:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011878:	683b      	ldr	r3, [r7, #0]
 801187a:	78db      	ldrb	r3, [r3, #3]
 801187c:	2b03      	cmp	r3, #3
 801187e:	d003      	beq.n	8011888 <USB_EPClearStall+0x4c>
 8011880:	683b      	ldr	r3, [r7, #0]
 8011882:	78db      	ldrb	r3, [r3, #3]
 8011884:	2b02      	cmp	r3, #2
 8011886:	d138      	bne.n	80118fa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011888:	68bb      	ldr	r3, [r7, #8]
 801188a:	015a      	lsls	r2, r3, #5
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	4413      	add	r3, r2
 8011890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	68ba      	ldr	r2, [r7, #8]
 8011898:	0151      	lsls	r1, r2, #5
 801189a:	68fa      	ldr	r2, [r7, #12]
 801189c:	440a      	add	r2, r1
 801189e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80118a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80118a6:	6013      	str	r3, [r2, #0]
 80118a8:	e027      	b.n	80118fa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80118aa:	68bb      	ldr	r3, [r7, #8]
 80118ac:	015a      	lsls	r2, r3, #5
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	4413      	add	r3, r2
 80118b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	68ba      	ldr	r2, [r7, #8]
 80118ba:	0151      	lsls	r1, r2, #5
 80118bc:	68fa      	ldr	r2, [r7, #12]
 80118be:	440a      	add	r2, r1
 80118c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80118c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80118c8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80118ca:	683b      	ldr	r3, [r7, #0]
 80118cc:	78db      	ldrb	r3, [r3, #3]
 80118ce:	2b03      	cmp	r3, #3
 80118d0:	d003      	beq.n	80118da <USB_EPClearStall+0x9e>
 80118d2:	683b      	ldr	r3, [r7, #0]
 80118d4:	78db      	ldrb	r3, [r3, #3]
 80118d6:	2b02      	cmp	r3, #2
 80118d8:	d10f      	bne.n	80118fa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80118da:	68bb      	ldr	r3, [r7, #8]
 80118dc:	015a      	lsls	r2, r3, #5
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	4413      	add	r3, r2
 80118e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	68ba      	ldr	r2, [r7, #8]
 80118ea:	0151      	lsls	r1, r2, #5
 80118ec:	68fa      	ldr	r2, [r7, #12]
 80118ee:	440a      	add	r2, r1
 80118f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80118f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80118f8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80118fa:	2300      	movs	r3, #0
}
 80118fc:	4618      	mov	r0, r3
 80118fe:	3714      	adds	r7, #20
 8011900:	46bd      	mov	sp, r7
 8011902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011906:	4770      	bx	lr

08011908 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8011908:	b480      	push	{r7}
 801190a:	b085      	sub	sp, #20
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
 8011910:	460b      	mov	r3, r1
 8011912:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	68fa      	ldr	r2, [r7, #12]
 8011922:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011926:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801192a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011932:	681a      	ldr	r2, [r3, #0]
 8011934:	78fb      	ldrb	r3, [r7, #3]
 8011936:	011b      	lsls	r3, r3, #4
 8011938:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801193c:	68f9      	ldr	r1, [r7, #12]
 801193e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011942:	4313      	orrs	r3, r2
 8011944:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8011946:	2300      	movs	r3, #0
}
 8011948:	4618      	mov	r0, r3
 801194a:	3714      	adds	r7, #20
 801194c:	46bd      	mov	sp, r7
 801194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011952:	4770      	bx	lr

08011954 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8011954:	b580      	push	{r7, lr}
 8011956:	b084      	sub	sp, #16
 8011958:	af00      	add	r7, sp, #0
 801195a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011966:	685b      	ldr	r3, [r3, #4]
 8011968:	68fa      	ldr	r2, [r7, #12]
 801196a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801196e:	f023 0302 	bic.w	r3, r3, #2
 8011972:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8011974:	2003      	movs	r0, #3
 8011976:	f7f1 fc29 	bl	80031cc <HAL_Delay>

  return HAL_OK;
 801197a:	2300      	movs	r3, #0
}
 801197c:	4618      	mov	r0, r3
 801197e:	3710      	adds	r7, #16
 8011980:	46bd      	mov	sp, r7
 8011982:	bd80      	pop	{r7, pc}

08011984 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8011984:	b580      	push	{r7, lr}
 8011986:	b084      	sub	sp, #16
 8011988:	af00      	add	r7, sp, #0
 801198a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011996:	685b      	ldr	r3, [r3, #4]
 8011998:	68fa      	ldr	r2, [r7, #12]
 801199a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801199e:	f043 0302 	orr.w	r3, r3, #2
 80119a2:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80119a4:	2003      	movs	r0, #3
 80119a6:	f7f1 fc11 	bl	80031cc <HAL_Delay>

  return HAL_OK;
 80119aa:	2300      	movs	r3, #0
}
 80119ac:	4618      	mov	r0, r3
 80119ae:	3710      	adds	r7, #16
 80119b0:	46bd      	mov	sp, r7
 80119b2:	bd80      	pop	{r7, pc}

080119b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80119b4:	b480      	push	{r7}
 80119b6:	b085      	sub	sp, #20
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	695b      	ldr	r3, [r3, #20]
 80119c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	699b      	ldr	r3, [r3, #24]
 80119c6:	68fa      	ldr	r2, [r7, #12]
 80119c8:	4013      	ands	r3, r2
 80119ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80119cc:	68fb      	ldr	r3, [r7, #12]
}
 80119ce:	4618      	mov	r0, r3
 80119d0:	3714      	adds	r7, #20
 80119d2:	46bd      	mov	sp, r7
 80119d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d8:	4770      	bx	lr

080119da <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80119da:	b480      	push	{r7}
 80119dc:	b085      	sub	sp, #20
 80119de:	af00      	add	r7, sp, #0
 80119e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80119ec:	699b      	ldr	r3, [r3, #24]
 80119ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80119f6:	69db      	ldr	r3, [r3, #28]
 80119f8:	68ba      	ldr	r2, [r7, #8]
 80119fa:	4013      	ands	r3, r2
 80119fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80119fe:	68bb      	ldr	r3, [r7, #8]
 8011a00:	0c1b      	lsrs	r3, r3, #16
}
 8011a02:	4618      	mov	r0, r3
 8011a04:	3714      	adds	r7, #20
 8011a06:	46bd      	mov	sp, r7
 8011a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a0c:	4770      	bx	lr

08011a0e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8011a0e:	b480      	push	{r7}
 8011a10:	b085      	sub	sp, #20
 8011a12:	af00      	add	r7, sp, #0
 8011a14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011a20:	699b      	ldr	r3, [r3, #24]
 8011a22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011a2a:	69db      	ldr	r3, [r3, #28]
 8011a2c:	68ba      	ldr	r2, [r7, #8]
 8011a2e:	4013      	ands	r3, r2
 8011a30:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8011a32:	68bb      	ldr	r3, [r7, #8]
 8011a34:	b29b      	uxth	r3, r3
}
 8011a36:	4618      	mov	r0, r3
 8011a38:	3714      	adds	r7, #20
 8011a3a:	46bd      	mov	sp, r7
 8011a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a40:	4770      	bx	lr

08011a42 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011a42:	b480      	push	{r7}
 8011a44:	b085      	sub	sp, #20
 8011a46:	af00      	add	r7, sp, #0
 8011a48:	6078      	str	r0, [r7, #4]
 8011a4a:	460b      	mov	r3, r1
 8011a4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8011a52:	78fb      	ldrb	r3, [r7, #3]
 8011a54:	015a      	lsls	r2, r3, #5
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	4413      	add	r3, r2
 8011a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a5e:	689b      	ldr	r3, [r3, #8]
 8011a60:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011a68:	695b      	ldr	r3, [r3, #20]
 8011a6a:	68ba      	ldr	r2, [r7, #8]
 8011a6c:	4013      	ands	r3, r2
 8011a6e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011a70:	68bb      	ldr	r3, [r7, #8]
}
 8011a72:	4618      	mov	r0, r3
 8011a74:	3714      	adds	r7, #20
 8011a76:	46bd      	mov	sp, r7
 8011a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a7c:	4770      	bx	lr

08011a7e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011a7e:	b480      	push	{r7}
 8011a80:	b087      	sub	sp, #28
 8011a82:	af00      	add	r7, sp, #0
 8011a84:	6078      	str	r0, [r7, #4]
 8011a86:	460b      	mov	r3, r1
 8011a88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8011a8e:	697b      	ldr	r3, [r7, #20]
 8011a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011a94:	691b      	ldr	r3, [r3, #16]
 8011a96:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8011a98:	697b      	ldr	r3, [r7, #20]
 8011a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011aa0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8011aa2:	78fb      	ldrb	r3, [r7, #3]
 8011aa4:	f003 030f 	and.w	r3, r3, #15
 8011aa8:	68fa      	ldr	r2, [r7, #12]
 8011aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8011aae:	01db      	lsls	r3, r3, #7
 8011ab0:	b2db      	uxtb	r3, r3
 8011ab2:	693a      	ldr	r2, [r7, #16]
 8011ab4:	4313      	orrs	r3, r2
 8011ab6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8011ab8:	78fb      	ldrb	r3, [r7, #3]
 8011aba:	015a      	lsls	r2, r3, #5
 8011abc:	697b      	ldr	r3, [r7, #20]
 8011abe:	4413      	add	r3, r2
 8011ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ac4:	689b      	ldr	r3, [r3, #8]
 8011ac6:	693a      	ldr	r2, [r7, #16]
 8011ac8:	4013      	ands	r3, r2
 8011aca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011acc:	68bb      	ldr	r3, [r7, #8]
}
 8011ace:	4618      	mov	r0, r3
 8011ad0:	371c      	adds	r7, #28
 8011ad2:	46bd      	mov	sp, r7
 8011ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad8:	4770      	bx	lr

08011ada <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8011ada:	b480      	push	{r7}
 8011adc:	b083      	sub	sp, #12
 8011ade:	af00      	add	r7, sp, #0
 8011ae0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	695b      	ldr	r3, [r3, #20]
 8011ae6:	f003 0301 	and.w	r3, r3, #1
}
 8011aea:	4618      	mov	r0, r3
 8011aec:	370c      	adds	r7, #12
 8011aee:	46bd      	mov	sp, r7
 8011af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af4:	4770      	bx	lr
	...

08011af8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8011af8:	b480      	push	{r7}
 8011afa:	b085      	sub	sp, #20
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b0a:	681a      	ldr	r2, [r3, #0]
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b12:	4619      	mov	r1, r3
 8011b14:	4b09      	ldr	r3, [pc, #36]	; (8011b3c <USB_ActivateSetup+0x44>)
 8011b16:	4013      	ands	r3, r2
 8011b18:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011b20:	685b      	ldr	r3, [r3, #4]
 8011b22:	68fa      	ldr	r2, [r7, #12]
 8011b24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011b2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011b2e:	2300      	movs	r3, #0
}
 8011b30:	4618      	mov	r0, r3
 8011b32:	3714      	adds	r7, #20
 8011b34:	46bd      	mov	sp, r7
 8011b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b3a:	4770      	bx	lr
 8011b3c:	fffff800 	.word	0xfffff800

08011b40 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8011b40:	b480      	push	{r7}
 8011b42:	b087      	sub	sp, #28
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	60f8      	str	r0, [r7, #12]
 8011b48:	460b      	mov	r3, r1
 8011b4a:	607a      	str	r2, [r7, #4]
 8011b4c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	333c      	adds	r3, #60	; 0x3c
 8011b56:	3304      	adds	r3, #4
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8011b5c:	693b      	ldr	r3, [r7, #16]
 8011b5e:	4a26      	ldr	r2, [pc, #152]	; (8011bf8 <USB_EP0_OutStart+0xb8>)
 8011b60:	4293      	cmp	r3, r2
 8011b62:	d90a      	bls.n	8011b7a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011b64:	697b      	ldr	r3, [r7, #20]
 8011b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011b70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011b74:	d101      	bne.n	8011b7a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8011b76:	2300      	movs	r3, #0
 8011b78:	e037      	b.n	8011bea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8011b7a:	697b      	ldr	r3, [r7, #20]
 8011b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b80:	461a      	mov	r2, r3
 8011b82:	2300      	movs	r3, #0
 8011b84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011b86:	697b      	ldr	r3, [r7, #20]
 8011b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b8c:	691b      	ldr	r3, [r3, #16]
 8011b8e:	697a      	ldr	r2, [r7, #20]
 8011b90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011b94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011b98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8011b9a:	697b      	ldr	r3, [r7, #20]
 8011b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ba0:	691b      	ldr	r3, [r3, #16]
 8011ba2:	697a      	ldr	r2, [r7, #20]
 8011ba4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011ba8:	f043 0318 	orr.w	r3, r3, #24
 8011bac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8011bae:	697b      	ldr	r3, [r7, #20]
 8011bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011bb4:	691b      	ldr	r3, [r3, #16]
 8011bb6:	697a      	ldr	r2, [r7, #20]
 8011bb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011bbc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8011bc0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8011bc2:	7afb      	ldrb	r3, [r7, #11]
 8011bc4:	2b01      	cmp	r3, #1
 8011bc6:	d10f      	bne.n	8011be8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8011bc8:	697b      	ldr	r3, [r7, #20]
 8011bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011bce:	461a      	mov	r2, r3
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8011bd4:	697b      	ldr	r3, [r7, #20]
 8011bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	697a      	ldr	r2, [r7, #20]
 8011bde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011be2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8011be6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011be8:	2300      	movs	r3, #0
}
 8011bea:	4618      	mov	r0, r3
 8011bec:	371c      	adds	r7, #28
 8011bee:	46bd      	mov	sp, r7
 8011bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf4:	4770      	bx	lr
 8011bf6:	bf00      	nop
 8011bf8:	4f54300a 	.word	0x4f54300a

08011bfc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011bfc:	b480      	push	{r7}
 8011bfe:	b085      	sub	sp, #20
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8011c04:	2300      	movs	r3, #0
 8011c06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	3301      	adds	r3, #1
 8011c0c:	60fb      	str	r3, [r7, #12]
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	4a13      	ldr	r2, [pc, #76]	; (8011c60 <USB_CoreReset+0x64>)
 8011c12:	4293      	cmp	r3, r2
 8011c14:	d901      	bls.n	8011c1a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8011c16:	2303      	movs	r3, #3
 8011c18:	e01b      	b.n	8011c52 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	691b      	ldr	r3, [r3, #16]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	daf2      	bge.n	8011c08 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8011c22:	2300      	movs	r3, #0
 8011c24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	691b      	ldr	r3, [r3, #16]
 8011c2a:	f043 0201 	orr.w	r2, r3, #1
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	3301      	adds	r3, #1
 8011c36:	60fb      	str	r3, [r7, #12]
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	4a09      	ldr	r2, [pc, #36]	; (8011c60 <USB_CoreReset+0x64>)
 8011c3c:	4293      	cmp	r3, r2
 8011c3e:	d901      	bls.n	8011c44 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8011c40:	2303      	movs	r3, #3
 8011c42:	e006      	b.n	8011c52 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	691b      	ldr	r3, [r3, #16]
 8011c48:	f003 0301 	and.w	r3, r3, #1
 8011c4c:	2b01      	cmp	r3, #1
 8011c4e:	d0f0      	beq.n	8011c32 <USB_CoreReset+0x36>

  return HAL_OK;
 8011c50:	2300      	movs	r3, #0
}
 8011c52:	4618      	mov	r0, r3
 8011c54:	3714      	adds	r7, #20
 8011c56:	46bd      	mov	sp, r7
 8011c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c5c:	4770      	bx	lr
 8011c5e:	bf00      	nop
 8011c60:	00030d40 	.word	0x00030d40

08011c64 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011c64:	b580      	push	{r7, lr}
 8011c66:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8011c68:	4904      	ldr	r1, [pc, #16]	; (8011c7c <MX_FATFS_Init+0x18>)
 8011c6a:	4805      	ldr	r0, [pc, #20]	; (8011c80 <MX_FATFS_Init+0x1c>)
 8011c6c:	f005 fbec 	bl	8017448 <FATFS_LinkDriver>
 8011c70:	4603      	mov	r3, r0
 8011c72:	461a      	mov	r2, r3
 8011c74:	4b03      	ldr	r3, [pc, #12]	; (8011c84 <MX_FATFS_Init+0x20>)
 8011c76:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8011c78:	bf00      	nop
 8011c7a:	bd80      	pop	{r7, pc}
 8011c7c:	24000f50 	.word	0x24000f50
 8011c80:	08019948 	.word	0x08019948
 8011c84:	24000f4c 	.word	0x24000f4c

08011c88 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8011c88:	b480      	push	{r7}
 8011c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8011c8c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8011c8e:	4618      	mov	r0, r3
 8011c90:	46bd      	mov	sp, r7
 8011c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c96:	4770      	bx	lr

08011c98 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8011c98:	b580      	push	{r7, lr}
 8011c9a:	b082      	sub	sp, #8
 8011c9c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8011ca2:	f000 f885 	bl	8011db0 <BSP_SD_IsDetected>
 8011ca6:	4603      	mov	r3, r0
 8011ca8:	2b01      	cmp	r3, #1
 8011caa:	d001      	beq.n	8011cb0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8011cac:	2302      	movs	r3, #2
 8011cae:	e012      	b.n	8011cd6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8011cb0:	480b      	ldr	r0, [pc, #44]	; (8011ce0 <BSP_SD_Init+0x48>)
 8011cb2:	f7f9 fc1d 	bl	800b4f0 <HAL_SD_Init>
 8011cb6:	4603      	mov	r3, r0
 8011cb8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8011cba:	79fb      	ldrb	r3, [r7, #7]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d109      	bne.n	8011cd4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8011cc0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8011cc4:	4806      	ldr	r0, [pc, #24]	; (8011ce0 <BSP_SD_Init+0x48>)
 8011cc6:	f7fa fdf1 	bl	800c8ac <HAL_SD_ConfigWideBusOperation>
 8011cca:	4603      	mov	r3, r0
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d001      	beq.n	8011cd4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8011cd0:	2301      	movs	r3, #1
 8011cd2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8011cd4:	79fb      	ldrb	r3, [r7, #7]
}
 8011cd6:	4618      	mov	r0, r3
 8011cd8:	3708      	adds	r7, #8
 8011cda:	46bd      	mov	sp, r7
 8011cdc:	bd80      	pop	{r7, pc}
 8011cde:	bf00      	nop
 8011ce0:	24000bf4 	.word	0x24000bf4

08011ce4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8011ce4:	b580      	push	{r7, lr}
 8011ce6:	b086      	sub	sp, #24
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	60f8      	str	r0, [r7, #12]
 8011cec:	60b9      	str	r1, [r7, #8]
 8011cee:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011cf0:	2300      	movs	r3, #0
 8011cf2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	68ba      	ldr	r2, [r7, #8]
 8011cf8:	68f9      	ldr	r1, [r7, #12]
 8011cfa:	4806      	ldr	r0, [pc, #24]	; (8011d14 <BSP_SD_ReadBlocks_DMA+0x30>)
 8011cfc:	f7fa f834 	bl	800bd68 <HAL_SD_ReadBlocks_DMA>
 8011d00:	4603      	mov	r3, r0
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d001      	beq.n	8011d0a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8011d06:	2301      	movs	r3, #1
 8011d08:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	3718      	adds	r7, #24
 8011d10:	46bd      	mov	sp, r7
 8011d12:	bd80      	pop	{r7, pc}
 8011d14:	24000bf4 	.word	0x24000bf4

08011d18 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8011d18:	b580      	push	{r7, lr}
 8011d1a:	b086      	sub	sp, #24
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	60f8      	str	r0, [r7, #12]
 8011d20:	60b9      	str	r1, [r7, #8]
 8011d22:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011d24:	2300      	movs	r3, #0
 8011d26:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	68ba      	ldr	r2, [r7, #8]
 8011d2c:	68f9      	ldr	r1, [r7, #12]
 8011d2e:	4806      	ldr	r0, [pc, #24]	; (8011d48 <BSP_SD_WriteBlocks_DMA+0x30>)
 8011d30:	f7fa f8c2 	bl	800beb8 <HAL_SD_WriteBlocks_DMA>
 8011d34:	4603      	mov	r3, r0
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d001      	beq.n	8011d3e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8011d3a:	2301      	movs	r3, #1
 8011d3c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d40:	4618      	mov	r0, r3
 8011d42:	3718      	adds	r7, #24
 8011d44:	46bd      	mov	sp, r7
 8011d46:	bd80      	pop	{r7, pc}
 8011d48:	24000bf4 	.word	0x24000bf4

08011d4c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011d4c:	b580      	push	{r7, lr}
 8011d4e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011d50:	4805      	ldr	r0, [pc, #20]	; (8011d68 <BSP_SD_GetCardState+0x1c>)
 8011d52:	f7fa fe55 	bl	800ca00 <HAL_SD_GetCardState>
 8011d56:	4603      	mov	r3, r0
 8011d58:	2b04      	cmp	r3, #4
 8011d5a:	bf14      	ite	ne
 8011d5c:	2301      	movne	r3, #1
 8011d5e:	2300      	moveq	r3, #0
 8011d60:	b2db      	uxtb	r3, r3
}
 8011d62:	4618      	mov	r0, r3
 8011d64:	bd80      	pop	{r7, pc}
 8011d66:	bf00      	nop
 8011d68:	24000bf4 	.word	0x24000bf4

08011d6c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011d6c:	b580      	push	{r7, lr}
 8011d6e:	b082      	sub	sp, #8
 8011d70:	af00      	add	r7, sp, #0
 8011d72:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8011d74:	6879      	ldr	r1, [r7, #4]
 8011d76:	4803      	ldr	r0, [pc, #12]	; (8011d84 <BSP_SD_GetCardInfo+0x18>)
 8011d78:	f7fa fd6c 	bl	800c854 <HAL_SD_GetCardInfo>
}
 8011d7c:	bf00      	nop
 8011d7e:	3708      	adds	r7, #8
 8011d80:	46bd      	mov	sp, r7
 8011d82:	bd80      	pop	{r7, pc}
 8011d84:	24000bf4 	.word	0x24000bf4

08011d88 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011d88:	b580      	push	{r7, lr}
 8011d8a:	b082      	sub	sp, #8
 8011d8c:	af00      	add	r7, sp, #0
 8011d8e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8011d90:	f000 f9a0 	bl	80120d4 <BSP_SD_WriteCpltCallback>
}
 8011d94:	bf00      	nop
 8011d96:	3708      	adds	r7, #8
 8011d98:	46bd      	mov	sp, r7
 8011d9a:	bd80      	pop	{r7, pc}

08011d9c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011d9c:	b580      	push	{r7, lr}
 8011d9e:	b082      	sub	sp, #8
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8011da4:	f000 f9a2 	bl	80120ec <BSP_SD_ReadCpltCallback>
}
 8011da8:	bf00      	nop
 8011daa:	3708      	adds	r7, #8
 8011dac:	46bd      	mov	sp, r7
 8011dae:	bd80      	pop	{r7, pc}

08011db0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8011db0:	b580      	push	{r7, lr}
 8011db2:	b082      	sub	sp, #8
 8011db4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8011db6:	2301      	movs	r3, #1
 8011db8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8011dba:	f000 f80b 	bl	8011dd4 <BSP_PlatformIsDetected>
 8011dbe:	4603      	mov	r3, r0
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d101      	bne.n	8011dc8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8011dc4:	2300      	movs	r3, #0
 8011dc6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8011dc8:	79fb      	ldrb	r3, [r7, #7]
 8011dca:	b2db      	uxtb	r3, r3
}
 8011dcc:	4618      	mov	r0, r3
 8011dce:	3708      	adds	r7, #8
 8011dd0:	46bd      	mov	sp, r7
 8011dd2:	bd80      	pop	{r7, pc}

08011dd4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8011dd4:	b580      	push	{r7, lr}
 8011dd6:	b082      	sub	sp, #8
 8011dd8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8011dda:	2301      	movs	r3, #1
 8011ddc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8011dde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011de2:	4806      	ldr	r0, [pc, #24]	; (8011dfc <BSP_PlatformIsDetected+0x28>)
 8011de4:	f7f4 fef4 	bl	8006bd0 <HAL_GPIO_ReadPin>
 8011de8:	4603      	mov	r3, r0
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d001      	beq.n	8011df2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8011dee:	2300      	movs	r3, #0
 8011df0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8011df2:	79fb      	ldrb	r3, [r7, #7]
}
 8011df4:	4618      	mov	r0, r3
 8011df6:	3708      	adds	r7, #8
 8011df8:	46bd      	mov	sp, r7
 8011dfa:	bd80      	pop	{r7, pc}
 8011dfc:	58020000 	.word	0x58020000

08011e00 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8011e00:	b580      	push	{r7, lr}
 8011e02:	b084      	sub	sp, #16
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8011e08:	f7f1 f9d4 	bl	80031b4 <HAL_GetTick>
 8011e0c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8011e0e:	e006      	b.n	8011e1e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011e10:	f7ff ff9c 	bl	8011d4c <BSP_SD_GetCardState>
 8011e14:	4603      	mov	r3, r0
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d101      	bne.n	8011e1e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8011e1a:	2300      	movs	r3, #0
 8011e1c:	e009      	b.n	8011e32 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8011e1e:	f7f1 f9c9 	bl	80031b4 <HAL_GetTick>
 8011e22:	4602      	mov	r2, r0
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	1ad3      	subs	r3, r2, r3
 8011e28:	687a      	ldr	r2, [r7, #4]
 8011e2a:	429a      	cmp	r2, r3
 8011e2c:	d8f0      	bhi.n	8011e10 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8011e2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011e32:	4618      	mov	r0, r3
 8011e34:	3710      	adds	r7, #16
 8011e36:	46bd      	mov	sp, r7
 8011e38:	bd80      	pop	{r7, pc}
	...

08011e3c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	b082      	sub	sp, #8
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	4603      	mov	r3, r0
 8011e44:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8011e46:	4b0b      	ldr	r3, [pc, #44]	; (8011e74 <SD_CheckStatus+0x38>)
 8011e48:	2201      	movs	r2, #1
 8011e4a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8011e4c:	f7ff ff7e 	bl	8011d4c <BSP_SD_GetCardState>
 8011e50:	4603      	mov	r3, r0
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d107      	bne.n	8011e66 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8011e56:	4b07      	ldr	r3, [pc, #28]	; (8011e74 <SD_CheckStatus+0x38>)
 8011e58:	781b      	ldrb	r3, [r3, #0]
 8011e5a:	b2db      	uxtb	r3, r3
 8011e5c:	f023 0301 	bic.w	r3, r3, #1
 8011e60:	b2da      	uxtb	r2, r3
 8011e62:	4b04      	ldr	r3, [pc, #16]	; (8011e74 <SD_CheckStatus+0x38>)
 8011e64:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8011e66:	4b03      	ldr	r3, [pc, #12]	; (8011e74 <SD_CheckStatus+0x38>)
 8011e68:	781b      	ldrb	r3, [r3, #0]
 8011e6a:	b2db      	uxtb	r3, r3
}
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	3708      	adds	r7, #8
 8011e70:	46bd      	mov	sp, r7
 8011e72:	bd80      	pop	{r7, pc}
 8011e74:	24000051 	.word	0x24000051

08011e78 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011e78:	b580      	push	{r7, lr}
 8011e7a:	b082      	sub	sp, #8
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	4603      	mov	r3, r0
 8011e80:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8011e82:	f7ff ff09 	bl	8011c98 <BSP_SD_Init>
 8011e86:	4603      	mov	r3, r0
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d107      	bne.n	8011e9c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8011e8c:	79fb      	ldrb	r3, [r7, #7]
 8011e8e:	4618      	mov	r0, r3
 8011e90:	f7ff ffd4 	bl	8011e3c <SD_CheckStatus>
 8011e94:	4603      	mov	r3, r0
 8011e96:	461a      	mov	r2, r3
 8011e98:	4b04      	ldr	r3, [pc, #16]	; (8011eac <SD_initialize+0x34>)
 8011e9a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8011e9c:	4b03      	ldr	r3, [pc, #12]	; (8011eac <SD_initialize+0x34>)
 8011e9e:	781b      	ldrb	r3, [r3, #0]
 8011ea0:	b2db      	uxtb	r3, r3
}
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	3708      	adds	r7, #8
 8011ea6:	46bd      	mov	sp, r7
 8011ea8:	bd80      	pop	{r7, pc}
 8011eaa:	bf00      	nop
 8011eac:	24000051 	.word	0x24000051

08011eb0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011eb0:	b580      	push	{r7, lr}
 8011eb2:	b082      	sub	sp, #8
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	4603      	mov	r3, r0
 8011eb8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8011eba:	79fb      	ldrb	r3, [r7, #7]
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	f7ff ffbd 	bl	8011e3c <SD_CheckStatus>
 8011ec2:	4603      	mov	r3, r0
}
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	3708      	adds	r7, #8
 8011ec8:	46bd      	mov	sp, r7
 8011eca:	bd80      	pop	{r7, pc}

08011ecc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011ecc:	b580      	push	{r7, lr}
 8011ece:	b086      	sub	sp, #24
 8011ed0:	af00      	add	r7, sp, #0
 8011ed2:	60b9      	str	r1, [r7, #8]
 8011ed4:	607a      	str	r2, [r7, #4]
 8011ed6:	603b      	str	r3, [r7, #0]
 8011ed8:	4603      	mov	r3, r0
 8011eda:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011edc:	2301      	movs	r3, #1
 8011ede:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011ee0:	f247 5030 	movw	r0, #30000	; 0x7530
 8011ee4:	f7ff ff8c 	bl	8011e00 <SD_CheckStatusWithTimeout>
 8011ee8:	4603      	mov	r3, r0
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	da01      	bge.n	8011ef2 <SD_read+0x26>
  {
    return res;
 8011eee:	7dfb      	ldrb	r3, [r7, #23]
 8011ef0:	e03b      	b.n	8011f6a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8011ef2:	683a      	ldr	r2, [r7, #0]
 8011ef4:	6879      	ldr	r1, [r7, #4]
 8011ef6:	68b8      	ldr	r0, [r7, #8]
 8011ef8:	f7ff fef4 	bl	8011ce4 <BSP_SD_ReadBlocks_DMA>
 8011efc:	4603      	mov	r3, r0
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d132      	bne.n	8011f68 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8011f02:	4b1c      	ldr	r3, [pc, #112]	; (8011f74 <SD_read+0xa8>)
 8011f04:	2200      	movs	r2, #0
 8011f06:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8011f08:	f7f1 f954 	bl	80031b4 <HAL_GetTick>
 8011f0c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8011f0e:	bf00      	nop
 8011f10:	4b18      	ldr	r3, [pc, #96]	; (8011f74 <SD_read+0xa8>)
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d108      	bne.n	8011f2a <SD_read+0x5e>
 8011f18:	f7f1 f94c 	bl	80031b4 <HAL_GetTick>
 8011f1c:	4602      	mov	r2, r0
 8011f1e:	693b      	ldr	r3, [r7, #16]
 8011f20:	1ad3      	subs	r3, r2, r3
 8011f22:	f247 522f 	movw	r2, #29999	; 0x752f
 8011f26:	4293      	cmp	r3, r2
 8011f28:	d9f2      	bls.n	8011f10 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8011f2a:	4b12      	ldr	r3, [pc, #72]	; (8011f74 <SD_read+0xa8>)
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d102      	bne.n	8011f38 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8011f32:	2301      	movs	r3, #1
 8011f34:	75fb      	strb	r3, [r7, #23]
 8011f36:	e017      	b.n	8011f68 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8011f38:	4b0e      	ldr	r3, [pc, #56]	; (8011f74 <SD_read+0xa8>)
 8011f3a:	2200      	movs	r2, #0
 8011f3c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8011f3e:	f7f1 f939 	bl	80031b4 <HAL_GetTick>
 8011f42:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011f44:	e007      	b.n	8011f56 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011f46:	f7ff ff01 	bl	8011d4c <BSP_SD_GetCardState>
 8011f4a:	4603      	mov	r3, r0
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d102      	bne.n	8011f56 <SD_read+0x8a>
          {
            res = RES_OK;
 8011f50:	2300      	movs	r3, #0
 8011f52:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8011f54:	e008      	b.n	8011f68 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011f56:	f7f1 f92d 	bl	80031b4 <HAL_GetTick>
 8011f5a:	4602      	mov	r2, r0
 8011f5c:	693b      	ldr	r3, [r7, #16]
 8011f5e:	1ad3      	subs	r3, r2, r3
 8011f60:	f247 522f 	movw	r2, #29999	; 0x752f
 8011f64:	4293      	cmp	r3, r2
 8011f66:	d9ee      	bls.n	8011f46 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8011f68:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	3718      	adds	r7, #24
 8011f6e:	46bd      	mov	sp, r7
 8011f70:	bd80      	pop	{r7, pc}
 8011f72:	bf00      	nop
 8011f74:	24000360 	.word	0x24000360

08011f78 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	b086      	sub	sp, #24
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	60b9      	str	r1, [r7, #8]
 8011f80:	607a      	str	r2, [r7, #4]
 8011f82:	603b      	str	r3, [r7, #0]
 8011f84:	4603      	mov	r3, r0
 8011f86:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011f88:	2301      	movs	r3, #1
 8011f8a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8011f8c:	4b24      	ldr	r3, [pc, #144]	; (8012020 <SD_write+0xa8>)
 8011f8e:	2200      	movs	r2, #0
 8011f90:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011f92:	f247 5030 	movw	r0, #30000	; 0x7530
 8011f96:	f7ff ff33 	bl	8011e00 <SD_CheckStatusWithTimeout>
 8011f9a:	4603      	mov	r3, r0
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	da01      	bge.n	8011fa4 <SD_write+0x2c>
  {
    return res;
 8011fa0:	7dfb      	ldrb	r3, [r7, #23]
 8011fa2:	e038      	b.n	8012016 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8011fa4:	683a      	ldr	r2, [r7, #0]
 8011fa6:	6879      	ldr	r1, [r7, #4]
 8011fa8:	68b8      	ldr	r0, [r7, #8]
 8011faa:	f7ff feb5 	bl	8011d18 <BSP_SD_WriteBlocks_DMA>
 8011fae:	4603      	mov	r3, r0
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d12f      	bne.n	8012014 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8011fb4:	f7f1 f8fe 	bl	80031b4 <HAL_GetTick>
 8011fb8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8011fba:	bf00      	nop
 8011fbc:	4b18      	ldr	r3, [pc, #96]	; (8012020 <SD_write+0xa8>)
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d108      	bne.n	8011fd6 <SD_write+0x5e>
 8011fc4:	f7f1 f8f6 	bl	80031b4 <HAL_GetTick>
 8011fc8:	4602      	mov	r2, r0
 8011fca:	693b      	ldr	r3, [r7, #16]
 8011fcc:	1ad3      	subs	r3, r2, r3
 8011fce:	f247 522f 	movw	r2, #29999	; 0x752f
 8011fd2:	4293      	cmp	r3, r2
 8011fd4:	d9f2      	bls.n	8011fbc <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8011fd6:	4b12      	ldr	r3, [pc, #72]	; (8012020 <SD_write+0xa8>)
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d102      	bne.n	8011fe4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8011fde:	2301      	movs	r3, #1
 8011fe0:	75fb      	strb	r3, [r7, #23]
 8011fe2:	e017      	b.n	8012014 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8011fe4:	4b0e      	ldr	r3, [pc, #56]	; (8012020 <SD_write+0xa8>)
 8011fe6:	2200      	movs	r2, #0
 8011fe8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8011fea:	f7f1 f8e3 	bl	80031b4 <HAL_GetTick>
 8011fee:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011ff0:	e007      	b.n	8012002 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011ff2:	f7ff feab 	bl	8011d4c <BSP_SD_GetCardState>
 8011ff6:	4603      	mov	r3, r0
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d102      	bne.n	8012002 <SD_write+0x8a>
          {
            res = RES_OK;
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	75fb      	strb	r3, [r7, #23]
            break;
 8012000:	e008      	b.n	8012014 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012002:	f7f1 f8d7 	bl	80031b4 <HAL_GetTick>
 8012006:	4602      	mov	r2, r0
 8012008:	693b      	ldr	r3, [r7, #16]
 801200a:	1ad3      	subs	r3, r2, r3
 801200c:	f247 522f 	movw	r2, #29999	; 0x752f
 8012010:	4293      	cmp	r3, r2
 8012012:	d9ee      	bls.n	8011ff2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8012014:	7dfb      	ldrb	r3, [r7, #23]
}
 8012016:	4618      	mov	r0, r3
 8012018:	3718      	adds	r7, #24
 801201a:	46bd      	mov	sp, r7
 801201c:	bd80      	pop	{r7, pc}
 801201e:	bf00      	nop
 8012020:	2400035c 	.word	0x2400035c

08012024 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8012024:	b580      	push	{r7, lr}
 8012026:	b08c      	sub	sp, #48	; 0x30
 8012028:	af00      	add	r7, sp, #0
 801202a:	4603      	mov	r3, r0
 801202c:	603a      	str	r2, [r7, #0]
 801202e:	71fb      	strb	r3, [r7, #7]
 8012030:	460b      	mov	r3, r1
 8012032:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8012034:	2301      	movs	r3, #1
 8012036:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801203a:	4b25      	ldr	r3, [pc, #148]	; (80120d0 <SD_ioctl+0xac>)
 801203c:	781b      	ldrb	r3, [r3, #0]
 801203e:	b2db      	uxtb	r3, r3
 8012040:	f003 0301 	and.w	r3, r3, #1
 8012044:	2b00      	cmp	r3, #0
 8012046:	d001      	beq.n	801204c <SD_ioctl+0x28>
 8012048:	2303      	movs	r3, #3
 801204a:	e03c      	b.n	80120c6 <SD_ioctl+0xa2>

  switch (cmd)
 801204c:	79bb      	ldrb	r3, [r7, #6]
 801204e:	2b03      	cmp	r3, #3
 8012050:	d834      	bhi.n	80120bc <SD_ioctl+0x98>
 8012052:	a201      	add	r2, pc, #4	; (adr r2, 8012058 <SD_ioctl+0x34>)
 8012054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012058:	08012069 	.word	0x08012069
 801205c:	08012071 	.word	0x08012071
 8012060:	08012089 	.word	0x08012089
 8012064:	080120a3 	.word	0x080120a3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8012068:	2300      	movs	r3, #0
 801206a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801206e:	e028      	b.n	80120c2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8012070:	f107 0308 	add.w	r3, r7, #8
 8012074:	4618      	mov	r0, r3
 8012076:	f7ff fe79 	bl	8011d6c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801207a:	6a3a      	ldr	r2, [r7, #32]
 801207c:	683b      	ldr	r3, [r7, #0]
 801207e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012080:	2300      	movs	r3, #0
 8012082:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012086:	e01c      	b.n	80120c2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012088:	f107 0308 	add.w	r3, r7, #8
 801208c:	4618      	mov	r0, r3
 801208e:	f7ff fe6d 	bl	8011d6c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8012092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012094:	b29a      	uxth	r2, r3
 8012096:	683b      	ldr	r3, [r7, #0]
 8012098:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801209a:	2300      	movs	r3, #0
 801209c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80120a0:	e00f      	b.n	80120c2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80120a2:	f107 0308 	add.w	r3, r7, #8
 80120a6:	4618      	mov	r0, r3
 80120a8:	f7ff fe60 	bl	8011d6c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80120ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ae:	0a5a      	lsrs	r2, r3, #9
 80120b0:	683b      	ldr	r3, [r7, #0]
 80120b2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80120b4:	2300      	movs	r3, #0
 80120b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80120ba:	e002      	b.n	80120c2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80120bc:	2304      	movs	r3, #4
 80120be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80120c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80120c6:	4618      	mov	r0, r3
 80120c8:	3730      	adds	r7, #48	; 0x30
 80120ca:	46bd      	mov	sp, r7
 80120cc:	bd80      	pop	{r7, pc}
 80120ce:	bf00      	nop
 80120d0:	24000051 	.word	0x24000051

080120d4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80120d4:	b480      	push	{r7}
 80120d6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80120d8:	4b03      	ldr	r3, [pc, #12]	; (80120e8 <BSP_SD_WriteCpltCallback+0x14>)
 80120da:	2201      	movs	r2, #1
 80120dc:	601a      	str	r2, [r3, #0]
}
 80120de:	bf00      	nop
 80120e0:	46bd      	mov	sp, r7
 80120e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e6:	4770      	bx	lr
 80120e8:	2400035c 	.word	0x2400035c

080120ec <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80120ec:	b480      	push	{r7}
 80120ee:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80120f0:	4b03      	ldr	r3, [pc, #12]	; (8012100 <BSP_SD_ReadCpltCallback+0x14>)
 80120f2:	2201      	movs	r2, #1
 80120f4:	601a      	str	r2, [r3, #0]
}
 80120f6:	bf00      	nop
 80120f8:	46bd      	mov	sp, r7
 80120fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120fe:	4770      	bx	lr
 8012100:	24000360 	.word	0x24000360

08012104 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012104:	b580      	push	{r7, lr}
 8012106:	b084      	sub	sp, #16
 8012108:	af00      	add	r7, sp, #0
 801210a:	6078      	str	r0, [r7, #4]
 801210c:	460b      	mov	r3, r1
 801210e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8012110:	f248 0074 	movw	r0, #32884	; 0x8074
 8012114:	f005 fed0 	bl	8017eb8 <malloc>
 8012118:	4603      	mov	r3, r0
 801211a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	2b00      	cmp	r3, #0
 8012120:	d105      	bne.n	801212e <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	2200      	movs	r2, #0
 8012126:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 801212a:	2302      	movs	r3, #2
 801212c:	e034      	b.n	8012198 <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	68fa      	ldr	r2, [r7, #12]
 8012132:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	7c1b      	ldrb	r3, [r3, #16]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d115      	bne.n	801216a <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801213e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012142:	2202      	movs	r2, #2
 8012144:	2101      	movs	r1, #1
 8012146:	6878      	ldr	r0, [r7, #4]
 8012148:	f005 fd1d 	bl	8017b86 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	2201      	movs	r2, #1
 8012150:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8012154:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012158:	2202      	movs	r2, #2
 801215a:	2181      	movs	r1, #129	; 0x81
 801215c:	6878      	ldr	r0, [r7, #4]
 801215e:	f005 fd12 	bl	8017b86 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	2201      	movs	r2, #1
 8012166:	871a      	strh	r2, [r3, #56]	; 0x38
 8012168:	e012      	b.n	8012190 <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801216a:	2340      	movs	r3, #64	; 0x40
 801216c:	2202      	movs	r2, #2
 801216e:	2101      	movs	r1, #1
 8012170:	6878      	ldr	r0, [r7, #4]
 8012172:	f005 fd08 	bl	8017b86 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	2201      	movs	r2, #1
 801217a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801217e:	2340      	movs	r3, #64	; 0x40
 8012180:	2202      	movs	r2, #2
 8012182:	2181      	movs	r1, #129	; 0x81
 8012184:	6878      	ldr	r0, [r7, #4]
 8012186:	f005 fcfe 	bl	8017b86 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	2201      	movs	r2, #1
 801218e:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8012190:	6878      	ldr	r0, [r7, #4]
 8012192:	f000 f98e 	bl	80124b2 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8012196:	2300      	movs	r3, #0
}
 8012198:	4618      	mov	r0, r3
 801219a:	3710      	adds	r7, #16
 801219c:	46bd      	mov	sp, r7
 801219e:	bd80      	pop	{r7, pc}

080121a0 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80121a0:	b580      	push	{r7, lr}
 80121a2:	b082      	sub	sp, #8
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	6078      	str	r0, [r7, #4]
 80121a8:	460b      	mov	r3, r1
 80121aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 80121ac:	2101      	movs	r1, #1
 80121ae:	6878      	ldr	r0, [r7, #4]
 80121b0:	f005 fd0f 	bl	8017bd2 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	2200      	movs	r2, #0
 80121b8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 80121bc:	2181      	movs	r1, #129	; 0x81
 80121be:	6878      	ldr	r0, [r7, #4]
 80121c0:	f005 fd07 	bl	8017bd2 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	2200      	movs	r2, #0
 80121c8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 80121ca:	6878      	ldr	r0, [r7, #4]
 80121cc:	f000 f9cf 	bl	801256e <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d009      	beq.n	80121ee <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80121e0:	4618      	mov	r0, r3
 80121e2:	f005 fe71 	bl	8017ec8 <free>
    pdev->pClassData = NULL;
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	2200      	movs	r2, #0
 80121ea:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80121ee:	2300      	movs	r3, #0
}
 80121f0:	4618      	mov	r0, r3
 80121f2:	3708      	adds	r7, #8
 80121f4:	46bd      	mov	sp, r7
 80121f6:	bd80      	pop	{r7, pc}

080121f8 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80121f8:	b580      	push	{r7, lr}
 80121fa:	b086      	sub	sp, #24
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	6078      	str	r0, [r7, #4]
 8012200:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012208:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 801220a:	2300      	movs	r3, #0
 801220c:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 801220e:	2300      	movs	r3, #0
 8012210:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012212:	683b      	ldr	r3, [r7, #0]
 8012214:	781b      	ldrb	r3, [r3, #0]
 8012216:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801221a:	2b00      	cmp	r3, #0
 801221c:	d04d      	beq.n	80122ba <USBD_MSC_Setup+0xc2>
 801221e:	2b20      	cmp	r3, #32
 8012220:	f040 80c6 	bne.w	80123b0 <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 8012224:	683b      	ldr	r3, [r7, #0]
 8012226:	785b      	ldrb	r3, [r3, #1]
 8012228:	2bfe      	cmp	r3, #254	; 0xfe
 801222a:	d002      	beq.n	8012232 <USBD_MSC_Setup+0x3a>
 801222c:	2bff      	cmp	r3, #255	; 0xff
 801222e:	d024      	beq.n	801227a <USBD_MSC_Setup+0x82>
 8012230:	e03b      	b.n	80122aa <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8012232:	683b      	ldr	r3, [r7, #0]
 8012234:	885b      	ldrh	r3, [r3, #2]
 8012236:	2b00      	cmp	r3, #0
 8012238:	d118      	bne.n	801226c <USBD_MSC_Setup+0x74>
 801223a:	683b      	ldr	r3, [r7, #0]
 801223c:	88db      	ldrh	r3, [r3, #6]
 801223e:	2b01      	cmp	r3, #1
 8012240:	d114      	bne.n	801226c <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 8012242:	683b      	ldr	r3, [r7, #0]
 8012244:	781b      	ldrb	r3, [r3, #0]
 8012246:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8012248:	2b00      	cmp	r3, #0
 801224a:	da0f      	bge.n	801226c <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012252:	699b      	ldr	r3, [r3, #24]
 8012254:	4798      	blx	r3
 8012256:	4603      	mov	r3, r0
 8012258:	461a      	mov	r2, r3
 801225a:	693b      	ldr	r3, [r7, #16]
 801225c:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 801225e:	693b      	ldr	r3, [r7, #16]
 8012260:	2201      	movs	r2, #1
 8012262:	4619      	mov	r1, r3
 8012264:	6878      	ldr	r0, [r7, #4]
 8012266:	f002 fdaa 	bl	8014dbe <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 801226a:	e025      	b.n	80122b8 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 801226c:	6839      	ldr	r1, [r7, #0]
 801226e:	6878      	ldr	r0, [r7, #4]
 8012270:	f002 fd34 	bl	8014cdc <USBD_CtlError>
        ret = USBD_FAIL;
 8012274:	2303      	movs	r3, #3
 8012276:	75fb      	strb	r3, [r7, #23]
      break;
 8012278:	e01e      	b.n	80122b8 <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801227a:	683b      	ldr	r3, [r7, #0]
 801227c:	885b      	ldrh	r3, [r3, #2]
 801227e:	2b00      	cmp	r3, #0
 8012280:	d10c      	bne.n	801229c <USBD_MSC_Setup+0xa4>
 8012282:	683b      	ldr	r3, [r7, #0]
 8012284:	88db      	ldrh	r3, [r3, #6]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d108      	bne.n	801229c <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 801228a:	683b      	ldr	r3, [r7, #0]
 801228c:	781b      	ldrb	r3, [r3, #0]
 801228e:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8012290:	2b00      	cmp	r3, #0
 8012292:	db03      	blt.n	801229c <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 8012294:	6878      	ldr	r0, [r7, #4]
 8012296:	f000 f947 	bl	8012528 <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 801229a:	e00d      	b.n	80122b8 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 801229c:	6839      	ldr	r1, [r7, #0]
 801229e:	6878      	ldr	r0, [r7, #4]
 80122a0:	f002 fd1c 	bl	8014cdc <USBD_CtlError>
        ret = USBD_FAIL;
 80122a4:	2303      	movs	r3, #3
 80122a6:	75fb      	strb	r3, [r7, #23]
      break;
 80122a8:	e006      	b.n	80122b8 <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 80122aa:	6839      	ldr	r1, [r7, #0]
 80122ac:	6878      	ldr	r0, [r7, #4]
 80122ae:	f002 fd15 	bl	8014cdc <USBD_CtlError>
      ret = USBD_FAIL;
 80122b2:	2303      	movs	r3, #3
 80122b4:	75fb      	strb	r3, [r7, #23]
      break;
 80122b6:	bf00      	nop
    }
    break;
 80122b8:	e081      	b.n	80123be <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80122ba:	683b      	ldr	r3, [r7, #0]
 80122bc:	785b      	ldrb	r3, [r3, #1]
 80122be:	2b0b      	cmp	r3, #11
 80122c0:	d86d      	bhi.n	801239e <USBD_MSC_Setup+0x1a6>
 80122c2:	a201      	add	r2, pc, #4	; (adr r2, 80122c8 <USBD_MSC_Setup+0xd0>)
 80122c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122c8:	080122f9 	.word	0x080122f9
 80122cc:	0801236f 	.word	0x0801236f
 80122d0:	0801239f 	.word	0x0801239f
 80122d4:	0801239f 	.word	0x0801239f
 80122d8:	0801239f 	.word	0x0801239f
 80122dc:	0801239f 	.word	0x0801239f
 80122e0:	0801239f 	.word	0x0801239f
 80122e4:	0801239f 	.word	0x0801239f
 80122e8:	0801239f 	.word	0x0801239f
 80122ec:	0801239f 	.word	0x0801239f
 80122f0:	08012321 	.word	0x08012321
 80122f4:	08012349 	.word	0x08012349
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80122fe:	2b03      	cmp	r3, #3
 8012300:	d107      	bne.n	8012312 <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8012302:	f107 030e 	add.w	r3, r7, #14
 8012306:	2202      	movs	r2, #2
 8012308:	4619      	mov	r1, r3
 801230a:	6878      	ldr	r0, [r7, #4]
 801230c:	f002 fd57 	bl	8014dbe <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8012310:	e04d      	b.n	80123ae <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 8012312:	6839      	ldr	r1, [r7, #0]
 8012314:	6878      	ldr	r0, [r7, #4]
 8012316:	f002 fce1 	bl	8014cdc <USBD_CtlError>
        ret = USBD_FAIL;
 801231a:	2303      	movs	r3, #3
 801231c:	75fb      	strb	r3, [r7, #23]
      break;
 801231e:	e046      	b.n	80123ae <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012326:	2b03      	cmp	r3, #3
 8012328:	d107      	bne.n	801233a <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 801232a:	693b      	ldr	r3, [r7, #16]
 801232c:	3304      	adds	r3, #4
 801232e:	2201      	movs	r2, #1
 8012330:	4619      	mov	r1, r3
 8012332:	6878      	ldr	r0, [r7, #4]
 8012334:	f002 fd43 	bl	8014dbe <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8012338:	e039      	b.n	80123ae <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 801233a:	6839      	ldr	r1, [r7, #0]
 801233c:	6878      	ldr	r0, [r7, #4]
 801233e:	f002 fccd 	bl	8014cdc <USBD_CtlError>
        ret = USBD_FAIL;
 8012342:	2303      	movs	r3, #3
 8012344:	75fb      	strb	r3, [r7, #23]
      break;
 8012346:	e032      	b.n	80123ae <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801234e:	2b03      	cmp	r3, #3
 8012350:	d106      	bne.n	8012360 <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 8012352:	683b      	ldr	r3, [r7, #0]
 8012354:	885b      	ldrh	r3, [r3, #2]
 8012356:	b2db      	uxtb	r3, r3
 8012358:	461a      	mov	r2, r3
 801235a:	693b      	ldr	r3, [r7, #16]
 801235c:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 801235e:	e026      	b.n	80123ae <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 8012360:	6839      	ldr	r1, [r7, #0]
 8012362:	6878      	ldr	r0, [r7, #4]
 8012364:	f002 fcba 	bl	8014cdc <USBD_CtlError>
        ret = USBD_FAIL;
 8012368:	2303      	movs	r3, #3
 801236a:	75fb      	strb	r3, [r7, #23]
      break;
 801236c:	e01f      	b.n	80123ae <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012374:	2b03      	cmp	r3, #3
 8012376:	d119      	bne.n	80123ac <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 8012378:	683b      	ldr	r3, [r7, #0]
 801237a:	885b      	ldrh	r3, [r3, #2]
 801237c:	2b00      	cmp	r3, #0
 801237e:	d115      	bne.n	80123ac <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8012380:	683b      	ldr	r3, [r7, #0]
 8012382:	889b      	ldrh	r3, [r3, #4]
 8012384:	b2db      	uxtb	r3, r3
 8012386:	4619      	mov	r1, r3
 8012388:	6878      	ldr	r0, [r7, #4]
 801238a:	f005 fc41 	bl	8017c10 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 801238e:	683b      	ldr	r3, [r7, #0]
 8012390:	889b      	ldrh	r3, [r3, #4]
 8012392:	b2db      	uxtb	r3, r3
 8012394:	4619      	mov	r1, r3
 8012396:	6878      	ldr	r0, [r7, #4]
 8012398:	f000 fa90 	bl	80128bc <MSC_BOT_CplClrFeature>
        }
      }
      break;
 801239c:	e006      	b.n	80123ac <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 801239e:	6839      	ldr	r1, [r7, #0]
 80123a0:	6878      	ldr	r0, [r7, #4]
 80123a2:	f002 fc9b 	bl	8014cdc <USBD_CtlError>
      ret = USBD_FAIL;
 80123a6:	2303      	movs	r3, #3
 80123a8:	75fb      	strb	r3, [r7, #23]
      break;
 80123aa:	e000      	b.n	80123ae <USBD_MSC_Setup+0x1b6>
      break;
 80123ac:	bf00      	nop
    }
    break;
 80123ae:	e006      	b.n	80123be <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 80123b0:	6839      	ldr	r1, [r7, #0]
 80123b2:	6878      	ldr	r0, [r7, #4]
 80123b4:	f002 fc92 	bl	8014cdc <USBD_CtlError>
    ret = USBD_FAIL;
 80123b8:	2303      	movs	r3, #3
 80123ba:	75fb      	strb	r3, [r7, #23]
    break;
 80123bc:	bf00      	nop
  }

  return (uint8_t)ret;
 80123be:	7dfb      	ldrb	r3, [r7, #23]
}
 80123c0:	4618      	mov	r0, r3
 80123c2:	3718      	adds	r7, #24
 80123c4:	46bd      	mov	sp, r7
 80123c6:	bd80      	pop	{r7, pc}

080123c8 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80123c8:	b580      	push	{r7, lr}
 80123ca:	b082      	sub	sp, #8
 80123cc:	af00      	add	r7, sp, #0
 80123ce:	6078      	str	r0, [r7, #4]
 80123d0:	460b      	mov	r3, r1
 80123d2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 80123d4:	78fb      	ldrb	r3, [r7, #3]
 80123d6:	4619      	mov	r1, r3
 80123d8:	6878      	ldr	r0, [r7, #4]
 80123da:	f000 f8d9 	bl	8012590 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 80123de:	2300      	movs	r3, #0
}
 80123e0:	4618      	mov	r0, r3
 80123e2:	3708      	adds	r7, #8
 80123e4:	46bd      	mov	sp, r7
 80123e6:	bd80      	pop	{r7, pc}

080123e8 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80123e8:	b580      	push	{r7, lr}
 80123ea:	b082      	sub	sp, #8
 80123ec:	af00      	add	r7, sp, #0
 80123ee:	6078      	str	r0, [r7, #4]
 80123f0:	460b      	mov	r3, r1
 80123f2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 80123f4:	78fb      	ldrb	r3, [r7, #3]
 80123f6:	4619      	mov	r1, r3
 80123f8:	6878      	ldr	r0, [r7, #4]
 80123fa:	f000 f8fd 	bl	80125f8 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 80123fe:	2300      	movs	r3, #0
}
 8012400:	4618      	mov	r0, r3
 8012402:	3708      	adds	r7, #8
 8012404:	46bd      	mov	sp, r7
 8012406:	bd80      	pop	{r7, pc}

08012408 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8012408:	b480      	push	{r7}
 801240a:	b083      	sub	sp, #12
 801240c:	af00      	add	r7, sp, #0
 801240e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	2220      	movs	r2, #32
 8012414:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8012416:	4b03      	ldr	r3, [pc, #12]	; (8012424 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8012418:	4618      	mov	r0, r3
 801241a:	370c      	adds	r7, #12
 801241c:	46bd      	mov	sp, r7
 801241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012422:	4770      	bx	lr
 8012424:	2400008c 	.word	0x2400008c

08012428 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8012428:	b480      	push	{r7}
 801242a:	b083      	sub	sp, #12
 801242c:	af00      	add	r7, sp, #0
 801242e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	2220      	movs	r2, #32
 8012434:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8012436:	4b03      	ldr	r3, [pc, #12]	; (8012444 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8012438:	4618      	mov	r0, r3
 801243a:	370c      	adds	r7, #12
 801243c:	46bd      	mov	sp, r7
 801243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012442:	4770      	bx	lr
 8012444:	240000ac 	.word	0x240000ac

08012448 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8012448:	b480      	push	{r7}
 801244a:	b083      	sub	sp, #12
 801244c:	af00      	add	r7, sp, #0
 801244e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	2220      	movs	r2, #32
 8012454:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8012456:	4b03      	ldr	r3, [pc, #12]	; (8012464 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8012458:	4618      	mov	r0, r3
 801245a:	370c      	adds	r7, #12
 801245c:	46bd      	mov	sp, r7
 801245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012462:	4770      	bx	lr
 8012464:	240000cc 	.word	0x240000cc

08012468 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8012468:	b480      	push	{r7}
 801246a:	b083      	sub	sp, #12
 801246c:	af00      	add	r7, sp, #0
 801246e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	220a      	movs	r2, #10
 8012474:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8012476:	4b03      	ldr	r3, [pc, #12]	; (8012484 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8012478:	4618      	mov	r0, r3
 801247a:	370c      	adds	r7, #12
 801247c:	46bd      	mov	sp, r7
 801247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012482:	4770      	bx	lr
 8012484:	240000ec 	.word	0x240000ec

08012488 <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8012488:	b480      	push	{r7}
 801248a:	b083      	sub	sp, #12
 801248c:	af00      	add	r7, sp, #0
 801248e:	6078      	str	r0, [r7, #4]
 8012490:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8012492:	683b      	ldr	r3, [r7, #0]
 8012494:	2b00      	cmp	r3, #0
 8012496:	d101      	bne.n	801249c <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8012498:	2303      	movs	r3, #3
 801249a:	e004      	b.n	80124a6 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	683a      	ldr	r2, [r7, #0]
 80124a0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80124a4:	2300      	movs	r3, #0
}
 80124a6:	4618      	mov	r0, r3
 80124a8:	370c      	adds	r7, #12
 80124aa:	46bd      	mov	sp, r7
 80124ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124b0:	4770      	bx	lr

080124b2 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 80124b2:	b580      	push	{r7, lr}
 80124b4:	b084      	sub	sp, #16
 80124b6:	af00      	add	r7, sp, #0
 80124b8:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80124c0:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	2200      	movs	r2, #0
 80124c6:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	2200      	movs	r2, #0
 80124cc:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 80124ce:	68fa      	ldr	r2, [r7, #12]
 80124d0:	f248 0361 	movw	r3, #32865	; 0x8061
 80124d4:	4413      	add	r3, r2
 80124d6:	2200      	movs	r2, #0
 80124d8:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_sense_head = 0U;
 80124da:	68fa      	ldr	r2, [r7, #12]
 80124dc:	f248 0360 	movw	r3, #32864	; 0x8060
 80124e0:	4413      	add	r3, r2
 80124e2:	2200      	movs	r2, #0
 80124e4:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80124e6:	68fa      	ldr	r2, [r7, #12]
 80124e8:	f248 0362 	movw	r3, #32866	; 0x8062
 80124ec:	4413      	add	r3, r2
 80124ee:	2200      	movs	r2, #0
 80124f0:	701a      	strb	r2, [r3, #0]

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	2000      	movs	r0, #0
 80124fc:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 80124fe:	2101      	movs	r1, #1
 8012500:	6878      	ldr	r0, [r7, #4]
 8012502:	f005 fb85 	bl	8017c10 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8012506:	2181      	movs	r1, #129	; 0x81
 8012508:	6878      	ldr	r0, [r7, #4]
 801250a:	f005 fb81 	bl	8017c10 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	f248 0210 	movw	r2, #32784	; 0x8010
 8012514:	441a      	add	r2, r3
 8012516:	231f      	movs	r3, #31
 8012518:	2101      	movs	r1, #1
 801251a:	6878      	ldr	r0, [r7, #4]
 801251c:	f005 fc41 	bl	8017da2 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8012520:	bf00      	nop
 8012522:	3710      	adds	r7, #16
 8012524:	46bd      	mov	sp, r7
 8012526:	bd80      	pop	{r7, pc}

08012528 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8012528:	b580      	push	{r7, lr}
 801252a:	b084      	sub	sp, #16
 801252c:	af00      	add	r7, sp, #0
 801252e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012536:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	2200      	movs	r2, #0
 801253c:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	2201      	movs	r2, #1
 8012542:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 8012544:	2181      	movs	r1, #129	; 0x81
 8012546:	6878      	ldr	r0, [r7, #4]
 8012548:	f005 fba0 	bl	8017c8c <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 801254c:	2101      	movs	r1, #1
 801254e:	6878      	ldr	r0, [r7, #4]
 8012550:	f005 fb9c 	bl	8017c8c <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	f248 0210 	movw	r2, #32784	; 0x8010
 801255a:	441a      	add	r2, r3
 801255c:	231f      	movs	r3, #31
 801255e:	2101      	movs	r1, #1
 8012560:	6878      	ldr	r0, [r7, #4]
 8012562:	f005 fc1e 	bl	8017da2 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8012566:	bf00      	nop
 8012568:	3710      	adds	r7, #16
 801256a:	46bd      	mov	sp, r7
 801256c:	bd80      	pop	{r7, pc}

0801256e <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 801256e:	b480      	push	{r7}
 8012570:	b085      	sub	sp, #20
 8012572:	af00      	add	r7, sp, #0
 8012574:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801257c:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	2200      	movs	r2, #0
 8012582:	721a      	strb	r2, [r3, #8]
}
 8012584:	bf00      	nop
 8012586:	3714      	adds	r7, #20
 8012588:	46bd      	mov	sp, r7
 801258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801258e:	4770      	bx	lr

08012590 <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012590:	b580      	push	{r7, lr}
 8012592:	b084      	sub	sp, #16
 8012594:	af00      	add	r7, sp, #0
 8012596:	6078      	str	r0, [r7, #4]
 8012598:	460b      	mov	r3, r1
 801259a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80125a2:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	7a1b      	ldrb	r3, [r3, #8]
 80125a8:	2b02      	cmp	r3, #2
 80125aa:	d004      	beq.n	80125b6 <MSC_BOT_DataIn+0x26>
 80125ac:	2b02      	cmp	r3, #2
 80125ae:	db1c      	blt.n	80125ea <MSC_BOT_DataIn+0x5a>
 80125b0:	2b04      	cmp	r3, #4
 80125b2:	dc1a      	bgt.n	80125ea <MSC_BOT_DataIn+0x5a>
 80125b4:	e014      	b.n	80125e0 <MSC_BOT_DataIn+0x50>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80125b6:	68fa      	ldr	r2, [r7, #12]
 80125b8:	f248 031d 	movw	r3, #32797	; 0x801d
 80125bc:	4413      	add	r3, r2
 80125be:	7819      	ldrb	r1, [r3, #0]
 80125c0:	68fa      	ldr	r2, [r7, #12]
 80125c2:	f248 031f 	movw	r3, #32799	; 0x801f
 80125c6:	4413      	add	r3, r2
 80125c8:	461a      	mov	r2, r3
 80125ca:	6878      	ldr	r0, [r7, #4]
 80125cc:	f000 f99e 	bl	801290c <SCSI_ProcessCmd>
 80125d0:	4603      	mov	r3, r0
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	da0b      	bge.n	80125ee <MSC_BOT_DataIn+0x5e>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80125d6:	2101      	movs	r1, #1
 80125d8:	6878      	ldr	r0, [r7, #4]
 80125da:	f000 f90b 	bl	80127f4 <MSC_BOT_SendCSW>
    }
    break;
 80125de:	e006      	b.n	80125ee <MSC_BOT_DataIn+0x5e>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80125e0:	2100      	movs	r1, #0
 80125e2:	6878      	ldr	r0, [r7, #4]
 80125e4:	f000 f906 	bl	80127f4 <MSC_BOT_SendCSW>
    break;
 80125e8:	e002      	b.n	80125f0 <MSC_BOT_DataIn+0x60>

  default:
    break;
 80125ea:	bf00      	nop
 80125ec:	e000      	b.n	80125f0 <MSC_BOT_DataIn+0x60>
    break;
 80125ee:	bf00      	nop
  }
}
 80125f0:	bf00      	nop
 80125f2:	3710      	adds	r7, #16
 80125f4:	46bd      	mov	sp, r7
 80125f6:	bd80      	pop	{r7, pc}

080125f8 <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80125f8:	b580      	push	{r7, lr}
 80125fa:	b084      	sub	sp, #16
 80125fc:	af00      	add	r7, sp, #0
 80125fe:	6078      	str	r0, [r7, #4]
 8012600:	460b      	mov	r3, r1
 8012602:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801260a:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	7a1b      	ldrb	r3, [r3, #8]
 8012610:	2b00      	cmp	r3, #0
 8012612:	d002      	beq.n	801261a <MSC_BOT_DataOut+0x22>
 8012614:	2b01      	cmp	r3, #1
 8012616:	d004      	beq.n	8012622 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8012618:	e018      	b.n	801264c <MSC_BOT_DataOut+0x54>
      MSC_BOT_CBW_Decode(pdev);
 801261a:	6878      	ldr	r0, [r7, #4]
 801261c:	f000 f81a 	bl	8012654 <MSC_BOT_CBW_Decode>
      break;
 8012620:	e014      	b.n	801264c <MSC_BOT_DataOut+0x54>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8012622:	68fa      	ldr	r2, [r7, #12]
 8012624:	f248 031d 	movw	r3, #32797	; 0x801d
 8012628:	4413      	add	r3, r2
 801262a:	7819      	ldrb	r1, [r3, #0]
 801262c:	68fa      	ldr	r2, [r7, #12]
 801262e:	f248 031f 	movw	r3, #32799	; 0x801f
 8012632:	4413      	add	r3, r2
 8012634:	461a      	mov	r2, r3
 8012636:	6878      	ldr	r0, [r7, #4]
 8012638:	f000 f968 	bl	801290c <SCSI_ProcessCmd>
 801263c:	4603      	mov	r3, r0
 801263e:	2b00      	cmp	r3, #0
 8012640:	da03      	bge.n	801264a <MSC_BOT_DataOut+0x52>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8012642:	2101      	movs	r1, #1
 8012644:	6878      	ldr	r0, [r7, #4]
 8012646:	f000 f8d5 	bl	80127f4 <MSC_BOT_SendCSW>
      break;
 801264a:	bf00      	nop
  }
}
 801264c:	bf00      	nop
 801264e:	3710      	adds	r7, #16
 8012650:	46bd      	mov	sp, r7
 8012652:	bd80      	pop	{r7, pc}

08012654 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8012654:	b580      	push	{r7, lr}
 8012656:	b084      	sub	sp, #16
 8012658:	af00      	add	r7, sp, #0
 801265a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012662:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8012664:	68fa      	ldr	r2, [r7, #12]
 8012666:	f248 0314 	movw	r3, #32788	; 0x8014
 801266a:	4413      	add	r3, r2
 801266c:	681a      	ldr	r2, [r3, #0]
 801266e:	68f9      	ldr	r1, [r7, #12]
 8012670:	f248 0334 	movw	r3, #32820	; 0x8034
 8012674:	440b      	add	r3, r1
 8012676:	601a      	str	r2, [r3, #0]
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8012678:	68fa      	ldr	r2, [r7, #12]
 801267a:	f248 0318 	movw	r3, #32792	; 0x8018
 801267e:	4413      	add	r3, r2
 8012680:	681a      	ldr	r2, [r3, #0]
 8012682:	68f9      	ldr	r1, [r7, #12]
 8012684:	f248 0338 	movw	r3, #32824	; 0x8038
 8012688:	440b      	add	r3, r1
 801268a:	601a      	str	r2, [r3, #0]

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 801268c:	2101      	movs	r1, #1
 801268e:	6878      	ldr	r0, [r7, #4]
 8012690:	f005 fba8 	bl	8017de4 <USBD_LL_GetRxDataSize>
 8012694:	4603      	mov	r3, r0
 8012696:	2b1f      	cmp	r3, #31
 8012698:	d11c      	bne.n	80126d4 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801269a:	68fa      	ldr	r2, [r7, #12]
 801269c:	f248 0310 	movw	r3, #32784	; 0x8010
 80126a0:	4413      	add	r3, r2
 80126a2:	681b      	ldr	r3, [r3, #0]
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80126a4:	4a38      	ldr	r2, [pc, #224]	; (8012788 <MSC_BOT_CBW_Decode+0x134>)
 80126a6:	4293      	cmp	r3, r2
 80126a8:	d114      	bne.n	80126d4 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80126aa:	68fa      	ldr	r2, [r7, #12]
 80126ac:	f248 031d 	movw	r3, #32797	; 0x801d
 80126b0:	4413      	add	r3, r2
 80126b2:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80126b4:	2b01      	cmp	r3, #1
 80126b6:	d80d      	bhi.n	80126d4 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80126b8:	68fa      	ldr	r2, [r7, #12]
 80126ba:	f248 031e 	movw	r3, #32798	; 0x801e
 80126be:	4413      	add	r3, r2
 80126c0:	781b      	ldrb	r3, [r3, #0]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d006      	beq.n	80126d4 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bCBLength > 16U))
 80126c6:	68fa      	ldr	r2, [r7, #12]
 80126c8:	f248 031e 	movw	r3, #32798	; 0x801e
 80126cc:	4413      	add	r3, r2
 80126ce:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80126d0:	2b10      	cmp	r3, #16
 80126d2:	d910      	bls.n	80126f6 <MSC_BOT_CBW_Decode+0xa2>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80126d4:	68fa      	ldr	r2, [r7, #12]
 80126d6:	f248 031d 	movw	r3, #32797	; 0x801d
 80126da:	4413      	add	r3, r2
 80126dc:	7819      	ldrb	r1, [r3, #0]
 80126de:	2320      	movs	r3, #32
 80126e0:	2205      	movs	r2, #5
 80126e2:	6878      	ldr	r0, [r7, #4]
 80126e4:	f000 fd36 	bl	8013154 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	2202      	movs	r2, #2
 80126ec:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 80126ee:	6878      	ldr	r0, [r7, #4]
 80126f0:	f000 f8b2 	bl	8012858 <MSC_BOT_Abort>
 80126f4:	e044      	b.n	8012780 <MSC_BOT_CBW_Decode+0x12c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80126f6:	68fa      	ldr	r2, [r7, #12]
 80126f8:	f248 031d 	movw	r3, #32797	; 0x801d
 80126fc:	4413      	add	r3, r2
 80126fe:	7819      	ldrb	r1, [r3, #0]
 8012700:	68fa      	ldr	r2, [r7, #12]
 8012702:	f248 031f 	movw	r3, #32799	; 0x801f
 8012706:	4413      	add	r3, r2
 8012708:	461a      	mov	r2, r3
 801270a:	6878      	ldr	r0, [r7, #4]
 801270c:	f000 f8fe 	bl	801290c <SCSI_ProcessCmd>
 8012710:	4603      	mov	r3, r0
 8012712:	2b00      	cmp	r3, #0
 8012714:	da0c      	bge.n	8012730 <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	7a1b      	ldrb	r3, [r3, #8]
 801271a:	2b05      	cmp	r3, #5
 801271c:	d104      	bne.n	8012728 <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801271e:	2101      	movs	r1, #1
 8012720:	6878      	ldr	r0, [r7, #4]
 8012722:	f000 f867 	bl	80127f4 <MSC_BOT_SendCSW>
 8012726:	e02b      	b.n	8012780 <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8012728:	6878      	ldr	r0, [r7, #4]
 801272a:	f000 f895 	bl	8012858 <MSC_BOT_Abort>
 801272e:	e027      	b.n	8012780 <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	7a1b      	ldrb	r3, [r3, #8]
 8012734:	2b02      	cmp	r3, #2
 8012736:	d022      	beq.n	801277e <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801273c:	2b01      	cmp	r3, #1
 801273e:	d01e      	beq.n	801277e <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8012744:	2b03      	cmp	r3, #3
 8012746:	d01a      	beq.n	801277e <MSC_BOT_CBW_Decode+0x12a>
    {
      if (hmsc->bot_data_length > 0U)
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	68db      	ldr	r3, [r3, #12]
 801274c:	2b00      	cmp	r3, #0
 801274e:	d009      	beq.n	8012764 <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	f103 0110 	add.w	r1, r3, #16
 8012756:	68fb      	ldr	r3, [r7, #12]
 8012758:	68db      	ldr	r3, [r3, #12]
 801275a:	461a      	mov	r2, r3
 801275c:	6878      	ldr	r0, [r7, #4]
 801275e:	f000 f815 	bl	801278c <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8012762:	e00d      	b.n	8012780 <MSC_BOT_CBW_Decode+0x12c>
      }
      else if (hmsc->bot_data_length == 0U)
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	68db      	ldr	r3, [r3, #12]
 8012768:	2b00      	cmp	r3, #0
 801276a:	d104      	bne.n	8012776 <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801276c:	2100      	movs	r1, #0
 801276e:	6878      	ldr	r0, [r7, #4]
 8012770:	f000 f840 	bl	80127f4 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8012774:	e004      	b.n	8012780 <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8012776:	6878      	ldr	r0, [r7, #4]
 8012778:	f000 f86e 	bl	8012858 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 801277c:	e000      	b.n	8012780 <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    else
    {
      return;
 801277e:	bf00      	nop
    }
  }
}
 8012780:	3710      	adds	r7, #16
 8012782:	46bd      	mov	sp, r7
 8012784:	bd80      	pop	{r7, pc}
 8012786:	bf00      	nop
 8012788:	43425355 	.word	0x43425355

0801278c <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 801278c:	b580      	push	{r7, lr}
 801278e:	b086      	sub	sp, #24
 8012790:	af00      	add	r7, sp, #0
 8012792:	60f8      	str	r0, [r7, #12]
 8012794:	60b9      	str	r1, [r7, #8]
 8012796:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801279e:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 80127a0:	697a      	ldr	r2, [r7, #20]
 80127a2:	f248 0318 	movw	r3, #32792	; 0x8018
 80127a6:	4413      	add	r3, r2
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	687a      	ldr	r2, [r7, #4]
 80127ac:	4293      	cmp	r3, r2
 80127ae:	bf28      	it	cs
 80127b0:	4613      	movcs	r3, r2
 80127b2:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 80127b4:	697a      	ldr	r2, [r7, #20]
 80127b6:	f248 0338 	movw	r3, #32824	; 0x8038
 80127ba:	4413      	add	r3, r2
 80127bc:	681a      	ldr	r2, [r3, #0]
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	1ad2      	subs	r2, r2, r3
 80127c2:	6979      	ldr	r1, [r7, #20]
 80127c4:	f248 0338 	movw	r3, #32824	; 0x8038
 80127c8:	440b      	add	r3, r1
 80127ca:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 80127cc:	697a      	ldr	r2, [r7, #20]
 80127ce:	f248 033c 	movw	r3, #32828	; 0x803c
 80127d2:	4413      	add	r3, r2
 80127d4:	2200      	movs	r2, #0
 80127d6:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 80127d8:	697b      	ldr	r3, [r7, #20]
 80127da:	2204      	movs	r2, #4
 80127dc:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 80127de:	693b      	ldr	r3, [r7, #16]
 80127e0:	68ba      	ldr	r2, [r7, #8]
 80127e2:	2181      	movs	r1, #129	; 0x81
 80127e4:	68f8      	ldr	r0, [r7, #12]
 80127e6:	f005 fabb 	bl	8017d60 <USBD_LL_Transmit>
}
 80127ea:	bf00      	nop
 80127ec:	3718      	adds	r7, #24
 80127ee:	46bd      	mov	sp, r7
 80127f0:	bd80      	pop	{r7, pc}
	...

080127f4 <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b084      	sub	sp, #16
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
 80127fc:	460b      	mov	r3, r1
 80127fe:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012806:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8012808:	68fa      	ldr	r2, [r7, #12]
 801280a:	f248 0330 	movw	r3, #32816	; 0x8030
 801280e:	4413      	add	r3, r2
 8012810:	4a10      	ldr	r2, [pc, #64]	; (8012854 <MSC_BOT_SendCSW+0x60>)
 8012812:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = CSW_Status;
 8012814:	68fa      	ldr	r2, [r7, #12]
 8012816:	f248 033c 	movw	r3, #32828	; 0x803c
 801281a:	4413      	add	r3, r2
 801281c:	78fa      	ldrb	r2, [r7, #3]
 801281e:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_IDLE;
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	2200      	movs	r2, #0
 8012824:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 8012826:	68fb      	ldr	r3, [r7, #12]
 8012828:	f248 0230 	movw	r2, #32816	; 0x8030
 801282c:	441a      	add	r2, r3
 801282e:	230d      	movs	r3, #13
 8012830:	2181      	movs	r1, #129	; 0x81
 8012832:	6878      	ldr	r0, [r7, #4]
 8012834:	f005 fa94 	bl	8017d60 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	f248 0210 	movw	r2, #32784	; 0x8010
 801283e:	441a      	add	r2, r3
 8012840:	231f      	movs	r3, #31
 8012842:	2101      	movs	r1, #1
 8012844:	6878      	ldr	r0, [r7, #4]
 8012846:	f005 faac 	bl	8017da2 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 801284a:	bf00      	nop
 801284c:	3710      	adds	r7, #16
 801284e:	46bd      	mov	sp, r7
 8012850:	bd80      	pop	{r7, pc}
 8012852:	bf00      	nop
 8012854:	53425355 	.word	0x53425355

08012858 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8012858:	b580      	push	{r7, lr}
 801285a:	b084      	sub	sp, #16
 801285c:	af00      	add	r7, sp, #0
 801285e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012866:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8012868:	68fa      	ldr	r2, [r7, #12]
 801286a:	f248 031c 	movw	r3, #32796	; 0x801c
 801286e:	4413      	add	r3, r2
 8012870:	781b      	ldrb	r3, [r3, #0]
 8012872:	2b00      	cmp	r3, #0
 8012874:	d10e      	bne.n	8012894 <MSC_BOT_Abort+0x3c>
      (hmsc->cbw.dDataLength != 0U) &&
 8012876:	68fa      	ldr	r2, [r7, #12]
 8012878:	f248 0318 	movw	r3, #32792	; 0x8018
 801287c:	4413      	add	r3, r2
 801287e:	681b      	ldr	r3, [r3, #0]
  if ((hmsc->cbw.bmFlags == 0U) &&
 8012880:	2b00      	cmp	r3, #0
 8012882:	d007      	beq.n	8012894 <MSC_BOT_Abort+0x3c>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8012888:	2b00      	cmp	r3, #0
 801288a:	d103      	bne.n	8012894 <MSC_BOT_Abort+0x3c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 801288c:	2101      	movs	r1, #1
 801288e:	6878      	ldr	r0, [r7, #4]
 8012890:	f005 f9dd 	bl	8017c4e <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8012894:	2181      	movs	r1, #129	; 0x81
 8012896:	6878      	ldr	r0, [r7, #4]
 8012898:	f005 f9d9 	bl	8017c4e <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	7a5b      	ldrb	r3, [r3, #9]
 80128a0:	2b02      	cmp	r3, #2
 80128a2:	d107      	bne.n	80128b4 <MSC_BOT_Abort+0x5c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80128a4:	2181      	movs	r1, #129	; 0x81
 80128a6:	6878      	ldr	r0, [r7, #4]
 80128a8:	f005 f9d1 	bl	8017c4e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80128ac:	2101      	movs	r1, #1
 80128ae:	6878      	ldr	r0, [r7, #4]
 80128b0:	f005 f9cd 	bl	8017c4e <USBD_LL_StallEP>
  }
}
 80128b4:	bf00      	nop
 80128b6:	3710      	adds	r7, #16
 80128b8:	46bd      	mov	sp, r7
 80128ba:	bd80      	pop	{r7, pc}

080128bc <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80128bc:	b580      	push	{r7, lr}
 80128be:	b084      	sub	sp, #16
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	6078      	str	r0, [r7, #4]
 80128c4:	460b      	mov	r3, r1
 80128c6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80128ce:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	7a5b      	ldrb	r3, [r3, #9]
 80128d4:	2b02      	cmp	r3, #2
 80128d6:	d108      	bne.n	80128ea <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80128d8:	2181      	movs	r1, #129	; 0x81
 80128da:	6878      	ldr	r0, [r7, #4]
 80128dc:	f005 f9b7 	bl	8017c4e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80128e0:	2101      	movs	r1, #1
 80128e2:	6878      	ldr	r0, [r7, #4]
 80128e4:	f005 f9b3 	bl	8017c4e <USBD_LL_StallEP>
 80128e8:	e00d      	b.n	8012906 <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80128ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	da08      	bge.n	8012904 <MSC_BOT_CplClrFeature+0x48>
 80128f2:	68fb      	ldr	r3, [r7, #12]
 80128f4:	7a5b      	ldrb	r3, [r3, #9]
 80128f6:	2b01      	cmp	r3, #1
 80128f8:	d004      	beq.n	8012904 <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80128fa:	2101      	movs	r1, #1
 80128fc:	6878      	ldr	r0, [r7, #4]
 80128fe:	f7ff ff79 	bl	80127f4 <MSC_BOT_SendCSW>
 8012902:	e000      	b.n	8012906 <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 8012904:	bf00      	nop
  }
}
 8012906:	3710      	adds	r7, #16
 8012908:	46bd      	mov	sp, r7
 801290a:	bd80      	pop	{r7, pc}

0801290c <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 801290c:	b580      	push	{r7, lr}
 801290e:	b086      	sub	sp, #24
 8012910:	af00      	add	r7, sp, #0
 8012912:	60f8      	str	r0, [r7, #12]
 8012914:	460b      	mov	r3, r1
 8012916:	607a      	str	r2, [r7, #4]
 8012918:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801291a:	68fb      	ldr	r3, [r7, #12]
 801291c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012920:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	781b      	ldrb	r3, [r3, #0]
 8012926:	2b25      	cmp	r3, #37	; 0x25
 8012928:	d06e      	beq.n	8012a08 <SCSI_ProcessCmd+0xfc>
 801292a:	2b25      	cmp	r3, #37	; 0x25
 801292c:	dc11      	bgt.n	8012952 <SCSI_ProcessCmd+0x46>
 801292e:	2b1a      	cmp	r3, #26
 8012930:	d04f      	beq.n	80129d2 <SCSI_ProcessCmd+0xc6>
 8012932:	2b1a      	cmp	r3, #26
 8012934:	dc06      	bgt.n	8012944 <SCSI_ProcessCmd+0x38>
 8012936:	2b03      	cmp	r3, #3
 8012938:	d027      	beq.n	801298a <SCSI_ProcessCmd+0x7e>
 801293a:	2b12      	cmp	r3, #18
 801293c:	d02e      	beq.n	801299c <SCSI_ProcessCmd+0x90>
 801293e:	2b00      	cmp	r3, #0
 8012940:	d01a      	beq.n	8012978 <SCSI_ProcessCmd+0x6c>
 8012942:	e0a0      	b.n	8012a86 <SCSI_ProcessCmd+0x17a>
 8012944:	2b1e      	cmp	r3, #30
 8012946:	d03b      	beq.n	80129c0 <SCSI_ProcessCmd+0xb4>
 8012948:	2b23      	cmp	r3, #35	; 0x23
 801294a:	d054      	beq.n	80129f6 <SCSI_ProcessCmd+0xea>
 801294c:	2b1b      	cmp	r3, #27
 801294e:	d02e      	beq.n	80129ae <SCSI_ProcessCmd+0xa2>
 8012950:	e099      	b.n	8012a86 <SCSI_ProcessCmd+0x17a>
 8012952:	2b5a      	cmp	r3, #90	; 0x5a
 8012954:	d046      	beq.n	80129e4 <SCSI_ProcessCmd+0xd8>
 8012956:	2b5a      	cmp	r3, #90	; 0x5a
 8012958:	dc07      	bgt.n	801296a <SCSI_ProcessCmd+0x5e>
 801295a:	2b2a      	cmp	r3, #42	; 0x2a
 801295c:	d078      	beq.n	8012a50 <SCSI_ProcessCmd+0x144>
 801295e:	2b2f      	cmp	r3, #47	; 0x2f
 8012960:	f000 8088 	beq.w	8012a74 <SCSI_ProcessCmd+0x168>
 8012964:	2b28      	cmp	r3, #40	; 0x28
 8012966:	d061      	beq.n	8012a2c <SCSI_ProcessCmd+0x120>
 8012968:	e08d      	b.n	8012a86 <SCSI_ProcessCmd+0x17a>
 801296a:	2ba8      	cmp	r3, #168	; 0xa8
 801296c:	d067      	beq.n	8012a3e <SCSI_ProcessCmd+0x132>
 801296e:	2baa      	cmp	r3, #170	; 0xaa
 8012970:	d077      	beq.n	8012a62 <SCSI_ProcessCmd+0x156>
 8012972:	2b9e      	cmp	r3, #158	; 0x9e
 8012974:	d051      	beq.n	8012a1a <SCSI_ProcessCmd+0x10e>
 8012976:	e086      	b.n	8012a86 <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8012978:	7afb      	ldrb	r3, [r7, #11]
 801297a:	687a      	ldr	r2, [r7, #4]
 801297c:	4619      	mov	r1, r3
 801297e:	68f8      	ldr	r0, [r7, #12]
 8012980:	f000 f893 	bl	8012aaa <SCSI_TestUnitReady>
 8012984:	4603      	mov	r3, r0
 8012986:	75fb      	strb	r3, [r7, #23]
    break;
 8012988:	e089      	b.n	8012a9e <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 801298a:	7afb      	ldrb	r3, [r7, #11]
 801298c:	687a      	ldr	r2, [r7, #4]
 801298e:	4619      	mov	r1, r3
 8012990:	68f8      	ldr	r0, [r7, #12]
 8012992:	f000 fb47 	bl	8013024 <SCSI_RequestSense>
 8012996:	4603      	mov	r3, r0
 8012998:	75fb      	strb	r3, [r7, #23]
    break;
 801299a:	e080      	b.n	8012a9e <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 801299c:	7afb      	ldrb	r3, [r7, #11]
 801299e:	687a      	ldr	r2, [r7, #4]
 80129a0:	4619      	mov	r1, r3
 80129a2:	68f8      	ldr	r0, [r7, #12]
 80129a4:	f000 f8d2 	bl	8012b4c <SCSI_Inquiry>
 80129a8:	4603      	mov	r3, r0
 80129aa:	75fb      	strb	r3, [r7, #23]
    break;
 80129ac:	e077      	b.n	8012a9e <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 80129ae:	7afb      	ldrb	r3, [r7, #11]
 80129b0:	687a      	ldr	r2, [r7, #4]
 80129b2:	4619      	mov	r1, r3
 80129b4:	68f8      	ldr	r0, [r7, #12]
 80129b6:	f000 fc27 	bl	8013208 <SCSI_StartStopUnit>
 80129ba:	4603      	mov	r3, r0
 80129bc:	75fb      	strb	r3, [r7, #23]
    break;
 80129be:	e06e      	b.n	8012a9e <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 80129c0:	7afb      	ldrb	r3, [r7, #11]
 80129c2:	687a      	ldr	r2, [r7, #4]
 80129c4:	4619      	mov	r1, r3
 80129c6:	68f8      	ldr	r0, [r7, #12]
 80129c8:	f000 fc71 	bl	80132ae <SCSI_AllowPreventRemovable>
 80129cc:	4603      	mov	r3, r0
 80129ce:	75fb      	strb	r3, [r7, #23]
    break;
 80129d0:	e065      	b.n	8012a9e <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 80129d2:	7afb      	ldrb	r3, [r7, #11]
 80129d4:	687a      	ldr	r2, [r7, #4]
 80129d6:	4619      	mov	r1, r3
 80129d8:	68f8      	ldr	r0, [r7, #12]
 80129da:	f000 fad7 	bl	8012f8c <SCSI_ModeSense6>
 80129de:	4603      	mov	r3, r0
 80129e0:	75fb      	strb	r3, [r7, #23]
    break;
 80129e2:	e05c      	b.n	8012a9e <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 80129e4:	7afb      	ldrb	r3, [r7, #11]
 80129e6:	687a      	ldr	r2, [r7, #4]
 80129e8:	4619      	mov	r1, r3
 80129ea:	68f8      	ldr	r0, [r7, #12]
 80129ec:	f000 faf4 	bl	8012fd8 <SCSI_ModeSense10>
 80129f0:	4603      	mov	r3, r0
 80129f2:	75fb      	strb	r3, [r7, #23]
    break;
 80129f4:	e053      	b.n	8012a9e <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 80129f6:	7afb      	ldrb	r3, [r7, #11]
 80129f8:	687a      	ldr	r2, [r7, #4]
 80129fa:	4619      	mov	r1, r3
 80129fc:	68f8      	ldr	r0, [r7, #12]
 80129fe:	f000 fa56 	bl	8012eae <SCSI_ReadFormatCapacity>
 8012a02:	4603      	mov	r3, r0
 8012a04:	75fb      	strb	r3, [r7, #23]
    break;
 8012a06:	e04a      	b.n	8012a9e <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8012a08:	7afb      	ldrb	r3, [r7, #11]
 8012a0a:	687a      	ldr	r2, [r7, #4]
 8012a0c:	4619      	mov	r1, r3
 8012a0e:	68f8      	ldr	r0, [r7, #12]
 8012a10:	f000 f910 	bl	8012c34 <SCSI_ReadCapacity10>
 8012a14:	4603      	mov	r3, r0
 8012a16:	75fb      	strb	r3, [r7, #23]
    break;
 8012a18:	e041      	b.n	8012a9e <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8012a1a:	7afb      	ldrb	r3, [r7, #11]
 8012a1c:	687a      	ldr	r2, [r7, #4]
 8012a1e:	4619      	mov	r1, r3
 8012a20:	68f8      	ldr	r0, [r7, #12]
 8012a22:	f000 f98b 	bl	8012d3c <SCSI_ReadCapacity16>
 8012a26:	4603      	mov	r3, r0
 8012a28:	75fb      	strb	r3, [r7, #23]
    break;
 8012a2a:	e038      	b.n	8012a9e <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 8012a2c:	7afb      	ldrb	r3, [r7, #11]
 8012a2e:	687a      	ldr	r2, [r7, #4]
 8012a30:	4619      	mov	r1, r3
 8012a32:	68f8      	ldr	r0, [r7, #12]
 8012a34:	f000 fc62 	bl	80132fc <SCSI_Read10>
 8012a38:	4603      	mov	r3, r0
 8012a3a:	75fb      	strb	r3, [r7, #23]
    break;
 8012a3c:	e02f      	b.n	8012a9e <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 8012a3e:	7afb      	ldrb	r3, [r7, #11]
 8012a40:	687a      	ldr	r2, [r7, #4]
 8012a42:	4619      	mov	r1, r3
 8012a44:	68f8      	ldr	r0, [r7, #12]
 8012a46:	f000 fd0b 	bl	8013460 <SCSI_Read12>
 8012a4a:	4603      	mov	r3, r0
 8012a4c:	75fb      	strb	r3, [r7, #23]
    break;
 8012a4e:	e026      	b.n	8012a9e <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 8012a50:	7afb      	ldrb	r3, [r7, #11]
 8012a52:	687a      	ldr	r2, [r7, #4]
 8012a54:	4619      	mov	r1, r3
 8012a56:	68f8      	ldr	r0, [r7, #12]
 8012a58:	f000 fdbe 	bl	80135d8 <SCSI_Write10>
 8012a5c:	4603      	mov	r3, r0
 8012a5e:	75fb      	strb	r3, [r7, #23]
    break;
 8012a60:	e01d      	b.n	8012a9e <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 8012a62:	7afb      	ldrb	r3, [r7, #11]
 8012a64:	687a      	ldr	r2, [r7, #4]
 8012a66:	4619      	mov	r1, r3
 8012a68:	68f8      	ldr	r0, [r7, #12]
 8012a6a:	f000 fe8d 	bl	8013788 <SCSI_Write12>
 8012a6e:	4603      	mov	r3, r0
 8012a70:	75fb      	strb	r3, [r7, #23]
    break;
 8012a72:	e014      	b.n	8012a9e <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 8012a74:	7afb      	ldrb	r3, [r7, #11]
 8012a76:	687a      	ldr	r2, [r7, #4]
 8012a78:	4619      	mov	r1, r3
 8012a7a:	68f8      	ldr	r0, [r7, #12]
 8012a7c:	f000 ff6c 	bl	8013958 <SCSI_Verify10>
 8012a80:	4603      	mov	r3, r0
 8012a82:	75fb      	strb	r3, [r7, #23]
    break;
 8012a84:	e00b      	b.n	8012a9e <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8012a86:	7af9      	ldrb	r1, [r7, #11]
 8012a88:	2320      	movs	r3, #32
 8012a8a:	2205      	movs	r2, #5
 8012a8c:	68f8      	ldr	r0, [r7, #12]
 8012a8e:	f000 fb61 	bl	8013154 <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8012a92:	693b      	ldr	r3, [r7, #16]
 8012a94:	2202      	movs	r2, #2
 8012a96:	725a      	strb	r2, [r3, #9]
    ret = -1;
 8012a98:	23ff      	movs	r3, #255	; 0xff
 8012a9a:	75fb      	strb	r3, [r7, #23]
    break;
 8012a9c:	bf00      	nop
  }

  return ret;
 8012a9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012aa2:	4618      	mov	r0, r3
 8012aa4:	3718      	adds	r7, #24
 8012aa6:	46bd      	mov	sp, r7
 8012aa8:	bd80      	pop	{r7, pc}

08012aaa <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012aaa:	b580      	push	{r7, lr}
 8012aac:	b086      	sub	sp, #24
 8012aae:	af00      	add	r7, sp, #0
 8012ab0:	60f8      	str	r0, [r7, #12]
 8012ab2:	460b      	mov	r3, r1
 8012ab4:	607a      	str	r2, [r7, #4]
 8012ab6:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012abe:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8012ac0:	697a      	ldr	r2, [r7, #20]
 8012ac2:	f248 0318 	movw	r3, #32792	; 0x8018
 8012ac6:	4413      	add	r3, r2
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d00c      	beq.n	8012ae8 <SCSI_TestUnitReady+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012ace:	697a      	ldr	r2, [r7, #20]
 8012ad0:	f248 031d 	movw	r3, #32797	; 0x801d
 8012ad4:	4413      	add	r3, r2
 8012ad6:	7819      	ldrb	r1, [r3, #0]
 8012ad8:	2320      	movs	r3, #32
 8012ada:	2205      	movs	r2, #5
 8012adc:	68f8      	ldr	r0, [r7, #12]
 8012ade:	f000 fb39 	bl	8013154 <SCSI_SenseCode>

    return -1;
 8012ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8012ae6:	e02c      	b.n	8012b42 <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8012ae8:	697a      	ldr	r2, [r7, #20]
 8012aea:	f248 0362 	movw	r3, #32866	; 0x8062
 8012aee:	4413      	add	r3, r2
 8012af0:	781b      	ldrb	r3, [r3, #0]
 8012af2:	2b02      	cmp	r3, #2
 8012af4:	d10b      	bne.n	8012b0e <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012af6:	7af9      	ldrb	r1, [r7, #11]
 8012af8:	233a      	movs	r3, #58	; 0x3a
 8012afa:	2202      	movs	r2, #2
 8012afc:	68f8      	ldr	r0, [r7, #12]
 8012afe:	f000 fb29 	bl	8013154 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8012b02:	697b      	ldr	r3, [r7, #20]
 8012b04:	2205      	movs	r2, #5
 8012b06:	721a      	strb	r2, [r3, #8]
    return -1;
 8012b08:	f04f 33ff 	mov.w	r3, #4294967295
 8012b0c:	e019      	b.n	8012b42 <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012b14:	689b      	ldr	r3, [r3, #8]
 8012b16:	7afa      	ldrb	r2, [r7, #11]
 8012b18:	4610      	mov	r0, r2
 8012b1a:	4798      	blx	r3
 8012b1c:	4603      	mov	r3, r0
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d00b      	beq.n	8012b3a <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012b22:	7af9      	ldrb	r1, [r7, #11]
 8012b24:	233a      	movs	r3, #58	; 0x3a
 8012b26:	2202      	movs	r2, #2
 8012b28:	68f8      	ldr	r0, [r7, #12]
 8012b2a:	f000 fb13 	bl	8013154 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8012b2e:	697b      	ldr	r3, [r7, #20]
 8012b30:	2205      	movs	r2, #5
 8012b32:	721a      	strb	r2, [r3, #8]

    return -1;
 8012b34:	f04f 33ff 	mov.w	r3, #4294967295
 8012b38:	e003      	b.n	8012b42 <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 8012b3a:	697b      	ldr	r3, [r7, #20]
 8012b3c:	2200      	movs	r2, #0
 8012b3e:	60da      	str	r2, [r3, #12]

  return 0;
 8012b40:	2300      	movs	r3, #0
}
 8012b42:	4618      	mov	r0, r3
 8012b44:	3718      	adds	r7, #24
 8012b46:	46bd      	mov	sp, r7
 8012b48:	bd80      	pop	{r7, pc}
	...

08012b4c <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012b4c:	b580      	push	{r7, lr}
 8012b4e:	b088      	sub	sp, #32
 8012b50:	af00      	add	r7, sp, #0
 8012b52:	60f8      	str	r0, [r7, #12]
 8012b54:	460b      	mov	r3, r1
 8012b56:	607a      	str	r2, [r7, #4]
 8012b58:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012b60:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 8012b62:	69ba      	ldr	r2, [r7, #24]
 8012b64:	f248 0318 	movw	r3, #32792	; 0x8018
 8012b68:	4413      	add	r3, r2
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d10c      	bne.n	8012b8a <SCSI_Inquiry+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012b70:	69ba      	ldr	r2, [r7, #24]
 8012b72:	f248 031d 	movw	r3, #32797	; 0x801d
 8012b76:	4413      	add	r3, r2
 8012b78:	7819      	ldrb	r1, [r3, #0]
 8012b7a:	2320      	movs	r3, #32
 8012b7c:	2205      	movs	r2, #5
 8012b7e:	68f8      	ldr	r0, [r7, #12]
 8012b80:	f000 fae8 	bl	8013154 <SCSI_SenseCode>
    return -1;
 8012b84:	f04f 33ff 	mov.w	r3, #4294967295
 8012b88:	e04c      	b.n	8012c24 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	3301      	adds	r3, #1
 8012b8e:	781b      	ldrb	r3, [r3, #0]
 8012b90:	f003 0301 	and.w	r3, r3, #1
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d022      	beq.n	8012bde <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	3302      	adds	r3, #2
 8012b9c:	781b      	ldrb	r3, [r3, #0]
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d105      	bne.n	8012bae <SCSI_Inquiry+0x62>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8012ba2:	2206      	movs	r2, #6
 8012ba4:	4921      	ldr	r1, [pc, #132]	; (8012c2c <SCSI_Inquiry+0xe0>)
 8012ba6:	69b8      	ldr	r0, [r7, #24]
 8012ba8:	f001 f862 	bl	8013c70 <SCSI_UpdateBotData>
 8012bac:	e039      	b.n	8012c22 <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	3302      	adds	r3, #2
 8012bb2:	781b      	ldrb	r3, [r3, #0]
 8012bb4:	2b80      	cmp	r3, #128	; 0x80
 8012bb6:	d105      	bne.n	8012bc4 <SCSI_Inquiry+0x78>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8012bb8:	2208      	movs	r2, #8
 8012bba:	491d      	ldr	r1, [pc, #116]	; (8012c30 <SCSI_Inquiry+0xe4>)
 8012bbc:	69b8      	ldr	r0, [r7, #24]
 8012bbe:	f001 f857 	bl	8013c70 <SCSI_UpdateBotData>
 8012bc2:	e02e      	b.n	8012c22 <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8012bc4:	69ba      	ldr	r2, [r7, #24]
 8012bc6:	f248 031d 	movw	r3, #32797	; 0x801d
 8012bca:	4413      	add	r3, r2
 8012bcc:	7819      	ldrb	r1, [r3, #0]
 8012bce:	2324      	movs	r3, #36	; 0x24
 8012bd0:	2205      	movs	r2, #5
 8012bd2:	68f8      	ldr	r0, [r7, #12]
 8012bd4:	f000 fabe 	bl	8013154 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8012bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8012bdc:	e022      	b.n	8012c24 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012be4:	69d9      	ldr	r1, [r3, #28]
 8012be6:	7afa      	ldrb	r2, [r7, #11]
 8012be8:	4613      	mov	r3, r2
 8012bea:	00db      	lsls	r3, r3, #3
 8012bec:	4413      	add	r3, r2
 8012bee:	009b      	lsls	r3, r3, #2
 8012bf0:	440b      	add	r3, r1
 8012bf2:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8012bf4:	697b      	ldr	r3, [r7, #20]
 8012bf6:	3304      	adds	r3, #4
 8012bf8:	781b      	ldrb	r3, [r3, #0]
 8012bfa:	b29b      	uxth	r3, r3
 8012bfc:	3305      	adds	r3, #5
 8012bfe:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	3304      	adds	r3, #4
 8012c04:	781b      	ldrb	r3, [r3, #0]
 8012c06:	b29b      	uxth	r3, r3
 8012c08:	8bfa      	ldrh	r2, [r7, #30]
 8012c0a:	429a      	cmp	r2, r3
 8012c0c:	d303      	bcc.n	8012c16 <SCSI_Inquiry+0xca>
    {
      len = params[4];
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	3304      	adds	r3, #4
 8012c12:	781b      	ldrb	r3, [r3, #0]
 8012c14:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8012c16:	8bfb      	ldrh	r3, [r7, #30]
 8012c18:	461a      	mov	r2, r3
 8012c1a:	6979      	ldr	r1, [r7, #20]
 8012c1c:	69b8      	ldr	r0, [r7, #24]
 8012c1e:	f001 f827 	bl	8013c70 <SCSI_UpdateBotData>
  }

  return 0;
 8012c22:	2300      	movs	r3, #0
}
 8012c24:	4618      	mov	r0, r3
 8012c26:	3720      	adds	r7, #32
 8012c28:	46bd      	mov	sp, r7
 8012c2a:	bd80      	pop	{r7, pc}
 8012c2c:	240000f8 	.word	0x240000f8
 8012c30:	24000100 	.word	0x24000100

08012c34 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012c34:	b590      	push	{r4, r7, lr}
 8012c36:	b087      	sub	sp, #28
 8012c38:	af00      	add	r7, sp, #0
 8012c3a:	60f8      	str	r0, [r7, #12]
 8012c3c:	460b      	mov	r3, r1
 8012c3e:	607a      	str	r2, [r7, #4]
 8012c40:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012c48:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012c50:	685c      	ldr	r4, [r3, #4]
 8012c52:	697a      	ldr	r2, [r7, #20]
 8012c54:	f248 0368 	movw	r3, #32872	; 0x8068
 8012c58:	4413      	add	r3, r2
 8012c5a:	6979      	ldr	r1, [r7, #20]
 8012c5c:	f248 0264 	movw	r2, #32868	; 0x8064
 8012c60:	440a      	add	r2, r1
 8012c62:	7af8      	ldrb	r0, [r7, #11]
 8012c64:	4619      	mov	r1, r3
 8012c66:	47a0      	blx	r4
 8012c68:	4603      	mov	r3, r0
 8012c6a:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8012c6c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d106      	bne.n	8012c82 <SCSI_ReadCapacity10+0x4e>
 8012c74:	697a      	ldr	r2, [r7, #20]
 8012c76:	f248 0362 	movw	r3, #32866	; 0x8062
 8012c7a:	4413      	add	r3, r2
 8012c7c:	781b      	ldrb	r3, [r3, #0]
 8012c7e:	2b02      	cmp	r3, #2
 8012c80:	d108      	bne.n	8012c94 <SCSI_ReadCapacity10+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012c82:	7af9      	ldrb	r1, [r7, #11]
 8012c84:	233a      	movs	r3, #58	; 0x3a
 8012c86:	2202      	movs	r2, #2
 8012c88:	68f8      	ldr	r0, [r7, #12]
 8012c8a:	f000 fa63 	bl	8013154 <SCSI_SenseCode>
    return -1;
 8012c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8012c92:	e04f      	b.n	8012d34 <SCSI_ReadCapacity10+0x100>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8012c94:	697a      	ldr	r2, [r7, #20]
 8012c96:	f248 0368 	movw	r3, #32872	; 0x8068
 8012c9a:	4413      	add	r3, r2
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	3b01      	subs	r3, #1
 8012ca0:	0e1b      	lsrs	r3, r3, #24
 8012ca2:	b2da      	uxtb	r2, r3
 8012ca4:	697b      	ldr	r3, [r7, #20]
 8012ca6:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8012ca8:	697a      	ldr	r2, [r7, #20]
 8012caa:	f248 0368 	movw	r3, #32872	; 0x8068
 8012cae:	4413      	add	r3, r2
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	3b01      	subs	r3, #1
 8012cb4:	0c1b      	lsrs	r3, r3, #16
 8012cb6:	b2da      	uxtb	r2, r3
 8012cb8:	697b      	ldr	r3, [r7, #20]
 8012cba:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8012cbc:	697a      	ldr	r2, [r7, #20]
 8012cbe:	f248 0368 	movw	r3, #32872	; 0x8068
 8012cc2:	4413      	add	r3, r2
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	3b01      	subs	r3, #1
 8012cc8:	0a1b      	lsrs	r3, r3, #8
 8012cca:	b2da      	uxtb	r2, r3
 8012ccc:	697b      	ldr	r3, [r7, #20]
 8012cce:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8012cd0:	697a      	ldr	r2, [r7, #20]
 8012cd2:	f248 0368 	movw	r3, #32872	; 0x8068
 8012cd6:	4413      	add	r3, r2
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	b2db      	uxtb	r3, r3
 8012cdc:	3b01      	subs	r3, #1
 8012cde:	b2da      	uxtb	r2, r3
 8012ce0:	697b      	ldr	r3, [r7, #20]
 8012ce2:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8012ce4:	697a      	ldr	r2, [r7, #20]
 8012ce6:	f248 0364 	movw	r3, #32868	; 0x8064
 8012cea:	4413      	add	r3, r2
 8012cec:	881b      	ldrh	r3, [r3, #0]
 8012cee:	161b      	asrs	r3, r3, #24
 8012cf0:	b2da      	uxtb	r2, r3
 8012cf2:	697b      	ldr	r3, [r7, #20]
 8012cf4:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8012cf6:	697a      	ldr	r2, [r7, #20]
 8012cf8:	f248 0364 	movw	r3, #32868	; 0x8064
 8012cfc:	4413      	add	r3, r2
 8012cfe:	881b      	ldrh	r3, [r3, #0]
 8012d00:	141b      	asrs	r3, r3, #16
 8012d02:	b2da      	uxtb	r2, r3
 8012d04:	697b      	ldr	r3, [r7, #20]
 8012d06:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8012d08:	697a      	ldr	r2, [r7, #20]
 8012d0a:	f248 0364 	movw	r3, #32868	; 0x8064
 8012d0e:	4413      	add	r3, r2
 8012d10:	881b      	ldrh	r3, [r3, #0]
 8012d12:	0a1b      	lsrs	r3, r3, #8
 8012d14:	b29b      	uxth	r3, r3
 8012d16:	b2da      	uxtb	r2, r3
 8012d18:	697b      	ldr	r3, [r7, #20]
 8012d1a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8012d1c:	697a      	ldr	r2, [r7, #20]
 8012d1e:	f248 0364 	movw	r3, #32868	; 0x8064
 8012d22:	4413      	add	r3, r2
 8012d24:	881b      	ldrh	r3, [r3, #0]
 8012d26:	b2da      	uxtb	r2, r3
 8012d28:	697b      	ldr	r3, [r7, #20]
 8012d2a:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8012d2c:	697b      	ldr	r3, [r7, #20]
 8012d2e:	2208      	movs	r2, #8
 8012d30:	60da      	str	r2, [r3, #12]

  return 0;
 8012d32:	2300      	movs	r3, #0

}
 8012d34:	4618      	mov	r0, r3
 8012d36:	371c      	adds	r7, #28
 8012d38:	46bd      	mov	sp, r7
 8012d3a:	bd90      	pop	{r4, r7, pc}

08012d3c <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012d3c:	b590      	push	{r4, r7, lr}
 8012d3e:	b089      	sub	sp, #36	; 0x24
 8012d40:	af00      	add	r7, sp, #0
 8012d42:	60f8      	str	r0, [r7, #12]
 8012d44:	460b      	mov	r3, r1
 8012d46:	607a      	str	r2, [r7, #4]
 8012d48:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012d50:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012d58:	685c      	ldr	r4, [r3, #4]
 8012d5a:	69ba      	ldr	r2, [r7, #24]
 8012d5c:	f248 0368 	movw	r3, #32872	; 0x8068
 8012d60:	4413      	add	r3, r2
 8012d62:	69b9      	ldr	r1, [r7, #24]
 8012d64:	f248 0264 	movw	r2, #32868	; 0x8064
 8012d68:	440a      	add	r2, r1
 8012d6a:	7af8      	ldrb	r0, [r7, #11]
 8012d6c:	4619      	mov	r1, r3
 8012d6e:	47a0      	blx	r4
 8012d70:	4603      	mov	r3, r0
 8012d72:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8012d74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d106      	bne.n	8012d8a <SCSI_ReadCapacity16+0x4e>
 8012d7c:	69ba      	ldr	r2, [r7, #24]
 8012d7e:	f248 0362 	movw	r3, #32866	; 0x8062
 8012d82:	4413      	add	r3, r2
 8012d84:	781b      	ldrb	r3, [r3, #0]
 8012d86:	2b02      	cmp	r3, #2
 8012d88:	d108      	bne.n	8012d9c <SCSI_ReadCapacity16+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012d8a:	7af9      	ldrb	r1, [r7, #11]
 8012d8c:	233a      	movs	r3, #58	; 0x3a
 8012d8e:	2202      	movs	r2, #2
 8012d90:	68f8      	ldr	r0, [r7, #12]
 8012d92:	f000 f9df 	bl	8013154 <SCSI_SenseCode>
    return -1;
 8012d96:	f04f 33ff 	mov.w	r3, #4294967295
 8012d9a:	e084      	b.n	8012ea6 <SCSI_ReadCapacity16+0x16a>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	330a      	adds	r3, #10
 8012da0:	781b      	ldrb	r3, [r3, #0]
 8012da2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	330b      	adds	r3, #11
 8012da8:	781b      	ldrb	r3, [r3, #0]
 8012daa:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012dac:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	330c      	adds	r3, #12
 8012db2:	781b      	ldrb	r3, [r3, #0]
 8012db4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8012db6:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8012db8:	687a      	ldr	r2, [r7, #4]
 8012dba:	320d      	adds	r2, #13
 8012dbc:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8012dbe:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012dc0:	69bb      	ldr	r3, [r7, #24]
 8012dc2:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8012dc4:	2300      	movs	r3, #0
 8012dc6:	77fb      	strb	r3, [r7, #31]
 8012dc8:	e007      	b.n	8012dda <SCSI_ReadCapacity16+0x9e>
  {
    hmsc->bot_data[idx] = 0U;
 8012dca:	7ffb      	ldrb	r3, [r7, #31]
 8012dcc:	69ba      	ldr	r2, [r7, #24]
 8012dce:	4413      	add	r3, r2
 8012dd0:	2200      	movs	r2, #0
 8012dd2:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8012dd4:	7ffb      	ldrb	r3, [r7, #31]
 8012dd6:	3301      	adds	r3, #1
 8012dd8:	77fb      	strb	r3, [r7, #31]
 8012dda:	7ffa      	ldrb	r2, [r7, #31]
 8012ddc:	69bb      	ldr	r3, [r7, #24]
 8012dde:	68db      	ldr	r3, [r3, #12]
 8012de0:	429a      	cmp	r2, r3
 8012de2:	d3f2      	bcc.n	8012dca <SCSI_ReadCapacity16+0x8e>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8012de4:	69ba      	ldr	r2, [r7, #24]
 8012de6:	f248 0368 	movw	r3, #32872	; 0x8068
 8012dea:	4413      	add	r3, r2
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	3b01      	subs	r3, #1
 8012df0:	0e1b      	lsrs	r3, r3, #24
 8012df2:	b2da      	uxtb	r2, r3
 8012df4:	69bb      	ldr	r3, [r7, #24]
 8012df6:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8012df8:	69ba      	ldr	r2, [r7, #24]
 8012dfa:	f248 0368 	movw	r3, #32872	; 0x8068
 8012dfe:	4413      	add	r3, r2
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	3b01      	subs	r3, #1
 8012e04:	0c1b      	lsrs	r3, r3, #16
 8012e06:	b2da      	uxtb	r2, r3
 8012e08:	69bb      	ldr	r3, [r7, #24]
 8012e0a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8012e0c:	69ba      	ldr	r2, [r7, #24]
 8012e0e:	f248 0368 	movw	r3, #32872	; 0x8068
 8012e12:	4413      	add	r3, r2
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	3b01      	subs	r3, #1
 8012e18:	0a1b      	lsrs	r3, r3, #8
 8012e1a:	b2da      	uxtb	r2, r3
 8012e1c:	69bb      	ldr	r3, [r7, #24]
 8012e1e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8012e20:	69ba      	ldr	r2, [r7, #24]
 8012e22:	f248 0368 	movw	r3, #32872	; 0x8068
 8012e26:	4413      	add	r3, r2
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	b2db      	uxtb	r3, r3
 8012e2c:	3b01      	subs	r3, #1
 8012e2e:	b2da      	uxtb	r2, r3
 8012e30:	69bb      	ldr	r3, [r7, #24]
 8012e32:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8012e34:	69ba      	ldr	r2, [r7, #24]
 8012e36:	f248 0364 	movw	r3, #32868	; 0x8064
 8012e3a:	4413      	add	r3, r2
 8012e3c:	881b      	ldrh	r3, [r3, #0]
 8012e3e:	161b      	asrs	r3, r3, #24
 8012e40:	b2da      	uxtb	r2, r3
 8012e42:	69bb      	ldr	r3, [r7, #24]
 8012e44:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8012e46:	69ba      	ldr	r2, [r7, #24]
 8012e48:	f248 0364 	movw	r3, #32868	; 0x8064
 8012e4c:	4413      	add	r3, r2
 8012e4e:	881b      	ldrh	r3, [r3, #0]
 8012e50:	141b      	asrs	r3, r3, #16
 8012e52:	b2da      	uxtb	r2, r3
 8012e54:	69bb      	ldr	r3, [r7, #24]
 8012e56:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8012e58:	69ba      	ldr	r2, [r7, #24]
 8012e5a:	f248 0364 	movw	r3, #32868	; 0x8064
 8012e5e:	4413      	add	r3, r2
 8012e60:	881b      	ldrh	r3, [r3, #0]
 8012e62:	0a1b      	lsrs	r3, r3, #8
 8012e64:	b29b      	uxth	r3, r3
 8012e66:	b2da      	uxtb	r2, r3
 8012e68:	69bb      	ldr	r3, [r7, #24]
 8012e6a:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8012e6c:	69ba      	ldr	r2, [r7, #24]
 8012e6e:	f248 0364 	movw	r3, #32868	; 0x8064
 8012e72:	4413      	add	r3, r2
 8012e74:	881b      	ldrh	r3, [r3, #0]
 8012e76:	b2da      	uxtb	r2, r3
 8012e78:	69bb      	ldr	r3, [r7, #24]
 8012e7a:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	330a      	adds	r3, #10
 8012e80:	781b      	ldrb	r3, [r3, #0]
 8012e82:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	330b      	adds	r3, #11
 8012e88:	781b      	ldrb	r3, [r3, #0]
 8012e8a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012e8c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	330c      	adds	r3, #12
 8012e92:	781b      	ldrb	r3, [r3, #0]
 8012e94:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8012e96:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8012e98:	687a      	ldr	r2, [r7, #4]
 8012e9a:	320d      	adds	r2, #13
 8012e9c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8012e9e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012ea0:	69bb      	ldr	r3, [r7, #24]
 8012ea2:	60da      	str	r2, [r3, #12]

  return 0;
 8012ea4:	2300      	movs	r3, #0
}
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	3724      	adds	r7, #36	; 0x24
 8012eaa:	46bd      	mov	sp, r7
 8012eac:	bd90      	pop	{r4, r7, pc}

08012eae <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012eae:	b580      	push	{r7, lr}
 8012eb0:	b088      	sub	sp, #32
 8012eb2:	af00      	add	r7, sp, #0
 8012eb4:	60f8      	str	r0, [r7, #12]
 8012eb6:	460b      	mov	r3, r1
 8012eb8:	607a      	str	r2, [r7, #4]
 8012eba:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012ec2:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012eca:	685b      	ldr	r3, [r3, #4]
 8012ecc:	f107 0214 	add.w	r2, r7, #20
 8012ed0:	f107 0110 	add.w	r1, r7, #16
 8012ed4:	7af8      	ldrb	r0, [r7, #11]
 8012ed6:	4798      	blx	r3
 8012ed8:	4603      	mov	r3, r0
 8012eda:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8012edc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d106      	bne.n	8012ef2 <SCSI_ReadFormatCapacity+0x44>
 8012ee4:	69ba      	ldr	r2, [r7, #24]
 8012ee6:	f248 0362 	movw	r3, #32866	; 0x8062
 8012eea:	4413      	add	r3, r2
 8012eec:	781b      	ldrb	r3, [r3, #0]
 8012eee:	2b02      	cmp	r3, #2
 8012ef0:	d108      	bne.n	8012f04 <SCSI_ReadFormatCapacity+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012ef2:	7af9      	ldrb	r1, [r7, #11]
 8012ef4:	233a      	movs	r3, #58	; 0x3a
 8012ef6:	2202      	movs	r2, #2
 8012ef8:	68f8      	ldr	r0, [r7, #12]
 8012efa:	f000 f92b 	bl	8013154 <SCSI_SenseCode>
    return -1;
 8012efe:	f04f 33ff 	mov.w	r3, #4294967295
 8012f02:	e03e      	b.n	8012f82 <SCSI_ReadFormatCapacity+0xd4>
  }

  for (i = 0U; i < 12U ; i++)
 8012f04:	2300      	movs	r3, #0
 8012f06:	83fb      	strh	r3, [r7, #30]
 8012f08:	e007      	b.n	8012f1a <SCSI_ReadFormatCapacity+0x6c>
  {
    hmsc->bot_data[i] = 0U;
 8012f0a:	8bfb      	ldrh	r3, [r7, #30]
 8012f0c:	69ba      	ldr	r2, [r7, #24]
 8012f0e:	4413      	add	r3, r2
 8012f10:	2200      	movs	r2, #0
 8012f12:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8012f14:	8bfb      	ldrh	r3, [r7, #30]
 8012f16:	3301      	adds	r3, #1
 8012f18:	83fb      	strh	r3, [r7, #30]
 8012f1a:	8bfb      	ldrh	r3, [r7, #30]
 8012f1c:	2b0b      	cmp	r3, #11
 8012f1e:	d9f4      	bls.n	8012f0a <SCSI_ReadFormatCapacity+0x5c>
  }

  hmsc->bot_data[3] = 0x08U;
 8012f20:	69bb      	ldr	r3, [r7, #24]
 8012f22:	2208      	movs	r2, #8
 8012f24:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8012f26:	693b      	ldr	r3, [r7, #16]
 8012f28:	3b01      	subs	r3, #1
 8012f2a:	0e1b      	lsrs	r3, r3, #24
 8012f2c:	b2da      	uxtb	r2, r3
 8012f2e:	69bb      	ldr	r3, [r7, #24]
 8012f30:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8012f32:	693b      	ldr	r3, [r7, #16]
 8012f34:	3b01      	subs	r3, #1
 8012f36:	0c1b      	lsrs	r3, r3, #16
 8012f38:	b2da      	uxtb	r2, r3
 8012f3a:	69bb      	ldr	r3, [r7, #24]
 8012f3c:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8012f3e:	693b      	ldr	r3, [r7, #16]
 8012f40:	3b01      	subs	r3, #1
 8012f42:	0a1b      	lsrs	r3, r3, #8
 8012f44:	b2da      	uxtb	r2, r3
 8012f46:	69bb      	ldr	r3, [r7, #24]
 8012f48:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8012f4a:	693b      	ldr	r3, [r7, #16]
 8012f4c:	b2db      	uxtb	r3, r3
 8012f4e:	3b01      	subs	r3, #1
 8012f50:	b2da      	uxtb	r2, r3
 8012f52:	69bb      	ldr	r3, [r7, #24]
 8012f54:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8012f56:	69bb      	ldr	r3, [r7, #24]
 8012f58:	2202      	movs	r2, #2
 8012f5a:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8012f5c:	8abb      	ldrh	r3, [r7, #20]
 8012f5e:	141b      	asrs	r3, r3, #16
 8012f60:	b2da      	uxtb	r2, r3
 8012f62:	69bb      	ldr	r3, [r7, #24]
 8012f64:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8012f66:	8abb      	ldrh	r3, [r7, #20]
 8012f68:	0a1b      	lsrs	r3, r3, #8
 8012f6a:	b29b      	uxth	r3, r3
 8012f6c:	b2da      	uxtb	r2, r3
 8012f6e:	69bb      	ldr	r3, [r7, #24]
 8012f70:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8012f72:	8abb      	ldrh	r3, [r7, #20]
 8012f74:	b2da      	uxtb	r2, r3
 8012f76:	69bb      	ldr	r3, [r7, #24]
 8012f78:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8012f7a:	69bb      	ldr	r3, [r7, #24]
 8012f7c:	220c      	movs	r2, #12
 8012f7e:	60da      	str	r2, [r3, #12]

  return 0;
 8012f80:	2300      	movs	r3, #0
}
 8012f82:	4618      	mov	r0, r3
 8012f84:	3720      	adds	r7, #32
 8012f86:	46bd      	mov	sp, r7
 8012f88:	bd80      	pop	{r7, pc}
	...

08012f8c <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012f8c:	b580      	push	{r7, lr}
 8012f8e:	b086      	sub	sp, #24
 8012f90:	af00      	add	r7, sp, #0
 8012f92:	60f8      	str	r0, [r7, #12]
 8012f94:	460b      	mov	r3, r1
 8012f96:	607a      	str	r2, [r7, #4]
 8012f98:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012fa0:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8012fa2:	2317      	movs	r3, #23
 8012fa4:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	3304      	adds	r3, #4
 8012faa:	781b      	ldrb	r3, [r3, #0]
 8012fac:	b29b      	uxth	r3, r3
 8012fae:	8afa      	ldrh	r2, [r7, #22]
 8012fb0:	429a      	cmp	r2, r3
 8012fb2:	d303      	bcc.n	8012fbc <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	3304      	adds	r3, #4
 8012fb8:	781b      	ldrb	r3, [r3, #0]
 8012fba:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8012fbc:	8afb      	ldrh	r3, [r7, #22]
 8012fbe:	461a      	mov	r2, r3
 8012fc0:	4904      	ldr	r1, [pc, #16]	; (8012fd4 <SCSI_ModeSense6+0x48>)
 8012fc2:	6938      	ldr	r0, [r7, #16]
 8012fc4:	f000 fe54 	bl	8013c70 <SCSI_UpdateBotData>

  return 0;
 8012fc8:	2300      	movs	r3, #0
}
 8012fca:	4618      	mov	r0, r3
 8012fcc:	3718      	adds	r7, #24
 8012fce:	46bd      	mov	sp, r7
 8012fd0:	bd80      	pop	{r7, pc}
 8012fd2:	bf00      	nop
 8012fd4:	24000108 	.word	0x24000108

08012fd8 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012fd8:	b580      	push	{r7, lr}
 8012fda:	b086      	sub	sp, #24
 8012fdc:	af00      	add	r7, sp, #0
 8012fde:	60f8      	str	r0, [r7, #12]
 8012fe0:	460b      	mov	r3, r1
 8012fe2:	607a      	str	r2, [r7, #4]
 8012fe4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012fec:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8012fee:	231b      	movs	r3, #27
 8012ff0:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	3308      	adds	r3, #8
 8012ff6:	781b      	ldrb	r3, [r3, #0]
 8012ff8:	b29b      	uxth	r3, r3
 8012ffa:	8afa      	ldrh	r2, [r7, #22]
 8012ffc:	429a      	cmp	r2, r3
 8012ffe:	d303      	bcc.n	8013008 <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	3308      	adds	r3, #8
 8013004:	781b      	ldrb	r3, [r3, #0]
 8013006:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8013008:	8afb      	ldrh	r3, [r7, #22]
 801300a:	461a      	mov	r2, r3
 801300c:	4904      	ldr	r1, [pc, #16]	; (8013020 <SCSI_ModeSense10+0x48>)
 801300e:	6938      	ldr	r0, [r7, #16]
 8013010:	f000 fe2e 	bl	8013c70 <SCSI_UpdateBotData>

  return 0;
 8013014:	2300      	movs	r3, #0
}
 8013016:	4618      	mov	r0, r3
 8013018:	3718      	adds	r7, #24
 801301a:	46bd      	mov	sp, r7
 801301c:	bd80      	pop	{r7, pc}
 801301e:	bf00      	nop
 8013020:	24000120 	.word	0x24000120

08013024 <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013024:	b580      	push	{r7, lr}
 8013026:	b086      	sub	sp, #24
 8013028:	af00      	add	r7, sp, #0
 801302a:	60f8      	str	r0, [r7, #12]
 801302c:	460b      	mov	r3, r1
 801302e:	607a      	str	r2, [r7, #4]
 8013030:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013038:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 801303a:	693a      	ldr	r2, [r7, #16]
 801303c:	f248 0318 	movw	r3, #32792	; 0x8018
 8013040:	4413      	add	r3, r2
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	2b00      	cmp	r3, #0
 8013046:	d10c      	bne.n	8013062 <SCSI_RequestSense+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013048:	693a      	ldr	r2, [r7, #16]
 801304a:	f248 031d 	movw	r3, #32797	; 0x801d
 801304e:	4413      	add	r3, r2
 8013050:	7819      	ldrb	r1, [r3, #0]
 8013052:	2320      	movs	r3, #32
 8013054:	2205      	movs	r2, #5
 8013056:	68f8      	ldr	r0, [r7, #12]
 8013058:	f000 f87c 	bl	8013154 <SCSI_SenseCode>
    return -1;
 801305c:	f04f 33ff 	mov.w	r3, #4294967295
 8013060:	e074      	b.n	801314c <SCSI_RequestSense+0x128>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8013062:	2300      	movs	r3, #0
 8013064:	75fb      	strb	r3, [r7, #23]
 8013066:	e007      	b.n	8013078 <SCSI_RequestSense+0x54>
  {
    hmsc->bot_data[i] = 0U;
 8013068:	7dfb      	ldrb	r3, [r7, #23]
 801306a:	693a      	ldr	r2, [r7, #16]
 801306c:	4413      	add	r3, r2
 801306e:	2200      	movs	r2, #0
 8013070:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8013072:	7dfb      	ldrb	r3, [r7, #23]
 8013074:	3301      	adds	r3, #1
 8013076:	75fb      	strb	r3, [r7, #23]
 8013078:	7dfb      	ldrb	r3, [r7, #23]
 801307a:	2b11      	cmp	r3, #17
 801307c:	d9f4      	bls.n	8013068 <SCSI_RequestSense+0x44>
  }

  hmsc->bot_data[0] = 0x70U;
 801307e:	693b      	ldr	r3, [r7, #16]
 8013080:	2270      	movs	r2, #112	; 0x70
 8013082:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8013084:	693b      	ldr	r3, [r7, #16]
 8013086:	220c      	movs	r2, #12
 8013088:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 801308a:	693a      	ldr	r2, [r7, #16]
 801308c:	f248 0360 	movw	r3, #32864	; 0x8060
 8013090:	4413      	add	r3, r2
 8013092:	781a      	ldrb	r2, [r3, #0]
 8013094:	6939      	ldr	r1, [r7, #16]
 8013096:	f248 0361 	movw	r3, #32865	; 0x8061
 801309a:	440b      	add	r3, r1
 801309c:	781b      	ldrb	r3, [r3, #0]
 801309e:	429a      	cmp	r2, r3
 80130a0:	d045      	beq.n	801312e <SCSI_RequestSense+0x10a>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 80130a2:	693a      	ldr	r2, [r7, #16]
 80130a4:	f248 0360 	movw	r3, #32864	; 0x8060
 80130a8:	4413      	add	r3, r2
 80130aa:	781b      	ldrb	r3, [r3, #0]
 80130ac:	4619      	mov	r1, r3
 80130ae:	693a      	ldr	r2, [r7, #16]
 80130b0:	f241 0308 	movw	r3, #4104	; 0x1008
 80130b4:	440b      	add	r3, r1
 80130b6:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 80130ba:	693b      	ldr	r3, [r7, #16]
 80130bc:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 80130be:	693a      	ldr	r2, [r7, #16]
 80130c0:	f248 0360 	movw	r3, #32864	; 0x8060
 80130c4:	4413      	add	r3, r2
 80130c6:	781b      	ldrb	r3, [r3, #0]
 80130c8:	4619      	mov	r1, r3
 80130ca:	693a      	ldr	r2, [r7, #16]
 80130cc:	f241 0308 	movw	r3, #4104	; 0x1008
 80130d0:	440b      	add	r3, r1
 80130d2:	00db      	lsls	r3, r3, #3
 80130d4:	4413      	add	r3, r2
 80130d6:	791a      	ldrb	r2, [r3, #4]
 80130d8:	693b      	ldr	r3, [r7, #16]
 80130da:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 80130dc:	693a      	ldr	r2, [r7, #16]
 80130de:	f248 0360 	movw	r3, #32864	; 0x8060
 80130e2:	4413      	add	r3, r2
 80130e4:	781b      	ldrb	r3, [r3, #0]
 80130e6:	4619      	mov	r1, r3
 80130e8:	693a      	ldr	r2, [r7, #16]
 80130ea:	f241 0308 	movw	r3, #4104	; 0x1008
 80130ee:	440b      	add	r3, r1
 80130f0:	00db      	lsls	r3, r3, #3
 80130f2:	4413      	add	r3, r2
 80130f4:	795a      	ldrb	r2, [r3, #5]
 80130f6:	693b      	ldr	r3, [r7, #16]
 80130f8:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 80130fa:	693a      	ldr	r2, [r7, #16]
 80130fc:	f248 0360 	movw	r3, #32864	; 0x8060
 8013100:	4413      	add	r3, r2
 8013102:	781b      	ldrb	r3, [r3, #0]
 8013104:	3301      	adds	r3, #1
 8013106:	b2d9      	uxtb	r1, r3
 8013108:	693a      	ldr	r2, [r7, #16]
 801310a:	f248 0360 	movw	r3, #32864	; 0x8060
 801310e:	4413      	add	r3, r2
 8013110:	460a      	mov	r2, r1
 8013112:	701a      	strb	r2, [r3, #0]

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8013114:	693a      	ldr	r2, [r7, #16]
 8013116:	f248 0360 	movw	r3, #32864	; 0x8060
 801311a:	4413      	add	r3, r2
 801311c:	781b      	ldrb	r3, [r3, #0]
 801311e:	2b04      	cmp	r3, #4
 8013120:	d105      	bne.n	801312e <SCSI_RequestSense+0x10a>
    {
      hmsc->scsi_sense_head = 0U;
 8013122:	693a      	ldr	r2, [r7, #16]
 8013124:	f248 0360 	movw	r3, #32864	; 0x8060
 8013128:	4413      	add	r3, r2
 801312a:	2200      	movs	r2, #0
 801312c:	701a      	strb	r2, [r3, #0]
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 801312e:	693b      	ldr	r3, [r7, #16]
 8013130:	2212      	movs	r2, #18
 8013132:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	3304      	adds	r3, #4
 8013138:	781b      	ldrb	r3, [r3, #0]
 801313a:	2b12      	cmp	r3, #18
 801313c:	d805      	bhi.n	801314a <SCSI_RequestSense+0x126>
  {
    hmsc->bot_data_length = params[4];
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	3304      	adds	r3, #4
 8013142:	781b      	ldrb	r3, [r3, #0]
 8013144:	461a      	mov	r2, r3
 8013146:	693b      	ldr	r3, [r7, #16]
 8013148:	60da      	str	r2, [r3, #12]
  }

  return 0;
 801314a:	2300      	movs	r3, #0
}
 801314c:	4618      	mov	r0, r3
 801314e:	3718      	adds	r7, #24
 8013150:	46bd      	mov	sp, r7
 8013152:	bd80      	pop	{r7, pc}

08013154 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8013154:	b480      	push	{r7}
 8013156:	b085      	sub	sp, #20
 8013158:	af00      	add	r7, sp, #0
 801315a:	6078      	str	r0, [r7, #4]
 801315c:	4608      	mov	r0, r1
 801315e:	4611      	mov	r1, r2
 8013160:	461a      	mov	r2, r3
 8013162:	4603      	mov	r3, r0
 8013164:	70fb      	strb	r3, [r7, #3]
 8013166:	460b      	mov	r3, r1
 8013168:	70bb      	strb	r3, [r7, #2]
 801316a:	4613      	mov	r3, r2
 801316c:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013174:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8013176:	68fa      	ldr	r2, [r7, #12]
 8013178:	f248 0361 	movw	r3, #32865	; 0x8061
 801317c:	4413      	add	r3, r2
 801317e:	781b      	ldrb	r3, [r3, #0]
 8013180:	4619      	mov	r1, r3
 8013182:	68fa      	ldr	r2, [r7, #12]
 8013184:	f241 0308 	movw	r3, #4104	; 0x1008
 8013188:	440b      	add	r3, r1
 801318a:	78b9      	ldrb	r1, [r7, #2]
 801318c:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8013190:	68fa      	ldr	r2, [r7, #12]
 8013192:	f248 0361 	movw	r3, #32865	; 0x8061
 8013196:	4413      	add	r3, r2
 8013198:	781b      	ldrb	r3, [r3, #0]
 801319a:	4619      	mov	r1, r3
 801319c:	68fa      	ldr	r2, [r7, #12]
 801319e:	f241 0308 	movw	r3, #4104	; 0x1008
 80131a2:	440b      	add	r3, r1
 80131a4:	00db      	lsls	r3, r3, #3
 80131a6:	4413      	add	r3, r2
 80131a8:	787a      	ldrb	r2, [r7, #1]
 80131aa:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 80131ac:	68fa      	ldr	r2, [r7, #12]
 80131ae:	f248 0361 	movw	r3, #32865	; 0x8061
 80131b2:	4413      	add	r3, r2
 80131b4:	781b      	ldrb	r3, [r3, #0]
 80131b6:	4619      	mov	r1, r3
 80131b8:	68fa      	ldr	r2, [r7, #12]
 80131ba:	f241 0308 	movw	r3, #4104	; 0x1008
 80131be:	440b      	add	r3, r1
 80131c0:	00db      	lsls	r3, r3, #3
 80131c2:	4413      	add	r3, r2
 80131c4:	2200      	movs	r2, #0
 80131c6:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 80131c8:	68fa      	ldr	r2, [r7, #12]
 80131ca:	f248 0361 	movw	r3, #32865	; 0x8061
 80131ce:	4413      	add	r3, r2
 80131d0:	781b      	ldrb	r3, [r3, #0]
 80131d2:	3301      	adds	r3, #1
 80131d4:	b2d9      	uxtb	r1, r3
 80131d6:	68fa      	ldr	r2, [r7, #12]
 80131d8:	f248 0361 	movw	r3, #32865	; 0x8061
 80131dc:	4413      	add	r3, r2
 80131de:	460a      	mov	r2, r1
 80131e0:	701a      	strb	r2, [r3, #0]

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80131e2:	68fa      	ldr	r2, [r7, #12]
 80131e4:	f248 0361 	movw	r3, #32865	; 0x8061
 80131e8:	4413      	add	r3, r2
 80131ea:	781b      	ldrb	r3, [r3, #0]
 80131ec:	2b04      	cmp	r3, #4
 80131ee:	d105      	bne.n	80131fc <SCSI_SenseCode+0xa8>
  {
    hmsc->scsi_sense_tail = 0U;
 80131f0:	68fa      	ldr	r2, [r7, #12]
 80131f2:	f248 0361 	movw	r3, #32865	; 0x8061
 80131f6:	4413      	add	r3, r2
 80131f8:	2200      	movs	r2, #0
 80131fa:	701a      	strb	r2, [r3, #0]
  }
}
 80131fc:	bf00      	nop
 80131fe:	3714      	adds	r7, #20
 8013200:	46bd      	mov	sp, r7
 8013202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013206:	4770      	bx	lr

08013208 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013208:	b580      	push	{r7, lr}
 801320a:	b086      	sub	sp, #24
 801320c:	af00      	add	r7, sp, #0
 801320e:	60f8      	str	r0, [r7, #12]
 8013210:	460b      	mov	r3, r1
 8013212:	607a      	str	r2, [r7, #4]
 8013214:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801321c:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 801321e:	697a      	ldr	r2, [r7, #20]
 8013220:	f248 0362 	movw	r3, #32866	; 0x8062
 8013224:	4413      	add	r3, r2
 8013226:	781b      	ldrb	r3, [r3, #0]
 8013228:	2b01      	cmp	r3, #1
 801322a:	d10f      	bne.n	801324c <SCSI_StartStopUnit+0x44>
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	3304      	adds	r3, #4
 8013230:	781b      	ldrb	r3, [r3, #0]
 8013232:	f003 0303 	and.w	r3, r3, #3
 8013236:	2b02      	cmp	r3, #2
 8013238:	d108      	bne.n	801324c <SCSI_StartStopUnit+0x44>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 801323a:	7af9      	ldrb	r1, [r7, #11]
 801323c:	2324      	movs	r3, #36	; 0x24
 801323e:	2205      	movs	r2, #5
 8013240:	68f8      	ldr	r0, [r7, #12]
 8013242:	f7ff ff87 	bl	8013154 <SCSI_SenseCode>

    return -1;
 8013246:	f04f 33ff 	mov.w	r3, #4294967295
 801324a:	e02c      	b.n	80132a6 <SCSI_StartStopUnit+0x9e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	3304      	adds	r3, #4
 8013250:	781b      	ldrb	r3, [r3, #0]
 8013252:	f003 0303 	and.w	r3, r3, #3
 8013256:	2b01      	cmp	r3, #1
 8013258:	d106      	bne.n	8013268 <SCSI_StartStopUnit+0x60>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801325a:	697a      	ldr	r2, [r7, #20]
 801325c:	f248 0362 	movw	r3, #32866	; 0x8062
 8013260:	4413      	add	r3, r2
 8013262:	2200      	movs	r2, #0
 8013264:	701a      	strb	r2, [r3, #0]
 8013266:	e01a      	b.n	801329e <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	3304      	adds	r3, #4
 801326c:	781b      	ldrb	r3, [r3, #0]
 801326e:	f003 0303 	and.w	r3, r3, #3
 8013272:	2b02      	cmp	r3, #2
 8013274:	d106      	bne.n	8013284 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8013276:	697a      	ldr	r2, [r7, #20]
 8013278:	f248 0362 	movw	r3, #32866	; 0x8062
 801327c:	4413      	add	r3, r2
 801327e:	2202      	movs	r2, #2
 8013280:	701a      	strb	r2, [r3, #0]
 8013282:	e00c      	b.n	801329e <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	3304      	adds	r3, #4
 8013288:	781b      	ldrb	r3, [r3, #0]
 801328a:	f003 0303 	and.w	r3, r3, #3
 801328e:	2b03      	cmp	r3, #3
 8013290:	d105      	bne.n	801329e <SCSI_StartStopUnit+0x96>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8013292:	697a      	ldr	r2, [r7, #20]
 8013294:	f248 0362 	movw	r3, #32866	; 0x8062
 8013298:	4413      	add	r3, r2
 801329a:	2200      	movs	r2, #0
 801329c:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 801329e:	697b      	ldr	r3, [r7, #20]
 80132a0:	2200      	movs	r2, #0
 80132a2:	60da      	str	r2, [r3, #12]

  return 0;
 80132a4:	2300      	movs	r3, #0
}
 80132a6:	4618      	mov	r0, r3
 80132a8:	3718      	adds	r7, #24
 80132aa:	46bd      	mov	sp, r7
 80132ac:	bd80      	pop	{r7, pc}

080132ae <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80132ae:	b480      	push	{r7}
 80132b0:	b087      	sub	sp, #28
 80132b2:	af00      	add	r7, sp, #0
 80132b4:	60f8      	str	r0, [r7, #12]
 80132b6:	460b      	mov	r3, r1
 80132b8:	607a      	str	r2, [r7, #4]
 80132ba:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80132c2:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	3304      	adds	r3, #4
 80132c8:	781b      	ldrb	r3, [r3, #0]
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d106      	bne.n	80132dc <SCSI_AllowPreventRemovable+0x2e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80132ce:	697a      	ldr	r2, [r7, #20]
 80132d0:	f248 0362 	movw	r3, #32866	; 0x8062
 80132d4:	4413      	add	r3, r2
 80132d6:	2200      	movs	r2, #0
 80132d8:	701a      	strb	r2, [r3, #0]
 80132da:	e005      	b.n	80132e8 <SCSI_AllowPreventRemovable+0x3a>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 80132dc:	697a      	ldr	r2, [r7, #20]
 80132de:	f248 0362 	movw	r3, #32866	; 0x8062
 80132e2:	4413      	add	r3, r2
 80132e4:	2201      	movs	r2, #1
 80132e6:	701a      	strb	r2, [r3, #0]
  }

  hmsc->bot_data_length = 0U;
 80132e8:	697b      	ldr	r3, [r7, #20]
 80132ea:	2200      	movs	r2, #0
 80132ec:	60da      	str	r2, [r3, #12]

  return 0;
 80132ee:	2300      	movs	r3, #0
}
 80132f0:	4618      	mov	r0, r3
 80132f2:	371c      	adds	r7, #28
 80132f4:	46bd      	mov	sp, r7
 80132f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132fa:	4770      	bx	lr

080132fc <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80132fc:	b580      	push	{r7, lr}
 80132fe:	b086      	sub	sp, #24
 8013300:	af00      	add	r7, sp, #0
 8013302:	60f8      	str	r0, [r7, #12]
 8013304:	460b      	mov	r3, r1
 8013306:	607a      	str	r2, [r7, #4]
 8013308:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013310:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8013312:	697b      	ldr	r3, [r7, #20]
 8013314:	7a1b      	ldrb	r3, [r3, #8]
 8013316:	2b00      	cmp	r3, #0
 8013318:	f040 8094 	bne.w	8013444 <SCSI_Read10+0x148>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 801331c:	697a      	ldr	r2, [r7, #20]
 801331e:	f248 031c 	movw	r3, #32796	; 0x801c
 8013322:	4413      	add	r3, r2
 8013324:	781b      	ldrb	r3, [r3, #0]
 8013326:	b25b      	sxtb	r3, r3
 8013328:	2b00      	cmp	r3, #0
 801332a:	db0c      	blt.n	8013346 <SCSI_Read10+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801332c:	697a      	ldr	r2, [r7, #20]
 801332e:	f248 031d 	movw	r3, #32797	; 0x801d
 8013332:	4413      	add	r3, r2
 8013334:	7819      	ldrb	r1, [r3, #0]
 8013336:	2320      	movs	r3, #32
 8013338:	2205      	movs	r2, #5
 801333a:	68f8      	ldr	r0, [r7, #12]
 801333c:	f7ff ff0a 	bl	8013154 <SCSI_SenseCode>
      return -1;
 8013340:	f04f 33ff 	mov.w	r3, #4294967295
 8013344:	e088      	b.n	8013458 <SCSI_Read10+0x15c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8013346:	697a      	ldr	r2, [r7, #20]
 8013348:	f248 0362 	movw	r3, #32866	; 0x8062
 801334c:	4413      	add	r3, r2
 801334e:	781b      	ldrb	r3, [r3, #0]
 8013350:	2b02      	cmp	r3, #2
 8013352:	d108      	bne.n	8013366 <SCSI_Read10+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013354:	7af9      	ldrb	r1, [r7, #11]
 8013356:	233a      	movs	r3, #58	; 0x3a
 8013358:	2202      	movs	r2, #2
 801335a:	68f8      	ldr	r0, [r7, #12]
 801335c:	f7ff fefa 	bl	8013154 <SCSI_SenseCode>

      return -1;
 8013360:	f04f 33ff 	mov.w	r3, #4294967295
 8013364:	e078      	b.n	8013458 <SCSI_Read10+0x15c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801336c:	689b      	ldr	r3, [r3, #8]
 801336e:	7afa      	ldrb	r2, [r7, #11]
 8013370:	4610      	mov	r0, r2
 8013372:	4798      	blx	r3
 8013374:	4603      	mov	r3, r0
 8013376:	2b00      	cmp	r3, #0
 8013378:	d008      	beq.n	801338c <SCSI_Read10+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801337a:	7af9      	ldrb	r1, [r7, #11]
 801337c:	233a      	movs	r3, #58	; 0x3a
 801337e:	2202      	movs	r2, #2
 8013380:	68f8      	ldr	r0, [r7, #12]
 8013382:	f7ff fee7 	bl	8013154 <SCSI_SenseCode>
      return -1;
 8013386:	f04f 33ff 	mov.w	r3, #4294967295
 801338a:	e065      	b.n	8013458 <SCSI_Read10+0x15c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	3302      	adds	r3, #2
 8013390:	781b      	ldrb	r3, [r3, #0]
 8013392:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	3303      	adds	r3, #3
 8013398:	781b      	ldrb	r3, [r3, #0]
 801339a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801339c:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	3304      	adds	r3, #4
 80133a2:	781b      	ldrb	r3, [r3, #0]
 80133a4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80133a6:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80133a8:	687a      	ldr	r2, [r7, #4]
 80133aa:	3205      	adds	r2, #5
 80133ac:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80133ae:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80133b0:	6979      	ldr	r1, [r7, #20]
 80133b2:	f248 036c 	movw	r3, #32876	; 0x806c
 80133b6:	440b      	add	r3, r1
 80133b8:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	3307      	adds	r3, #7
 80133be:	781b      	ldrb	r3, [r3, #0]
 80133c0:	021b      	lsls	r3, r3, #8
 80133c2:	687a      	ldr	r2, [r7, #4]
 80133c4:	3208      	adds	r2, #8
 80133c6:	7812      	ldrb	r2, [r2, #0]
 80133c8:	431a      	orrs	r2, r3
 80133ca:	6979      	ldr	r1, [r7, #20]
 80133cc:	f248 0370 	movw	r3, #32880	; 0x8070
 80133d0:	440b      	add	r3, r1
 80133d2:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80133d4:	697a      	ldr	r2, [r7, #20]
 80133d6:	f248 036c 	movw	r3, #32876	; 0x806c
 80133da:	4413      	add	r3, r2
 80133dc:	6818      	ldr	r0, [r3, #0]
 80133de:	697a      	ldr	r2, [r7, #20]
 80133e0:	f248 0370 	movw	r3, #32880	; 0x8070
 80133e4:	4413      	add	r3, r2
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	7af9      	ldrb	r1, [r7, #11]
 80133ea:	4602      	mov	r2, r0
 80133ec:	68f8      	ldr	r0, [r7, #12]
 80133ee:	f000 faeb 	bl	80139c8 <SCSI_CheckAddressRange>
 80133f2:	4603      	mov	r3, r0
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	da02      	bge.n	80133fe <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80133f8:	f04f 33ff 	mov.w	r3, #4294967295
 80133fc:	e02c      	b.n	8013458 <SCSI_Read10+0x15c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80133fe:	697a      	ldr	r2, [r7, #20]
 8013400:	f248 0318 	movw	r3, #32792	; 0x8018
 8013404:	4413      	add	r3, r2
 8013406:	681a      	ldr	r2, [r3, #0]
 8013408:	6979      	ldr	r1, [r7, #20]
 801340a:	f248 0370 	movw	r3, #32880	; 0x8070
 801340e:	440b      	add	r3, r1
 8013410:	6819      	ldr	r1, [r3, #0]
 8013412:	6978      	ldr	r0, [r7, #20]
 8013414:	f248 0364 	movw	r3, #32868	; 0x8064
 8013418:	4403      	add	r3, r0
 801341a:	881b      	ldrh	r3, [r3, #0]
 801341c:	fb03 f301 	mul.w	r3, r3, r1
 8013420:	429a      	cmp	r2, r3
 8013422:	d00c      	beq.n	801343e <SCSI_Read10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013424:	697a      	ldr	r2, [r7, #20]
 8013426:	f248 031d 	movw	r3, #32797	; 0x801d
 801342a:	4413      	add	r3, r2
 801342c:	7819      	ldrb	r1, [r3, #0]
 801342e:	2320      	movs	r3, #32
 8013430:	2205      	movs	r2, #5
 8013432:	68f8      	ldr	r0, [r7, #12]
 8013434:	f7ff fe8e 	bl	8013154 <SCSI_SenseCode>
      return -1;
 8013438:	f04f 33ff 	mov.w	r3, #4294967295
 801343c:	e00c      	b.n	8013458 <SCSI_Read10+0x15c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 801343e:	697b      	ldr	r3, [r7, #20]
 8013440:	2202      	movs	r2, #2
 8013442:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8013444:	697b      	ldr	r3, [r7, #20]
 8013446:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801344a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 801344c:	7afb      	ldrb	r3, [r7, #11]
 801344e:	4619      	mov	r1, r3
 8013450:	68f8      	ldr	r0, [r7, #12]
 8013452:	f000 fadd 	bl	8013a10 <SCSI_ProcessRead>
 8013456:	4603      	mov	r3, r0
}
 8013458:	4618      	mov	r0, r3
 801345a:	3718      	adds	r7, #24
 801345c:	46bd      	mov	sp, r7
 801345e:	bd80      	pop	{r7, pc}

08013460 <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013460:	b580      	push	{r7, lr}
 8013462:	b086      	sub	sp, #24
 8013464:	af00      	add	r7, sp, #0
 8013466:	60f8      	str	r0, [r7, #12]
 8013468:	460b      	mov	r3, r1
 801346a:	607a      	str	r2, [r7, #4]
 801346c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013474:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8013476:	697b      	ldr	r3, [r7, #20]
 8013478:	7a1b      	ldrb	r3, [r3, #8]
 801347a:	2b00      	cmp	r3, #0
 801347c:	f040 809e 	bne.w	80135bc <SCSI_Read12+0x15c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8013480:	697a      	ldr	r2, [r7, #20]
 8013482:	f248 031c 	movw	r3, #32796	; 0x801c
 8013486:	4413      	add	r3, r2
 8013488:	781b      	ldrb	r3, [r3, #0]
 801348a:	b25b      	sxtb	r3, r3
 801348c:	2b00      	cmp	r3, #0
 801348e:	db0c      	blt.n	80134aa <SCSI_Read12+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013490:	697a      	ldr	r2, [r7, #20]
 8013492:	f248 031d 	movw	r3, #32797	; 0x801d
 8013496:	4413      	add	r3, r2
 8013498:	7819      	ldrb	r1, [r3, #0]
 801349a:	2320      	movs	r3, #32
 801349c:	2205      	movs	r2, #5
 801349e:	68f8      	ldr	r0, [r7, #12]
 80134a0:	f7ff fe58 	bl	8013154 <SCSI_SenseCode>
      return -1;
 80134a4:	f04f 33ff 	mov.w	r3, #4294967295
 80134a8:	e092      	b.n	80135d0 <SCSI_Read12+0x170>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80134aa:	697a      	ldr	r2, [r7, #20]
 80134ac:	f248 0362 	movw	r3, #32866	; 0x8062
 80134b0:	4413      	add	r3, r2
 80134b2:	781b      	ldrb	r3, [r3, #0]
 80134b4:	2b02      	cmp	r3, #2
 80134b6:	d108      	bne.n	80134ca <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80134b8:	7af9      	ldrb	r1, [r7, #11]
 80134ba:	233a      	movs	r3, #58	; 0x3a
 80134bc:	2202      	movs	r2, #2
 80134be:	68f8      	ldr	r0, [r7, #12]
 80134c0:	f7ff fe48 	bl	8013154 <SCSI_SenseCode>
      return -1;
 80134c4:	f04f 33ff 	mov.w	r3, #4294967295
 80134c8:	e082      	b.n	80135d0 <SCSI_Read12+0x170>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80134ca:	68fb      	ldr	r3, [r7, #12]
 80134cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80134d0:	689b      	ldr	r3, [r3, #8]
 80134d2:	7afa      	ldrb	r2, [r7, #11]
 80134d4:	4610      	mov	r0, r2
 80134d6:	4798      	blx	r3
 80134d8:	4603      	mov	r3, r0
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d008      	beq.n	80134f0 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80134de:	7af9      	ldrb	r1, [r7, #11]
 80134e0:	233a      	movs	r3, #58	; 0x3a
 80134e2:	2202      	movs	r2, #2
 80134e4:	68f8      	ldr	r0, [r7, #12]
 80134e6:	f7ff fe35 	bl	8013154 <SCSI_SenseCode>
      return -1;
 80134ea:	f04f 33ff 	mov.w	r3, #4294967295
 80134ee:	e06f      	b.n	80135d0 <SCSI_Read12+0x170>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	3302      	adds	r3, #2
 80134f4:	781b      	ldrb	r3, [r3, #0]
 80134f6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	3303      	adds	r3, #3
 80134fc:	781b      	ldrb	r3, [r3, #0]
 80134fe:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013500:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	3304      	adds	r3, #4
 8013506:	781b      	ldrb	r3, [r3, #0]
 8013508:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801350a:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801350c:	687a      	ldr	r2, [r7, #4]
 801350e:	3205      	adds	r2, #5
 8013510:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8013512:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013514:	6979      	ldr	r1, [r7, #20]
 8013516:	f248 036c 	movw	r3, #32876	; 0x806c
 801351a:	440b      	add	r3, r1
 801351c:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	3306      	adds	r3, #6
 8013522:	781b      	ldrb	r3, [r3, #0]
 8013524:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	3307      	adds	r3, #7
 801352a:	781b      	ldrb	r3, [r3, #0]
 801352c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801352e:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	3308      	adds	r3, #8
 8013534:	781b      	ldrb	r3, [r3, #0]
 8013536:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8013538:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 801353a:	687a      	ldr	r2, [r7, #4]
 801353c:	3209      	adds	r2, #9
 801353e:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8013540:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013542:	6979      	ldr	r1, [r7, #20]
 8013544:	f248 0370 	movw	r3, #32880	; 0x8070
 8013548:	440b      	add	r3, r1
 801354a:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801354c:	697a      	ldr	r2, [r7, #20]
 801354e:	f248 036c 	movw	r3, #32876	; 0x806c
 8013552:	4413      	add	r3, r2
 8013554:	6818      	ldr	r0, [r3, #0]
 8013556:	697a      	ldr	r2, [r7, #20]
 8013558:	f248 0370 	movw	r3, #32880	; 0x8070
 801355c:	4413      	add	r3, r2
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	7af9      	ldrb	r1, [r7, #11]
 8013562:	4602      	mov	r2, r0
 8013564:	68f8      	ldr	r0, [r7, #12]
 8013566:	f000 fa2f 	bl	80139c8 <SCSI_CheckAddressRange>
 801356a:	4603      	mov	r3, r0
 801356c:	2b00      	cmp	r3, #0
 801356e:	da02      	bge.n	8013576 <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8013570:	f04f 33ff 	mov.w	r3, #4294967295
 8013574:	e02c      	b.n	80135d0 <SCSI_Read12+0x170>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8013576:	697a      	ldr	r2, [r7, #20]
 8013578:	f248 0318 	movw	r3, #32792	; 0x8018
 801357c:	4413      	add	r3, r2
 801357e:	681a      	ldr	r2, [r3, #0]
 8013580:	6979      	ldr	r1, [r7, #20]
 8013582:	f248 0370 	movw	r3, #32880	; 0x8070
 8013586:	440b      	add	r3, r1
 8013588:	6819      	ldr	r1, [r3, #0]
 801358a:	6978      	ldr	r0, [r7, #20]
 801358c:	f248 0364 	movw	r3, #32868	; 0x8064
 8013590:	4403      	add	r3, r0
 8013592:	881b      	ldrh	r3, [r3, #0]
 8013594:	fb03 f301 	mul.w	r3, r3, r1
 8013598:	429a      	cmp	r2, r3
 801359a:	d00c      	beq.n	80135b6 <SCSI_Read12+0x156>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801359c:	697a      	ldr	r2, [r7, #20]
 801359e:	f248 031d 	movw	r3, #32797	; 0x801d
 80135a2:	4413      	add	r3, r2
 80135a4:	7819      	ldrb	r1, [r3, #0]
 80135a6:	2320      	movs	r3, #32
 80135a8:	2205      	movs	r2, #5
 80135aa:	68f8      	ldr	r0, [r7, #12]
 80135ac:	f7ff fdd2 	bl	8013154 <SCSI_SenseCode>
      return -1;
 80135b0:	f04f 33ff 	mov.w	r3, #4294967295
 80135b4:	e00c      	b.n	80135d0 <SCSI_Read12+0x170>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80135b6:	697b      	ldr	r3, [r7, #20]
 80135b8:	2202      	movs	r2, #2
 80135ba:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80135bc:	697b      	ldr	r3, [r7, #20]
 80135be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80135c2:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80135c4:	7afb      	ldrb	r3, [r7, #11]
 80135c6:	4619      	mov	r1, r3
 80135c8:	68f8      	ldr	r0, [r7, #12]
 80135ca:	f000 fa21 	bl	8013a10 <SCSI_ProcessRead>
 80135ce:	4603      	mov	r3, r0
}
 80135d0:	4618      	mov	r0, r3
 80135d2:	3718      	adds	r7, #24
 80135d4:	46bd      	mov	sp, r7
 80135d6:	bd80      	pop	{r7, pc}

080135d8 <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80135d8:	b580      	push	{r7, lr}
 80135da:	b086      	sub	sp, #24
 80135dc:	af00      	add	r7, sp, #0
 80135de:	60f8      	str	r0, [r7, #12]
 80135e0:	460b      	mov	r3, r1
 80135e2:	607a      	str	r2, [r7, #4]
 80135e4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80135ec:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80135ee:	697b      	ldr	r3, [r7, #20]
 80135f0:	7a1b      	ldrb	r3, [r3, #8]
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	f040 80be 	bne.w	8013774 <SCSI_Write10+0x19c>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80135f8:	697a      	ldr	r2, [r7, #20]
 80135fa:	f248 0318 	movw	r3, #32792	; 0x8018
 80135fe:	4413      	add	r3, r2
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	2b00      	cmp	r3, #0
 8013604:	d10c      	bne.n	8013620 <SCSI_Write10+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013606:	697a      	ldr	r2, [r7, #20]
 8013608:	f248 031d 	movw	r3, #32797	; 0x801d
 801360c:	4413      	add	r3, r2
 801360e:	7819      	ldrb	r1, [r3, #0]
 8013610:	2320      	movs	r3, #32
 8013612:	2205      	movs	r2, #5
 8013614:	68f8      	ldr	r0, [r7, #12]
 8013616:	f7ff fd9d 	bl	8013154 <SCSI_SenseCode>
      return -1;
 801361a:	f04f 33ff 	mov.w	r3, #4294967295
 801361e:	e0af      	b.n	8013780 <SCSI_Write10+0x1a8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8013620:	697a      	ldr	r2, [r7, #20]
 8013622:	f248 031c 	movw	r3, #32796	; 0x801c
 8013626:	4413      	add	r3, r2
 8013628:	781b      	ldrb	r3, [r3, #0]
 801362a:	b25b      	sxtb	r3, r3
 801362c:	2b00      	cmp	r3, #0
 801362e:	da0c      	bge.n	801364a <SCSI_Write10+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013630:	697a      	ldr	r2, [r7, #20]
 8013632:	f248 031d 	movw	r3, #32797	; 0x801d
 8013636:	4413      	add	r3, r2
 8013638:	7819      	ldrb	r1, [r3, #0]
 801363a:	2320      	movs	r3, #32
 801363c:	2205      	movs	r2, #5
 801363e:	68f8      	ldr	r0, [r7, #12]
 8013640:	f7ff fd88 	bl	8013154 <SCSI_SenseCode>
      return -1;
 8013644:	f04f 33ff 	mov.w	r3, #4294967295
 8013648:	e09a      	b.n	8013780 <SCSI_Write10+0x1a8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013650:	689b      	ldr	r3, [r3, #8]
 8013652:	7afa      	ldrb	r2, [r7, #11]
 8013654:	4610      	mov	r0, r2
 8013656:	4798      	blx	r3
 8013658:	4603      	mov	r3, r0
 801365a:	2b00      	cmp	r3, #0
 801365c:	d008      	beq.n	8013670 <SCSI_Write10+0x98>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801365e:	7af9      	ldrb	r1, [r7, #11]
 8013660:	233a      	movs	r3, #58	; 0x3a
 8013662:	2202      	movs	r2, #2
 8013664:	68f8      	ldr	r0, [r7, #12]
 8013666:	f7ff fd75 	bl	8013154 <SCSI_SenseCode>
      return -1;
 801366a:	f04f 33ff 	mov.w	r3, #4294967295
 801366e:	e087      	b.n	8013780 <SCSI_Write10+0x1a8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013676:	68db      	ldr	r3, [r3, #12]
 8013678:	7afa      	ldrb	r2, [r7, #11]
 801367a:	4610      	mov	r0, r2
 801367c:	4798      	blx	r3
 801367e:	4603      	mov	r3, r0
 8013680:	2b00      	cmp	r3, #0
 8013682:	d008      	beq.n	8013696 <SCSI_Write10+0xbe>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8013684:	7af9      	ldrb	r1, [r7, #11]
 8013686:	2327      	movs	r3, #39	; 0x27
 8013688:	2202      	movs	r2, #2
 801368a:	68f8      	ldr	r0, [r7, #12]
 801368c:	f7ff fd62 	bl	8013154 <SCSI_SenseCode>
      return -1;
 8013690:	f04f 33ff 	mov.w	r3, #4294967295
 8013694:	e074      	b.n	8013780 <SCSI_Write10+0x1a8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	3302      	adds	r3, #2
 801369a:	781b      	ldrb	r3, [r3, #0]
 801369c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	3303      	adds	r3, #3
 80136a2:	781b      	ldrb	r3, [r3, #0]
 80136a4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80136a6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	3304      	adds	r3, #4
 80136ac:	781b      	ldrb	r3, [r3, #0]
 80136ae:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80136b0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80136b2:	687a      	ldr	r2, [r7, #4]
 80136b4:	3205      	adds	r2, #5
 80136b6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80136b8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80136ba:	6979      	ldr	r1, [r7, #20]
 80136bc:	f248 036c 	movw	r3, #32876	; 0x806c
 80136c0:	440b      	add	r3, r1
 80136c2:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	3307      	adds	r3, #7
 80136c8:	781b      	ldrb	r3, [r3, #0]
 80136ca:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 80136cc:	687a      	ldr	r2, [r7, #4]
 80136ce:	3208      	adds	r2, #8
 80136d0:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80136d2:	431a      	orrs	r2, r3
 80136d4:	6979      	ldr	r1, [r7, #20]
 80136d6:	f248 0370 	movw	r3, #32880	; 0x8070
 80136da:	440b      	add	r3, r1
 80136dc:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80136de:	697a      	ldr	r2, [r7, #20]
 80136e0:	f248 036c 	movw	r3, #32876	; 0x806c
 80136e4:	4413      	add	r3, r2
 80136e6:	6818      	ldr	r0, [r3, #0]
 80136e8:	697a      	ldr	r2, [r7, #20]
 80136ea:	f248 0370 	movw	r3, #32880	; 0x8070
 80136ee:	4413      	add	r3, r2
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	7af9      	ldrb	r1, [r7, #11]
 80136f4:	4602      	mov	r2, r0
 80136f6:	68f8      	ldr	r0, [r7, #12]
 80136f8:	f000 f966 	bl	80139c8 <SCSI_CheckAddressRange>
 80136fc:	4603      	mov	r3, r0
 80136fe:	2b00      	cmp	r3, #0
 8013700:	da02      	bge.n	8013708 <SCSI_Write10+0x130>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8013702:	f04f 33ff 	mov.w	r3, #4294967295
 8013706:	e03b      	b.n	8013780 <SCSI_Write10+0x1a8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8013708:	697a      	ldr	r2, [r7, #20]
 801370a:	f248 0370 	movw	r3, #32880	; 0x8070
 801370e:	4413      	add	r3, r2
 8013710:	681a      	ldr	r2, [r3, #0]
 8013712:	6979      	ldr	r1, [r7, #20]
 8013714:	f248 0364 	movw	r3, #32868	; 0x8064
 8013718:	440b      	add	r3, r1
 801371a:	881b      	ldrh	r3, [r3, #0]
 801371c:	fb03 f302 	mul.w	r3, r3, r2
 8013720:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8013722:	697a      	ldr	r2, [r7, #20]
 8013724:	f248 0318 	movw	r3, #32792	; 0x8018
 8013728:	4413      	add	r3, r2
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	693a      	ldr	r2, [r7, #16]
 801372e:	429a      	cmp	r2, r3
 8013730:	d00c      	beq.n	801374c <SCSI_Write10+0x174>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013732:	697a      	ldr	r2, [r7, #20]
 8013734:	f248 031d 	movw	r3, #32797	; 0x801d
 8013738:	4413      	add	r3, r2
 801373a:	7819      	ldrb	r1, [r3, #0]
 801373c:	2320      	movs	r3, #32
 801373e:	2205      	movs	r2, #5
 8013740:	68f8      	ldr	r0, [r7, #12]
 8013742:	f7ff fd07 	bl	8013154 <SCSI_SenseCode>
      return -1;
 8013746:	f04f 33ff 	mov.w	r3, #4294967295
 801374a:	e019      	b.n	8013780 <SCSI_Write10+0x1a8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 801374c:	693b      	ldr	r3, [r7, #16]
 801374e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013752:	bf28      	it	cs
 8013754:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8013758:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 801375a:	697b      	ldr	r3, [r7, #20]
 801375c:	2201      	movs	r2, #1
 801375e:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8013760:	697b      	ldr	r3, [r7, #20]
 8013762:	f103 0210 	add.w	r2, r3, #16
 8013766:	693b      	ldr	r3, [r7, #16]
 8013768:	2101      	movs	r1, #1
 801376a:	68f8      	ldr	r0, [r7, #12]
 801376c:	f004 fb19 	bl	8017da2 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8013770:	2300      	movs	r3, #0
 8013772:	e005      	b.n	8013780 <SCSI_Write10+0x1a8>
    return SCSI_ProcessWrite(pdev, lun);
 8013774:	7afb      	ldrb	r3, [r7, #11]
 8013776:	4619      	mov	r1, r3
 8013778:	68f8      	ldr	r0, [r7, #12]
 801377a:	f000 f9d7 	bl	8013b2c <SCSI_ProcessWrite>
 801377e:	4603      	mov	r3, r0
}
 8013780:	4618      	mov	r0, r3
 8013782:	3718      	adds	r7, #24
 8013784:	46bd      	mov	sp, r7
 8013786:	bd80      	pop	{r7, pc}

08013788 <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013788:	b580      	push	{r7, lr}
 801378a:	b086      	sub	sp, #24
 801378c:	af00      	add	r7, sp, #0
 801378e:	60f8      	str	r0, [r7, #12]
 8013790:	460b      	mov	r3, r1
 8013792:	607a      	str	r2, [r7, #4]
 8013794:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801379c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801379e:	697b      	ldr	r3, [r7, #20]
 80137a0:	7a1b      	ldrb	r3, [r3, #8]
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	f040 80ce 	bne.w	8013944 <SCSI_Write12+0x1bc>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80137a8:	697a      	ldr	r2, [r7, #20]
 80137aa:	f248 0318 	movw	r3, #32792	; 0x8018
 80137ae:	4413      	add	r3, r2
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d10c      	bne.n	80137d0 <SCSI_Write12+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80137b6:	697a      	ldr	r2, [r7, #20]
 80137b8:	f248 031d 	movw	r3, #32797	; 0x801d
 80137bc:	4413      	add	r3, r2
 80137be:	7819      	ldrb	r1, [r3, #0]
 80137c0:	2320      	movs	r3, #32
 80137c2:	2205      	movs	r2, #5
 80137c4:	68f8      	ldr	r0, [r7, #12]
 80137c6:	f7ff fcc5 	bl	8013154 <SCSI_SenseCode>
      return -1;
 80137ca:	f04f 33ff 	mov.w	r3, #4294967295
 80137ce:	e0bf      	b.n	8013950 <SCSI_Write12+0x1c8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80137d0:	697a      	ldr	r2, [r7, #20]
 80137d2:	f248 031c 	movw	r3, #32796	; 0x801c
 80137d6:	4413      	add	r3, r2
 80137d8:	781b      	ldrb	r3, [r3, #0]
 80137da:	b25b      	sxtb	r3, r3
 80137dc:	2b00      	cmp	r3, #0
 80137de:	da0c      	bge.n	80137fa <SCSI_Write12+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80137e0:	697a      	ldr	r2, [r7, #20]
 80137e2:	f248 031d 	movw	r3, #32797	; 0x801d
 80137e6:	4413      	add	r3, r2
 80137e8:	7819      	ldrb	r1, [r3, #0]
 80137ea:	2320      	movs	r3, #32
 80137ec:	2205      	movs	r2, #5
 80137ee:	68f8      	ldr	r0, [r7, #12]
 80137f0:	f7ff fcb0 	bl	8013154 <SCSI_SenseCode>
      return -1;
 80137f4:	f04f 33ff 	mov.w	r3, #4294967295
 80137f8:	e0aa      	b.n	8013950 <SCSI_Write12+0x1c8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013800:	689b      	ldr	r3, [r3, #8]
 8013802:	7afa      	ldrb	r2, [r7, #11]
 8013804:	4610      	mov	r0, r2
 8013806:	4798      	blx	r3
 8013808:	4603      	mov	r3, r0
 801380a:	2b00      	cmp	r3, #0
 801380c:	d00b      	beq.n	8013826 <SCSI_Write12+0x9e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801380e:	7af9      	ldrb	r1, [r7, #11]
 8013810:	233a      	movs	r3, #58	; 0x3a
 8013812:	2202      	movs	r2, #2
 8013814:	68f8      	ldr	r0, [r7, #12]
 8013816:	f7ff fc9d 	bl	8013154 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 801381a:	697b      	ldr	r3, [r7, #20]
 801381c:	2205      	movs	r2, #5
 801381e:	721a      	strb	r2, [r3, #8]
      return -1;
 8013820:	f04f 33ff 	mov.w	r3, #4294967295
 8013824:	e094      	b.n	8013950 <SCSI_Write12+0x1c8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801382c:	68db      	ldr	r3, [r3, #12]
 801382e:	7afa      	ldrb	r2, [r7, #11]
 8013830:	4610      	mov	r0, r2
 8013832:	4798      	blx	r3
 8013834:	4603      	mov	r3, r0
 8013836:	2b00      	cmp	r3, #0
 8013838:	d00b      	beq.n	8013852 <SCSI_Write12+0xca>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 801383a:	7af9      	ldrb	r1, [r7, #11]
 801383c:	2327      	movs	r3, #39	; 0x27
 801383e:	2202      	movs	r2, #2
 8013840:	68f8      	ldr	r0, [r7, #12]
 8013842:	f7ff fc87 	bl	8013154 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8013846:	697b      	ldr	r3, [r7, #20]
 8013848:	2205      	movs	r2, #5
 801384a:	721a      	strb	r2, [r3, #8]
      return -1;
 801384c:	f04f 33ff 	mov.w	r3, #4294967295
 8013850:	e07e      	b.n	8013950 <SCSI_Write12+0x1c8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	3302      	adds	r3, #2
 8013856:	781b      	ldrb	r3, [r3, #0]
 8013858:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	3303      	adds	r3, #3
 801385e:	781b      	ldrb	r3, [r3, #0]
 8013860:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013862:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	3304      	adds	r3, #4
 8013868:	781b      	ldrb	r3, [r3, #0]
 801386a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801386c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801386e:	687a      	ldr	r2, [r7, #4]
 8013870:	3205      	adds	r2, #5
 8013872:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8013874:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013876:	6979      	ldr	r1, [r7, #20]
 8013878:	f248 036c 	movw	r3, #32876	; 0x806c
 801387c:	440b      	add	r3, r1
 801387e:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	3306      	adds	r3, #6
 8013884:	781b      	ldrb	r3, [r3, #0]
 8013886:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	3307      	adds	r3, #7
 801388c:	781b      	ldrb	r3, [r3, #0]
 801388e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013890:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	3308      	adds	r3, #8
 8013896:	781b      	ldrb	r3, [r3, #0]
 8013898:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 801389a:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 801389c:	687a      	ldr	r2, [r7, #4]
 801389e:	3209      	adds	r2, #9
 80138a0:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80138a2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80138a4:	6979      	ldr	r1, [r7, #20]
 80138a6:	f248 0370 	movw	r3, #32880	; 0x8070
 80138aa:	440b      	add	r3, r1
 80138ac:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80138ae:	697a      	ldr	r2, [r7, #20]
 80138b0:	f248 036c 	movw	r3, #32876	; 0x806c
 80138b4:	4413      	add	r3, r2
 80138b6:	6818      	ldr	r0, [r3, #0]
 80138b8:	697a      	ldr	r2, [r7, #20]
 80138ba:	f248 0370 	movw	r3, #32880	; 0x8070
 80138be:	4413      	add	r3, r2
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	7af9      	ldrb	r1, [r7, #11]
 80138c4:	4602      	mov	r2, r0
 80138c6:	68f8      	ldr	r0, [r7, #12]
 80138c8:	f000 f87e 	bl	80139c8 <SCSI_CheckAddressRange>
 80138cc:	4603      	mov	r3, r0
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	da02      	bge.n	80138d8 <SCSI_Write12+0x150>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80138d2:	f04f 33ff 	mov.w	r3, #4294967295
 80138d6:	e03b      	b.n	8013950 <SCSI_Write12+0x1c8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80138d8:	697a      	ldr	r2, [r7, #20]
 80138da:	f248 0370 	movw	r3, #32880	; 0x8070
 80138de:	4413      	add	r3, r2
 80138e0:	681a      	ldr	r2, [r3, #0]
 80138e2:	6979      	ldr	r1, [r7, #20]
 80138e4:	f248 0364 	movw	r3, #32868	; 0x8064
 80138e8:	440b      	add	r3, r1
 80138ea:	881b      	ldrh	r3, [r3, #0]
 80138ec:	fb03 f302 	mul.w	r3, r3, r2
 80138f0:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80138f2:	697a      	ldr	r2, [r7, #20]
 80138f4:	f248 0318 	movw	r3, #32792	; 0x8018
 80138f8:	4413      	add	r3, r2
 80138fa:	681b      	ldr	r3, [r3, #0]
 80138fc:	693a      	ldr	r2, [r7, #16]
 80138fe:	429a      	cmp	r2, r3
 8013900:	d00c      	beq.n	801391c <SCSI_Write12+0x194>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013902:	697a      	ldr	r2, [r7, #20]
 8013904:	f248 031d 	movw	r3, #32797	; 0x801d
 8013908:	4413      	add	r3, r2
 801390a:	7819      	ldrb	r1, [r3, #0]
 801390c:	2320      	movs	r3, #32
 801390e:	2205      	movs	r2, #5
 8013910:	68f8      	ldr	r0, [r7, #12]
 8013912:	f7ff fc1f 	bl	8013154 <SCSI_SenseCode>
      return -1;
 8013916:	f04f 33ff 	mov.w	r3, #4294967295
 801391a:	e019      	b.n	8013950 <SCSI_Write12+0x1c8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 801391c:	693b      	ldr	r3, [r7, #16]
 801391e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013922:	bf28      	it	cs
 8013924:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8013928:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 801392a:	697b      	ldr	r3, [r7, #20]
 801392c:	2201      	movs	r2, #1
 801392e:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8013930:	697b      	ldr	r3, [r7, #20]
 8013932:	f103 0210 	add.w	r2, r3, #16
 8013936:	693b      	ldr	r3, [r7, #16]
 8013938:	2101      	movs	r1, #1
 801393a:	68f8      	ldr	r0, [r7, #12]
 801393c:	f004 fa31 	bl	8017da2 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8013940:	2300      	movs	r3, #0
 8013942:	e005      	b.n	8013950 <SCSI_Write12+0x1c8>
    return SCSI_ProcessWrite(pdev, lun);
 8013944:	7afb      	ldrb	r3, [r7, #11]
 8013946:	4619      	mov	r1, r3
 8013948:	68f8      	ldr	r0, [r7, #12]
 801394a:	f000 f8ef 	bl	8013b2c <SCSI_ProcessWrite>
 801394e:	4603      	mov	r3, r0
}
 8013950:	4618      	mov	r0, r3
 8013952:	3718      	adds	r7, #24
 8013954:	46bd      	mov	sp, r7
 8013956:	bd80      	pop	{r7, pc}

08013958 <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013958:	b580      	push	{r7, lr}
 801395a:	b086      	sub	sp, #24
 801395c:	af00      	add	r7, sp, #0
 801395e:	60f8      	str	r0, [r7, #12]
 8013960:	460b      	mov	r3, r1
 8013962:	607a      	str	r2, [r7, #4]
 8013964:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801396c:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	3301      	adds	r3, #1
 8013972:	781b      	ldrb	r3, [r3, #0]
 8013974:	f003 0302 	and.w	r3, r3, #2
 8013978:	2b00      	cmp	r3, #0
 801397a:	d008      	beq.n	801398e <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 801397c:	7af9      	ldrb	r1, [r7, #11]
 801397e:	2324      	movs	r3, #36	; 0x24
 8013980:	2205      	movs	r2, #5
 8013982:	68f8      	ldr	r0, [r7, #12]
 8013984:	f7ff fbe6 	bl	8013154 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8013988:	f04f 33ff 	mov.w	r3, #4294967295
 801398c:	e018      	b.n	80139c0 <SCSI_Verify10+0x68>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 801398e:	697a      	ldr	r2, [r7, #20]
 8013990:	f248 036c 	movw	r3, #32876	; 0x806c
 8013994:	4413      	add	r3, r2
 8013996:	6818      	ldr	r0, [r3, #0]
 8013998:	697a      	ldr	r2, [r7, #20]
 801399a:	f248 0370 	movw	r3, #32880	; 0x8070
 801399e:	4413      	add	r3, r2
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	7af9      	ldrb	r1, [r7, #11]
 80139a4:	4602      	mov	r2, r0
 80139a6:	68f8      	ldr	r0, [r7, #12]
 80139a8:	f000 f80e 	bl	80139c8 <SCSI_CheckAddressRange>
 80139ac:	4603      	mov	r3, r0
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	da02      	bge.n	80139b8 <SCSI_Verify10+0x60>
  {
    return -1; /* error */
 80139b2:	f04f 33ff 	mov.w	r3, #4294967295
 80139b6:	e003      	b.n	80139c0 <SCSI_Verify10+0x68>
  }

  hmsc->bot_data_length = 0U;
 80139b8:	697b      	ldr	r3, [r7, #20]
 80139ba:	2200      	movs	r2, #0
 80139bc:	60da      	str	r2, [r3, #12]

  return 0;
 80139be:	2300      	movs	r3, #0
}
 80139c0:	4618      	mov	r0, r3
 80139c2:	3718      	adds	r7, #24
 80139c4:	46bd      	mov	sp, r7
 80139c6:	bd80      	pop	{r7, pc}

080139c8 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 80139c8:	b580      	push	{r7, lr}
 80139ca:	b086      	sub	sp, #24
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	60f8      	str	r0, [r7, #12]
 80139d0:	607a      	str	r2, [r7, #4]
 80139d2:	603b      	str	r3, [r7, #0]
 80139d4:	460b      	mov	r3, r1
 80139d6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80139de:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 80139e0:	687a      	ldr	r2, [r7, #4]
 80139e2:	683b      	ldr	r3, [r7, #0]
 80139e4:	441a      	add	r2, r3
 80139e6:	6979      	ldr	r1, [r7, #20]
 80139e8:	f248 0368 	movw	r3, #32872	; 0x8068
 80139ec:	440b      	add	r3, r1
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	429a      	cmp	r2, r3
 80139f2:	d908      	bls.n	8013a06 <SCSI_CheckAddressRange+0x3e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 80139f4:	7af9      	ldrb	r1, [r7, #11]
 80139f6:	2321      	movs	r3, #33	; 0x21
 80139f8:	2205      	movs	r2, #5
 80139fa:	68f8      	ldr	r0, [r7, #12]
 80139fc:	f7ff fbaa 	bl	8013154 <SCSI_SenseCode>
    return -1;
 8013a00:	f04f 33ff 	mov.w	r3, #4294967295
 8013a04:	e000      	b.n	8013a08 <SCSI_CheckAddressRange+0x40>
  }

  return 0;
 8013a06:	2300      	movs	r3, #0
}
 8013a08:	4618      	mov	r0, r3
 8013a0a:	3718      	adds	r7, #24
 8013a0c:	46bd      	mov	sp, r7
 8013a0e:	bd80      	pop	{r7, pc}

08013a10 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8013a10:	b5b0      	push	{r4, r5, r7, lr}
 8013a12:	b084      	sub	sp, #16
 8013a14:	af00      	add	r7, sp, #0
 8013a16:	6078      	str	r0, [r7, #4]
 8013a18:	460b      	mov	r3, r1
 8013a1a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013a22:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8013a24:	68fa      	ldr	r2, [r7, #12]
 8013a26:	f248 0370 	movw	r3, #32880	; 0x8070
 8013a2a:	4413      	add	r3, r2
 8013a2c:	681a      	ldr	r2, [r3, #0]
 8013a2e:	68f9      	ldr	r1, [r7, #12]
 8013a30:	f248 0364 	movw	r3, #32868	; 0x8064
 8013a34:	440b      	add	r3, r1
 8013a36:	881b      	ldrh	r3, [r3, #0]
 8013a38:	fb03 f302 	mul.w	r3, r3, r2
 8013a3c:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8013a3e:	68bb      	ldr	r3, [r7, #8]
 8013a40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013a44:	bf28      	it	cs
 8013a46:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8013a4a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013a52:	691c      	ldr	r4, [r3, #16]
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	f103 0110 	add.w	r1, r3, #16
 8013a5a:	68fa      	ldr	r2, [r7, #12]
 8013a5c:	f248 036c 	movw	r3, #32876	; 0x806c
 8013a60:	4413      	add	r3, r2
 8013a62:	681d      	ldr	r5, [r3, #0]
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8013a64:	68fa      	ldr	r2, [r7, #12]
 8013a66:	f248 0364 	movw	r3, #32868	; 0x8064
 8013a6a:	4413      	add	r3, r2
 8013a6c:	881b      	ldrh	r3, [r3, #0]
 8013a6e:	461a      	mov	r2, r3
 8013a70:	68bb      	ldr	r3, [r7, #8]
 8013a72:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8013a76:	b29b      	uxth	r3, r3
 8013a78:	78f8      	ldrb	r0, [r7, #3]
 8013a7a:	462a      	mov	r2, r5
 8013a7c:	47a0      	blx	r4
 8013a7e:	4603      	mov	r3, r0
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	da08      	bge.n	8013a96 <SCSI_ProcessRead+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8013a84:	78f9      	ldrb	r1, [r7, #3]
 8013a86:	2311      	movs	r3, #17
 8013a88:	2204      	movs	r2, #4
 8013a8a:	6878      	ldr	r0, [r7, #4]
 8013a8c:	f7ff fb62 	bl	8013154 <SCSI_SenseCode>
    return -1;
 8013a90:	f04f 33ff 	mov.w	r3, #4294967295
 8013a94:	e046      	b.n	8013b24 <SCSI_ProcessRead+0x114>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	f103 0210 	add.w	r2, r3, #16
 8013a9c:	68bb      	ldr	r3, [r7, #8]
 8013a9e:	2181      	movs	r1, #129	; 0x81
 8013aa0:	6878      	ldr	r0, [r7, #4]
 8013aa2:	f004 f95d 	bl	8017d60 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8013aa6:	68fa      	ldr	r2, [r7, #12]
 8013aa8:	f248 036c 	movw	r3, #32876	; 0x806c
 8013aac:	4413      	add	r3, r2
 8013aae:	681a      	ldr	r2, [r3, #0]
 8013ab0:	68f9      	ldr	r1, [r7, #12]
 8013ab2:	f248 0364 	movw	r3, #32868	; 0x8064
 8013ab6:	440b      	add	r3, r1
 8013ab8:	881b      	ldrh	r3, [r3, #0]
 8013aba:	4619      	mov	r1, r3
 8013abc:	68bb      	ldr	r3, [r7, #8]
 8013abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8013ac2:	441a      	add	r2, r3
 8013ac4:	68f9      	ldr	r1, [r7, #12]
 8013ac6:	f248 036c 	movw	r3, #32876	; 0x806c
 8013aca:	440b      	add	r3, r1
 8013acc:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8013ace:	68fa      	ldr	r2, [r7, #12]
 8013ad0:	f248 0370 	movw	r3, #32880	; 0x8070
 8013ad4:	4413      	add	r3, r2
 8013ad6:	681a      	ldr	r2, [r3, #0]
 8013ad8:	68f9      	ldr	r1, [r7, #12]
 8013ada:	f248 0364 	movw	r3, #32868	; 0x8064
 8013ade:	440b      	add	r3, r1
 8013ae0:	881b      	ldrh	r3, [r3, #0]
 8013ae2:	4619      	mov	r1, r3
 8013ae4:	68bb      	ldr	r3, [r7, #8]
 8013ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8013aea:	1ad2      	subs	r2, r2, r3
 8013aec:	68f9      	ldr	r1, [r7, #12]
 8013aee:	f248 0370 	movw	r3, #32880	; 0x8070
 8013af2:	440b      	add	r3, r1
 8013af4:	601a      	str	r2, [r3, #0]

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8013af6:	68fa      	ldr	r2, [r7, #12]
 8013af8:	f248 0338 	movw	r3, #32824	; 0x8038
 8013afc:	4413      	add	r3, r2
 8013afe:	681a      	ldr	r2, [r3, #0]
 8013b00:	68bb      	ldr	r3, [r7, #8]
 8013b02:	1ad2      	subs	r2, r2, r3
 8013b04:	68f9      	ldr	r1, [r7, #12]
 8013b06:	f248 0338 	movw	r3, #32824	; 0x8038
 8013b0a:	440b      	add	r3, r1
 8013b0c:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 8013b0e:	68fa      	ldr	r2, [r7, #12]
 8013b10:	f248 0370 	movw	r3, #32880	; 0x8070
 8013b14:	4413      	add	r3, r2
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d102      	bne.n	8013b22 <SCSI_ProcessRead+0x112>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	2203      	movs	r2, #3
 8013b20:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8013b22:	2300      	movs	r3, #0
}
 8013b24:	4618      	mov	r0, r3
 8013b26:	3710      	adds	r7, #16
 8013b28:	46bd      	mov	sp, r7
 8013b2a:	bdb0      	pop	{r4, r5, r7, pc}

08013b2c <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8013b2c:	b5b0      	push	{r4, r5, r7, lr}
 8013b2e:	b084      	sub	sp, #16
 8013b30:	af00      	add	r7, sp, #0
 8013b32:	6078      	str	r0, [r7, #4]
 8013b34:	460b      	mov	r3, r1
 8013b36:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013b3e:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8013b40:	68fa      	ldr	r2, [r7, #12]
 8013b42:	f248 0370 	movw	r3, #32880	; 0x8070
 8013b46:	4413      	add	r3, r2
 8013b48:	681a      	ldr	r2, [r3, #0]
 8013b4a:	68f9      	ldr	r1, [r7, #12]
 8013b4c:	f248 0364 	movw	r3, #32868	; 0x8064
 8013b50:	440b      	add	r3, r1
 8013b52:	881b      	ldrh	r3, [r3, #0]
 8013b54:	fb03 f302 	mul.w	r3, r3, r2
 8013b58:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8013b5a:	68bb      	ldr	r3, [r7, #8]
 8013b5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013b60:	bf28      	it	cs
 8013b62:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8013b66:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013b6e:	695c      	ldr	r4, [r3, #20]
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	f103 0110 	add.w	r1, r3, #16
 8013b76:	68fa      	ldr	r2, [r7, #12]
 8013b78:	f248 036c 	movw	r3, #32876	; 0x806c
 8013b7c:	4413      	add	r3, r2
 8013b7e:	681d      	ldr	r5, [r3, #0]
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8013b80:	68fa      	ldr	r2, [r7, #12]
 8013b82:	f248 0364 	movw	r3, #32868	; 0x8064
 8013b86:	4413      	add	r3, r2
 8013b88:	881b      	ldrh	r3, [r3, #0]
 8013b8a:	461a      	mov	r2, r3
 8013b8c:	68bb      	ldr	r3, [r7, #8]
 8013b8e:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8013b92:	b29b      	uxth	r3, r3
 8013b94:	78f8      	ldrb	r0, [r7, #3]
 8013b96:	462a      	mov	r2, r5
 8013b98:	47a0      	blx	r4
 8013b9a:	4603      	mov	r3, r0
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	da08      	bge.n	8013bb2 <SCSI_ProcessWrite+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8013ba0:	78f9      	ldrb	r1, [r7, #3]
 8013ba2:	2303      	movs	r3, #3
 8013ba4:	2204      	movs	r2, #4
 8013ba6:	6878      	ldr	r0, [r7, #4]
 8013ba8:	f7ff fad4 	bl	8013154 <SCSI_SenseCode>
    return -1;
 8013bac:	f04f 33ff 	mov.w	r3, #4294967295
 8013bb0:	e05a      	b.n	8013c68 <SCSI_ProcessWrite+0x13c>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8013bb2:	68fa      	ldr	r2, [r7, #12]
 8013bb4:	f248 036c 	movw	r3, #32876	; 0x806c
 8013bb8:	4413      	add	r3, r2
 8013bba:	681a      	ldr	r2, [r3, #0]
 8013bbc:	68f9      	ldr	r1, [r7, #12]
 8013bbe:	f248 0364 	movw	r3, #32868	; 0x8064
 8013bc2:	440b      	add	r3, r1
 8013bc4:	881b      	ldrh	r3, [r3, #0]
 8013bc6:	4619      	mov	r1, r3
 8013bc8:	68bb      	ldr	r3, [r7, #8]
 8013bca:	fbb3 f3f1 	udiv	r3, r3, r1
 8013bce:	441a      	add	r2, r3
 8013bd0:	68f9      	ldr	r1, [r7, #12]
 8013bd2:	f248 036c 	movw	r3, #32876	; 0x806c
 8013bd6:	440b      	add	r3, r1
 8013bd8:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8013bda:	68fa      	ldr	r2, [r7, #12]
 8013bdc:	f248 0370 	movw	r3, #32880	; 0x8070
 8013be0:	4413      	add	r3, r2
 8013be2:	681a      	ldr	r2, [r3, #0]
 8013be4:	68f9      	ldr	r1, [r7, #12]
 8013be6:	f248 0364 	movw	r3, #32868	; 0x8064
 8013bea:	440b      	add	r3, r1
 8013bec:	881b      	ldrh	r3, [r3, #0]
 8013bee:	4619      	mov	r1, r3
 8013bf0:	68bb      	ldr	r3, [r7, #8]
 8013bf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8013bf6:	1ad2      	subs	r2, r2, r3
 8013bf8:	68f9      	ldr	r1, [r7, #12]
 8013bfa:	f248 0370 	movw	r3, #32880	; 0x8070
 8013bfe:	440b      	add	r3, r1
 8013c00:	601a      	str	r2, [r3, #0]

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8013c02:	68fa      	ldr	r2, [r7, #12]
 8013c04:	f248 0338 	movw	r3, #32824	; 0x8038
 8013c08:	4413      	add	r3, r2
 8013c0a:	681a      	ldr	r2, [r3, #0]
 8013c0c:	68bb      	ldr	r3, [r7, #8]
 8013c0e:	1ad2      	subs	r2, r2, r3
 8013c10:	68f9      	ldr	r1, [r7, #12]
 8013c12:	f248 0338 	movw	r3, #32824	; 0x8038
 8013c16:	440b      	add	r3, r1
 8013c18:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 8013c1a:	68fa      	ldr	r2, [r7, #12]
 8013c1c:	f248 0370 	movw	r3, #32880	; 0x8070
 8013c20:	4413      	add	r3, r2
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d104      	bne.n	8013c32 <SCSI_ProcessWrite+0x106>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8013c28:	2100      	movs	r1, #0
 8013c2a:	6878      	ldr	r0, [r7, #4]
 8013c2c:	f7fe fde2 	bl	80127f4 <MSC_BOT_SendCSW>
 8013c30:	e019      	b.n	8013c66 <SCSI_ProcessWrite+0x13a>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8013c32:	68fa      	ldr	r2, [r7, #12]
 8013c34:	f248 0370 	movw	r3, #32880	; 0x8070
 8013c38:	4413      	add	r3, r2
 8013c3a:	681a      	ldr	r2, [r3, #0]
 8013c3c:	68f9      	ldr	r1, [r7, #12]
 8013c3e:	f248 0364 	movw	r3, #32868	; 0x8064
 8013c42:	440b      	add	r3, r1
 8013c44:	881b      	ldrh	r3, [r3, #0]
 8013c46:	fb03 f302 	mul.w	r3, r3, r2
 8013c4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013c4e:	bf28      	it	cs
 8013c50:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8013c54:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8013c56:	68fb      	ldr	r3, [r7, #12]
 8013c58:	f103 0210 	add.w	r2, r3, #16
 8013c5c:	68bb      	ldr	r3, [r7, #8]
 8013c5e:	2101      	movs	r1, #1
 8013c60:	6878      	ldr	r0, [r7, #4]
 8013c62:	f004 f89e 	bl	8017da2 <USBD_LL_PrepareReceive>
  }

  return 0;
 8013c66:	2300      	movs	r3, #0
}
 8013c68:	4618      	mov	r0, r3
 8013c6a:	3710      	adds	r7, #16
 8013c6c:	46bd      	mov	sp, r7
 8013c6e:	bdb0      	pop	{r4, r5, r7, pc}

08013c70 <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8013c70:	b480      	push	{r7}
 8013c72:	b087      	sub	sp, #28
 8013c74:	af00      	add	r7, sp, #0
 8013c76:	60f8      	str	r0, [r7, #12]
 8013c78:	60b9      	str	r1, [r7, #8]
 8013c7a:	4613      	mov	r3, r2
 8013c7c:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8013c7e:	88fb      	ldrh	r3, [r7, #6]
 8013c80:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 8013c82:	8afa      	ldrh	r2, [r7, #22]
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8013c88:	e00b      	b.n	8013ca2 <SCSI_UpdateBotData+0x32>
  {
    len--;
 8013c8a:	8afb      	ldrh	r3, [r7, #22]
 8013c8c:	3b01      	subs	r3, #1
 8013c8e:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8013c90:	8afb      	ldrh	r3, [r7, #22]
 8013c92:	68ba      	ldr	r2, [r7, #8]
 8013c94:	441a      	add	r2, r3
 8013c96:	8afb      	ldrh	r3, [r7, #22]
 8013c98:	7811      	ldrb	r1, [r2, #0]
 8013c9a:	68fa      	ldr	r2, [r7, #12]
 8013c9c:	4413      	add	r3, r2
 8013c9e:	460a      	mov	r2, r1
 8013ca0:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8013ca2:	8afb      	ldrh	r3, [r7, #22]
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d1f0      	bne.n	8013c8a <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 8013ca8:	2300      	movs	r3, #0
}
 8013caa:	4618      	mov	r0, r3
 8013cac:	371c      	adds	r7, #28
 8013cae:	46bd      	mov	sp, r7
 8013cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cb4:	4770      	bx	lr

08013cb6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013cb6:	b580      	push	{r7, lr}
 8013cb8:	b086      	sub	sp, #24
 8013cba:	af00      	add	r7, sp, #0
 8013cbc:	60f8      	str	r0, [r7, #12]
 8013cbe:	60b9      	str	r1, [r7, #8]
 8013cc0:	4613      	mov	r3, r2
 8013cc2:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d101      	bne.n	8013cce <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8013cca:	2303      	movs	r3, #3
 8013ccc:	e025      	b.n	8013d1a <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d003      	beq.n	8013ce0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	2200      	movs	r2, #0
 8013cdc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d003      	beq.n	8013cf2 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	2200      	movs	r2, #0
 8013cee:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013cf2:	68bb      	ldr	r3, [r7, #8]
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d003      	beq.n	8013d00 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	68ba      	ldr	r2, [r7, #8]
 8013cfc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	2201      	movs	r2, #1
 8013d04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	79fa      	ldrb	r2, [r7, #7]
 8013d0c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8013d0e:	68f8      	ldr	r0, [r7, #12]
 8013d10:	f003 fece 	bl	8017ab0 <USBD_LL_Init>
 8013d14:	4603      	mov	r3, r0
 8013d16:	75fb      	strb	r3, [r7, #23]

  return ret;
 8013d18:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d1a:	4618      	mov	r0, r3
 8013d1c:	3718      	adds	r7, #24
 8013d1e:	46bd      	mov	sp, r7
 8013d20:	bd80      	pop	{r7, pc}

08013d22 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013d22:	b580      	push	{r7, lr}
 8013d24:	b084      	sub	sp, #16
 8013d26:	af00      	add	r7, sp, #0
 8013d28:	6078      	str	r0, [r7, #4]
 8013d2a:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013d2c:	2300      	movs	r3, #0
 8013d2e:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8013d30:	683b      	ldr	r3, [r7, #0]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d101      	bne.n	8013d3a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8013d36:	2303      	movs	r3, #3
 8013d38:	e010      	b.n	8013d5c <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	683a      	ldr	r2, [r7, #0]
 8013d3e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d4a:	f107 020e 	add.w	r2, r7, #14
 8013d4e:	4610      	mov	r0, r2
 8013d50:	4798      	blx	r3
 8013d52:	4602      	mov	r2, r0
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8013d5a:	2300      	movs	r3, #0
}
 8013d5c:	4618      	mov	r0, r3
 8013d5e:	3710      	adds	r7, #16
 8013d60:	46bd      	mov	sp, r7
 8013d62:	bd80      	pop	{r7, pc}

08013d64 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013d64:	b580      	push	{r7, lr}
 8013d66:	b082      	sub	sp, #8
 8013d68:	af00      	add	r7, sp, #0
 8013d6a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013d6c:	6878      	ldr	r0, [r7, #4]
 8013d6e:	f003 feef 	bl	8017b50 <USBD_LL_Start>
 8013d72:	4603      	mov	r3, r0
}
 8013d74:	4618      	mov	r0, r3
 8013d76:	3708      	adds	r7, #8
 8013d78:	46bd      	mov	sp, r7
 8013d7a:	bd80      	pop	{r7, pc}

08013d7c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8013d7c:	b480      	push	{r7}
 8013d7e:	b083      	sub	sp, #12
 8013d80:	af00      	add	r7, sp, #0
 8013d82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013d84:	2300      	movs	r3, #0
}
 8013d86:	4618      	mov	r0, r3
 8013d88:	370c      	adds	r7, #12
 8013d8a:	46bd      	mov	sp, r7
 8013d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d90:	4770      	bx	lr

08013d92 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013d92:	b580      	push	{r7, lr}
 8013d94:	b084      	sub	sp, #16
 8013d96:	af00      	add	r7, sp, #0
 8013d98:	6078      	str	r0, [r7, #4]
 8013d9a:	460b      	mov	r3, r1
 8013d9c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8013d9e:	2303      	movs	r3, #3
 8013da0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d009      	beq.n	8013dc0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013db2:	681b      	ldr	r3, [r3, #0]
 8013db4:	78fa      	ldrb	r2, [r7, #3]
 8013db6:	4611      	mov	r1, r2
 8013db8:	6878      	ldr	r0, [r7, #4]
 8013dba:	4798      	blx	r3
 8013dbc:	4603      	mov	r3, r0
 8013dbe:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8013dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	3710      	adds	r7, #16
 8013dc6:	46bd      	mov	sp, r7
 8013dc8:	bd80      	pop	{r7, pc}

08013dca <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013dca:	b580      	push	{r7, lr}
 8013dcc:	b082      	sub	sp, #8
 8013dce:	af00      	add	r7, sp, #0
 8013dd0:	6078      	str	r0, [r7, #4]
 8013dd2:	460b      	mov	r3, r1
 8013dd4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d007      	beq.n	8013df0 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013de6:	685b      	ldr	r3, [r3, #4]
 8013de8:	78fa      	ldrb	r2, [r7, #3]
 8013dea:	4611      	mov	r1, r2
 8013dec:	6878      	ldr	r0, [r7, #4]
 8013dee:	4798      	blx	r3
  }

  return USBD_OK;
 8013df0:	2300      	movs	r3, #0
}
 8013df2:	4618      	mov	r0, r3
 8013df4:	3708      	adds	r7, #8
 8013df6:	46bd      	mov	sp, r7
 8013df8:	bd80      	pop	{r7, pc}

08013dfa <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013dfa:	b580      	push	{r7, lr}
 8013dfc:	b084      	sub	sp, #16
 8013dfe:	af00      	add	r7, sp, #0
 8013e00:	6078      	str	r0, [r7, #4]
 8013e02:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013e0a:	6839      	ldr	r1, [r7, #0]
 8013e0c:	4618      	mov	r0, r3
 8013e0e:	f000 ff2b 	bl	8014c68 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	2201      	movs	r2, #1
 8013e16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8013e20:	461a      	mov	r2, r3
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013e2e:	f003 031f 	and.w	r3, r3, #31
 8013e32:	2b01      	cmp	r3, #1
 8013e34:	d00e      	beq.n	8013e54 <USBD_LL_SetupStage+0x5a>
 8013e36:	2b01      	cmp	r3, #1
 8013e38:	d302      	bcc.n	8013e40 <USBD_LL_SetupStage+0x46>
 8013e3a:	2b02      	cmp	r3, #2
 8013e3c:	d014      	beq.n	8013e68 <USBD_LL_SetupStage+0x6e>
 8013e3e:	e01d      	b.n	8013e7c <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013e46:	4619      	mov	r1, r3
 8013e48:	6878      	ldr	r0, [r7, #4]
 8013e4a:	f000 fa17 	bl	801427c <USBD_StdDevReq>
 8013e4e:	4603      	mov	r3, r0
 8013e50:	73fb      	strb	r3, [r7, #15]
      break;
 8013e52:	e020      	b.n	8013e96 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013e5a:	4619      	mov	r1, r3
 8013e5c:	6878      	ldr	r0, [r7, #4]
 8013e5e:	f000 fa7b 	bl	8014358 <USBD_StdItfReq>
 8013e62:	4603      	mov	r3, r0
 8013e64:	73fb      	strb	r3, [r7, #15]
      break;
 8013e66:	e016      	b.n	8013e96 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013e6e:	4619      	mov	r1, r3
 8013e70:	6878      	ldr	r0, [r7, #4]
 8013e72:	f000 fab7 	bl	80143e4 <USBD_StdEPReq>
 8013e76:	4603      	mov	r3, r0
 8013e78:	73fb      	strb	r3, [r7, #15]
      break;
 8013e7a:	e00c      	b.n	8013e96 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013e82:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013e86:	b2db      	uxtb	r3, r3
 8013e88:	4619      	mov	r1, r3
 8013e8a:	6878      	ldr	r0, [r7, #4]
 8013e8c:	f003 fedf 	bl	8017c4e <USBD_LL_StallEP>
 8013e90:	4603      	mov	r3, r0
 8013e92:	73fb      	strb	r3, [r7, #15]
      break;
 8013e94:	bf00      	nop
  }

  return ret;
 8013e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e98:	4618      	mov	r0, r3
 8013e9a:	3710      	adds	r7, #16
 8013e9c:	46bd      	mov	sp, r7
 8013e9e:	bd80      	pop	{r7, pc}

08013ea0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013ea0:	b580      	push	{r7, lr}
 8013ea2:	b086      	sub	sp, #24
 8013ea4:	af00      	add	r7, sp, #0
 8013ea6:	60f8      	str	r0, [r7, #12]
 8013ea8:	460b      	mov	r3, r1
 8013eaa:	607a      	str	r2, [r7, #4]
 8013eac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8013eae:	7afb      	ldrb	r3, [r7, #11]
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d137      	bne.n	8013f24 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8013eba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013ec2:	2b03      	cmp	r3, #3
 8013ec4:	d14a      	bne.n	8013f5c <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8013ec6:	693b      	ldr	r3, [r7, #16]
 8013ec8:	689a      	ldr	r2, [r3, #8]
 8013eca:	693b      	ldr	r3, [r7, #16]
 8013ecc:	68db      	ldr	r3, [r3, #12]
 8013ece:	429a      	cmp	r2, r3
 8013ed0:	d913      	bls.n	8013efa <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013ed2:	693b      	ldr	r3, [r7, #16]
 8013ed4:	689a      	ldr	r2, [r3, #8]
 8013ed6:	693b      	ldr	r3, [r7, #16]
 8013ed8:	68db      	ldr	r3, [r3, #12]
 8013eda:	1ad2      	subs	r2, r2, r3
 8013edc:	693b      	ldr	r3, [r7, #16]
 8013ede:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013ee0:	693b      	ldr	r3, [r7, #16]
 8013ee2:	68da      	ldr	r2, [r3, #12]
 8013ee4:	693b      	ldr	r3, [r7, #16]
 8013ee6:	689b      	ldr	r3, [r3, #8]
 8013ee8:	4293      	cmp	r3, r2
 8013eea:	bf28      	it	cs
 8013eec:	4613      	movcs	r3, r2
 8013eee:	461a      	mov	r2, r3
 8013ef0:	6879      	ldr	r1, [r7, #4]
 8013ef2:	68f8      	ldr	r0, [r7, #12]
 8013ef4:	f000 ff8f 	bl	8014e16 <USBD_CtlContinueRx>
 8013ef8:	e030      	b.n	8013f5c <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f00:	691b      	ldr	r3, [r3, #16]
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d00a      	beq.n	8013f1c <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8013f0c:	2b03      	cmp	r3, #3
 8013f0e:	d105      	bne.n	8013f1c <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f16:	691b      	ldr	r3, [r3, #16]
 8013f18:	68f8      	ldr	r0, [r7, #12]
 8013f1a:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8013f1c:	68f8      	ldr	r0, [r7, #12]
 8013f1e:	f000 ff8b 	bl	8014e38 <USBD_CtlSendStatus>
 8013f22:	e01b      	b.n	8013f5c <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f2a:	699b      	ldr	r3, [r3, #24]
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d013      	beq.n	8013f58 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8013f36:	2b03      	cmp	r3, #3
 8013f38:	d10e      	bne.n	8013f58 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8013f3a:	68fb      	ldr	r3, [r7, #12]
 8013f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f40:	699b      	ldr	r3, [r3, #24]
 8013f42:	7afa      	ldrb	r2, [r7, #11]
 8013f44:	4611      	mov	r1, r2
 8013f46:	68f8      	ldr	r0, [r7, #12]
 8013f48:	4798      	blx	r3
 8013f4a:	4603      	mov	r3, r0
 8013f4c:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8013f4e:	7dfb      	ldrb	r3, [r7, #23]
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d003      	beq.n	8013f5c <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8013f54:	7dfb      	ldrb	r3, [r7, #23]
 8013f56:	e002      	b.n	8013f5e <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8013f58:	2303      	movs	r3, #3
 8013f5a:	e000      	b.n	8013f5e <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8013f5c:	2300      	movs	r3, #0
}
 8013f5e:	4618      	mov	r0, r3
 8013f60:	3718      	adds	r7, #24
 8013f62:	46bd      	mov	sp, r7
 8013f64:	bd80      	pop	{r7, pc}

08013f66 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013f66:	b580      	push	{r7, lr}
 8013f68:	b086      	sub	sp, #24
 8013f6a:	af00      	add	r7, sp, #0
 8013f6c:	60f8      	str	r0, [r7, #12]
 8013f6e:	460b      	mov	r3, r1
 8013f70:	607a      	str	r2, [r7, #4]
 8013f72:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8013f74:	7afb      	ldrb	r3, [r7, #11]
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d16a      	bne.n	8014050 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	3314      	adds	r3, #20
 8013f7e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013f86:	2b02      	cmp	r3, #2
 8013f88:	d155      	bne.n	8014036 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8013f8a:	693b      	ldr	r3, [r7, #16]
 8013f8c:	689a      	ldr	r2, [r3, #8]
 8013f8e:	693b      	ldr	r3, [r7, #16]
 8013f90:	68db      	ldr	r3, [r3, #12]
 8013f92:	429a      	cmp	r2, r3
 8013f94:	d914      	bls.n	8013fc0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013f96:	693b      	ldr	r3, [r7, #16]
 8013f98:	689a      	ldr	r2, [r3, #8]
 8013f9a:	693b      	ldr	r3, [r7, #16]
 8013f9c:	68db      	ldr	r3, [r3, #12]
 8013f9e:	1ad2      	subs	r2, r2, r3
 8013fa0:	693b      	ldr	r3, [r7, #16]
 8013fa2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013fa4:	693b      	ldr	r3, [r7, #16]
 8013fa6:	689b      	ldr	r3, [r3, #8]
 8013fa8:	461a      	mov	r2, r3
 8013faa:	6879      	ldr	r1, [r7, #4]
 8013fac:	68f8      	ldr	r0, [r7, #12]
 8013fae:	f000 ff21 	bl	8014df4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013fb2:	2300      	movs	r3, #0
 8013fb4:	2200      	movs	r2, #0
 8013fb6:	2100      	movs	r1, #0
 8013fb8:	68f8      	ldr	r0, [r7, #12]
 8013fba:	f003 fef2 	bl	8017da2 <USBD_LL_PrepareReceive>
 8013fbe:	e03a      	b.n	8014036 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013fc0:	693b      	ldr	r3, [r7, #16]
 8013fc2:	68da      	ldr	r2, [r3, #12]
 8013fc4:	693b      	ldr	r3, [r7, #16]
 8013fc6:	689b      	ldr	r3, [r3, #8]
 8013fc8:	429a      	cmp	r2, r3
 8013fca:	d11c      	bne.n	8014006 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013fcc:	693b      	ldr	r3, [r7, #16]
 8013fce:	685a      	ldr	r2, [r3, #4]
 8013fd0:	693b      	ldr	r3, [r7, #16]
 8013fd2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013fd4:	429a      	cmp	r2, r3
 8013fd6:	d316      	bcc.n	8014006 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8013fd8:	693b      	ldr	r3, [r7, #16]
 8013fda:	685a      	ldr	r2, [r3, #4]
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013fe2:	429a      	cmp	r2, r3
 8013fe4:	d20f      	bcs.n	8014006 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013fe6:	2200      	movs	r2, #0
 8013fe8:	2100      	movs	r1, #0
 8013fea:	68f8      	ldr	r0, [r7, #12]
 8013fec:	f000 ff02 	bl	8014df4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	2200      	movs	r2, #0
 8013ff4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013ff8:	2300      	movs	r3, #0
 8013ffa:	2200      	movs	r2, #0
 8013ffc:	2100      	movs	r1, #0
 8013ffe:	68f8      	ldr	r0, [r7, #12]
 8014000:	f003 fecf 	bl	8017da2 <USBD_LL_PrepareReceive>
 8014004:	e017      	b.n	8014036 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801400c:	68db      	ldr	r3, [r3, #12]
 801400e:	2b00      	cmp	r3, #0
 8014010:	d00a      	beq.n	8014028 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8014018:	2b03      	cmp	r3, #3
 801401a:	d105      	bne.n	8014028 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801401c:	68fb      	ldr	r3, [r7, #12]
 801401e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014022:	68db      	ldr	r3, [r3, #12]
 8014024:	68f8      	ldr	r0, [r7, #12]
 8014026:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8014028:	2180      	movs	r1, #128	; 0x80
 801402a:	68f8      	ldr	r0, [r7, #12]
 801402c:	f003 fe0f 	bl	8017c4e <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8014030:	68f8      	ldr	r0, [r7, #12]
 8014032:	f000 ff14 	bl	8014e5e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801403c:	2b01      	cmp	r3, #1
 801403e:	d123      	bne.n	8014088 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8014040:	68f8      	ldr	r0, [r7, #12]
 8014042:	f7ff fe9b 	bl	8013d7c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8014046:	68fb      	ldr	r3, [r7, #12]
 8014048:	2200      	movs	r2, #0
 801404a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801404e:	e01b      	b.n	8014088 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8014050:	68fb      	ldr	r3, [r7, #12]
 8014052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014056:	695b      	ldr	r3, [r3, #20]
 8014058:	2b00      	cmp	r3, #0
 801405a:	d013      	beq.n	8014084 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8014062:	2b03      	cmp	r3, #3
 8014064:	d10e      	bne.n	8014084 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8014066:	68fb      	ldr	r3, [r7, #12]
 8014068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801406c:	695b      	ldr	r3, [r3, #20]
 801406e:	7afa      	ldrb	r2, [r7, #11]
 8014070:	4611      	mov	r1, r2
 8014072:	68f8      	ldr	r0, [r7, #12]
 8014074:	4798      	blx	r3
 8014076:	4603      	mov	r3, r0
 8014078:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 801407a:	7dfb      	ldrb	r3, [r7, #23]
 801407c:	2b00      	cmp	r3, #0
 801407e:	d003      	beq.n	8014088 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8014080:	7dfb      	ldrb	r3, [r7, #23]
 8014082:	e002      	b.n	801408a <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8014084:	2303      	movs	r3, #3
 8014086:	e000      	b.n	801408a <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8014088:	2300      	movs	r3, #0
}
 801408a:	4618      	mov	r0, r3
 801408c:	3718      	adds	r7, #24
 801408e:	46bd      	mov	sp, r7
 8014090:	bd80      	pop	{r7, pc}

08014092 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8014092:	b580      	push	{r7, lr}
 8014094:	b082      	sub	sp, #8
 8014096:	af00      	add	r7, sp, #0
 8014098:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	2201      	movs	r2, #1
 801409e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	2200      	movs	r2, #0
 80140a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	2200      	movs	r2, #0
 80140ae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	2200      	movs	r2, #0
 80140b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d009      	beq.n	80140d6 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80140c8:	685b      	ldr	r3, [r3, #4]
 80140ca:	687a      	ldr	r2, [r7, #4]
 80140cc:	6852      	ldr	r2, [r2, #4]
 80140ce:	b2d2      	uxtb	r2, r2
 80140d0:	4611      	mov	r1, r2
 80140d2:	6878      	ldr	r0, [r7, #4]
 80140d4:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80140d6:	2340      	movs	r3, #64	; 0x40
 80140d8:	2200      	movs	r2, #0
 80140da:	2100      	movs	r1, #0
 80140dc:	6878      	ldr	r0, [r7, #4]
 80140de:	f003 fd52 	bl	8017b86 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	2201      	movs	r2, #1
 80140e6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	2240      	movs	r2, #64	; 0x40
 80140ee:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80140f2:	2340      	movs	r3, #64	; 0x40
 80140f4:	2200      	movs	r2, #0
 80140f6:	2180      	movs	r1, #128	; 0x80
 80140f8:	6878      	ldr	r0, [r7, #4]
 80140fa:	f003 fd44 	bl	8017b86 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	2201      	movs	r2, #1
 8014102:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	2240      	movs	r2, #64	; 0x40
 8014108:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 801410a:	2300      	movs	r3, #0
}
 801410c:	4618      	mov	r0, r3
 801410e:	3708      	adds	r7, #8
 8014110:	46bd      	mov	sp, r7
 8014112:	bd80      	pop	{r7, pc}

08014114 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8014114:	b480      	push	{r7}
 8014116:	b083      	sub	sp, #12
 8014118:	af00      	add	r7, sp, #0
 801411a:	6078      	str	r0, [r7, #4]
 801411c:	460b      	mov	r3, r1
 801411e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	78fa      	ldrb	r2, [r7, #3]
 8014124:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8014126:	2300      	movs	r3, #0
}
 8014128:	4618      	mov	r0, r3
 801412a:	370c      	adds	r7, #12
 801412c:	46bd      	mov	sp, r7
 801412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014132:	4770      	bx	lr

08014134 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8014134:	b480      	push	{r7}
 8014136:	b083      	sub	sp, #12
 8014138:	af00      	add	r7, sp, #0
 801413a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	2204      	movs	r2, #4
 801414c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8014150:	2300      	movs	r3, #0
}
 8014152:	4618      	mov	r0, r3
 8014154:	370c      	adds	r7, #12
 8014156:	46bd      	mov	sp, r7
 8014158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801415c:	4770      	bx	lr

0801415e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801415e:	b480      	push	{r7}
 8014160:	b083      	sub	sp, #12
 8014162:	af00      	add	r7, sp, #0
 8014164:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801416c:	2b04      	cmp	r3, #4
 801416e:	d105      	bne.n	801417c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801417c:	2300      	movs	r3, #0
}
 801417e:	4618      	mov	r0, r3
 8014180:	370c      	adds	r7, #12
 8014182:	46bd      	mov	sp, r7
 8014184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014188:	4770      	bx	lr

0801418a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801418a:	b580      	push	{r7, lr}
 801418c:	b082      	sub	sp, #8
 801418e:	af00      	add	r7, sp, #0
 8014190:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014198:	2b03      	cmp	r3, #3
 801419a:	d10b      	bne.n	80141b4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80141a2:	69db      	ldr	r3, [r3, #28]
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d005      	beq.n	80141b4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80141ae:	69db      	ldr	r3, [r3, #28]
 80141b0:	6878      	ldr	r0, [r7, #4]
 80141b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80141b4:	2300      	movs	r3, #0
}
 80141b6:	4618      	mov	r0, r3
 80141b8:	3708      	adds	r7, #8
 80141ba:	46bd      	mov	sp, r7
 80141bc:	bd80      	pop	{r7, pc}

080141be <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80141be:	b480      	push	{r7}
 80141c0:	b083      	sub	sp, #12
 80141c2:	af00      	add	r7, sp, #0
 80141c4:	6078      	str	r0, [r7, #4]
 80141c6:	460b      	mov	r3, r1
 80141c8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80141ca:	2300      	movs	r3, #0
}
 80141cc:	4618      	mov	r0, r3
 80141ce:	370c      	adds	r7, #12
 80141d0:	46bd      	mov	sp, r7
 80141d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141d6:	4770      	bx	lr

080141d8 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80141d8:	b480      	push	{r7}
 80141da:	b083      	sub	sp, #12
 80141dc:	af00      	add	r7, sp, #0
 80141de:	6078      	str	r0, [r7, #4]
 80141e0:	460b      	mov	r3, r1
 80141e2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80141e4:	2300      	movs	r3, #0
}
 80141e6:	4618      	mov	r0, r3
 80141e8:	370c      	adds	r7, #12
 80141ea:	46bd      	mov	sp, r7
 80141ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141f0:	4770      	bx	lr

080141f2 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80141f2:	b480      	push	{r7}
 80141f4:	b083      	sub	sp, #12
 80141f6:	af00      	add	r7, sp, #0
 80141f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80141fa:	2300      	movs	r3, #0
}
 80141fc:	4618      	mov	r0, r3
 80141fe:	370c      	adds	r7, #12
 8014200:	46bd      	mov	sp, r7
 8014202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014206:	4770      	bx	lr

08014208 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8014208:	b580      	push	{r7, lr}
 801420a:	b082      	sub	sp, #8
 801420c:	af00      	add	r7, sp, #0
 801420e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	2201      	movs	r2, #1
 8014214:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801421e:	2b00      	cmp	r3, #0
 8014220:	d009      	beq.n	8014236 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014228:	685b      	ldr	r3, [r3, #4]
 801422a:	687a      	ldr	r2, [r7, #4]
 801422c:	6852      	ldr	r2, [r2, #4]
 801422e:	b2d2      	uxtb	r2, r2
 8014230:	4611      	mov	r1, r2
 8014232:	6878      	ldr	r0, [r7, #4]
 8014234:	4798      	blx	r3
  }

  return USBD_OK;
 8014236:	2300      	movs	r3, #0
}
 8014238:	4618      	mov	r0, r3
 801423a:	3708      	adds	r7, #8
 801423c:	46bd      	mov	sp, r7
 801423e:	bd80      	pop	{r7, pc}

08014240 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8014240:	b480      	push	{r7}
 8014242:	b087      	sub	sp, #28
 8014244:	af00      	add	r7, sp, #0
 8014246:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801424c:	697b      	ldr	r3, [r7, #20]
 801424e:	781b      	ldrb	r3, [r3, #0]
 8014250:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8014252:	697b      	ldr	r3, [r7, #20]
 8014254:	3301      	adds	r3, #1
 8014256:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8014258:	697b      	ldr	r3, [r7, #20]
 801425a:	781b      	ldrb	r3, [r3, #0]
 801425c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801425e:	8a3b      	ldrh	r3, [r7, #16]
 8014260:	021b      	lsls	r3, r3, #8
 8014262:	b21a      	sxth	r2, r3
 8014264:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014268:	4313      	orrs	r3, r2
 801426a:	b21b      	sxth	r3, r3
 801426c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801426e:	89fb      	ldrh	r3, [r7, #14]
}
 8014270:	4618      	mov	r0, r3
 8014272:	371c      	adds	r7, #28
 8014274:	46bd      	mov	sp, r7
 8014276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801427a:	4770      	bx	lr

0801427c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801427c:	b580      	push	{r7, lr}
 801427e:	b084      	sub	sp, #16
 8014280:	af00      	add	r7, sp, #0
 8014282:	6078      	str	r0, [r7, #4]
 8014284:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014286:	2300      	movs	r3, #0
 8014288:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801428a:	683b      	ldr	r3, [r7, #0]
 801428c:	781b      	ldrb	r3, [r3, #0]
 801428e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014292:	2b20      	cmp	r3, #32
 8014294:	d004      	beq.n	80142a0 <USBD_StdDevReq+0x24>
 8014296:	2b40      	cmp	r3, #64	; 0x40
 8014298:	d002      	beq.n	80142a0 <USBD_StdDevReq+0x24>
 801429a:	2b00      	cmp	r3, #0
 801429c:	d00a      	beq.n	80142b4 <USBD_StdDevReq+0x38>
 801429e:	e050      	b.n	8014342 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80142a6:	689b      	ldr	r3, [r3, #8]
 80142a8:	6839      	ldr	r1, [r7, #0]
 80142aa:	6878      	ldr	r0, [r7, #4]
 80142ac:	4798      	blx	r3
 80142ae:	4603      	mov	r3, r0
 80142b0:	73fb      	strb	r3, [r7, #15]
    break;
 80142b2:	e04b      	b.n	801434c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80142b4:	683b      	ldr	r3, [r7, #0]
 80142b6:	785b      	ldrb	r3, [r3, #1]
 80142b8:	2b09      	cmp	r3, #9
 80142ba:	d83c      	bhi.n	8014336 <USBD_StdDevReq+0xba>
 80142bc:	a201      	add	r2, pc, #4	; (adr r2, 80142c4 <USBD_StdDevReq+0x48>)
 80142be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142c2:	bf00      	nop
 80142c4:	08014319 	.word	0x08014319
 80142c8:	0801432d 	.word	0x0801432d
 80142cc:	08014337 	.word	0x08014337
 80142d0:	08014323 	.word	0x08014323
 80142d4:	08014337 	.word	0x08014337
 80142d8:	080142f7 	.word	0x080142f7
 80142dc:	080142ed 	.word	0x080142ed
 80142e0:	08014337 	.word	0x08014337
 80142e4:	0801430f 	.word	0x0801430f
 80142e8:	08014301 	.word	0x08014301
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80142ec:	6839      	ldr	r1, [r7, #0]
 80142ee:	6878      	ldr	r0, [r7, #4]
 80142f0:	f000 f9ce 	bl	8014690 <USBD_GetDescriptor>
      break;
 80142f4:	e024      	b.n	8014340 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80142f6:	6839      	ldr	r1, [r7, #0]
 80142f8:	6878      	ldr	r0, [r7, #4]
 80142fa:	f000 fb33 	bl	8014964 <USBD_SetAddress>
      break;
 80142fe:	e01f      	b.n	8014340 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8014300:	6839      	ldr	r1, [r7, #0]
 8014302:	6878      	ldr	r0, [r7, #4]
 8014304:	f000 fb70 	bl	80149e8 <USBD_SetConfig>
 8014308:	4603      	mov	r3, r0
 801430a:	73fb      	strb	r3, [r7, #15]
      break;
 801430c:	e018      	b.n	8014340 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 801430e:	6839      	ldr	r1, [r7, #0]
 8014310:	6878      	ldr	r0, [r7, #4]
 8014312:	f000 fc0d 	bl	8014b30 <USBD_GetConfig>
      break;
 8014316:	e013      	b.n	8014340 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8014318:	6839      	ldr	r1, [r7, #0]
 801431a:	6878      	ldr	r0, [r7, #4]
 801431c:	f000 fc3c 	bl	8014b98 <USBD_GetStatus>
      break;
 8014320:	e00e      	b.n	8014340 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8014322:	6839      	ldr	r1, [r7, #0]
 8014324:	6878      	ldr	r0, [r7, #4]
 8014326:	f000 fc6a 	bl	8014bfe <USBD_SetFeature>
      break;
 801432a:	e009      	b.n	8014340 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 801432c:	6839      	ldr	r1, [r7, #0]
 801432e:	6878      	ldr	r0, [r7, #4]
 8014330:	f000 fc79 	bl	8014c26 <USBD_ClrFeature>
      break;
 8014334:	e004      	b.n	8014340 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8014336:	6839      	ldr	r1, [r7, #0]
 8014338:	6878      	ldr	r0, [r7, #4]
 801433a:	f000 fccf 	bl	8014cdc <USBD_CtlError>
      break;
 801433e:	bf00      	nop
    }
    break;
 8014340:	e004      	b.n	801434c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8014342:	6839      	ldr	r1, [r7, #0]
 8014344:	6878      	ldr	r0, [r7, #4]
 8014346:	f000 fcc9 	bl	8014cdc <USBD_CtlError>
    break;
 801434a:	bf00      	nop
  }

  return ret;
 801434c:	7bfb      	ldrb	r3, [r7, #15]
}
 801434e:	4618      	mov	r0, r3
 8014350:	3710      	adds	r7, #16
 8014352:	46bd      	mov	sp, r7
 8014354:	bd80      	pop	{r7, pc}
 8014356:	bf00      	nop

08014358 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014358:	b580      	push	{r7, lr}
 801435a:	b084      	sub	sp, #16
 801435c:	af00      	add	r7, sp, #0
 801435e:	6078      	str	r0, [r7, #4]
 8014360:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014362:	2300      	movs	r3, #0
 8014364:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014366:	683b      	ldr	r3, [r7, #0]
 8014368:	781b      	ldrb	r3, [r3, #0]
 801436a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801436e:	2b20      	cmp	r3, #32
 8014370:	d003      	beq.n	801437a <USBD_StdItfReq+0x22>
 8014372:	2b40      	cmp	r3, #64	; 0x40
 8014374:	d001      	beq.n	801437a <USBD_StdItfReq+0x22>
 8014376:	2b00      	cmp	r3, #0
 8014378:	d12a      	bne.n	80143d0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014380:	3b01      	subs	r3, #1
 8014382:	2b02      	cmp	r3, #2
 8014384:	d81d      	bhi.n	80143c2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8014386:	683b      	ldr	r3, [r7, #0]
 8014388:	889b      	ldrh	r3, [r3, #4]
 801438a:	b2db      	uxtb	r3, r3
 801438c:	2b01      	cmp	r3, #1
 801438e:	d813      	bhi.n	80143b8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014396:	689b      	ldr	r3, [r3, #8]
 8014398:	6839      	ldr	r1, [r7, #0]
 801439a:	6878      	ldr	r0, [r7, #4]
 801439c:	4798      	blx	r3
 801439e:	4603      	mov	r3, r0
 80143a0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80143a2:	683b      	ldr	r3, [r7, #0]
 80143a4:	88db      	ldrh	r3, [r3, #6]
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d110      	bne.n	80143cc <USBD_StdItfReq+0x74>
 80143aa:	7bfb      	ldrb	r3, [r7, #15]
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d10d      	bne.n	80143cc <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80143b0:	6878      	ldr	r0, [r7, #4]
 80143b2:	f000 fd41 	bl	8014e38 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80143b6:	e009      	b.n	80143cc <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80143b8:	6839      	ldr	r1, [r7, #0]
 80143ba:	6878      	ldr	r0, [r7, #4]
 80143bc:	f000 fc8e 	bl	8014cdc <USBD_CtlError>
      break;
 80143c0:	e004      	b.n	80143cc <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80143c2:	6839      	ldr	r1, [r7, #0]
 80143c4:	6878      	ldr	r0, [r7, #4]
 80143c6:	f000 fc89 	bl	8014cdc <USBD_CtlError>
      break;
 80143ca:	e000      	b.n	80143ce <USBD_StdItfReq+0x76>
      break;
 80143cc:	bf00      	nop
    }
    break;
 80143ce:	e004      	b.n	80143da <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80143d0:	6839      	ldr	r1, [r7, #0]
 80143d2:	6878      	ldr	r0, [r7, #4]
 80143d4:	f000 fc82 	bl	8014cdc <USBD_CtlError>
    break;
 80143d8:	bf00      	nop
  }

  return ret;
 80143da:	7bfb      	ldrb	r3, [r7, #15]
}
 80143dc:	4618      	mov	r0, r3
 80143de:	3710      	adds	r7, #16
 80143e0:	46bd      	mov	sp, r7
 80143e2:	bd80      	pop	{r7, pc}

080143e4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80143e4:	b580      	push	{r7, lr}
 80143e6:	b084      	sub	sp, #16
 80143e8:	af00      	add	r7, sp, #0
 80143ea:	6078      	str	r0, [r7, #4]
 80143ec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80143ee:	2300      	movs	r3, #0
 80143f0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80143f2:	683b      	ldr	r3, [r7, #0]
 80143f4:	889b      	ldrh	r3, [r3, #4]
 80143f6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80143f8:	683b      	ldr	r3, [r7, #0]
 80143fa:	781b      	ldrb	r3, [r3, #0]
 80143fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014400:	2b20      	cmp	r3, #32
 8014402:	d004      	beq.n	801440e <USBD_StdEPReq+0x2a>
 8014404:	2b40      	cmp	r3, #64	; 0x40
 8014406:	d002      	beq.n	801440e <USBD_StdEPReq+0x2a>
 8014408:	2b00      	cmp	r3, #0
 801440a:	d00a      	beq.n	8014422 <USBD_StdEPReq+0x3e>
 801440c:	e135      	b.n	801467a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014414:	689b      	ldr	r3, [r3, #8]
 8014416:	6839      	ldr	r1, [r7, #0]
 8014418:	6878      	ldr	r0, [r7, #4]
 801441a:	4798      	blx	r3
 801441c:	4603      	mov	r3, r0
 801441e:	73fb      	strb	r3, [r7, #15]
    break;
 8014420:	e130      	b.n	8014684 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8014422:	683b      	ldr	r3, [r7, #0]
 8014424:	785b      	ldrb	r3, [r3, #1]
 8014426:	2b01      	cmp	r3, #1
 8014428:	d03e      	beq.n	80144a8 <USBD_StdEPReq+0xc4>
 801442a:	2b03      	cmp	r3, #3
 801442c:	d002      	beq.n	8014434 <USBD_StdEPReq+0x50>
 801442e:	2b00      	cmp	r3, #0
 8014430:	d077      	beq.n	8014522 <USBD_StdEPReq+0x13e>
 8014432:	e11c      	b.n	801466e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801443a:	2b02      	cmp	r3, #2
 801443c:	d002      	beq.n	8014444 <USBD_StdEPReq+0x60>
 801443e:	2b03      	cmp	r3, #3
 8014440:	d015      	beq.n	801446e <USBD_StdEPReq+0x8a>
 8014442:	e02b      	b.n	801449c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014444:	7bbb      	ldrb	r3, [r7, #14]
 8014446:	2b00      	cmp	r3, #0
 8014448:	d00c      	beq.n	8014464 <USBD_StdEPReq+0x80>
 801444a:	7bbb      	ldrb	r3, [r7, #14]
 801444c:	2b80      	cmp	r3, #128	; 0x80
 801444e:	d009      	beq.n	8014464 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8014450:	7bbb      	ldrb	r3, [r7, #14]
 8014452:	4619      	mov	r1, r3
 8014454:	6878      	ldr	r0, [r7, #4]
 8014456:	f003 fbfa 	bl	8017c4e <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801445a:	2180      	movs	r1, #128	; 0x80
 801445c:	6878      	ldr	r0, [r7, #4]
 801445e:	f003 fbf6 	bl	8017c4e <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8014462:	e020      	b.n	80144a6 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8014464:	6839      	ldr	r1, [r7, #0]
 8014466:	6878      	ldr	r0, [r7, #4]
 8014468:	f000 fc38 	bl	8014cdc <USBD_CtlError>
        break;
 801446c:	e01b      	b.n	80144a6 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 801446e:	683b      	ldr	r3, [r7, #0]
 8014470:	885b      	ldrh	r3, [r3, #2]
 8014472:	2b00      	cmp	r3, #0
 8014474:	d10e      	bne.n	8014494 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014476:	7bbb      	ldrb	r3, [r7, #14]
 8014478:	2b00      	cmp	r3, #0
 801447a:	d00b      	beq.n	8014494 <USBD_StdEPReq+0xb0>
 801447c:	7bbb      	ldrb	r3, [r7, #14]
 801447e:	2b80      	cmp	r3, #128	; 0x80
 8014480:	d008      	beq.n	8014494 <USBD_StdEPReq+0xb0>
 8014482:	683b      	ldr	r3, [r7, #0]
 8014484:	88db      	ldrh	r3, [r3, #6]
 8014486:	2b00      	cmp	r3, #0
 8014488:	d104      	bne.n	8014494 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 801448a:	7bbb      	ldrb	r3, [r7, #14]
 801448c:	4619      	mov	r1, r3
 801448e:	6878      	ldr	r0, [r7, #4]
 8014490:	f003 fbdd 	bl	8017c4e <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8014494:	6878      	ldr	r0, [r7, #4]
 8014496:	f000 fccf 	bl	8014e38 <USBD_CtlSendStatus>

        break;
 801449a:	e004      	b.n	80144a6 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 801449c:	6839      	ldr	r1, [r7, #0]
 801449e:	6878      	ldr	r0, [r7, #4]
 80144a0:	f000 fc1c 	bl	8014cdc <USBD_CtlError>
        break;
 80144a4:	bf00      	nop
      }
      break;
 80144a6:	e0e7      	b.n	8014678 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80144ae:	2b02      	cmp	r3, #2
 80144b0:	d002      	beq.n	80144b8 <USBD_StdEPReq+0xd4>
 80144b2:	2b03      	cmp	r3, #3
 80144b4:	d015      	beq.n	80144e2 <USBD_StdEPReq+0xfe>
 80144b6:	e02d      	b.n	8014514 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80144b8:	7bbb      	ldrb	r3, [r7, #14]
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d00c      	beq.n	80144d8 <USBD_StdEPReq+0xf4>
 80144be:	7bbb      	ldrb	r3, [r7, #14]
 80144c0:	2b80      	cmp	r3, #128	; 0x80
 80144c2:	d009      	beq.n	80144d8 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80144c4:	7bbb      	ldrb	r3, [r7, #14]
 80144c6:	4619      	mov	r1, r3
 80144c8:	6878      	ldr	r0, [r7, #4]
 80144ca:	f003 fbc0 	bl	8017c4e <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80144ce:	2180      	movs	r1, #128	; 0x80
 80144d0:	6878      	ldr	r0, [r7, #4]
 80144d2:	f003 fbbc 	bl	8017c4e <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80144d6:	e023      	b.n	8014520 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80144d8:	6839      	ldr	r1, [r7, #0]
 80144da:	6878      	ldr	r0, [r7, #4]
 80144dc:	f000 fbfe 	bl	8014cdc <USBD_CtlError>
        break;
 80144e0:	e01e      	b.n	8014520 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80144e2:	683b      	ldr	r3, [r7, #0]
 80144e4:	885b      	ldrh	r3, [r3, #2]
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d119      	bne.n	801451e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80144ea:	7bbb      	ldrb	r3, [r7, #14]
 80144ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d004      	beq.n	80144fe <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80144f4:	7bbb      	ldrb	r3, [r7, #14]
 80144f6:	4619      	mov	r1, r3
 80144f8:	6878      	ldr	r0, [r7, #4]
 80144fa:	f003 fbc7 	bl	8017c8c <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80144fe:	6878      	ldr	r0, [r7, #4]
 8014500:	f000 fc9a 	bl	8014e38 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801450a:	689b      	ldr	r3, [r3, #8]
 801450c:	6839      	ldr	r1, [r7, #0]
 801450e:	6878      	ldr	r0, [r7, #4]
 8014510:	4798      	blx	r3
        }
        break;
 8014512:	e004      	b.n	801451e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8014514:	6839      	ldr	r1, [r7, #0]
 8014516:	6878      	ldr	r0, [r7, #4]
 8014518:	f000 fbe0 	bl	8014cdc <USBD_CtlError>
        break;
 801451c:	e000      	b.n	8014520 <USBD_StdEPReq+0x13c>
        break;
 801451e:	bf00      	nop
      }
      break;
 8014520:	e0aa      	b.n	8014678 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014528:	2b02      	cmp	r3, #2
 801452a:	d002      	beq.n	8014532 <USBD_StdEPReq+0x14e>
 801452c:	2b03      	cmp	r3, #3
 801452e:	d032      	beq.n	8014596 <USBD_StdEPReq+0x1b2>
 8014530:	e097      	b.n	8014662 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014532:	7bbb      	ldrb	r3, [r7, #14]
 8014534:	2b00      	cmp	r3, #0
 8014536:	d007      	beq.n	8014548 <USBD_StdEPReq+0x164>
 8014538:	7bbb      	ldrb	r3, [r7, #14]
 801453a:	2b80      	cmp	r3, #128	; 0x80
 801453c:	d004      	beq.n	8014548 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 801453e:	6839      	ldr	r1, [r7, #0]
 8014540:	6878      	ldr	r0, [r7, #4]
 8014542:	f000 fbcb 	bl	8014cdc <USBD_CtlError>
          break;
 8014546:	e091      	b.n	801466c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014548:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801454c:	2b00      	cmp	r3, #0
 801454e:	da0b      	bge.n	8014568 <USBD_StdEPReq+0x184>
 8014550:	7bbb      	ldrb	r3, [r7, #14]
 8014552:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014556:	4613      	mov	r3, r2
 8014558:	009b      	lsls	r3, r3, #2
 801455a:	4413      	add	r3, r2
 801455c:	009b      	lsls	r3, r3, #2
 801455e:	3310      	adds	r3, #16
 8014560:	687a      	ldr	r2, [r7, #4]
 8014562:	4413      	add	r3, r2
 8014564:	3304      	adds	r3, #4
 8014566:	e00b      	b.n	8014580 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8014568:	7bbb      	ldrb	r3, [r7, #14]
 801456a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801456e:	4613      	mov	r3, r2
 8014570:	009b      	lsls	r3, r3, #2
 8014572:	4413      	add	r3, r2
 8014574:	009b      	lsls	r3, r3, #2
 8014576:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801457a:	687a      	ldr	r2, [r7, #4]
 801457c:	4413      	add	r3, r2
 801457e:	3304      	adds	r3, #4
 8014580:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8014582:	68bb      	ldr	r3, [r7, #8]
 8014584:	2200      	movs	r2, #0
 8014586:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014588:	68bb      	ldr	r3, [r7, #8]
 801458a:	2202      	movs	r2, #2
 801458c:	4619      	mov	r1, r3
 801458e:	6878      	ldr	r0, [r7, #4]
 8014590:	f000 fc15 	bl	8014dbe <USBD_CtlSendData>
        break;
 8014594:	e06a      	b.n	801466c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8014596:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801459a:	2b00      	cmp	r3, #0
 801459c:	da11      	bge.n	80145c2 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801459e:	7bbb      	ldrb	r3, [r7, #14]
 80145a0:	f003 020f 	and.w	r2, r3, #15
 80145a4:	6879      	ldr	r1, [r7, #4]
 80145a6:	4613      	mov	r3, r2
 80145a8:	009b      	lsls	r3, r3, #2
 80145aa:	4413      	add	r3, r2
 80145ac:	009b      	lsls	r3, r3, #2
 80145ae:	440b      	add	r3, r1
 80145b0:	3324      	adds	r3, #36	; 0x24
 80145b2:	881b      	ldrh	r3, [r3, #0]
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d117      	bne.n	80145e8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80145b8:	6839      	ldr	r1, [r7, #0]
 80145ba:	6878      	ldr	r0, [r7, #4]
 80145bc:	f000 fb8e 	bl	8014cdc <USBD_CtlError>
            break;
 80145c0:	e054      	b.n	801466c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80145c2:	7bbb      	ldrb	r3, [r7, #14]
 80145c4:	f003 020f 	and.w	r2, r3, #15
 80145c8:	6879      	ldr	r1, [r7, #4]
 80145ca:	4613      	mov	r3, r2
 80145cc:	009b      	lsls	r3, r3, #2
 80145ce:	4413      	add	r3, r2
 80145d0:	009b      	lsls	r3, r3, #2
 80145d2:	440b      	add	r3, r1
 80145d4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80145d8:	881b      	ldrh	r3, [r3, #0]
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d104      	bne.n	80145e8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80145de:	6839      	ldr	r1, [r7, #0]
 80145e0:	6878      	ldr	r0, [r7, #4]
 80145e2:	f000 fb7b 	bl	8014cdc <USBD_CtlError>
            break;
 80145e6:	e041      	b.n	801466c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80145e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	da0b      	bge.n	8014608 <USBD_StdEPReq+0x224>
 80145f0:	7bbb      	ldrb	r3, [r7, #14]
 80145f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80145f6:	4613      	mov	r3, r2
 80145f8:	009b      	lsls	r3, r3, #2
 80145fa:	4413      	add	r3, r2
 80145fc:	009b      	lsls	r3, r3, #2
 80145fe:	3310      	adds	r3, #16
 8014600:	687a      	ldr	r2, [r7, #4]
 8014602:	4413      	add	r3, r2
 8014604:	3304      	adds	r3, #4
 8014606:	e00b      	b.n	8014620 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8014608:	7bbb      	ldrb	r3, [r7, #14]
 801460a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801460e:	4613      	mov	r3, r2
 8014610:	009b      	lsls	r3, r3, #2
 8014612:	4413      	add	r3, r2
 8014614:	009b      	lsls	r3, r3, #2
 8014616:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801461a:	687a      	ldr	r2, [r7, #4]
 801461c:	4413      	add	r3, r2
 801461e:	3304      	adds	r3, #4
 8014620:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014622:	7bbb      	ldrb	r3, [r7, #14]
 8014624:	2b00      	cmp	r3, #0
 8014626:	d002      	beq.n	801462e <USBD_StdEPReq+0x24a>
 8014628:	7bbb      	ldrb	r3, [r7, #14]
 801462a:	2b80      	cmp	r3, #128	; 0x80
 801462c:	d103      	bne.n	8014636 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 801462e:	68bb      	ldr	r3, [r7, #8]
 8014630:	2200      	movs	r2, #0
 8014632:	601a      	str	r2, [r3, #0]
 8014634:	e00e      	b.n	8014654 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014636:	7bbb      	ldrb	r3, [r7, #14]
 8014638:	4619      	mov	r1, r3
 801463a:	6878      	ldr	r0, [r7, #4]
 801463c:	f003 fb45 	bl	8017cca <USBD_LL_IsStallEP>
 8014640:	4603      	mov	r3, r0
 8014642:	2b00      	cmp	r3, #0
 8014644:	d003      	beq.n	801464e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8014646:	68bb      	ldr	r3, [r7, #8]
 8014648:	2201      	movs	r2, #1
 801464a:	601a      	str	r2, [r3, #0]
 801464c:	e002      	b.n	8014654 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 801464e:	68bb      	ldr	r3, [r7, #8]
 8014650:	2200      	movs	r2, #0
 8014652:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014654:	68bb      	ldr	r3, [r7, #8]
 8014656:	2202      	movs	r2, #2
 8014658:	4619      	mov	r1, r3
 801465a:	6878      	ldr	r0, [r7, #4]
 801465c:	f000 fbaf 	bl	8014dbe <USBD_CtlSendData>
          break;
 8014660:	e004      	b.n	801466c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8014662:	6839      	ldr	r1, [r7, #0]
 8014664:	6878      	ldr	r0, [r7, #4]
 8014666:	f000 fb39 	bl	8014cdc <USBD_CtlError>
        break;
 801466a:	bf00      	nop
      }
      break;
 801466c:	e004      	b.n	8014678 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 801466e:	6839      	ldr	r1, [r7, #0]
 8014670:	6878      	ldr	r0, [r7, #4]
 8014672:	f000 fb33 	bl	8014cdc <USBD_CtlError>
      break;
 8014676:	bf00      	nop
    }
    break;
 8014678:	e004      	b.n	8014684 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 801467a:	6839      	ldr	r1, [r7, #0]
 801467c:	6878      	ldr	r0, [r7, #4]
 801467e:	f000 fb2d 	bl	8014cdc <USBD_CtlError>
    break;
 8014682:	bf00      	nop
  }

  return ret;
 8014684:	7bfb      	ldrb	r3, [r7, #15]
}
 8014686:	4618      	mov	r0, r3
 8014688:	3710      	adds	r7, #16
 801468a:	46bd      	mov	sp, r7
 801468c:	bd80      	pop	{r7, pc}
	...

08014690 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014690:	b580      	push	{r7, lr}
 8014692:	b084      	sub	sp, #16
 8014694:	af00      	add	r7, sp, #0
 8014696:	6078      	str	r0, [r7, #4]
 8014698:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801469a:	2300      	movs	r3, #0
 801469c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801469e:	2300      	movs	r3, #0
 80146a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80146a2:	2300      	movs	r3, #0
 80146a4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80146a6:	683b      	ldr	r3, [r7, #0]
 80146a8:	885b      	ldrh	r3, [r3, #2]
 80146aa:	0a1b      	lsrs	r3, r3, #8
 80146ac:	b29b      	uxth	r3, r3
 80146ae:	3b01      	subs	r3, #1
 80146b0:	2b06      	cmp	r3, #6
 80146b2:	f200 8128 	bhi.w	8014906 <USBD_GetDescriptor+0x276>
 80146b6:	a201      	add	r2, pc, #4	; (adr r2, 80146bc <USBD_GetDescriptor+0x2c>)
 80146b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146bc:	080146d9 	.word	0x080146d9
 80146c0:	080146f1 	.word	0x080146f1
 80146c4:	08014731 	.word	0x08014731
 80146c8:	08014907 	.word	0x08014907
 80146cc:	08014907 	.word	0x08014907
 80146d0:	080148a7 	.word	0x080148a7
 80146d4:	080148d3 	.word	0x080148d3
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	687a      	ldr	r2, [r7, #4]
 80146e2:	7c12      	ldrb	r2, [r2, #16]
 80146e4:	f107 0108 	add.w	r1, r7, #8
 80146e8:	4610      	mov	r0, r2
 80146ea:	4798      	blx	r3
 80146ec:	60f8      	str	r0, [r7, #12]
    break;
 80146ee:	e112      	b.n	8014916 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	7c1b      	ldrb	r3, [r3, #16]
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d10d      	bne.n	8014714 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80146fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014700:	f107 0208 	add.w	r2, r7, #8
 8014704:	4610      	mov	r0, r2
 8014706:	4798      	blx	r3
 8014708:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	3301      	adds	r3, #1
 801470e:	2202      	movs	r2, #2
 8014710:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8014712:	e100      	b.n	8014916 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801471a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801471c:	f107 0208 	add.w	r2, r7, #8
 8014720:	4610      	mov	r0, r2
 8014722:	4798      	blx	r3
 8014724:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014726:	68fb      	ldr	r3, [r7, #12]
 8014728:	3301      	adds	r3, #1
 801472a:	2202      	movs	r2, #2
 801472c:	701a      	strb	r2, [r3, #0]
    break;
 801472e:	e0f2      	b.n	8014916 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8014730:	683b      	ldr	r3, [r7, #0]
 8014732:	885b      	ldrh	r3, [r3, #2]
 8014734:	b2db      	uxtb	r3, r3
 8014736:	2b05      	cmp	r3, #5
 8014738:	f200 80ac 	bhi.w	8014894 <USBD_GetDescriptor+0x204>
 801473c:	a201      	add	r2, pc, #4	; (adr r2, 8014744 <USBD_GetDescriptor+0xb4>)
 801473e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014742:	bf00      	nop
 8014744:	0801475d 	.word	0x0801475d
 8014748:	08014791 	.word	0x08014791
 801474c:	080147c5 	.word	0x080147c5
 8014750:	080147f9 	.word	0x080147f9
 8014754:	0801482d 	.word	0x0801482d
 8014758:	08014861 	.word	0x08014861
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014762:	685b      	ldr	r3, [r3, #4]
 8014764:	2b00      	cmp	r3, #0
 8014766:	d00b      	beq.n	8014780 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801476e:	685b      	ldr	r3, [r3, #4]
 8014770:	687a      	ldr	r2, [r7, #4]
 8014772:	7c12      	ldrb	r2, [r2, #16]
 8014774:	f107 0108 	add.w	r1, r7, #8
 8014778:	4610      	mov	r0, r2
 801477a:	4798      	blx	r3
 801477c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801477e:	e091      	b.n	80148a4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8014780:	6839      	ldr	r1, [r7, #0]
 8014782:	6878      	ldr	r0, [r7, #4]
 8014784:	f000 faaa 	bl	8014cdc <USBD_CtlError>
        err++;
 8014788:	7afb      	ldrb	r3, [r7, #11]
 801478a:	3301      	adds	r3, #1
 801478c:	72fb      	strb	r3, [r7, #11]
      break;
 801478e:	e089      	b.n	80148a4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014796:	689b      	ldr	r3, [r3, #8]
 8014798:	2b00      	cmp	r3, #0
 801479a:	d00b      	beq.n	80147b4 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80147a2:	689b      	ldr	r3, [r3, #8]
 80147a4:	687a      	ldr	r2, [r7, #4]
 80147a6:	7c12      	ldrb	r2, [r2, #16]
 80147a8:	f107 0108 	add.w	r1, r7, #8
 80147ac:	4610      	mov	r0, r2
 80147ae:	4798      	blx	r3
 80147b0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80147b2:	e077      	b.n	80148a4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80147b4:	6839      	ldr	r1, [r7, #0]
 80147b6:	6878      	ldr	r0, [r7, #4]
 80147b8:	f000 fa90 	bl	8014cdc <USBD_CtlError>
        err++;
 80147bc:	7afb      	ldrb	r3, [r7, #11]
 80147be:	3301      	adds	r3, #1
 80147c0:	72fb      	strb	r3, [r7, #11]
      break;
 80147c2:	e06f      	b.n	80148a4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80147ca:	68db      	ldr	r3, [r3, #12]
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d00b      	beq.n	80147e8 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80147d6:	68db      	ldr	r3, [r3, #12]
 80147d8:	687a      	ldr	r2, [r7, #4]
 80147da:	7c12      	ldrb	r2, [r2, #16]
 80147dc:	f107 0108 	add.w	r1, r7, #8
 80147e0:	4610      	mov	r0, r2
 80147e2:	4798      	blx	r3
 80147e4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80147e6:	e05d      	b.n	80148a4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80147e8:	6839      	ldr	r1, [r7, #0]
 80147ea:	6878      	ldr	r0, [r7, #4]
 80147ec:	f000 fa76 	bl	8014cdc <USBD_CtlError>
        err++;
 80147f0:	7afb      	ldrb	r3, [r7, #11]
 80147f2:	3301      	adds	r3, #1
 80147f4:	72fb      	strb	r3, [r7, #11]
      break;
 80147f6:	e055      	b.n	80148a4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80147fe:	691b      	ldr	r3, [r3, #16]
 8014800:	2b00      	cmp	r3, #0
 8014802:	d00b      	beq.n	801481c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801480a:	691b      	ldr	r3, [r3, #16]
 801480c:	687a      	ldr	r2, [r7, #4]
 801480e:	7c12      	ldrb	r2, [r2, #16]
 8014810:	f107 0108 	add.w	r1, r7, #8
 8014814:	4610      	mov	r0, r2
 8014816:	4798      	blx	r3
 8014818:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801481a:	e043      	b.n	80148a4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 801481c:	6839      	ldr	r1, [r7, #0]
 801481e:	6878      	ldr	r0, [r7, #4]
 8014820:	f000 fa5c 	bl	8014cdc <USBD_CtlError>
        err++;
 8014824:	7afb      	ldrb	r3, [r7, #11]
 8014826:	3301      	adds	r3, #1
 8014828:	72fb      	strb	r3, [r7, #11]
      break;
 801482a:	e03b      	b.n	80148a4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014832:	695b      	ldr	r3, [r3, #20]
 8014834:	2b00      	cmp	r3, #0
 8014836:	d00b      	beq.n	8014850 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801483e:	695b      	ldr	r3, [r3, #20]
 8014840:	687a      	ldr	r2, [r7, #4]
 8014842:	7c12      	ldrb	r2, [r2, #16]
 8014844:	f107 0108 	add.w	r1, r7, #8
 8014848:	4610      	mov	r0, r2
 801484a:	4798      	blx	r3
 801484c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801484e:	e029      	b.n	80148a4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8014850:	6839      	ldr	r1, [r7, #0]
 8014852:	6878      	ldr	r0, [r7, #4]
 8014854:	f000 fa42 	bl	8014cdc <USBD_CtlError>
        err++;
 8014858:	7afb      	ldrb	r3, [r7, #11]
 801485a:	3301      	adds	r3, #1
 801485c:	72fb      	strb	r3, [r7, #11]
      break;
 801485e:	e021      	b.n	80148a4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014866:	699b      	ldr	r3, [r3, #24]
 8014868:	2b00      	cmp	r3, #0
 801486a:	d00b      	beq.n	8014884 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014872:	699b      	ldr	r3, [r3, #24]
 8014874:	687a      	ldr	r2, [r7, #4]
 8014876:	7c12      	ldrb	r2, [r2, #16]
 8014878:	f107 0108 	add.w	r1, r7, #8
 801487c:	4610      	mov	r0, r2
 801487e:	4798      	blx	r3
 8014880:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014882:	e00f      	b.n	80148a4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8014884:	6839      	ldr	r1, [r7, #0]
 8014886:	6878      	ldr	r0, [r7, #4]
 8014888:	f000 fa28 	bl	8014cdc <USBD_CtlError>
        err++;
 801488c:	7afb      	ldrb	r3, [r7, #11]
 801488e:	3301      	adds	r3, #1
 8014890:	72fb      	strb	r3, [r7, #11]
      break;
 8014892:	e007      	b.n	80148a4 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8014894:	6839      	ldr	r1, [r7, #0]
 8014896:	6878      	ldr	r0, [r7, #4]
 8014898:	f000 fa20 	bl	8014cdc <USBD_CtlError>
      err++;
 801489c:	7afb      	ldrb	r3, [r7, #11]
 801489e:	3301      	adds	r3, #1
 80148a0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80148a2:	bf00      	nop
    }
    break;
 80148a4:	e037      	b.n	8014916 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	7c1b      	ldrb	r3, [r3, #16]
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d109      	bne.n	80148c2 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80148b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80148b6:	f107 0208 	add.w	r2, r7, #8
 80148ba:	4610      	mov	r0, r2
 80148bc:	4798      	blx	r3
 80148be:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80148c0:	e029      	b.n	8014916 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80148c2:	6839      	ldr	r1, [r7, #0]
 80148c4:	6878      	ldr	r0, [r7, #4]
 80148c6:	f000 fa09 	bl	8014cdc <USBD_CtlError>
      err++;
 80148ca:	7afb      	ldrb	r3, [r7, #11]
 80148cc:	3301      	adds	r3, #1
 80148ce:	72fb      	strb	r3, [r7, #11]
    break;
 80148d0:	e021      	b.n	8014916 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	7c1b      	ldrb	r3, [r3, #16]
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d10d      	bne.n	80148f6 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80148e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80148e2:	f107 0208 	add.w	r2, r7, #8
 80148e6:	4610      	mov	r0, r2
 80148e8:	4798      	blx	r3
 80148ea:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	3301      	adds	r3, #1
 80148f0:	2207      	movs	r2, #7
 80148f2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80148f4:	e00f      	b.n	8014916 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80148f6:	6839      	ldr	r1, [r7, #0]
 80148f8:	6878      	ldr	r0, [r7, #4]
 80148fa:	f000 f9ef 	bl	8014cdc <USBD_CtlError>
      err++;
 80148fe:	7afb      	ldrb	r3, [r7, #11]
 8014900:	3301      	adds	r3, #1
 8014902:	72fb      	strb	r3, [r7, #11]
    break;
 8014904:	e007      	b.n	8014916 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8014906:	6839      	ldr	r1, [r7, #0]
 8014908:	6878      	ldr	r0, [r7, #4]
 801490a:	f000 f9e7 	bl	8014cdc <USBD_CtlError>
    err++;
 801490e:	7afb      	ldrb	r3, [r7, #11]
 8014910:	3301      	adds	r3, #1
 8014912:	72fb      	strb	r3, [r7, #11]
    break;
 8014914:	bf00      	nop
  }

  if (err != 0U)
 8014916:	7afb      	ldrb	r3, [r7, #11]
 8014918:	2b00      	cmp	r3, #0
 801491a:	d11e      	bne.n	801495a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 801491c:	683b      	ldr	r3, [r7, #0]
 801491e:	88db      	ldrh	r3, [r3, #6]
 8014920:	2b00      	cmp	r3, #0
 8014922:	d016      	beq.n	8014952 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8014924:	893b      	ldrh	r3, [r7, #8]
 8014926:	2b00      	cmp	r3, #0
 8014928:	d00e      	beq.n	8014948 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 801492a:	683b      	ldr	r3, [r7, #0]
 801492c:	88da      	ldrh	r2, [r3, #6]
 801492e:	893b      	ldrh	r3, [r7, #8]
 8014930:	4293      	cmp	r3, r2
 8014932:	bf28      	it	cs
 8014934:	4613      	movcs	r3, r2
 8014936:	b29b      	uxth	r3, r3
 8014938:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 801493a:	893b      	ldrh	r3, [r7, #8]
 801493c:	461a      	mov	r2, r3
 801493e:	68f9      	ldr	r1, [r7, #12]
 8014940:	6878      	ldr	r0, [r7, #4]
 8014942:	f000 fa3c 	bl	8014dbe <USBD_CtlSendData>
 8014946:	e009      	b.n	801495c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8014948:	6839      	ldr	r1, [r7, #0]
 801494a:	6878      	ldr	r0, [r7, #4]
 801494c:	f000 f9c6 	bl	8014cdc <USBD_CtlError>
 8014950:	e004      	b.n	801495c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8014952:	6878      	ldr	r0, [r7, #4]
 8014954:	f000 fa70 	bl	8014e38 <USBD_CtlSendStatus>
 8014958:	e000      	b.n	801495c <USBD_GetDescriptor+0x2cc>
    return;
 801495a:	bf00      	nop
    }
  }
}
 801495c:	3710      	adds	r7, #16
 801495e:	46bd      	mov	sp, r7
 8014960:	bd80      	pop	{r7, pc}
 8014962:	bf00      	nop

08014964 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014964:	b580      	push	{r7, lr}
 8014966:	b084      	sub	sp, #16
 8014968:	af00      	add	r7, sp, #0
 801496a:	6078      	str	r0, [r7, #4]
 801496c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801496e:	683b      	ldr	r3, [r7, #0]
 8014970:	889b      	ldrh	r3, [r3, #4]
 8014972:	2b00      	cmp	r3, #0
 8014974:	d130      	bne.n	80149d8 <USBD_SetAddress+0x74>
 8014976:	683b      	ldr	r3, [r7, #0]
 8014978:	88db      	ldrh	r3, [r3, #6]
 801497a:	2b00      	cmp	r3, #0
 801497c:	d12c      	bne.n	80149d8 <USBD_SetAddress+0x74>
 801497e:	683b      	ldr	r3, [r7, #0]
 8014980:	885b      	ldrh	r3, [r3, #2]
 8014982:	2b7f      	cmp	r3, #127	; 0x7f
 8014984:	d828      	bhi.n	80149d8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014986:	683b      	ldr	r3, [r7, #0]
 8014988:	885b      	ldrh	r3, [r3, #2]
 801498a:	b2db      	uxtb	r3, r3
 801498c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014990:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014998:	2b03      	cmp	r3, #3
 801499a:	d104      	bne.n	80149a6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 801499c:	6839      	ldr	r1, [r7, #0]
 801499e:	6878      	ldr	r0, [r7, #4]
 80149a0:	f000 f99c 	bl	8014cdc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80149a4:	e01c      	b.n	80149e0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	7bfa      	ldrb	r2, [r7, #15]
 80149aa:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80149ae:	7bfb      	ldrb	r3, [r7, #15]
 80149b0:	4619      	mov	r1, r3
 80149b2:	6878      	ldr	r0, [r7, #4]
 80149b4:	f003 f9b5 	bl	8017d22 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80149b8:	6878      	ldr	r0, [r7, #4]
 80149ba:	f000 fa3d 	bl	8014e38 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80149be:	7bfb      	ldrb	r3, [r7, #15]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d004      	beq.n	80149ce <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	2202      	movs	r2, #2
 80149c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80149cc:	e008      	b.n	80149e0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	2201      	movs	r2, #1
 80149d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80149d6:	e003      	b.n	80149e0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80149d8:	6839      	ldr	r1, [r7, #0]
 80149da:	6878      	ldr	r0, [r7, #4]
 80149dc:	f000 f97e 	bl	8014cdc <USBD_CtlError>
  }
}
 80149e0:	bf00      	nop
 80149e2:	3710      	adds	r7, #16
 80149e4:	46bd      	mov	sp, r7
 80149e6:	bd80      	pop	{r7, pc}

080149e8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80149e8:	b580      	push	{r7, lr}
 80149ea:	b084      	sub	sp, #16
 80149ec:	af00      	add	r7, sp, #0
 80149ee:	6078      	str	r0, [r7, #4]
 80149f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80149f2:	2300      	movs	r3, #0
 80149f4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80149f6:	683b      	ldr	r3, [r7, #0]
 80149f8:	885b      	ldrh	r3, [r3, #2]
 80149fa:	b2da      	uxtb	r2, r3
 80149fc:	4b4b      	ldr	r3, [pc, #300]	; (8014b2c <USBD_SetConfig+0x144>)
 80149fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014a00:	4b4a      	ldr	r3, [pc, #296]	; (8014b2c <USBD_SetConfig+0x144>)
 8014a02:	781b      	ldrb	r3, [r3, #0]
 8014a04:	2b01      	cmp	r3, #1
 8014a06:	d905      	bls.n	8014a14 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014a08:	6839      	ldr	r1, [r7, #0]
 8014a0a:	6878      	ldr	r0, [r7, #4]
 8014a0c:	f000 f966 	bl	8014cdc <USBD_CtlError>
    return USBD_FAIL;
 8014a10:	2303      	movs	r3, #3
 8014a12:	e087      	b.n	8014b24 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a1a:	2b02      	cmp	r3, #2
 8014a1c:	d002      	beq.n	8014a24 <USBD_SetConfig+0x3c>
 8014a1e:	2b03      	cmp	r3, #3
 8014a20:	d025      	beq.n	8014a6e <USBD_SetConfig+0x86>
 8014a22:	e071      	b.n	8014b08 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8014a24:	4b41      	ldr	r3, [pc, #260]	; (8014b2c <USBD_SetConfig+0x144>)
 8014a26:	781b      	ldrb	r3, [r3, #0]
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d01c      	beq.n	8014a66 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8014a2c:	4b3f      	ldr	r3, [pc, #252]	; (8014b2c <USBD_SetConfig+0x144>)
 8014a2e:	781b      	ldrb	r3, [r3, #0]
 8014a30:	461a      	mov	r2, r3
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8014a36:	4b3d      	ldr	r3, [pc, #244]	; (8014b2c <USBD_SetConfig+0x144>)
 8014a38:	781b      	ldrb	r3, [r3, #0]
 8014a3a:	4619      	mov	r1, r3
 8014a3c:	6878      	ldr	r0, [r7, #4]
 8014a3e:	f7ff f9a8 	bl	8013d92 <USBD_SetClassConfig>
 8014a42:	4603      	mov	r3, r0
 8014a44:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8014a46:	7bfb      	ldrb	r3, [r7, #15]
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	d004      	beq.n	8014a56 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8014a4c:	6839      	ldr	r1, [r7, #0]
 8014a4e:	6878      	ldr	r0, [r7, #4]
 8014a50:	f000 f944 	bl	8014cdc <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8014a54:	e065      	b.n	8014b22 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8014a56:	6878      	ldr	r0, [r7, #4]
 8014a58:	f000 f9ee 	bl	8014e38 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	2203      	movs	r2, #3
 8014a60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8014a64:	e05d      	b.n	8014b22 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8014a66:	6878      	ldr	r0, [r7, #4]
 8014a68:	f000 f9e6 	bl	8014e38 <USBD_CtlSendStatus>
    break;
 8014a6c:	e059      	b.n	8014b22 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8014a6e:	4b2f      	ldr	r3, [pc, #188]	; (8014b2c <USBD_SetConfig+0x144>)
 8014a70:	781b      	ldrb	r3, [r3, #0]
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d112      	bne.n	8014a9c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	2202      	movs	r2, #2
 8014a7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8014a7e:	4b2b      	ldr	r3, [pc, #172]	; (8014b2c <USBD_SetConfig+0x144>)
 8014a80:	781b      	ldrb	r3, [r3, #0]
 8014a82:	461a      	mov	r2, r3
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014a88:	4b28      	ldr	r3, [pc, #160]	; (8014b2c <USBD_SetConfig+0x144>)
 8014a8a:	781b      	ldrb	r3, [r3, #0]
 8014a8c:	4619      	mov	r1, r3
 8014a8e:	6878      	ldr	r0, [r7, #4]
 8014a90:	f7ff f99b 	bl	8013dca <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8014a94:	6878      	ldr	r0, [r7, #4]
 8014a96:	f000 f9cf 	bl	8014e38 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8014a9a:	e042      	b.n	8014b22 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8014a9c:	4b23      	ldr	r3, [pc, #140]	; (8014b2c <USBD_SetConfig+0x144>)
 8014a9e:	781b      	ldrb	r3, [r3, #0]
 8014aa0:	461a      	mov	r2, r3
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	685b      	ldr	r3, [r3, #4]
 8014aa6:	429a      	cmp	r2, r3
 8014aa8:	d02a      	beq.n	8014b00 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	685b      	ldr	r3, [r3, #4]
 8014aae:	b2db      	uxtb	r3, r3
 8014ab0:	4619      	mov	r1, r3
 8014ab2:	6878      	ldr	r0, [r7, #4]
 8014ab4:	f7ff f989 	bl	8013dca <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8014ab8:	4b1c      	ldr	r3, [pc, #112]	; (8014b2c <USBD_SetConfig+0x144>)
 8014aba:	781b      	ldrb	r3, [r3, #0]
 8014abc:	461a      	mov	r2, r3
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8014ac2:	4b1a      	ldr	r3, [pc, #104]	; (8014b2c <USBD_SetConfig+0x144>)
 8014ac4:	781b      	ldrb	r3, [r3, #0]
 8014ac6:	4619      	mov	r1, r3
 8014ac8:	6878      	ldr	r0, [r7, #4]
 8014aca:	f7ff f962 	bl	8013d92 <USBD_SetClassConfig>
 8014ace:	4603      	mov	r3, r0
 8014ad0:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8014ad2:	7bfb      	ldrb	r3, [r7, #15]
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d00f      	beq.n	8014af8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8014ad8:	6839      	ldr	r1, [r7, #0]
 8014ada:	6878      	ldr	r0, [r7, #4]
 8014adc:	f000 f8fe 	bl	8014cdc <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	685b      	ldr	r3, [r3, #4]
 8014ae4:	b2db      	uxtb	r3, r3
 8014ae6:	4619      	mov	r1, r3
 8014ae8:	6878      	ldr	r0, [r7, #4]
 8014aea:	f7ff f96e 	bl	8013dca <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	2202      	movs	r2, #2
 8014af2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8014af6:	e014      	b.n	8014b22 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8014af8:	6878      	ldr	r0, [r7, #4]
 8014afa:	f000 f99d 	bl	8014e38 <USBD_CtlSendStatus>
    break;
 8014afe:	e010      	b.n	8014b22 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8014b00:	6878      	ldr	r0, [r7, #4]
 8014b02:	f000 f999 	bl	8014e38 <USBD_CtlSendStatus>
    break;
 8014b06:	e00c      	b.n	8014b22 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8014b08:	6839      	ldr	r1, [r7, #0]
 8014b0a:	6878      	ldr	r0, [r7, #4]
 8014b0c:	f000 f8e6 	bl	8014cdc <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014b10:	4b06      	ldr	r3, [pc, #24]	; (8014b2c <USBD_SetConfig+0x144>)
 8014b12:	781b      	ldrb	r3, [r3, #0]
 8014b14:	4619      	mov	r1, r3
 8014b16:	6878      	ldr	r0, [r7, #4]
 8014b18:	f7ff f957 	bl	8013dca <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8014b1c:	2303      	movs	r3, #3
 8014b1e:	73fb      	strb	r3, [r7, #15]
    break;
 8014b20:	bf00      	nop
  }

  return ret;
 8014b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b24:	4618      	mov	r0, r3
 8014b26:	3710      	adds	r7, #16
 8014b28:	46bd      	mov	sp, r7
 8014b2a:	bd80      	pop	{r7, pc}
 8014b2c:	24000364 	.word	0x24000364

08014b30 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014b30:	b580      	push	{r7, lr}
 8014b32:	b082      	sub	sp, #8
 8014b34:	af00      	add	r7, sp, #0
 8014b36:	6078      	str	r0, [r7, #4]
 8014b38:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8014b3a:	683b      	ldr	r3, [r7, #0]
 8014b3c:	88db      	ldrh	r3, [r3, #6]
 8014b3e:	2b01      	cmp	r3, #1
 8014b40:	d004      	beq.n	8014b4c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014b42:	6839      	ldr	r1, [r7, #0]
 8014b44:	6878      	ldr	r0, [r7, #4]
 8014b46:	f000 f8c9 	bl	8014cdc <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8014b4a:	e021      	b.n	8014b90 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014b52:	2b01      	cmp	r3, #1
 8014b54:	db17      	blt.n	8014b86 <USBD_GetConfig+0x56>
 8014b56:	2b02      	cmp	r3, #2
 8014b58:	dd02      	ble.n	8014b60 <USBD_GetConfig+0x30>
 8014b5a:	2b03      	cmp	r3, #3
 8014b5c:	d00b      	beq.n	8014b76 <USBD_GetConfig+0x46>
 8014b5e:	e012      	b.n	8014b86 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	2200      	movs	r2, #0
 8014b64:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	3308      	adds	r3, #8
 8014b6a:	2201      	movs	r2, #1
 8014b6c:	4619      	mov	r1, r3
 8014b6e:	6878      	ldr	r0, [r7, #4]
 8014b70:	f000 f925 	bl	8014dbe <USBD_CtlSendData>
      break;
 8014b74:	e00c      	b.n	8014b90 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	3304      	adds	r3, #4
 8014b7a:	2201      	movs	r2, #1
 8014b7c:	4619      	mov	r1, r3
 8014b7e:	6878      	ldr	r0, [r7, #4]
 8014b80:	f000 f91d 	bl	8014dbe <USBD_CtlSendData>
      break;
 8014b84:	e004      	b.n	8014b90 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8014b86:	6839      	ldr	r1, [r7, #0]
 8014b88:	6878      	ldr	r0, [r7, #4]
 8014b8a:	f000 f8a7 	bl	8014cdc <USBD_CtlError>
      break;
 8014b8e:	bf00      	nop
}
 8014b90:	bf00      	nop
 8014b92:	3708      	adds	r7, #8
 8014b94:	46bd      	mov	sp, r7
 8014b96:	bd80      	pop	{r7, pc}

08014b98 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014b98:	b580      	push	{r7, lr}
 8014b9a:	b082      	sub	sp, #8
 8014b9c:	af00      	add	r7, sp, #0
 8014b9e:	6078      	str	r0, [r7, #4]
 8014ba0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014ba8:	3b01      	subs	r3, #1
 8014baa:	2b02      	cmp	r3, #2
 8014bac:	d81e      	bhi.n	8014bec <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8014bae:	683b      	ldr	r3, [r7, #0]
 8014bb0:	88db      	ldrh	r3, [r3, #6]
 8014bb2:	2b02      	cmp	r3, #2
 8014bb4:	d004      	beq.n	8014bc0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8014bb6:	6839      	ldr	r1, [r7, #0]
 8014bb8:	6878      	ldr	r0, [r7, #4]
 8014bba:	f000 f88f 	bl	8014cdc <USBD_CtlError>
      break;
 8014bbe:	e01a      	b.n	8014bf6 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	2201      	movs	r2, #1
 8014bc4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d005      	beq.n	8014bdc <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	68db      	ldr	r3, [r3, #12]
 8014bd4:	f043 0202 	orr.w	r2, r3, #2
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	330c      	adds	r3, #12
 8014be0:	2202      	movs	r2, #2
 8014be2:	4619      	mov	r1, r3
 8014be4:	6878      	ldr	r0, [r7, #4]
 8014be6:	f000 f8ea 	bl	8014dbe <USBD_CtlSendData>
    break;
 8014bea:	e004      	b.n	8014bf6 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8014bec:	6839      	ldr	r1, [r7, #0]
 8014bee:	6878      	ldr	r0, [r7, #4]
 8014bf0:	f000 f874 	bl	8014cdc <USBD_CtlError>
    break;
 8014bf4:	bf00      	nop
  }
}
 8014bf6:	bf00      	nop
 8014bf8:	3708      	adds	r7, #8
 8014bfa:	46bd      	mov	sp, r7
 8014bfc:	bd80      	pop	{r7, pc}

08014bfe <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014bfe:	b580      	push	{r7, lr}
 8014c00:	b082      	sub	sp, #8
 8014c02:	af00      	add	r7, sp, #0
 8014c04:	6078      	str	r0, [r7, #4]
 8014c06:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014c08:	683b      	ldr	r3, [r7, #0]
 8014c0a:	885b      	ldrh	r3, [r3, #2]
 8014c0c:	2b01      	cmp	r3, #1
 8014c0e:	d106      	bne.n	8014c1e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	2201      	movs	r2, #1
 8014c14:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8014c18:	6878      	ldr	r0, [r7, #4]
 8014c1a:	f000 f90d 	bl	8014e38 <USBD_CtlSendStatus>
  }
}
 8014c1e:	bf00      	nop
 8014c20:	3708      	adds	r7, #8
 8014c22:	46bd      	mov	sp, r7
 8014c24:	bd80      	pop	{r7, pc}

08014c26 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014c26:	b580      	push	{r7, lr}
 8014c28:	b082      	sub	sp, #8
 8014c2a:	af00      	add	r7, sp, #0
 8014c2c:	6078      	str	r0, [r7, #4]
 8014c2e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014c36:	3b01      	subs	r3, #1
 8014c38:	2b02      	cmp	r3, #2
 8014c3a:	d80b      	bhi.n	8014c54 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014c3c:	683b      	ldr	r3, [r7, #0]
 8014c3e:	885b      	ldrh	r3, [r3, #2]
 8014c40:	2b01      	cmp	r3, #1
 8014c42:	d10c      	bne.n	8014c5e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	2200      	movs	r2, #0
 8014c48:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014c4c:	6878      	ldr	r0, [r7, #4]
 8014c4e:	f000 f8f3 	bl	8014e38 <USBD_CtlSendStatus>
      }
      break;
 8014c52:	e004      	b.n	8014c5e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8014c54:	6839      	ldr	r1, [r7, #0]
 8014c56:	6878      	ldr	r0, [r7, #4]
 8014c58:	f000 f840 	bl	8014cdc <USBD_CtlError>
      break;
 8014c5c:	e000      	b.n	8014c60 <USBD_ClrFeature+0x3a>
      break;
 8014c5e:	bf00      	nop
  }
}
 8014c60:	bf00      	nop
 8014c62:	3708      	adds	r7, #8
 8014c64:	46bd      	mov	sp, r7
 8014c66:	bd80      	pop	{r7, pc}

08014c68 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8014c68:	b580      	push	{r7, lr}
 8014c6a:	b084      	sub	sp, #16
 8014c6c:	af00      	add	r7, sp, #0
 8014c6e:	6078      	str	r0, [r7, #4]
 8014c70:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014c72:	683b      	ldr	r3, [r7, #0]
 8014c74:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	781a      	ldrb	r2, [r3, #0]
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014c7e:	68fb      	ldr	r3, [r7, #12]
 8014c80:	3301      	adds	r3, #1
 8014c82:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8014c84:	68fb      	ldr	r3, [r7, #12]
 8014c86:	781a      	ldrb	r2, [r3, #0]
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014c8c:	68fb      	ldr	r3, [r7, #12]
 8014c8e:	3301      	adds	r3, #1
 8014c90:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014c92:	68f8      	ldr	r0, [r7, #12]
 8014c94:	f7ff fad4 	bl	8014240 <SWAPBYTE>
 8014c98:	4603      	mov	r3, r0
 8014c9a:	461a      	mov	r2, r3
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014ca0:	68fb      	ldr	r3, [r7, #12]
 8014ca2:	3301      	adds	r3, #1
 8014ca4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	3301      	adds	r3, #1
 8014caa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8014cac:	68f8      	ldr	r0, [r7, #12]
 8014cae:	f7ff fac7 	bl	8014240 <SWAPBYTE>
 8014cb2:	4603      	mov	r3, r0
 8014cb4:	461a      	mov	r2, r3
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	3301      	adds	r3, #1
 8014cbe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	3301      	adds	r3, #1
 8014cc4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014cc6:	68f8      	ldr	r0, [r7, #12]
 8014cc8:	f7ff faba 	bl	8014240 <SWAPBYTE>
 8014ccc:	4603      	mov	r3, r0
 8014cce:	461a      	mov	r2, r3
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	80da      	strh	r2, [r3, #6]
}
 8014cd4:	bf00      	nop
 8014cd6:	3710      	adds	r7, #16
 8014cd8:	46bd      	mov	sp, r7
 8014cda:	bd80      	pop	{r7, pc}

08014cdc <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014cdc:	b580      	push	{r7, lr}
 8014cde:	b082      	sub	sp, #8
 8014ce0:	af00      	add	r7, sp, #0
 8014ce2:	6078      	str	r0, [r7, #4]
 8014ce4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014ce6:	2180      	movs	r1, #128	; 0x80
 8014ce8:	6878      	ldr	r0, [r7, #4]
 8014cea:	f002 ffb0 	bl	8017c4e <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014cee:	2100      	movs	r1, #0
 8014cf0:	6878      	ldr	r0, [r7, #4]
 8014cf2:	f002 ffac 	bl	8017c4e <USBD_LL_StallEP>
}
 8014cf6:	bf00      	nop
 8014cf8:	3708      	adds	r7, #8
 8014cfa:	46bd      	mov	sp, r7
 8014cfc:	bd80      	pop	{r7, pc}

08014cfe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014cfe:	b580      	push	{r7, lr}
 8014d00:	b086      	sub	sp, #24
 8014d02:	af00      	add	r7, sp, #0
 8014d04:	60f8      	str	r0, [r7, #12]
 8014d06:	60b9      	str	r1, [r7, #8]
 8014d08:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014d0a:	2300      	movs	r3, #0
 8014d0c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8014d0e:	68fb      	ldr	r3, [r7, #12]
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d036      	beq.n	8014d82 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8014d18:	6938      	ldr	r0, [r7, #16]
 8014d1a:	f000 f836 	bl	8014d8a <USBD_GetLen>
 8014d1e:	4603      	mov	r3, r0
 8014d20:	3301      	adds	r3, #1
 8014d22:	b29b      	uxth	r3, r3
 8014d24:	005b      	lsls	r3, r3, #1
 8014d26:	b29a      	uxth	r2, r3
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014d2c:	7dfb      	ldrb	r3, [r7, #23]
 8014d2e:	68ba      	ldr	r2, [r7, #8]
 8014d30:	4413      	add	r3, r2
 8014d32:	687a      	ldr	r2, [r7, #4]
 8014d34:	7812      	ldrb	r2, [r2, #0]
 8014d36:	701a      	strb	r2, [r3, #0]
  idx++;
 8014d38:	7dfb      	ldrb	r3, [r7, #23]
 8014d3a:	3301      	adds	r3, #1
 8014d3c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014d3e:	7dfb      	ldrb	r3, [r7, #23]
 8014d40:	68ba      	ldr	r2, [r7, #8]
 8014d42:	4413      	add	r3, r2
 8014d44:	2203      	movs	r2, #3
 8014d46:	701a      	strb	r2, [r3, #0]
  idx++;
 8014d48:	7dfb      	ldrb	r3, [r7, #23]
 8014d4a:	3301      	adds	r3, #1
 8014d4c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014d4e:	e013      	b.n	8014d78 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8014d50:	7dfb      	ldrb	r3, [r7, #23]
 8014d52:	68ba      	ldr	r2, [r7, #8]
 8014d54:	4413      	add	r3, r2
 8014d56:	693a      	ldr	r2, [r7, #16]
 8014d58:	7812      	ldrb	r2, [r2, #0]
 8014d5a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8014d5c:	693b      	ldr	r3, [r7, #16]
 8014d5e:	3301      	adds	r3, #1
 8014d60:	613b      	str	r3, [r7, #16]
    idx++;
 8014d62:	7dfb      	ldrb	r3, [r7, #23]
 8014d64:	3301      	adds	r3, #1
 8014d66:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8014d68:	7dfb      	ldrb	r3, [r7, #23]
 8014d6a:	68ba      	ldr	r2, [r7, #8]
 8014d6c:	4413      	add	r3, r2
 8014d6e:	2200      	movs	r2, #0
 8014d70:	701a      	strb	r2, [r3, #0]
    idx++;
 8014d72:	7dfb      	ldrb	r3, [r7, #23]
 8014d74:	3301      	adds	r3, #1
 8014d76:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8014d78:	693b      	ldr	r3, [r7, #16]
 8014d7a:	781b      	ldrb	r3, [r3, #0]
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	d1e7      	bne.n	8014d50 <USBD_GetString+0x52>
 8014d80:	e000      	b.n	8014d84 <USBD_GetString+0x86>
    return;
 8014d82:	bf00      	nop
  }
}
 8014d84:	3718      	adds	r7, #24
 8014d86:	46bd      	mov	sp, r7
 8014d88:	bd80      	pop	{r7, pc}

08014d8a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014d8a:	b480      	push	{r7}
 8014d8c:	b085      	sub	sp, #20
 8014d8e:	af00      	add	r7, sp, #0
 8014d90:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014d92:	2300      	movs	r3, #0
 8014d94:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8014d9a:	e005      	b.n	8014da8 <USBD_GetLen+0x1e>
  {
    len++;
 8014d9c:	7bfb      	ldrb	r3, [r7, #15]
 8014d9e:	3301      	adds	r3, #1
 8014da0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8014da2:	68bb      	ldr	r3, [r7, #8]
 8014da4:	3301      	adds	r3, #1
 8014da6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8014da8:	68bb      	ldr	r3, [r7, #8]
 8014daa:	781b      	ldrb	r3, [r3, #0]
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d1f5      	bne.n	8014d9c <USBD_GetLen+0x12>
  }

  return len;
 8014db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8014db2:	4618      	mov	r0, r3
 8014db4:	3714      	adds	r7, #20
 8014db6:	46bd      	mov	sp, r7
 8014db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dbc:	4770      	bx	lr

08014dbe <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014dbe:	b580      	push	{r7, lr}
 8014dc0:	b084      	sub	sp, #16
 8014dc2:	af00      	add	r7, sp, #0
 8014dc4:	60f8      	str	r0, [r7, #12]
 8014dc6:	60b9      	str	r1, [r7, #8]
 8014dc8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	2202      	movs	r2, #2
 8014dce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	687a      	ldr	r2, [r7, #4]
 8014dd6:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	687a      	ldr	r2, [r7, #4]
 8014ddc:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	68ba      	ldr	r2, [r7, #8]
 8014de2:	2100      	movs	r1, #0
 8014de4:	68f8      	ldr	r0, [r7, #12]
 8014de6:	f002 ffbb 	bl	8017d60 <USBD_LL_Transmit>

  return USBD_OK;
 8014dea:	2300      	movs	r3, #0
}
 8014dec:	4618      	mov	r0, r3
 8014dee:	3710      	adds	r7, #16
 8014df0:	46bd      	mov	sp, r7
 8014df2:	bd80      	pop	{r7, pc}

08014df4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8014df4:	b580      	push	{r7, lr}
 8014df6:	b084      	sub	sp, #16
 8014df8:	af00      	add	r7, sp, #0
 8014dfa:	60f8      	str	r0, [r7, #12]
 8014dfc:	60b9      	str	r1, [r7, #8]
 8014dfe:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	68ba      	ldr	r2, [r7, #8]
 8014e04:	2100      	movs	r1, #0
 8014e06:	68f8      	ldr	r0, [r7, #12]
 8014e08:	f002 ffaa 	bl	8017d60 <USBD_LL_Transmit>

  return USBD_OK;
 8014e0c:	2300      	movs	r3, #0
}
 8014e0e:	4618      	mov	r0, r3
 8014e10:	3710      	adds	r7, #16
 8014e12:	46bd      	mov	sp, r7
 8014e14:	bd80      	pop	{r7, pc}

08014e16 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8014e16:	b580      	push	{r7, lr}
 8014e18:	b084      	sub	sp, #16
 8014e1a:	af00      	add	r7, sp, #0
 8014e1c:	60f8      	str	r0, [r7, #12]
 8014e1e:	60b9      	str	r1, [r7, #8]
 8014e20:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	68ba      	ldr	r2, [r7, #8]
 8014e26:	2100      	movs	r1, #0
 8014e28:	68f8      	ldr	r0, [r7, #12]
 8014e2a:	f002 ffba 	bl	8017da2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014e2e:	2300      	movs	r3, #0
}
 8014e30:	4618      	mov	r0, r3
 8014e32:	3710      	adds	r7, #16
 8014e34:	46bd      	mov	sp, r7
 8014e36:	bd80      	pop	{r7, pc}

08014e38 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014e38:	b580      	push	{r7, lr}
 8014e3a:	b082      	sub	sp, #8
 8014e3c:	af00      	add	r7, sp, #0
 8014e3e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	2204      	movs	r2, #4
 8014e44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014e48:	2300      	movs	r3, #0
 8014e4a:	2200      	movs	r2, #0
 8014e4c:	2100      	movs	r1, #0
 8014e4e:	6878      	ldr	r0, [r7, #4]
 8014e50:	f002 ff86 	bl	8017d60 <USBD_LL_Transmit>

  return USBD_OK;
 8014e54:	2300      	movs	r3, #0
}
 8014e56:	4618      	mov	r0, r3
 8014e58:	3708      	adds	r7, #8
 8014e5a:	46bd      	mov	sp, r7
 8014e5c:	bd80      	pop	{r7, pc}

08014e5e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014e5e:	b580      	push	{r7, lr}
 8014e60:	b082      	sub	sp, #8
 8014e62:	af00      	add	r7, sp, #0
 8014e64:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	2205      	movs	r2, #5
 8014e6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014e6e:	2300      	movs	r3, #0
 8014e70:	2200      	movs	r2, #0
 8014e72:	2100      	movs	r1, #0
 8014e74:	6878      	ldr	r0, [r7, #4]
 8014e76:	f002 ff94 	bl	8017da2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014e7a:	2300      	movs	r3, #0
}
 8014e7c:	4618      	mov	r0, r3
 8014e7e:	3708      	adds	r7, #8
 8014e80:	46bd      	mov	sp, r7
 8014e82:	bd80      	pop	{r7, pc}

08014e84 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8014e84:	b580      	push	{r7, lr}
 8014e86:	b084      	sub	sp, #16
 8014e88:	af00      	add	r7, sp, #0
 8014e8a:	4603      	mov	r3, r0
 8014e8c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8014e8e:	79fb      	ldrb	r3, [r7, #7]
 8014e90:	4a08      	ldr	r2, [pc, #32]	; (8014eb4 <disk_status+0x30>)
 8014e92:	009b      	lsls	r3, r3, #2
 8014e94:	4413      	add	r3, r2
 8014e96:	685b      	ldr	r3, [r3, #4]
 8014e98:	685b      	ldr	r3, [r3, #4]
 8014e9a:	79fa      	ldrb	r2, [r7, #7]
 8014e9c:	4905      	ldr	r1, [pc, #20]	; (8014eb4 <disk_status+0x30>)
 8014e9e:	440a      	add	r2, r1
 8014ea0:	7a12      	ldrb	r2, [r2, #8]
 8014ea2:	4610      	mov	r0, r2
 8014ea4:	4798      	blx	r3
 8014ea6:	4603      	mov	r3, r0
 8014ea8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8014eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8014eac:	4618      	mov	r0, r3
 8014eae:	3710      	adds	r7, #16
 8014eb0:	46bd      	mov	sp, r7
 8014eb2:	bd80      	pop	{r7, pc}
 8014eb4:	24000390 	.word	0x24000390

08014eb8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8014eb8:	b580      	push	{r7, lr}
 8014eba:	b084      	sub	sp, #16
 8014ebc:	af00      	add	r7, sp, #0
 8014ebe:	4603      	mov	r3, r0
 8014ec0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8014ec2:	2300      	movs	r3, #0
 8014ec4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8014ec6:	79fb      	ldrb	r3, [r7, #7]
 8014ec8:	4a0d      	ldr	r2, [pc, #52]	; (8014f00 <disk_initialize+0x48>)
 8014eca:	5cd3      	ldrb	r3, [r2, r3]
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d111      	bne.n	8014ef4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8014ed0:	79fb      	ldrb	r3, [r7, #7]
 8014ed2:	4a0b      	ldr	r2, [pc, #44]	; (8014f00 <disk_initialize+0x48>)
 8014ed4:	2101      	movs	r1, #1
 8014ed6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8014ed8:	79fb      	ldrb	r3, [r7, #7]
 8014eda:	4a09      	ldr	r2, [pc, #36]	; (8014f00 <disk_initialize+0x48>)
 8014edc:	009b      	lsls	r3, r3, #2
 8014ede:	4413      	add	r3, r2
 8014ee0:	685b      	ldr	r3, [r3, #4]
 8014ee2:	681b      	ldr	r3, [r3, #0]
 8014ee4:	79fa      	ldrb	r2, [r7, #7]
 8014ee6:	4906      	ldr	r1, [pc, #24]	; (8014f00 <disk_initialize+0x48>)
 8014ee8:	440a      	add	r2, r1
 8014eea:	7a12      	ldrb	r2, [r2, #8]
 8014eec:	4610      	mov	r0, r2
 8014eee:	4798      	blx	r3
 8014ef0:	4603      	mov	r3, r0
 8014ef2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8014ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ef6:	4618      	mov	r0, r3
 8014ef8:	3710      	adds	r7, #16
 8014efa:	46bd      	mov	sp, r7
 8014efc:	bd80      	pop	{r7, pc}
 8014efe:	bf00      	nop
 8014f00:	24000390 	.word	0x24000390

08014f04 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8014f04:	b590      	push	{r4, r7, lr}
 8014f06:	b087      	sub	sp, #28
 8014f08:	af00      	add	r7, sp, #0
 8014f0a:	60b9      	str	r1, [r7, #8]
 8014f0c:	607a      	str	r2, [r7, #4]
 8014f0e:	603b      	str	r3, [r7, #0]
 8014f10:	4603      	mov	r3, r0
 8014f12:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8014f14:	7bfb      	ldrb	r3, [r7, #15]
 8014f16:	4a0a      	ldr	r2, [pc, #40]	; (8014f40 <disk_read+0x3c>)
 8014f18:	009b      	lsls	r3, r3, #2
 8014f1a:	4413      	add	r3, r2
 8014f1c:	685b      	ldr	r3, [r3, #4]
 8014f1e:	689c      	ldr	r4, [r3, #8]
 8014f20:	7bfb      	ldrb	r3, [r7, #15]
 8014f22:	4a07      	ldr	r2, [pc, #28]	; (8014f40 <disk_read+0x3c>)
 8014f24:	4413      	add	r3, r2
 8014f26:	7a18      	ldrb	r0, [r3, #8]
 8014f28:	683b      	ldr	r3, [r7, #0]
 8014f2a:	687a      	ldr	r2, [r7, #4]
 8014f2c:	68b9      	ldr	r1, [r7, #8]
 8014f2e:	47a0      	blx	r4
 8014f30:	4603      	mov	r3, r0
 8014f32:	75fb      	strb	r3, [r7, #23]
  return res;
 8014f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8014f36:	4618      	mov	r0, r3
 8014f38:	371c      	adds	r7, #28
 8014f3a:	46bd      	mov	sp, r7
 8014f3c:	bd90      	pop	{r4, r7, pc}
 8014f3e:	bf00      	nop
 8014f40:	24000390 	.word	0x24000390

08014f44 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8014f44:	b590      	push	{r4, r7, lr}
 8014f46:	b087      	sub	sp, #28
 8014f48:	af00      	add	r7, sp, #0
 8014f4a:	60b9      	str	r1, [r7, #8]
 8014f4c:	607a      	str	r2, [r7, #4]
 8014f4e:	603b      	str	r3, [r7, #0]
 8014f50:	4603      	mov	r3, r0
 8014f52:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8014f54:	7bfb      	ldrb	r3, [r7, #15]
 8014f56:	4a0a      	ldr	r2, [pc, #40]	; (8014f80 <disk_write+0x3c>)
 8014f58:	009b      	lsls	r3, r3, #2
 8014f5a:	4413      	add	r3, r2
 8014f5c:	685b      	ldr	r3, [r3, #4]
 8014f5e:	68dc      	ldr	r4, [r3, #12]
 8014f60:	7bfb      	ldrb	r3, [r7, #15]
 8014f62:	4a07      	ldr	r2, [pc, #28]	; (8014f80 <disk_write+0x3c>)
 8014f64:	4413      	add	r3, r2
 8014f66:	7a18      	ldrb	r0, [r3, #8]
 8014f68:	683b      	ldr	r3, [r7, #0]
 8014f6a:	687a      	ldr	r2, [r7, #4]
 8014f6c:	68b9      	ldr	r1, [r7, #8]
 8014f6e:	47a0      	blx	r4
 8014f70:	4603      	mov	r3, r0
 8014f72:	75fb      	strb	r3, [r7, #23]
  return res;
 8014f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8014f76:	4618      	mov	r0, r3
 8014f78:	371c      	adds	r7, #28
 8014f7a:	46bd      	mov	sp, r7
 8014f7c:	bd90      	pop	{r4, r7, pc}
 8014f7e:	bf00      	nop
 8014f80:	24000390 	.word	0x24000390

08014f84 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8014f84:	b580      	push	{r7, lr}
 8014f86:	b084      	sub	sp, #16
 8014f88:	af00      	add	r7, sp, #0
 8014f8a:	4603      	mov	r3, r0
 8014f8c:	603a      	str	r2, [r7, #0]
 8014f8e:	71fb      	strb	r3, [r7, #7]
 8014f90:	460b      	mov	r3, r1
 8014f92:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8014f94:	79fb      	ldrb	r3, [r7, #7]
 8014f96:	4a09      	ldr	r2, [pc, #36]	; (8014fbc <disk_ioctl+0x38>)
 8014f98:	009b      	lsls	r3, r3, #2
 8014f9a:	4413      	add	r3, r2
 8014f9c:	685b      	ldr	r3, [r3, #4]
 8014f9e:	691b      	ldr	r3, [r3, #16]
 8014fa0:	79fa      	ldrb	r2, [r7, #7]
 8014fa2:	4906      	ldr	r1, [pc, #24]	; (8014fbc <disk_ioctl+0x38>)
 8014fa4:	440a      	add	r2, r1
 8014fa6:	7a10      	ldrb	r0, [r2, #8]
 8014fa8:	79b9      	ldrb	r1, [r7, #6]
 8014faa:	683a      	ldr	r2, [r7, #0]
 8014fac:	4798      	blx	r3
 8014fae:	4603      	mov	r3, r0
 8014fb0:	73fb      	strb	r3, [r7, #15]
  return res;
 8014fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8014fb4:	4618      	mov	r0, r3
 8014fb6:	3710      	adds	r7, #16
 8014fb8:	46bd      	mov	sp, r7
 8014fba:	bd80      	pop	{r7, pc}
 8014fbc:	24000390 	.word	0x24000390

08014fc0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8014fc0:	b480      	push	{r7}
 8014fc2:	b085      	sub	sp, #20
 8014fc4:	af00      	add	r7, sp, #0
 8014fc6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	3301      	adds	r3, #1
 8014fcc:	781b      	ldrb	r3, [r3, #0]
 8014fce:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8014fd0:	89fb      	ldrh	r3, [r7, #14]
 8014fd2:	021b      	lsls	r3, r3, #8
 8014fd4:	b21a      	sxth	r2, r3
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	781b      	ldrb	r3, [r3, #0]
 8014fda:	b21b      	sxth	r3, r3
 8014fdc:	4313      	orrs	r3, r2
 8014fde:	b21b      	sxth	r3, r3
 8014fe0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8014fe2:	89fb      	ldrh	r3, [r7, #14]
}
 8014fe4:	4618      	mov	r0, r3
 8014fe6:	3714      	adds	r7, #20
 8014fe8:	46bd      	mov	sp, r7
 8014fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fee:	4770      	bx	lr

08014ff0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8014ff0:	b480      	push	{r7}
 8014ff2:	b085      	sub	sp, #20
 8014ff4:	af00      	add	r7, sp, #0
 8014ff6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	3303      	adds	r3, #3
 8014ffc:	781b      	ldrb	r3, [r3, #0]
 8014ffe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8015000:	68fb      	ldr	r3, [r7, #12]
 8015002:	021b      	lsls	r3, r3, #8
 8015004:	687a      	ldr	r2, [r7, #4]
 8015006:	3202      	adds	r2, #2
 8015008:	7812      	ldrb	r2, [r2, #0]
 801500a:	4313      	orrs	r3, r2
 801500c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	021b      	lsls	r3, r3, #8
 8015012:	687a      	ldr	r2, [r7, #4]
 8015014:	3201      	adds	r2, #1
 8015016:	7812      	ldrb	r2, [r2, #0]
 8015018:	4313      	orrs	r3, r2
 801501a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	021b      	lsls	r3, r3, #8
 8015020:	687a      	ldr	r2, [r7, #4]
 8015022:	7812      	ldrb	r2, [r2, #0]
 8015024:	4313      	orrs	r3, r2
 8015026:	60fb      	str	r3, [r7, #12]
	return rv;
 8015028:	68fb      	ldr	r3, [r7, #12]
}
 801502a:	4618      	mov	r0, r3
 801502c:	3714      	adds	r7, #20
 801502e:	46bd      	mov	sp, r7
 8015030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015034:	4770      	bx	lr

08015036 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8015036:	b480      	push	{r7}
 8015038:	b083      	sub	sp, #12
 801503a:	af00      	add	r7, sp, #0
 801503c:	6078      	str	r0, [r7, #4]
 801503e:	460b      	mov	r3, r1
 8015040:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	1c5a      	adds	r2, r3, #1
 8015046:	607a      	str	r2, [r7, #4]
 8015048:	887a      	ldrh	r2, [r7, #2]
 801504a:	b2d2      	uxtb	r2, r2
 801504c:	701a      	strb	r2, [r3, #0]
 801504e:	887b      	ldrh	r3, [r7, #2]
 8015050:	0a1b      	lsrs	r3, r3, #8
 8015052:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	1c5a      	adds	r2, r3, #1
 8015058:	607a      	str	r2, [r7, #4]
 801505a:	887a      	ldrh	r2, [r7, #2]
 801505c:	b2d2      	uxtb	r2, r2
 801505e:	701a      	strb	r2, [r3, #0]
}
 8015060:	bf00      	nop
 8015062:	370c      	adds	r7, #12
 8015064:	46bd      	mov	sp, r7
 8015066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801506a:	4770      	bx	lr

0801506c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801506c:	b480      	push	{r7}
 801506e:	b083      	sub	sp, #12
 8015070:	af00      	add	r7, sp, #0
 8015072:	6078      	str	r0, [r7, #4]
 8015074:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	1c5a      	adds	r2, r3, #1
 801507a:	607a      	str	r2, [r7, #4]
 801507c:	683a      	ldr	r2, [r7, #0]
 801507e:	b2d2      	uxtb	r2, r2
 8015080:	701a      	strb	r2, [r3, #0]
 8015082:	683b      	ldr	r3, [r7, #0]
 8015084:	0a1b      	lsrs	r3, r3, #8
 8015086:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	1c5a      	adds	r2, r3, #1
 801508c:	607a      	str	r2, [r7, #4]
 801508e:	683a      	ldr	r2, [r7, #0]
 8015090:	b2d2      	uxtb	r2, r2
 8015092:	701a      	strb	r2, [r3, #0]
 8015094:	683b      	ldr	r3, [r7, #0]
 8015096:	0a1b      	lsrs	r3, r3, #8
 8015098:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	1c5a      	adds	r2, r3, #1
 801509e:	607a      	str	r2, [r7, #4]
 80150a0:	683a      	ldr	r2, [r7, #0]
 80150a2:	b2d2      	uxtb	r2, r2
 80150a4:	701a      	strb	r2, [r3, #0]
 80150a6:	683b      	ldr	r3, [r7, #0]
 80150a8:	0a1b      	lsrs	r3, r3, #8
 80150aa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	1c5a      	adds	r2, r3, #1
 80150b0:	607a      	str	r2, [r7, #4]
 80150b2:	683a      	ldr	r2, [r7, #0]
 80150b4:	b2d2      	uxtb	r2, r2
 80150b6:	701a      	strb	r2, [r3, #0]
}
 80150b8:	bf00      	nop
 80150ba:	370c      	adds	r7, #12
 80150bc:	46bd      	mov	sp, r7
 80150be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150c2:	4770      	bx	lr

080150c4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80150c4:	b480      	push	{r7}
 80150c6:	b087      	sub	sp, #28
 80150c8:	af00      	add	r7, sp, #0
 80150ca:	60f8      	str	r0, [r7, #12]
 80150cc:	60b9      	str	r1, [r7, #8]
 80150ce:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80150d0:	68fb      	ldr	r3, [r7, #12]
 80150d2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80150d4:	68bb      	ldr	r3, [r7, #8]
 80150d6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d00d      	beq.n	80150fa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80150de:	693a      	ldr	r2, [r7, #16]
 80150e0:	1c53      	adds	r3, r2, #1
 80150e2:	613b      	str	r3, [r7, #16]
 80150e4:	697b      	ldr	r3, [r7, #20]
 80150e6:	1c59      	adds	r1, r3, #1
 80150e8:	6179      	str	r1, [r7, #20]
 80150ea:	7812      	ldrb	r2, [r2, #0]
 80150ec:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	3b01      	subs	r3, #1
 80150f2:	607b      	str	r3, [r7, #4]
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d1f1      	bne.n	80150de <mem_cpy+0x1a>
	}
}
 80150fa:	bf00      	nop
 80150fc:	371c      	adds	r7, #28
 80150fe:	46bd      	mov	sp, r7
 8015100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015104:	4770      	bx	lr

08015106 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8015106:	b480      	push	{r7}
 8015108:	b087      	sub	sp, #28
 801510a:	af00      	add	r7, sp, #0
 801510c:	60f8      	str	r0, [r7, #12]
 801510e:	60b9      	str	r1, [r7, #8]
 8015110:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8015116:	697b      	ldr	r3, [r7, #20]
 8015118:	1c5a      	adds	r2, r3, #1
 801511a:	617a      	str	r2, [r7, #20]
 801511c:	68ba      	ldr	r2, [r7, #8]
 801511e:	b2d2      	uxtb	r2, r2
 8015120:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	3b01      	subs	r3, #1
 8015126:	607b      	str	r3, [r7, #4]
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	2b00      	cmp	r3, #0
 801512c:	d1f3      	bne.n	8015116 <mem_set+0x10>
}
 801512e:	bf00      	nop
 8015130:	371c      	adds	r7, #28
 8015132:	46bd      	mov	sp, r7
 8015134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015138:	4770      	bx	lr

0801513a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801513a:	b480      	push	{r7}
 801513c:	b089      	sub	sp, #36	; 0x24
 801513e:	af00      	add	r7, sp, #0
 8015140:	60f8      	str	r0, [r7, #12]
 8015142:	60b9      	str	r1, [r7, #8]
 8015144:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8015146:	68fb      	ldr	r3, [r7, #12]
 8015148:	61fb      	str	r3, [r7, #28]
 801514a:	68bb      	ldr	r3, [r7, #8]
 801514c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801514e:	2300      	movs	r3, #0
 8015150:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8015152:	69fb      	ldr	r3, [r7, #28]
 8015154:	1c5a      	adds	r2, r3, #1
 8015156:	61fa      	str	r2, [r7, #28]
 8015158:	781b      	ldrb	r3, [r3, #0]
 801515a:	4619      	mov	r1, r3
 801515c:	69bb      	ldr	r3, [r7, #24]
 801515e:	1c5a      	adds	r2, r3, #1
 8015160:	61ba      	str	r2, [r7, #24]
 8015162:	781b      	ldrb	r3, [r3, #0]
 8015164:	1acb      	subs	r3, r1, r3
 8015166:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	3b01      	subs	r3, #1
 801516c:	607b      	str	r3, [r7, #4]
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	2b00      	cmp	r3, #0
 8015172:	d002      	beq.n	801517a <mem_cmp+0x40>
 8015174:	697b      	ldr	r3, [r7, #20]
 8015176:	2b00      	cmp	r3, #0
 8015178:	d0eb      	beq.n	8015152 <mem_cmp+0x18>

	return r;
 801517a:	697b      	ldr	r3, [r7, #20]
}
 801517c:	4618      	mov	r0, r3
 801517e:	3724      	adds	r7, #36	; 0x24
 8015180:	46bd      	mov	sp, r7
 8015182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015186:	4770      	bx	lr

08015188 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8015188:	b480      	push	{r7}
 801518a:	b083      	sub	sp, #12
 801518c:	af00      	add	r7, sp, #0
 801518e:	6078      	str	r0, [r7, #4]
 8015190:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8015192:	e002      	b.n	801519a <chk_chr+0x12>
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	3301      	adds	r3, #1
 8015198:	607b      	str	r3, [r7, #4]
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	781b      	ldrb	r3, [r3, #0]
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d005      	beq.n	80151ae <chk_chr+0x26>
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	781b      	ldrb	r3, [r3, #0]
 80151a6:	461a      	mov	r2, r3
 80151a8:	683b      	ldr	r3, [r7, #0]
 80151aa:	4293      	cmp	r3, r2
 80151ac:	d1f2      	bne.n	8015194 <chk_chr+0xc>
	return *str;
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	781b      	ldrb	r3, [r3, #0]
}
 80151b2:	4618      	mov	r0, r3
 80151b4:	370c      	adds	r7, #12
 80151b6:	46bd      	mov	sp, r7
 80151b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151bc:	4770      	bx	lr
	...

080151c0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80151c0:	b480      	push	{r7}
 80151c2:	b085      	sub	sp, #20
 80151c4:	af00      	add	r7, sp, #0
 80151c6:	6078      	str	r0, [r7, #4]
 80151c8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80151ca:	2300      	movs	r3, #0
 80151cc:	60bb      	str	r3, [r7, #8]
 80151ce:	68bb      	ldr	r3, [r7, #8]
 80151d0:	60fb      	str	r3, [r7, #12]
 80151d2:	e029      	b.n	8015228 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80151d4:	4a27      	ldr	r2, [pc, #156]	; (8015274 <chk_lock+0xb4>)
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	011b      	lsls	r3, r3, #4
 80151da:	4413      	add	r3, r2
 80151dc:	681b      	ldr	r3, [r3, #0]
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d01d      	beq.n	801521e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80151e2:	4a24      	ldr	r2, [pc, #144]	; (8015274 <chk_lock+0xb4>)
 80151e4:	68fb      	ldr	r3, [r7, #12]
 80151e6:	011b      	lsls	r3, r3, #4
 80151e8:	4413      	add	r3, r2
 80151ea:	681a      	ldr	r2, [r3, #0]
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	681b      	ldr	r3, [r3, #0]
 80151f0:	429a      	cmp	r2, r3
 80151f2:	d116      	bne.n	8015222 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80151f4:	4a1f      	ldr	r2, [pc, #124]	; (8015274 <chk_lock+0xb4>)
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	011b      	lsls	r3, r3, #4
 80151fa:	4413      	add	r3, r2
 80151fc:	3304      	adds	r3, #4
 80151fe:	681a      	ldr	r2, [r3, #0]
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8015204:	429a      	cmp	r2, r3
 8015206:	d10c      	bne.n	8015222 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8015208:	4a1a      	ldr	r2, [pc, #104]	; (8015274 <chk_lock+0xb4>)
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	011b      	lsls	r3, r3, #4
 801520e:	4413      	add	r3, r2
 8015210:	3308      	adds	r3, #8
 8015212:	681a      	ldr	r2, [r3, #0]
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8015218:	429a      	cmp	r2, r3
 801521a:	d102      	bne.n	8015222 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801521c:	e007      	b.n	801522e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801521e:	2301      	movs	r3, #1
 8015220:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	3301      	adds	r3, #1
 8015226:	60fb      	str	r3, [r7, #12]
 8015228:	68fb      	ldr	r3, [r7, #12]
 801522a:	2b01      	cmp	r3, #1
 801522c:	d9d2      	bls.n	80151d4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801522e:	68fb      	ldr	r3, [r7, #12]
 8015230:	2b02      	cmp	r3, #2
 8015232:	d109      	bne.n	8015248 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8015234:	68bb      	ldr	r3, [r7, #8]
 8015236:	2b00      	cmp	r3, #0
 8015238:	d102      	bne.n	8015240 <chk_lock+0x80>
 801523a:	683b      	ldr	r3, [r7, #0]
 801523c:	2b02      	cmp	r3, #2
 801523e:	d101      	bne.n	8015244 <chk_lock+0x84>
 8015240:	2300      	movs	r3, #0
 8015242:	e010      	b.n	8015266 <chk_lock+0xa6>
 8015244:	2312      	movs	r3, #18
 8015246:	e00e      	b.n	8015266 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8015248:	683b      	ldr	r3, [r7, #0]
 801524a:	2b00      	cmp	r3, #0
 801524c:	d108      	bne.n	8015260 <chk_lock+0xa0>
 801524e:	4a09      	ldr	r2, [pc, #36]	; (8015274 <chk_lock+0xb4>)
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	011b      	lsls	r3, r3, #4
 8015254:	4413      	add	r3, r2
 8015256:	330c      	adds	r3, #12
 8015258:	881b      	ldrh	r3, [r3, #0]
 801525a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801525e:	d101      	bne.n	8015264 <chk_lock+0xa4>
 8015260:	2310      	movs	r3, #16
 8015262:	e000      	b.n	8015266 <chk_lock+0xa6>
 8015264:	2300      	movs	r3, #0
}
 8015266:	4618      	mov	r0, r3
 8015268:	3714      	adds	r7, #20
 801526a:	46bd      	mov	sp, r7
 801526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015270:	4770      	bx	lr
 8015272:	bf00      	nop
 8015274:	24000370 	.word	0x24000370

08015278 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8015278:	b480      	push	{r7}
 801527a:	b083      	sub	sp, #12
 801527c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801527e:	2300      	movs	r3, #0
 8015280:	607b      	str	r3, [r7, #4]
 8015282:	e002      	b.n	801528a <enq_lock+0x12>
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	3301      	adds	r3, #1
 8015288:	607b      	str	r3, [r7, #4]
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	2b01      	cmp	r3, #1
 801528e:	d806      	bhi.n	801529e <enq_lock+0x26>
 8015290:	4a09      	ldr	r2, [pc, #36]	; (80152b8 <enq_lock+0x40>)
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	011b      	lsls	r3, r3, #4
 8015296:	4413      	add	r3, r2
 8015298:	681b      	ldr	r3, [r3, #0]
 801529a:	2b00      	cmp	r3, #0
 801529c:	d1f2      	bne.n	8015284 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	2b02      	cmp	r3, #2
 80152a2:	bf14      	ite	ne
 80152a4:	2301      	movne	r3, #1
 80152a6:	2300      	moveq	r3, #0
 80152a8:	b2db      	uxtb	r3, r3
}
 80152aa:	4618      	mov	r0, r3
 80152ac:	370c      	adds	r7, #12
 80152ae:	46bd      	mov	sp, r7
 80152b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152b4:	4770      	bx	lr
 80152b6:	bf00      	nop
 80152b8:	24000370 	.word	0x24000370

080152bc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80152bc:	b480      	push	{r7}
 80152be:	b085      	sub	sp, #20
 80152c0:	af00      	add	r7, sp, #0
 80152c2:	6078      	str	r0, [r7, #4]
 80152c4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80152c6:	2300      	movs	r3, #0
 80152c8:	60fb      	str	r3, [r7, #12]
 80152ca:	e01f      	b.n	801530c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80152cc:	4a41      	ldr	r2, [pc, #260]	; (80153d4 <inc_lock+0x118>)
 80152ce:	68fb      	ldr	r3, [r7, #12]
 80152d0:	011b      	lsls	r3, r3, #4
 80152d2:	4413      	add	r3, r2
 80152d4:	681a      	ldr	r2, [r3, #0]
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	429a      	cmp	r2, r3
 80152dc:	d113      	bne.n	8015306 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80152de:	4a3d      	ldr	r2, [pc, #244]	; (80153d4 <inc_lock+0x118>)
 80152e0:	68fb      	ldr	r3, [r7, #12]
 80152e2:	011b      	lsls	r3, r3, #4
 80152e4:	4413      	add	r3, r2
 80152e6:	3304      	adds	r3, #4
 80152e8:	681a      	ldr	r2, [r3, #0]
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80152ee:	429a      	cmp	r2, r3
 80152f0:	d109      	bne.n	8015306 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80152f2:	4a38      	ldr	r2, [pc, #224]	; (80153d4 <inc_lock+0x118>)
 80152f4:	68fb      	ldr	r3, [r7, #12]
 80152f6:	011b      	lsls	r3, r3, #4
 80152f8:	4413      	add	r3, r2
 80152fa:	3308      	adds	r3, #8
 80152fc:	681a      	ldr	r2, [r3, #0]
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8015302:	429a      	cmp	r2, r3
 8015304:	d006      	beq.n	8015314 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8015306:	68fb      	ldr	r3, [r7, #12]
 8015308:	3301      	adds	r3, #1
 801530a:	60fb      	str	r3, [r7, #12]
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	2b01      	cmp	r3, #1
 8015310:	d9dc      	bls.n	80152cc <inc_lock+0x10>
 8015312:	e000      	b.n	8015316 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8015314:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8015316:	68fb      	ldr	r3, [r7, #12]
 8015318:	2b02      	cmp	r3, #2
 801531a:	d132      	bne.n	8015382 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801531c:	2300      	movs	r3, #0
 801531e:	60fb      	str	r3, [r7, #12]
 8015320:	e002      	b.n	8015328 <inc_lock+0x6c>
 8015322:	68fb      	ldr	r3, [r7, #12]
 8015324:	3301      	adds	r3, #1
 8015326:	60fb      	str	r3, [r7, #12]
 8015328:	68fb      	ldr	r3, [r7, #12]
 801532a:	2b01      	cmp	r3, #1
 801532c:	d806      	bhi.n	801533c <inc_lock+0x80>
 801532e:	4a29      	ldr	r2, [pc, #164]	; (80153d4 <inc_lock+0x118>)
 8015330:	68fb      	ldr	r3, [r7, #12]
 8015332:	011b      	lsls	r3, r3, #4
 8015334:	4413      	add	r3, r2
 8015336:	681b      	ldr	r3, [r3, #0]
 8015338:	2b00      	cmp	r3, #0
 801533a:	d1f2      	bne.n	8015322 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801533c:	68fb      	ldr	r3, [r7, #12]
 801533e:	2b02      	cmp	r3, #2
 8015340:	d101      	bne.n	8015346 <inc_lock+0x8a>
 8015342:	2300      	movs	r3, #0
 8015344:	e040      	b.n	80153c8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	681a      	ldr	r2, [r3, #0]
 801534a:	4922      	ldr	r1, [pc, #136]	; (80153d4 <inc_lock+0x118>)
 801534c:	68fb      	ldr	r3, [r7, #12]
 801534e:	011b      	lsls	r3, r3, #4
 8015350:	440b      	add	r3, r1
 8015352:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	689a      	ldr	r2, [r3, #8]
 8015358:	491e      	ldr	r1, [pc, #120]	; (80153d4 <inc_lock+0x118>)
 801535a:	68fb      	ldr	r3, [r7, #12]
 801535c:	011b      	lsls	r3, r3, #4
 801535e:	440b      	add	r3, r1
 8015360:	3304      	adds	r3, #4
 8015362:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	695a      	ldr	r2, [r3, #20]
 8015368:	491a      	ldr	r1, [pc, #104]	; (80153d4 <inc_lock+0x118>)
 801536a:	68fb      	ldr	r3, [r7, #12]
 801536c:	011b      	lsls	r3, r3, #4
 801536e:	440b      	add	r3, r1
 8015370:	3308      	adds	r3, #8
 8015372:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8015374:	4a17      	ldr	r2, [pc, #92]	; (80153d4 <inc_lock+0x118>)
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	011b      	lsls	r3, r3, #4
 801537a:	4413      	add	r3, r2
 801537c:	330c      	adds	r3, #12
 801537e:	2200      	movs	r2, #0
 8015380:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8015382:	683b      	ldr	r3, [r7, #0]
 8015384:	2b00      	cmp	r3, #0
 8015386:	d009      	beq.n	801539c <inc_lock+0xe0>
 8015388:	4a12      	ldr	r2, [pc, #72]	; (80153d4 <inc_lock+0x118>)
 801538a:	68fb      	ldr	r3, [r7, #12]
 801538c:	011b      	lsls	r3, r3, #4
 801538e:	4413      	add	r3, r2
 8015390:	330c      	adds	r3, #12
 8015392:	881b      	ldrh	r3, [r3, #0]
 8015394:	2b00      	cmp	r3, #0
 8015396:	d001      	beq.n	801539c <inc_lock+0xe0>
 8015398:	2300      	movs	r3, #0
 801539a:	e015      	b.n	80153c8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801539c:	683b      	ldr	r3, [r7, #0]
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d108      	bne.n	80153b4 <inc_lock+0xf8>
 80153a2:	4a0c      	ldr	r2, [pc, #48]	; (80153d4 <inc_lock+0x118>)
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	011b      	lsls	r3, r3, #4
 80153a8:	4413      	add	r3, r2
 80153aa:	330c      	adds	r3, #12
 80153ac:	881b      	ldrh	r3, [r3, #0]
 80153ae:	3301      	adds	r3, #1
 80153b0:	b29a      	uxth	r2, r3
 80153b2:	e001      	b.n	80153b8 <inc_lock+0xfc>
 80153b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80153b8:	4906      	ldr	r1, [pc, #24]	; (80153d4 <inc_lock+0x118>)
 80153ba:	68fb      	ldr	r3, [r7, #12]
 80153bc:	011b      	lsls	r3, r3, #4
 80153be:	440b      	add	r3, r1
 80153c0:	330c      	adds	r3, #12
 80153c2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	3301      	adds	r3, #1
}
 80153c8:	4618      	mov	r0, r3
 80153ca:	3714      	adds	r7, #20
 80153cc:	46bd      	mov	sp, r7
 80153ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153d2:	4770      	bx	lr
 80153d4:	24000370 	.word	0x24000370

080153d8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80153d8:	b480      	push	{r7}
 80153da:	b085      	sub	sp, #20
 80153dc:	af00      	add	r7, sp, #0
 80153de:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	3b01      	subs	r3, #1
 80153e4:	607b      	str	r3, [r7, #4]
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	2b01      	cmp	r3, #1
 80153ea:	d825      	bhi.n	8015438 <dec_lock+0x60>
		n = Files[i].ctr;
 80153ec:	4a17      	ldr	r2, [pc, #92]	; (801544c <dec_lock+0x74>)
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	011b      	lsls	r3, r3, #4
 80153f2:	4413      	add	r3, r2
 80153f4:	330c      	adds	r3, #12
 80153f6:	881b      	ldrh	r3, [r3, #0]
 80153f8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80153fa:	89fb      	ldrh	r3, [r7, #14]
 80153fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015400:	d101      	bne.n	8015406 <dec_lock+0x2e>
 8015402:	2300      	movs	r3, #0
 8015404:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8015406:	89fb      	ldrh	r3, [r7, #14]
 8015408:	2b00      	cmp	r3, #0
 801540a:	d002      	beq.n	8015412 <dec_lock+0x3a>
 801540c:	89fb      	ldrh	r3, [r7, #14]
 801540e:	3b01      	subs	r3, #1
 8015410:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8015412:	4a0e      	ldr	r2, [pc, #56]	; (801544c <dec_lock+0x74>)
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	011b      	lsls	r3, r3, #4
 8015418:	4413      	add	r3, r2
 801541a:	330c      	adds	r3, #12
 801541c:	89fa      	ldrh	r2, [r7, #14]
 801541e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8015420:	89fb      	ldrh	r3, [r7, #14]
 8015422:	2b00      	cmp	r3, #0
 8015424:	d105      	bne.n	8015432 <dec_lock+0x5a>
 8015426:	4a09      	ldr	r2, [pc, #36]	; (801544c <dec_lock+0x74>)
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	011b      	lsls	r3, r3, #4
 801542c:	4413      	add	r3, r2
 801542e:	2200      	movs	r2, #0
 8015430:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8015432:	2300      	movs	r3, #0
 8015434:	737b      	strb	r3, [r7, #13]
 8015436:	e001      	b.n	801543c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8015438:	2302      	movs	r3, #2
 801543a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801543c:	7b7b      	ldrb	r3, [r7, #13]
}
 801543e:	4618      	mov	r0, r3
 8015440:	3714      	adds	r7, #20
 8015442:	46bd      	mov	sp, r7
 8015444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015448:	4770      	bx	lr
 801544a:	bf00      	nop
 801544c:	24000370 	.word	0x24000370

08015450 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8015450:	b480      	push	{r7}
 8015452:	b085      	sub	sp, #20
 8015454:	af00      	add	r7, sp, #0
 8015456:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8015458:	2300      	movs	r3, #0
 801545a:	60fb      	str	r3, [r7, #12]
 801545c:	e010      	b.n	8015480 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801545e:	4a0d      	ldr	r2, [pc, #52]	; (8015494 <clear_lock+0x44>)
 8015460:	68fb      	ldr	r3, [r7, #12]
 8015462:	011b      	lsls	r3, r3, #4
 8015464:	4413      	add	r3, r2
 8015466:	681b      	ldr	r3, [r3, #0]
 8015468:	687a      	ldr	r2, [r7, #4]
 801546a:	429a      	cmp	r2, r3
 801546c:	d105      	bne.n	801547a <clear_lock+0x2a>
 801546e:	4a09      	ldr	r2, [pc, #36]	; (8015494 <clear_lock+0x44>)
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	011b      	lsls	r3, r3, #4
 8015474:	4413      	add	r3, r2
 8015476:	2200      	movs	r2, #0
 8015478:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801547a:	68fb      	ldr	r3, [r7, #12]
 801547c:	3301      	adds	r3, #1
 801547e:	60fb      	str	r3, [r7, #12]
 8015480:	68fb      	ldr	r3, [r7, #12]
 8015482:	2b01      	cmp	r3, #1
 8015484:	d9eb      	bls.n	801545e <clear_lock+0xe>
	}
}
 8015486:	bf00      	nop
 8015488:	3714      	adds	r7, #20
 801548a:	46bd      	mov	sp, r7
 801548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015490:	4770      	bx	lr
 8015492:	bf00      	nop
 8015494:	24000370 	.word	0x24000370

08015498 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8015498:	b580      	push	{r7, lr}
 801549a:	b086      	sub	sp, #24
 801549c:	af00      	add	r7, sp, #0
 801549e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80154a0:	2300      	movs	r3, #0
 80154a2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	78db      	ldrb	r3, [r3, #3]
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	d034      	beq.n	8015516 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154b0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	7858      	ldrb	r0, [r3, #1]
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80154bc:	2301      	movs	r3, #1
 80154be:	697a      	ldr	r2, [r7, #20]
 80154c0:	f7ff fd40 	bl	8014f44 <disk_write>
 80154c4:	4603      	mov	r3, r0
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d002      	beq.n	80154d0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80154ca:	2301      	movs	r3, #1
 80154cc:	73fb      	strb	r3, [r7, #15]
 80154ce:	e022      	b.n	8015516 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	2200      	movs	r2, #0
 80154d4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	6a1b      	ldr	r3, [r3, #32]
 80154da:	697a      	ldr	r2, [r7, #20]
 80154dc:	1ad2      	subs	r2, r2, r3
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	699b      	ldr	r3, [r3, #24]
 80154e2:	429a      	cmp	r2, r3
 80154e4:	d217      	bcs.n	8015516 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	789b      	ldrb	r3, [r3, #2]
 80154ea:	613b      	str	r3, [r7, #16]
 80154ec:	e010      	b.n	8015510 <sync_window+0x78>
					wsect += fs->fsize;
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	699b      	ldr	r3, [r3, #24]
 80154f2:	697a      	ldr	r2, [r7, #20]
 80154f4:	4413      	add	r3, r2
 80154f6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	7858      	ldrb	r0, [r3, #1]
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015502:	2301      	movs	r3, #1
 8015504:	697a      	ldr	r2, [r7, #20]
 8015506:	f7ff fd1d 	bl	8014f44 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801550a:	693b      	ldr	r3, [r7, #16]
 801550c:	3b01      	subs	r3, #1
 801550e:	613b      	str	r3, [r7, #16]
 8015510:	693b      	ldr	r3, [r7, #16]
 8015512:	2b01      	cmp	r3, #1
 8015514:	d8eb      	bhi.n	80154ee <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8015516:	7bfb      	ldrb	r3, [r7, #15]
}
 8015518:	4618      	mov	r0, r3
 801551a:	3718      	adds	r7, #24
 801551c:	46bd      	mov	sp, r7
 801551e:	bd80      	pop	{r7, pc}

08015520 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8015520:	b580      	push	{r7, lr}
 8015522:	b084      	sub	sp, #16
 8015524:	af00      	add	r7, sp, #0
 8015526:	6078      	str	r0, [r7, #4]
 8015528:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801552a:	2300      	movs	r3, #0
 801552c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015532:	683a      	ldr	r2, [r7, #0]
 8015534:	429a      	cmp	r2, r3
 8015536:	d01b      	beq.n	8015570 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8015538:	6878      	ldr	r0, [r7, #4]
 801553a:	f7ff ffad 	bl	8015498 <sync_window>
 801553e:	4603      	mov	r3, r0
 8015540:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8015542:	7bfb      	ldrb	r3, [r7, #15]
 8015544:	2b00      	cmp	r3, #0
 8015546:	d113      	bne.n	8015570 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	7858      	ldrb	r0, [r3, #1]
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015552:	2301      	movs	r3, #1
 8015554:	683a      	ldr	r2, [r7, #0]
 8015556:	f7ff fcd5 	bl	8014f04 <disk_read>
 801555a:	4603      	mov	r3, r0
 801555c:	2b00      	cmp	r3, #0
 801555e:	d004      	beq.n	801556a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8015560:	f04f 33ff 	mov.w	r3, #4294967295
 8015564:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8015566:	2301      	movs	r3, #1
 8015568:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	683a      	ldr	r2, [r7, #0]
 801556e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8015570:	7bfb      	ldrb	r3, [r7, #15]
}
 8015572:	4618      	mov	r0, r3
 8015574:	3710      	adds	r7, #16
 8015576:	46bd      	mov	sp, r7
 8015578:	bd80      	pop	{r7, pc}
	...

0801557c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801557c:	b580      	push	{r7, lr}
 801557e:	b084      	sub	sp, #16
 8015580:	af00      	add	r7, sp, #0
 8015582:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8015584:	6878      	ldr	r0, [r7, #4]
 8015586:	f7ff ff87 	bl	8015498 <sync_window>
 801558a:	4603      	mov	r3, r0
 801558c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801558e:	7bfb      	ldrb	r3, [r7, #15]
 8015590:	2b00      	cmp	r3, #0
 8015592:	d158      	bne.n	8015646 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	781b      	ldrb	r3, [r3, #0]
 8015598:	2b03      	cmp	r3, #3
 801559a:	d148      	bne.n	801562e <sync_fs+0xb2>
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	791b      	ldrb	r3, [r3, #4]
 80155a0:	2b01      	cmp	r3, #1
 80155a2:	d144      	bne.n	801562e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	3330      	adds	r3, #48	; 0x30
 80155a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80155ac:	2100      	movs	r1, #0
 80155ae:	4618      	mov	r0, r3
 80155b0:	f7ff fda9 	bl	8015106 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	3330      	adds	r3, #48	; 0x30
 80155b8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80155bc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80155c0:	4618      	mov	r0, r3
 80155c2:	f7ff fd38 	bl	8015036 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	3330      	adds	r3, #48	; 0x30
 80155ca:	4921      	ldr	r1, [pc, #132]	; (8015650 <sync_fs+0xd4>)
 80155cc:	4618      	mov	r0, r3
 80155ce:	f7ff fd4d 	bl	801506c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	3330      	adds	r3, #48	; 0x30
 80155d6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80155da:	491e      	ldr	r1, [pc, #120]	; (8015654 <sync_fs+0xd8>)
 80155dc:	4618      	mov	r0, r3
 80155de:	f7ff fd45 	bl	801506c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	3330      	adds	r3, #48	; 0x30
 80155e6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	691b      	ldr	r3, [r3, #16]
 80155ee:	4619      	mov	r1, r3
 80155f0:	4610      	mov	r0, r2
 80155f2:	f7ff fd3b 	bl	801506c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	3330      	adds	r3, #48	; 0x30
 80155fa:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	68db      	ldr	r3, [r3, #12]
 8015602:	4619      	mov	r1, r3
 8015604:	4610      	mov	r0, r2
 8015606:	f7ff fd31 	bl	801506c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	69db      	ldr	r3, [r3, #28]
 801560e:	1c5a      	adds	r2, r3, #1
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	7858      	ldrb	r0, [r3, #1]
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015622:	2301      	movs	r3, #1
 8015624:	f7ff fc8e 	bl	8014f44 <disk_write>
			fs->fsi_flag = 0;
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	2200      	movs	r2, #0
 801562c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	785b      	ldrb	r3, [r3, #1]
 8015632:	2200      	movs	r2, #0
 8015634:	2100      	movs	r1, #0
 8015636:	4618      	mov	r0, r3
 8015638:	f7ff fca4 	bl	8014f84 <disk_ioctl>
 801563c:	4603      	mov	r3, r0
 801563e:	2b00      	cmp	r3, #0
 8015640:	d001      	beq.n	8015646 <sync_fs+0xca>
 8015642:	2301      	movs	r3, #1
 8015644:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8015646:	7bfb      	ldrb	r3, [r7, #15]
}
 8015648:	4618      	mov	r0, r3
 801564a:	3710      	adds	r7, #16
 801564c:	46bd      	mov	sp, r7
 801564e:	bd80      	pop	{r7, pc}
 8015650:	41615252 	.word	0x41615252
 8015654:	61417272 	.word	0x61417272

08015658 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8015658:	b480      	push	{r7}
 801565a:	b083      	sub	sp, #12
 801565c:	af00      	add	r7, sp, #0
 801565e:	6078      	str	r0, [r7, #4]
 8015660:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8015662:	683b      	ldr	r3, [r7, #0]
 8015664:	3b02      	subs	r3, #2
 8015666:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	695b      	ldr	r3, [r3, #20]
 801566c:	3b02      	subs	r3, #2
 801566e:	683a      	ldr	r2, [r7, #0]
 8015670:	429a      	cmp	r2, r3
 8015672:	d301      	bcc.n	8015678 <clust2sect+0x20>
 8015674:	2300      	movs	r3, #0
 8015676:	e008      	b.n	801568a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	895b      	ldrh	r3, [r3, #10]
 801567c:	461a      	mov	r2, r3
 801567e:	683b      	ldr	r3, [r7, #0]
 8015680:	fb03 f202 	mul.w	r2, r3, r2
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015688:	4413      	add	r3, r2
}
 801568a:	4618      	mov	r0, r3
 801568c:	370c      	adds	r7, #12
 801568e:	46bd      	mov	sp, r7
 8015690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015694:	4770      	bx	lr

08015696 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8015696:	b580      	push	{r7, lr}
 8015698:	b086      	sub	sp, #24
 801569a:	af00      	add	r7, sp, #0
 801569c:	6078      	str	r0, [r7, #4]
 801569e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	681b      	ldr	r3, [r3, #0]
 80156a4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80156a6:	683b      	ldr	r3, [r7, #0]
 80156a8:	2b01      	cmp	r3, #1
 80156aa:	d904      	bls.n	80156b6 <get_fat+0x20>
 80156ac:	693b      	ldr	r3, [r7, #16]
 80156ae:	695b      	ldr	r3, [r3, #20]
 80156b0:	683a      	ldr	r2, [r7, #0]
 80156b2:	429a      	cmp	r2, r3
 80156b4:	d302      	bcc.n	80156bc <get_fat+0x26>
		val = 1;	/* Internal error */
 80156b6:	2301      	movs	r3, #1
 80156b8:	617b      	str	r3, [r7, #20]
 80156ba:	e08c      	b.n	80157d6 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80156bc:	f04f 33ff 	mov.w	r3, #4294967295
 80156c0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80156c2:	693b      	ldr	r3, [r7, #16]
 80156c4:	781b      	ldrb	r3, [r3, #0]
 80156c6:	2b02      	cmp	r3, #2
 80156c8:	d045      	beq.n	8015756 <get_fat+0xc0>
 80156ca:	2b03      	cmp	r3, #3
 80156cc:	d05d      	beq.n	801578a <get_fat+0xf4>
 80156ce:	2b01      	cmp	r3, #1
 80156d0:	d177      	bne.n	80157c2 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80156d2:	683b      	ldr	r3, [r7, #0]
 80156d4:	60fb      	str	r3, [r7, #12]
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	085b      	lsrs	r3, r3, #1
 80156da:	68fa      	ldr	r2, [r7, #12]
 80156dc:	4413      	add	r3, r2
 80156de:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80156e0:	693b      	ldr	r3, [r7, #16]
 80156e2:	6a1a      	ldr	r2, [r3, #32]
 80156e4:	68fb      	ldr	r3, [r7, #12]
 80156e6:	0a5b      	lsrs	r3, r3, #9
 80156e8:	4413      	add	r3, r2
 80156ea:	4619      	mov	r1, r3
 80156ec:	6938      	ldr	r0, [r7, #16]
 80156ee:	f7ff ff17 	bl	8015520 <move_window>
 80156f2:	4603      	mov	r3, r0
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d167      	bne.n	80157c8 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	1c5a      	adds	r2, r3, #1
 80156fc:	60fa      	str	r2, [r7, #12]
 80156fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015702:	693a      	ldr	r2, [r7, #16]
 8015704:	4413      	add	r3, r2
 8015706:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801570a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801570c:	693b      	ldr	r3, [r7, #16]
 801570e:	6a1a      	ldr	r2, [r3, #32]
 8015710:	68fb      	ldr	r3, [r7, #12]
 8015712:	0a5b      	lsrs	r3, r3, #9
 8015714:	4413      	add	r3, r2
 8015716:	4619      	mov	r1, r3
 8015718:	6938      	ldr	r0, [r7, #16]
 801571a:	f7ff ff01 	bl	8015520 <move_window>
 801571e:	4603      	mov	r3, r0
 8015720:	2b00      	cmp	r3, #0
 8015722:	d153      	bne.n	80157cc <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801572a:	693a      	ldr	r2, [r7, #16]
 801572c:	4413      	add	r3, r2
 801572e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015732:	021b      	lsls	r3, r3, #8
 8015734:	461a      	mov	r2, r3
 8015736:	68bb      	ldr	r3, [r7, #8]
 8015738:	4313      	orrs	r3, r2
 801573a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801573c:	683b      	ldr	r3, [r7, #0]
 801573e:	f003 0301 	and.w	r3, r3, #1
 8015742:	2b00      	cmp	r3, #0
 8015744:	d002      	beq.n	801574c <get_fat+0xb6>
 8015746:	68bb      	ldr	r3, [r7, #8]
 8015748:	091b      	lsrs	r3, r3, #4
 801574a:	e002      	b.n	8015752 <get_fat+0xbc>
 801574c:	68bb      	ldr	r3, [r7, #8]
 801574e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015752:	617b      	str	r3, [r7, #20]
			break;
 8015754:	e03f      	b.n	80157d6 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8015756:	693b      	ldr	r3, [r7, #16]
 8015758:	6a1a      	ldr	r2, [r3, #32]
 801575a:	683b      	ldr	r3, [r7, #0]
 801575c:	0a1b      	lsrs	r3, r3, #8
 801575e:	4413      	add	r3, r2
 8015760:	4619      	mov	r1, r3
 8015762:	6938      	ldr	r0, [r7, #16]
 8015764:	f7ff fedc 	bl	8015520 <move_window>
 8015768:	4603      	mov	r3, r0
 801576a:	2b00      	cmp	r3, #0
 801576c:	d130      	bne.n	80157d0 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801576e:	693b      	ldr	r3, [r7, #16]
 8015770:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015774:	683b      	ldr	r3, [r7, #0]
 8015776:	005b      	lsls	r3, r3, #1
 8015778:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801577c:	4413      	add	r3, r2
 801577e:	4618      	mov	r0, r3
 8015780:	f7ff fc1e 	bl	8014fc0 <ld_word>
 8015784:	4603      	mov	r3, r0
 8015786:	617b      	str	r3, [r7, #20]
			break;
 8015788:	e025      	b.n	80157d6 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801578a:	693b      	ldr	r3, [r7, #16]
 801578c:	6a1a      	ldr	r2, [r3, #32]
 801578e:	683b      	ldr	r3, [r7, #0]
 8015790:	09db      	lsrs	r3, r3, #7
 8015792:	4413      	add	r3, r2
 8015794:	4619      	mov	r1, r3
 8015796:	6938      	ldr	r0, [r7, #16]
 8015798:	f7ff fec2 	bl	8015520 <move_window>
 801579c:	4603      	mov	r3, r0
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d118      	bne.n	80157d4 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80157a2:	693b      	ldr	r3, [r7, #16]
 80157a4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80157a8:	683b      	ldr	r3, [r7, #0]
 80157aa:	009b      	lsls	r3, r3, #2
 80157ac:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80157b0:	4413      	add	r3, r2
 80157b2:	4618      	mov	r0, r3
 80157b4:	f7ff fc1c 	bl	8014ff0 <ld_dword>
 80157b8:	4603      	mov	r3, r0
 80157ba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80157be:	617b      	str	r3, [r7, #20]
			break;
 80157c0:	e009      	b.n	80157d6 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80157c2:	2301      	movs	r3, #1
 80157c4:	617b      	str	r3, [r7, #20]
 80157c6:	e006      	b.n	80157d6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80157c8:	bf00      	nop
 80157ca:	e004      	b.n	80157d6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80157cc:	bf00      	nop
 80157ce:	e002      	b.n	80157d6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80157d0:	bf00      	nop
 80157d2:	e000      	b.n	80157d6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80157d4:	bf00      	nop
		}
	}

	return val;
 80157d6:	697b      	ldr	r3, [r7, #20]
}
 80157d8:	4618      	mov	r0, r3
 80157da:	3718      	adds	r7, #24
 80157dc:	46bd      	mov	sp, r7
 80157de:	bd80      	pop	{r7, pc}

080157e0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80157e0:	b590      	push	{r4, r7, lr}
 80157e2:	b089      	sub	sp, #36	; 0x24
 80157e4:	af00      	add	r7, sp, #0
 80157e6:	60f8      	str	r0, [r7, #12]
 80157e8:	60b9      	str	r1, [r7, #8]
 80157ea:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80157ec:	2302      	movs	r3, #2
 80157ee:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80157f0:	68bb      	ldr	r3, [r7, #8]
 80157f2:	2b01      	cmp	r3, #1
 80157f4:	f240 80d6 	bls.w	80159a4 <put_fat+0x1c4>
 80157f8:	68fb      	ldr	r3, [r7, #12]
 80157fa:	695b      	ldr	r3, [r3, #20]
 80157fc:	68ba      	ldr	r2, [r7, #8]
 80157fe:	429a      	cmp	r2, r3
 8015800:	f080 80d0 	bcs.w	80159a4 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8015804:	68fb      	ldr	r3, [r7, #12]
 8015806:	781b      	ldrb	r3, [r3, #0]
 8015808:	2b02      	cmp	r3, #2
 801580a:	d073      	beq.n	80158f4 <put_fat+0x114>
 801580c:	2b03      	cmp	r3, #3
 801580e:	f000 8091 	beq.w	8015934 <put_fat+0x154>
 8015812:	2b01      	cmp	r3, #1
 8015814:	f040 80c6 	bne.w	80159a4 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8015818:	68bb      	ldr	r3, [r7, #8]
 801581a:	61bb      	str	r3, [r7, #24]
 801581c:	69bb      	ldr	r3, [r7, #24]
 801581e:	085b      	lsrs	r3, r3, #1
 8015820:	69ba      	ldr	r2, [r7, #24]
 8015822:	4413      	add	r3, r2
 8015824:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	6a1a      	ldr	r2, [r3, #32]
 801582a:	69bb      	ldr	r3, [r7, #24]
 801582c:	0a5b      	lsrs	r3, r3, #9
 801582e:	4413      	add	r3, r2
 8015830:	4619      	mov	r1, r3
 8015832:	68f8      	ldr	r0, [r7, #12]
 8015834:	f7ff fe74 	bl	8015520 <move_window>
 8015838:	4603      	mov	r3, r0
 801583a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801583c:	7ffb      	ldrb	r3, [r7, #31]
 801583e:	2b00      	cmp	r3, #0
 8015840:	f040 80a9 	bne.w	8015996 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8015844:	68fb      	ldr	r3, [r7, #12]
 8015846:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801584a:	69bb      	ldr	r3, [r7, #24]
 801584c:	1c59      	adds	r1, r3, #1
 801584e:	61b9      	str	r1, [r7, #24]
 8015850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015854:	4413      	add	r3, r2
 8015856:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8015858:	68bb      	ldr	r3, [r7, #8]
 801585a:	f003 0301 	and.w	r3, r3, #1
 801585e:	2b00      	cmp	r3, #0
 8015860:	d00d      	beq.n	801587e <put_fat+0x9e>
 8015862:	697b      	ldr	r3, [r7, #20]
 8015864:	781b      	ldrb	r3, [r3, #0]
 8015866:	b25b      	sxtb	r3, r3
 8015868:	f003 030f 	and.w	r3, r3, #15
 801586c:	b25a      	sxtb	r2, r3
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	b2db      	uxtb	r3, r3
 8015872:	011b      	lsls	r3, r3, #4
 8015874:	b25b      	sxtb	r3, r3
 8015876:	4313      	orrs	r3, r2
 8015878:	b25b      	sxtb	r3, r3
 801587a:	b2db      	uxtb	r3, r3
 801587c:	e001      	b.n	8015882 <put_fat+0xa2>
 801587e:	687b      	ldr	r3, [r7, #4]
 8015880:	b2db      	uxtb	r3, r3
 8015882:	697a      	ldr	r2, [r7, #20]
 8015884:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8015886:	68fb      	ldr	r3, [r7, #12]
 8015888:	2201      	movs	r2, #1
 801588a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	6a1a      	ldr	r2, [r3, #32]
 8015890:	69bb      	ldr	r3, [r7, #24]
 8015892:	0a5b      	lsrs	r3, r3, #9
 8015894:	4413      	add	r3, r2
 8015896:	4619      	mov	r1, r3
 8015898:	68f8      	ldr	r0, [r7, #12]
 801589a:	f7ff fe41 	bl	8015520 <move_window>
 801589e:	4603      	mov	r3, r0
 80158a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80158a2:	7ffb      	ldrb	r3, [r7, #31]
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d178      	bne.n	801599a <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 80158a8:	68fb      	ldr	r3, [r7, #12]
 80158aa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80158ae:	69bb      	ldr	r3, [r7, #24]
 80158b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80158b4:	4413      	add	r3, r2
 80158b6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80158b8:	68bb      	ldr	r3, [r7, #8]
 80158ba:	f003 0301 	and.w	r3, r3, #1
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d003      	beq.n	80158ca <put_fat+0xea>
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	091b      	lsrs	r3, r3, #4
 80158c6:	b2db      	uxtb	r3, r3
 80158c8:	e00e      	b.n	80158e8 <put_fat+0x108>
 80158ca:	697b      	ldr	r3, [r7, #20]
 80158cc:	781b      	ldrb	r3, [r3, #0]
 80158ce:	b25b      	sxtb	r3, r3
 80158d0:	f023 030f 	bic.w	r3, r3, #15
 80158d4:	b25a      	sxtb	r2, r3
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	0a1b      	lsrs	r3, r3, #8
 80158da:	b25b      	sxtb	r3, r3
 80158dc:	f003 030f 	and.w	r3, r3, #15
 80158e0:	b25b      	sxtb	r3, r3
 80158e2:	4313      	orrs	r3, r2
 80158e4:	b25b      	sxtb	r3, r3
 80158e6:	b2db      	uxtb	r3, r3
 80158e8:	697a      	ldr	r2, [r7, #20]
 80158ea:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80158ec:	68fb      	ldr	r3, [r7, #12]
 80158ee:	2201      	movs	r2, #1
 80158f0:	70da      	strb	r2, [r3, #3]
			break;
 80158f2:	e057      	b.n	80159a4 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80158f4:	68fb      	ldr	r3, [r7, #12]
 80158f6:	6a1a      	ldr	r2, [r3, #32]
 80158f8:	68bb      	ldr	r3, [r7, #8]
 80158fa:	0a1b      	lsrs	r3, r3, #8
 80158fc:	4413      	add	r3, r2
 80158fe:	4619      	mov	r1, r3
 8015900:	68f8      	ldr	r0, [r7, #12]
 8015902:	f7ff fe0d 	bl	8015520 <move_window>
 8015906:	4603      	mov	r3, r0
 8015908:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801590a:	7ffb      	ldrb	r3, [r7, #31]
 801590c:	2b00      	cmp	r3, #0
 801590e:	d146      	bne.n	801599e <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015916:	68bb      	ldr	r3, [r7, #8]
 8015918:	005b      	lsls	r3, r3, #1
 801591a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801591e:	4413      	add	r3, r2
 8015920:	687a      	ldr	r2, [r7, #4]
 8015922:	b292      	uxth	r2, r2
 8015924:	4611      	mov	r1, r2
 8015926:	4618      	mov	r0, r3
 8015928:	f7ff fb85 	bl	8015036 <st_word>
			fs->wflag = 1;
 801592c:	68fb      	ldr	r3, [r7, #12]
 801592e:	2201      	movs	r2, #1
 8015930:	70da      	strb	r2, [r3, #3]
			break;
 8015932:	e037      	b.n	80159a4 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8015934:	68fb      	ldr	r3, [r7, #12]
 8015936:	6a1a      	ldr	r2, [r3, #32]
 8015938:	68bb      	ldr	r3, [r7, #8]
 801593a:	09db      	lsrs	r3, r3, #7
 801593c:	4413      	add	r3, r2
 801593e:	4619      	mov	r1, r3
 8015940:	68f8      	ldr	r0, [r7, #12]
 8015942:	f7ff fded 	bl	8015520 <move_window>
 8015946:	4603      	mov	r3, r0
 8015948:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801594a:	7ffb      	ldrb	r3, [r7, #31]
 801594c:	2b00      	cmp	r3, #0
 801594e:	d128      	bne.n	80159a2 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8015956:	68fb      	ldr	r3, [r7, #12]
 8015958:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801595c:	68bb      	ldr	r3, [r7, #8]
 801595e:	009b      	lsls	r3, r3, #2
 8015960:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8015964:	4413      	add	r3, r2
 8015966:	4618      	mov	r0, r3
 8015968:	f7ff fb42 	bl	8014ff0 <ld_dword>
 801596c:	4603      	mov	r3, r0
 801596e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8015972:	4323      	orrs	r3, r4
 8015974:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8015976:	68fb      	ldr	r3, [r7, #12]
 8015978:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801597c:	68bb      	ldr	r3, [r7, #8]
 801597e:	009b      	lsls	r3, r3, #2
 8015980:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8015984:	4413      	add	r3, r2
 8015986:	6879      	ldr	r1, [r7, #4]
 8015988:	4618      	mov	r0, r3
 801598a:	f7ff fb6f 	bl	801506c <st_dword>
			fs->wflag = 1;
 801598e:	68fb      	ldr	r3, [r7, #12]
 8015990:	2201      	movs	r2, #1
 8015992:	70da      	strb	r2, [r3, #3]
			break;
 8015994:	e006      	b.n	80159a4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8015996:	bf00      	nop
 8015998:	e004      	b.n	80159a4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801599a:	bf00      	nop
 801599c:	e002      	b.n	80159a4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801599e:	bf00      	nop
 80159a0:	e000      	b.n	80159a4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80159a2:	bf00      	nop
		}
	}
	return res;
 80159a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80159a6:	4618      	mov	r0, r3
 80159a8:	3724      	adds	r7, #36	; 0x24
 80159aa:	46bd      	mov	sp, r7
 80159ac:	bd90      	pop	{r4, r7, pc}

080159ae <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80159ae:	b580      	push	{r7, lr}
 80159b0:	b088      	sub	sp, #32
 80159b2:	af00      	add	r7, sp, #0
 80159b4:	60f8      	str	r0, [r7, #12]
 80159b6:	60b9      	str	r1, [r7, #8]
 80159b8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80159ba:	2300      	movs	r3, #0
 80159bc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	681b      	ldr	r3, [r3, #0]
 80159c2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80159c4:	68bb      	ldr	r3, [r7, #8]
 80159c6:	2b01      	cmp	r3, #1
 80159c8:	d904      	bls.n	80159d4 <remove_chain+0x26>
 80159ca:	69bb      	ldr	r3, [r7, #24]
 80159cc:	695b      	ldr	r3, [r3, #20]
 80159ce:	68ba      	ldr	r2, [r7, #8]
 80159d0:	429a      	cmp	r2, r3
 80159d2:	d301      	bcc.n	80159d8 <remove_chain+0x2a>
 80159d4:	2302      	movs	r3, #2
 80159d6:	e04b      	b.n	8015a70 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d00c      	beq.n	80159f8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80159de:	f04f 32ff 	mov.w	r2, #4294967295
 80159e2:	6879      	ldr	r1, [r7, #4]
 80159e4:	69b8      	ldr	r0, [r7, #24]
 80159e6:	f7ff fefb 	bl	80157e0 <put_fat>
 80159ea:	4603      	mov	r3, r0
 80159ec:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80159ee:	7ffb      	ldrb	r3, [r7, #31]
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d001      	beq.n	80159f8 <remove_chain+0x4a>
 80159f4:	7ffb      	ldrb	r3, [r7, #31]
 80159f6:	e03b      	b.n	8015a70 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80159f8:	68b9      	ldr	r1, [r7, #8]
 80159fa:	68f8      	ldr	r0, [r7, #12]
 80159fc:	f7ff fe4b 	bl	8015696 <get_fat>
 8015a00:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8015a02:	697b      	ldr	r3, [r7, #20]
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d031      	beq.n	8015a6c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8015a08:	697b      	ldr	r3, [r7, #20]
 8015a0a:	2b01      	cmp	r3, #1
 8015a0c:	d101      	bne.n	8015a12 <remove_chain+0x64>
 8015a0e:	2302      	movs	r3, #2
 8015a10:	e02e      	b.n	8015a70 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8015a12:	697b      	ldr	r3, [r7, #20]
 8015a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a18:	d101      	bne.n	8015a1e <remove_chain+0x70>
 8015a1a:	2301      	movs	r3, #1
 8015a1c:	e028      	b.n	8015a70 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8015a1e:	2200      	movs	r2, #0
 8015a20:	68b9      	ldr	r1, [r7, #8]
 8015a22:	69b8      	ldr	r0, [r7, #24]
 8015a24:	f7ff fedc 	bl	80157e0 <put_fat>
 8015a28:	4603      	mov	r3, r0
 8015a2a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8015a2c:	7ffb      	ldrb	r3, [r7, #31]
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d001      	beq.n	8015a36 <remove_chain+0x88>
 8015a32:	7ffb      	ldrb	r3, [r7, #31]
 8015a34:	e01c      	b.n	8015a70 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8015a36:	69bb      	ldr	r3, [r7, #24]
 8015a38:	691a      	ldr	r2, [r3, #16]
 8015a3a:	69bb      	ldr	r3, [r7, #24]
 8015a3c:	695b      	ldr	r3, [r3, #20]
 8015a3e:	3b02      	subs	r3, #2
 8015a40:	429a      	cmp	r2, r3
 8015a42:	d20b      	bcs.n	8015a5c <remove_chain+0xae>
			fs->free_clst++;
 8015a44:	69bb      	ldr	r3, [r7, #24]
 8015a46:	691b      	ldr	r3, [r3, #16]
 8015a48:	1c5a      	adds	r2, r3, #1
 8015a4a:	69bb      	ldr	r3, [r7, #24]
 8015a4c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8015a4e:	69bb      	ldr	r3, [r7, #24]
 8015a50:	791b      	ldrb	r3, [r3, #4]
 8015a52:	f043 0301 	orr.w	r3, r3, #1
 8015a56:	b2da      	uxtb	r2, r3
 8015a58:	69bb      	ldr	r3, [r7, #24]
 8015a5a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8015a5c:	697b      	ldr	r3, [r7, #20]
 8015a5e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8015a60:	69bb      	ldr	r3, [r7, #24]
 8015a62:	695b      	ldr	r3, [r3, #20]
 8015a64:	68ba      	ldr	r2, [r7, #8]
 8015a66:	429a      	cmp	r2, r3
 8015a68:	d3c6      	bcc.n	80159f8 <remove_chain+0x4a>
 8015a6a:	e000      	b.n	8015a6e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8015a6c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8015a6e:	2300      	movs	r3, #0
}
 8015a70:	4618      	mov	r0, r3
 8015a72:	3720      	adds	r7, #32
 8015a74:	46bd      	mov	sp, r7
 8015a76:	bd80      	pop	{r7, pc}

08015a78 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8015a78:	b580      	push	{r7, lr}
 8015a7a:	b088      	sub	sp, #32
 8015a7c:	af00      	add	r7, sp, #0
 8015a7e:	6078      	str	r0, [r7, #4]
 8015a80:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	681b      	ldr	r3, [r3, #0]
 8015a86:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8015a88:	683b      	ldr	r3, [r7, #0]
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	d10d      	bne.n	8015aaa <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8015a8e:	693b      	ldr	r3, [r7, #16]
 8015a90:	68db      	ldr	r3, [r3, #12]
 8015a92:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8015a94:	69bb      	ldr	r3, [r7, #24]
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d004      	beq.n	8015aa4 <create_chain+0x2c>
 8015a9a:	693b      	ldr	r3, [r7, #16]
 8015a9c:	695b      	ldr	r3, [r3, #20]
 8015a9e:	69ba      	ldr	r2, [r7, #24]
 8015aa0:	429a      	cmp	r2, r3
 8015aa2:	d31b      	bcc.n	8015adc <create_chain+0x64>
 8015aa4:	2301      	movs	r3, #1
 8015aa6:	61bb      	str	r3, [r7, #24]
 8015aa8:	e018      	b.n	8015adc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8015aaa:	6839      	ldr	r1, [r7, #0]
 8015aac:	6878      	ldr	r0, [r7, #4]
 8015aae:	f7ff fdf2 	bl	8015696 <get_fat>
 8015ab2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8015ab4:	68fb      	ldr	r3, [r7, #12]
 8015ab6:	2b01      	cmp	r3, #1
 8015ab8:	d801      	bhi.n	8015abe <create_chain+0x46>
 8015aba:	2301      	movs	r3, #1
 8015abc:	e070      	b.n	8015ba0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8015abe:	68fb      	ldr	r3, [r7, #12]
 8015ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ac4:	d101      	bne.n	8015aca <create_chain+0x52>
 8015ac6:	68fb      	ldr	r3, [r7, #12]
 8015ac8:	e06a      	b.n	8015ba0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8015aca:	693b      	ldr	r3, [r7, #16]
 8015acc:	695b      	ldr	r3, [r3, #20]
 8015ace:	68fa      	ldr	r2, [r7, #12]
 8015ad0:	429a      	cmp	r2, r3
 8015ad2:	d201      	bcs.n	8015ad8 <create_chain+0x60>
 8015ad4:	68fb      	ldr	r3, [r7, #12]
 8015ad6:	e063      	b.n	8015ba0 <create_chain+0x128>
		scl = clst;
 8015ad8:	683b      	ldr	r3, [r7, #0]
 8015ada:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8015adc:	69bb      	ldr	r3, [r7, #24]
 8015ade:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8015ae0:	69fb      	ldr	r3, [r7, #28]
 8015ae2:	3301      	adds	r3, #1
 8015ae4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8015ae6:	693b      	ldr	r3, [r7, #16]
 8015ae8:	695b      	ldr	r3, [r3, #20]
 8015aea:	69fa      	ldr	r2, [r7, #28]
 8015aec:	429a      	cmp	r2, r3
 8015aee:	d307      	bcc.n	8015b00 <create_chain+0x88>
				ncl = 2;
 8015af0:	2302      	movs	r3, #2
 8015af2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8015af4:	69fa      	ldr	r2, [r7, #28]
 8015af6:	69bb      	ldr	r3, [r7, #24]
 8015af8:	429a      	cmp	r2, r3
 8015afa:	d901      	bls.n	8015b00 <create_chain+0x88>
 8015afc:	2300      	movs	r3, #0
 8015afe:	e04f      	b.n	8015ba0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8015b00:	69f9      	ldr	r1, [r7, #28]
 8015b02:	6878      	ldr	r0, [r7, #4]
 8015b04:	f7ff fdc7 	bl	8015696 <get_fat>
 8015b08:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8015b0a:	68fb      	ldr	r3, [r7, #12]
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d00e      	beq.n	8015b2e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8015b10:	68fb      	ldr	r3, [r7, #12]
 8015b12:	2b01      	cmp	r3, #1
 8015b14:	d003      	beq.n	8015b1e <create_chain+0xa6>
 8015b16:	68fb      	ldr	r3, [r7, #12]
 8015b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b1c:	d101      	bne.n	8015b22 <create_chain+0xaa>
 8015b1e:	68fb      	ldr	r3, [r7, #12]
 8015b20:	e03e      	b.n	8015ba0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8015b22:	69fa      	ldr	r2, [r7, #28]
 8015b24:	69bb      	ldr	r3, [r7, #24]
 8015b26:	429a      	cmp	r2, r3
 8015b28:	d1da      	bne.n	8015ae0 <create_chain+0x68>
 8015b2a:	2300      	movs	r3, #0
 8015b2c:	e038      	b.n	8015ba0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8015b2e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8015b30:	f04f 32ff 	mov.w	r2, #4294967295
 8015b34:	69f9      	ldr	r1, [r7, #28]
 8015b36:	6938      	ldr	r0, [r7, #16]
 8015b38:	f7ff fe52 	bl	80157e0 <put_fat>
 8015b3c:	4603      	mov	r3, r0
 8015b3e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8015b40:	7dfb      	ldrb	r3, [r7, #23]
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d109      	bne.n	8015b5a <create_chain+0xe2>
 8015b46:	683b      	ldr	r3, [r7, #0]
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d006      	beq.n	8015b5a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8015b4c:	69fa      	ldr	r2, [r7, #28]
 8015b4e:	6839      	ldr	r1, [r7, #0]
 8015b50:	6938      	ldr	r0, [r7, #16]
 8015b52:	f7ff fe45 	bl	80157e0 <put_fat>
 8015b56:	4603      	mov	r3, r0
 8015b58:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8015b5a:	7dfb      	ldrb	r3, [r7, #23]
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	d116      	bne.n	8015b8e <create_chain+0x116>
		fs->last_clst = ncl;
 8015b60:	693b      	ldr	r3, [r7, #16]
 8015b62:	69fa      	ldr	r2, [r7, #28]
 8015b64:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8015b66:	693b      	ldr	r3, [r7, #16]
 8015b68:	691a      	ldr	r2, [r3, #16]
 8015b6a:	693b      	ldr	r3, [r7, #16]
 8015b6c:	695b      	ldr	r3, [r3, #20]
 8015b6e:	3b02      	subs	r3, #2
 8015b70:	429a      	cmp	r2, r3
 8015b72:	d804      	bhi.n	8015b7e <create_chain+0x106>
 8015b74:	693b      	ldr	r3, [r7, #16]
 8015b76:	691b      	ldr	r3, [r3, #16]
 8015b78:	1e5a      	subs	r2, r3, #1
 8015b7a:	693b      	ldr	r3, [r7, #16]
 8015b7c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8015b7e:	693b      	ldr	r3, [r7, #16]
 8015b80:	791b      	ldrb	r3, [r3, #4]
 8015b82:	f043 0301 	orr.w	r3, r3, #1
 8015b86:	b2da      	uxtb	r2, r3
 8015b88:	693b      	ldr	r3, [r7, #16]
 8015b8a:	711a      	strb	r2, [r3, #4]
 8015b8c:	e007      	b.n	8015b9e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8015b8e:	7dfb      	ldrb	r3, [r7, #23]
 8015b90:	2b01      	cmp	r3, #1
 8015b92:	d102      	bne.n	8015b9a <create_chain+0x122>
 8015b94:	f04f 33ff 	mov.w	r3, #4294967295
 8015b98:	e000      	b.n	8015b9c <create_chain+0x124>
 8015b9a:	2301      	movs	r3, #1
 8015b9c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8015b9e:	69fb      	ldr	r3, [r7, #28]
}
 8015ba0:	4618      	mov	r0, r3
 8015ba2:	3720      	adds	r7, #32
 8015ba4:	46bd      	mov	sp, r7
 8015ba6:	bd80      	pop	{r7, pc}

08015ba8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8015ba8:	b480      	push	{r7}
 8015baa:	b087      	sub	sp, #28
 8015bac:	af00      	add	r7, sp, #0
 8015bae:	6078      	str	r0, [r7, #4]
 8015bb0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	681b      	ldr	r3, [r3, #0]
 8015bb6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015bbc:	3304      	adds	r3, #4
 8015bbe:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8015bc0:	683b      	ldr	r3, [r7, #0]
 8015bc2:	0a5b      	lsrs	r3, r3, #9
 8015bc4:	68fa      	ldr	r2, [r7, #12]
 8015bc6:	8952      	ldrh	r2, [r2, #10]
 8015bc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8015bcc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8015bce:	693b      	ldr	r3, [r7, #16]
 8015bd0:	1d1a      	adds	r2, r3, #4
 8015bd2:	613a      	str	r2, [r7, #16]
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8015bd8:	68bb      	ldr	r3, [r7, #8]
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d101      	bne.n	8015be2 <clmt_clust+0x3a>
 8015bde:	2300      	movs	r3, #0
 8015be0:	e010      	b.n	8015c04 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8015be2:	697a      	ldr	r2, [r7, #20]
 8015be4:	68bb      	ldr	r3, [r7, #8]
 8015be6:	429a      	cmp	r2, r3
 8015be8:	d307      	bcc.n	8015bfa <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8015bea:	697a      	ldr	r2, [r7, #20]
 8015bec:	68bb      	ldr	r3, [r7, #8]
 8015bee:	1ad3      	subs	r3, r2, r3
 8015bf0:	617b      	str	r3, [r7, #20]
 8015bf2:	693b      	ldr	r3, [r7, #16]
 8015bf4:	3304      	adds	r3, #4
 8015bf6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8015bf8:	e7e9      	b.n	8015bce <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8015bfa:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8015bfc:	693b      	ldr	r3, [r7, #16]
 8015bfe:	681a      	ldr	r2, [r3, #0]
 8015c00:	697b      	ldr	r3, [r7, #20]
 8015c02:	4413      	add	r3, r2
}
 8015c04:	4618      	mov	r0, r3
 8015c06:	371c      	adds	r7, #28
 8015c08:	46bd      	mov	sp, r7
 8015c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c0e:	4770      	bx	lr

08015c10 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8015c10:	b580      	push	{r7, lr}
 8015c12:	b086      	sub	sp, #24
 8015c14:	af00      	add	r7, sp, #0
 8015c16:	6078      	str	r0, [r7, #4]
 8015c18:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	681b      	ldr	r3, [r3, #0]
 8015c1e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8015c20:	683b      	ldr	r3, [r7, #0]
 8015c22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8015c26:	d204      	bcs.n	8015c32 <dir_sdi+0x22>
 8015c28:	683b      	ldr	r3, [r7, #0]
 8015c2a:	f003 031f 	and.w	r3, r3, #31
 8015c2e:	2b00      	cmp	r3, #0
 8015c30:	d001      	beq.n	8015c36 <dir_sdi+0x26>
		return FR_INT_ERR;
 8015c32:	2302      	movs	r3, #2
 8015c34:	e063      	b.n	8015cfe <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	683a      	ldr	r2, [r7, #0]
 8015c3a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	689b      	ldr	r3, [r3, #8]
 8015c40:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8015c42:	697b      	ldr	r3, [r7, #20]
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d106      	bne.n	8015c56 <dir_sdi+0x46>
 8015c48:	693b      	ldr	r3, [r7, #16]
 8015c4a:	781b      	ldrb	r3, [r3, #0]
 8015c4c:	2b02      	cmp	r3, #2
 8015c4e:	d902      	bls.n	8015c56 <dir_sdi+0x46>
		clst = fs->dirbase;
 8015c50:	693b      	ldr	r3, [r7, #16]
 8015c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c54:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8015c56:	697b      	ldr	r3, [r7, #20]
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	d10c      	bne.n	8015c76 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8015c5c:	683b      	ldr	r3, [r7, #0]
 8015c5e:	095b      	lsrs	r3, r3, #5
 8015c60:	693a      	ldr	r2, [r7, #16]
 8015c62:	8912      	ldrh	r2, [r2, #8]
 8015c64:	4293      	cmp	r3, r2
 8015c66:	d301      	bcc.n	8015c6c <dir_sdi+0x5c>
 8015c68:	2302      	movs	r3, #2
 8015c6a:	e048      	b.n	8015cfe <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8015c6c:	693b      	ldr	r3, [r7, #16]
 8015c6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	61da      	str	r2, [r3, #28]
 8015c74:	e029      	b.n	8015cca <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8015c76:	693b      	ldr	r3, [r7, #16]
 8015c78:	895b      	ldrh	r3, [r3, #10]
 8015c7a:	025b      	lsls	r3, r3, #9
 8015c7c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8015c7e:	e019      	b.n	8015cb4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	6979      	ldr	r1, [r7, #20]
 8015c84:	4618      	mov	r0, r3
 8015c86:	f7ff fd06 	bl	8015696 <get_fat>
 8015c8a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8015c8c:	697b      	ldr	r3, [r7, #20]
 8015c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c92:	d101      	bne.n	8015c98 <dir_sdi+0x88>
 8015c94:	2301      	movs	r3, #1
 8015c96:	e032      	b.n	8015cfe <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8015c98:	697b      	ldr	r3, [r7, #20]
 8015c9a:	2b01      	cmp	r3, #1
 8015c9c:	d904      	bls.n	8015ca8 <dir_sdi+0x98>
 8015c9e:	693b      	ldr	r3, [r7, #16]
 8015ca0:	695b      	ldr	r3, [r3, #20]
 8015ca2:	697a      	ldr	r2, [r7, #20]
 8015ca4:	429a      	cmp	r2, r3
 8015ca6:	d301      	bcc.n	8015cac <dir_sdi+0x9c>
 8015ca8:	2302      	movs	r3, #2
 8015caa:	e028      	b.n	8015cfe <dir_sdi+0xee>
			ofs -= csz;
 8015cac:	683a      	ldr	r2, [r7, #0]
 8015cae:	68fb      	ldr	r3, [r7, #12]
 8015cb0:	1ad3      	subs	r3, r2, r3
 8015cb2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8015cb4:	683a      	ldr	r2, [r7, #0]
 8015cb6:	68fb      	ldr	r3, [r7, #12]
 8015cb8:	429a      	cmp	r2, r3
 8015cba:	d2e1      	bcs.n	8015c80 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8015cbc:	6979      	ldr	r1, [r7, #20]
 8015cbe:	6938      	ldr	r0, [r7, #16]
 8015cc0:	f7ff fcca 	bl	8015658 <clust2sect>
 8015cc4:	4602      	mov	r2, r0
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	697a      	ldr	r2, [r7, #20]
 8015cce:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	69db      	ldr	r3, [r3, #28]
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d101      	bne.n	8015cdc <dir_sdi+0xcc>
 8015cd8:	2302      	movs	r3, #2
 8015cda:	e010      	b.n	8015cfe <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	69da      	ldr	r2, [r3, #28]
 8015ce0:	683b      	ldr	r3, [r7, #0]
 8015ce2:	0a5b      	lsrs	r3, r3, #9
 8015ce4:	441a      	add	r2, r3
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8015cea:	693b      	ldr	r3, [r7, #16]
 8015cec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015cf0:	683b      	ldr	r3, [r7, #0]
 8015cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015cf6:	441a      	add	r2, r3
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8015cfc:	2300      	movs	r3, #0
}
 8015cfe:	4618      	mov	r0, r3
 8015d00:	3718      	adds	r7, #24
 8015d02:	46bd      	mov	sp, r7
 8015d04:	bd80      	pop	{r7, pc}

08015d06 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8015d06:	b580      	push	{r7, lr}
 8015d08:	b086      	sub	sp, #24
 8015d0a:	af00      	add	r7, sp, #0
 8015d0c:	6078      	str	r0, [r7, #4]
 8015d0e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	681b      	ldr	r3, [r3, #0]
 8015d14:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	695b      	ldr	r3, [r3, #20]
 8015d1a:	3320      	adds	r3, #32
 8015d1c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	69db      	ldr	r3, [r3, #28]
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d003      	beq.n	8015d2e <dir_next+0x28>
 8015d26:	68bb      	ldr	r3, [r7, #8]
 8015d28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8015d2c:	d301      	bcc.n	8015d32 <dir_next+0x2c>
 8015d2e:	2304      	movs	r3, #4
 8015d30:	e0aa      	b.n	8015e88 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8015d32:	68bb      	ldr	r3, [r7, #8]
 8015d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	f040 8098 	bne.w	8015e6e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	69db      	ldr	r3, [r3, #28]
 8015d42:	1c5a      	adds	r2, r3, #1
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	699b      	ldr	r3, [r3, #24]
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d10b      	bne.n	8015d68 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8015d50:	68bb      	ldr	r3, [r7, #8]
 8015d52:	095b      	lsrs	r3, r3, #5
 8015d54:	68fa      	ldr	r2, [r7, #12]
 8015d56:	8912      	ldrh	r2, [r2, #8]
 8015d58:	4293      	cmp	r3, r2
 8015d5a:	f0c0 8088 	bcc.w	8015e6e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	2200      	movs	r2, #0
 8015d62:	61da      	str	r2, [r3, #28]
 8015d64:	2304      	movs	r3, #4
 8015d66:	e08f      	b.n	8015e88 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8015d68:	68bb      	ldr	r3, [r7, #8]
 8015d6a:	0a5b      	lsrs	r3, r3, #9
 8015d6c:	68fa      	ldr	r2, [r7, #12]
 8015d6e:	8952      	ldrh	r2, [r2, #10]
 8015d70:	3a01      	subs	r2, #1
 8015d72:	4013      	ands	r3, r2
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d17a      	bne.n	8015e6e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8015d78:	687a      	ldr	r2, [r7, #4]
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	699b      	ldr	r3, [r3, #24]
 8015d7e:	4619      	mov	r1, r3
 8015d80:	4610      	mov	r0, r2
 8015d82:	f7ff fc88 	bl	8015696 <get_fat>
 8015d86:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8015d88:	697b      	ldr	r3, [r7, #20]
 8015d8a:	2b01      	cmp	r3, #1
 8015d8c:	d801      	bhi.n	8015d92 <dir_next+0x8c>
 8015d8e:	2302      	movs	r3, #2
 8015d90:	e07a      	b.n	8015e88 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8015d92:	697b      	ldr	r3, [r7, #20]
 8015d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d98:	d101      	bne.n	8015d9e <dir_next+0x98>
 8015d9a:	2301      	movs	r3, #1
 8015d9c:	e074      	b.n	8015e88 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8015d9e:	68fb      	ldr	r3, [r7, #12]
 8015da0:	695b      	ldr	r3, [r3, #20]
 8015da2:	697a      	ldr	r2, [r7, #20]
 8015da4:	429a      	cmp	r2, r3
 8015da6:	d358      	bcc.n	8015e5a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8015da8:	683b      	ldr	r3, [r7, #0]
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	d104      	bne.n	8015db8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	2200      	movs	r2, #0
 8015db2:	61da      	str	r2, [r3, #28]
 8015db4:	2304      	movs	r3, #4
 8015db6:	e067      	b.n	8015e88 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8015db8:	687a      	ldr	r2, [r7, #4]
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	699b      	ldr	r3, [r3, #24]
 8015dbe:	4619      	mov	r1, r3
 8015dc0:	4610      	mov	r0, r2
 8015dc2:	f7ff fe59 	bl	8015a78 <create_chain>
 8015dc6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8015dc8:	697b      	ldr	r3, [r7, #20]
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d101      	bne.n	8015dd2 <dir_next+0xcc>
 8015dce:	2307      	movs	r3, #7
 8015dd0:	e05a      	b.n	8015e88 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8015dd2:	697b      	ldr	r3, [r7, #20]
 8015dd4:	2b01      	cmp	r3, #1
 8015dd6:	d101      	bne.n	8015ddc <dir_next+0xd6>
 8015dd8:	2302      	movs	r3, #2
 8015dda:	e055      	b.n	8015e88 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8015ddc:	697b      	ldr	r3, [r7, #20]
 8015dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015de2:	d101      	bne.n	8015de8 <dir_next+0xe2>
 8015de4:	2301      	movs	r3, #1
 8015de6:	e04f      	b.n	8015e88 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8015de8:	68f8      	ldr	r0, [r7, #12]
 8015dea:	f7ff fb55 	bl	8015498 <sync_window>
 8015dee:	4603      	mov	r3, r0
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d001      	beq.n	8015df8 <dir_next+0xf2>
 8015df4:	2301      	movs	r3, #1
 8015df6:	e047      	b.n	8015e88 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8015df8:	68fb      	ldr	r3, [r7, #12]
 8015dfa:	3330      	adds	r3, #48	; 0x30
 8015dfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015e00:	2100      	movs	r1, #0
 8015e02:	4618      	mov	r0, r3
 8015e04:	f7ff f97f 	bl	8015106 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8015e08:	2300      	movs	r3, #0
 8015e0a:	613b      	str	r3, [r7, #16]
 8015e0c:	6979      	ldr	r1, [r7, #20]
 8015e0e:	68f8      	ldr	r0, [r7, #12]
 8015e10:	f7ff fc22 	bl	8015658 <clust2sect>
 8015e14:	4602      	mov	r2, r0
 8015e16:	68fb      	ldr	r3, [r7, #12]
 8015e18:	62da      	str	r2, [r3, #44]	; 0x2c
 8015e1a:	e012      	b.n	8015e42 <dir_next+0x13c>
						fs->wflag = 1;
 8015e1c:	68fb      	ldr	r3, [r7, #12]
 8015e1e:	2201      	movs	r2, #1
 8015e20:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8015e22:	68f8      	ldr	r0, [r7, #12]
 8015e24:	f7ff fb38 	bl	8015498 <sync_window>
 8015e28:	4603      	mov	r3, r0
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d001      	beq.n	8015e32 <dir_next+0x12c>
 8015e2e:	2301      	movs	r3, #1
 8015e30:	e02a      	b.n	8015e88 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8015e32:	693b      	ldr	r3, [r7, #16]
 8015e34:	3301      	adds	r3, #1
 8015e36:	613b      	str	r3, [r7, #16]
 8015e38:	68fb      	ldr	r3, [r7, #12]
 8015e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e3c:	1c5a      	adds	r2, r3, #1
 8015e3e:	68fb      	ldr	r3, [r7, #12]
 8015e40:	62da      	str	r2, [r3, #44]	; 0x2c
 8015e42:	68fb      	ldr	r3, [r7, #12]
 8015e44:	895b      	ldrh	r3, [r3, #10]
 8015e46:	461a      	mov	r2, r3
 8015e48:	693b      	ldr	r3, [r7, #16]
 8015e4a:	4293      	cmp	r3, r2
 8015e4c:	d3e6      	bcc.n	8015e1c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8015e4e:	68fb      	ldr	r3, [r7, #12]
 8015e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015e52:	693b      	ldr	r3, [r7, #16]
 8015e54:	1ad2      	subs	r2, r2, r3
 8015e56:	68fb      	ldr	r3, [r7, #12]
 8015e58:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	697a      	ldr	r2, [r7, #20]
 8015e5e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8015e60:	6979      	ldr	r1, [r7, #20]
 8015e62:	68f8      	ldr	r0, [r7, #12]
 8015e64:	f7ff fbf8 	bl	8015658 <clust2sect>
 8015e68:	4602      	mov	r2, r0
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	68ba      	ldr	r2, [r7, #8]
 8015e72:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8015e74:	68fb      	ldr	r3, [r7, #12]
 8015e76:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015e7a:	68bb      	ldr	r3, [r7, #8]
 8015e7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015e80:	441a      	add	r2, r3
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8015e86:	2300      	movs	r3, #0
}
 8015e88:	4618      	mov	r0, r3
 8015e8a:	3718      	adds	r7, #24
 8015e8c:	46bd      	mov	sp, r7
 8015e8e:	bd80      	pop	{r7, pc}

08015e90 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8015e90:	b580      	push	{r7, lr}
 8015e92:	b086      	sub	sp, #24
 8015e94:	af00      	add	r7, sp, #0
 8015e96:	6078      	str	r0, [r7, #4]
 8015e98:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	681b      	ldr	r3, [r3, #0]
 8015e9e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8015ea0:	2100      	movs	r1, #0
 8015ea2:	6878      	ldr	r0, [r7, #4]
 8015ea4:	f7ff feb4 	bl	8015c10 <dir_sdi>
 8015ea8:	4603      	mov	r3, r0
 8015eaa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015eac:	7dfb      	ldrb	r3, [r7, #23]
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d12b      	bne.n	8015f0a <dir_alloc+0x7a>
		n = 0;
 8015eb2:	2300      	movs	r3, #0
 8015eb4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	69db      	ldr	r3, [r3, #28]
 8015eba:	4619      	mov	r1, r3
 8015ebc:	68f8      	ldr	r0, [r7, #12]
 8015ebe:	f7ff fb2f 	bl	8015520 <move_window>
 8015ec2:	4603      	mov	r3, r0
 8015ec4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8015ec6:	7dfb      	ldrb	r3, [r7, #23]
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d11d      	bne.n	8015f08 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	6a1b      	ldr	r3, [r3, #32]
 8015ed0:	781b      	ldrb	r3, [r3, #0]
 8015ed2:	2be5      	cmp	r3, #229	; 0xe5
 8015ed4:	d004      	beq.n	8015ee0 <dir_alloc+0x50>
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	6a1b      	ldr	r3, [r3, #32]
 8015eda:	781b      	ldrb	r3, [r3, #0]
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d107      	bne.n	8015ef0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8015ee0:	693b      	ldr	r3, [r7, #16]
 8015ee2:	3301      	adds	r3, #1
 8015ee4:	613b      	str	r3, [r7, #16]
 8015ee6:	693a      	ldr	r2, [r7, #16]
 8015ee8:	683b      	ldr	r3, [r7, #0]
 8015eea:	429a      	cmp	r2, r3
 8015eec:	d102      	bne.n	8015ef4 <dir_alloc+0x64>
 8015eee:	e00c      	b.n	8015f0a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8015ef0:	2300      	movs	r3, #0
 8015ef2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8015ef4:	2101      	movs	r1, #1
 8015ef6:	6878      	ldr	r0, [r7, #4]
 8015ef8:	f7ff ff05 	bl	8015d06 <dir_next>
 8015efc:	4603      	mov	r3, r0
 8015efe:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8015f00:	7dfb      	ldrb	r3, [r7, #23]
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	d0d7      	beq.n	8015eb6 <dir_alloc+0x26>
 8015f06:	e000      	b.n	8015f0a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8015f08:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8015f0a:	7dfb      	ldrb	r3, [r7, #23]
 8015f0c:	2b04      	cmp	r3, #4
 8015f0e:	d101      	bne.n	8015f14 <dir_alloc+0x84>
 8015f10:	2307      	movs	r3, #7
 8015f12:	75fb      	strb	r3, [r7, #23]
	return res;
 8015f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8015f16:	4618      	mov	r0, r3
 8015f18:	3718      	adds	r7, #24
 8015f1a:	46bd      	mov	sp, r7
 8015f1c:	bd80      	pop	{r7, pc}

08015f1e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8015f1e:	b580      	push	{r7, lr}
 8015f20:	b084      	sub	sp, #16
 8015f22:	af00      	add	r7, sp, #0
 8015f24:	6078      	str	r0, [r7, #4]
 8015f26:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8015f28:	683b      	ldr	r3, [r7, #0]
 8015f2a:	331a      	adds	r3, #26
 8015f2c:	4618      	mov	r0, r3
 8015f2e:	f7ff f847 	bl	8014fc0 <ld_word>
 8015f32:	4603      	mov	r3, r0
 8015f34:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	781b      	ldrb	r3, [r3, #0]
 8015f3a:	2b03      	cmp	r3, #3
 8015f3c:	d109      	bne.n	8015f52 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8015f3e:	683b      	ldr	r3, [r7, #0]
 8015f40:	3314      	adds	r3, #20
 8015f42:	4618      	mov	r0, r3
 8015f44:	f7ff f83c 	bl	8014fc0 <ld_word>
 8015f48:	4603      	mov	r3, r0
 8015f4a:	041b      	lsls	r3, r3, #16
 8015f4c:	68fa      	ldr	r2, [r7, #12]
 8015f4e:	4313      	orrs	r3, r2
 8015f50:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8015f52:	68fb      	ldr	r3, [r7, #12]
}
 8015f54:	4618      	mov	r0, r3
 8015f56:	3710      	adds	r7, #16
 8015f58:	46bd      	mov	sp, r7
 8015f5a:	bd80      	pop	{r7, pc}

08015f5c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8015f5c:	b580      	push	{r7, lr}
 8015f5e:	b084      	sub	sp, #16
 8015f60:	af00      	add	r7, sp, #0
 8015f62:	60f8      	str	r0, [r7, #12]
 8015f64:	60b9      	str	r1, [r7, #8]
 8015f66:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8015f68:	68bb      	ldr	r3, [r7, #8]
 8015f6a:	331a      	adds	r3, #26
 8015f6c:	687a      	ldr	r2, [r7, #4]
 8015f6e:	b292      	uxth	r2, r2
 8015f70:	4611      	mov	r1, r2
 8015f72:	4618      	mov	r0, r3
 8015f74:	f7ff f85f 	bl	8015036 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8015f78:	68fb      	ldr	r3, [r7, #12]
 8015f7a:	781b      	ldrb	r3, [r3, #0]
 8015f7c:	2b03      	cmp	r3, #3
 8015f7e:	d109      	bne.n	8015f94 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8015f80:	68bb      	ldr	r3, [r7, #8]
 8015f82:	f103 0214 	add.w	r2, r3, #20
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	0c1b      	lsrs	r3, r3, #16
 8015f8a:	b29b      	uxth	r3, r3
 8015f8c:	4619      	mov	r1, r3
 8015f8e:	4610      	mov	r0, r2
 8015f90:	f7ff f851 	bl	8015036 <st_word>
	}
}
 8015f94:	bf00      	nop
 8015f96:	3710      	adds	r7, #16
 8015f98:	46bd      	mov	sp, r7
 8015f9a:	bd80      	pop	{r7, pc}

08015f9c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8015f9c:	b580      	push	{r7, lr}
 8015f9e:	b086      	sub	sp, #24
 8015fa0:	af00      	add	r7, sp, #0
 8015fa2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	681b      	ldr	r3, [r3, #0]
 8015fa8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8015faa:	2100      	movs	r1, #0
 8015fac:	6878      	ldr	r0, [r7, #4]
 8015fae:	f7ff fe2f 	bl	8015c10 <dir_sdi>
 8015fb2:	4603      	mov	r3, r0
 8015fb4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8015fb6:	7dfb      	ldrb	r3, [r7, #23]
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d001      	beq.n	8015fc0 <dir_find+0x24>
 8015fbc:	7dfb      	ldrb	r3, [r7, #23]
 8015fbe:	e03e      	b.n	801603e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	69db      	ldr	r3, [r3, #28]
 8015fc4:	4619      	mov	r1, r3
 8015fc6:	6938      	ldr	r0, [r7, #16]
 8015fc8:	f7ff faaa 	bl	8015520 <move_window>
 8015fcc:	4603      	mov	r3, r0
 8015fce:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8015fd0:	7dfb      	ldrb	r3, [r7, #23]
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d12f      	bne.n	8016036 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	6a1b      	ldr	r3, [r3, #32]
 8015fda:	781b      	ldrb	r3, [r3, #0]
 8015fdc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8015fde:	7bfb      	ldrb	r3, [r7, #15]
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	d102      	bne.n	8015fea <dir_find+0x4e>
 8015fe4:	2304      	movs	r3, #4
 8015fe6:	75fb      	strb	r3, [r7, #23]
 8015fe8:	e028      	b.n	801603c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	6a1b      	ldr	r3, [r3, #32]
 8015fee:	330b      	adds	r3, #11
 8015ff0:	781b      	ldrb	r3, [r3, #0]
 8015ff2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015ff6:	b2da      	uxtb	r2, r3
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	6a1b      	ldr	r3, [r3, #32]
 8016000:	330b      	adds	r3, #11
 8016002:	781b      	ldrb	r3, [r3, #0]
 8016004:	f003 0308 	and.w	r3, r3, #8
 8016008:	2b00      	cmp	r3, #0
 801600a:	d10a      	bne.n	8016022 <dir_find+0x86>
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	6a18      	ldr	r0, [r3, #32]
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	3324      	adds	r3, #36	; 0x24
 8016014:	220b      	movs	r2, #11
 8016016:	4619      	mov	r1, r3
 8016018:	f7ff f88f 	bl	801513a <mem_cmp>
 801601c:	4603      	mov	r3, r0
 801601e:	2b00      	cmp	r3, #0
 8016020:	d00b      	beq.n	801603a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8016022:	2100      	movs	r1, #0
 8016024:	6878      	ldr	r0, [r7, #4]
 8016026:	f7ff fe6e 	bl	8015d06 <dir_next>
 801602a:	4603      	mov	r3, r0
 801602c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801602e:	7dfb      	ldrb	r3, [r7, #23]
 8016030:	2b00      	cmp	r3, #0
 8016032:	d0c5      	beq.n	8015fc0 <dir_find+0x24>
 8016034:	e002      	b.n	801603c <dir_find+0xa0>
		if (res != FR_OK) break;
 8016036:	bf00      	nop
 8016038:	e000      	b.n	801603c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801603a:	bf00      	nop

	return res;
 801603c:	7dfb      	ldrb	r3, [r7, #23]
}
 801603e:	4618      	mov	r0, r3
 8016040:	3718      	adds	r7, #24
 8016042:	46bd      	mov	sp, r7
 8016044:	bd80      	pop	{r7, pc}

08016046 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8016046:	b580      	push	{r7, lr}
 8016048:	b084      	sub	sp, #16
 801604a:	af00      	add	r7, sp, #0
 801604c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	681b      	ldr	r3, [r3, #0]
 8016052:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8016054:	2101      	movs	r1, #1
 8016056:	6878      	ldr	r0, [r7, #4]
 8016058:	f7ff ff1a 	bl	8015e90 <dir_alloc>
 801605c:	4603      	mov	r3, r0
 801605e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8016060:	7bfb      	ldrb	r3, [r7, #15]
 8016062:	2b00      	cmp	r3, #0
 8016064:	d11c      	bne.n	80160a0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	69db      	ldr	r3, [r3, #28]
 801606a:	4619      	mov	r1, r3
 801606c:	68b8      	ldr	r0, [r7, #8]
 801606e:	f7ff fa57 	bl	8015520 <move_window>
 8016072:	4603      	mov	r3, r0
 8016074:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8016076:	7bfb      	ldrb	r3, [r7, #15]
 8016078:	2b00      	cmp	r3, #0
 801607a:	d111      	bne.n	80160a0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	6a1b      	ldr	r3, [r3, #32]
 8016080:	2220      	movs	r2, #32
 8016082:	2100      	movs	r1, #0
 8016084:	4618      	mov	r0, r3
 8016086:	f7ff f83e 	bl	8015106 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	6a18      	ldr	r0, [r3, #32]
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	3324      	adds	r3, #36	; 0x24
 8016092:	220b      	movs	r2, #11
 8016094:	4619      	mov	r1, r3
 8016096:	f7ff f815 	bl	80150c4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801609a:	68bb      	ldr	r3, [r7, #8]
 801609c:	2201      	movs	r2, #1
 801609e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80160a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80160a2:	4618      	mov	r0, r3
 80160a4:	3710      	adds	r7, #16
 80160a6:	46bd      	mov	sp, r7
 80160a8:	bd80      	pop	{r7, pc}
	...

080160ac <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80160ac:	b580      	push	{r7, lr}
 80160ae:	b088      	sub	sp, #32
 80160b0:	af00      	add	r7, sp, #0
 80160b2:	6078      	str	r0, [r7, #4]
 80160b4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80160b6:	683b      	ldr	r3, [r7, #0]
 80160b8:	681b      	ldr	r3, [r3, #0]
 80160ba:	60fb      	str	r3, [r7, #12]
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	3324      	adds	r3, #36	; 0x24
 80160c0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80160c2:	220b      	movs	r2, #11
 80160c4:	2120      	movs	r1, #32
 80160c6:	68b8      	ldr	r0, [r7, #8]
 80160c8:	f7ff f81d 	bl	8015106 <mem_set>
	si = i = 0; ni = 8;
 80160cc:	2300      	movs	r3, #0
 80160ce:	613b      	str	r3, [r7, #16]
 80160d0:	693b      	ldr	r3, [r7, #16]
 80160d2:	617b      	str	r3, [r7, #20]
 80160d4:	2308      	movs	r3, #8
 80160d6:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80160d8:	697b      	ldr	r3, [r7, #20]
 80160da:	1c5a      	adds	r2, r3, #1
 80160dc:	617a      	str	r2, [r7, #20]
 80160de:	68fa      	ldr	r2, [r7, #12]
 80160e0:	4413      	add	r3, r2
 80160e2:	781b      	ldrb	r3, [r3, #0]
 80160e4:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80160e6:	7ffb      	ldrb	r3, [r7, #31]
 80160e8:	2b20      	cmp	r3, #32
 80160ea:	d94e      	bls.n	801618a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80160ec:	7ffb      	ldrb	r3, [r7, #31]
 80160ee:	2b2f      	cmp	r3, #47	; 0x2f
 80160f0:	d006      	beq.n	8016100 <create_name+0x54>
 80160f2:	7ffb      	ldrb	r3, [r7, #31]
 80160f4:	2b5c      	cmp	r3, #92	; 0x5c
 80160f6:	d110      	bne.n	801611a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80160f8:	e002      	b.n	8016100 <create_name+0x54>
 80160fa:	697b      	ldr	r3, [r7, #20]
 80160fc:	3301      	adds	r3, #1
 80160fe:	617b      	str	r3, [r7, #20]
 8016100:	68fa      	ldr	r2, [r7, #12]
 8016102:	697b      	ldr	r3, [r7, #20]
 8016104:	4413      	add	r3, r2
 8016106:	781b      	ldrb	r3, [r3, #0]
 8016108:	2b2f      	cmp	r3, #47	; 0x2f
 801610a:	d0f6      	beq.n	80160fa <create_name+0x4e>
 801610c:	68fa      	ldr	r2, [r7, #12]
 801610e:	697b      	ldr	r3, [r7, #20]
 8016110:	4413      	add	r3, r2
 8016112:	781b      	ldrb	r3, [r3, #0]
 8016114:	2b5c      	cmp	r3, #92	; 0x5c
 8016116:	d0f0      	beq.n	80160fa <create_name+0x4e>
			break;
 8016118:	e038      	b.n	801618c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801611a:	7ffb      	ldrb	r3, [r7, #31]
 801611c:	2b2e      	cmp	r3, #46	; 0x2e
 801611e:	d003      	beq.n	8016128 <create_name+0x7c>
 8016120:	693a      	ldr	r2, [r7, #16]
 8016122:	69bb      	ldr	r3, [r7, #24]
 8016124:	429a      	cmp	r2, r3
 8016126:	d30c      	bcc.n	8016142 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8016128:	69bb      	ldr	r3, [r7, #24]
 801612a:	2b0b      	cmp	r3, #11
 801612c:	d002      	beq.n	8016134 <create_name+0x88>
 801612e:	7ffb      	ldrb	r3, [r7, #31]
 8016130:	2b2e      	cmp	r3, #46	; 0x2e
 8016132:	d001      	beq.n	8016138 <create_name+0x8c>
 8016134:	2306      	movs	r3, #6
 8016136:	e044      	b.n	80161c2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8016138:	2308      	movs	r3, #8
 801613a:	613b      	str	r3, [r7, #16]
 801613c:	230b      	movs	r3, #11
 801613e:	61bb      	str	r3, [r7, #24]
			continue;
 8016140:	e022      	b.n	8016188 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8016142:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016146:	2b00      	cmp	r3, #0
 8016148:	da04      	bge.n	8016154 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801614a:	7ffb      	ldrb	r3, [r7, #31]
 801614c:	3b80      	subs	r3, #128	; 0x80
 801614e:	4a1f      	ldr	r2, [pc, #124]	; (80161cc <create_name+0x120>)
 8016150:	5cd3      	ldrb	r3, [r2, r3]
 8016152:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8016154:	7ffb      	ldrb	r3, [r7, #31]
 8016156:	4619      	mov	r1, r3
 8016158:	481d      	ldr	r0, [pc, #116]	; (80161d0 <create_name+0x124>)
 801615a:	f7ff f815 	bl	8015188 <chk_chr>
 801615e:	4603      	mov	r3, r0
 8016160:	2b00      	cmp	r3, #0
 8016162:	d001      	beq.n	8016168 <create_name+0xbc>
 8016164:	2306      	movs	r3, #6
 8016166:	e02c      	b.n	80161c2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8016168:	7ffb      	ldrb	r3, [r7, #31]
 801616a:	2b60      	cmp	r3, #96	; 0x60
 801616c:	d905      	bls.n	801617a <create_name+0xce>
 801616e:	7ffb      	ldrb	r3, [r7, #31]
 8016170:	2b7a      	cmp	r3, #122	; 0x7a
 8016172:	d802      	bhi.n	801617a <create_name+0xce>
 8016174:	7ffb      	ldrb	r3, [r7, #31]
 8016176:	3b20      	subs	r3, #32
 8016178:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 801617a:	693b      	ldr	r3, [r7, #16]
 801617c:	1c5a      	adds	r2, r3, #1
 801617e:	613a      	str	r2, [r7, #16]
 8016180:	68ba      	ldr	r2, [r7, #8]
 8016182:	4413      	add	r3, r2
 8016184:	7ffa      	ldrb	r2, [r7, #31]
 8016186:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8016188:	e7a6      	b.n	80160d8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801618a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 801618c:	68fa      	ldr	r2, [r7, #12]
 801618e:	697b      	ldr	r3, [r7, #20]
 8016190:	441a      	add	r2, r3
 8016192:	683b      	ldr	r3, [r7, #0]
 8016194:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8016196:	693b      	ldr	r3, [r7, #16]
 8016198:	2b00      	cmp	r3, #0
 801619a:	d101      	bne.n	80161a0 <create_name+0xf4>
 801619c:	2306      	movs	r3, #6
 801619e:	e010      	b.n	80161c2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80161a0:	68bb      	ldr	r3, [r7, #8]
 80161a2:	781b      	ldrb	r3, [r3, #0]
 80161a4:	2be5      	cmp	r3, #229	; 0xe5
 80161a6:	d102      	bne.n	80161ae <create_name+0x102>
 80161a8:	68bb      	ldr	r3, [r7, #8]
 80161aa:	2205      	movs	r2, #5
 80161ac:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80161ae:	7ffb      	ldrb	r3, [r7, #31]
 80161b0:	2b20      	cmp	r3, #32
 80161b2:	d801      	bhi.n	80161b8 <create_name+0x10c>
 80161b4:	2204      	movs	r2, #4
 80161b6:	e000      	b.n	80161ba <create_name+0x10e>
 80161b8:	2200      	movs	r2, #0
 80161ba:	68bb      	ldr	r3, [r7, #8]
 80161bc:	330b      	adds	r3, #11
 80161be:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80161c0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80161c2:	4618      	mov	r0, r3
 80161c4:	3720      	adds	r7, #32
 80161c6:	46bd      	mov	sp, r7
 80161c8:	bd80      	pop	{r7, pc}
 80161ca:	bf00      	nop
 80161cc:	0801995c 	.word	0x0801995c
 80161d0:	08019880 	.word	0x08019880

080161d4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80161d4:	b580      	push	{r7, lr}
 80161d6:	b086      	sub	sp, #24
 80161d8:	af00      	add	r7, sp, #0
 80161da:	6078      	str	r0, [r7, #4]
 80161dc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80161e2:	693b      	ldr	r3, [r7, #16]
 80161e4:	681b      	ldr	r3, [r3, #0]
 80161e6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80161e8:	e002      	b.n	80161f0 <follow_path+0x1c>
 80161ea:	683b      	ldr	r3, [r7, #0]
 80161ec:	3301      	adds	r3, #1
 80161ee:	603b      	str	r3, [r7, #0]
 80161f0:	683b      	ldr	r3, [r7, #0]
 80161f2:	781b      	ldrb	r3, [r3, #0]
 80161f4:	2b2f      	cmp	r3, #47	; 0x2f
 80161f6:	d0f8      	beq.n	80161ea <follow_path+0x16>
 80161f8:	683b      	ldr	r3, [r7, #0]
 80161fa:	781b      	ldrb	r3, [r3, #0]
 80161fc:	2b5c      	cmp	r3, #92	; 0x5c
 80161fe:	d0f4      	beq.n	80161ea <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8016200:	693b      	ldr	r3, [r7, #16]
 8016202:	2200      	movs	r2, #0
 8016204:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8016206:	683b      	ldr	r3, [r7, #0]
 8016208:	781b      	ldrb	r3, [r3, #0]
 801620a:	2b1f      	cmp	r3, #31
 801620c:	d80a      	bhi.n	8016224 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	2280      	movs	r2, #128	; 0x80
 8016212:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8016216:	2100      	movs	r1, #0
 8016218:	6878      	ldr	r0, [r7, #4]
 801621a:	f7ff fcf9 	bl	8015c10 <dir_sdi>
 801621e:	4603      	mov	r3, r0
 8016220:	75fb      	strb	r3, [r7, #23]
 8016222:	e043      	b.n	80162ac <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8016224:	463b      	mov	r3, r7
 8016226:	4619      	mov	r1, r3
 8016228:	6878      	ldr	r0, [r7, #4]
 801622a:	f7ff ff3f 	bl	80160ac <create_name>
 801622e:	4603      	mov	r3, r0
 8016230:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8016232:	7dfb      	ldrb	r3, [r7, #23]
 8016234:	2b00      	cmp	r3, #0
 8016236:	d134      	bne.n	80162a2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8016238:	6878      	ldr	r0, [r7, #4]
 801623a:	f7ff feaf 	bl	8015f9c <dir_find>
 801623e:	4603      	mov	r3, r0
 8016240:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8016248:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801624a:	7dfb      	ldrb	r3, [r7, #23]
 801624c:	2b00      	cmp	r3, #0
 801624e:	d00a      	beq.n	8016266 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8016250:	7dfb      	ldrb	r3, [r7, #23]
 8016252:	2b04      	cmp	r3, #4
 8016254:	d127      	bne.n	80162a6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8016256:	7afb      	ldrb	r3, [r7, #11]
 8016258:	f003 0304 	and.w	r3, r3, #4
 801625c:	2b00      	cmp	r3, #0
 801625e:	d122      	bne.n	80162a6 <follow_path+0xd2>
 8016260:	2305      	movs	r3, #5
 8016262:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8016264:	e01f      	b.n	80162a6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8016266:	7afb      	ldrb	r3, [r7, #11]
 8016268:	f003 0304 	and.w	r3, r3, #4
 801626c:	2b00      	cmp	r3, #0
 801626e:	d11c      	bne.n	80162aa <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8016270:	693b      	ldr	r3, [r7, #16]
 8016272:	799b      	ldrb	r3, [r3, #6]
 8016274:	f003 0310 	and.w	r3, r3, #16
 8016278:	2b00      	cmp	r3, #0
 801627a:	d102      	bne.n	8016282 <follow_path+0xae>
				res = FR_NO_PATH; break;
 801627c:	2305      	movs	r3, #5
 801627e:	75fb      	strb	r3, [r7, #23]
 8016280:	e014      	b.n	80162ac <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8016282:	68fb      	ldr	r3, [r7, #12]
 8016284:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	695b      	ldr	r3, [r3, #20]
 801628c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016290:	4413      	add	r3, r2
 8016292:	4619      	mov	r1, r3
 8016294:	68f8      	ldr	r0, [r7, #12]
 8016296:	f7ff fe42 	bl	8015f1e <ld_clust>
 801629a:	4602      	mov	r2, r0
 801629c:	693b      	ldr	r3, [r7, #16]
 801629e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80162a0:	e7c0      	b.n	8016224 <follow_path+0x50>
			if (res != FR_OK) break;
 80162a2:	bf00      	nop
 80162a4:	e002      	b.n	80162ac <follow_path+0xd8>
				break;
 80162a6:	bf00      	nop
 80162a8:	e000      	b.n	80162ac <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80162aa:	bf00      	nop
			}
		}
	}

	return res;
 80162ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80162ae:	4618      	mov	r0, r3
 80162b0:	3718      	adds	r7, #24
 80162b2:	46bd      	mov	sp, r7
 80162b4:	bd80      	pop	{r7, pc}

080162b6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80162b6:	b480      	push	{r7}
 80162b8:	b087      	sub	sp, #28
 80162ba:	af00      	add	r7, sp, #0
 80162bc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80162be:	f04f 33ff 	mov.w	r3, #4294967295
 80162c2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	681b      	ldr	r3, [r3, #0]
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d031      	beq.n	8016330 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	681b      	ldr	r3, [r3, #0]
 80162d0:	617b      	str	r3, [r7, #20]
 80162d2:	e002      	b.n	80162da <get_ldnumber+0x24>
 80162d4:	697b      	ldr	r3, [r7, #20]
 80162d6:	3301      	adds	r3, #1
 80162d8:	617b      	str	r3, [r7, #20]
 80162da:	697b      	ldr	r3, [r7, #20]
 80162dc:	781b      	ldrb	r3, [r3, #0]
 80162de:	2b20      	cmp	r3, #32
 80162e0:	d903      	bls.n	80162ea <get_ldnumber+0x34>
 80162e2:	697b      	ldr	r3, [r7, #20]
 80162e4:	781b      	ldrb	r3, [r3, #0]
 80162e6:	2b3a      	cmp	r3, #58	; 0x3a
 80162e8:	d1f4      	bne.n	80162d4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80162ea:	697b      	ldr	r3, [r7, #20]
 80162ec:	781b      	ldrb	r3, [r3, #0]
 80162ee:	2b3a      	cmp	r3, #58	; 0x3a
 80162f0:	d11c      	bne.n	801632c <get_ldnumber+0x76>
			tp = *path;
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	681b      	ldr	r3, [r3, #0]
 80162f6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80162f8:	68fb      	ldr	r3, [r7, #12]
 80162fa:	1c5a      	adds	r2, r3, #1
 80162fc:	60fa      	str	r2, [r7, #12]
 80162fe:	781b      	ldrb	r3, [r3, #0]
 8016300:	3b30      	subs	r3, #48	; 0x30
 8016302:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8016304:	68bb      	ldr	r3, [r7, #8]
 8016306:	2b09      	cmp	r3, #9
 8016308:	d80e      	bhi.n	8016328 <get_ldnumber+0x72>
 801630a:	68fa      	ldr	r2, [r7, #12]
 801630c:	697b      	ldr	r3, [r7, #20]
 801630e:	429a      	cmp	r2, r3
 8016310:	d10a      	bne.n	8016328 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8016312:	68bb      	ldr	r3, [r7, #8]
 8016314:	2b00      	cmp	r3, #0
 8016316:	d107      	bne.n	8016328 <get_ldnumber+0x72>
					vol = (int)i;
 8016318:	68bb      	ldr	r3, [r7, #8]
 801631a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801631c:	697b      	ldr	r3, [r7, #20]
 801631e:	3301      	adds	r3, #1
 8016320:	617b      	str	r3, [r7, #20]
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	697a      	ldr	r2, [r7, #20]
 8016326:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8016328:	693b      	ldr	r3, [r7, #16]
 801632a:	e002      	b.n	8016332 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801632c:	2300      	movs	r3, #0
 801632e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8016330:	693b      	ldr	r3, [r7, #16]
}
 8016332:	4618      	mov	r0, r3
 8016334:	371c      	adds	r7, #28
 8016336:	46bd      	mov	sp, r7
 8016338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801633c:	4770      	bx	lr
	...

08016340 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8016340:	b580      	push	{r7, lr}
 8016342:	b082      	sub	sp, #8
 8016344:	af00      	add	r7, sp, #0
 8016346:	6078      	str	r0, [r7, #4]
 8016348:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	2200      	movs	r2, #0
 801634e:	70da      	strb	r2, [r3, #3]
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	f04f 32ff 	mov.w	r2, #4294967295
 8016356:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8016358:	6839      	ldr	r1, [r7, #0]
 801635a:	6878      	ldr	r0, [r7, #4]
 801635c:	f7ff f8e0 	bl	8015520 <move_window>
 8016360:	4603      	mov	r3, r0
 8016362:	2b00      	cmp	r3, #0
 8016364:	d001      	beq.n	801636a <check_fs+0x2a>
 8016366:	2304      	movs	r3, #4
 8016368:	e038      	b.n	80163dc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	3330      	adds	r3, #48	; 0x30
 801636e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016372:	4618      	mov	r0, r3
 8016374:	f7fe fe24 	bl	8014fc0 <ld_word>
 8016378:	4603      	mov	r3, r0
 801637a:	461a      	mov	r2, r3
 801637c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8016380:	429a      	cmp	r2, r3
 8016382:	d001      	beq.n	8016388 <check_fs+0x48>
 8016384:	2303      	movs	r3, #3
 8016386:	e029      	b.n	80163dc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801638e:	2be9      	cmp	r3, #233	; 0xe9
 8016390:	d009      	beq.n	80163a6 <check_fs+0x66>
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016398:	2beb      	cmp	r3, #235	; 0xeb
 801639a:	d11e      	bne.n	80163da <check_fs+0x9a>
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80163a2:	2b90      	cmp	r3, #144	; 0x90
 80163a4:	d119      	bne.n	80163da <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	3330      	adds	r3, #48	; 0x30
 80163aa:	3336      	adds	r3, #54	; 0x36
 80163ac:	4618      	mov	r0, r3
 80163ae:	f7fe fe1f 	bl	8014ff0 <ld_dword>
 80163b2:	4603      	mov	r3, r0
 80163b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80163b8:	4a0a      	ldr	r2, [pc, #40]	; (80163e4 <check_fs+0xa4>)
 80163ba:	4293      	cmp	r3, r2
 80163bc:	d101      	bne.n	80163c2 <check_fs+0x82>
 80163be:	2300      	movs	r3, #0
 80163c0:	e00c      	b.n	80163dc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	3330      	adds	r3, #48	; 0x30
 80163c6:	3352      	adds	r3, #82	; 0x52
 80163c8:	4618      	mov	r0, r3
 80163ca:	f7fe fe11 	bl	8014ff0 <ld_dword>
 80163ce:	4602      	mov	r2, r0
 80163d0:	4b05      	ldr	r3, [pc, #20]	; (80163e8 <check_fs+0xa8>)
 80163d2:	429a      	cmp	r2, r3
 80163d4:	d101      	bne.n	80163da <check_fs+0x9a>
 80163d6:	2300      	movs	r3, #0
 80163d8:	e000      	b.n	80163dc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80163da:	2302      	movs	r3, #2
}
 80163dc:	4618      	mov	r0, r3
 80163de:	3708      	adds	r7, #8
 80163e0:	46bd      	mov	sp, r7
 80163e2:	bd80      	pop	{r7, pc}
 80163e4:	00544146 	.word	0x00544146
 80163e8:	33544146 	.word	0x33544146

080163ec <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80163ec:	b580      	push	{r7, lr}
 80163ee:	b096      	sub	sp, #88	; 0x58
 80163f0:	af00      	add	r7, sp, #0
 80163f2:	60f8      	str	r0, [r7, #12]
 80163f4:	60b9      	str	r1, [r7, #8]
 80163f6:	4613      	mov	r3, r2
 80163f8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80163fa:	68bb      	ldr	r3, [r7, #8]
 80163fc:	2200      	movs	r2, #0
 80163fe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8016400:	68f8      	ldr	r0, [r7, #12]
 8016402:	f7ff ff58 	bl	80162b6 <get_ldnumber>
 8016406:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8016408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801640a:	2b00      	cmp	r3, #0
 801640c:	da01      	bge.n	8016412 <find_volume+0x26>
 801640e:	230b      	movs	r3, #11
 8016410:	e22e      	b.n	8016870 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8016412:	4aa8      	ldr	r2, [pc, #672]	; (80166b4 <find_volume+0x2c8>)
 8016414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801641a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801641c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801641e:	2b00      	cmp	r3, #0
 8016420:	d101      	bne.n	8016426 <find_volume+0x3a>
 8016422:	230c      	movs	r3, #12
 8016424:	e224      	b.n	8016870 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8016426:	68bb      	ldr	r3, [r7, #8]
 8016428:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801642a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801642c:	79fb      	ldrb	r3, [r7, #7]
 801642e:	f023 0301 	bic.w	r3, r3, #1
 8016432:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8016434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016436:	781b      	ldrb	r3, [r3, #0]
 8016438:	2b00      	cmp	r3, #0
 801643a:	d01a      	beq.n	8016472 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801643c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801643e:	785b      	ldrb	r3, [r3, #1]
 8016440:	4618      	mov	r0, r3
 8016442:	f7fe fd1f 	bl	8014e84 <disk_status>
 8016446:	4603      	mov	r3, r0
 8016448:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801644c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016450:	f003 0301 	and.w	r3, r3, #1
 8016454:	2b00      	cmp	r3, #0
 8016456:	d10c      	bne.n	8016472 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8016458:	79fb      	ldrb	r3, [r7, #7]
 801645a:	2b00      	cmp	r3, #0
 801645c:	d007      	beq.n	801646e <find_volume+0x82>
 801645e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016462:	f003 0304 	and.w	r3, r3, #4
 8016466:	2b00      	cmp	r3, #0
 8016468:	d001      	beq.n	801646e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801646a:	230a      	movs	r3, #10
 801646c:	e200      	b.n	8016870 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 801646e:	2300      	movs	r3, #0
 8016470:	e1fe      	b.n	8016870 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8016472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016474:	2200      	movs	r2, #0
 8016476:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8016478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801647a:	b2da      	uxtb	r2, r3
 801647c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801647e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8016480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016482:	785b      	ldrb	r3, [r3, #1]
 8016484:	4618      	mov	r0, r3
 8016486:	f7fe fd17 	bl	8014eb8 <disk_initialize>
 801648a:	4603      	mov	r3, r0
 801648c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8016490:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016494:	f003 0301 	and.w	r3, r3, #1
 8016498:	2b00      	cmp	r3, #0
 801649a:	d001      	beq.n	80164a0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801649c:	2303      	movs	r3, #3
 801649e:	e1e7      	b.n	8016870 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80164a0:	79fb      	ldrb	r3, [r7, #7]
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	d007      	beq.n	80164b6 <find_volume+0xca>
 80164a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80164aa:	f003 0304 	and.w	r3, r3, #4
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d001      	beq.n	80164b6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80164b2:	230a      	movs	r3, #10
 80164b4:	e1dc      	b.n	8016870 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80164b6:	2300      	movs	r3, #0
 80164b8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80164ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80164bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80164be:	f7ff ff3f 	bl	8016340 <check_fs>
 80164c2:	4603      	mov	r3, r0
 80164c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80164c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80164cc:	2b02      	cmp	r3, #2
 80164ce:	d14b      	bne.n	8016568 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80164d0:	2300      	movs	r3, #0
 80164d2:	643b      	str	r3, [r7, #64]	; 0x40
 80164d4:	e01f      	b.n	8016516 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80164d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80164dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80164de:	011b      	lsls	r3, r3, #4
 80164e0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80164e4:	4413      	add	r3, r2
 80164e6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80164e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164ea:	3304      	adds	r3, #4
 80164ec:	781b      	ldrb	r3, [r3, #0]
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d006      	beq.n	8016500 <find_volume+0x114>
 80164f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164f4:	3308      	adds	r3, #8
 80164f6:	4618      	mov	r0, r3
 80164f8:	f7fe fd7a 	bl	8014ff0 <ld_dword>
 80164fc:	4602      	mov	r2, r0
 80164fe:	e000      	b.n	8016502 <find_volume+0x116>
 8016500:	2200      	movs	r2, #0
 8016502:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016504:	009b      	lsls	r3, r3, #2
 8016506:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801650a:	440b      	add	r3, r1
 801650c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8016510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016512:	3301      	adds	r3, #1
 8016514:	643b      	str	r3, [r7, #64]	; 0x40
 8016516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016518:	2b03      	cmp	r3, #3
 801651a:	d9dc      	bls.n	80164d6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801651c:	2300      	movs	r3, #0
 801651e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8016520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016522:	2b00      	cmp	r3, #0
 8016524:	d002      	beq.n	801652c <find_volume+0x140>
 8016526:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016528:	3b01      	subs	r3, #1
 801652a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801652c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801652e:	009b      	lsls	r3, r3, #2
 8016530:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8016534:	4413      	add	r3, r2
 8016536:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801653a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801653c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801653e:	2b00      	cmp	r3, #0
 8016540:	d005      	beq.n	801654e <find_volume+0x162>
 8016542:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016544:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016546:	f7ff fefb 	bl	8016340 <check_fs>
 801654a:	4603      	mov	r3, r0
 801654c:	e000      	b.n	8016550 <find_volume+0x164>
 801654e:	2303      	movs	r3, #3
 8016550:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8016554:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016558:	2b01      	cmp	r3, #1
 801655a:	d905      	bls.n	8016568 <find_volume+0x17c>
 801655c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801655e:	3301      	adds	r3, #1
 8016560:	643b      	str	r3, [r7, #64]	; 0x40
 8016562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016564:	2b03      	cmp	r3, #3
 8016566:	d9e1      	bls.n	801652c <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8016568:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801656c:	2b04      	cmp	r3, #4
 801656e:	d101      	bne.n	8016574 <find_volume+0x188>
 8016570:	2301      	movs	r3, #1
 8016572:	e17d      	b.n	8016870 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8016574:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016578:	2b01      	cmp	r3, #1
 801657a:	d901      	bls.n	8016580 <find_volume+0x194>
 801657c:	230d      	movs	r3, #13
 801657e:	e177      	b.n	8016870 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8016580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016582:	3330      	adds	r3, #48	; 0x30
 8016584:	330b      	adds	r3, #11
 8016586:	4618      	mov	r0, r3
 8016588:	f7fe fd1a 	bl	8014fc0 <ld_word>
 801658c:	4603      	mov	r3, r0
 801658e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016592:	d001      	beq.n	8016598 <find_volume+0x1ac>
 8016594:	230d      	movs	r3, #13
 8016596:	e16b      	b.n	8016870 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8016598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801659a:	3330      	adds	r3, #48	; 0x30
 801659c:	3316      	adds	r3, #22
 801659e:	4618      	mov	r0, r3
 80165a0:	f7fe fd0e 	bl	8014fc0 <ld_word>
 80165a4:	4603      	mov	r3, r0
 80165a6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80165a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80165aa:	2b00      	cmp	r3, #0
 80165ac:	d106      	bne.n	80165bc <find_volume+0x1d0>
 80165ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165b0:	3330      	adds	r3, #48	; 0x30
 80165b2:	3324      	adds	r3, #36	; 0x24
 80165b4:	4618      	mov	r0, r3
 80165b6:	f7fe fd1b 	bl	8014ff0 <ld_dword>
 80165ba:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80165bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80165c0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80165c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165c4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80165c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165ca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80165cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165ce:	789b      	ldrb	r3, [r3, #2]
 80165d0:	2b01      	cmp	r3, #1
 80165d2:	d005      	beq.n	80165e0 <find_volume+0x1f4>
 80165d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165d6:	789b      	ldrb	r3, [r3, #2]
 80165d8:	2b02      	cmp	r3, #2
 80165da:	d001      	beq.n	80165e0 <find_volume+0x1f4>
 80165dc:	230d      	movs	r3, #13
 80165de:	e147      	b.n	8016870 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80165e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165e2:	789b      	ldrb	r3, [r3, #2]
 80165e4:	461a      	mov	r2, r3
 80165e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80165e8:	fb02 f303 	mul.w	r3, r2, r3
 80165ec:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80165ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80165f4:	b29a      	uxth	r2, r3
 80165f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165f8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80165fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165fc:	895b      	ldrh	r3, [r3, #10]
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d008      	beq.n	8016614 <find_volume+0x228>
 8016602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016604:	895b      	ldrh	r3, [r3, #10]
 8016606:	461a      	mov	r2, r3
 8016608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801660a:	895b      	ldrh	r3, [r3, #10]
 801660c:	3b01      	subs	r3, #1
 801660e:	4013      	ands	r3, r2
 8016610:	2b00      	cmp	r3, #0
 8016612:	d001      	beq.n	8016618 <find_volume+0x22c>
 8016614:	230d      	movs	r3, #13
 8016616:	e12b      	b.n	8016870 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8016618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801661a:	3330      	adds	r3, #48	; 0x30
 801661c:	3311      	adds	r3, #17
 801661e:	4618      	mov	r0, r3
 8016620:	f7fe fcce 	bl	8014fc0 <ld_word>
 8016624:	4603      	mov	r3, r0
 8016626:	461a      	mov	r2, r3
 8016628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801662a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801662c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801662e:	891b      	ldrh	r3, [r3, #8]
 8016630:	f003 030f 	and.w	r3, r3, #15
 8016634:	b29b      	uxth	r3, r3
 8016636:	2b00      	cmp	r3, #0
 8016638:	d001      	beq.n	801663e <find_volume+0x252>
 801663a:	230d      	movs	r3, #13
 801663c:	e118      	b.n	8016870 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801663e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016640:	3330      	adds	r3, #48	; 0x30
 8016642:	3313      	adds	r3, #19
 8016644:	4618      	mov	r0, r3
 8016646:	f7fe fcbb 	bl	8014fc0 <ld_word>
 801664a:	4603      	mov	r3, r0
 801664c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801664e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016650:	2b00      	cmp	r3, #0
 8016652:	d106      	bne.n	8016662 <find_volume+0x276>
 8016654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016656:	3330      	adds	r3, #48	; 0x30
 8016658:	3320      	adds	r3, #32
 801665a:	4618      	mov	r0, r3
 801665c:	f7fe fcc8 	bl	8014ff0 <ld_dword>
 8016660:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8016662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016664:	3330      	adds	r3, #48	; 0x30
 8016666:	330e      	adds	r3, #14
 8016668:	4618      	mov	r0, r3
 801666a:	f7fe fca9 	bl	8014fc0 <ld_word>
 801666e:	4603      	mov	r3, r0
 8016670:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8016672:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8016674:	2b00      	cmp	r3, #0
 8016676:	d101      	bne.n	801667c <find_volume+0x290>
 8016678:	230d      	movs	r3, #13
 801667a:	e0f9      	b.n	8016870 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801667c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801667e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016680:	4413      	add	r3, r2
 8016682:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016684:	8912      	ldrh	r2, [r2, #8]
 8016686:	0912      	lsrs	r2, r2, #4
 8016688:	b292      	uxth	r2, r2
 801668a:	4413      	add	r3, r2
 801668c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801668e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016692:	429a      	cmp	r2, r3
 8016694:	d201      	bcs.n	801669a <find_volume+0x2ae>
 8016696:	230d      	movs	r3, #13
 8016698:	e0ea      	b.n	8016870 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801669a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801669c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801669e:	1ad3      	subs	r3, r2, r3
 80166a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80166a2:	8952      	ldrh	r2, [r2, #10]
 80166a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80166a8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80166aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166ac:	2b00      	cmp	r3, #0
 80166ae:	d103      	bne.n	80166b8 <find_volume+0x2cc>
 80166b0:	230d      	movs	r3, #13
 80166b2:	e0dd      	b.n	8016870 <find_volume+0x484>
 80166b4:	24000368 	.word	0x24000368
		fmt = FS_FAT32;
 80166b8:	2303      	movs	r3, #3
 80166ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80166be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166c0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80166c4:	4293      	cmp	r3, r2
 80166c6:	d802      	bhi.n	80166ce <find_volume+0x2e2>
 80166c8:	2302      	movs	r3, #2
 80166ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80166ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166d0:	f640 72f5 	movw	r2, #4085	; 0xff5
 80166d4:	4293      	cmp	r3, r2
 80166d6:	d802      	bhi.n	80166de <find_volume+0x2f2>
 80166d8:	2301      	movs	r3, #1
 80166da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80166de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166e0:	1c9a      	adds	r2, r3, #2
 80166e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166e4:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80166e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80166ea:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80166ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80166ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80166f0:	441a      	add	r2, r3
 80166f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166f4:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80166f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80166f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166fa:	441a      	add	r2, r3
 80166fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166fe:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8016700:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016704:	2b03      	cmp	r3, #3
 8016706:	d11e      	bne.n	8016746 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8016708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801670a:	3330      	adds	r3, #48	; 0x30
 801670c:	332a      	adds	r3, #42	; 0x2a
 801670e:	4618      	mov	r0, r3
 8016710:	f7fe fc56 	bl	8014fc0 <ld_word>
 8016714:	4603      	mov	r3, r0
 8016716:	2b00      	cmp	r3, #0
 8016718:	d001      	beq.n	801671e <find_volume+0x332>
 801671a:	230d      	movs	r3, #13
 801671c:	e0a8      	b.n	8016870 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801671e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016720:	891b      	ldrh	r3, [r3, #8]
 8016722:	2b00      	cmp	r3, #0
 8016724:	d001      	beq.n	801672a <find_volume+0x33e>
 8016726:	230d      	movs	r3, #13
 8016728:	e0a2      	b.n	8016870 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801672a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801672c:	3330      	adds	r3, #48	; 0x30
 801672e:	332c      	adds	r3, #44	; 0x2c
 8016730:	4618      	mov	r0, r3
 8016732:	f7fe fc5d 	bl	8014ff0 <ld_dword>
 8016736:	4602      	mov	r2, r0
 8016738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801673a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801673c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801673e:	695b      	ldr	r3, [r3, #20]
 8016740:	009b      	lsls	r3, r3, #2
 8016742:	647b      	str	r3, [r7, #68]	; 0x44
 8016744:	e01f      	b.n	8016786 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8016746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016748:	891b      	ldrh	r3, [r3, #8]
 801674a:	2b00      	cmp	r3, #0
 801674c:	d101      	bne.n	8016752 <find_volume+0x366>
 801674e:	230d      	movs	r3, #13
 8016750:	e08e      	b.n	8016870 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8016752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016754:	6a1a      	ldr	r2, [r3, #32]
 8016756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016758:	441a      	add	r2, r3
 801675a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801675c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801675e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016762:	2b02      	cmp	r3, #2
 8016764:	d103      	bne.n	801676e <find_volume+0x382>
 8016766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016768:	695b      	ldr	r3, [r3, #20]
 801676a:	005b      	lsls	r3, r3, #1
 801676c:	e00a      	b.n	8016784 <find_volume+0x398>
 801676e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016770:	695a      	ldr	r2, [r3, #20]
 8016772:	4613      	mov	r3, r2
 8016774:	005b      	lsls	r3, r3, #1
 8016776:	4413      	add	r3, r2
 8016778:	085a      	lsrs	r2, r3, #1
 801677a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801677c:	695b      	ldr	r3, [r3, #20]
 801677e:	f003 0301 	and.w	r3, r3, #1
 8016782:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8016784:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8016786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016788:	699a      	ldr	r2, [r3, #24]
 801678a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801678c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8016790:	0a5b      	lsrs	r3, r3, #9
 8016792:	429a      	cmp	r2, r3
 8016794:	d201      	bcs.n	801679a <find_volume+0x3ae>
 8016796:	230d      	movs	r3, #13
 8016798:	e06a      	b.n	8016870 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801679a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801679c:	f04f 32ff 	mov.w	r2, #4294967295
 80167a0:	611a      	str	r2, [r3, #16]
 80167a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167a4:	691a      	ldr	r2, [r3, #16]
 80167a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167a8:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80167aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167ac:	2280      	movs	r2, #128	; 0x80
 80167ae:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80167b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80167b4:	2b03      	cmp	r3, #3
 80167b6:	d149      	bne.n	801684c <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80167b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167ba:	3330      	adds	r3, #48	; 0x30
 80167bc:	3330      	adds	r3, #48	; 0x30
 80167be:	4618      	mov	r0, r3
 80167c0:	f7fe fbfe 	bl	8014fc0 <ld_word>
 80167c4:	4603      	mov	r3, r0
 80167c6:	2b01      	cmp	r3, #1
 80167c8:	d140      	bne.n	801684c <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 80167ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80167cc:	3301      	adds	r3, #1
 80167ce:	4619      	mov	r1, r3
 80167d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80167d2:	f7fe fea5 	bl	8015520 <move_window>
 80167d6:	4603      	mov	r3, r0
 80167d8:	2b00      	cmp	r3, #0
 80167da:	d137      	bne.n	801684c <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 80167dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167de:	2200      	movs	r2, #0
 80167e0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80167e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167e4:	3330      	adds	r3, #48	; 0x30
 80167e6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80167ea:	4618      	mov	r0, r3
 80167ec:	f7fe fbe8 	bl	8014fc0 <ld_word>
 80167f0:	4603      	mov	r3, r0
 80167f2:	461a      	mov	r2, r3
 80167f4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80167f8:	429a      	cmp	r2, r3
 80167fa:	d127      	bne.n	801684c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80167fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167fe:	3330      	adds	r3, #48	; 0x30
 8016800:	4618      	mov	r0, r3
 8016802:	f7fe fbf5 	bl	8014ff0 <ld_dword>
 8016806:	4602      	mov	r2, r0
 8016808:	4b1b      	ldr	r3, [pc, #108]	; (8016878 <find_volume+0x48c>)
 801680a:	429a      	cmp	r2, r3
 801680c:	d11e      	bne.n	801684c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801680e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016810:	3330      	adds	r3, #48	; 0x30
 8016812:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8016816:	4618      	mov	r0, r3
 8016818:	f7fe fbea 	bl	8014ff0 <ld_dword>
 801681c:	4602      	mov	r2, r0
 801681e:	4b17      	ldr	r3, [pc, #92]	; (801687c <find_volume+0x490>)
 8016820:	429a      	cmp	r2, r3
 8016822:	d113      	bne.n	801684c <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8016824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016826:	3330      	adds	r3, #48	; 0x30
 8016828:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801682c:	4618      	mov	r0, r3
 801682e:	f7fe fbdf 	bl	8014ff0 <ld_dword>
 8016832:	4602      	mov	r2, r0
 8016834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016836:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8016838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801683a:	3330      	adds	r3, #48	; 0x30
 801683c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8016840:	4618      	mov	r0, r3
 8016842:	f7fe fbd5 	bl	8014ff0 <ld_dword>
 8016846:	4602      	mov	r2, r0
 8016848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801684a:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801684c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801684e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8016852:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8016854:	4b0a      	ldr	r3, [pc, #40]	; (8016880 <find_volume+0x494>)
 8016856:	881b      	ldrh	r3, [r3, #0]
 8016858:	3301      	adds	r3, #1
 801685a:	b29a      	uxth	r2, r3
 801685c:	4b08      	ldr	r3, [pc, #32]	; (8016880 <find_volume+0x494>)
 801685e:	801a      	strh	r2, [r3, #0]
 8016860:	4b07      	ldr	r3, [pc, #28]	; (8016880 <find_volume+0x494>)
 8016862:	881a      	ldrh	r2, [r3, #0]
 8016864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016866:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8016868:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801686a:	f7fe fdf1 	bl	8015450 <clear_lock>
#endif
	return FR_OK;
 801686e:	2300      	movs	r3, #0
}
 8016870:	4618      	mov	r0, r3
 8016872:	3758      	adds	r7, #88	; 0x58
 8016874:	46bd      	mov	sp, r7
 8016876:	bd80      	pop	{r7, pc}
 8016878:	41615252 	.word	0x41615252
 801687c:	61417272 	.word	0x61417272
 8016880:	2400036c 	.word	0x2400036c

08016884 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8016884:	b580      	push	{r7, lr}
 8016886:	b084      	sub	sp, #16
 8016888:	af00      	add	r7, sp, #0
 801688a:	6078      	str	r0, [r7, #4]
 801688c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801688e:	2309      	movs	r3, #9
 8016890:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	2b00      	cmp	r3, #0
 8016896:	d01c      	beq.n	80168d2 <validate+0x4e>
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	681b      	ldr	r3, [r3, #0]
 801689c:	2b00      	cmp	r3, #0
 801689e:	d018      	beq.n	80168d2 <validate+0x4e>
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	681b      	ldr	r3, [r3, #0]
 80168a4:	781b      	ldrb	r3, [r3, #0]
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	d013      	beq.n	80168d2 <validate+0x4e>
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	889a      	ldrh	r2, [r3, #4]
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	681b      	ldr	r3, [r3, #0]
 80168b2:	88db      	ldrh	r3, [r3, #6]
 80168b4:	429a      	cmp	r2, r3
 80168b6:	d10c      	bne.n	80168d2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	681b      	ldr	r3, [r3, #0]
 80168bc:	785b      	ldrb	r3, [r3, #1]
 80168be:	4618      	mov	r0, r3
 80168c0:	f7fe fae0 	bl	8014e84 <disk_status>
 80168c4:	4603      	mov	r3, r0
 80168c6:	f003 0301 	and.w	r3, r3, #1
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d101      	bne.n	80168d2 <validate+0x4e>
			res = FR_OK;
 80168ce:	2300      	movs	r3, #0
 80168d0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80168d2:	7bfb      	ldrb	r3, [r7, #15]
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	d102      	bne.n	80168de <validate+0x5a>
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	681b      	ldr	r3, [r3, #0]
 80168dc:	e000      	b.n	80168e0 <validate+0x5c>
 80168de:	2300      	movs	r3, #0
 80168e0:	683a      	ldr	r2, [r7, #0]
 80168e2:	6013      	str	r3, [r2, #0]
	return res;
 80168e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80168e6:	4618      	mov	r0, r3
 80168e8:	3710      	adds	r7, #16
 80168ea:	46bd      	mov	sp, r7
 80168ec:	bd80      	pop	{r7, pc}
	...

080168f0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80168f0:	b580      	push	{r7, lr}
 80168f2:	b088      	sub	sp, #32
 80168f4:	af00      	add	r7, sp, #0
 80168f6:	60f8      	str	r0, [r7, #12]
 80168f8:	60b9      	str	r1, [r7, #8]
 80168fa:	4613      	mov	r3, r2
 80168fc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80168fe:	68bb      	ldr	r3, [r7, #8]
 8016900:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8016902:	f107 0310 	add.w	r3, r7, #16
 8016906:	4618      	mov	r0, r3
 8016908:	f7ff fcd5 	bl	80162b6 <get_ldnumber>
 801690c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801690e:	69fb      	ldr	r3, [r7, #28]
 8016910:	2b00      	cmp	r3, #0
 8016912:	da01      	bge.n	8016918 <f_mount+0x28>
 8016914:	230b      	movs	r3, #11
 8016916:	e02b      	b.n	8016970 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8016918:	4a17      	ldr	r2, [pc, #92]	; (8016978 <f_mount+0x88>)
 801691a:	69fb      	ldr	r3, [r7, #28]
 801691c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016920:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8016922:	69bb      	ldr	r3, [r7, #24]
 8016924:	2b00      	cmp	r3, #0
 8016926:	d005      	beq.n	8016934 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8016928:	69b8      	ldr	r0, [r7, #24]
 801692a:	f7fe fd91 	bl	8015450 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801692e:	69bb      	ldr	r3, [r7, #24]
 8016930:	2200      	movs	r2, #0
 8016932:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8016934:	68fb      	ldr	r3, [r7, #12]
 8016936:	2b00      	cmp	r3, #0
 8016938:	d002      	beq.n	8016940 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801693a:	68fb      	ldr	r3, [r7, #12]
 801693c:	2200      	movs	r2, #0
 801693e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8016940:	68fa      	ldr	r2, [r7, #12]
 8016942:	490d      	ldr	r1, [pc, #52]	; (8016978 <f_mount+0x88>)
 8016944:	69fb      	ldr	r3, [r7, #28]
 8016946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801694a:	68fb      	ldr	r3, [r7, #12]
 801694c:	2b00      	cmp	r3, #0
 801694e:	d002      	beq.n	8016956 <f_mount+0x66>
 8016950:	79fb      	ldrb	r3, [r7, #7]
 8016952:	2b01      	cmp	r3, #1
 8016954:	d001      	beq.n	801695a <f_mount+0x6a>
 8016956:	2300      	movs	r3, #0
 8016958:	e00a      	b.n	8016970 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801695a:	f107 010c 	add.w	r1, r7, #12
 801695e:	f107 0308 	add.w	r3, r7, #8
 8016962:	2200      	movs	r2, #0
 8016964:	4618      	mov	r0, r3
 8016966:	f7ff fd41 	bl	80163ec <find_volume>
 801696a:	4603      	mov	r3, r0
 801696c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801696e:	7dfb      	ldrb	r3, [r7, #23]
}
 8016970:	4618      	mov	r0, r3
 8016972:	3720      	adds	r7, #32
 8016974:	46bd      	mov	sp, r7
 8016976:	bd80      	pop	{r7, pc}
 8016978:	24000368 	.word	0x24000368

0801697c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801697c:	b580      	push	{r7, lr}
 801697e:	b098      	sub	sp, #96	; 0x60
 8016980:	af00      	add	r7, sp, #0
 8016982:	60f8      	str	r0, [r7, #12]
 8016984:	60b9      	str	r1, [r7, #8]
 8016986:	4613      	mov	r3, r2
 8016988:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801698a:	68fb      	ldr	r3, [r7, #12]
 801698c:	2b00      	cmp	r3, #0
 801698e:	d101      	bne.n	8016994 <f_open+0x18>
 8016990:	2309      	movs	r3, #9
 8016992:	e1ad      	b.n	8016cf0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8016994:	79fb      	ldrb	r3, [r7, #7]
 8016996:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801699a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801699c:	79fa      	ldrb	r2, [r7, #7]
 801699e:	f107 0110 	add.w	r1, r7, #16
 80169a2:	f107 0308 	add.w	r3, r7, #8
 80169a6:	4618      	mov	r0, r3
 80169a8:	f7ff fd20 	bl	80163ec <find_volume>
 80169ac:	4603      	mov	r3, r0
 80169ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80169b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	f040 8191 	bne.w	8016cde <f_open+0x362>
		dj.obj.fs = fs;
 80169bc:	693b      	ldr	r3, [r7, #16]
 80169be:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80169c0:	68ba      	ldr	r2, [r7, #8]
 80169c2:	f107 0314 	add.w	r3, r7, #20
 80169c6:	4611      	mov	r1, r2
 80169c8:	4618      	mov	r0, r3
 80169ca:	f7ff fc03 	bl	80161d4 <follow_path>
 80169ce:	4603      	mov	r3, r0
 80169d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80169d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80169d8:	2b00      	cmp	r3, #0
 80169da:	d11a      	bne.n	8016a12 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80169dc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80169e0:	b25b      	sxtb	r3, r3
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	da03      	bge.n	80169ee <f_open+0x72>
				res = FR_INVALID_NAME;
 80169e6:	2306      	movs	r3, #6
 80169e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80169ec:	e011      	b.n	8016a12 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80169ee:	79fb      	ldrb	r3, [r7, #7]
 80169f0:	f023 0301 	bic.w	r3, r3, #1
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	bf14      	ite	ne
 80169f8:	2301      	movne	r3, #1
 80169fa:	2300      	moveq	r3, #0
 80169fc:	b2db      	uxtb	r3, r3
 80169fe:	461a      	mov	r2, r3
 8016a00:	f107 0314 	add.w	r3, r7, #20
 8016a04:	4611      	mov	r1, r2
 8016a06:	4618      	mov	r0, r3
 8016a08:	f7fe fbda 	bl	80151c0 <chk_lock>
 8016a0c:	4603      	mov	r3, r0
 8016a0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8016a12:	79fb      	ldrb	r3, [r7, #7]
 8016a14:	f003 031c 	and.w	r3, r3, #28
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	d07f      	beq.n	8016b1c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8016a1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016a20:	2b00      	cmp	r3, #0
 8016a22:	d017      	beq.n	8016a54 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8016a24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016a28:	2b04      	cmp	r3, #4
 8016a2a:	d10e      	bne.n	8016a4a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8016a2c:	f7fe fc24 	bl	8015278 <enq_lock>
 8016a30:	4603      	mov	r3, r0
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	d006      	beq.n	8016a44 <f_open+0xc8>
 8016a36:	f107 0314 	add.w	r3, r7, #20
 8016a3a:	4618      	mov	r0, r3
 8016a3c:	f7ff fb03 	bl	8016046 <dir_register>
 8016a40:	4603      	mov	r3, r0
 8016a42:	e000      	b.n	8016a46 <f_open+0xca>
 8016a44:	2312      	movs	r3, #18
 8016a46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8016a4a:	79fb      	ldrb	r3, [r7, #7]
 8016a4c:	f043 0308 	orr.w	r3, r3, #8
 8016a50:	71fb      	strb	r3, [r7, #7]
 8016a52:	e010      	b.n	8016a76 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8016a54:	7ebb      	ldrb	r3, [r7, #26]
 8016a56:	f003 0311 	and.w	r3, r3, #17
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	d003      	beq.n	8016a66 <f_open+0xea>
					res = FR_DENIED;
 8016a5e:	2307      	movs	r3, #7
 8016a60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016a64:	e007      	b.n	8016a76 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8016a66:	79fb      	ldrb	r3, [r7, #7]
 8016a68:	f003 0304 	and.w	r3, r3, #4
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	d002      	beq.n	8016a76 <f_open+0xfa>
 8016a70:	2308      	movs	r3, #8
 8016a72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8016a76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	d168      	bne.n	8016b50 <f_open+0x1d4>
 8016a7e:	79fb      	ldrb	r3, [r7, #7]
 8016a80:	f003 0308 	and.w	r3, r3, #8
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d063      	beq.n	8016b50 <f_open+0x1d4>
				dw = GET_FATTIME();
 8016a88:	f7fb f8fe 	bl	8011c88 <get_fattime>
 8016a8c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8016a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a90:	330e      	adds	r3, #14
 8016a92:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016a94:	4618      	mov	r0, r3
 8016a96:	f7fe fae9 	bl	801506c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8016a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a9c:	3316      	adds	r3, #22
 8016a9e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016aa0:	4618      	mov	r0, r3
 8016aa2:	f7fe fae3 	bl	801506c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8016aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016aa8:	330b      	adds	r3, #11
 8016aaa:	2220      	movs	r2, #32
 8016aac:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8016aae:	693b      	ldr	r3, [r7, #16]
 8016ab0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016ab2:	4611      	mov	r1, r2
 8016ab4:	4618      	mov	r0, r3
 8016ab6:	f7ff fa32 	bl	8015f1e <ld_clust>
 8016aba:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8016abc:	693b      	ldr	r3, [r7, #16]
 8016abe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016ac0:	2200      	movs	r2, #0
 8016ac2:	4618      	mov	r0, r3
 8016ac4:	f7ff fa4a 	bl	8015f5c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8016ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016aca:	331c      	adds	r3, #28
 8016acc:	2100      	movs	r1, #0
 8016ace:	4618      	mov	r0, r3
 8016ad0:	f7fe facc 	bl	801506c <st_dword>
					fs->wflag = 1;
 8016ad4:	693b      	ldr	r3, [r7, #16]
 8016ad6:	2201      	movs	r2, #1
 8016ad8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8016ada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d037      	beq.n	8016b50 <f_open+0x1d4>
						dw = fs->winsect;
 8016ae0:	693b      	ldr	r3, [r7, #16]
 8016ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ae4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8016ae6:	f107 0314 	add.w	r3, r7, #20
 8016aea:	2200      	movs	r2, #0
 8016aec:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8016aee:	4618      	mov	r0, r3
 8016af0:	f7fe ff5d 	bl	80159ae <remove_chain>
 8016af4:	4603      	mov	r3, r0
 8016af6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8016afa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d126      	bne.n	8016b50 <f_open+0x1d4>
							res = move_window(fs, dw);
 8016b02:	693b      	ldr	r3, [r7, #16]
 8016b04:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016b06:	4618      	mov	r0, r3
 8016b08:	f7fe fd0a 	bl	8015520 <move_window>
 8016b0c:	4603      	mov	r3, r0
 8016b0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8016b12:	693b      	ldr	r3, [r7, #16]
 8016b14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016b16:	3a01      	subs	r2, #1
 8016b18:	60da      	str	r2, [r3, #12]
 8016b1a:	e019      	b.n	8016b50 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8016b1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016b20:	2b00      	cmp	r3, #0
 8016b22:	d115      	bne.n	8016b50 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8016b24:	7ebb      	ldrb	r3, [r7, #26]
 8016b26:	f003 0310 	and.w	r3, r3, #16
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d003      	beq.n	8016b36 <f_open+0x1ba>
					res = FR_NO_FILE;
 8016b2e:	2304      	movs	r3, #4
 8016b30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016b34:	e00c      	b.n	8016b50 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8016b36:	79fb      	ldrb	r3, [r7, #7]
 8016b38:	f003 0302 	and.w	r3, r3, #2
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	d007      	beq.n	8016b50 <f_open+0x1d4>
 8016b40:	7ebb      	ldrb	r3, [r7, #26]
 8016b42:	f003 0301 	and.w	r3, r3, #1
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	d002      	beq.n	8016b50 <f_open+0x1d4>
						res = FR_DENIED;
 8016b4a:	2307      	movs	r3, #7
 8016b4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8016b50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d128      	bne.n	8016baa <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8016b58:	79fb      	ldrb	r3, [r7, #7]
 8016b5a:	f003 0308 	and.w	r3, r3, #8
 8016b5e:	2b00      	cmp	r3, #0
 8016b60:	d003      	beq.n	8016b6a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8016b62:	79fb      	ldrb	r3, [r7, #7]
 8016b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016b68:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8016b6a:	693b      	ldr	r3, [r7, #16]
 8016b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b6e:	68fb      	ldr	r3, [r7, #12]
 8016b70:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8016b72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016b74:	68fb      	ldr	r3, [r7, #12]
 8016b76:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8016b78:	79fb      	ldrb	r3, [r7, #7]
 8016b7a:	f023 0301 	bic.w	r3, r3, #1
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	bf14      	ite	ne
 8016b82:	2301      	movne	r3, #1
 8016b84:	2300      	moveq	r3, #0
 8016b86:	b2db      	uxtb	r3, r3
 8016b88:	461a      	mov	r2, r3
 8016b8a:	f107 0314 	add.w	r3, r7, #20
 8016b8e:	4611      	mov	r1, r2
 8016b90:	4618      	mov	r0, r3
 8016b92:	f7fe fb93 	bl	80152bc <inc_lock>
 8016b96:	4602      	mov	r2, r0
 8016b98:	68fb      	ldr	r3, [r7, #12]
 8016b9a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8016b9c:	68fb      	ldr	r3, [r7, #12]
 8016b9e:	691b      	ldr	r3, [r3, #16]
 8016ba0:	2b00      	cmp	r3, #0
 8016ba2:	d102      	bne.n	8016baa <f_open+0x22e>
 8016ba4:	2302      	movs	r3, #2
 8016ba6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8016baa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	f040 8095 	bne.w	8016cde <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8016bb4:	693b      	ldr	r3, [r7, #16]
 8016bb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016bb8:	4611      	mov	r1, r2
 8016bba:	4618      	mov	r0, r3
 8016bbc:	f7ff f9af 	bl	8015f1e <ld_clust>
 8016bc0:	4602      	mov	r2, r0
 8016bc2:	68fb      	ldr	r3, [r7, #12]
 8016bc4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8016bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016bc8:	331c      	adds	r3, #28
 8016bca:	4618      	mov	r0, r3
 8016bcc:	f7fe fa10 	bl	8014ff0 <ld_dword>
 8016bd0:	4602      	mov	r2, r0
 8016bd2:	68fb      	ldr	r3, [r7, #12]
 8016bd4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8016bd6:	68fb      	ldr	r3, [r7, #12]
 8016bd8:	2200      	movs	r2, #0
 8016bda:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8016bdc:	693a      	ldr	r2, [r7, #16]
 8016bde:	68fb      	ldr	r3, [r7, #12]
 8016be0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8016be2:	693b      	ldr	r3, [r7, #16]
 8016be4:	88da      	ldrh	r2, [r3, #6]
 8016be6:	68fb      	ldr	r3, [r7, #12]
 8016be8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8016bea:	68fb      	ldr	r3, [r7, #12]
 8016bec:	79fa      	ldrb	r2, [r7, #7]
 8016bee:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8016bf0:	68fb      	ldr	r3, [r7, #12]
 8016bf2:	2200      	movs	r2, #0
 8016bf4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8016bf6:	68fb      	ldr	r3, [r7, #12]
 8016bf8:	2200      	movs	r2, #0
 8016bfa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8016bfc:	68fb      	ldr	r3, [r7, #12]
 8016bfe:	2200      	movs	r2, #0
 8016c00:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8016c02:	68fb      	ldr	r3, [r7, #12]
 8016c04:	3330      	adds	r3, #48	; 0x30
 8016c06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016c0a:	2100      	movs	r1, #0
 8016c0c:	4618      	mov	r0, r3
 8016c0e:	f7fe fa7a 	bl	8015106 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8016c12:	79fb      	ldrb	r3, [r7, #7]
 8016c14:	f003 0320 	and.w	r3, r3, #32
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	d060      	beq.n	8016cde <f_open+0x362>
 8016c1c:	68fb      	ldr	r3, [r7, #12]
 8016c1e:	68db      	ldr	r3, [r3, #12]
 8016c20:	2b00      	cmp	r3, #0
 8016c22:	d05c      	beq.n	8016cde <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8016c24:	68fb      	ldr	r3, [r7, #12]
 8016c26:	68da      	ldr	r2, [r3, #12]
 8016c28:	68fb      	ldr	r3, [r7, #12]
 8016c2a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8016c2c:	693b      	ldr	r3, [r7, #16]
 8016c2e:	895b      	ldrh	r3, [r3, #10]
 8016c30:	025b      	lsls	r3, r3, #9
 8016c32:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8016c34:	68fb      	ldr	r3, [r7, #12]
 8016c36:	689b      	ldr	r3, [r3, #8]
 8016c38:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8016c3a:	68fb      	ldr	r3, [r7, #12]
 8016c3c:	68db      	ldr	r3, [r3, #12]
 8016c3e:	657b      	str	r3, [r7, #84]	; 0x54
 8016c40:	e016      	b.n	8016c70 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8016c42:	68fb      	ldr	r3, [r7, #12]
 8016c44:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016c46:	4618      	mov	r0, r3
 8016c48:	f7fe fd25 	bl	8015696 <get_fat>
 8016c4c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8016c4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016c50:	2b01      	cmp	r3, #1
 8016c52:	d802      	bhi.n	8016c5a <f_open+0x2de>
 8016c54:	2302      	movs	r3, #2
 8016c56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8016c5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c60:	d102      	bne.n	8016c68 <f_open+0x2ec>
 8016c62:	2301      	movs	r3, #1
 8016c64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8016c68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016c6c:	1ad3      	subs	r3, r2, r3
 8016c6e:	657b      	str	r3, [r7, #84]	; 0x54
 8016c70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	d103      	bne.n	8016c80 <f_open+0x304>
 8016c78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016c7c:	429a      	cmp	r2, r3
 8016c7e:	d8e0      	bhi.n	8016c42 <f_open+0x2c6>
				}
				fp->clust = clst;
 8016c80:	68fb      	ldr	r3, [r7, #12]
 8016c82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016c84:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8016c86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	d127      	bne.n	8016cde <f_open+0x362>
 8016c8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016c90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	d022      	beq.n	8016cde <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8016c98:	693b      	ldr	r3, [r7, #16]
 8016c9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016c9c:	4618      	mov	r0, r3
 8016c9e:	f7fe fcdb 	bl	8015658 <clust2sect>
 8016ca2:	6478      	str	r0, [r7, #68]	; 0x44
 8016ca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	d103      	bne.n	8016cb2 <f_open+0x336>
						res = FR_INT_ERR;
 8016caa:	2302      	movs	r3, #2
 8016cac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016cb0:	e015      	b.n	8016cde <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8016cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016cb4:	0a5a      	lsrs	r2, r3, #9
 8016cb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016cb8:	441a      	add	r2, r3
 8016cba:	68fb      	ldr	r3, [r7, #12]
 8016cbc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8016cbe:	693b      	ldr	r3, [r7, #16]
 8016cc0:	7858      	ldrb	r0, [r3, #1]
 8016cc2:	68fb      	ldr	r3, [r7, #12]
 8016cc4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016cc8:	68fb      	ldr	r3, [r7, #12]
 8016cca:	6a1a      	ldr	r2, [r3, #32]
 8016ccc:	2301      	movs	r3, #1
 8016cce:	f7fe f919 	bl	8014f04 <disk_read>
 8016cd2:	4603      	mov	r3, r0
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	d002      	beq.n	8016cde <f_open+0x362>
 8016cd8:	2301      	movs	r3, #1
 8016cda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8016cde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	d002      	beq.n	8016cec <f_open+0x370>
 8016ce6:	68fb      	ldr	r3, [r7, #12]
 8016ce8:	2200      	movs	r2, #0
 8016cea:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8016cec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8016cf0:	4618      	mov	r0, r3
 8016cf2:	3760      	adds	r7, #96	; 0x60
 8016cf4:	46bd      	mov	sp, r7
 8016cf6:	bd80      	pop	{r7, pc}

08016cf8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8016cf8:	b580      	push	{r7, lr}
 8016cfa:	b08e      	sub	sp, #56	; 0x38
 8016cfc:	af00      	add	r7, sp, #0
 8016cfe:	60f8      	str	r0, [r7, #12]
 8016d00:	60b9      	str	r1, [r7, #8]
 8016d02:	607a      	str	r2, [r7, #4]
 8016d04:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8016d06:	68bb      	ldr	r3, [r7, #8]
 8016d08:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8016d0a:	683b      	ldr	r3, [r7, #0]
 8016d0c:	2200      	movs	r2, #0
 8016d0e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8016d10:	68fb      	ldr	r3, [r7, #12]
 8016d12:	f107 0214 	add.w	r2, r7, #20
 8016d16:	4611      	mov	r1, r2
 8016d18:	4618      	mov	r0, r3
 8016d1a:	f7ff fdb3 	bl	8016884 <validate>
 8016d1e:	4603      	mov	r3, r0
 8016d20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8016d24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	d107      	bne.n	8016d3c <f_read+0x44>
 8016d2c:	68fb      	ldr	r3, [r7, #12]
 8016d2e:	7d5b      	ldrb	r3, [r3, #21]
 8016d30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8016d34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d002      	beq.n	8016d42 <f_read+0x4a>
 8016d3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016d40:	e115      	b.n	8016f6e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8016d42:	68fb      	ldr	r3, [r7, #12]
 8016d44:	7d1b      	ldrb	r3, [r3, #20]
 8016d46:	f003 0301 	and.w	r3, r3, #1
 8016d4a:	2b00      	cmp	r3, #0
 8016d4c:	d101      	bne.n	8016d52 <f_read+0x5a>
 8016d4e:	2307      	movs	r3, #7
 8016d50:	e10d      	b.n	8016f6e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8016d52:	68fb      	ldr	r3, [r7, #12]
 8016d54:	68da      	ldr	r2, [r3, #12]
 8016d56:	68fb      	ldr	r3, [r7, #12]
 8016d58:	699b      	ldr	r3, [r3, #24]
 8016d5a:	1ad3      	subs	r3, r2, r3
 8016d5c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8016d5e:	687a      	ldr	r2, [r7, #4]
 8016d60:	6a3b      	ldr	r3, [r7, #32]
 8016d62:	429a      	cmp	r2, r3
 8016d64:	f240 80fe 	bls.w	8016f64 <f_read+0x26c>
 8016d68:	6a3b      	ldr	r3, [r7, #32]
 8016d6a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8016d6c:	e0fa      	b.n	8016f64 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8016d6e:	68fb      	ldr	r3, [r7, #12]
 8016d70:	699b      	ldr	r3, [r3, #24]
 8016d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	f040 80c6 	bne.w	8016f08 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8016d7c:	68fb      	ldr	r3, [r7, #12]
 8016d7e:	699b      	ldr	r3, [r3, #24]
 8016d80:	0a5b      	lsrs	r3, r3, #9
 8016d82:	697a      	ldr	r2, [r7, #20]
 8016d84:	8952      	ldrh	r2, [r2, #10]
 8016d86:	3a01      	subs	r2, #1
 8016d88:	4013      	ands	r3, r2
 8016d8a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8016d8c:	69fb      	ldr	r3, [r7, #28]
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d12f      	bne.n	8016df2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8016d92:	68fb      	ldr	r3, [r7, #12]
 8016d94:	699b      	ldr	r3, [r3, #24]
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d103      	bne.n	8016da2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8016d9a:	68fb      	ldr	r3, [r7, #12]
 8016d9c:	689b      	ldr	r3, [r3, #8]
 8016d9e:	633b      	str	r3, [r7, #48]	; 0x30
 8016da0:	e013      	b.n	8016dca <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8016da2:	68fb      	ldr	r3, [r7, #12]
 8016da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	d007      	beq.n	8016dba <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8016daa:	68fb      	ldr	r3, [r7, #12]
 8016dac:	699b      	ldr	r3, [r3, #24]
 8016dae:	4619      	mov	r1, r3
 8016db0:	68f8      	ldr	r0, [r7, #12]
 8016db2:	f7fe fef9 	bl	8015ba8 <clmt_clust>
 8016db6:	6338      	str	r0, [r7, #48]	; 0x30
 8016db8:	e007      	b.n	8016dca <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8016dba:	68fa      	ldr	r2, [r7, #12]
 8016dbc:	68fb      	ldr	r3, [r7, #12]
 8016dbe:	69db      	ldr	r3, [r3, #28]
 8016dc0:	4619      	mov	r1, r3
 8016dc2:	4610      	mov	r0, r2
 8016dc4:	f7fe fc67 	bl	8015696 <get_fat>
 8016dc8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8016dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016dcc:	2b01      	cmp	r3, #1
 8016dce:	d804      	bhi.n	8016dda <f_read+0xe2>
 8016dd0:	68fb      	ldr	r3, [r7, #12]
 8016dd2:	2202      	movs	r2, #2
 8016dd4:	755a      	strb	r2, [r3, #21]
 8016dd6:	2302      	movs	r3, #2
 8016dd8:	e0c9      	b.n	8016f6e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8016dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016de0:	d104      	bne.n	8016dec <f_read+0xf4>
 8016de2:	68fb      	ldr	r3, [r7, #12]
 8016de4:	2201      	movs	r2, #1
 8016de6:	755a      	strb	r2, [r3, #21]
 8016de8:	2301      	movs	r3, #1
 8016dea:	e0c0      	b.n	8016f6e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8016dec:	68fb      	ldr	r3, [r7, #12]
 8016dee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016df0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8016df2:	697a      	ldr	r2, [r7, #20]
 8016df4:	68fb      	ldr	r3, [r7, #12]
 8016df6:	69db      	ldr	r3, [r3, #28]
 8016df8:	4619      	mov	r1, r3
 8016dfa:	4610      	mov	r0, r2
 8016dfc:	f7fe fc2c 	bl	8015658 <clust2sect>
 8016e00:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8016e02:	69bb      	ldr	r3, [r7, #24]
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	d104      	bne.n	8016e12 <f_read+0x11a>
 8016e08:	68fb      	ldr	r3, [r7, #12]
 8016e0a:	2202      	movs	r2, #2
 8016e0c:	755a      	strb	r2, [r3, #21]
 8016e0e:	2302      	movs	r3, #2
 8016e10:	e0ad      	b.n	8016f6e <f_read+0x276>
			sect += csect;
 8016e12:	69ba      	ldr	r2, [r7, #24]
 8016e14:	69fb      	ldr	r3, [r7, #28]
 8016e16:	4413      	add	r3, r2
 8016e18:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	0a5b      	lsrs	r3, r3, #9
 8016e1e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8016e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	d039      	beq.n	8016e9a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8016e26:	69fa      	ldr	r2, [r7, #28]
 8016e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e2a:	4413      	add	r3, r2
 8016e2c:	697a      	ldr	r2, [r7, #20]
 8016e2e:	8952      	ldrh	r2, [r2, #10]
 8016e30:	4293      	cmp	r3, r2
 8016e32:	d905      	bls.n	8016e40 <f_read+0x148>
					cc = fs->csize - csect;
 8016e34:	697b      	ldr	r3, [r7, #20]
 8016e36:	895b      	ldrh	r3, [r3, #10]
 8016e38:	461a      	mov	r2, r3
 8016e3a:	69fb      	ldr	r3, [r7, #28]
 8016e3c:	1ad3      	subs	r3, r2, r3
 8016e3e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016e40:	697b      	ldr	r3, [r7, #20]
 8016e42:	7858      	ldrb	r0, [r3, #1]
 8016e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e46:	69ba      	ldr	r2, [r7, #24]
 8016e48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016e4a:	f7fe f85b 	bl	8014f04 <disk_read>
 8016e4e:	4603      	mov	r3, r0
 8016e50:	2b00      	cmp	r3, #0
 8016e52:	d004      	beq.n	8016e5e <f_read+0x166>
 8016e54:	68fb      	ldr	r3, [r7, #12]
 8016e56:	2201      	movs	r2, #1
 8016e58:	755a      	strb	r2, [r3, #21]
 8016e5a:	2301      	movs	r3, #1
 8016e5c:	e087      	b.n	8016f6e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8016e5e:	68fb      	ldr	r3, [r7, #12]
 8016e60:	7d1b      	ldrb	r3, [r3, #20]
 8016e62:	b25b      	sxtb	r3, r3
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	da14      	bge.n	8016e92 <f_read+0x19a>
 8016e68:	68fb      	ldr	r3, [r7, #12]
 8016e6a:	6a1a      	ldr	r2, [r3, #32]
 8016e6c:	69bb      	ldr	r3, [r7, #24]
 8016e6e:	1ad3      	subs	r3, r2, r3
 8016e70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016e72:	429a      	cmp	r2, r3
 8016e74:	d90d      	bls.n	8016e92 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8016e76:	68fb      	ldr	r3, [r7, #12]
 8016e78:	6a1a      	ldr	r2, [r3, #32]
 8016e7a:	69bb      	ldr	r3, [r7, #24]
 8016e7c:	1ad3      	subs	r3, r2, r3
 8016e7e:	025b      	lsls	r3, r3, #9
 8016e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016e82:	18d0      	adds	r0, r2, r3
 8016e84:	68fb      	ldr	r3, [r7, #12]
 8016e86:	3330      	adds	r3, #48	; 0x30
 8016e88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016e8c:	4619      	mov	r1, r3
 8016e8e:	f7fe f919 	bl	80150c4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8016e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e94:	025b      	lsls	r3, r3, #9
 8016e96:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8016e98:	e050      	b.n	8016f3c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8016e9a:	68fb      	ldr	r3, [r7, #12]
 8016e9c:	6a1b      	ldr	r3, [r3, #32]
 8016e9e:	69ba      	ldr	r2, [r7, #24]
 8016ea0:	429a      	cmp	r2, r3
 8016ea2:	d02e      	beq.n	8016f02 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8016ea4:	68fb      	ldr	r3, [r7, #12]
 8016ea6:	7d1b      	ldrb	r3, [r3, #20]
 8016ea8:	b25b      	sxtb	r3, r3
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	da18      	bge.n	8016ee0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016eae:	697b      	ldr	r3, [r7, #20]
 8016eb0:	7858      	ldrb	r0, [r3, #1]
 8016eb2:	68fb      	ldr	r3, [r7, #12]
 8016eb4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016eb8:	68fb      	ldr	r3, [r7, #12]
 8016eba:	6a1a      	ldr	r2, [r3, #32]
 8016ebc:	2301      	movs	r3, #1
 8016ebe:	f7fe f841 	bl	8014f44 <disk_write>
 8016ec2:	4603      	mov	r3, r0
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	d004      	beq.n	8016ed2 <f_read+0x1da>
 8016ec8:	68fb      	ldr	r3, [r7, #12]
 8016eca:	2201      	movs	r2, #1
 8016ecc:	755a      	strb	r2, [r3, #21]
 8016ece:	2301      	movs	r3, #1
 8016ed0:	e04d      	b.n	8016f6e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8016ed2:	68fb      	ldr	r3, [r7, #12]
 8016ed4:	7d1b      	ldrb	r3, [r3, #20]
 8016ed6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016eda:	b2da      	uxtb	r2, r3
 8016edc:	68fb      	ldr	r3, [r7, #12]
 8016ede:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8016ee0:	697b      	ldr	r3, [r7, #20]
 8016ee2:	7858      	ldrb	r0, [r3, #1]
 8016ee4:	68fb      	ldr	r3, [r7, #12]
 8016ee6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016eea:	2301      	movs	r3, #1
 8016eec:	69ba      	ldr	r2, [r7, #24]
 8016eee:	f7fe f809 	bl	8014f04 <disk_read>
 8016ef2:	4603      	mov	r3, r0
 8016ef4:	2b00      	cmp	r3, #0
 8016ef6:	d004      	beq.n	8016f02 <f_read+0x20a>
 8016ef8:	68fb      	ldr	r3, [r7, #12]
 8016efa:	2201      	movs	r2, #1
 8016efc:	755a      	strb	r2, [r3, #21]
 8016efe:	2301      	movs	r3, #1
 8016f00:	e035      	b.n	8016f6e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8016f02:	68fb      	ldr	r3, [r7, #12]
 8016f04:	69ba      	ldr	r2, [r7, #24]
 8016f06:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8016f08:	68fb      	ldr	r3, [r7, #12]
 8016f0a:	699b      	ldr	r3, [r3, #24]
 8016f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016f10:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8016f14:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8016f16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	429a      	cmp	r2, r3
 8016f1c:	d901      	bls.n	8016f22 <f_read+0x22a>
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8016f22:	68fb      	ldr	r3, [r7, #12]
 8016f24:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016f28:	68fb      	ldr	r3, [r7, #12]
 8016f2a:	699b      	ldr	r3, [r3, #24]
 8016f2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016f30:	4413      	add	r3, r2
 8016f32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016f34:	4619      	mov	r1, r3
 8016f36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016f38:	f7fe f8c4 	bl	80150c4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8016f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f40:	4413      	add	r3, r2
 8016f42:	627b      	str	r3, [r7, #36]	; 0x24
 8016f44:	68fb      	ldr	r3, [r7, #12]
 8016f46:	699a      	ldr	r2, [r3, #24]
 8016f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f4a:	441a      	add	r2, r3
 8016f4c:	68fb      	ldr	r3, [r7, #12]
 8016f4e:	619a      	str	r2, [r3, #24]
 8016f50:	683b      	ldr	r3, [r7, #0]
 8016f52:	681a      	ldr	r2, [r3, #0]
 8016f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f56:	441a      	add	r2, r3
 8016f58:	683b      	ldr	r3, [r7, #0]
 8016f5a:	601a      	str	r2, [r3, #0]
 8016f5c:	687a      	ldr	r2, [r7, #4]
 8016f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f60:	1ad3      	subs	r3, r2, r3
 8016f62:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	f47f af01 	bne.w	8016d6e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8016f6c:	2300      	movs	r3, #0
}
 8016f6e:	4618      	mov	r0, r3
 8016f70:	3738      	adds	r7, #56	; 0x38
 8016f72:	46bd      	mov	sp, r7
 8016f74:	bd80      	pop	{r7, pc}

08016f76 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8016f76:	b580      	push	{r7, lr}
 8016f78:	b08c      	sub	sp, #48	; 0x30
 8016f7a:	af00      	add	r7, sp, #0
 8016f7c:	60f8      	str	r0, [r7, #12]
 8016f7e:	60b9      	str	r1, [r7, #8]
 8016f80:	607a      	str	r2, [r7, #4]
 8016f82:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8016f84:	68bb      	ldr	r3, [r7, #8]
 8016f86:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8016f88:	683b      	ldr	r3, [r7, #0]
 8016f8a:	2200      	movs	r2, #0
 8016f8c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8016f8e:	68fb      	ldr	r3, [r7, #12]
 8016f90:	f107 0210 	add.w	r2, r7, #16
 8016f94:	4611      	mov	r1, r2
 8016f96:	4618      	mov	r0, r3
 8016f98:	f7ff fc74 	bl	8016884 <validate>
 8016f9c:	4603      	mov	r3, r0
 8016f9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8016fa2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d107      	bne.n	8016fba <f_write+0x44>
 8016faa:	68fb      	ldr	r3, [r7, #12]
 8016fac:	7d5b      	ldrb	r3, [r3, #21]
 8016fae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8016fb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	d002      	beq.n	8016fc0 <f_write+0x4a>
 8016fba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016fbe:	e14b      	b.n	8017258 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8016fc0:	68fb      	ldr	r3, [r7, #12]
 8016fc2:	7d1b      	ldrb	r3, [r3, #20]
 8016fc4:	f003 0302 	and.w	r3, r3, #2
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	d101      	bne.n	8016fd0 <f_write+0x5a>
 8016fcc:	2307      	movs	r3, #7
 8016fce:	e143      	b.n	8017258 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8016fd0:	68fb      	ldr	r3, [r7, #12]
 8016fd2:	699a      	ldr	r2, [r3, #24]
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	441a      	add	r2, r3
 8016fd8:	68fb      	ldr	r3, [r7, #12]
 8016fda:	699b      	ldr	r3, [r3, #24]
 8016fdc:	429a      	cmp	r2, r3
 8016fde:	f080 812d 	bcs.w	801723c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8016fe2:	68fb      	ldr	r3, [r7, #12]
 8016fe4:	699b      	ldr	r3, [r3, #24]
 8016fe6:	43db      	mvns	r3, r3
 8016fe8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8016fea:	e127      	b.n	801723c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8016fec:	68fb      	ldr	r3, [r7, #12]
 8016fee:	699b      	ldr	r3, [r3, #24]
 8016ff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016ff4:	2b00      	cmp	r3, #0
 8016ff6:	f040 80e3 	bne.w	80171c0 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8016ffa:	68fb      	ldr	r3, [r7, #12]
 8016ffc:	699b      	ldr	r3, [r3, #24]
 8016ffe:	0a5b      	lsrs	r3, r3, #9
 8017000:	693a      	ldr	r2, [r7, #16]
 8017002:	8952      	ldrh	r2, [r2, #10]
 8017004:	3a01      	subs	r2, #1
 8017006:	4013      	ands	r3, r2
 8017008:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801700a:	69bb      	ldr	r3, [r7, #24]
 801700c:	2b00      	cmp	r3, #0
 801700e:	d143      	bne.n	8017098 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8017010:	68fb      	ldr	r3, [r7, #12]
 8017012:	699b      	ldr	r3, [r3, #24]
 8017014:	2b00      	cmp	r3, #0
 8017016:	d10c      	bne.n	8017032 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8017018:	68fb      	ldr	r3, [r7, #12]
 801701a:	689b      	ldr	r3, [r3, #8]
 801701c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801701e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017020:	2b00      	cmp	r3, #0
 8017022:	d11a      	bne.n	801705a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8017024:	68fb      	ldr	r3, [r7, #12]
 8017026:	2100      	movs	r1, #0
 8017028:	4618      	mov	r0, r3
 801702a:	f7fe fd25 	bl	8015a78 <create_chain>
 801702e:	62b8      	str	r0, [r7, #40]	; 0x28
 8017030:	e013      	b.n	801705a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8017032:	68fb      	ldr	r3, [r7, #12]
 8017034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017036:	2b00      	cmp	r3, #0
 8017038:	d007      	beq.n	801704a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801703a:	68fb      	ldr	r3, [r7, #12]
 801703c:	699b      	ldr	r3, [r3, #24]
 801703e:	4619      	mov	r1, r3
 8017040:	68f8      	ldr	r0, [r7, #12]
 8017042:	f7fe fdb1 	bl	8015ba8 <clmt_clust>
 8017046:	62b8      	str	r0, [r7, #40]	; 0x28
 8017048:	e007      	b.n	801705a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801704a:	68fa      	ldr	r2, [r7, #12]
 801704c:	68fb      	ldr	r3, [r7, #12]
 801704e:	69db      	ldr	r3, [r3, #28]
 8017050:	4619      	mov	r1, r3
 8017052:	4610      	mov	r0, r2
 8017054:	f7fe fd10 	bl	8015a78 <create_chain>
 8017058:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801705a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801705c:	2b00      	cmp	r3, #0
 801705e:	f000 80f2 	beq.w	8017246 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8017062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017064:	2b01      	cmp	r3, #1
 8017066:	d104      	bne.n	8017072 <f_write+0xfc>
 8017068:	68fb      	ldr	r3, [r7, #12]
 801706a:	2202      	movs	r2, #2
 801706c:	755a      	strb	r2, [r3, #21]
 801706e:	2302      	movs	r3, #2
 8017070:	e0f2      	b.n	8017258 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8017072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017078:	d104      	bne.n	8017084 <f_write+0x10e>
 801707a:	68fb      	ldr	r3, [r7, #12]
 801707c:	2201      	movs	r2, #1
 801707e:	755a      	strb	r2, [r3, #21]
 8017080:	2301      	movs	r3, #1
 8017082:	e0e9      	b.n	8017258 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8017084:	68fb      	ldr	r3, [r7, #12]
 8017086:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017088:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801708a:	68fb      	ldr	r3, [r7, #12]
 801708c:	689b      	ldr	r3, [r3, #8]
 801708e:	2b00      	cmp	r3, #0
 8017090:	d102      	bne.n	8017098 <f_write+0x122>
 8017092:	68fb      	ldr	r3, [r7, #12]
 8017094:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017096:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8017098:	68fb      	ldr	r3, [r7, #12]
 801709a:	7d1b      	ldrb	r3, [r3, #20]
 801709c:	b25b      	sxtb	r3, r3
 801709e:	2b00      	cmp	r3, #0
 80170a0:	da18      	bge.n	80170d4 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80170a2:	693b      	ldr	r3, [r7, #16]
 80170a4:	7858      	ldrb	r0, [r3, #1]
 80170a6:	68fb      	ldr	r3, [r7, #12]
 80170a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80170ac:	68fb      	ldr	r3, [r7, #12]
 80170ae:	6a1a      	ldr	r2, [r3, #32]
 80170b0:	2301      	movs	r3, #1
 80170b2:	f7fd ff47 	bl	8014f44 <disk_write>
 80170b6:	4603      	mov	r3, r0
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	d004      	beq.n	80170c6 <f_write+0x150>
 80170bc:	68fb      	ldr	r3, [r7, #12]
 80170be:	2201      	movs	r2, #1
 80170c0:	755a      	strb	r2, [r3, #21]
 80170c2:	2301      	movs	r3, #1
 80170c4:	e0c8      	b.n	8017258 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80170c6:	68fb      	ldr	r3, [r7, #12]
 80170c8:	7d1b      	ldrb	r3, [r3, #20]
 80170ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80170ce:	b2da      	uxtb	r2, r3
 80170d0:	68fb      	ldr	r3, [r7, #12]
 80170d2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80170d4:	693a      	ldr	r2, [r7, #16]
 80170d6:	68fb      	ldr	r3, [r7, #12]
 80170d8:	69db      	ldr	r3, [r3, #28]
 80170da:	4619      	mov	r1, r3
 80170dc:	4610      	mov	r0, r2
 80170de:	f7fe fabb 	bl	8015658 <clust2sect>
 80170e2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80170e4:	697b      	ldr	r3, [r7, #20]
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	d104      	bne.n	80170f4 <f_write+0x17e>
 80170ea:	68fb      	ldr	r3, [r7, #12]
 80170ec:	2202      	movs	r2, #2
 80170ee:	755a      	strb	r2, [r3, #21]
 80170f0:	2302      	movs	r3, #2
 80170f2:	e0b1      	b.n	8017258 <f_write+0x2e2>
			sect += csect;
 80170f4:	697a      	ldr	r2, [r7, #20]
 80170f6:	69bb      	ldr	r3, [r7, #24]
 80170f8:	4413      	add	r3, r2
 80170fa:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80170fc:	687b      	ldr	r3, [r7, #4]
 80170fe:	0a5b      	lsrs	r3, r3, #9
 8017100:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8017102:	6a3b      	ldr	r3, [r7, #32]
 8017104:	2b00      	cmp	r3, #0
 8017106:	d03c      	beq.n	8017182 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8017108:	69ba      	ldr	r2, [r7, #24]
 801710a:	6a3b      	ldr	r3, [r7, #32]
 801710c:	4413      	add	r3, r2
 801710e:	693a      	ldr	r2, [r7, #16]
 8017110:	8952      	ldrh	r2, [r2, #10]
 8017112:	4293      	cmp	r3, r2
 8017114:	d905      	bls.n	8017122 <f_write+0x1ac>
					cc = fs->csize - csect;
 8017116:	693b      	ldr	r3, [r7, #16]
 8017118:	895b      	ldrh	r3, [r3, #10]
 801711a:	461a      	mov	r2, r3
 801711c:	69bb      	ldr	r3, [r7, #24]
 801711e:	1ad3      	subs	r3, r2, r3
 8017120:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017122:	693b      	ldr	r3, [r7, #16]
 8017124:	7858      	ldrb	r0, [r3, #1]
 8017126:	6a3b      	ldr	r3, [r7, #32]
 8017128:	697a      	ldr	r2, [r7, #20]
 801712a:	69f9      	ldr	r1, [r7, #28]
 801712c:	f7fd ff0a 	bl	8014f44 <disk_write>
 8017130:	4603      	mov	r3, r0
 8017132:	2b00      	cmp	r3, #0
 8017134:	d004      	beq.n	8017140 <f_write+0x1ca>
 8017136:	68fb      	ldr	r3, [r7, #12]
 8017138:	2201      	movs	r2, #1
 801713a:	755a      	strb	r2, [r3, #21]
 801713c:	2301      	movs	r3, #1
 801713e:	e08b      	b.n	8017258 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8017140:	68fb      	ldr	r3, [r7, #12]
 8017142:	6a1a      	ldr	r2, [r3, #32]
 8017144:	697b      	ldr	r3, [r7, #20]
 8017146:	1ad3      	subs	r3, r2, r3
 8017148:	6a3a      	ldr	r2, [r7, #32]
 801714a:	429a      	cmp	r2, r3
 801714c:	d915      	bls.n	801717a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801714e:	68fb      	ldr	r3, [r7, #12]
 8017150:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8017154:	68fb      	ldr	r3, [r7, #12]
 8017156:	6a1a      	ldr	r2, [r3, #32]
 8017158:	697b      	ldr	r3, [r7, #20]
 801715a:	1ad3      	subs	r3, r2, r3
 801715c:	025b      	lsls	r3, r3, #9
 801715e:	69fa      	ldr	r2, [r7, #28]
 8017160:	4413      	add	r3, r2
 8017162:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017166:	4619      	mov	r1, r3
 8017168:	f7fd ffac 	bl	80150c4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801716c:	68fb      	ldr	r3, [r7, #12]
 801716e:	7d1b      	ldrb	r3, [r3, #20]
 8017170:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017174:	b2da      	uxtb	r2, r3
 8017176:	68fb      	ldr	r3, [r7, #12]
 8017178:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801717a:	6a3b      	ldr	r3, [r7, #32]
 801717c:	025b      	lsls	r3, r3, #9
 801717e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8017180:	e03f      	b.n	8017202 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8017182:	68fb      	ldr	r3, [r7, #12]
 8017184:	6a1b      	ldr	r3, [r3, #32]
 8017186:	697a      	ldr	r2, [r7, #20]
 8017188:	429a      	cmp	r2, r3
 801718a:	d016      	beq.n	80171ba <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 801718c:	68fb      	ldr	r3, [r7, #12]
 801718e:	699a      	ldr	r2, [r3, #24]
 8017190:	68fb      	ldr	r3, [r7, #12]
 8017192:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8017194:	429a      	cmp	r2, r3
 8017196:	d210      	bcs.n	80171ba <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8017198:	693b      	ldr	r3, [r7, #16]
 801719a:	7858      	ldrb	r0, [r3, #1]
 801719c:	68fb      	ldr	r3, [r7, #12]
 801719e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80171a2:	2301      	movs	r3, #1
 80171a4:	697a      	ldr	r2, [r7, #20]
 80171a6:	f7fd fead 	bl	8014f04 <disk_read>
 80171aa:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	d004      	beq.n	80171ba <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80171b0:	68fb      	ldr	r3, [r7, #12]
 80171b2:	2201      	movs	r2, #1
 80171b4:	755a      	strb	r2, [r3, #21]
 80171b6:	2301      	movs	r3, #1
 80171b8:	e04e      	b.n	8017258 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80171ba:	68fb      	ldr	r3, [r7, #12]
 80171bc:	697a      	ldr	r2, [r7, #20]
 80171be:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80171c0:	68fb      	ldr	r3, [r7, #12]
 80171c2:	699b      	ldr	r3, [r3, #24]
 80171c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80171c8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80171cc:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80171ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80171d0:	687b      	ldr	r3, [r7, #4]
 80171d2:	429a      	cmp	r2, r3
 80171d4:	d901      	bls.n	80171da <f_write+0x264>
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80171da:	68fb      	ldr	r3, [r7, #12]
 80171dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80171e0:	68fb      	ldr	r3, [r7, #12]
 80171e2:	699b      	ldr	r3, [r3, #24]
 80171e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80171e8:	4413      	add	r3, r2
 80171ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80171ec:	69f9      	ldr	r1, [r7, #28]
 80171ee:	4618      	mov	r0, r3
 80171f0:	f7fd ff68 	bl	80150c4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80171f4:	68fb      	ldr	r3, [r7, #12]
 80171f6:	7d1b      	ldrb	r3, [r3, #20]
 80171f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80171fc:	b2da      	uxtb	r2, r3
 80171fe:	68fb      	ldr	r3, [r7, #12]
 8017200:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8017202:	69fa      	ldr	r2, [r7, #28]
 8017204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017206:	4413      	add	r3, r2
 8017208:	61fb      	str	r3, [r7, #28]
 801720a:	68fb      	ldr	r3, [r7, #12]
 801720c:	699a      	ldr	r2, [r3, #24]
 801720e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017210:	441a      	add	r2, r3
 8017212:	68fb      	ldr	r3, [r7, #12]
 8017214:	619a      	str	r2, [r3, #24]
 8017216:	68fb      	ldr	r3, [r7, #12]
 8017218:	68da      	ldr	r2, [r3, #12]
 801721a:	68fb      	ldr	r3, [r7, #12]
 801721c:	699b      	ldr	r3, [r3, #24]
 801721e:	429a      	cmp	r2, r3
 8017220:	bf38      	it	cc
 8017222:	461a      	movcc	r2, r3
 8017224:	68fb      	ldr	r3, [r7, #12]
 8017226:	60da      	str	r2, [r3, #12]
 8017228:	683b      	ldr	r3, [r7, #0]
 801722a:	681a      	ldr	r2, [r3, #0]
 801722c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801722e:	441a      	add	r2, r3
 8017230:	683b      	ldr	r3, [r7, #0]
 8017232:	601a      	str	r2, [r3, #0]
 8017234:	687a      	ldr	r2, [r7, #4]
 8017236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017238:	1ad3      	subs	r3, r2, r3
 801723a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	2b00      	cmp	r3, #0
 8017240:	f47f aed4 	bne.w	8016fec <f_write+0x76>
 8017244:	e000      	b.n	8017248 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8017246:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8017248:	68fb      	ldr	r3, [r7, #12]
 801724a:	7d1b      	ldrb	r3, [r3, #20]
 801724c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017250:	b2da      	uxtb	r2, r3
 8017252:	68fb      	ldr	r3, [r7, #12]
 8017254:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8017256:	2300      	movs	r3, #0
}
 8017258:	4618      	mov	r0, r3
 801725a:	3730      	adds	r7, #48	; 0x30
 801725c:	46bd      	mov	sp, r7
 801725e:	bd80      	pop	{r7, pc}

08017260 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8017260:	b580      	push	{r7, lr}
 8017262:	b086      	sub	sp, #24
 8017264:	af00      	add	r7, sp, #0
 8017266:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	f107 0208 	add.w	r2, r7, #8
 801726e:	4611      	mov	r1, r2
 8017270:	4618      	mov	r0, r3
 8017272:	f7ff fb07 	bl	8016884 <validate>
 8017276:	4603      	mov	r3, r0
 8017278:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801727a:	7dfb      	ldrb	r3, [r7, #23]
 801727c:	2b00      	cmp	r3, #0
 801727e:	d168      	bne.n	8017352 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	7d1b      	ldrb	r3, [r3, #20]
 8017284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017288:	2b00      	cmp	r3, #0
 801728a:	d062      	beq.n	8017352 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	7d1b      	ldrb	r3, [r3, #20]
 8017290:	b25b      	sxtb	r3, r3
 8017292:	2b00      	cmp	r3, #0
 8017294:	da15      	bge.n	80172c2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8017296:	68bb      	ldr	r3, [r7, #8]
 8017298:	7858      	ldrb	r0, [r3, #1]
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	6a1a      	ldr	r2, [r3, #32]
 80172a4:	2301      	movs	r3, #1
 80172a6:	f7fd fe4d 	bl	8014f44 <disk_write>
 80172aa:	4603      	mov	r3, r0
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	d001      	beq.n	80172b4 <f_sync+0x54>
 80172b0:	2301      	movs	r3, #1
 80172b2:	e04f      	b.n	8017354 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	7d1b      	ldrb	r3, [r3, #20]
 80172b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80172bc:	b2da      	uxtb	r2, r3
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80172c2:	f7fa fce1 	bl	8011c88 <get_fattime>
 80172c6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80172c8:	68ba      	ldr	r2, [r7, #8]
 80172ca:	687b      	ldr	r3, [r7, #4]
 80172cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172ce:	4619      	mov	r1, r3
 80172d0:	4610      	mov	r0, r2
 80172d2:	f7fe f925 	bl	8015520 <move_window>
 80172d6:	4603      	mov	r3, r0
 80172d8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80172da:	7dfb      	ldrb	r3, [r7, #23]
 80172dc:	2b00      	cmp	r3, #0
 80172de:	d138      	bne.n	8017352 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80172e4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80172e6:	68fb      	ldr	r3, [r7, #12]
 80172e8:	330b      	adds	r3, #11
 80172ea:	781a      	ldrb	r2, [r3, #0]
 80172ec:	68fb      	ldr	r3, [r7, #12]
 80172ee:	330b      	adds	r3, #11
 80172f0:	f042 0220 	orr.w	r2, r2, #32
 80172f4:	b2d2      	uxtb	r2, r2
 80172f6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	6818      	ldr	r0, [r3, #0]
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	689b      	ldr	r3, [r3, #8]
 8017300:	461a      	mov	r2, r3
 8017302:	68f9      	ldr	r1, [r7, #12]
 8017304:	f7fe fe2a 	bl	8015f5c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8017308:	68fb      	ldr	r3, [r7, #12]
 801730a:	f103 021c 	add.w	r2, r3, #28
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	68db      	ldr	r3, [r3, #12]
 8017312:	4619      	mov	r1, r3
 8017314:	4610      	mov	r0, r2
 8017316:	f7fd fea9 	bl	801506c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801731a:	68fb      	ldr	r3, [r7, #12]
 801731c:	3316      	adds	r3, #22
 801731e:	6939      	ldr	r1, [r7, #16]
 8017320:	4618      	mov	r0, r3
 8017322:	f7fd fea3 	bl	801506c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8017326:	68fb      	ldr	r3, [r7, #12]
 8017328:	3312      	adds	r3, #18
 801732a:	2100      	movs	r1, #0
 801732c:	4618      	mov	r0, r3
 801732e:	f7fd fe82 	bl	8015036 <st_word>
					fs->wflag = 1;
 8017332:	68bb      	ldr	r3, [r7, #8]
 8017334:	2201      	movs	r2, #1
 8017336:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8017338:	68bb      	ldr	r3, [r7, #8]
 801733a:	4618      	mov	r0, r3
 801733c:	f7fe f91e 	bl	801557c <sync_fs>
 8017340:	4603      	mov	r3, r0
 8017342:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8017344:	687b      	ldr	r3, [r7, #4]
 8017346:	7d1b      	ldrb	r3, [r3, #20]
 8017348:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801734c:	b2da      	uxtb	r2, r3
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8017352:	7dfb      	ldrb	r3, [r7, #23]
}
 8017354:	4618      	mov	r0, r3
 8017356:	3718      	adds	r7, #24
 8017358:	46bd      	mov	sp, r7
 801735a:	bd80      	pop	{r7, pc}

0801735c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801735c:	b580      	push	{r7, lr}
 801735e:	b084      	sub	sp, #16
 8017360:	af00      	add	r7, sp, #0
 8017362:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8017364:	6878      	ldr	r0, [r7, #4]
 8017366:	f7ff ff7b 	bl	8017260 <f_sync>
 801736a:	4603      	mov	r3, r0
 801736c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801736e:	7bfb      	ldrb	r3, [r7, #15]
 8017370:	2b00      	cmp	r3, #0
 8017372:	d118      	bne.n	80173a6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	f107 0208 	add.w	r2, r7, #8
 801737a:	4611      	mov	r1, r2
 801737c:	4618      	mov	r0, r3
 801737e:	f7ff fa81 	bl	8016884 <validate>
 8017382:	4603      	mov	r3, r0
 8017384:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8017386:	7bfb      	ldrb	r3, [r7, #15]
 8017388:	2b00      	cmp	r3, #0
 801738a:	d10c      	bne.n	80173a6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	691b      	ldr	r3, [r3, #16]
 8017390:	4618      	mov	r0, r3
 8017392:	f7fe f821 	bl	80153d8 <dec_lock>
 8017396:	4603      	mov	r3, r0
 8017398:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801739a:	7bfb      	ldrb	r3, [r7, #15]
 801739c:	2b00      	cmp	r3, #0
 801739e:	d102      	bne.n	80173a6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	2200      	movs	r2, #0
 80173a4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80173a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80173a8:	4618      	mov	r0, r3
 80173aa:	3710      	adds	r7, #16
 80173ac:	46bd      	mov	sp, r7
 80173ae:	bd80      	pop	{r7, pc}

080173b0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80173b0:	b480      	push	{r7}
 80173b2:	b087      	sub	sp, #28
 80173b4:	af00      	add	r7, sp, #0
 80173b6:	60f8      	str	r0, [r7, #12]
 80173b8:	60b9      	str	r1, [r7, #8]
 80173ba:	4613      	mov	r3, r2
 80173bc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80173be:	2301      	movs	r3, #1
 80173c0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80173c2:	2300      	movs	r3, #0
 80173c4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80173c6:	4b1f      	ldr	r3, [pc, #124]	; (8017444 <FATFS_LinkDriverEx+0x94>)
 80173c8:	7a5b      	ldrb	r3, [r3, #9]
 80173ca:	b2db      	uxtb	r3, r3
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	d131      	bne.n	8017434 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80173d0:	4b1c      	ldr	r3, [pc, #112]	; (8017444 <FATFS_LinkDriverEx+0x94>)
 80173d2:	7a5b      	ldrb	r3, [r3, #9]
 80173d4:	b2db      	uxtb	r3, r3
 80173d6:	461a      	mov	r2, r3
 80173d8:	4b1a      	ldr	r3, [pc, #104]	; (8017444 <FATFS_LinkDriverEx+0x94>)
 80173da:	2100      	movs	r1, #0
 80173dc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80173de:	4b19      	ldr	r3, [pc, #100]	; (8017444 <FATFS_LinkDriverEx+0x94>)
 80173e0:	7a5b      	ldrb	r3, [r3, #9]
 80173e2:	b2db      	uxtb	r3, r3
 80173e4:	4a17      	ldr	r2, [pc, #92]	; (8017444 <FATFS_LinkDriverEx+0x94>)
 80173e6:	009b      	lsls	r3, r3, #2
 80173e8:	4413      	add	r3, r2
 80173ea:	68fa      	ldr	r2, [r7, #12]
 80173ec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80173ee:	4b15      	ldr	r3, [pc, #84]	; (8017444 <FATFS_LinkDriverEx+0x94>)
 80173f0:	7a5b      	ldrb	r3, [r3, #9]
 80173f2:	b2db      	uxtb	r3, r3
 80173f4:	461a      	mov	r2, r3
 80173f6:	4b13      	ldr	r3, [pc, #76]	; (8017444 <FATFS_LinkDriverEx+0x94>)
 80173f8:	4413      	add	r3, r2
 80173fa:	79fa      	ldrb	r2, [r7, #7]
 80173fc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80173fe:	4b11      	ldr	r3, [pc, #68]	; (8017444 <FATFS_LinkDriverEx+0x94>)
 8017400:	7a5b      	ldrb	r3, [r3, #9]
 8017402:	b2db      	uxtb	r3, r3
 8017404:	1c5a      	adds	r2, r3, #1
 8017406:	b2d1      	uxtb	r1, r2
 8017408:	4a0e      	ldr	r2, [pc, #56]	; (8017444 <FATFS_LinkDriverEx+0x94>)
 801740a:	7251      	strb	r1, [r2, #9]
 801740c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801740e:	7dbb      	ldrb	r3, [r7, #22]
 8017410:	3330      	adds	r3, #48	; 0x30
 8017412:	b2da      	uxtb	r2, r3
 8017414:	68bb      	ldr	r3, [r7, #8]
 8017416:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8017418:	68bb      	ldr	r3, [r7, #8]
 801741a:	3301      	adds	r3, #1
 801741c:	223a      	movs	r2, #58	; 0x3a
 801741e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8017420:	68bb      	ldr	r3, [r7, #8]
 8017422:	3302      	adds	r3, #2
 8017424:	222f      	movs	r2, #47	; 0x2f
 8017426:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8017428:	68bb      	ldr	r3, [r7, #8]
 801742a:	3303      	adds	r3, #3
 801742c:	2200      	movs	r2, #0
 801742e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8017430:	2300      	movs	r3, #0
 8017432:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8017434:	7dfb      	ldrb	r3, [r7, #23]
}
 8017436:	4618      	mov	r0, r3
 8017438:	371c      	adds	r7, #28
 801743a:	46bd      	mov	sp, r7
 801743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017440:	4770      	bx	lr
 8017442:	bf00      	nop
 8017444:	24000390 	.word	0x24000390

08017448 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8017448:	b580      	push	{r7, lr}
 801744a:	b082      	sub	sp, #8
 801744c:	af00      	add	r7, sp, #0
 801744e:	6078      	str	r0, [r7, #4]
 8017450:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8017452:	2200      	movs	r2, #0
 8017454:	6839      	ldr	r1, [r7, #0]
 8017456:	6878      	ldr	r0, [r7, #4]
 8017458:	f7ff ffaa 	bl	80173b0 <FATFS_LinkDriverEx>
 801745c:	4603      	mov	r3, r0
}
 801745e:	4618      	mov	r0, r3
 8017460:	3708      	adds	r7, #8
 8017462:	46bd      	mov	sp, r7
 8017464:	bd80      	pop	{r7, pc}
	...

08017468 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8017468:	b580      	push	{r7, lr}
 801746a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801746c:	2200      	movs	r2, #0
 801746e:	4913      	ldr	r1, [pc, #76]	; (80174bc <MX_USB_DEVICE_Init+0x54>)
 8017470:	4813      	ldr	r0, [pc, #76]	; (80174c0 <MX_USB_DEVICE_Init+0x58>)
 8017472:	f7fc fc20 	bl	8013cb6 <USBD_Init>
 8017476:	4603      	mov	r3, r0
 8017478:	2b00      	cmp	r3, #0
 801747a:	d001      	beq.n	8017480 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801747c:	f7eb f9b2 	bl	80027e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8017480:	4910      	ldr	r1, [pc, #64]	; (80174c4 <MX_USB_DEVICE_Init+0x5c>)
 8017482:	480f      	ldr	r0, [pc, #60]	; (80174c0 <MX_USB_DEVICE_Init+0x58>)
 8017484:	f7fc fc4d 	bl	8013d22 <USBD_RegisterClass>
 8017488:	4603      	mov	r3, r0
 801748a:	2b00      	cmp	r3, #0
 801748c:	d001      	beq.n	8017492 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801748e:	f7eb f9a9 	bl	80027e4 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8017492:	490d      	ldr	r1, [pc, #52]	; (80174c8 <MX_USB_DEVICE_Init+0x60>)
 8017494:	480a      	ldr	r0, [pc, #40]	; (80174c0 <MX_USB_DEVICE_Init+0x58>)
 8017496:	f7fa fff7 	bl	8012488 <USBD_MSC_RegisterStorage>
 801749a:	4603      	mov	r3, r0
 801749c:	2b00      	cmp	r3, #0
 801749e:	d001      	beq.n	80174a4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80174a0:	f7eb f9a0 	bl	80027e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80174a4:	4806      	ldr	r0, [pc, #24]	; (80174c0 <MX_USB_DEVICE_Init+0x58>)
 80174a6:	f7fc fc5d 	bl	8013d64 <USBD_Start>
 80174aa:	4603      	mov	r3, r0
 80174ac:	2b00      	cmp	r3, #0
 80174ae:	d001      	beq.n	80174b4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80174b0:	f7eb f998 	bl	80027e4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80174b4:	f7f0 fef2 	bl	800829c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80174b8:	bf00      	nop
 80174ba:	bd80      	pop	{r7, pc}
 80174bc:	2400013c 	.word	0x2400013c
 80174c0:	240013b4 	.word	0x240013b4
 80174c4:	24000054 	.word	0x24000054
 80174c8:	2400018c 	.word	0x2400018c

080174cc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80174cc:	b480      	push	{r7}
 80174ce:	b083      	sub	sp, #12
 80174d0:	af00      	add	r7, sp, #0
 80174d2:	4603      	mov	r3, r0
 80174d4:	6039      	str	r1, [r7, #0]
 80174d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80174d8:	683b      	ldr	r3, [r7, #0]
 80174da:	2212      	movs	r2, #18
 80174dc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80174de:	4b03      	ldr	r3, [pc, #12]	; (80174ec <USBD_FS_DeviceDescriptor+0x20>)
}
 80174e0:	4618      	mov	r0, r3
 80174e2:	370c      	adds	r7, #12
 80174e4:	46bd      	mov	sp, r7
 80174e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174ea:	4770      	bx	lr
 80174ec:	24000158 	.word	0x24000158

080174f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80174f0:	b480      	push	{r7}
 80174f2:	b083      	sub	sp, #12
 80174f4:	af00      	add	r7, sp, #0
 80174f6:	4603      	mov	r3, r0
 80174f8:	6039      	str	r1, [r7, #0]
 80174fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80174fc:	683b      	ldr	r3, [r7, #0]
 80174fe:	2204      	movs	r2, #4
 8017500:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017502:	4b03      	ldr	r3, [pc, #12]	; (8017510 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8017504:	4618      	mov	r0, r3
 8017506:	370c      	adds	r7, #12
 8017508:	46bd      	mov	sp, r7
 801750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801750e:	4770      	bx	lr
 8017510:	2400016c 	.word	0x2400016c

08017514 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017514:	b580      	push	{r7, lr}
 8017516:	b082      	sub	sp, #8
 8017518:	af00      	add	r7, sp, #0
 801751a:	4603      	mov	r3, r0
 801751c:	6039      	str	r1, [r7, #0]
 801751e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017520:	79fb      	ldrb	r3, [r7, #7]
 8017522:	2b00      	cmp	r3, #0
 8017524:	d105      	bne.n	8017532 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017526:	683a      	ldr	r2, [r7, #0]
 8017528:	4907      	ldr	r1, [pc, #28]	; (8017548 <USBD_FS_ProductStrDescriptor+0x34>)
 801752a:	4808      	ldr	r0, [pc, #32]	; (801754c <USBD_FS_ProductStrDescriptor+0x38>)
 801752c:	f7fd fbe7 	bl	8014cfe <USBD_GetString>
 8017530:	e004      	b.n	801753c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017532:	683a      	ldr	r2, [r7, #0]
 8017534:	4904      	ldr	r1, [pc, #16]	; (8017548 <USBD_FS_ProductStrDescriptor+0x34>)
 8017536:	4805      	ldr	r0, [pc, #20]	; (801754c <USBD_FS_ProductStrDescriptor+0x38>)
 8017538:	f7fd fbe1 	bl	8014cfe <USBD_GetString>
  }
  return USBD_StrDesc;
 801753c:	4b02      	ldr	r3, [pc, #8]	; (8017548 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801753e:	4618      	mov	r0, r3
 8017540:	3708      	adds	r7, #8
 8017542:	46bd      	mov	sp, r7
 8017544:	bd80      	pop	{r7, pc}
 8017546:	bf00      	nop
 8017548:	24001684 	.word	0x24001684
 801754c:	080198c4 	.word	0x080198c4

08017550 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017550:	b580      	push	{r7, lr}
 8017552:	b082      	sub	sp, #8
 8017554:	af00      	add	r7, sp, #0
 8017556:	4603      	mov	r3, r0
 8017558:	6039      	str	r1, [r7, #0]
 801755a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801755c:	683a      	ldr	r2, [r7, #0]
 801755e:	4904      	ldr	r1, [pc, #16]	; (8017570 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8017560:	4804      	ldr	r0, [pc, #16]	; (8017574 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8017562:	f7fd fbcc 	bl	8014cfe <USBD_GetString>
  return USBD_StrDesc;
 8017566:	4b02      	ldr	r3, [pc, #8]	; (8017570 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8017568:	4618      	mov	r0, r3
 801756a:	3708      	adds	r7, #8
 801756c:	46bd      	mov	sp, r7
 801756e:	bd80      	pop	{r7, pc}
 8017570:	24001684 	.word	0x24001684
 8017574:	080198d8 	.word	0x080198d8

08017578 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017578:	b580      	push	{r7, lr}
 801757a:	b082      	sub	sp, #8
 801757c:	af00      	add	r7, sp, #0
 801757e:	4603      	mov	r3, r0
 8017580:	6039      	str	r1, [r7, #0]
 8017582:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017584:	683b      	ldr	r3, [r7, #0]
 8017586:	221a      	movs	r2, #26
 8017588:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801758a:	f000 f843 	bl	8017614 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801758e:	4b02      	ldr	r3, [pc, #8]	; (8017598 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8017590:	4618      	mov	r0, r3
 8017592:	3708      	adds	r7, #8
 8017594:	46bd      	mov	sp, r7
 8017596:	bd80      	pop	{r7, pc}
 8017598:	24000170 	.word	0x24000170

0801759c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801759c:	b580      	push	{r7, lr}
 801759e:	b082      	sub	sp, #8
 80175a0:	af00      	add	r7, sp, #0
 80175a2:	4603      	mov	r3, r0
 80175a4:	6039      	str	r1, [r7, #0]
 80175a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80175a8:	79fb      	ldrb	r3, [r7, #7]
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	d105      	bne.n	80175ba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80175ae:	683a      	ldr	r2, [r7, #0]
 80175b0:	4907      	ldr	r1, [pc, #28]	; (80175d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80175b2:	4808      	ldr	r0, [pc, #32]	; (80175d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80175b4:	f7fd fba3 	bl	8014cfe <USBD_GetString>
 80175b8:	e004      	b.n	80175c4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80175ba:	683a      	ldr	r2, [r7, #0]
 80175bc:	4904      	ldr	r1, [pc, #16]	; (80175d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80175be:	4805      	ldr	r0, [pc, #20]	; (80175d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80175c0:	f7fd fb9d 	bl	8014cfe <USBD_GetString>
  }
  return USBD_StrDesc;
 80175c4:	4b02      	ldr	r3, [pc, #8]	; (80175d0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80175c6:	4618      	mov	r0, r3
 80175c8:	3708      	adds	r7, #8
 80175ca:	46bd      	mov	sp, r7
 80175cc:	bd80      	pop	{r7, pc}
 80175ce:	bf00      	nop
 80175d0:	24001684 	.word	0x24001684
 80175d4:	080198ec 	.word	0x080198ec

080175d8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80175d8:	b580      	push	{r7, lr}
 80175da:	b082      	sub	sp, #8
 80175dc:	af00      	add	r7, sp, #0
 80175de:	4603      	mov	r3, r0
 80175e0:	6039      	str	r1, [r7, #0]
 80175e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80175e4:	79fb      	ldrb	r3, [r7, #7]
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	d105      	bne.n	80175f6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80175ea:	683a      	ldr	r2, [r7, #0]
 80175ec:	4907      	ldr	r1, [pc, #28]	; (801760c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80175ee:	4808      	ldr	r0, [pc, #32]	; (8017610 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80175f0:	f7fd fb85 	bl	8014cfe <USBD_GetString>
 80175f4:	e004      	b.n	8017600 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80175f6:	683a      	ldr	r2, [r7, #0]
 80175f8:	4904      	ldr	r1, [pc, #16]	; (801760c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80175fa:	4805      	ldr	r0, [pc, #20]	; (8017610 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80175fc:	f7fd fb7f 	bl	8014cfe <USBD_GetString>
  }
  return USBD_StrDesc;
 8017600:	4b02      	ldr	r3, [pc, #8]	; (801760c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8017602:	4618      	mov	r0, r3
 8017604:	3708      	adds	r7, #8
 8017606:	46bd      	mov	sp, r7
 8017608:	bd80      	pop	{r7, pc}
 801760a:	bf00      	nop
 801760c:	24001684 	.word	0x24001684
 8017610:	080198f8 	.word	0x080198f8

08017614 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017614:	b580      	push	{r7, lr}
 8017616:	b084      	sub	sp, #16
 8017618:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801761a:	4b0f      	ldr	r3, [pc, #60]	; (8017658 <Get_SerialNum+0x44>)
 801761c:	681b      	ldr	r3, [r3, #0]
 801761e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017620:	4b0e      	ldr	r3, [pc, #56]	; (801765c <Get_SerialNum+0x48>)
 8017622:	681b      	ldr	r3, [r3, #0]
 8017624:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8017626:	4b0e      	ldr	r3, [pc, #56]	; (8017660 <Get_SerialNum+0x4c>)
 8017628:	681b      	ldr	r3, [r3, #0]
 801762a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801762c:	68fa      	ldr	r2, [r7, #12]
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	4413      	add	r3, r2
 8017632:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017634:	68fb      	ldr	r3, [r7, #12]
 8017636:	2b00      	cmp	r3, #0
 8017638:	d009      	beq.n	801764e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801763a:	2208      	movs	r2, #8
 801763c:	4909      	ldr	r1, [pc, #36]	; (8017664 <Get_SerialNum+0x50>)
 801763e:	68f8      	ldr	r0, [r7, #12]
 8017640:	f000 f814 	bl	801766c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017644:	2204      	movs	r2, #4
 8017646:	4908      	ldr	r1, [pc, #32]	; (8017668 <Get_SerialNum+0x54>)
 8017648:	68b8      	ldr	r0, [r7, #8]
 801764a:	f000 f80f 	bl	801766c <IntToUnicode>
  }
}
 801764e:	bf00      	nop
 8017650:	3710      	adds	r7, #16
 8017652:	46bd      	mov	sp, r7
 8017654:	bd80      	pop	{r7, pc}
 8017656:	bf00      	nop
 8017658:	1ff1e800 	.word	0x1ff1e800
 801765c:	1ff1e804 	.word	0x1ff1e804
 8017660:	1ff1e808 	.word	0x1ff1e808
 8017664:	24000172 	.word	0x24000172
 8017668:	24000182 	.word	0x24000182

0801766c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801766c:	b480      	push	{r7}
 801766e:	b087      	sub	sp, #28
 8017670:	af00      	add	r7, sp, #0
 8017672:	60f8      	str	r0, [r7, #12]
 8017674:	60b9      	str	r1, [r7, #8]
 8017676:	4613      	mov	r3, r2
 8017678:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801767a:	2300      	movs	r3, #0
 801767c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801767e:	2300      	movs	r3, #0
 8017680:	75fb      	strb	r3, [r7, #23]
 8017682:	e027      	b.n	80176d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017684:	68fb      	ldr	r3, [r7, #12]
 8017686:	0f1b      	lsrs	r3, r3, #28
 8017688:	2b09      	cmp	r3, #9
 801768a:	d80b      	bhi.n	80176a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801768c:	68fb      	ldr	r3, [r7, #12]
 801768e:	0f1b      	lsrs	r3, r3, #28
 8017690:	b2da      	uxtb	r2, r3
 8017692:	7dfb      	ldrb	r3, [r7, #23]
 8017694:	005b      	lsls	r3, r3, #1
 8017696:	4619      	mov	r1, r3
 8017698:	68bb      	ldr	r3, [r7, #8]
 801769a:	440b      	add	r3, r1
 801769c:	3230      	adds	r2, #48	; 0x30
 801769e:	b2d2      	uxtb	r2, r2
 80176a0:	701a      	strb	r2, [r3, #0]
 80176a2:	e00a      	b.n	80176ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80176a4:	68fb      	ldr	r3, [r7, #12]
 80176a6:	0f1b      	lsrs	r3, r3, #28
 80176a8:	b2da      	uxtb	r2, r3
 80176aa:	7dfb      	ldrb	r3, [r7, #23]
 80176ac:	005b      	lsls	r3, r3, #1
 80176ae:	4619      	mov	r1, r3
 80176b0:	68bb      	ldr	r3, [r7, #8]
 80176b2:	440b      	add	r3, r1
 80176b4:	3237      	adds	r2, #55	; 0x37
 80176b6:	b2d2      	uxtb	r2, r2
 80176b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80176ba:	68fb      	ldr	r3, [r7, #12]
 80176bc:	011b      	lsls	r3, r3, #4
 80176be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80176c0:	7dfb      	ldrb	r3, [r7, #23]
 80176c2:	005b      	lsls	r3, r3, #1
 80176c4:	3301      	adds	r3, #1
 80176c6:	68ba      	ldr	r2, [r7, #8]
 80176c8:	4413      	add	r3, r2
 80176ca:	2200      	movs	r2, #0
 80176cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80176ce:	7dfb      	ldrb	r3, [r7, #23]
 80176d0:	3301      	adds	r3, #1
 80176d2:	75fb      	strb	r3, [r7, #23]
 80176d4:	7dfa      	ldrb	r2, [r7, #23]
 80176d6:	79fb      	ldrb	r3, [r7, #7]
 80176d8:	429a      	cmp	r2, r3
 80176da:	d3d3      	bcc.n	8017684 <IntToUnicode+0x18>
  }
}
 80176dc:	bf00      	nop
 80176de:	371c      	adds	r7, #28
 80176e0:	46bd      	mov	sp, r7
 80176e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176e6:	4770      	bx	lr

080176e8 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 80176e8:	b480      	push	{r7}
 80176ea:	b083      	sub	sp, #12
 80176ec:	af00      	add	r7, sp, #0
 80176ee:	4603      	mov	r3, r0
 80176f0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 80176f2:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80176f4:	4618      	mov	r0, r3
 80176f6:	370c      	adds	r7, #12
 80176f8:	46bd      	mov	sp, r7
 80176fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176fe:	4770      	bx	lr

08017700 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8017700:	b580      	push	{r7, lr}
 8017702:	b08e      	sub	sp, #56	; 0x38
 8017704:	af00      	add	r7, sp, #0
 8017706:	4603      	mov	r3, r0
 8017708:	60b9      	str	r1, [r7, #8]
 801770a:	607a      	str	r2, [r7, #4]
 801770c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 801770e:	23ff      	movs	r3, #255	; 0xff
 8017710:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  HAL_SD_GetCardInfo(&hsd1, &info);
 8017714:	f107 0310 	add.w	r3, r7, #16
 8017718:	4619      	mov	r1, r3
 801771a:	480a      	ldr	r0, [pc, #40]	; (8017744 <STORAGE_GetCapacity_FS+0x44>)
 801771c:	f7f5 f89a 	bl	800c854 <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 8017720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017722:	1e5a      	subs	r2, r3, #1
 8017724:	68bb      	ldr	r3, [r7, #8]
 8017726:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 8017728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801772a:	b29a      	uxth	r2, r3
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 8017730:	2300      	movs	r3, #0
 8017732:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  return ret;
 8017736:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 801773a:	4618      	mov	r0, r3
 801773c:	3738      	adds	r7, #56	; 0x38
 801773e:	46bd      	mov	sp, r7
 8017740:	bd80      	pop	{r7, pc}
 8017742:	bf00      	nop
 8017744:	24000bf4 	.word	0x24000bf4

08017748 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8017748:	b480      	push	{r7}
 801774a:	b083      	sub	sp, #12
 801774c:	af00      	add	r7, sp, #0
 801774e:	4603      	mov	r3, r0
 8017750:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8017752:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8017754:	4618      	mov	r0, r3
 8017756:	370c      	adds	r7, #12
 8017758:	46bd      	mov	sp, r7
 801775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801775e:	4770      	bx	lr

08017760 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8017760:	b480      	push	{r7}
 8017762:	b083      	sub	sp, #12
 8017764:	af00      	add	r7, sp, #0
 8017766:	4603      	mov	r3, r0
 8017768:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 801776a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801776c:	4618      	mov	r0, r3
 801776e:	370c      	adds	r7, #12
 8017770:	46bd      	mov	sp, r7
 8017772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017776:	4770      	bx	lr

08017778 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8017778:	b580      	push	{r7, lr}
 801777a:	b088      	sub	sp, #32
 801777c:	af02      	add	r7, sp, #8
 801777e:	60b9      	str	r1, [r7, #8]
 8017780:	607a      	str	r2, [r7, #4]
 8017782:	461a      	mov	r2, r3
 8017784:	4603      	mov	r3, r0
 8017786:	73fb      	strb	r3, [r7, #15]
 8017788:	4613      	mov	r3, r2
 801778a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	int8_t ret = -1;
 801778c:	23ff      	movs	r3, #255	; 0xff
 801778e:	75fb      	strb	r3, [r7, #23]

	HAL_SD_ReadBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8017790:	89ba      	ldrh	r2, [r7, #12]
 8017792:	f04f 33ff 	mov.w	r3, #4294967295
 8017796:	9300      	str	r3, [sp, #0]
 8017798:	4613      	mov	r3, r2
 801779a:	687a      	ldr	r2, [r7, #4]
 801779c:	68b9      	ldr	r1, [r7, #8]
 801779e:	4809      	ldr	r0, [pc, #36]	; (80177c4 <STORAGE_Read_FS+0x4c>)
 80177a0:	f7f3 ffca 	bl	800b738 <HAL_SD_ReadBlocks>

	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 80177a4:	bf00      	nop
 80177a6:	4807      	ldr	r0, [pc, #28]	; (80177c4 <STORAGE_Read_FS+0x4c>)
 80177a8:	f7f5 f92a 	bl	800ca00 <HAL_SD_GetCardState>
 80177ac:	4603      	mov	r3, r0
 80177ae:	2b04      	cmp	r3, #4
 80177b0:	d1f9      	bne.n	80177a6 <STORAGE_Read_FS+0x2e>
	ret = 0;
 80177b2:	2300      	movs	r3, #0
 80177b4:	75fb      	strb	r3, [r7, #23]
	return ret;
 80177b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 80177ba:	4618      	mov	r0, r3
 80177bc:	3718      	adds	r7, #24
 80177be:	46bd      	mov	sp, r7
 80177c0:	bd80      	pop	{r7, pc}
 80177c2:	bf00      	nop
 80177c4:	24000bf4 	.word	0x24000bf4

080177c8 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80177c8:	b580      	push	{r7, lr}
 80177ca:	b088      	sub	sp, #32
 80177cc:	af02      	add	r7, sp, #8
 80177ce:	60b9      	str	r1, [r7, #8]
 80177d0:	607a      	str	r2, [r7, #4]
 80177d2:	461a      	mov	r2, r3
 80177d4:	4603      	mov	r3, r0
 80177d6:	73fb      	strb	r3, [r7, #15]
 80177d8:	4613      	mov	r3, r2
 80177da:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	int8_t ret = -1;
 80177dc:	23ff      	movs	r3, #255	; 0xff
 80177de:	75fb      	strb	r3, [r7, #23]

	HAL_SD_WriteBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 80177e0:	89ba      	ldrh	r2, [r7, #12]
 80177e2:	f04f 33ff 	mov.w	r3, #4294967295
 80177e6:	9300      	str	r3, [sp, #0]
 80177e8:	4613      	mov	r3, r2
 80177ea:	687a      	ldr	r2, [r7, #4]
 80177ec:	68b9      	ldr	r1, [r7, #8]
 80177ee:	4809      	ldr	r0, [pc, #36]	; (8017814 <STORAGE_Write_FS+0x4c>)
 80177f0:	f7f4 f92c 	bl	800ba4c <HAL_SD_WriteBlocks>


	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 80177f4:	bf00      	nop
 80177f6:	4807      	ldr	r0, [pc, #28]	; (8017814 <STORAGE_Write_FS+0x4c>)
 80177f8:	f7f5 f902 	bl	800ca00 <HAL_SD_GetCardState>
 80177fc:	4603      	mov	r3, r0
 80177fe:	2b04      	cmp	r3, #4
 8017800:	d1f9      	bne.n	80177f6 <STORAGE_Write_FS+0x2e>
	ret = 0;
 8017802:	2300      	movs	r3, #0
 8017804:	75fb      	strb	r3, [r7, #23]
	return ret;
 8017806:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 801780a:	4618      	mov	r0, r3
 801780c:	3718      	adds	r7, #24
 801780e:	46bd      	mov	sp, r7
 8017810:	bd80      	pop	{r7, pc}
 8017812:	bf00      	nop
 8017814:	24000bf4 	.word	0x24000bf4

08017818 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8017818:	b480      	push	{r7}
 801781a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 801781c:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801781e:	4618      	mov	r0, r3
 8017820:	46bd      	mov	sp, r7
 8017822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017826:	4770      	bx	lr

08017828 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017828:	b580      	push	{r7, lr}
 801782a:	b08a      	sub	sp, #40	; 0x28
 801782c:	af00      	add	r7, sp, #0
 801782e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017830:	f107 0314 	add.w	r3, r7, #20
 8017834:	2200      	movs	r2, #0
 8017836:	601a      	str	r2, [r3, #0]
 8017838:	605a      	str	r2, [r3, #4]
 801783a:	609a      	str	r2, [r3, #8]
 801783c:	60da      	str	r2, [r3, #12]
 801783e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	681b      	ldr	r3, [r3, #0]
 8017844:	4a1e      	ldr	r2, [pc, #120]	; (80178c0 <HAL_PCD_MspInit+0x98>)
 8017846:	4293      	cmp	r3, r2
 8017848:	d136      	bne.n	80178b8 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801784a:	4b1e      	ldr	r3, [pc, #120]	; (80178c4 <HAL_PCD_MspInit+0x9c>)
 801784c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8017850:	4a1c      	ldr	r2, [pc, #112]	; (80178c4 <HAL_PCD_MspInit+0x9c>)
 8017852:	f043 0301 	orr.w	r3, r3, #1
 8017856:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801785a:	4b1a      	ldr	r3, [pc, #104]	; (80178c4 <HAL_PCD_MspInit+0x9c>)
 801785c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8017860:	f003 0301 	and.w	r3, r3, #1
 8017864:	613b      	str	r3, [r7, #16]
 8017866:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8017868:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801786c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801786e:	2302      	movs	r3, #2
 8017870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017872:	2300      	movs	r3, #0
 8017874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017876:	2300      	movs	r3, #0
 8017878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801787a:	230a      	movs	r3, #10
 801787c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801787e:	f107 0314 	add.w	r3, r7, #20
 8017882:	4619      	mov	r1, r3
 8017884:	4810      	ldr	r0, [pc, #64]	; (80178c8 <HAL_PCD_MspInit+0xa0>)
 8017886:	f7ee fff3 	bl	8006870 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801788a:	4b0e      	ldr	r3, [pc, #56]	; (80178c4 <HAL_PCD_MspInit+0x9c>)
 801788c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8017890:	4a0c      	ldr	r2, [pc, #48]	; (80178c4 <HAL_PCD_MspInit+0x9c>)
 8017892:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8017896:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801789a:	4b0a      	ldr	r3, [pc, #40]	; (80178c4 <HAL_PCD_MspInit+0x9c>)
 801789c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80178a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80178a4:	60fb      	str	r3, [r7, #12]
 80178a6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80178a8:	2200      	movs	r2, #0
 80178aa:	2100      	movs	r1, #0
 80178ac:	2065      	movs	r0, #101	; 0x65
 80178ae:	f7eb fd96 	bl	80033de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80178b2:	2065      	movs	r0, #101	; 0x65
 80178b4:	f7eb fdad 	bl	8003412 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80178b8:	bf00      	nop
 80178ba:	3728      	adds	r7, #40	; 0x28
 80178bc:	46bd      	mov	sp, r7
 80178be:	bd80      	pop	{r7, pc}
 80178c0:	40080000 	.word	0x40080000
 80178c4:	58024400 	.word	0x58024400
 80178c8:	58020000 	.word	0x58020000

080178cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80178cc:	b580      	push	{r7, lr}
 80178ce:	b082      	sub	sp, #8
 80178d0:	af00      	add	r7, sp, #0
 80178d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80178e0:	4619      	mov	r1, r3
 80178e2:	4610      	mov	r0, r2
 80178e4:	f7fc fa89 	bl	8013dfa <USBD_LL_SetupStage>
}
 80178e8:	bf00      	nop
 80178ea:	3708      	adds	r7, #8
 80178ec:	46bd      	mov	sp, r7
 80178ee:	bd80      	pop	{r7, pc}

080178f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80178f0:	b580      	push	{r7, lr}
 80178f2:	b082      	sub	sp, #8
 80178f4:	af00      	add	r7, sp, #0
 80178f6:	6078      	str	r0, [r7, #4]
 80178f8:	460b      	mov	r3, r1
 80178fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80178fc:	687b      	ldr	r3, [r7, #4]
 80178fe:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8017902:	78fa      	ldrb	r2, [r7, #3]
 8017904:	6879      	ldr	r1, [r7, #4]
 8017906:	4613      	mov	r3, r2
 8017908:	00db      	lsls	r3, r3, #3
 801790a:	1a9b      	subs	r3, r3, r2
 801790c:	009b      	lsls	r3, r3, #2
 801790e:	440b      	add	r3, r1
 8017910:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8017914:	681a      	ldr	r2, [r3, #0]
 8017916:	78fb      	ldrb	r3, [r7, #3]
 8017918:	4619      	mov	r1, r3
 801791a:	f7fc fac1 	bl	8013ea0 <USBD_LL_DataOutStage>
}
 801791e:	bf00      	nop
 8017920:	3708      	adds	r7, #8
 8017922:	46bd      	mov	sp, r7
 8017924:	bd80      	pop	{r7, pc}

08017926 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017926:	b580      	push	{r7, lr}
 8017928:	b082      	sub	sp, #8
 801792a:	af00      	add	r7, sp, #0
 801792c:	6078      	str	r0, [r7, #4]
 801792e:	460b      	mov	r3, r1
 8017930:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8017938:	78fa      	ldrb	r2, [r7, #3]
 801793a:	6879      	ldr	r1, [r7, #4]
 801793c:	4613      	mov	r3, r2
 801793e:	00db      	lsls	r3, r3, #3
 8017940:	1a9b      	subs	r3, r3, r2
 8017942:	009b      	lsls	r3, r3, #2
 8017944:	440b      	add	r3, r1
 8017946:	3348      	adds	r3, #72	; 0x48
 8017948:	681a      	ldr	r2, [r3, #0]
 801794a:	78fb      	ldrb	r3, [r7, #3]
 801794c:	4619      	mov	r1, r3
 801794e:	f7fc fb0a 	bl	8013f66 <USBD_LL_DataInStage>
}
 8017952:	bf00      	nop
 8017954:	3708      	adds	r7, #8
 8017956:	46bd      	mov	sp, r7
 8017958:	bd80      	pop	{r7, pc}

0801795a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801795a:	b580      	push	{r7, lr}
 801795c:	b082      	sub	sp, #8
 801795e:	af00      	add	r7, sp, #0
 8017960:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017968:	4618      	mov	r0, r3
 801796a:	f7fc fc0e 	bl	801418a <USBD_LL_SOF>
}
 801796e:	bf00      	nop
 8017970:	3708      	adds	r7, #8
 8017972:	46bd      	mov	sp, r7
 8017974:	bd80      	pop	{r7, pc}

08017976 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017976:	b580      	push	{r7, lr}
 8017978:	b084      	sub	sp, #16
 801797a:	af00      	add	r7, sp, #0
 801797c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801797e:	2301      	movs	r3, #1
 8017980:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	68db      	ldr	r3, [r3, #12]
 8017986:	2b00      	cmp	r3, #0
 8017988:	d102      	bne.n	8017990 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801798a:	2300      	movs	r3, #0
 801798c:	73fb      	strb	r3, [r7, #15]
 801798e:	e008      	b.n	80179a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	68db      	ldr	r3, [r3, #12]
 8017994:	2b02      	cmp	r3, #2
 8017996:	d102      	bne.n	801799e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8017998:	2301      	movs	r3, #1
 801799a:	73fb      	strb	r3, [r7, #15]
 801799c:	e001      	b.n	80179a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801799e:	f7ea ff21 	bl	80027e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80179a2:	687b      	ldr	r3, [r7, #4]
 80179a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80179a8:	7bfa      	ldrb	r2, [r7, #15]
 80179aa:	4611      	mov	r1, r2
 80179ac:	4618      	mov	r0, r3
 80179ae:	f7fc fbb1 	bl	8014114 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80179b8:	4618      	mov	r0, r3
 80179ba:	f7fc fb6a 	bl	8014092 <USBD_LL_Reset>
}
 80179be:	bf00      	nop
 80179c0:	3710      	adds	r7, #16
 80179c2:	46bd      	mov	sp, r7
 80179c4:	bd80      	pop	{r7, pc}
	...

080179c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80179c8:	b580      	push	{r7, lr}
 80179ca:	b082      	sub	sp, #8
 80179cc:	af00      	add	r7, sp, #0
 80179ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80179d6:	4618      	mov	r0, r3
 80179d8:	f7fc fbac 	bl	8014134 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	681b      	ldr	r3, [r3, #0]
 80179e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80179e4:	681b      	ldr	r3, [r3, #0]
 80179e6:	687a      	ldr	r2, [r7, #4]
 80179e8:	6812      	ldr	r2, [r2, #0]
 80179ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80179ee:	f043 0301 	orr.w	r3, r3, #1
 80179f2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	6a1b      	ldr	r3, [r3, #32]
 80179f8:	2b00      	cmp	r3, #0
 80179fa:	d005      	beq.n	8017a08 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80179fc:	4b04      	ldr	r3, [pc, #16]	; (8017a10 <HAL_PCD_SuspendCallback+0x48>)
 80179fe:	691b      	ldr	r3, [r3, #16]
 8017a00:	4a03      	ldr	r2, [pc, #12]	; (8017a10 <HAL_PCD_SuspendCallback+0x48>)
 8017a02:	f043 0306 	orr.w	r3, r3, #6
 8017a06:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8017a08:	bf00      	nop
 8017a0a:	3708      	adds	r7, #8
 8017a0c:	46bd      	mov	sp, r7
 8017a0e:	bd80      	pop	{r7, pc}
 8017a10:	e000ed00 	.word	0xe000ed00

08017a14 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017a14:	b580      	push	{r7, lr}
 8017a16:	b082      	sub	sp, #8
 8017a18:	af00      	add	r7, sp, #0
 8017a1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017a22:	4618      	mov	r0, r3
 8017a24:	f7fc fb9b 	bl	801415e <USBD_LL_Resume>
}
 8017a28:	bf00      	nop
 8017a2a:	3708      	adds	r7, #8
 8017a2c:	46bd      	mov	sp, r7
 8017a2e:	bd80      	pop	{r7, pc}

08017a30 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017a30:	b580      	push	{r7, lr}
 8017a32:	b082      	sub	sp, #8
 8017a34:	af00      	add	r7, sp, #0
 8017a36:	6078      	str	r0, [r7, #4]
 8017a38:	460b      	mov	r3, r1
 8017a3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017a42:	78fa      	ldrb	r2, [r7, #3]
 8017a44:	4611      	mov	r1, r2
 8017a46:	4618      	mov	r0, r3
 8017a48:	f7fc fbc6 	bl	80141d8 <USBD_LL_IsoOUTIncomplete>
}
 8017a4c:	bf00      	nop
 8017a4e:	3708      	adds	r7, #8
 8017a50:	46bd      	mov	sp, r7
 8017a52:	bd80      	pop	{r7, pc}

08017a54 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017a54:	b580      	push	{r7, lr}
 8017a56:	b082      	sub	sp, #8
 8017a58:	af00      	add	r7, sp, #0
 8017a5a:	6078      	str	r0, [r7, #4]
 8017a5c:	460b      	mov	r3, r1
 8017a5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017a60:	687b      	ldr	r3, [r7, #4]
 8017a62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017a66:	78fa      	ldrb	r2, [r7, #3]
 8017a68:	4611      	mov	r1, r2
 8017a6a:	4618      	mov	r0, r3
 8017a6c:	f7fc fba7 	bl	80141be <USBD_LL_IsoINIncomplete>
}
 8017a70:	bf00      	nop
 8017a72:	3708      	adds	r7, #8
 8017a74:	46bd      	mov	sp, r7
 8017a76:	bd80      	pop	{r7, pc}

08017a78 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017a78:	b580      	push	{r7, lr}
 8017a7a:	b082      	sub	sp, #8
 8017a7c:	af00      	add	r7, sp, #0
 8017a7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017a86:	4618      	mov	r0, r3
 8017a88:	f7fc fbb3 	bl	80141f2 <USBD_LL_DevConnected>
}
 8017a8c:	bf00      	nop
 8017a8e:	3708      	adds	r7, #8
 8017a90:	46bd      	mov	sp, r7
 8017a92:	bd80      	pop	{r7, pc}

08017a94 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017a94:	b580      	push	{r7, lr}
 8017a96:	b082      	sub	sp, #8
 8017a98:	af00      	add	r7, sp, #0
 8017a9a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017aa2:	4618      	mov	r0, r3
 8017aa4:	f7fc fbb0 	bl	8014208 <USBD_LL_DevDisconnected>
}
 8017aa8:	bf00      	nop
 8017aaa:	3708      	adds	r7, #8
 8017aac:	46bd      	mov	sp, r7
 8017aae:	bd80      	pop	{r7, pc}

08017ab0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017ab0:	b580      	push	{r7, lr}
 8017ab2:	b082      	sub	sp, #8
 8017ab4:	af00      	add	r7, sp, #0
 8017ab6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8017ab8:	687b      	ldr	r3, [r7, #4]
 8017aba:	781b      	ldrb	r3, [r3, #0]
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	d13e      	bne.n	8017b3e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8017ac0:	4a21      	ldr	r2, [pc, #132]	; (8017b48 <USBD_LL_Init+0x98>)
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8017ac8:	687b      	ldr	r3, [r7, #4]
 8017aca:	4a1f      	ldr	r2, [pc, #124]	; (8017b48 <USBD_LL_Init+0x98>)
 8017acc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8017ad0:	4b1d      	ldr	r3, [pc, #116]	; (8017b48 <USBD_LL_Init+0x98>)
 8017ad2:	4a1e      	ldr	r2, [pc, #120]	; (8017b4c <USBD_LL_Init+0x9c>)
 8017ad4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8017ad6:	4b1c      	ldr	r3, [pc, #112]	; (8017b48 <USBD_LL_Init+0x98>)
 8017ad8:	2209      	movs	r2, #9
 8017ada:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8017adc:	4b1a      	ldr	r3, [pc, #104]	; (8017b48 <USBD_LL_Init+0x98>)
 8017ade:	2202      	movs	r2, #2
 8017ae0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8017ae2:	4b19      	ldr	r3, [pc, #100]	; (8017b48 <USBD_LL_Init+0x98>)
 8017ae4:	2200      	movs	r2, #0
 8017ae6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8017ae8:	4b17      	ldr	r3, [pc, #92]	; (8017b48 <USBD_LL_Init+0x98>)
 8017aea:	2202      	movs	r2, #2
 8017aec:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8017aee:	4b16      	ldr	r3, [pc, #88]	; (8017b48 <USBD_LL_Init+0x98>)
 8017af0:	2200      	movs	r2, #0
 8017af2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8017af4:	4b14      	ldr	r3, [pc, #80]	; (8017b48 <USBD_LL_Init+0x98>)
 8017af6:	2200      	movs	r2, #0
 8017af8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8017afa:	4b13      	ldr	r3, [pc, #76]	; (8017b48 <USBD_LL_Init+0x98>)
 8017afc:	2200      	movs	r2, #0
 8017afe:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8017b00:	4b11      	ldr	r3, [pc, #68]	; (8017b48 <USBD_LL_Init+0x98>)
 8017b02:	2200      	movs	r2, #0
 8017b04:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8017b06:	4b10      	ldr	r3, [pc, #64]	; (8017b48 <USBD_LL_Init+0x98>)
 8017b08:	2200      	movs	r2, #0
 8017b0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8017b0c:	4b0e      	ldr	r3, [pc, #56]	; (8017b48 <USBD_LL_Init+0x98>)
 8017b0e:	2200      	movs	r2, #0
 8017b10:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8017b12:	480d      	ldr	r0, [pc, #52]	; (8017b48 <USBD_LL_Init+0x98>)
 8017b14:	f7ef f8e6 	bl	8006ce4 <HAL_PCD_Init>
 8017b18:	4603      	mov	r3, r0
 8017b1a:	2b00      	cmp	r3, #0
 8017b1c:	d001      	beq.n	8017b22 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8017b1e:	f7ea fe61 	bl	80027e4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8017b22:	2180      	movs	r1, #128	; 0x80
 8017b24:	4808      	ldr	r0, [pc, #32]	; (8017b48 <USBD_LL_Init+0x98>)
 8017b26:	f7f0 faa4 	bl	8008072 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8017b2a:	2240      	movs	r2, #64	; 0x40
 8017b2c:	2100      	movs	r1, #0
 8017b2e:	4806      	ldr	r0, [pc, #24]	; (8017b48 <USBD_LL_Init+0x98>)
 8017b30:	f7f0 fa58 	bl	8007fe4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8017b34:	2280      	movs	r2, #128	; 0x80
 8017b36:	2101      	movs	r1, #1
 8017b38:	4803      	ldr	r0, [pc, #12]	; (8017b48 <USBD_LL_Init+0x98>)
 8017b3a:	f7f0 fa53 	bl	8007fe4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8017b3e:	2300      	movs	r3, #0
}
 8017b40:	4618      	mov	r0, r3
 8017b42:	3708      	adds	r7, #8
 8017b44:	46bd      	mov	sp, r7
 8017b46:	bd80      	pop	{r7, pc}
 8017b48:	24001884 	.word	0x24001884
 8017b4c:	40080000 	.word	0x40080000

08017b50 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8017b50:	b580      	push	{r7, lr}
 8017b52:	b084      	sub	sp, #16
 8017b54:	af00      	add	r7, sp, #0
 8017b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017b58:	2300      	movs	r3, #0
 8017b5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017b5c:	2300      	movs	r3, #0
 8017b5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8017b60:	687b      	ldr	r3, [r7, #4]
 8017b62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017b66:	4618      	mov	r0, r3
 8017b68:	f7ef f9e0 	bl	8006f2c <HAL_PCD_Start>
 8017b6c:	4603      	mov	r3, r0
 8017b6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017b70:	7bfb      	ldrb	r3, [r7, #15]
 8017b72:	4618      	mov	r0, r3
 8017b74:	f000 f94a 	bl	8017e0c <USBD_Get_USB_Status>
 8017b78:	4603      	mov	r3, r0
 8017b7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017b7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8017b7e:	4618      	mov	r0, r3
 8017b80:	3710      	adds	r7, #16
 8017b82:	46bd      	mov	sp, r7
 8017b84:	bd80      	pop	{r7, pc}

08017b86 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8017b86:	b580      	push	{r7, lr}
 8017b88:	b084      	sub	sp, #16
 8017b8a:	af00      	add	r7, sp, #0
 8017b8c:	6078      	str	r0, [r7, #4]
 8017b8e:	4608      	mov	r0, r1
 8017b90:	4611      	mov	r1, r2
 8017b92:	461a      	mov	r2, r3
 8017b94:	4603      	mov	r3, r0
 8017b96:	70fb      	strb	r3, [r7, #3]
 8017b98:	460b      	mov	r3, r1
 8017b9a:	70bb      	strb	r3, [r7, #2]
 8017b9c:	4613      	mov	r3, r2
 8017b9e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017ba0:	2300      	movs	r3, #0
 8017ba2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017ba4:	2300      	movs	r3, #0
 8017ba6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017bae:	78bb      	ldrb	r3, [r7, #2]
 8017bb0:	883a      	ldrh	r2, [r7, #0]
 8017bb2:	78f9      	ldrb	r1, [r7, #3]
 8017bb4:	f7ef fdf1 	bl	800779a <HAL_PCD_EP_Open>
 8017bb8:	4603      	mov	r3, r0
 8017bba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017bbc:	7bfb      	ldrb	r3, [r7, #15]
 8017bbe:	4618      	mov	r0, r3
 8017bc0:	f000 f924 	bl	8017e0c <USBD_Get_USB_Status>
 8017bc4:	4603      	mov	r3, r0
 8017bc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017bc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8017bca:	4618      	mov	r0, r3
 8017bcc:	3710      	adds	r7, #16
 8017bce:	46bd      	mov	sp, r7
 8017bd0:	bd80      	pop	{r7, pc}

08017bd2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017bd2:	b580      	push	{r7, lr}
 8017bd4:	b084      	sub	sp, #16
 8017bd6:	af00      	add	r7, sp, #0
 8017bd8:	6078      	str	r0, [r7, #4]
 8017bda:	460b      	mov	r3, r1
 8017bdc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017bde:	2300      	movs	r3, #0
 8017be0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017be2:	2300      	movs	r3, #0
 8017be4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017bec:	78fa      	ldrb	r2, [r7, #3]
 8017bee:	4611      	mov	r1, r2
 8017bf0:	4618      	mov	r0, r3
 8017bf2:	f7ef fe3a 	bl	800786a <HAL_PCD_EP_Close>
 8017bf6:	4603      	mov	r3, r0
 8017bf8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017bfa:	7bfb      	ldrb	r3, [r7, #15]
 8017bfc:	4618      	mov	r0, r3
 8017bfe:	f000 f905 	bl	8017e0c <USBD_Get_USB_Status>
 8017c02:	4603      	mov	r3, r0
 8017c04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017c06:	7bbb      	ldrb	r3, [r7, #14]
}
 8017c08:	4618      	mov	r0, r3
 8017c0a:	3710      	adds	r7, #16
 8017c0c:	46bd      	mov	sp, r7
 8017c0e:	bd80      	pop	{r7, pc}

08017c10 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017c10:	b580      	push	{r7, lr}
 8017c12:	b084      	sub	sp, #16
 8017c14:	af00      	add	r7, sp, #0
 8017c16:	6078      	str	r0, [r7, #4]
 8017c18:	460b      	mov	r3, r1
 8017c1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017c1c:	2300      	movs	r3, #0
 8017c1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017c20:	2300      	movs	r3, #0
 8017c22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017c2a:	78fa      	ldrb	r2, [r7, #3]
 8017c2c:	4611      	mov	r1, r2
 8017c2e:	4618      	mov	r0, r3
 8017c30:	f7ef ffcc 	bl	8007bcc <HAL_PCD_EP_Flush>
 8017c34:	4603      	mov	r3, r0
 8017c36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017c38:	7bfb      	ldrb	r3, [r7, #15]
 8017c3a:	4618      	mov	r0, r3
 8017c3c:	f000 f8e6 	bl	8017e0c <USBD_Get_USB_Status>
 8017c40:	4603      	mov	r3, r0
 8017c42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017c44:	7bbb      	ldrb	r3, [r7, #14]
}
 8017c46:	4618      	mov	r0, r3
 8017c48:	3710      	adds	r7, #16
 8017c4a:	46bd      	mov	sp, r7
 8017c4c:	bd80      	pop	{r7, pc}

08017c4e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017c4e:	b580      	push	{r7, lr}
 8017c50:	b084      	sub	sp, #16
 8017c52:	af00      	add	r7, sp, #0
 8017c54:	6078      	str	r0, [r7, #4]
 8017c56:	460b      	mov	r3, r1
 8017c58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017c5a:	2300      	movs	r3, #0
 8017c5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017c5e:	2300      	movs	r3, #0
 8017c60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017c62:	687b      	ldr	r3, [r7, #4]
 8017c64:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017c68:	78fa      	ldrb	r2, [r7, #3]
 8017c6a:	4611      	mov	r1, r2
 8017c6c:	4618      	mov	r0, r3
 8017c6e:	f7ef fef3 	bl	8007a58 <HAL_PCD_EP_SetStall>
 8017c72:	4603      	mov	r3, r0
 8017c74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017c76:	7bfb      	ldrb	r3, [r7, #15]
 8017c78:	4618      	mov	r0, r3
 8017c7a:	f000 f8c7 	bl	8017e0c <USBD_Get_USB_Status>
 8017c7e:	4603      	mov	r3, r0
 8017c80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017c82:	7bbb      	ldrb	r3, [r7, #14]
}
 8017c84:	4618      	mov	r0, r3
 8017c86:	3710      	adds	r7, #16
 8017c88:	46bd      	mov	sp, r7
 8017c8a:	bd80      	pop	{r7, pc}

08017c8c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017c8c:	b580      	push	{r7, lr}
 8017c8e:	b084      	sub	sp, #16
 8017c90:	af00      	add	r7, sp, #0
 8017c92:	6078      	str	r0, [r7, #4]
 8017c94:	460b      	mov	r3, r1
 8017c96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017c98:	2300      	movs	r3, #0
 8017c9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017c9c:	2300      	movs	r3, #0
 8017c9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017ca6:	78fa      	ldrb	r2, [r7, #3]
 8017ca8:	4611      	mov	r1, r2
 8017caa:	4618      	mov	r0, r3
 8017cac:	f7ef ff38 	bl	8007b20 <HAL_PCD_EP_ClrStall>
 8017cb0:	4603      	mov	r3, r0
 8017cb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017cb4:	7bfb      	ldrb	r3, [r7, #15]
 8017cb6:	4618      	mov	r0, r3
 8017cb8:	f000 f8a8 	bl	8017e0c <USBD_Get_USB_Status>
 8017cbc:	4603      	mov	r3, r0
 8017cbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017cc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8017cc2:	4618      	mov	r0, r3
 8017cc4:	3710      	adds	r7, #16
 8017cc6:	46bd      	mov	sp, r7
 8017cc8:	bd80      	pop	{r7, pc}

08017cca <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017cca:	b480      	push	{r7}
 8017ccc:	b085      	sub	sp, #20
 8017cce:	af00      	add	r7, sp, #0
 8017cd0:	6078      	str	r0, [r7, #4]
 8017cd2:	460b      	mov	r3, r1
 8017cd4:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017cdc:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017cde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017ce2:	2b00      	cmp	r3, #0
 8017ce4:	da0b      	bge.n	8017cfe <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017ce6:	78fb      	ldrb	r3, [r7, #3]
 8017ce8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017cec:	68f9      	ldr	r1, [r7, #12]
 8017cee:	4613      	mov	r3, r2
 8017cf0:	00db      	lsls	r3, r3, #3
 8017cf2:	1a9b      	subs	r3, r3, r2
 8017cf4:	009b      	lsls	r3, r3, #2
 8017cf6:	440b      	add	r3, r1
 8017cf8:	333e      	adds	r3, #62	; 0x3e
 8017cfa:	781b      	ldrb	r3, [r3, #0]
 8017cfc:	e00b      	b.n	8017d16 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017cfe:	78fb      	ldrb	r3, [r7, #3]
 8017d00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017d04:	68f9      	ldr	r1, [r7, #12]
 8017d06:	4613      	mov	r3, r2
 8017d08:	00db      	lsls	r3, r3, #3
 8017d0a:	1a9b      	subs	r3, r3, r2
 8017d0c:	009b      	lsls	r3, r3, #2
 8017d0e:	440b      	add	r3, r1
 8017d10:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017d14:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017d16:	4618      	mov	r0, r3
 8017d18:	3714      	adds	r7, #20
 8017d1a:	46bd      	mov	sp, r7
 8017d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d20:	4770      	bx	lr

08017d22 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017d22:	b580      	push	{r7, lr}
 8017d24:	b084      	sub	sp, #16
 8017d26:	af00      	add	r7, sp, #0
 8017d28:	6078      	str	r0, [r7, #4]
 8017d2a:	460b      	mov	r3, r1
 8017d2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017d2e:	2300      	movs	r3, #0
 8017d30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017d32:	2300      	movs	r3, #0
 8017d34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017d3c:	78fa      	ldrb	r2, [r7, #3]
 8017d3e:	4611      	mov	r1, r2
 8017d40:	4618      	mov	r0, r3
 8017d42:	f7ef fd05 	bl	8007750 <HAL_PCD_SetAddress>
 8017d46:	4603      	mov	r3, r0
 8017d48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017d4a:	7bfb      	ldrb	r3, [r7, #15]
 8017d4c:	4618      	mov	r0, r3
 8017d4e:	f000 f85d 	bl	8017e0c <USBD_Get_USB_Status>
 8017d52:	4603      	mov	r3, r0
 8017d54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017d56:	7bbb      	ldrb	r3, [r7, #14]
}
 8017d58:	4618      	mov	r0, r3
 8017d5a:	3710      	adds	r7, #16
 8017d5c:	46bd      	mov	sp, r7
 8017d5e:	bd80      	pop	{r7, pc}

08017d60 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017d60:	b580      	push	{r7, lr}
 8017d62:	b086      	sub	sp, #24
 8017d64:	af00      	add	r7, sp, #0
 8017d66:	60f8      	str	r0, [r7, #12]
 8017d68:	607a      	str	r2, [r7, #4]
 8017d6a:	603b      	str	r3, [r7, #0]
 8017d6c:	460b      	mov	r3, r1
 8017d6e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017d70:	2300      	movs	r3, #0
 8017d72:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017d74:	2300      	movs	r3, #0
 8017d76:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017d78:	68fb      	ldr	r3, [r7, #12]
 8017d7a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017d7e:	7af9      	ldrb	r1, [r7, #11]
 8017d80:	683b      	ldr	r3, [r7, #0]
 8017d82:	687a      	ldr	r2, [r7, #4]
 8017d84:	f7ef fe1e 	bl	80079c4 <HAL_PCD_EP_Transmit>
 8017d88:	4603      	mov	r3, r0
 8017d8a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017d8c:	7dfb      	ldrb	r3, [r7, #23]
 8017d8e:	4618      	mov	r0, r3
 8017d90:	f000 f83c 	bl	8017e0c <USBD_Get_USB_Status>
 8017d94:	4603      	mov	r3, r0
 8017d96:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017d98:	7dbb      	ldrb	r3, [r7, #22]
}
 8017d9a:	4618      	mov	r0, r3
 8017d9c:	3718      	adds	r7, #24
 8017d9e:	46bd      	mov	sp, r7
 8017da0:	bd80      	pop	{r7, pc}

08017da2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017da2:	b580      	push	{r7, lr}
 8017da4:	b086      	sub	sp, #24
 8017da6:	af00      	add	r7, sp, #0
 8017da8:	60f8      	str	r0, [r7, #12]
 8017daa:	607a      	str	r2, [r7, #4]
 8017dac:	603b      	str	r3, [r7, #0]
 8017dae:	460b      	mov	r3, r1
 8017db0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017db2:	2300      	movs	r3, #0
 8017db4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017db6:	2300      	movs	r3, #0
 8017db8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017dba:	68fb      	ldr	r3, [r7, #12]
 8017dbc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017dc0:	7af9      	ldrb	r1, [r7, #11]
 8017dc2:	683b      	ldr	r3, [r7, #0]
 8017dc4:	687a      	ldr	r2, [r7, #4]
 8017dc6:	f7ef fd9a 	bl	80078fe <HAL_PCD_EP_Receive>
 8017dca:	4603      	mov	r3, r0
 8017dcc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017dce:	7dfb      	ldrb	r3, [r7, #23]
 8017dd0:	4618      	mov	r0, r3
 8017dd2:	f000 f81b 	bl	8017e0c <USBD_Get_USB_Status>
 8017dd6:	4603      	mov	r3, r0
 8017dd8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017dda:	7dbb      	ldrb	r3, [r7, #22]
}
 8017ddc:	4618      	mov	r0, r3
 8017dde:	3718      	adds	r7, #24
 8017de0:	46bd      	mov	sp, r7
 8017de2:	bd80      	pop	{r7, pc}

08017de4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017de4:	b580      	push	{r7, lr}
 8017de6:	b082      	sub	sp, #8
 8017de8:	af00      	add	r7, sp, #0
 8017dea:	6078      	str	r0, [r7, #4]
 8017dec:	460b      	mov	r3, r1
 8017dee:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017df6:	78fa      	ldrb	r2, [r7, #3]
 8017df8:	4611      	mov	r1, r2
 8017dfa:	4618      	mov	r0, r3
 8017dfc:	f7ef fdca 	bl	8007994 <HAL_PCD_EP_GetRxCount>
 8017e00:	4603      	mov	r3, r0
}
 8017e02:	4618      	mov	r0, r3
 8017e04:	3708      	adds	r7, #8
 8017e06:	46bd      	mov	sp, r7
 8017e08:	bd80      	pop	{r7, pc}
	...

08017e0c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017e0c:	b480      	push	{r7}
 8017e0e:	b085      	sub	sp, #20
 8017e10:	af00      	add	r7, sp, #0
 8017e12:	4603      	mov	r3, r0
 8017e14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017e16:	2300      	movs	r3, #0
 8017e18:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017e1a:	79fb      	ldrb	r3, [r7, #7]
 8017e1c:	2b03      	cmp	r3, #3
 8017e1e:	d817      	bhi.n	8017e50 <USBD_Get_USB_Status+0x44>
 8017e20:	a201      	add	r2, pc, #4	; (adr r2, 8017e28 <USBD_Get_USB_Status+0x1c>)
 8017e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017e26:	bf00      	nop
 8017e28:	08017e39 	.word	0x08017e39
 8017e2c:	08017e3f 	.word	0x08017e3f
 8017e30:	08017e45 	.word	0x08017e45
 8017e34:	08017e4b 	.word	0x08017e4b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017e38:	2300      	movs	r3, #0
 8017e3a:	73fb      	strb	r3, [r7, #15]
    break;
 8017e3c:	e00b      	b.n	8017e56 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017e3e:	2303      	movs	r3, #3
 8017e40:	73fb      	strb	r3, [r7, #15]
    break;
 8017e42:	e008      	b.n	8017e56 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017e44:	2301      	movs	r3, #1
 8017e46:	73fb      	strb	r3, [r7, #15]
    break;
 8017e48:	e005      	b.n	8017e56 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017e4a:	2303      	movs	r3, #3
 8017e4c:	73fb      	strb	r3, [r7, #15]
    break;
 8017e4e:	e002      	b.n	8017e56 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8017e50:	2303      	movs	r3, #3
 8017e52:	73fb      	strb	r3, [r7, #15]
    break;
 8017e54:	bf00      	nop
  }
  return usb_status;
 8017e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8017e58:	4618      	mov	r0, r3
 8017e5a:	3714      	adds	r7, #20
 8017e5c:	46bd      	mov	sp, r7
 8017e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e62:	4770      	bx	lr

08017e64 <__errno>:
 8017e64:	4b01      	ldr	r3, [pc, #4]	; (8017e6c <__errno+0x8>)
 8017e66:	6818      	ldr	r0, [r3, #0]
 8017e68:	4770      	bx	lr
 8017e6a:	bf00      	nop
 8017e6c:	240001ac 	.word	0x240001ac

08017e70 <__libc_init_array>:
 8017e70:	b570      	push	{r4, r5, r6, lr}
 8017e72:	4e0d      	ldr	r6, [pc, #52]	; (8017ea8 <__libc_init_array+0x38>)
 8017e74:	4c0d      	ldr	r4, [pc, #52]	; (8017eac <__libc_init_array+0x3c>)
 8017e76:	1ba4      	subs	r4, r4, r6
 8017e78:	10a4      	asrs	r4, r4, #2
 8017e7a:	2500      	movs	r5, #0
 8017e7c:	42a5      	cmp	r5, r4
 8017e7e:	d109      	bne.n	8017e94 <__libc_init_array+0x24>
 8017e80:	4e0b      	ldr	r6, [pc, #44]	; (8017eb0 <__libc_init_array+0x40>)
 8017e82:	4c0c      	ldr	r4, [pc, #48]	; (8017eb4 <__libc_init_array+0x44>)
 8017e84:	f001 f972 	bl	801916c <_init>
 8017e88:	1ba4      	subs	r4, r4, r6
 8017e8a:	10a4      	asrs	r4, r4, #2
 8017e8c:	2500      	movs	r5, #0
 8017e8e:	42a5      	cmp	r5, r4
 8017e90:	d105      	bne.n	8017e9e <__libc_init_array+0x2e>
 8017e92:	bd70      	pop	{r4, r5, r6, pc}
 8017e94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017e98:	4798      	blx	r3
 8017e9a:	3501      	adds	r5, #1
 8017e9c:	e7ee      	b.n	8017e7c <__libc_init_array+0xc>
 8017e9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017ea2:	4798      	blx	r3
 8017ea4:	3501      	adds	r5, #1
 8017ea6:	e7f2      	b.n	8017e8e <__libc_init_array+0x1e>
 8017ea8:	08019aa0 	.word	0x08019aa0
 8017eac:	08019aa0 	.word	0x08019aa0
 8017eb0:	08019aa0 	.word	0x08019aa0
 8017eb4:	08019aa4 	.word	0x08019aa4

08017eb8 <malloc>:
 8017eb8:	4b02      	ldr	r3, [pc, #8]	; (8017ec4 <malloc+0xc>)
 8017eba:	4601      	mov	r1, r0
 8017ebc:	6818      	ldr	r0, [r3, #0]
 8017ebe:	f000 b86d 	b.w	8017f9c <_malloc_r>
 8017ec2:	bf00      	nop
 8017ec4:	240001ac 	.word	0x240001ac

08017ec8 <free>:
 8017ec8:	4b02      	ldr	r3, [pc, #8]	; (8017ed4 <free+0xc>)
 8017eca:	4601      	mov	r1, r0
 8017ecc:	6818      	ldr	r0, [r3, #0]
 8017ece:	f000 b817 	b.w	8017f00 <_free_r>
 8017ed2:	bf00      	nop
 8017ed4:	240001ac 	.word	0x240001ac

08017ed8 <memcpy>:
 8017ed8:	b510      	push	{r4, lr}
 8017eda:	1e43      	subs	r3, r0, #1
 8017edc:	440a      	add	r2, r1
 8017ede:	4291      	cmp	r1, r2
 8017ee0:	d100      	bne.n	8017ee4 <memcpy+0xc>
 8017ee2:	bd10      	pop	{r4, pc}
 8017ee4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017ee8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017eec:	e7f7      	b.n	8017ede <memcpy+0x6>

08017eee <memset>:
 8017eee:	4402      	add	r2, r0
 8017ef0:	4603      	mov	r3, r0
 8017ef2:	4293      	cmp	r3, r2
 8017ef4:	d100      	bne.n	8017ef8 <memset+0xa>
 8017ef6:	4770      	bx	lr
 8017ef8:	f803 1b01 	strb.w	r1, [r3], #1
 8017efc:	e7f9      	b.n	8017ef2 <memset+0x4>
	...

08017f00 <_free_r>:
 8017f00:	b538      	push	{r3, r4, r5, lr}
 8017f02:	4605      	mov	r5, r0
 8017f04:	2900      	cmp	r1, #0
 8017f06:	d045      	beq.n	8017f94 <_free_r+0x94>
 8017f08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017f0c:	1f0c      	subs	r4, r1, #4
 8017f0e:	2b00      	cmp	r3, #0
 8017f10:	bfb8      	it	lt
 8017f12:	18e4      	addlt	r4, r4, r3
 8017f14:	f000 fc1a 	bl	801874c <__malloc_lock>
 8017f18:	4a1f      	ldr	r2, [pc, #124]	; (8017f98 <_free_r+0x98>)
 8017f1a:	6813      	ldr	r3, [r2, #0]
 8017f1c:	4610      	mov	r0, r2
 8017f1e:	b933      	cbnz	r3, 8017f2e <_free_r+0x2e>
 8017f20:	6063      	str	r3, [r4, #4]
 8017f22:	6014      	str	r4, [r2, #0]
 8017f24:	4628      	mov	r0, r5
 8017f26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017f2a:	f000 bc10 	b.w	801874e <__malloc_unlock>
 8017f2e:	42a3      	cmp	r3, r4
 8017f30:	d90c      	bls.n	8017f4c <_free_r+0x4c>
 8017f32:	6821      	ldr	r1, [r4, #0]
 8017f34:	1862      	adds	r2, r4, r1
 8017f36:	4293      	cmp	r3, r2
 8017f38:	bf04      	itt	eq
 8017f3a:	681a      	ldreq	r2, [r3, #0]
 8017f3c:	685b      	ldreq	r3, [r3, #4]
 8017f3e:	6063      	str	r3, [r4, #4]
 8017f40:	bf04      	itt	eq
 8017f42:	1852      	addeq	r2, r2, r1
 8017f44:	6022      	streq	r2, [r4, #0]
 8017f46:	6004      	str	r4, [r0, #0]
 8017f48:	e7ec      	b.n	8017f24 <_free_r+0x24>
 8017f4a:	4613      	mov	r3, r2
 8017f4c:	685a      	ldr	r2, [r3, #4]
 8017f4e:	b10a      	cbz	r2, 8017f54 <_free_r+0x54>
 8017f50:	42a2      	cmp	r2, r4
 8017f52:	d9fa      	bls.n	8017f4a <_free_r+0x4a>
 8017f54:	6819      	ldr	r1, [r3, #0]
 8017f56:	1858      	adds	r0, r3, r1
 8017f58:	42a0      	cmp	r0, r4
 8017f5a:	d10b      	bne.n	8017f74 <_free_r+0x74>
 8017f5c:	6820      	ldr	r0, [r4, #0]
 8017f5e:	4401      	add	r1, r0
 8017f60:	1858      	adds	r0, r3, r1
 8017f62:	4282      	cmp	r2, r0
 8017f64:	6019      	str	r1, [r3, #0]
 8017f66:	d1dd      	bne.n	8017f24 <_free_r+0x24>
 8017f68:	6810      	ldr	r0, [r2, #0]
 8017f6a:	6852      	ldr	r2, [r2, #4]
 8017f6c:	605a      	str	r2, [r3, #4]
 8017f6e:	4401      	add	r1, r0
 8017f70:	6019      	str	r1, [r3, #0]
 8017f72:	e7d7      	b.n	8017f24 <_free_r+0x24>
 8017f74:	d902      	bls.n	8017f7c <_free_r+0x7c>
 8017f76:	230c      	movs	r3, #12
 8017f78:	602b      	str	r3, [r5, #0]
 8017f7a:	e7d3      	b.n	8017f24 <_free_r+0x24>
 8017f7c:	6820      	ldr	r0, [r4, #0]
 8017f7e:	1821      	adds	r1, r4, r0
 8017f80:	428a      	cmp	r2, r1
 8017f82:	bf04      	itt	eq
 8017f84:	6811      	ldreq	r1, [r2, #0]
 8017f86:	6852      	ldreq	r2, [r2, #4]
 8017f88:	6062      	str	r2, [r4, #4]
 8017f8a:	bf04      	itt	eq
 8017f8c:	1809      	addeq	r1, r1, r0
 8017f8e:	6021      	streq	r1, [r4, #0]
 8017f90:	605c      	str	r4, [r3, #4]
 8017f92:	e7c7      	b.n	8017f24 <_free_r+0x24>
 8017f94:	bd38      	pop	{r3, r4, r5, pc}
 8017f96:	bf00      	nop
 8017f98:	2400039c 	.word	0x2400039c

08017f9c <_malloc_r>:
 8017f9c:	b570      	push	{r4, r5, r6, lr}
 8017f9e:	1ccd      	adds	r5, r1, #3
 8017fa0:	f025 0503 	bic.w	r5, r5, #3
 8017fa4:	3508      	adds	r5, #8
 8017fa6:	2d0c      	cmp	r5, #12
 8017fa8:	bf38      	it	cc
 8017faa:	250c      	movcc	r5, #12
 8017fac:	2d00      	cmp	r5, #0
 8017fae:	4606      	mov	r6, r0
 8017fb0:	db01      	blt.n	8017fb6 <_malloc_r+0x1a>
 8017fb2:	42a9      	cmp	r1, r5
 8017fb4:	d903      	bls.n	8017fbe <_malloc_r+0x22>
 8017fb6:	230c      	movs	r3, #12
 8017fb8:	6033      	str	r3, [r6, #0]
 8017fba:	2000      	movs	r0, #0
 8017fbc:	bd70      	pop	{r4, r5, r6, pc}
 8017fbe:	f000 fbc5 	bl	801874c <__malloc_lock>
 8017fc2:	4a21      	ldr	r2, [pc, #132]	; (8018048 <_malloc_r+0xac>)
 8017fc4:	6814      	ldr	r4, [r2, #0]
 8017fc6:	4621      	mov	r1, r4
 8017fc8:	b991      	cbnz	r1, 8017ff0 <_malloc_r+0x54>
 8017fca:	4c20      	ldr	r4, [pc, #128]	; (801804c <_malloc_r+0xb0>)
 8017fcc:	6823      	ldr	r3, [r4, #0]
 8017fce:	b91b      	cbnz	r3, 8017fd8 <_malloc_r+0x3c>
 8017fd0:	4630      	mov	r0, r6
 8017fd2:	f000 f8b9 	bl	8018148 <_sbrk_r>
 8017fd6:	6020      	str	r0, [r4, #0]
 8017fd8:	4629      	mov	r1, r5
 8017fda:	4630      	mov	r0, r6
 8017fdc:	f000 f8b4 	bl	8018148 <_sbrk_r>
 8017fe0:	1c43      	adds	r3, r0, #1
 8017fe2:	d124      	bne.n	801802e <_malloc_r+0x92>
 8017fe4:	230c      	movs	r3, #12
 8017fe6:	6033      	str	r3, [r6, #0]
 8017fe8:	4630      	mov	r0, r6
 8017fea:	f000 fbb0 	bl	801874e <__malloc_unlock>
 8017fee:	e7e4      	b.n	8017fba <_malloc_r+0x1e>
 8017ff0:	680b      	ldr	r3, [r1, #0]
 8017ff2:	1b5b      	subs	r3, r3, r5
 8017ff4:	d418      	bmi.n	8018028 <_malloc_r+0x8c>
 8017ff6:	2b0b      	cmp	r3, #11
 8017ff8:	d90f      	bls.n	801801a <_malloc_r+0x7e>
 8017ffa:	600b      	str	r3, [r1, #0]
 8017ffc:	50cd      	str	r5, [r1, r3]
 8017ffe:	18cc      	adds	r4, r1, r3
 8018000:	4630      	mov	r0, r6
 8018002:	f000 fba4 	bl	801874e <__malloc_unlock>
 8018006:	f104 000b 	add.w	r0, r4, #11
 801800a:	1d23      	adds	r3, r4, #4
 801800c:	f020 0007 	bic.w	r0, r0, #7
 8018010:	1ac3      	subs	r3, r0, r3
 8018012:	d0d3      	beq.n	8017fbc <_malloc_r+0x20>
 8018014:	425a      	negs	r2, r3
 8018016:	50e2      	str	r2, [r4, r3]
 8018018:	e7d0      	b.n	8017fbc <_malloc_r+0x20>
 801801a:	428c      	cmp	r4, r1
 801801c:	684b      	ldr	r3, [r1, #4]
 801801e:	bf16      	itet	ne
 8018020:	6063      	strne	r3, [r4, #4]
 8018022:	6013      	streq	r3, [r2, #0]
 8018024:	460c      	movne	r4, r1
 8018026:	e7eb      	b.n	8018000 <_malloc_r+0x64>
 8018028:	460c      	mov	r4, r1
 801802a:	6849      	ldr	r1, [r1, #4]
 801802c:	e7cc      	b.n	8017fc8 <_malloc_r+0x2c>
 801802e:	1cc4      	adds	r4, r0, #3
 8018030:	f024 0403 	bic.w	r4, r4, #3
 8018034:	42a0      	cmp	r0, r4
 8018036:	d005      	beq.n	8018044 <_malloc_r+0xa8>
 8018038:	1a21      	subs	r1, r4, r0
 801803a:	4630      	mov	r0, r6
 801803c:	f000 f884 	bl	8018148 <_sbrk_r>
 8018040:	3001      	adds	r0, #1
 8018042:	d0cf      	beq.n	8017fe4 <_malloc_r+0x48>
 8018044:	6025      	str	r5, [r4, #0]
 8018046:	e7db      	b.n	8018000 <_malloc_r+0x64>
 8018048:	2400039c 	.word	0x2400039c
 801804c:	240003a0 	.word	0x240003a0

08018050 <iprintf>:
 8018050:	b40f      	push	{r0, r1, r2, r3}
 8018052:	4b0a      	ldr	r3, [pc, #40]	; (801807c <iprintf+0x2c>)
 8018054:	b513      	push	{r0, r1, r4, lr}
 8018056:	681c      	ldr	r4, [r3, #0]
 8018058:	b124      	cbz	r4, 8018064 <iprintf+0x14>
 801805a:	69a3      	ldr	r3, [r4, #24]
 801805c:	b913      	cbnz	r3, 8018064 <iprintf+0x14>
 801805e:	4620      	mov	r0, r4
 8018060:	f000 fa86 	bl	8018570 <__sinit>
 8018064:	ab05      	add	r3, sp, #20
 8018066:	9a04      	ldr	r2, [sp, #16]
 8018068:	68a1      	ldr	r1, [r4, #8]
 801806a:	9301      	str	r3, [sp, #4]
 801806c:	4620      	mov	r0, r4
 801806e:	f000 fceb 	bl	8018a48 <_vfiprintf_r>
 8018072:	b002      	add	sp, #8
 8018074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018078:	b004      	add	sp, #16
 801807a:	4770      	bx	lr
 801807c:	240001ac 	.word	0x240001ac

08018080 <_puts_r>:
 8018080:	b570      	push	{r4, r5, r6, lr}
 8018082:	460e      	mov	r6, r1
 8018084:	4605      	mov	r5, r0
 8018086:	b118      	cbz	r0, 8018090 <_puts_r+0x10>
 8018088:	6983      	ldr	r3, [r0, #24]
 801808a:	b90b      	cbnz	r3, 8018090 <_puts_r+0x10>
 801808c:	f000 fa70 	bl	8018570 <__sinit>
 8018090:	69ab      	ldr	r3, [r5, #24]
 8018092:	68ac      	ldr	r4, [r5, #8]
 8018094:	b913      	cbnz	r3, 801809c <_puts_r+0x1c>
 8018096:	4628      	mov	r0, r5
 8018098:	f000 fa6a 	bl	8018570 <__sinit>
 801809c:	4b23      	ldr	r3, [pc, #140]	; (801812c <_puts_r+0xac>)
 801809e:	429c      	cmp	r4, r3
 80180a0:	d117      	bne.n	80180d2 <_puts_r+0x52>
 80180a2:	686c      	ldr	r4, [r5, #4]
 80180a4:	89a3      	ldrh	r3, [r4, #12]
 80180a6:	071b      	lsls	r3, r3, #28
 80180a8:	d51d      	bpl.n	80180e6 <_puts_r+0x66>
 80180aa:	6923      	ldr	r3, [r4, #16]
 80180ac:	b1db      	cbz	r3, 80180e6 <_puts_r+0x66>
 80180ae:	3e01      	subs	r6, #1
 80180b0:	68a3      	ldr	r3, [r4, #8]
 80180b2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80180b6:	3b01      	subs	r3, #1
 80180b8:	60a3      	str	r3, [r4, #8]
 80180ba:	b9e9      	cbnz	r1, 80180f8 <_puts_r+0x78>
 80180bc:	2b00      	cmp	r3, #0
 80180be:	da2e      	bge.n	801811e <_puts_r+0x9e>
 80180c0:	4622      	mov	r2, r4
 80180c2:	210a      	movs	r1, #10
 80180c4:	4628      	mov	r0, r5
 80180c6:	f000 f8a3 	bl	8018210 <__swbuf_r>
 80180ca:	3001      	adds	r0, #1
 80180cc:	d011      	beq.n	80180f2 <_puts_r+0x72>
 80180ce:	200a      	movs	r0, #10
 80180d0:	e011      	b.n	80180f6 <_puts_r+0x76>
 80180d2:	4b17      	ldr	r3, [pc, #92]	; (8018130 <_puts_r+0xb0>)
 80180d4:	429c      	cmp	r4, r3
 80180d6:	d101      	bne.n	80180dc <_puts_r+0x5c>
 80180d8:	68ac      	ldr	r4, [r5, #8]
 80180da:	e7e3      	b.n	80180a4 <_puts_r+0x24>
 80180dc:	4b15      	ldr	r3, [pc, #84]	; (8018134 <_puts_r+0xb4>)
 80180de:	429c      	cmp	r4, r3
 80180e0:	bf08      	it	eq
 80180e2:	68ec      	ldreq	r4, [r5, #12]
 80180e4:	e7de      	b.n	80180a4 <_puts_r+0x24>
 80180e6:	4621      	mov	r1, r4
 80180e8:	4628      	mov	r0, r5
 80180ea:	f000 f8e3 	bl	80182b4 <__swsetup_r>
 80180ee:	2800      	cmp	r0, #0
 80180f0:	d0dd      	beq.n	80180ae <_puts_r+0x2e>
 80180f2:	f04f 30ff 	mov.w	r0, #4294967295
 80180f6:	bd70      	pop	{r4, r5, r6, pc}
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	da04      	bge.n	8018106 <_puts_r+0x86>
 80180fc:	69a2      	ldr	r2, [r4, #24]
 80180fe:	429a      	cmp	r2, r3
 8018100:	dc06      	bgt.n	8018110 <_puts_r+0x90>
 8018102:	290a      	cmp	r1, #10
 8018104:	d004      	beq.n	8018110 <_puts_r+0x90>
 8018106:	6823      	ldr	r3, [r4, #0]
 8018108:	1c5a      	adds	r2, r3, #1
 801810a:	6022      	str	r2, [r4, #0]
 801810c:	7019      	strb	r1, [r3, #0]
 801810e:	e7cf      	b.n	80180b0 <_puts_r+0x30>
 8018110:	4622      	mov	r2, r4
 8018112:	4628      	mov	r0, r5
 8018114:	f000 f87c 	bl	8018210 <__swbuf_r>
 8018118:	3001      	adds	r0, #1
 801811a:	d1c9      	bne.n	80180b0 <_puts_r+0x30>
 801811c:	e7e9      	b.n	80180f2 <_puts_r+0x72>
 801811e:	6823      	ldr	r3, [r4, #0]
 8018120:	200a      	movs	r0, #10
 8018122:	1c5a      	adds	r2, r3, #1
 8018124:	6022      	str	r2, [r4, #0]
 8018126:	7018      	strb	r0, [r3, #0]
 8018128:	e7e5      	b.n	80180f6 <_puts_r+0x76>
 801812a:	bf00      	nop
 801812c:	08019a24 	.word	0x08019a24
 8018130:	08019a44 	.word	0x08019a44
 8018134:	08019a04 	.word	0x08019a04

08018138 <puts>:
 8018138:	4b02      	ldr	r3, [pc, #8]	; (8018144 <puts+0xc>)
 801813a:	4601      	mov	r1, r0
 801813c:	6818      	ldr	r0, [r3, #0]
 801813e:	f7ff bf9f 	b.w	8018080 <_puts_r>
 8018142:	bf00      	nop
 8018144:	240001ac 	.word	0x240001ac

08018148 <_sbrk_r>:
 8018148:	b538      	push	{r3, r4, r5, lr}
 801814a:	4c06      	ldr	r4, [pc, #24]	; (8018164 <_sbrk_r+0x1c>)
 801814c:	2300      	movs	r3, #0
 801814e:	4605      	mov	r5, r0
 8018150:	4608      	mov	r0, r1
 8018152:	6023      	str	r3, [r4, #0]
 8018154:	f7ea febc 	bl	8002ed0 <_sbrk>
 8018158:	1c43      	adds	r3, r0, #1
 801815a:	d102      	bne.n	8018162 <_sbrk_r+0x1a>
 801815c:	6823      	ldr	r3, [r4, #0]
 801815e:	b103      	cbz	r3, 8018162 <_sbrk_r+0x1a>
 8018160:	602b      	str	r3, [r5, #0]
 8018162:	bd38      	pop	{r3, r4, r5, pc}
 8018164:	24001c8c 	.word	0x24001c8c

08018168 <sniprintf>:
 8018168:	b40c      	push	{r2, r3}
 801816a:	b530      	push	{r4, r5, lr}
 801816c:	4b17      	ldr	r3, [pc, #92]	; (80181cc <sniprintf+0x64>)
 801816e:	1e0c      	subs	r4, r1, #0
 8018170:	b09d      	sub	sp, #116	; 0x74
 8018172:	681d      	ldr	r5, [r3, #0]
 8018174:	da08      	bge.n	8018188 <sniprintf+0x20>
 8018176:	238b      	movs	r3, #139	; 0x8b
 8018178:	602b      	str	r3, [r5, #0]
 801817a:	f04f 30ff 	mov.w	r0, #4294967295
 801817e:	b01d      	add	sp, #116	; 0x74
 8018180:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018184:	b002      	add	sp, #8
 8018186:	4770      	bx	lr
 8018188:	f44f 7302 	mov.w	r3, #520	; 0x208
 801818c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018190:	bf14      	ite	ne
 8018192:	f104 33ff 	addne.w	r3, r4, #4294967295
 8018196:	4623      	moveq	r3, r4
 8018198:	9304      	str	r3, [sp, #16]
 801819a:	9307      	str	r3, [sp, #28]
 801819c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80181a0:	9002      	str	r0, [sp, #8]
 80181a2:	9006      	str	r0, [sp, #24]
 80181a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80181a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80181aa:	ab21      	add	r3, sp, #132	; 0x84
 80181ac:	a902      	add	r1, sp, #8
 80181ae:	4628      	mov	r0, r5
 80181b0:	9301      	str	r3, [sp, #4]
 80181b2:	f000 fb27 	bl	8018804 <_svfiprintf_r>
 80181b6:	1c43      	adds	r3, r0, #1
 80181b8:	bfbc      	itt	lt
 80181ba:	238b      	movlt	r3, #139	; 0x8b
 80181bc:	602b      	strlt	r3, [r5, #0]
 80181be:	2c00      	cmp	r4, #0
 80181c0:	d0dd      	beq.n	801817e <sniprintf+0x16>
 80181c2:	9b02      	ldr	r3, [sp, #8]
 80181c4:	2200      	movs	r2, #0
 80181c6:	701a      	strb	r2, [r3, #0]
 80181c8:	e7d9      	b.n	801817e <sniprintf+0x16>
 80181ca:	bf00      	nop
 80181cc:	240001ac 	.word	0x240001ac

080181d0 <siprintf>:
 80181d0:	b40e      	push	{r1, r2, r3}
 80181d2:	b500      	push	{lr}
 80181d4:	b09c      	sub	sp, #112	; 0x70
 80181d6:	ab1d      	add	r3, sp, #116	; 0x74
 80181d8:	9002      	str	r0, [sp, #8]
 80181da:	9006      	str	r0, [sp, #24]
 80181dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80181e0:	4809      	ldr	r0, [pc, #36]	; (8018208 <siprintf+0x38>)
 80181e2:	9107      	str	r1, [sp, #28]
 80181e4:	9104      	str	r1, [sp, #16]
 80181e6:	4909      	ldr	r1, [pc, #36]	; (801820c <siprintf+0x3c>)
 80181e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80181ec:	9105      	str	r1, [sp, #20]
 80181ee:	6800      	ldr	r0, [r0, #0]
 80181f0:	9301      	str	r3, [sp, #4]
 80181f2:	a902      	add	r1, sp, #8
 80181f4:	f000 fb06 	bl	8018804 <_svfiprintf_r>
 80181f8:	9b02      	ldr	r3, [sp, #8]
 80181fa:	2200      	movs	r2, #0
 80181fc:	701a      	strb	r2, [r3, #0]
 80181fe:	b01c      	add	sp, #112	; 0x70
 8018200:	f85d eb04 	ldr.w	lr, [sp], #4
 8018204:	b003      	add	sp, #12
 8018206:	4770      	bx	lr
 8018208:	240001ac 	.word	0x240001ac
 801820c:	ffff0208 	.word	0xffff0208

08018210 <__swbuf_r>:
 8018210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018212:	460e      	mov	r6, r1
 8018214:	4614      	mov	r4, r2
 8018216:	4605      	mov	r5, r0
 8018218:	b118      	cbz	r0, 8018222 <__swbuf_r+0x12>
 801821a:	6983      	ldr	r3, [r0, #24]
 801821c:	b90b      	cbnz	r3, 8018222 <__swbuf_r+0x12>
 801821e:	f000 f9a7 	bl	8018570 <__sinit>
 8018222:	4b21      	ldr	r3, [pc, #132]	; (80182a8 <__swbuf_r+0x98>)
 8018224:	429c      	cmp	r4, r3
 8018226:	d12a      	bne.n	801827e <__swbuf_r+0x6e>
 8018228:	686c      	ldr	r4, [r5, #4]
 801822a:	69a3      	ldr	r3, [r4, #24]
 801822c:	60a3      	str	r3, [r4, #8]
 801822e:	89a3      	ldrh	r3, [r4, #12]
 8018230:	071a      	lsls	r2, r3, #28
 8018232:	d52e      	bpl.n	8018292 <__swbuf_r+0x82>
 8018234:	6923      	ldr	r3, [r4, #16]
 8018236:	b363      	cbz	r3, 8018292 <__swbuf_r+0x82>
 8018238:	6923      	ldr	r3, [r4, #16]
 801823a:	6820      	ldr	r0, [r4, #0]
 801823c:	1ac0      	subs	r0, r0, r3
 801823e:	6963      	ldr	r3, [r4, #20]
 8018240:	b2f6      	uxtb	r6, r6
 8018242:	4283      	cmp	r3, r0
 8018244:	4637      	mov	r7, r6
 8018246:	dc04      	bgt.n	8018252 <__swbuf_r+0x42>
 8018248:	4621      	mov	r1, r4
 801824a:	4628      	mov	r0, r5
 801824c:	f000 f926 	bl	801849c <_fflush_r>
 8018250:	bb28      	cbnz	r0, 801829e <__swbuf_r+0x8e>
 8018252:	68a3      	ldr	r3, [r4, #8]
 8018254:	3b01      	subs	r3, #1
 8018256:	60a3      	str	r3, [r4, #8]
 8018258:	6823      	ldr	r3, [r4, #0]
 801825a:	1c5a      	adds	r2, r3, #1
 801825c:	6022      	str	r2, [r4, #0]
 801825e:	701e      	strb	r6, [r3, #0]
 8018260:	6963      	ldr	r3, [r4, #20]
 8018262:	3001      	adds	r0, #1
 8018264:	4283      	cmp	r3, r0
 8018266:	d004      	beq.n	8018272 <__swbuf_r+0x62>
 8018268:	89a3      	ldrh	r3, [r4, #12]
 801826a:	07db      	lsls	r3, r3, #31
 801826c:	d519      	bpl.n	80182a2 <__swbuf_r+0x92>
 801826e:	2e0a      	cmp	r6, #10
 8018270:	d117      	bne.n	80182a2 <__swbuf_r+0x92>
 8018272:	4621      	mov	r1, r4
 8018274:	4628      	mov	r0, r5
 8018276:	f000 f911 	bl	801849c <_fflush_r>
 801827a:	b190      	cbz	r0, 80182a2 <__swbuf_r+0x92>
 801827c:	e00f      	b.n	801829e <__swbuf_r+0x8e>
 801827e:	4b0b      	ldr	r3, [pc, #44]	; (80182ac <__swbuf_r+0x9c>)
 8018280:	429c      	cmp	r4, r3
 8018282:	d101      	bne.n	8018288 <__swbuf_r+0x78>
 8018284:	68ac      	ldr	r4, [r5, #8]
 8018286:	e7d0      	b.n	801822a <__swbuf_r+0x1a>
 8018288:	4b09      	ldr	r3, [pc, #36]	; (80182b0 <__swbuf_r+0xa0>)
 801828a:	429c      	cmp	r4, r3
 801828c:	bf08      	it	eq
 801828e:	68ec      	ldreq	r4, [r5, #12]
 8018290:	e7cb      	b.n	801822a <__swbuf_r+0x1a>
 8018292:	4621      	mov	r1, r4
 8018294:	4628      	mov	r0, r5
 8018296:	f000 f80d 	bl	80182b4 <__swsetup_r>
 801829a:	2800      	cmp	r0, #0
 801829c:	d0cc      	beq.n	8018238 <__swbuf_r+0x28>
 801829e:	f04f 37ff 	mov.w	r7, #4294967295
 80182a2:	4638      	mov	r0, r7
 80182a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80182a6:	bf00      	nop
 80182a8:	08019a24 	.word	0x08019a24
 80182ac:	08019a44 	.word	0x08019a44
 80182b0:	08019a04 	.word	0x08019a04

080182b4 <__swsetup_r>:
 80182b4:	4b32      	ldr	r3, [pc, #200]	; (8018380 <__swsetup_r+0xcc>)
 80182b6:	b570      	push	{r4, r5, r6, lr}
 80182b8:	681d      	ldr	r5, [r3, #0]
 80182ba:	4606      	mov	r6, r0
 80182bc:	460c      	mov	r4, r1
 80182be:	b125      	cbz	r5, 80182ca <__swsetup_r+0x16>
 80182c0:	69ab      	ldr	r3, [r5, #24]
 80182c2:	b913      	cbnz	r3, 80182ca <__swsetup_r+0x16>
 80182c4:	4628      	mov	r0, r5
 80182c6:	f000 f953 	bl	8018570 <__sinit>
 80182ca:	4b2e      	ldr	r3, [pc, #184]	; (8018384 <__swsetup_r+0xd0>)
 80182cc:	429c      	cmp	r4, r3
 80182ce:	d10f      	bne.n	80182f0 <__swsetup_r+0x3c>
 80182d0:	686c      	ldr	r4, [r5, #4]
 80182d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80182d6:	b29a      	uxth	r2, r3
 80182d8:	0715      	lsls	r5, r2, #28
 80182da:	d42c      	bmi.n	8018336 <__swsetup_r+0x82>
 80182dc:	06d0      	lsls	r0, r2, #27
 80182de:	d411      	bmi.n	8018304 <__swsetup_r+0x50>
 80182e0:	2209      	movs	r2, #9
 80182e2:	6032      	str	r2, [r6, #0]
 80182e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80182e8:	81a3      	strh	r3, [r4, #12]
 80182ea:	f04f 30ff 	mov.w	r0, #4294967295
 80182ee:	e03e      	b.n	801836e <__swsetup_r+0xba>
 80182f0:	4b25      	ldr	r3, [pc, #148]	; (8018388 <__swsetup_r+0xd4>)
 80182f2:	429c      	cmp	r4, r3
 80182f4:	d101      	bne.n	80182fa <__swsetup_r+0x46>
 80182f6:	68ac      	ldr	r4, [r5, #8]
 80182f8:	e7eb      	b.n	80182d2 <__swsetup_r+0x1e>
 80182fa:	4b24      	ldr	r3, [pc, #144]	; (801838c <__swsetup_r+0xd8>)
 80182fc:	429c      	cmp	r4, r3
 80182fe:	bf08      	it	eq
 8018300:	68ec      	ldreq	r4, [r5, #12]
 8018302:	e7e6      	b.n	80182d2 <__swsetup_r+0x1e>
 8018304:	0751      	lsls	r1, r2, #29
 8018306:	d512      	bpl.n	801832e <__swsetup_r+0x7a>
 8018308:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801830a:	b141      	cbz	r1, 801831e <__swsetup_r+0x6a>
 801830c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018310:	4299      	cmp	r1, r3
 8018312:	d002      	beq.n	801831a <__swsetup_r+0x66>
 8018314:	4630      	mov	r0, r6
 8018316:	f7ff fdf3 	bl	8017f00 <_free_r>
 801831a:	2300      	movs	r3, #0
 801831c:	6363      	str	r3, [r4, #52]	; 0x34
 801831e:	89a3      	ldrh	r3, [r4, #12]
 8018320:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018324:	81a3      	strh	r3, [r4, #12]
 8018326:	2300      	movs	r3, #0
 8018328:	6063      	str	r3, [r4, #4]
 801832a:	6923      	ldr	r3, [r4, #16]
 801832c:	6023      	str	r3, [r4, #0]
 801832e:	89a3      	ldrh	r3, [r4, #12]
 8018330:	f043 0308 	orr.w	r3, r3, #8
 8018334:	81a3      	strh	r3, [r4, #12]
 8018336:	6923      	ldr	r3, [r4, #16]
 8018338:	b94b      	cbnz	r3, 801834e <__swsetup_r+0x9a>
 801833a:	89a3      	ldrh	r3, [r4, #12]
 801833c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018344:	d003      	beq.n	801834e <__swsetup_r+0x9a>
 8018346:	4621      	mov	r1, r4
 8018348:	4630      	mov	r0, r6
 801834a:	f000 f9bf 	bl	80186cc <__smakebuf_r>
 801834e:	89a2      	ldrh	r2, [r4, #12]
 8018350:	f012 0301 	ands.w	r3, r2, #1
 8018354:	d00c      	beq.n	8018370 <__swsetup_r+0xbc>
 8018356:	2300      	movs	r3, #0
 8018358:	60a3      	str	r3, [r4, #8]
 801835a:	6963      	ldr	r3, [r4, #20]
 801835c:	425b      	negs	r3, r3
 801835e:	61a3      	str	r3, [r4, #24]
 8018360:	6923      	ldr	r3, [r4, #16]
 8018362:	b953      	cbnz	r3, 801837a <__swsetup_r+0xc6>
 8018364:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018368:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801836c:	d1ba      	bne.n	80182e4 <__swsetup_r+0x30>
 801836e:	bd70      	pop	{r4, r5, r6, pc}
 8018370:	0792      	lsls	r2, r2, #30
 8018372:	bf58      	it	pl
 8018374:	6963      	ldrpl	r3, [r4, #20]
 8018376:	60a3      	str	r3, [r4, #8]
 8018378:	e7f2      	b.n	8018360 <__swsetup_r+0xac>
 801837a:	2000      	movs	r0, #0
 801837c:	e7f7      	b.n	801836e <__swsetup_r+0xba>
 801837e:	bf00      	nop
 8018380:	240001ac 	.word	0x240001ac
 8018384:	08019a24 	.word	0x08019a24
 8018388:	08019a44 	.word	0x08019a44
 801838c:	08019a04 	.word	0x08019a04

08018390 <__sflush_r>:
 8018390:	898a      	ldrh	r2, [r1, #12]
 8018392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018396:	4605      	mov	r5, r0
 8018398:	0710      	lsls	r0, r2, #28
 801839a:	460c      	mov	r4, r1
 801839c:	d458      	bmi.n	8018450 <__sflush_r+0xc0>
 801839e:	684b      	ldr	r3, [r1, #4]
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	dc05      	bgt.n	80183b0 <__sflush_r+0x20>
 80183a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	dc02      	bgt.n	80183b0 <__sflush_r+0x20>
 80183aa:	2000      	movs	r0, #0
 80183ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80183b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80183b2:	2e00      	cmp	r6, #0
 80183b4:	d0f9      	beq.n	80183aa <__sflush_r+0x1a>
 80183b6:	2300      	movs	r3, #0
 80183b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80183bc:	682f      	ldr	r7, [r5, #0]
 80183be:	6a21      	ldr	r1, [r4, #32]
 80183c0:	602b      	str	r3, [r5, #0]
 80183c2:	d032      	beq.n	801842a <__sflush_r+0x9a>
 80183c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80183c6:	89a3      	ldrh	r3, [r4, #12]
 80183c8:	075a      	lsls	r2, r3, #29
 80183ca:	d505      	bpl.n	80183d8 <__sflush_r+0x48>
 80183cc:	6863      	ldr	r3, [r4, #4]
 80183ce:	1ac0      	subs	r0, r0, r3
 80183d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80183d2:	b10b      	cbz	r3, 80183d8 <__sflush_r+0x48>
 80183d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80183d6:	1ac0      	subs	r0, r0, r3
 80183d8:	2300      	movs	r3, #0
 80183da:	4602      	mov	r2, r0
 80183dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80183de:	6a21      	ldr	r1, [r4, #32]
 80183e0:	4628      	mov	r0, r5
 80183e2:	47b0      	blx	r6
 80183e4:	1c43      	adds	r3, r0, #1
 80183e6:	89a3      	ldrh	r3, [r4, #12]
 80183e8:	d106      	bne.n	80183f8 <__sflush_r+0x68>
 80183ea:	6829      	ldr	r1, [r5, #0]
 80183ec:	291d      	cmp	r1, #29
 80183ee:	d848      	bhi.n	8018482 <__sflush_r+0xf2>
 80183f0:	4a29      	ldr	r2, [pc, #164]	; (8018498 <__sflush_r+0x108>)
 80183f2:	40ca      	lsrs	r2, r1
 80183f4:	07d6      	lsls	r6, r2, #31
 80183f6:	d544      	bpl.n	8018482 <__sflush_r+0xf2>
 80183f8:	2200      	movs	r2, #0
 80183fa:	6062      	str	r2, [r4, #4]
 80183fc:	04d9      	lsls	r1, r3, #19
 80183fe:	6922      	ldr	r2, [r4, #16]
 8018400:	6022      	str	r2, [r4, #0]
 8018402:	d504      	bpl.n	801840e <__sflush_r+0x7e>
 8018404:	1c42      	adds	r2, r0, #1
 8018406:	d101      	bne.n	801840c <__sflush_r+0x7c>
 8018408:	682b      	ldr	r3, [r5, #0]
 801840a:	b903      	cbnz	r3, 801840e <__sflush_r+0x7e>
 801840c:	6560      	str	r0, [r4, #84]	; 0x54
 801840e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018410:	602f      	str	r7, [r5, #0]
 8018412:	2900      	cmp	r1, #0
 8018414:	d0c9      	beq.n	80183aa <__sflush_r+0x1a>
 8018416:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801841a:	4299      	cmp	r1, r3
 801841c:	d002      	beq.n	8018424 <__sflush_r+0x94>
 801841e:	4628      	mov	r0, r5
 8018420:	f7ff fd6e 	bl	8017f00 <_free_r>
 8018424:	2000      	movs	r0, #0
 8018426:	6360      	str	r0, [r4, #52]	; 0x34
 8018428:	e7c0      	b.n	80183ac <__sflush_r+0x1c>
 801842a:	2301      	movs	r3, #1
 801842c:	4628      	mov	r0, r5
 801842e:	47b0      	blx	r6
 8018430:	1c41      	adds	r1, r0, #1
 8018432:	d1c8      	bne.n	80183c6 <__sflush_r+0x36>
 8018434:	682b      	ldr	r3, [r5, #0]
 8018436:	2b00      	cmp	r3, #0
 8018438:	d0c5      	beq.n	80183c6 <__sflush_r+0x36>
 801843a:	2b1d      	cmp	r3, #29
 801843c:	d001      	beq.n	8018442 <__sflush_r+0xb2>
 801843e:	2b16      	cmp	r3, #22
 8018440:	d101      	bne.n	8018446 <__sflush_r+0xb6>
 8018442:	602f      	str	r7, [r5, #0]
 8018444:	e7b1      	b.n	80183aa <__sflush_r+0x1a>
 8018446:	89a3      	ldrh	r3, [r4, #12]
 8018448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801844c:	81a3      	strh	r3, [r4, #12]
 801844e:	e7ad      	b.n	80183ac <__sflush_r+0x1c>
 8018450:	690f      	ldr	r7, [r1, #16]
 8018452:	2f00      	cmp	r7, #0
 8018454:	d0a9      	beq.n	80183aa <__sflush_r+0x1a>
 8018456:	0793      	lsls	r3, r2, #30
 8018458:	680e      	ldr	r6, [r1, #0]
 801845a:	bf08      	it	eq
 801845c:	694b      	ldreq	r3, [r1, #20]
 801845e:	600f      	str	r7, [r1, #0]
 8018460:	bf18      	it	ne
 8018462:	2300      	movne	r3, #0
 8018464:	eba6 0807 	sub.w	r8, r6, r7
 8018468:	608b      	str	r3, [r1, #8]
 801846a:	f1b8 0f00 	cmp.w	r8, #0
 801846e:	dd9c      	ble.n	80183aa <__sflush_r+0x1a>
 8018470:	4643      	mov	r3, r8
 8018472:	463a      	mov	r2, r7
 8018474:	6a21      	ldr	r1, [r4, #32]
 8018476:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018478:	4628      	mov	r0, r5
 801847a:	47b0      	blx	r6
 801847c:	2800      	cmp	r0, #0
 801847e:	dc06      	bgt.n	801848e <__sflush_r+0xfe>
 8018480:	89a3      	ldrh	r3, [r4, #12]
 8018482:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018486:	81a3      	strh	r3, [r4, #12]
 8018488:	f04f 30ff 	mov.w	r0, #4294967295
 801848c:	e78e      	b.n	80183ac <__sflush_r+0x1c>
 801848e:	4407      	add	r7, r0
 8018490:	eba8 0800 	sub.w	r8, r8, r0
 8018494:	e7e9      	b.n	801846a <__sflush_r+0xda>
 8018496:	bf00      	nop
 8018498:	20400001 	.word	0x20400001

0801849c <_fflush_r>:
 801849c:	b538      	push	{r3, r4, r5, lr}
 801849e:	690b      	ldr	r3, [r1, #16]
 80184a0:	4605      	mov	r5, r0
 80184a2:	460c      	mov	r4, r1
 80184a4:	b1db      	cbz	r3, 80184de <_fflush_r+0x42>
 80184a6:	b118      	cbz	r0, 80184b0 <_fflush_r+0x14>
 80184a8:	6983      	ldr	r3, [r0, #24]
 80184aa:	b90b      	cbnz	r3, 80184b0 <_fflush_r+0x14>
 80184ac:	f000 f860 	bl	8018570 <__sinit>
 80184b0:	4b0c      	ldr	r3, [pc, #48]	; (80184e4 <_fflush_r+0x48>)
 80184b2:	429c      	cmp	r4, r3
 80184b4:	d109      	bne.n	80184ca <_fflush_r+0x2e>
 80184b6:	686c      	ldr	r4, [r5, #4]
 80184b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80184bc:	b17b      	cbz	r3, 80184de <_fflush_r+0x42>
 80184be:	4621      	mov	r1, r4
 80184c0:	4628      	mov	r0, r5
 80184c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80184c6:	f7ff bf63 	b.w	8018390 <__sflush_r>
 80184ca:	4b07      	ldr	r3, [pc, #28]	; (80184e8 <_fflush_r+0x4c>)
 80184cc:	429c      	cmp	r4, r3
 80184ce:	d101      	bne.n	80184d4 <_fflush_r+0x38>
 80184d0:	68ac      	ldr	r4, [r5, #8]
 80184d2:	e7f1      	b.n	80184b8 <_fflush_r+0x1c>
 80184d4:	4b05      	ldr	r3, [pc, #20]	; (80184ec <_fflush_r+0x50>)
 80184d6:	429c      	cmp	r4, r3
 80184d8:	bf08      	it	eq
 80184da:	68ec      	ldreq	r4, [r5, #12]
 80184dc:	e7ec      	b.n	80184b8 <_fflush_r+0x1c>
 80184de:	2000      	movs	r0, #0
 80184e0:	bd38      	pop	{r3, r4, r5, pc}
 80184e2:	bf00      	nop
 80184e4:	08019a24 	.word	0x08019a24
 80184e8:	08019a44 	.word	0x08019a44
 80184ec:	08019a04 	.word	0x08019a04

080184f0 <std>:
 80184f0:	2300      	movs	r3, #0
 80184f2:	b510      	push	{r4, lr}
 80184f4:	4604      	mov	r4, r0
 80184f6:	e9c0 3300 	strd	r3, r3, [r0]
 80184fa:	6083      	str	r3, [r0, #8]
 80184fc:	8181      	strh	r1, [r0, #12]
 80184fe:	6643      	str	r3, [r0, #100]	; 0x64
 8018500:	81c2      	strh	r2, [r0, #14]
 8018502:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018506:	6183      	str	r3, [r0, #24]
 8018508:	4619      	mov	r1, r3
 801850a:	2208      	movs	r2, #8
 801850c:	305c      	adds	r0, #92	; 0x5c
 801850e:	f7ff fcee 	bl	8017eee <memset>
 8018512:	4b05      	ldr	r3, [pc, #20]	; (8018528 <std+0x38>)
 8018514:	6263      	str	r3, [r4, #36]	; 0x24
 8018516:	4b05      	ldr	r3, [pc, #20]	; (801852c <std+0x3c>)
 8018518:	62a3      	str	r3, [r4, #40]	; 0x28
 801851a:	4b05      	ldr	r3, [pc, #20]	; (8018530 <std+0x40>)
 801851c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801851e:	4b05      	ldr	r3, [pc, #20]	; (8018534 <std+0x44>)
 8018520:	6224      	str	r4, [r4, #32]
 8018522:	6323      	str	r3, [r4, #48]	; 0x30
 8018524:	bd10      	pop	{r4, pc}
 8018526:	bf00      	nop
 8018528:	08018f85 	.word	0x08018f85
 801852c:	08018fa7 	.word	0x08018fa7
 8018530:	08018fdf 	.word	0x08018fdf
 8018534:	08019003 	.word	0x08019003

08018538 <_cleanup_r>:
 8018538:	4901      	ldr	r1, [pc, #4]	; (8018540 <_cleanup_r+0x8>)
 801853a:	f000 b885 	b.w	8018648 <_fwalk_reent>
 801853e:	bf00      	nop
 8018540:	0801849d 	.word	0x0801849d

08018544 <__sfmoreglue>:
 8018544:	b570      	push	{r4, r5, r6, lr}
 8018546:	1e4a      	subs	r2, r1, #1
 8018548:	2568      	movs	r5, #104	; 0x68
 801854a:	4355      	muls	r5, r2
 801854c:	460e      	mov	r6, r1
 801854e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018552:	f7ff fd23 	bl	8017f9c <_malloc_r>
 8018556:	4604      	mov	r4, r0
 8018558:	b140      	cbz	r0, 801856c <__sfmoreglue+0x28>
 801855a:	2100      	movs	r1, #0
 801855c:	e9c0 1600 	strd	r1, r6, [r0]
 8018560:	300c      	adds	r0, #12
 8018562:	60a0      	str	r0, [r4, #8]
 8018564:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018568:	f7ff fcc1 	bl	8017eee <memset>
 801856c:	4620      	mov	r0, r4
 801856e:	bd70      	pop	{r4, r5, r6, pc}

08018570 <__sinit>:
 8018570:	6983      	ldr	r3, [r0, #24]
 8018572:	b510      	push	{r4, lr}
 8018574:	4604      	mov	r4, r0
 8018576:	bb33      	cbnz	r3, 80185c6 <__sinit+0x56>
 8018578:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801857c:	6503      	str	r3, [r0, #80]	; 0x50
 801857e:	4b12      	ldr	r3, [pc, #72]	; (80185c8 <__sinit+0x58>)
 8018580:	4a12      	ldr	r2, [pc, #72]	; (80185cc <__sinit+0x5c>)
 8018582:	681b      	ldr	r3, [r3, #0]
 8018584:	6282      	str	r2, [r0, #40]	; 0x28
 8018586:	4298      	cmp	r0, r3
 8018588:	bf04      	itt	eq
 801858a:	2301      	moveq	r3, #1
 801858c:	6183      	streq	r3, [r0, #24]
 801858e:	f000 f81f 	bl	80185d0 <__sfp>
 8018592:	6060      	str	r0, [r4, #4]
 8018594:	4620      	mov	r0, r4
 8018596:	f000 f81b 	bl	80185d0 <__sfp>
 801859a:	60a0      	str	r0, [r4, #8]
 801859c:	4620      	mov	r0, r4
 801859e:	f000 f817 	bl	80185d0 <__sfp>
 80185a2:	2200      	movs	r2, #0
 80185a4:	60e0      	str	r0, [r4, #12]
 80185a6:	2104      	movs	r1, #4
 80185a8:	6860      	ldr	r0, [r4, #4]
 80185aa:	f7ff ffa1 	bl	80184f0 <std>
 80185ae:	2201      	movs	r2, #1
 80185b0:	2109      	movs	r1, #9
 80185b2:	68a0      	ldr	r0, [r4, #8]
 80185b4:	f7ff ff9c 	bl	80184f0 <std>
 80185b8:	2202      	movs	r2, #2
 80185ba:	2112      	movs	r1, #18
 80185bc:	68e0      	ldr	r0, [r4, #12]
 80185be:	f7ff ff97 	bl	80184f0 <std>
 80185c2:	2301      	movs	r3, #1
 80185c4:	61a3      	str	r3, [r4, #24]
 80185c6:	bd10      	pop	{r4, pc}
 80185c8:	08019a00 	.word	0x08019a00
 80185cc:	08018539 	.word	0x08018539

080185d0 <__sfp>:
 80185d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80185d2:	4b1b      	ldr	r3, [pc, #108]	; (8018640 <__sfp+0x70>)
 80185d4:	681e      	ldr	r6, [r3, #0]
 80185d6:	69b3      	ldr	r3, [r6, #24]
 80185d8:	4607      	mov	r7, r0
 80185da:	b913      	cbnz	r3, 80185e2 <__sfp+0x12>
 80185dc:	4630      	mov	r0, r6
 80185de:	f7ff ffc7 	bl	8018570 <__sinit>
 80185e2:	3648      	adds	r6, #72	; 0x48
 80185e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80185e8:	3b01      	subs	r3, #1
 80185ea:	d503      	bpl.n	80185f4 <__sfp+0x24>
 80185ec:	6833      	ldr	r3, [r6, #0]
 80185ee:	b133      	cbz	r3, 80185fe <__sfp+0x2e>
 80185f0:	6836      	ldr	r6, [r6, #0]
 80185f2:	e7f7      	b.n	80185e4 <__sfp+0x14>
 80185f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80185f8:	b16d      	cbz	r5, 8018616 <__sfp+0x46>
 80185fa:	3468      	adds	r4, #104	; 0x68
 80185fc:	e7f4      	b.n	80185e8 <__sfp+0x18>
 80185fe:	2104      	movs	r1, #4
 8018600:	4638      	mov	r0, r7
 8018602:	f7ff ff9f 	bl	8018544 <__sfmoreglue>
 8018606:	6030      	str	r0, [r6, #0]
 8018608:	2800      	cmp	r0, #0
 801860a:	d1f1      	bne.n	80185f0 <__sfp+0x20>
 801860c:	230c      	movs	r3, #12
 801860e:	603b      	str	r3, [r7, #0]
 8018610:	4604      	mov	r4, r0
 8018612:	4620      	mov	r0, r4
 8018614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018616:	4b0b      	ldr	r3, [pc, #44]	; (8018644 <__sfp+0x74>)
 8018618:	6665      	str	r5, [r4, #100]	; 0x64
 801861a:	e9c4 5500 	strd	r5, r5, [r4]
 801861e:	60a5      	str	r5, [r4, #8]
 8018620:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8018624:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8018628:	2208      	movs	r2, #8
 801862a:	4629      	mov	r1, r5
 801862c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018630:	f7ff fc5d 	bl	8017eee <memset>
 8018634:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018638:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801863c:	e7e9      	b.n	8018612 <__sfp+0x42>
 801863e:	bf00      	nop
 8018640:	08019a00 	.word	0x08019a00
 8018644:	ffff0001 	.word	0xffff0001

08018648 <_fwalk_reent>:
 8018648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801864c:	4680      	mov	r8, r0
 801864e:	4689      	mov	r9, r1
 8018650:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018654:	2600      	movs	r6, #0
 8018656:	b914      	cbnz	r4, 801865e <_fwalk_reent+0x16>
 8018658:	4630      	mov	r0, r6
 801865a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801865e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8018662:	3f01      	subs	r7, #1
 8018664:	d501      	bpl.n	801866a <_fwalk_reent+0x22>
 8018666:	6824      	ldr	r4, [r4, #0]
 8018668:	e7f5      	b.n	8018656 <_fwalk_reent+0xe>
 801866a:	89ab      	ldrh	r3, [r5, #12]
 801866c:	2b01      	cmp	r3, #1
 801866e:	d907      	bls.n	8018680 <_fwalk_reent+0x38>
 8018670:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018674:	3301      	adds	r3, #1
 8018676:	d003      	beq.n	8018680 <_fwalk_reent+0x38>
 8018678:	4629      	mov	r1, r5
 801867a:	4640      	mov	r0, r8
 801867c:	47c8      	blx	r9
 801867e:	4306      	orrs	r6, r0
 8018680:	3568      	adds	r5, #104	; 0x68
 8018682:	e7ee      	b.n	8018662 <_fwalk_reent+0x1a>

08018684 <__swhatbuf_r>:
 8018684:	b570      	push	{r4, r5, r6, lr}
 8018686:	460e      	mov	r6, r1
 8018688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801868c:	2900      	cmp	r1, #0
 801868e:	b096      	sub	sp, #88	; 0x58
 8018690:	4614      	mov	r4, r2
 8018692:	461d      	mov	r5, r3
 8018694:	da07      	bge.n	80186a6 <__swhatbuf_r+0x22>
 8018696:	2300      	movs	r3, #0
 8018698:	602b      	str	r3, [r5, #0]
 801869a:	89b3      	ldrh	r3, [r6, #12]
 801869c:	061a      	lsls	r2, r3, #24
 801869e:	d410      	bmi.n	80186c2 <__swhatbuf_r+0x3e>
 80186a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80186a4:	e00e      	b.n	80186c4 <__swhatbuf_r+0x40>
 80186a6:	466a      	mov	r2, sp
 80186a8:	f000 fcd2 	bl	8019050 <_fstat_r>
 80186ac:	2800      	cmp	r0, #0
 80186ae:	dbf2      	blt.n	8018696 <__swhatbuf_r+0x12>
 80186b0:	9a01      	ldr	r2, [sp, #4]
 80186b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80186b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80186ba:	425a      	negs	r2, r3
 80186bc:	415a      	adcs	r2, r3
 80186be:	602a      	str	r2, [r5, #0]
 80186c0:	e7ee      	b.n	80186a0 <__swhatbuf_r+0x1c>
 80186c2:	2340      	movs	r3, #64	; 0x40
 80186c4:	2000      	movs	r0, #0
 80186c6:	6023      	str	r3, [r4, #0]
 80186c8:	b016      	add	sp, #88	; 0x58
 80186ca:	bd70      	pop	{r4, r5, r6, pc}

080186cc <__smakebuf_r>:
 80186cc:	898b      	ldrh	r3, [r1, #12]
 80186ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80186d0:	079d      	lsls	r5, r3, #30
 80186d2:	4606      	mov	r6, r0
 80186d4:	460c      	mov	r4, r1
 80186d6:	d507      	bpl.n	80186e8 <__smakebuf_r+0x1c>
 80186d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80186dc:	6023      	str	r3, [r4, #0]
 80186de:	6123      	str	r3, [r4, #16]
 80186e0:	2301      	movs	r3, #1
 80186e2:	6163      	str	r3, [r4, #20]
 80186e4:	b002      	add	sp, #8
 80186e6:	bd70      	pop	{r4, r5, r6, pc}
 80186e8:	ab01      	add	r3, sp, #4
 80186ea:	466a      	mov	r2, sp
 80186ec:	f7ff ffca 	bl	8018684 <__swhatbuf_r>
 80186f0:	9900      	ldr	r1, [sp, #0]
 80186f2:	4605      	mov	r5, r0
 80186f4:	4630      	mov	r0, r6
 80186f6:	f7ff fc51 	bl	8017f9c <_malloc_r>
 80186fa:	b948      	cbnz	r0, 8018710 <__smakebuf_r+0x44>
 80186fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018700:	059a      	lsls	r2, r3, #22
 8018702:	d4ef      	bmi.n	80186e4 <__smakebuf_r+0x18>
 8018704:	f023 0303 	bic.w	r3, r3, #3
 8018708:	f043 0302 	orr.w	r3, r3, #2
 801870c:	81a3      	strh	r3, [r4, #12]
 801870e:	e7e3      	b.n	80186d8 <__smakebuf_r+0xc>
 8018710:	4b0d      	ldr	r3, [pc, #52]	; (8018748 <__smakebuf_r+0x7c>)
 8018712:	62b3      	str	r3, [r6, #40]	; 0x28
 8018714:	89a3      	ldrh	r3, [r4, #12]
 8018716:	6020      	str	r0, [r4, #0]
 8018718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801871c:	81a3      	strh	r3, [r4, #12]
 801871e:	9b00      	ldr	r3, [sp, #0]
 8018720:	6163      	str	r3, [r4, #20]
 8018722:	9b01      	ldr	r3, [sp, #4]
 8018724:	6120      	str	r0, [r4, #16]
 8018726:	b15b      	cbz	r3, 8018740 <__smakebuf_r+0x74>
 8018728:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801872c:	4630      	mov	r0, r6
 801872e:	f000 fca1 	bl	8019074 <_isatty_r>
 8018732:	b128      	cbz	r0, 8018740 <__smakebuf_r+0x74>
 8018734:	89a3      	ldrh	r3, [r4, #12]
 8018736:	f023 0303 	bic.w	r3, r3, #3
 801873a:	f043 0301 	orr.w	r3, r3, #1
 801873e:	81a3      	strh	r3, [r4, #12]
 8018740:	89a3      	ldrh	r3, [r4, #12]
 8018742:	431d      	orrs	r5, r3
 8018744:	81a5      	strh	r5, [r4, #12]
 8018746:	e7cd      	b.n	80186e4 <__smakebuf_r+0x18>
 8018748:	08018539 	.word	0x08018539

0801874c <__malloc_lock>:
 801874c:	4770      	bx	lr

0801874e <__malloc_unlock>:
 801874e:	4770      	bx	lr

08018750 <__ssputs_r>:
 8018750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018754:	688e      	ldr	r6, [r1, #8]
 8018756:	429e      	cmp	r6, r3
 8018758:	4682      	mov	sl, r0
 801875a:	460c      	mov	r4, r1
 801875c:	4690      	mov	r8, r2
 801875e:	4699      	mov	r9, r3
 8018760:	d837      	bhi.n	80187d2 <__ssputs_r+0x82>
 8018762:	898a      	ldrh	r2, [r1, #12]
 8018764:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018768:	d031      	beq.n	80187ce <__ssputs_r+0x7e>
 801876a:	6825      	ldr	r5, [r4, #0]
 801876c:	6909      	ldr	r1, [r1, #16]
 801876e:	1a6f      	subs	r7, r5, r1
 8018770:	6965      	ldr	r5, [r4, #20]
 8018772:	2302      	movs	r3, #2
 8018774:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018778:	fb95 f5f3 	sdiv	r5, r5, r3
 801877c:	f109 0301 	add.w	r3, r9, #1
 8018780:	443b      	add	r3, r7
 8018782:	429d      	cmp	r5, r3
 8018784:	bf38      	it	cc
 8018786:	461d      	movcc	r5, r3
 8018788:	0553      	lsls	r3, r2, #21
 801878a:	d530      	bpl.n	80187ee <__ssputs_r+0x9e>
 801878c:	4629      	mov	r1, r5
 801878e:	f7ff fc05 	bl	8017f9c <_malloc_r>
 8018792:	4606      	mov	r6, r0
 8018794:	b950      	cbnz	r0, 80187ac <__ssputs_r+0x5c>
 8018796:	230c      	movs	r3, #12
 8018798:	f8ca 3000 	str.w	r3, [sl]
 801879c:	89a3      	ldrh	r3, [r4, #12]
 801879e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80187a2:	81a3      	strh	r3, [r4, #12]
 80187a4:	f04f 30ff 	mov.w	r0, #4294967295
 80187a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80187ac:	463a      	mov	r2, r7
 80187ae:	6921      	ldr	r1, [r4, #16]
 80187b0:	f7ff fb92 	bl	8017ed8 <memcpy>
 80187b4:	89a3      	ldrh	r3, [r4, #12]
 80187b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80187ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80187be:	81a3      	strh	r3, [r4, #12]
 80187c0:	6126      	str	r6, [r4, #16]
 80187c2:	6165      	str	r5, [r4, #20]
 80187c4:	443e      	add	r6, r7
 80187c6:	1bed      	subs	r5, r5, r7
 80187c8:	6026      	str	r6, [r4, #0]
 80187ca:	60a5      	str	r5, [r4, #8]
 80187cc:	464e      	mov	r6, r9
 80187ce:	454e      	cmp	r6, r9
 80187d0:	d900      	bls.n	80187d4 <__ssputs_r+0x84>
 80187d2:	464e      	mov	r6, r9
 80187d4:	4632      	mov	r2, r6
 80187d6:	4641      	mov	r1, r8
 80187d8:	6820      	ldr	r0, [r4, #0]
 80187da:	f000 fc6d 	bl	80190b8 <memmove>
 80187de:	68a3      	ldr	r3, [r4, #8]
 80187e0:	1b9b      	subs	r3, r3, r6
 80187e2:	60a3      	str	r3, [r4, #8]
 80187e4:	6823      	ldr	r3, [r4, #0]
 80187e6:	441e      	add	r6, r3
 80187e8:	6026      	str	r6, [r4, #0]
 80187ea:	2000      	movs	r0, #0
 80187ec:	e7dc      	b.n	80187a8 <__ssputs_r+0x58>
 80187ee:	462a      	mov	r2, r5
 80187f0:	f000 fc7b 	bl	80190ea <_realloc_r>
 80187f4:	4606      	mov	r6, r0
 80187f6:	2800      	cmp	r0, #0
 80187f8:	d1e2      	bne.n	80187c0 <__ssputs_r+0x70>
 80187fa:	6921      	ldr	r1, [r4, #16]
 80187fc:	4650      	mov	r0, sl
 80187fe:	f7ff fb7f 	bl	8017f00 <_free_r>
 8018802:	e7c8      	b.n	8018796 <__ssputs_r+0x46>

08018804 <_svfiprintf_r>:
 8018804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018808:	461d      	mov	r5, r3
 801880a:	898b      	ldrh	r3, [r1, #12]
 801880c:	061f      	lsls	r7, r3, #24
 801880e:	b09d      	sub	sp, #116	; 0x74
 8018810:	4680      	mov	r8, r0
 8018812:	460c      	mov	r4, r1
 8018814:	4616      	mov	r6, r2
 8018816:	d50f      	bpl.n	8018838 <_svfiprintf_r+0x34>
 8018818:	690b      	ldr	r3, [r1, #16]
 801881a:	b96b      	cbnz	r3, 8018838 <_svfiprintf_r+0x34>
 801881c:	2140      	movs	r1, #64	; 0x40
 801881e:	f7ff fbbd 	bl	8017f9c <_malloc_r>
 8018822:	6020      	str	r0, [r4, #0]
 8018824:	6120      	str	r0, [r4, #16]
 8018826:	b928      	cbnz	r0, 8018834 <_svfiprintf_r+0x30>
 8018828:	230c      	movs	r3, #12
 801882a:	f8c8 3000 	str.w	r3, [r8]
 801882e:	f04f 30ff 	mov.w	r0, #4294967295
 8018832:	e0c8      	b.n	80189c6 <_svfiprintf_r+0x1c2>
 8018834:	2340      	movs	r3, #64	; 0x40
 8018836:	6163      	str	r3, [r4, #20]
 8018838:	2300      	movs	r3, #0
 801883a:	9309      	str	r3, [sp, #36]	; 0x24
 801883c:	2320      	movs	r3, #32
 801883e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018842:	2330      	movs	r3, #48	; 0x30
 8018844:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018848:	9503      	str	r5, [sp, #12]
 801884a:	f04f 0b01 	mov.w	fp, #1
 801884e:	4637      	mov	r7, r6
 8018850:	463d      	mov	r5, r7
 8018852:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018856:	b10b      	cbz	r3, 801885c <_svfiprintf_r+0x58>
 8018858:	2b25      	cmp	r3, #37	; 0x25
 801885a:	d13e      	bne.n	80188da <_svfiprintf_r+0xd6>
 801885c:	ebb7 0a06 	subs.w	sl, r7, r6
 8018860:	d00b      	beq.n	801887a <_svfiprintf_r+0x76>
 8018862:	4653      	mov	r3, sl
 8018864:	4632      	mov	r2, r6
 8018866:	4621      	mov	r1, r4
 8018868:	4640      	mov	r0, r8
 801886a:	f7ff ff71 	bl	8018750 <__ssputs_r>
 801886e:	3001      	adds	r0, #1
 8018870:	f000 80a4 	beq.w	80189bc <_svfiprintf_r+0x1b8>
 8018874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018876:	4453      	add	r3, sl
 8018878:	9309      	str	r3, [sp, #36]	; 0x24
 801887a:	783b      	ldrb	r3, [r7, #0]
 801887c:	2b00      	cmp	r3, #0
 801887e:	f000 809d 	beq.w	80189bc <_svfiprintf_r+0x1b8>
 8018882:	2300      	movs	r3, #0
 8018884:	f04f 32ff 	mov.w	r2, #4294967295
 8018888:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801888c:	9304      	str	r3, [sp, #16]
 801888e:	9307      	str	r3, [sp, #28]
 8018890:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018894:	931a      	str	r3, [sp, #104]	; 0x68
 8018896:	462f      	mov	r7, r5
 8018898:	2205      	movs	r2, #5
 801889a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801889e:	4850      	ldr	r0, [pc, #320]	; (80189e0 <_svfiprintf_r+0x1dc>)
 80188a0:	f7e7 fd26 	bl	80002f0 <memchr>
 80188a4:	9b04      	ldr	r3, [sp, #16]
 80188a6:	b9d0      	cbnz	r0, 80188de <_svfiprintf_r+0xda>
 80188a8:	06d9      	lsls	r1, r3, #27
 80188aa:	bf44      	itt	mi
 80188ac:	2220      	movmi	r2, #32
 80188ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80188b2:	071a      	lsls	r2, r3, #28
 80188b4:	bf44      	itt	mi
 80188b6:	222b      	movmi	r2, #43	; 0x2b
 80188b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80188bc:	782a      	ldrb	r2, [r5, #0]
 80188be:	2a2a      	cmp	r2, #42	; 0x2a
 80188c0:	d015      	beq.n	80188ee <_svfiprintf_r+0xea>
 80188c2:	9a07      	ldr	r2, [sp, #28]
 80188c4:	462f      	mov	r7, r5
 80188c6:	2000      	movs	r0, #0
 80188c8:	250a      	movs	r5, #10
 80188ca:	4639      	mov	r1, r7
 80188cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80188d0:	3b30      	subs	r3, #48	; 0x30
 80188d2:	2b09      	cmp	r3, #9
 80188d4:	d94d      	bls.n	8018972 <_svfiprintf_r+0x16e>
 80188d6:	b1b8      	cbz	r0, 8018908 <_svfiprintf_r+0x104>
 80188d8:	e00f      	b.n	80188fa <_svfiprintf_r+0xf6>
 80188da:	462f      	mov	r7, r5
 80188dc:	e7b8      	b.n	8018850 <_svfiprintf_r+0x4c>
 80188de:	4a40      	ldr	r2, [pc, #256]	; (80189e0 <_svfiprintf_r+0x1dc>)
 80188e0:	1a80      	subs	r0, r0, r2
 80188e2:	fa0b f000 	lsl.w	r0, fp, r0
 80188e6:	4318      	orrs	r0, r3
 80188e8:	9004      	str	r0, [sp, #16]
 80188ea:	463d      	mov	r5, r7
 80188ec:	e7d3      	b.n	8018896 <_svfiprintf_r+0x92>
 80188ee:	9a03      	ldr	r2, [sp, #12]
 80188f0:	1d11      	adds	r1, r2, #4
 80188f2:	6812      	ldr	r2, [r2, #0]
 80188f4:	9103      	str	r1, [sp, #12]
 80188f6:	2a00      	cmp	r2, #0
 80188f8:	db01      	blt.n	80188fe <_svfiprintf_r+0xfa>
 80188fa:	9207      	str	r2, [sp, #28]
 80188fc:	e004      	b.n	8018908 <_svfiprintf_r+0x104>
 80188fe:	4252      	negs	r2, r2
 8018900:	f043 0302 	orr.w	r3, r3, #2
 8018904:	9207      	str	r2, [sp, #28]
 8018906:	9304      	str	r3, [sp, #16]
 8018908:	783b      	ldrb	r3, [r7, #0]
 801890a:	2b2e      	cmp	r3, #46	; 0x2e
 801890c:	d10c      	bne.n	8018928 <_svfiprintf_r+0x124>
 801890e:	787b      	ldrb	r3, [r7, #1]
 8018910:	2b2a      	cmp	r3, #42	; 0x2a
 8018912:	d133      	bne.n	801897c <_svfiprintf_r+0x178>
 8018914:	9b03      	ldr	r3, [sp, #12]
 8018916:	1d1a      	adds	r2, r3, #4
 8018918:	681b      	ldr	r3, [r3, #0]
 801891a:	9203      	str	r2, [sp, #12]
 801891c:	2b00      	cmp	r3, #0
 801891e:	bfb8      	it	lt
 8018920:	f04f 33ff 	movlt.w	r3, #4294967295
 8018924:	3702      	adds	r7, #2
 8018926:	9305      	str	r3, [sp, #20]
 8018928:	4d2e      	ldr	r5, [pc, #184]	; (80189e4 <_svfiprintf_r+0x1e0>)
 801892a:	7839      	ldrb	r1, [r7, #0]
 801892c:	2203      	movs	r2, #3
 801892e:	4628      	mov	r0, r5
 8018930:	f7e7 fcde 	bl	80002f0 <memchr>
 8018934:	b138      	cbz	r0, 8018946 <_svfiprintf_r+0x142>
 8018936:	2340      	movs	r3, #64	; 0x40
 8018938:	1b40      	subs	r0, r0, r5
 801893a:	fa03 f000 	lsl.w	r0, r3, r0
 801893e:	9b04      	ldr	r3, [sp, #16]
 8018940:	4303      	orrs	r3, r0
 8018942:	3701      	adds	r7, #1
 8018944:	9304      	str	r3, [sp, #16]
 8018946:	7839      	ldrb	r1, [r7, #0]
 8018948:	4827      	ldr	r0, [pc, #156]	; (80189e8 <_svfiprintf_r+0x1e4>)
 801894a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801894e:	2206      	movs	r2, #6
 8018950:	1c7e      	adds	r6, r7, #1
 8018952:	f7e7 fccd 	bl	80002f0 <memchr>
 8018956:	2800      	cmp	r0, #0
 8018958:	d038      	beq.n	80189cc <_svfiprintf_r+0x1c8>
 801895a:	4b24      	ldr	r3, [pc, #144]	; (80189ec <_svfiprintf_r+0x1e8>)
 801895c:	bb13      	cbnz	r3, 80189a4 <_svfiprintf_r+0x1a0>
 801895e:	9b03      	ldr	r3, [sp, #12]
 8018960:	3307      	adds	r3, #7
 8018962:	f023 0307 	bic.w	r3, r3, #7
 8018966:	3308      	adds	r3, #8
 8018968:	9303      	str	r3, [sp, #12]
 801896a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801896c:	444b      	add	r3, r9
 801896e:	9309      	str	r3, [sp, #36]	; 0x24
 8018970:	e76d      	b.n	801884e <_svfiprintf_r+0x4a>
 8018972:	fb05 3202 	mla	r2, r5, r2, r3
 8018976:	2001      	movs	r0, #1
 8018978:	460f      	mov	r7, r1
 801897a:	e7a6      	b.n	80188ca <_svfiprintf_r+0xc6>
 801897c:	2300      	movs	r3, #0
 801897e:	3701      	adds	r7, #1
 8018980:	9305      	str	r3, [sp, #20]
 8018982:	4619      	mov	r1, r3
 8018984:	250a      	movs	r5, #10
 8018986:	4638      	mov	r0, r7
 8018988:	f810 2b01 	ldrb.w	r2, [r0], #1
 801898c:	3a30      	subs	r2, #48	; 0x30
 801898e:	2a09      	cmp	r2, #9
 8018990:	d903      	bls.n	801899a <_svfiprintf_r+0x196>
 8018992:	2b00      	cmp	r3, #0
 8018994:	d0c8      	beq.n	8018928 <_svfiprintf_r+0x124>
 8018996:	9105      	str	r1, [sp, #20]
 8018998:	e7c6      	b.n	8018928 <_svfiprintf_r+0x124>
 801899a:	fb05 2101 	mla	r1, r5, r1, r2
 801899e:	2301      	movs	r3, #1
 80189a0:	4607      	mov	r7, r0
 80189a2:	e7f0      	b.n	8018986 <_svfiprintf_r+0x182>
 80189a4:	ab03      	add	r3, sp, #12
 80189a6:	9300      	str	r3, [sp, #0]
 80189a8:	4622      	mov	r2, r4
 80189aa:	4b11      	ldr	r3, [pc, #68]	; (80189f0 <_svfiprintf_r+0x1ec>)
 80189ac:	a904      	add	r1, sp, #16
 80189ae:	4640      	mov	r0, r8
 80189b0:	f3af 8000 	nop.w
 80189b4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80189b8:	4681      	mov	r9, r0
 80189ba:	d1d6      	bne.n	801896a <_svfiprintf_r+0x166>
 80189bc:	89a3      	ldrh	r3, [r4, #12]
 80189be:	065b      	lsls	r3, r3, #25
 80189c0:	f53f af35 	bmi.w	801882e <_svfiprintf_r+0x2a>
 80189c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80189c6:	b01d      	add	sp, #116	; 0x74
 80189c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189cc:	ab03      	add	r3, sp, #12
 80189ce:	9300      	str	r3, [sp, #0]
 80189d0:	4622      	mov	r2, r4
 80189d2:	4b07      	ldr	r3, [pc, #28]	; (80189f0 <_svfiprintf_r+0x1ec>)
 80189d4:	a904      	add	r1, sp, #16
 80189d6:	4640      	mov	r0, r8
 80189d8:	f000 f9c2 	bl	8018d60 <_printf_i>
 80189dc:	e7ea      	b.n	80189b4 <_svfiprintf_r+0x1b0>
 80189de:	bf00      	nop
 80189e0:	08019a64 	.word	0x08019a64
 80189e4:	08019a6a 	.word	0x08019a6a
 80189e8:	08019a6e 	.word	0x08019a6e
 80189ec:	00000000 	.word	0x00000000
 80189f0:	08018751 	.word	0x08018751

080189f4 <__sfputc_r>:
 80189f4:	6893      	ldr	r3, [r2, #8]
 80189f6:	3b01      	subs	r3, #1
 80189f8:	2b00      	cmp	r3, #0
 80189fa:	b410      	push	{r4}
 80189fc:	6093      	str	r3, [r2, #8]
 80189fe:	da08      	bge.n	8018a12 <__sfputc_r+0x1e>
 8018a00:	6994      	ldr	r4, [r2, #24]
 8018a02:	42a3      	cmp	r3, r4
 8018a04:	db01      	blt.n	8018a0a <__sfputc_r+0x16>
 8018a06:	290a      	cmp	r1, #10
 8018a08:	d103      	bne.n	8018a12 <__sfputc_r+0x1e>
 8018a0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018a0e:	f7ff bbff 	b.w	8018210 <__swbuf_r>
 8018a12:	6813      	ldr	r3, [r2, #0]
 8018a14:	1c58      	adds	r0, r3, #1
 8018a16:	6010      	str	r0, [r2, #0]
 8018a18:	7019      	strb	r1, [r3, #0]
 8018a1a:	4608      	mov	r0, r1
 8018a1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018a20:	4770      	bx	lr

08018a22 <__sfputs_r>:
 8018a22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a24:	4606      	mov	r6, r0
 8018a26:	460f      	mov	r7, r1
 8018a28:	4614      	mov	r4, r2
 8018a2a:	18d5      	adds	r5, r2, r3
 8018a2c:	42ac      	cmp	r4, r5
 8018a2e:	d101      	bne.n	8018a34 <__sfputs_r+0x12>
 8018a30:	2000      	movs	r0, #0
 8018a32:	e007      	b.n	8018a44 <__sfputs_r+0x22>
 8018a34:	463a      	mov	r2, r7
 8018a36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018a3a:	4630      	mov	r0, r6
 8018a3c:	f7ff ffda 	bl	80189f4 <__sfputc_r>
 8018a40:	1c43      	adds	r3, r0, #1
 8018a42:	d1f3      	bne.n	8018a2c <__sfputs_r+0xa>
 8018a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018a48 <_vfiprintf_r>:
 8018a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a4c:	460c      	mov	r4, r1
 8018a4e:	b09d      	sub	sp, #116	; 0x74
 8018a50:	4617      	mov	r7, r2
 8018a52:	461d      	mov	r5, r3
 8018a54:	4606      	mov	r6, r0
 8018a56:	b118      	cbz	r0, 8018a60 <_vfiprintf_r+0x18>
 8018a58:	6983      	ldr	r3, [r0, #24]
 8018a5a:	b90b      	cbnz	r3, 8018a60 <_vfiprintf_r+0x18>
 8018a5c:	f7ff fd88 	bl	8018570 <__sinit>
 8018a60:	4b7c      	ldr	r3, [pc, #496]	; (8018c54 <_vfiprintf_r+0x20c>)
 8018a62:	429c      	cmp	r4, r3
 8018a64:	d158      	bne.n	8018b18 <_vfiprintf_r+0xd0>
 8018a66:	6874      	ldr	r4, [r6, #4]
 8018a68:	89a3      	ldrh	r3, [r4, #12]
 8018a6a:	0718      	lsls	r0, r3, #28
 8018a6c:	d55e      	bpl.n	8018b2c <_vfiprintf_r+0xe4>
 8018a6e:	6923      	ldr	r3, [r4, #16]
 8018a70:	2b00      	cmp	r3, #0
 8018a72:	d05b      	beq.n	8018b2c <_vfiprintf_r+0xe4>
 8018a74:	2300      	movs	r3, #0
 8018a76:	9309      	str	r3, [sp, #36]	; 0x24
 8018a78:	2320      	movs	r3, #32
 8018a7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018a7e:	2330      	movs	r3, #48	; 0x30
 8018a80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018a84:	9503      	str	r5, [sp, #12]
 8018a86:	f04f 0b01 	mov.w	fp, #1
 8018a8a:	46b8      	mov	r8, r7
 8018a8c:	4645      	mov	r5, r8
 8018a8e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018a92:	b10b      	cbz	r3, 8018a98 <_vfiprintf_r+0x50>
 8018a94:	2b25      	cmp	r3, #37	; 0x25
 8018a96:	d154      	bne.n	8018b42 <_vfiprintf_r+0xfa>
 8018a98:	ebb8 0a07 	subs.w	sl, r8, r7
 8018a9c:	d00b      	beq.n	8018ab6 <_vfiprintf_r+0x6e>
 8018a9e:	4653      	mov	r3, sl
 8018aa0:	463a      	mov	r2, r7
 8018aa2:	4621      	mov	r1, r4
 8018aa4:	4630      	mov	r0, r6
 8018aa6:	f7ff ffbc 	bl	8018a22 <__sfputs_r>
 8018aaa:	3001      	adds	r0, #1
 8018aac:	f000 80c2 	beq.w	8018c34 <_vfiprintf_r+0x1ec>
 8018ab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ab2:	4453      	add	r3, sl
 8018ab4:	9309      	str	r3, [sp, #36]	; 0x24
 8018ab6:	f898 3000 	ldrb.w	r3, [r8]
 8018aba:	2b00      	cmp	r3, #0
 8018abc:	f000 80ba 	beq.w	8018c34 <_vfiprintf_r+0x1ec>
 8018ac0:	2300      	movs	r3, #0
 8018ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8018ac6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018aca:	9304      	str	r3, [sp, #16]
 8018acc:	9307      	str	r3, [sp, #28]
 8018ace:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018ad2:	931a      	str	r3, [sp, #104]	; 0x68
 8018ad4:	46a8      	mov	r8, r5
 8018ad6:	2205      	movs	r2, #5
 8018ad8:	f818 1b01 	ldrb.w	r1, [r8], #1
 8018adc:	485e      	ldr	r0, [pc, #376]	; (8018c58 <_vfiprintf_r+0x210>)
 8018ade:	f7e7 fc07 	bl	80002f0 <memchr>
 8018ae2:	9b04      	ldr	r3, [sp, #16]
 8018ae4:	bb78      	cbnz	r0, 8018b46 <_vfiprintf_r+0xfe>
 8018ae6:	06d9      	lsls	r1, r3, #27
 8018ae8:	bf44      	itt	mi
 8018aea:	2220      	movmi	r2, #32
 8018aec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018af0:	071a      	lsls	r2, r3, #28
 8018af2:	bf44      	itt	mi
 8018af4:	222b      	movmi	r2, #43	; 0x2b
 8018af6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018afa:	782a      	ldrb	r2, [r5, #0]
 8018afc:	2a2a      	cmp	r2, #42	; 0x2a
 8018afe:	d02a      	beq.n	8018b56 <_vfiprintf_r+0x10e>
 8018b00:	9a07      	ldr	r2, [sp, #28]
 8018b02:	46a8      	mov	r8, r5
 8018b04:	2000      	movs	r0, #0
 8018b06:	250a      	movs	r5, #10
 8018b08:	4641      	mov	r1, r8
 8018b0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018b0e:	3b30      	subs	r3, #48	; 0x30
 8018b10:	2b09      	cmp	r3, #9
 8018b12:	d969      	bls.n	8018be8 <_vfiprintf_r+0x1a0>
 8018b14:	b360      	cbz	r0, 8018b70 <_vfiprintf_r+0x128>
 8018b16:	e024      	b.n	8018b62 <_vfiprintf_r+0x11a>
 8018b18:	4b50      	ldr	r3, [pc, #320]	; (8018c5c <_vfiprintf_r+0x214>)
 8018b1a:	429c      	cmp	r4, r3
 8018b1c:	d101      	bne.n	8018b22 <_vfiprintf_r+0xda>
 8018b1e:	68b4      	ldr	r4, [r6, #8]
 8018b20:	e7a2      	b.n	8018a68 <_vfiprintf_r+0x20>
 8018b22:	4b4f      	ldr	r3, [pc, #316]	; (8018c60 <_vfiprintf_r+0x218>)
 8018b24:	429c      	cmp	r4, r3
 8018b26:	bf08      	it	eq
 8018b28:	68f4      	ldreq	r4, [r6, #12]
 8018b2a:	e79d      	b.n	8018a68 <_vfiprintf_r+0x20>
 8018b2c:	4621      	mov	r1, r4
 8018b2e:	4630      	mov	r0, r6
 8018b30:	f7ff fbc0 	bl	80182b4 <__swsetup_r>
 8018b34:	2800      	cmp	r0, #0
 8018b36:	d09d      	beq.n	8018a74 <_vfiprintf_r+0x2c>
 8018b38:	f04f 30ff 	mov.w	r0, #4294967295
 8018b3c:	b01d      	add	sp, #116	; 0x74
 8018b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b42:	46a8      	mov	r8, r5
 8018b44:	e7a2      	b.n	8018a8c <_vfiprintf_r+0x44>
 8018b46:	4a44      	ldr	r2, [pc, #272]	; (8018c58 <_vfiprintf_r+0x210>)
 8018b48:	1a80      	subs	r0, r0, r2
 8018b4a:	fa0b f000 	lsl.w	r0, fp, r0
 8018b4e:	4318      	orrs	r0, r3
 8018b50:	9004      	str	r0, [sp, #16]
 8018b52:	4645      	mov	r5, r8
 8018b54:	e7be      	b.n	8018ad4 <_vfiprintf_r+0x8c>
 8018b56:	9a03      	ldr	r2, [sp, #12]
 8018b58:	1d11      	adds	r1, r2, #4
 8018b5a:	6812      	ldr	r2, [r2, #0]
 8018b5c:	9103      	str	r1, [sp, #12]
 8018b5e:	2a00      	cmp	r2, #0
 8018b60:	db01      	blt.n	8018b66 <_vfiprintf_r+0x11e>
 8018b62:	9207      	str	r2, [sp, #28]
 8018b64:	e004      	b.n	8018b70 <_vfiprintf_r+0x128>
 8018b66:	4252      	negs	r2, r2
 8018b68:	f043 0302 	orr.w	r3, r3, #2
 8018b6c:	9207      	str	r2, [sp, #28]
 8018b6e:	9304      	str	r3, [sp, #16]
 8018b70:	f898 3000 	ldrb.w	r3, [r8]
 8018b74:	2b2e      	cmp	r3, #46	; 0x2e
 8018b76:	d10e      	bne.n	8018b96 <_vfiprintf_r+0x14e>
 8018b78:	f898 3001 	ldrb.w	r3, [r8, #1]
 8018b7c:	2b2a      	cmp	r3, #42	; 0x2a
 8018b7e:	d138      	bne.n	8018bf2 <_vfiprintf_r+0x1aa>
 8018b80:	9b03      	ldr	r3, [sp, #12]
 8018b82:	1d1a      	adds	r2, r3, #4
 8018b84:	681b      	ldr	r3, [r3, #0]
 8018b86:	9203      	str	r2, [sp, #12]
 8018b88:	2b00      	cmp	r3, #0
 8018b8a:	bfb8      	it	lt
 8018b8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8018b90:	f108 0802 	add.w	r8, r8, #2
 8018b94:	9305      	str	r3, [sp, #20]
 8018b96:	4d33      	ldr	r5, [pc, #204]	; (8018c64 <_vfiprintf_r+0x21c>)
 8018b98:	f898 1000 	ldrb.w	r1, [r8]
 8018b9c:	2203      	movs	r2, #3
 8018b9e:	4628      	mov	r0, r5
 8018ba0:	f7e7 fba6 	bl	80002f0 <memchr>
 8018ba4:	b140      	cbz	r0, 8018bb8 <_vfiprintf_r+0x170>
 8018ba6:	2340      	movs	r3, #64	; 0x40
 8018ba8:	1b40      	subs	r0, r0, r5
 8018baa:	fa03 f000 	lsl.w	r0, r3, r0
 8018bae:	9b04      	ldr	r3, [sp, #16]
 8018bb0:	4303      	orrs	r3, r0
 8018bb2:	f108 0801 	add.w	r8, r8, #1
 8018bb6:	9304      	str	r3, [sp, #16]
 8018bb8:	f898 1000 	ldrb.w	r1, [r8]
 8018bbc:	482a      	ldr	r0, [pc, #168]	; (8018c68 <_vfiprintf_r+0x220>)
 8018bbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018bc2:	2206      	movs	r2, #6
 8018bc4:	f108 0701 	add.w	r7, r8, #1
 8018bc8:	f7e7 fb92 	bl	80002f0 <memchr>
 8018bcc:	2800      	cmp	r0, #0
 8018bce:	d037      	beq.n	8018c40 <_vfiprintf_r+0x1f8>
 8018bd0:	4b26      	ldr	r3, [pc, #152]	; (8018c6c <_vfiprintf_r+0x224>)
 8018bd2:	bb1b      	cbnz	r3, 8018c1c <_vfiprintf_r+0x1d4>
 8018bd4:	9b03      	ldr	r3, [sp, #12]
 8018bd6:	3307      	adds	r3, #7
 8018bd8:	f023 0307 	bic.w	r3, r3, #7
 8018bdc:	3308      	adds	r3, #8
 8018bde:	9303      	str	r3, [sp, #12]
 8018be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018be2:	444b      	add	r3, r9
 8018be4:	9309      	str	r3, [sp, #36]	; 0x24
 8018be6:	e750      	b.n	8018a8a <_vfiprintf_r+0x42>
 8018be8:	fb05 3202 	mla	r2, r5, r2, r3
 8018bec:	2001      	movs	r0, #1
 8018bee:	4688      	mov	r8, r1
 8018bf0:	e78a      	b.n	8018b08 <_vfiprintf_r+0xc0>
 8018bf2:	2300      	movs	r3, #0
 8018bf4:	f108 0801 	add.w	r8, r8, #1
 8018bf8:	9305      	str	r3, [sp, #20]
 8018bfa:	4619      	mov	r1, r3
 8018bfc:	250a      	movs	r5, #10
 8018bfe:	4640      	mov	r0, r8
 8018c00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018c04:	3a30      	subs	r2, #48	; 0x30
 8018c06:	2a09      	cmp	r2, #9
 8018c08:	d903      	bls.n	8018c12 <_vfiprintf_r+0x1ca>
 8018c0a:	2b00      	cmp	r3, #0
 8018c0c:	d0c3      	beq.n	8018b96 <_vfiprintf_r+0x14e>
 8018c0e:	9105      	str	r1, [sp, #20]
 8018c10:	e7c1      	b.n	8018b96 <_vfiprintf_r+0x14e>
 8018c12:	fb05 2101 	mla	r1, r5, r1, r2
 8018c16:	2301      	movs	r3, #1
 8018c18:	4680      	mov	r8, r0
 8018c1a:	e7f0      	b.n	8018bfe <_vfiprintf_r+0x1b6>
 8018c1c:	ab03      	add	r3, sp, #12
 8018c1e:	9300      	str	r3, [sp, #0]
 8018c20:	4622      	mov	r2, r4
 8018c22:	4b13      	ldr	r3, [pc, #76]	; (8018c70 <_vfiprintf_r+0x228>)
 8018c24:	a904      	add	r1, sp, #16
 8018c26:	4630      	mov	r0, r6
 8018c28:	f3af 8000 	nop.w
 8018c2c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8018c30:	4681      	mov	r9, r0
 8018c32:	d1d5      	bne.n	8018be0 <_vfiprintf_r+0x198>
 8018c34:	89a3      	ldrh	r3, [r4, #12]
 8018c36:	065b      	lsls	r3, r3, #25
 8018c38:	f53f af7e 	bmi.w	8018b38 <_vfiprintf_r+0xf0>
 8018c3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018c3e:	e77d      	b.n	8018b3c <_vfiprintf_r+0xf4>
 8018c40:	ab03      	add	r3, sp, #12
 8018c42:	9300      	str	r3, [sp, #0]
 8018c44:	4622      	mov	r2, r4
 8018c46:	4b0a      	ldr	r3, [pc, #40]	; (8018c70 <_vfiprintf_r+0x228>)
 8018c48:	a904      	add	r1, sp, #16
 8018c4a:	4630      	mov	r0, r6
 8018c4c:	f000 f888 	bl	8018d60 <_printf_i>
 8018c50:	e7ec      	b.n	8018c2c <_vfiprintf_r+0x1e4>
 8018c52:	bf00      	nop
 8018c54:	08019a24 	.word	0x08019a24
 8018c58:	08019a64 	.word	0x08019a64
 8018c5c:	08019a44 	.word	0x08019a44
 8018c60:	08019a04 	.word	0x08019a04
 8018c64:	08019a6a 	.word	0x08019a6a
 8018c68:	08019a6e 	.word	0x08019a6e
 8018c6c:	00000000 	.word	0x00000000
 8018c70:	08018a23 	.word	0x08018a23

08018c74 <_printf_common>:
 8018c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c78:	4691      	mov	r9, r2
 8018c7a:	461f      	mov	r7, r3
 8018c7c:	688a      	ldr	r2, [r1, #8]
 8018c7e:	690b      	ldr	r3, [r1, #16]
 8018c80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018c84:	4293      	cmp	r3, r2
 8018c86:	bfb8      	it	lt
 8018c88:	4613      	movlt	r3, r2
 8018c8a:	f8c9 3000 	str.w	r3, [r9]
 8018c8e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018c92:	4606      	mov	r6, r0
 8018c94:	460c      	mov	r4, r1
 8018c96:	b112      	cbz	r2, 8018c9e <_printf_common+0x2a>
 8018c98:	3301      	adds	r3, #1
 8018c9a:	f8c9 3000 	str.w	r3, [r9]
 8018c9e:	6823      	ldr	r3, [r4, #0]
 8018ca0:	0699      	lsls	r1, r3, #26
 8018ca2:	bf42      	ittt	mi
 8018ca4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8018ca8:	3302      	addmi	r3, #2
 8018caa:	f8c9 3000 	strmi.w	r3, [r9]
 8018cae:	6825      	ldr	r5, [r4, #0]
 8018cb0:	f015 0506 	ands.w	r5, r5, #6
 8018cb4:	d107      	bne.n	8018cc6 <_printf_common+0x52>
 8018cb6:	f104 0a19 	add.w	sl, r4, #25
 8018cba:	68e3      	ldr	r3, [r4, #12]
 8018cbc:	f8d9 2000 	ldr.w	r2, [r9]
 8018cc0:	1a9b      	subs	r3, r3, r2
 8018cc2:	42ab      	cmp	r3, r5
 8018cc4:	dc28      	bgt.n	8018d18 <_printf_common+0xa4>
 8018cc6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8018cca:	6822      	ldr	r2, [r4, #0]
 8018ccc:	3300      	adds	r3, #0
 8018cce:	bf18      	it	ne
 8018cd0:	2301      	movne	r3, #1
 8018cd2:	0692      	lsls	r2, r2, #26
 8018cd4:	d42d      	bmi.n	8018d32 <_printf_common+0xbe>
 8018cd6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018cda:	4639      	mov	r1, r7
 8018cdc:	4630      	mov	r0, r6
 8018cde:	47c0      	blx	r8
 8018ce0:	3001      	adds	r0, #1
 8018ce2:	d020      	beq.n	8018d26 <_printf_common+0xb2>
 8018ce4:	6823      	ldr	r3, [r4, #0]
 8018ce6:	68e5      	ldr	r5, [r4, #12]
 8018ce8:	f8d9 2000 	ldr.w	r2, [r9]
 8018cec:	f003 0306 	and.w	r3, r3, #6
 8018cf0:	2b04      	cmp	r3, #4
 8018cf2:	bf08      	it	eq
 8018cf4:	1aad      	subeq	r5, r5, r2
 8018cf6:	68a3      	ldr	r3, [r4, #8]
 8018cf8:	6922      	ldr	r2, [r4, #16]
 8018cfa:	bf0c      	ite	eq
 8018cfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018d00:	2500      	movne	r5, #0
 8018d02:	4293      	cmp	r3, r2
 8018d04:	bfc4      	itt	gt
 8018d06:	1a9b      	subgt	r3, r3, r2
 8018d08:	18ed      	addgt	r5, r5, r3
 8018d0a:	f04f 0900 	mov.w	r9, #0
 8018d0e:	341a      	adds	r4, #26
 8018d10:	454d      	cmp	r5, r9
 8018d12:	d11a      	bne.n	8018d4a <_printf_common+0xd6>
 8018d14:	2000      	movs	r0, #0
 8018d16:	e008      	b.n	8018d2a <_printf_common+0xb6>
 8018d18:	2301      	movs	r3, #1
 8018d1a:	4652      	mov	r2, sl
 8018d1c:	4639      	mov	r1, r7
 8018d1e:	4630      	mov	r0, r6
 8018d20:	47c0      	blx	r8
 8018d22:	3001      	adds	r0, #1
 8018d24:	d103      	bne.n	8018d2e <_printf_common+0xba>
 8018d26:	f04f 30ff 	mov.w	r0, #4294967295
 8018d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d2e:	3501      	adds	r5, #1
 8018d30:	e7c3      	b.n	8018cba <_printf_common+0x46>
 8018d32:	18e1      	adds	r1, r4, r3
 8018d34:	1c5a      	adds	r2, r3, #1
 8018d36:	2030      	movs	r0, #48	; 0x30
 8018d38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018d3c:	4422      	add	r2, r4
 8018d3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018d42:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018d46:	3302      	adds	r3, #2
 8018d48:	e7c5      	b.n	8018cd6 <_printf_common+0x62>
 8018d4a:	2301      	movs	r3, #1
 8018d4c:	4622      	mov	r2, r4
 8018d4e:	4639      	mov	r1, r7
 8018d50:	4630      	mov	r0, r6
 8018d52:	47c0      	blx	r8
 8018d54:	3001      	adds	r0, #1
 8018d56:	d0e6      	beq.n	8018d26 <_printf_common+0xb2>
 8018d58:	f109 0901 	add.w	r9, r9, #1
 8018d5c:	e7d8      	b.n	8018d10 <_printf_common+0x9c>
	...

08018d60 <_printf_i>:
 8018d60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018d64:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8018d68:	460c      	mov	r4, r1
 8018d6a:	7e09      	ldrb	r1, [r1, #24]
 8018d6c:	b085      	sub	sp, #20
 8018d6e:	296e      	cmp	r1, #110	; 0x6e
 8018d70:	4617      	mov	r7, r2
 8018d72:	4606      	mov	r6, r0
 8018d74:	4698      	mov	r8, r3
 8018d76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018d78:	f000 80b3 	beq.w	8018ee2 <_printf_i+0x182>
 8018d7c:	d822      	bhi.n	8018dc4 <_printf_i+0x64>
 8018d7e:	2963      	cmp	r1, #99	; 0x63
 8018d80:	d036      	beq.n	8018df0 <_printf_i+0x90>
 8018d82:	d80a      	bhi.n	8018d9a <_printf_i+0x3a>
 8018d84:	2900      	cmp	r1, #0
 8018d86:	f000 80b9 	beq.w	8018efc <_printf_i+0x19c>
 8018d8a:	2958      	cmp	r1, #88	; 0x58
 8018d8c:	f000 8083 	beq.w	8018e96 <_printf_i+0x136>
 8018d90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018d94:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8018d98:	e032      	b.n	8018e00 <_printf_i+0xa0>
 8018d9a:	2964      	cmp	r1, #100	; 0x64
 8018d9c:	d001      	beq.n	8018da2 <_printf_i+0x42>
 8018d9e:	2969      	cmp	r1, #105	; 0x69
 8018da0:	d1f6      	bne.n	8018d90 <_printf_i+0x30>
 8018da2:	6820      	ldr	r0, [r4, #0]
 8018da4:	6813      	ldr	r3, [r2, #0]
 8018da6:	0605      	lsls	r5, r0, #24
 8018da8:	f103 0104 	add.w	r1, r3, #4
 8018dac:	d52a      	bpl.n	8018e04 <_printf_i+0xa4>
 8018dae:	681b      	ldr	r3, [r3, #0]
 8018db0:	6011      	str	r1, [r2, #0]
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	da03      	bge.n	8018dbe <_printf_i+0x5e>
 8018db6:	222d      	movs	r2, #45	; 0x2d
 8018db8:	425b      	negs	r3, r3
 8018dba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8018dbe:	486f      	ldr	r0, [pc, #444]	; (8018f7c <_printf_i+0x21c>)
 8018dc0:	220a      	movs	r2, #10
 8018dc2:	e039      	b.n	8018e38 <_printf_i+0xd8>
 8018dc4:	2973      	cmp	r1, #115	; 0x73
 8018dc6:	f000 809d 	beq.w	8018f04 <_printf_i+0x1a4>
 8018dca:	d808      	bhi.n	8018dde <_printf_i+0x7e>
 8018dcc:	296f      	cmp	r1, #111	; 0x6f
 8018dce:	d020      	beq.n	8018e12 <_printf_i+0xb2>
 8018dd0:	2970      	cmp	r1, #112	; 0x70
 8018dd2:	d1dd      	bne.n	8018d90 <_printf_i+0x30>
 8018dd4:	6823      	ldr	r3, [r4, #0]
 8018dd6:	f043 0320 	orr.w	r3, r3, #32
 8018dda:	6023      	str	r3, [r4, #0]
 8018ddc:	e003      	b.n	8018de6 <_printf_i+0x86>
 8018dde:	2975      	cmp	r1, #117	; 0x75
 8018de0:	d017      	beq.n	8018e12 <_printf_i+0xb2>
 8018de2:	2978      	cmp	r1, #120	; 0x78
 8018de4:	d1d4      	bne.n	8018d90 <_printf_i+0x30>
 8018de6:	2378      	movs	r3, #120	; 0x78
 8018de8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018dec:	4864      	ldr	r0, [pc, #400]	; (8018f80 <_printf_i+0x220>)
 8018dee:	e055      	b.n	8018e9c <_printf_i+0x13c>
 8018df0:	6813      	ldr	r3, [r2, #0]
 8018df2:	1d19      	adds	r1, r3, #4
 8018df4:	681b      	ldr	r3, [r3, #0]
 8018df6:	6011      	str	r1, [r2, #0]
 8018df8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018dfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018e00:	2301      	movs	r3, #1
 8018e02:	e08c      	b.n	8018f1e <_printf_i+0x1be>
 8018e04:	681b      	ldr	r3, [r3, #0]
 8018e06:	6011      	str	r1, [r2, #0]
 8018e08:	f010 0f40 	tst.w	r0, #64	; 0x40
 8018e0c:	bf18      	it	ne
 8018e0e:	b21b      	sxthne	r3, r3
 8018e10:	e7cf      	b.n	8018db2 <_printf_i+0x52>
 8018e12:	6813      	ldr	r3, [r2, #0]
 8018e14:	6825      	ldr	r5, [r4, #0]
 8018e16:	1d18      	adds	r0, r3, #4
 8018e18:	6010      	str	r0, [r2, #0]
 8018e1a:	0628      	lsls	r0, r5, #24
 8018e1c:	d501      	bpl.n	8018e22 <_printf_i+0xc2>
 8018e1e:	681b      	ldr	r3, [r3, #0]
 8018e20:	e002      	b.n	8018e28 <_printf_i+0xc8>
 8018e22:	0668      	lsls	r0, r5, #25
 8018e24:	d5fb      	bpl.n	8018e1e <_printf_i+0xbe>
 8018e26:	881b      	ldrh	r3, [r3, #0]
 8018e28:	4854      	ldr	r0, [pc, #336]	; (8018f7c <_printf_i+0x21c>)
 8018e2a:	296f      	cmp	r1, #111	; 0x6f
 8018e2c:	bf14      	ite	ne
 8018e2e:	220a      	movne	r2, #10
 8018e30:	2208      	moveq	r2, #8
 8018e32:	2100      	movs	r1, #0
 8018e34:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018e38:	6865      	ldr	r5, [r4, #4]
 8018e3a:	60a5      	str	r5, [r4, #8]
 8018e3c:	2d00      	cmp	r5, #0
 8018e3e:	f2c0 8095 	blt.w	8018f6c <_printf_i+0x20c>
 8018e42:	6821      	ldr	r1, [r4, #0]
 8018e44:	f021 0104 	bic.w	r1, r1, #4
 8018e48:	6021      	str	r1, [r4, #0]
 8018e4a:	2b00      	cmp	r3, #0
 8018e4c:	d13d      	bne.n	8018eca <_printf_i+0x16a>
 8018e4e:	2d00      	cmp	r5, #0
 8018e50:	f040 808e 	bne.w	8018f70 <_printf_i+0x210>
 8018e54:	4665      	mov	r5, ip
 8018e56:	2a08      	cmp	r2, #8
 8018e58:	d10b      	bne.n	8018e72 <_printf_i+0x112>
 8018e5a:	6823      	ldr	r3, [r4, #0]
 8018e5c:	07db      	lsls	r3, r3, #31
 8018e5e:	d508      	bpl.n	8018e72 <_printf_i+0x112>
 8018e60:	6923      	ldr	r3, [r4, #16]
 8018e62:	6862      	ldr	r2, [r4, #4]
 8018e64:	429a      	cmp	r2, r3
 8018e66:	bfde      	ittt	le
 8018e68:	2330      	movle	r3, #48	; 0x30
 8018e6a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018e6e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8018e72:	ebac 0305 	sub.w	r3, ip, r5
 8018e76:	6123      	str	r3, [r4, #16]
 8018e78:	f8cd 8000 	str.w	r8, [sp]
 8018e7c:	463b      	mov	r3, r7
 8018e7e:	aa03      	add	r2, sp, #12
 8018e80:	4621      	mov	r1, r4
 8018e82:	4630      	mov	r0, r6
 8018e84:	f7ff fef6 	bl	8018c74 <_printf_common>
 8018e88:	3001      	adds	r0, #1
 8018e8a:	d14d      	bne.n	8018f28 <_printf_i+0x1c8>
 8018e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8018e90:	b005      	add	sp, #20
 8018e92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018e96:	4839      	ldr	r0, [pc, #228]	; (8018f7c <_printf_i+0x21c>)
 8018e98:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8018e9c:	6813      	ldr	r3, [r2, #0]
 8018e9e:	6821      	ldr	r1, [r4, #0]
 8018ea0:	1d1d      	adds	r5, r3, #4
 8018ea2:	681b      	ldr	r3, [r3, #0]
 8018ea4:	6015      	str	r5, [r2, #0]
 8018ea6:	060a      	lsls	r2, r1, #24
 8018ea8:	d50b      	bpl.n	8018ec2 <_printf_i+0x162>
 8018eaa:	07ca      	lsls	r2, r1, #31
 8018eac:	bf44      	itt	mi
 8018eae:	f041 0120 	orrmi.w	r1, r1, #32
 8018eb2:	6021      	strmi	r1, [r4, #0]
 8018eb4:	b91b      	cbnz	r3, 8018ebe <_printf_i+0x15e>
 8018eb6:	6822      	ldr	r2, [r4, #0]
 8018eb8:	f022 0220 	bic.w	r2, r2, #32
 8018ebc:	6022      	str	r2, [r4, #0]
 8018ebe:	2210      	movs	r2, #16
 8018ec0:	e7b7      	b.n	8018e32 <_printf_i+0xd2>
 8018ec2:	064d      	lsls	r5, r1, #25
 8018ec4:	bf48      	it	mi
 8018ec6:	b29b      	uxthmi	r3, r3
 8018ec8:	e7ef      	b.n	8018eaa <_printf_i+0x14a>
 8018eca:	4665      	mov	r5, ip
 8018ecc:	fbb3 f1f2 	udiv	r1, r3, r2
 8018ed0:	fb02 3311 	mls	r3, r2, r1, r3
 8018ed4:	5cc3      	ldrb	r3, [r0, r3]
 8018ed6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8018eda:	460b      	mov	r3, r1
 8018edc:	2900      	cmp	r1, #0
 8018ede:	d1f5      	bne.n	8018ecc <_printf_i+0x16c>
 8018ee0:	e7b9      	b.n	8018e56 <_printf_i+0xf6>
 8018ee2:	6813      	ldr	r3, [r2, #0]
 8018ee4:	6825      	ldr	r5, [r4, #0]
 8018ee6:	6961      	ldr	r1, [r4, #20]
 8018ee8:	1d18      	adds	r0, r3, #4
 8018eea:	6010      	str	r0, [r2, #0]
 8018eec:	0628      	lsls	r0, r5, #24
 8018eee:	681b      	ldr	r3, [r3, #0]
 8018ef0:	d501      	bpl.n	8018ef6 <_printf_i+0x196>
 8018ef2:	6019      	str	r1, [r3, #0]
 8018ef4:	e002      	b.n	8018efc <_printf_i+0x19c>
 8018ef6:	066a      	lsls	r2, r5, #25
 8018ef8:	d5fb      	bpl.n	8018ef2 <_printf_i+0x192>
 8018efa:	8019      	strh	r1, [r3, #0]
 8018efc:	2300      	movs	r3, #0
 8018efe:	6123      	str	r3, [r4, #16]
 8018f00:	4665      	mov	r5, ip
 8018f02:	e7b9      	b.n	8018e78 <_printf_i+0x118>
 8018f04:	6813      	ldr	r3, [r2, #0]
 8018f06:	1d19      	adds	r1, r3, #4
 8018f08:	6011      	str	r1, [r2, #0]
 8018f0a:	681d      	ldr	r5, [r3, #0]
 8018f0c:	6862      	ldr	r2, [r4, #4]
 8018f0e:	2100      	movs	r1, #0
 8018f10:	4628      	mov	r0, r5
 8018f12:	f7e7 f9ed 	bl	80002f0 <memchr>
 8018f16:	b108      	cbz	r0, 8018f1c <_printf_i+0x1bc>
 8018f18:	1b40      	subs	r0, r0, r5
 8018f1a:	6060      	str	r0, [r4, #4]
 8018f1c:	6863      	ldr	r3, [r4, #4]
 8018f1e:	6123      	str	r3, [r4, #16]
 8018f20:	2300      	movs	r3, #0
 8018f22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018f26:	e7a7      	b.n	8018e78 <_printf_i+0x118>
 8018f28:	6923      	ldr	r3, [r4, #16]
 8018f2a:	462a      	mov	r2, r5
 8018f2c:	4639      	mov	r1, r7
 8018f2e:	4630      	mov	r0, r6
 8018f30:	47c0      	blx	r8
 8018f32:	3001      	adds	r0, #1
 8018f34:	d0aa      	beq.n	8018e8c <_printf_i+0x12c>
 8018f36:	6823      	ldr	r3, [r4, #0]
 8018f38:	079b      	lsls	r3, r3, #30
 8018f3a:	d413      	bmi.n	8018f64 <_printf_i+0x204>
 8018f3c:	68e0      	ldr	r0, [r4, #12]
 8018f3e:	9b03      	ldr	r3, [sp, #12]
 8018f40:	4298      	cmp	r0, r3
 8018f42:	bfb8      	it	lt
 8018f44:	4618      	movlt	r0, r3
 8018f46:	e7a3      	b.n	8018e90 <_printf_i+0x130>
 8018f48:	2301      	movs	r3, #1
 8018f4a:	464a      	mov	r2, r9
 8018f4c:	4639      	mov	r1, r7
 8018f4e:	4630      	mov	r0, r6
 8018f50:	47c0      	blx	r8
 8018f52:	3001      	adds	r0, #1
 8018f54:	d09a      	beq.n	8018e8c <_printf_i+0x12c>
 8018f56:	3501      	adds	r5, #1
 8018f58:	68e3      	ldr	r3, [r4, #12]
 8018f5a:	9a03      	ldr	r2, [sp, #12]
 8018f5c:	1a9b      	subs	r3, r3, r2
 8018f5e:	42ab      	cmp	r3, r5
 8018f60:	dcf2      	bgt.n	8018f48 <_printf_i+0x1e8>
 8018f62:	e7eb      	b.n	8018f3c <_printf_i+0x1dc>
 8018f64:	2500      	movs	r5, #0
 8018f66:	f104 0919 	add.w	r9, r4, #25
 8018f6a:	e7f5      	b.n	8018f58 <_printf_i+0x1f8>
 8018f6c:	2b00      	cmp	r3, #0
 8018f6e:	d1ac      	bne.n	8018eca <_printf_i+0x16a>
 8018f70:	7803      	ldrb	r3, [r0, #0]
 8018f72:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018f76:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018f7a:	e76c      	b.n	8018e56 <_printf_i+0xf6>
 8018f7c:	08019a75 	.word	0x08019a75
 8018f80:	08019a86 	.word	0x08019a86

08018f84 <__sread>:
 8018f84:	b510      	push	{r4, lr}
 8018f86:	460c      	mov	r4, r1
 8018f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018f8c:	f000 f8d4 	bl	8019138 <_read_r>
 8018f90:	2800      	cmp	r0, #0
 8018f92:	bfab      	itete	ge
 8018f94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018f96:	89a3      	ldrhlt	r3, [r4, #12]
 8018f98:	181b      	addge	r3, r3, r0
 8018f9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018f9e:	bfac      	ite	ge
 8018fa0:	6563      	strge	r3, [r4, #84]	; 0x54
 8018fa2:	81a3      	strhlt	r3, [r4, #12]
 8018fa4:	bd10      	pop	{r4, pc}

08018fa6 <__swrite>:
 8018fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018faa:	461f      	mov	r7, r3
 8018fac:	898b      	ldrh	r3, [r1, #12]
 8018fae:	05db      	lsls	r3, r3, #23
 8018fb0:	4605      	mov	r5, r0
 8018fb2:	460c      	mov	r4, r1
 8018fb4:	4616      	mov	r6, r2
 8018fb6:	d505      	bpl.n	8018fc4 <__swrite+0x1e>
 8018fb8:	2302      	movs	r3, #2
 8018fba:	2200      	movs	r2, #0
 8018fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018fc0:	f000 f868 	bl	8019094 <_lseek_r>
 8018fc4:	89a3      	ldrh	r3, [r4, #12]
 8018fc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018fca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018fce:	81a3      	strh	r3, [r4, #12]
 8018fd0:	4632      	mov	r2, r6
 8018fd2:	463b      	mov	r3, r7
 8018fd4:	4628      	mov	r0, r5
 8018fd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018fda:	f000 b817 	b.w	801900c <_write_r>

08018fde <__sseek>:
 8018fde:	b510      	push	{r4, lr}
 8018fe0:	460c      	mov	r4, r1
 8018fe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018fe6:	f000 f855 	bl	8019094 <_lseek_r>
 8018fea:	1c43      	adds	r3, r0, #1
 8018fec:	89a3      	ldrh	r3, [r4, #12]
 8018fee:	bf15      	itete	ne
 8018ff0:	6560      	strne	r0, [r4, #84]	; 0x54
 8018ff2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018ff6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018ffa:	81a3      	strheq	r3, [r4, #12]
 8018ffc:	bf18      	it	ne
 8018ffe:	81a3      	strhne	r3, [r4, #12]
 8019000:	bd10      	pop	{r4, pc}

08019002 <__sclose>:
 8019002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019006:	f000 b813 	b.w	8019030 <_close_r>
	...

0801900c <_write_r>:
 801900c:	b538      	push	{r3, r4, r5, lr}
 801900e:	4c07      	ldr	r4, [pc, #28]	; (801902c <_write_r+0x20>)
 8019010:	4605      	mov	r5, r0
 8019012:	4608      	mov	r0, r1
 8019014:	4611      	mov	r1, r2
 8019016:	2200      	movs	r2, #0
 8019018:	6022      	str	r2, [r4, #0]
 801901a:	461a      	mov	r2, r3
 801901c:	f7e9 fc13 	bl	8002846 <_write>
 8019020:	1c43      	adds	r3, r0, #1
 8019022:	d102      	bne.n	801902a <_write_r+0x1e>
 8019024:	6823      	ldr	r3, [r4, #0]
 8019026:	b103      	cbz	r3, 801902a <_write_r+0x1e>
 8019028:	602b      	str	r3, [r5, #0]
 801902a:	bd38      	pop	{r3, r4, r5, pc}
 801902c:	24001c8c 	.word	0x24001c8c

08019030 <_close_r>:
 8019030:	b538      	push	{r3, r4, r5, lr}
 8019032:	4c06      	ldr	r4, [pc, #24]	; (801904c <_close_r+0x1c>)
 8019034:	2300      	movs	r3, #0
 8019036:	4605      	mov	r5, r0
 8019038:	4608      	mov	r0, r1
 801903a:	6023      	str	r3, [r4, #0]
 801903c:	f7e9 ff13 	bl	8002e66 <_close>
 8019040:	1c43      	adds	r3, r0, #1
 8019042:	d102      	bne.n	801904a <_close_r+0x1a>
 8019044:	6823      	ldr	r3, [r4, #0]
 8019046:	b103      	cbz	r3, 801904a <_close_r+0x1a>
 8019048:	602b      	str	r3, [r5, #0]
 801904a:	bd38      	pop	{r3, r4, r5, pc}
 801904c:	24001c8c 	.word	0x24001c8c

08019050 <_fstat_r>:
 8019050:	b538      	push	{r3, r4, r5, lr}
 8019052:	4c07      	ldr	r4, [pc, #28]	; (8019070 <_fstat_r+0x20>)
 8019054:	2300      	movs	r3, #0
 8019056:	4605      	mov	r5, r0
 8019058:	4608      	mov	r0, r1
 801905a:	4611      	mov	r1, r2
 801905c:	6023      	str	r3, [r4, #0]
 801905e:	f7e9 ff0e 	bl	8002e7e <_fstat>
 8019062:	1c43      	adds	r3, r0, #1
 8019064:	d102      	bne.n	801906c <_fstat_r+0x1c>
 8019066:	6823      	ldr	r3, [r4, #0]
 8019068:	b103      	cbz	r3, 801906c <_fstat_r+0x1c>
 801906a:	602b      	str	r3, [r5, #0]
 801906c:	bd38      	pop	{r3, r4, r5, pc}
 801906e:	bf00      	nop
 8019070:	24001c8c 	.word	0x24001c8c

08019074 <_isatty_r>:
 8019074:	b538      	push	{r3, r4, r5, lr}
 8019076:	4c06      	ldr	r4, [pc, #24]	; (8019090 <_isatty_r+0x1c>)
 8019078:	2300      	movs	r3, #0
 801907a:	4605      	mov	r5, r0
 801907c:	4608      	mov	r0, r1
 801907e:	6023      	str	r3, [r4, #0]
 8019080:	f7e9 ff0d 	bl	8002e9e <_isatty>
 8019084:	1c43      	adds	r3, r0, #1
 8019086:	d102      	bne.n	801908e <_isatty_r+0x1a>
 8019088:	6823      	ldr	r3, [r4, #0]
 801908a:	b103      	cbz	r3, 801908e <_isatty_r+0x1a>
 801908c:	602b      	str	r3, [r5, #0]
 801908e:	bd38      	pop	{r3, r4, r5, pc}
 8019090:	24001c8c 	.word	0x24001c8c

08019094 <_lseek_r>:
 8019094:	b538      	push	{r3, r4, r5, lr}
 8019096:	4c07      	ldr	r4, [pc, #28]	; (80190b4 <_lseek_r+0x20>)
 8019098:	4605      	mov	r5, r0
 801909a:	4608      	mov	r0, r1
 801909c:	4611      	mov	r1, r2
 801909e:	2200      	movs	r2, #0
 80190a0:	6022      	str	r2, [r4, #0]
 80190a2:	461a      	mov	r2, r3
 80190a4:	f7e9 ff06 	bl	8002eb4 <_lseek>
 80190a8:	1c43      	adds	r3, r0, #1
 80190aa:	d102      	bne.n	80190b2 <_lseek_r+0x1e>
 80190ac:	6823      	ldr	r3, [r4, #0]
 80190ae:	b103      	cbz	r3, 80190b2 <_lseek_r+0x1e>
 80190b0:	602b      	str	r3, [r5, #0]
 80190b2:	bd38      	pop	{r3, r4, r5, pc}
 80190b4:	24001c8c 	.word	0x24001c8c

080190b8 <memmove>:
 80190b8:	4288      	cmp	r0, r1
 80190ba:	b510      	push	{r4, lr}
 80190bc:	eb01 0302 	add.w	r3, r1, r2
 80190c0:	d807      	bhi.n	80190d2 <memmove+0x1a>
 80190c2:	1e42      	subs	r2, r0, #1
 80190c4:	4299      	cmp	r1, r3
 80190c6:	d00a      	beq.n	80190de <memmove+0x26>
 80190c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80190cc:	f802 4f01 	strb.w	r4, [r2, #1]!
 80190d0:	e7f8      	b.n	80190c4 <memmove+0xc>
 80190d2:	4283      	cmp	r3, r0
 80190d4:	d9f5      	bls.n	80190c2 <memmove+0xa>
 80190d6:	1881      	adds	r1, r0, r2
 80190d8:	1ad2      	subs	r2, r2, r3
 80190da:	42d3      	cmn	r3, r2
 80190dc:	d100      	bne.n	80190e0 <memmove+0x28>
 80190de:	bd10      	pop	{r4, pc}
 80190e0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80190e4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80190e8:	e7f7      	b.n	80190da <memmove+0x22>

080190ea <_realloc_r>:
 80190ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80190ec:	4607      	mov	r7, r0
 80190ee:	4614      	mov	r4, r2
 80190f0:	460e      	mov	r6, r1
 80190f2:	b921      	cbnz	r1, 80190fe <_realloc_r+0x14>
 80190f4:	4611      	mov	r1, r2
 80190f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80190fa:	f7fe bf4f 	b.w	8017f9c <_malloc_r>
 80190fe:	b922      	cbnz	r2, 801910a <_realloc_r+0x20>
 8019100:	f7fe fefe 	bl	8017f00 <_free_r>
 8019104:	4625      	mov	r5, r4
 8019106:	4628      	mov	r0, r5
 8019108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801910a:	f000 f827 	bl	801915c <_malloc_usable_size_r>
 801910e:	42a0      	cmp	r0, r4
 8019110:	d20f      	bcs.n	8019132 <_realloc_r+0x48>
 8019112:	4621      	mov	r1, r4
 8019114:	4638      	mov	r0, r7
 8019116:	f7fe ff41 	bl	8017f9c <_malloc_r>
 801911a:	4605      	mov	r5, r0
 801911c:	2800      	cmp	r0, #0
 801911e:	d0f2      	beq.n	8019106 <_realloc_r+0x1c>
 8019120:	4631      	mov	r1, r6
 8019122:	4622      	mov	r2, r4
 8019124:	f7fe fed8 	bl	8017ed8 <memcpy>
 8019128:	4631      	mov	r1, r6
 801912a:	4638      	mov	r0, r7
 801912c:	f7fe fee8 	bl	8017f00 <_free_r>
 8019130:	e7e9      	b.n	8019106 <_realloc_r+0x1c>
 8019132:	4635      	mov	r5, r6
 8019134:	e7e7      	b.n	8019106 <_realloc_r+0x1c>
	...

08019138 <_read_r>:
 8019138:	b538      	push	{r3, r4, r5, lr}
 801913a:	4c07      	ldr	r4, [pc, #28]	; (8019158 <_read_r+0x20>)
 801913c:	4605      	mov	r5, r0
 801913e:	4608      	mov	r0, r1
 8019140:	4611      	mov	r1, r2
 8019142:	2200      	movs	r2, #0
 8019144:	6022      	str	r2, [r4, #0]
 8019146:	461a      	mov	r2, r3
 8019148:	f7e9 fe70 	bl	8002e2c <_read>
 801914c:	1c43      	adds	r3, r0, #1
 801914e:	d102      	bne.n	8019156 <_read_r+0x1e>
 8019150:	6823      	ldr	r3, [r4, #0]
 8019152:	b103      	cbz	r3, 8019156 <_read_r+0x1e>
 8019154:	602b      	str	r3, [r5, #0]
 8019156:	bd38      	pop	{r3, r4, r5, pc}
 8019158:	24001c8c 	.word	0x24001c8c

0801915c <_malloc_usable_size_r>:
 801915c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019160:	1f18      	subs	r0, r3, #4
 8019162:	2b00      	cmp	r3, #0
 8019164:	bfbc      	itt	lt
 8019166:	580b      	ldrlt	r3, [r1, r0]
 8019168:	18c0      	addlt	r0, r0, r3
 801916a:	4770      	bx	lr

0801916c <_init>:
 801916c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801916e:	bf00      	nop
 8019170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019172:	bc08      	pop	{r3}
 8019174:	469e      	mov	lr, r3
 8019176:	4770      	bx	lr

08019178 <_fini>:
 8019178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801917a:	bf00      	nop
 801917c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801917e:	bc08      	pop	{r3}
 8019180:	469e      	mov	lr, r3
 8019182:	4770      	bx	lr
